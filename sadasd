! function e(t, i, r) {
    function a(o, s) {
        if (!i[o]) {
            if (!t[o]) {
                var _ = "function" == typeof require && require;
                if (!s && _) return _(o, !0);
                if (n) return n(o, !0);
                var T = Error("Cannot find module '" + o + "'");
                throw T.code = "MODULE_NOT_FOUND", T
            }
            var E = i[o] = {
                exports: {}
            };
            t[o][0].call(E.exports, (function(e) {
                return a(t[o][1][e] || e)
            }), E, E.exports, e, t, i, r)
        }
        return i[o].exports
    }
    for (var n = "function" == typeof require && require, o = 0; o < r.length; o++) a(r[o]);
    return a
}({
    1: [function(e, t, i) {
        let r = e("worker-timers");
        window.workerTimers = r
    }, {
        "worker-timers": 4
    }],
    2: [function(e, t, i) {
        var r, a;
        r = this, a = function(e) {
            "use strict";
            var t, i, r, a, n = void 0 === Number.MAX_SAFE_INTEGER ? 9007199254740991 : Number.MAX_SAFE_INTEGER,
                o = new WeakMap,
                s = (t = o, i = function(e, i) {
                    return t.set(e, i), i
                }, r = o, function(e) {
                    var t = r.get(e),
                        a = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                    if (!e.has(a)) return i(e, a);
                    if (e.size < 536870912) {
                        for (; e.has(a);) a = Math.floor(1073741824 * Math.random());
                        return i(e, a)
                    }
                    if (e.size > n) throw Error("Congratulations, you created a collection of unique numbers which uses all available integers!");
                    for (; e.has(a);) a = Math.floor(Math.random() * n);
                    return i(e, a)
                }),
                _ = (a = s, function(e) {
                    var t = a(e);
                    return e.add(t), t
                });
            e.addUniqueNumber = _, e.generateUniqueNumber = s
        }, "object" == typeof i && void 0 !== t ? a(i) : "function" == typeof define && define.amd ? define(["exports"], a) : a((r = "undefined" != typeof globalThis ? globalThis : r || self).fastUniqueNumbers = {})
    }, {}],
    3: [function(e, t, i) {
        var r, a;
        r = this, a = function(e, t) {
            "use strict";
            e.load = function(e) {
                var i = new Map([
                        [0, function() {}]
                    ]),
                    r = new Map([
                        [0, function() {}]
                    ]),
                    a = new Map,
                    n = new Worker(e);
                return n.addEventListener("message", (function(e) {
                    var t, n = e.data;
                    if (void 0 !== (t = n).method && "call" === t.method) {
                        var o = n.params,
                            s = o.timerId,
                            _ = o.timerType;
                        if ("interval" === _) {
                            var T = i.get(s);
                            if ("number" == typeof T) {
                                var E = a.get(T);
                                if (void 0 === E || E.timerId !== s || E.timerType !== _) throw Error("The timer is in an undefined state.")
                            } else {
                                if (void 0 === T) throw Error("The timer is in an undefined state.");
                                T()
                            }
                        } else if ("timeout" === _) {
                            var I = r.get(s);
                            if ("number" == typeof I) {
                                var l = a.get(I);
                                if (void 0 === l || l.timerId !== s || l.timerType !== _) throw Error("The timer is in an undefined state.")
                            } else {
                                if (void 0 === I) throw Error("The timer is in an undefined state.");
                                I(), r.delete(s)
                            }
                        }
                    } else {
                        if (null !== (u = n).error || "number" != typeof u.id) throw Error(n.error.message);
                        var u, d = n.id,
                            c = a.get(d);
                        if (void 0 === c) throw Error("The timer is in an undefined state.");
                        var R = c.timerId,
                            h = c.timerType;
                        a.delete(d), "interval" === h ? i.delete(R) : r.delete(R)
                    }
                })), {
                    clearInterval: function(e) {
                        var r = t.generateUniqueNumber(a);
                        a.set(r, {
                            timerId: e,
                            timerType: "interval"
                        }), i.set(e, r), n.postMessage({
                            id: r,
                            method: "clear",
                            params: {
                                timerId: e,
                                timerType: "interval"
                            }
                        })
                    },
                    clearTimeout: function(e) {
                        var i = t.generateUniqueNumber(a);
                        a.set(i, {
                            timerId: e,
                            timerType: "timeout"
                        }), r.set(e, i), n.postMessage({
                            id: i,
                            method: "clear",
                            params: {
                                timerId: e,
                                timerType: "timeout"
                            }
                        })
                    },
                    setInterval: function(e, r) {
                        var a = t.generateUniqueNumber(i);
                        return i.set(a, (function() {
                            e(), "function" == typeof i.get(a) && n.postMessage({
                                id: null,
                                method: "set",
                                params: {
                                    delay: r,
                                    now: performance.now(),
                                    timerId: a,
                                    timerType: "interval"
                                }
                            })
                        })), n.postMessage({
                            id: null,
                            method: "set",
                            params: {
                                delay: r,
                                now: performance.now(),
                                timerId: a,
                                timerType: "interval"
                            }
                        }), a
                    },
                    setTimeout: function(e, i) {
                        var a = t.generateUniqueNumber(r);
                        return r.set(a, e), n.postMessage({
                            id: null,
                            method: "set",
                            params: {
                                delay: i,
                                now: performance.now(),
                                timerId: a,
                                timerType: "timeout"
                            }
                        }), a
                    }
                }
            }
        }, "object" == typeof i && void 0 !== t ? a(i, e("fast-unique-numbers")) : "function" == typeof define && define.amd ? define(["exports", "fast-unique-numbers"], a) : a((r = "undefined" != typeof globalThis ? globalThis : r || self).workerTimersBroker = {}, r.fastUniqueNumbers)
    }, {
        "fast-unique-numbers": 2
    }],
    4: [function(e, t, i) {
        var r, a;
        r = this, a = function(e, t) {
            "use strict";
            var i, r, a = (i = t.load, r = null, function() {
                if (null !== r) return r;
                var e = new Blob(['(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();'], {
                        type: "application/javascript; charset=utf-8"
                    }),
                    t = URL.createObjectURL(e);
                return r = i(t), setTimeout((function() {
                    return URL.revokeObjectURL(t)
                })), r
            });
            e.clearInterval = function(e) {
                return a().clearInterval(e)
            }, e.clearTimeout = function(e) {
                return a().clearTimeout(e)
            }, e.setInterval = function(e, t) {
                return a().setInterval(e, t)
            }, e.setTimeout = function(e, t) {
                return a().setTimeout(e, t)
            }
        }, "object" == typeof i && void 0 !== t ? a(i, e("worker-timers-broker")) : "function" == typeof define && define.amd ? define(["exports", "worker-timers-broker"], a) : a((r = "undefined" != typeof globalThis ? globalThis : r || self).workerTimers = {}, r.workerTimersBroker)
    }, {
        "worker-timers-broker": 3
    }]
}, {}, [1]);
const environments = {
    DEV: "development",
    PROD: "production"
};
let cheatInterval;
const environment = environments.PROD,
    times = [];
let OldInventory, chestDelay, Spectator, lastCrafted, lastRecycled, FPS = 0,
    CrownCoolDown = 0,
    TimerTools = {
        HPTimer: 0,
        GaugeTimer: 0
    },
    InventoryCounter = 0,
    sandstorm = new Image,
    blizzard = new Image;
sandstorm.src = "https://cdn.discordapp.com/attachments/1082692381054353490/1089210164374143187/sandstorm.png", blizzard.src = "https://cdn.discordapp.com/attachments/1082692381054353490/1089210164596449310/blizzard.png";
class createText {
    constructor(e, t, i) {
        this.canvas = document.createElement("canvas"), this.ctx = this.canvas.getContext("2d"), this.canvas.width = e, this.canvas.height = t, this.buildType = i
    }
    drawText(e, t, i, r) {
        switch (this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height), this.ctx.font = t + "px Baloo Paaji", this.ctx.strokeStyle = i, this.ctx.fillStyle = r, this.ctx.lineWidth = 7, this.buildType) {
            case 1:
                this.ctx.strokeText("x" + (255 & e), 15, 40), this.ctx.fillText("x" + (255 & e), 15, 40), this.ctx.strokeText("x" + ((65280 & e) >> 8), 15, 60), this.ctx.fillText("x" + ((65280 & e) >> 8), 15, 60);
                break;
            case 2:
                this.ctx.strokeText("x" + (31 & e), 15, 40), this.ctx.fillText("x" + (31 & e), 15, 40), this.ctx.strokeText("x" + ((992 & e) >> 5), 15, 60), this.ctx.fillText("x" + ((992 & e) >> 5), 15, 60), this.ctx.strokeText("x" + ((31744 & e) >> 10), 15, 80), this.ctx.fillText("x" + ((31744 & e) >> 10), 15, 80);
                break;
            case 3:
                this.ctx.strokeText(e[0], 15, 40), this.ctx.fillText(e[0], 15, 40), this.ctx.strokeText((16 & e[1]) >> 4 ? "L" : "U", 15, 60), this.ctx.fillText((16 & e[1]) >> 4 ? "L" : "U", 15, 60), this.ctx.strokeText((16 & e[1]) >> 4 ? e[1] - 16 : e[1], 15, 80), this.ctx.fillText((16 & e[1]) >> 4 ? e[1] - 16 : e[1], 15, 80);
                break;
            default:
                this.ctx.strokeText(e, 15, 40), this.ctx.fillText(e, 15, 40)
        }
    }
}
let HackSettings = {
    AutoSpike: {
        enabled: !1,
        key: "Space",
        mode: !0,
        preferences: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
        draw: !0
    },
    AutoSteal: {
        enabled: !1,
        key: "KeyR",
        draw: !0
    },
    CipherMessage: {
        enabled: !1,
        key: !1,
        cipherKey: 3,
        draw: !0,
        prefix: "!#"
    },
    SwordInChest: {
        enabled: !1,
        draw: !0,
        key: "KeyE"
    },
    AutoBridge: {
        enabled: !1,
        draw: !0,
        key: "KeyC"
    },
    DropSword: {
        enabled: !1,
        key: "ShiftLeft",
        draw: !0
    },
    AutoSteal: {
        enabled: !1,
        key: "KeyR",
        draw: !0
    },
    Spectator: {
        key: "KeyP"
    },
    AutoBand: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    AutoTotem: {
        enabled: !1,
        key: "KeyH",
        draw: !0
    },
    AutoCraft: {
        enabled: !1,
        key: "KeyK",
        draw: !0
    },
    AutoCrown: {
        enabled: !1,
        key: "KeyU",
        draw: !0
    },
    AutoRecycle: {
        enabled: !1,
        key: "KeyL",
        draw: !0
    },
    AutoExe: {
        enabled: !1,
        key: "KeyB",
        draw: !0
    },
    AutoBread: {
        enabled: !1,
        key: "KeyN",
        draw: !0
    },
    Reconnect: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    Xray: {
        enabled: !1,
        key: "KeyF",
        opacity: .5,
        draw: !0
    },
    StormAlert: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    FpsBoost: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    NoFog: {
        enabled: !1,
        key: !1
    },
    AutoBuyKit: {
        enabled: !1,
        options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1],
        selectedKit: null,
        draw: !1
    },
    ExtendedChestRange: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    Timer: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    AutoBook: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    ListEnabledHacks: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    ChestOnTop: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    Roofs: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    ShowObjectChunks: {
        enabled: !1,
        types: {
            res: !1,
            chest: !1,
            windmills: !1,
            ovens: !1,
            ext: !1,
            totem: !1
        },
        key: !1,
        draw: !1
    },
    ShowChunksInPreview: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    ColoredSpikes: {
        enabled: !1,
        options: ["Napi Spikes", "Xmre Spikes", "Didactic Spikes"],
        key: !1,
        draw: !1
    },
    FPS: {
        enabled: !1,
        draw: !1
    },
    DrawPlayerOnTop: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    DrawItemsOnChest: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    DropOrDeadBox: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    AntiStealToken: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    DrawBoxesOnTop: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    BuildingInfo: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    Zoom: {
        xSlider: 500,
        ySlider: 500,
        realZoomX: 275,
        realZoomY: 160,
        draw: !1
    },
    AutoRespawn: {
        enabled: !1,
        key: !1,
        draw: !1
    },
    Tokens: {
        enabled: !1,
        key: !1,
        token: null,
        tokenid: null,
        draw: !1
    }
};

function GetFPS() {
    const e = performance.now();
    for (; times.length > 0 && times[0] <= e - 1e3;) times.shift();
    times.push(e), FPS = times.length - 1
}
window.HackSettings = HackSettings;
let HelperFns = {
    isPlayerHoldingWeapon: (e, t) => {
        switch (e.right) {
            case 34:
            case 18:
            case 33:
            case 15:
            case 14:
            case 13:
            case 12:
            case 16:
            case 17:
                return 2;
            case 57:
            case 5:
            case 6:
            case 30:
            case 62:
            case 9:
            case 0:
            case 63:
            case 19:
                return 1;
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 70:
            case 69:
                return 3;
            case 45:
                if (t) return 4;
            case -1:
                if (t) return 5
        }
        return 0
    },
    isInRadius: (e, t) => {
        var i = Math.floor(e.x / 100),
            r = Math.floor(e.y / 100);
        if (t.Chunk[`${i.toString()+r.toString()}`]) return 1
    },
    CipherMessage: (e, t) => {
        let i = "";
        for (let r = 0; r < e.length; r++) {
            let a = e.charCodeAt(r);
            a >= 65 && a <= 90 ? a = (a - 65 + t) % 26 + 65 : a >= 97 && a <= 122 && (a = (a - 97 + t) % 26 + 97), i += String.fromCharCode(a)
        }
        return HackSettings.CipherMessage.prefix + i
    },
    DeCipherMessage: (e, t) => {
        let i = "";
        for (let r = 0; r < e.length; r++) {
            let a = e.charCodeAt(r);
            a >= 65 && a <= 90 ? a = (a - 65 - t + 26) % 26 + 65 : a >= 97 && a <= 122 && (a = (a - 97 - t + 26) % 26 + 97), i += String.fromCharCode(a)
        }
        return i
    },
    checkAlly: e => {
        for (var t = 0; t < user.team.length; t++)
            if (user.team[t] == e) return 1;
        return 0
    },
    checkTotem: e => user.team[0] === e ? 1 : 0,
    updateAllys: () => {
        for (let e = 0; e < world.units[0].length; e++) world.units[0][e].ally = user.id === world.units[0][e].pid || HelperFns.checkAlly(world.units[0][e].pid);
        for (let e = 0; e < world.units[5].length; e++) world.units[5][e].ally = user.id === world.units[5][e].pid || HelperFns.checkAlly(world.units[5][e].pid);
        for (let e = 0; e < world.units[12].length; e++) world.units[12][e].ally = user.id === world.units[12][e].pid || HelperFns.checkAlly(world.units[12][e].pid);
        for (let e = 0; e < world.units[13].length; e++) world.units[13][e].ally = user.id === world.units[13][e].pid || HelperFns.checkAlly(world.units[13][e].pid);
        for (let e = 0; e < world.units[14].length; e++) world.units[14][e].ally = user.id === world.units[14][e].pid || HelperFns.checkAlly(world.units[14][e].pid);
        for (let e = 0; e < world.units[20].length; e++) world.units[20][e].ally = user.id === world.units[20][e].pid || HelperFns.checkAlly(world.units[20][e].pid);
        for (let e = 0; e < world.units[52].length; e++) world.units[52][e].ally = user.id === world.units[52][e].pid || HelperFns.checkAlly(world.units[52][e].pid);
        for (let e = 0; e < world.units[45].length; e++) world.units[45][e].ally = user.id === world.units[45][e].pid || HelperFns.checkAlly(world.units[45][e].pid);
        for (let e = 0; e < world.units[46].length; e++) world.units[46][e].ally = user.id === world.units[46][e].pid || HelperFns.checkAlly(world.units[46][e].pid);
        for (let e = 0; e < world.units[47].length; e++) world.units[47][e].ally = user.id === world.units[47][e].pid || HelperFns.checkAlly(world.units[47][e].pid);
        for (let e = 0; e < world.units[48].length; e++) world.units[48][e].ally = user.id === world.units[48][e].pid || HelperFns.checkAlly(world.units[48][e].pid);
        for (let e = 0; e < world.units[49].length; e++) world.units[49][e].ally = user.id === world.units[49][e].pid || HelperFns.checkAlly(world.units[49][e].pid);
        for (let e = 0; e < world.units[53].length; e++) world.units[53][e].ally = user.id === world.units[53][e].pid || HelperFns.checkAlly(world.units[53][e].pid);
        for (let e = 0; e < world.units[10].length; e++) world.units[10][e].ally = user.id === world.units[10][e].pid || HelperFns.checkAlly(world.units[10][e].pid);
        for (let e = 0; e < world.units[15].length; e++) world.units[15][e].ally = user.id === world.units[15][e].pid || HelperFns.checkAlly(world.units[15][e].pid);
        for (let e = 0; e < world.units[16].length; e++) world.units[16][e].ally = user.id === world.units[16][e].pid || HelperFns.checkAlly(world.units[16][e].pid);
        for (let e = 0; e < world.units[17].length; e++) world.units[17][e].ally = user.id === world.units[17][e].pid || HelperFns.checkAlly(world.units[17][e].pid);
        for (let e = 0; e < world.units[21].length; e++) world.units[21][e].ally = user.id === world.units[21][e].pid || HelperFns.checkAlly(world.units[21][e].pid);
        for (let e = 0; e < world.units[51].length; e++) world.units[51][e].ally = user.id === world.units[51][e].pid || HelperFns.checkAlly(world.units[51][e].pid);
        for (let e = 0; e < world.units[11].length; e++) world.units[11][e].ally = user.id === world.units[11][e].pid || HelperFns.checkAlly(world.units[11][e].pid)
    },
    InitializeGUI: () => {
        let e = new guify({
            title: "Cheat",
            theme: {
                name: "Cheat",
                colors: {
                    panelBackground: "rgb(0,0,0)",
                    componentBackground: "rgb(42, 10, 87)",
                    componentForeground: "rgb(131, 96, 235)",
                    textPrimary: "rgb(102, 31, 143)",
                    textSecondary: "rgb(255, 255, 255)",
                    textHover: "rgb(102, 31, 143)"
                },
                font: {
                    fontFamily: "Baloo Paaji",
                    fontSize: "20px",
                    fontWeight: "1"
                }
            },
            align: "right",
            width: "28%",
            barMode: "none",
            panelMode: "none",
            opacity: 1,
            open: !1
        });
        e.Register({
            type: "folder",
            label: "Visuals",
            open: !1
        }), e.Register({
            type: "folder",
            label: "Misc",
            open: !1
        }), e.Register({
            type: "folder",
            label: "AutoSpike",
            open: !1
        }), e.Register({
            type: "folder",
            label: "Token",
            open: !1
        }), e.Register([{
            type: "button",
            label: "Set AutoSpike Key",
            action: e => {
                HelperFns.controls.setKeyBind("AutoSpike")
            }
        }, {
            type: "display",
            label: "AutoSpike Key:",
            object: HackSettings.AutoSpike,
            property: "key"
        }, {
            type: "checkbox",
            label: "AutoSpike 2",
            object: HackSettings.AutoSpike,
            property: "mode",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "select",
            label: "1",
            object: HackSettings.AutoSpike.preferences,
            property: "0",
            options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "select",
            label: "2",
            object: HackSettings.AutoSpike.preferences,
            property: "1",
            options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "select",
            label: "3",
            object: HackSettings.AutoSpike.preferences,
            property: "2",
            options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "select",
            label: "4",
            object: HackSettings.AutoSpike.preferences,
            property: "3",
            options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "select",
            label: "5",
            object: HackSettings.AutoSpike.preferences,
            property: "4",
            options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "select",
            label: "6",
            object: HackSettings.AutoSpike.preferences,
            property: "5",
            options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "select",
            label: "7",
            object: HackSettings.AutoSpike.preferences,
            property: "6",
            options: ["Reidite Spike", "Amethyst Spike", "Diamond Spike", "Gold Spike", "Stone Spike", "Wood Spike", "Wood Wall", "Nothing"],
            onChange: e => {
                HelperFns.saveSettings()
            }
        }], {
            folder: "AutoSpike"
        }), e.Register([{
            type: "checkbox",
            label: "Roofs",
            object: HackSettings.Roofs,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "PlayerOnTop",
            object: HackSettings.DrawPlayerOnTop,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "Timers",
            object: HackSettings.Timer,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "ColoredSpikes",
            object: HackSettings.ColoredSpikes,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "ListEnabledHacks",
            object: HackSettings.ListEnabledHacks,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "DrawItemsOnChest",
            object: HackSettings.DrawItemsOnChest,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "DrawBoxesOnTop",
            object: HackSettings.DrawBoxesOnTop,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "DrawChestsOnTop",
            object: HackSettings.ChestOnTop,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "ExtendedChestRange",
            object: HackSettings.ExtendedChestRange,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "ShowObjectChunks",
            object: HackSettings.ShowObjectChunks,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "folder",
            label: "Chunks",
            open: !1
        }, {
            type: "checkbox",
            label: "ShowChunksInPreview",
            object: HackSettings.ShowChunksInPreview,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "DropOrDeadBox",
            object: HackSettings.DropOrDeadBox,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "BuildingInfo",
            object: HackSettings.BuildingInfo,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "NoFog",
            object: HackSettings.NoFog,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "Bliz&SandStorm",
            object: HackSettings.StormAlert,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "FPS Boost",
            object: HackSettings.FpsBoost,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "Show FPS",
            object: HackSettings.FPS,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "button",
            label: "Set Xray Key",
            action: e => {
                HelperFns.controls.setKeyBind("Xray")
            }
        }, {
            type: "display",
            label: "Xray Key:",
            object: HackSettings.Xray,
            property: "key"
        }, {
            type: "range",
            label: "Xray Opacity",
            min: 0,
            max: 1,
            step: .1,
            object: HackSettings.Xray,
            property: "opacity",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "range",
            label: "Zoom Range X",
            min: 1,
            max: 1e3,
            step: 10,
            object: HackSettings.Zoom,
            property: "xSlider",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "range",
            label: "Zoom Range Y",
            min: 1,
            max: 1e3,
            step: 10,
            object: HackSettings.Zoom,
            property: "ySlider",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "range",
            label: "Real Zoom Range X",
            min: -4e3,
            max: 4800,
            step: 10,
            object: HackSettings.Zoom,
            property: "realZoomX",
            onChange: e => {
                HelperFns.saveSettings(), console.log("X:" + (Math.floor(-user.cam.x) + HackSettings.Zoom.realZoomX))
            }
        }, {
            type: "range",
            label: "Real Zoom Range Y",
            min: -4e3,
            max: 4800,
            step: 10,
            object: HackSettings.Zoom,
            property: "realZoomY",
            onChange: e => {
                HelperFns.saveSettings(), console.log("Y:" + (Math.floor(-user.cam.y) + HackSettings.Zoom.realZoomY))
            }
        }], {
            folder: "Visuals"
        }), e.Register([{
            type: "checkbox",
            label: "ShowObjectChunks: Chests",
            object: HackSettings.ShowObjectChunks.types,
            property: "chest",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "ShowObjectChunks: Extractors",
            object: HackSettings.ShowObjectChunks.types,
            property: "ext",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "ShowObjectChunks: Windmills",
            object: HackSettings.ShowObjectChunks.types,
            property: "windmills",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "ShowObjectChunks: Ovens",
            object: HackSettings.ShowObjectChunks.types,
            property: "ovens",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "ShowObjectChunks: Resurrection Stones",
            object: HackSettings.ShowObjectChunks.types,
            property: "res",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "ShowObjectChunks: Totem",
            object: HackSettings.ShowObjectChunks.types,
            property: "totem",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }], {
            folder: "Chunks"
        }), e.Register([{
            type: "checkbox",
            label: "AutoBook",
            object: HackSettings.AutoBook,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "AutoEatBands",
            object: HackSettings.AutoBand,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "CipherMessage",
            object: HackSettings.CipherMessage,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "text",
            label: "Cipher Key",
            object: HackSettings.CipherMessage,
            property: "cipherKey",
            listenMode: "input",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "text",
            label: "Cipher Prefix",
            object: HackSettings.CipherMessage,
            property: "prefix",
            listenMode: "input",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "AutoRespawn",
            object: HackSettings.AutoRespawn,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "Auto Reconnect",
            object: HackSettings.Reconnect,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "AutoCrown",
            object: HackSettings.AutoCrown,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "AutoBuyKit",
            object: HackSettings.AutoBuyKit,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "select",
            label: "Kit to buy",
            object: HackSettings.AutoBuyKit,
            property: "selectedKit",
            options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1],
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "checkbox",
            label: "AntiStealToken",
            object: HackSettings.AntiStealToken,
            property: "enabled",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "button",
            label: "Set AutoBridge Key",
            action: e => {
                HelperFns.controls.setKeyBind("AutoBridge")
            }
        }, {
            type: "display",
            label: "AutoBridge Key:",
            object: HackSettings.AutoBridge,
            property: "key"
        }, {
            type: "button",
            label: "Set DropSword Key",
            action: e => {
                HelperFns.controls.setKeyBind("DropSword")
            }
        }, {
            type: "display",
            label: "DropSword Key:",
            object: HackSettings.DropSword,
            property: "key"
        }, {
            type: "button",
            label: "Set AutoSteal Key",
            action: e => {
                HelperFns.controls.setKeyBind("AutoSteal")
            }
        }, {
            type: "display",
            label: "AutoSteal Key:",
            object: HackSettings.AutoSteal,
            property: "key"
        }, {
            type: "button",
            label: "Set AutoExe Key",
            action: e => {
                HelperFns.controls.setKeyBind("AutoExe")
            }
        }, {
            type: "display",
            label: "AutoExe Key:",
            object: HackSettings.AutoExe,
            property: "key"
        }, {
            type: "button",
            label: "Set AutoBread Key",
            action: e => {
                HelperFns.controls.setKeyBind("AutoBread")
            }
        }, {
            type: "display",
            label: "AutoBread Key:",
            object: HackSettings.AutoBread,
            property: "key"
        }, {
            type: "button",
            label: "Set SwordInChest Key",
            action: e => {
                HelperFns.controls.setKeyBind("SwordInChest")
            }
        }, {
            type: "display",
            label: "SwordInChest Key:",
            object: HackSettings.SwordInChest,
            property: "key"
        }, {
            type: "button",
            label: "Set AutoTotem Key",
            action: e => {
                HelperFns.controls.setKeyBind("AutoTotem")
            }
        }, {
            type: "display",
            label: "AutoTotem Key:",
            object: HackSettings.AutoTotem,
            property: "key"
        }, {
            type: "button",
            label: "Set AutoCraft Key",
            action: e => {
                HelperFns.controls.setKeyBind("AutoCraft")
            }
        }, {
            type: "display",
            label: "AutoCraft Key:",
            object: HackSettings.AutoCraft,
            property: "key"
        }, {
            type: "button",
            label: "Set AutoRecycle Key",
            action: e => {
                HelperFns.controls.setKeyBind("AutoRecycle")
            }
        }, {
            type: "display",
            label: "AutoRecycle Key:",
            object: HackSettings.AutoRecycle,
            property: "key"
        }, {
            type: "button",
            label: "Set Spectator Key",
            action: e => {
                HelperFns.controls.setKeyBind("Spectator")
            }
        }, {
            type: "display",
            label: "Spectator Key:",
            object: HackSettings.Spectator,
            property: "key"
        }, {
            type: "button",
            label: "Set AutoCrown Key",
            action: e => {
                HelperFns.controls.setKeyBind("AutoCrown")
            }
        }, {
            type: "display",
            label: "AutoCrown Key:",
            object: HackSettings.AutoCrown,
            property: "key"
        }], {
            folder: "Misc"
        }), e.Register([{
            type: "button",
            label: "Copy Token",
            action: e => {
                prompt("Copy ur token", "```Token: " + HackSettings.Tokens.token + "\nTokenID: " + HackSettings.Tokens.tokenid + "```")
            }
        }, {
            type: "button",
            label: "Create New Token",
            action: e => {
                window.baguette(), HackSettings.Tokens.token = window.kot2.substring(0, 6) + Utils.generate_token(14).substring(6), HelperFns.saveSettings()
            }
        }, {
            type: "button",
            label: "Delete Token",
            action: e => {
                window.baguette(), HackSettings.Tokens.token = "", HelperFns.saveSettings()
            }
        }, {
            type: "display",
            label: "Save Token"
        }, {
            type: "text",
            label: "Token",
            object: HackSettings.Tokens,
            property: "token",
            listenMode: "input",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }, {
            type: "text",
            label: "TokenID",
            object: HackSettings.Tokens,
            property: "tokenid",
            listenMode: "input",
            onChange: e => {
                HelperFns.saveSettings()
            }
        }], {
            folder: "Token"
        })
    },
    controls: null,
    controller: class {
        setKeyBind(e) {
            HackSettings[e].key = "Press Any Key";
            let t = 0;
            document.addEventListener("keydown", (function i(r) {
                t++, t >= 1 && ("Escape" == r.code ? HackSettings[e].key = "NONE" : HackSettings[e].key = r.code, document.removeEventListener("keydown", i), HelperFns.saveSettings())
            }))
        }
    },
    saveSettings: () => {
        for (let e in HackSettings) localStorage.setItem(e + "ClientUser", JSON.stringify(HackSettings[e]))
    },
    loadSettings: () => {
        for (let e in HackSettings) {
            let t = localStorage.getItem(e + "ClientUser");
            t && (HackSettings[e] = JSON.parse(t))
        }
    },
    LoadHack: () => {
        HelperFns.loadSettings(), HackSettings.AutoSpike.enabled = !1, HelperFns.controls = new HelperFns.controller;
        let e = document.createElement("script");
        e.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js", e.onload = function() {
            HelperFns.InitializeGUI()
        }, document.body.appendChild(e)
    }
};

function RNG(e) {
    this.m = 2147483648, this.a = 1103515245, this.c = 12345, this.state = e || Math.floor(Math.random() * (this.m - 1))
}
RNG.prototype.random = function() {
    return this.state = (this.a * this.state + this.c) % this.m, this.state / this.m
}, RNG.prototype.set_seed = function(e) {
    this.state = e
}, RAND_SIZE = 1e4, RANDOM = [];
var rrr = new RNG;
rrr.set_seed((new Date).getTime());
for (var k = 0; k < RAND_SIZE; k++) RANDOM.push(rrr.random());

function fun18_token(e, t, i, r) {
    const a = ~(59259 & e) & e | 59259 & ~(59259 & e),
        n = ~(56097 & t) & t | 56097 & ~(56097 & t),
        o = (1664525 * (43315 + i) + 1013904223) % 4294967296,
        s = (8 << (r >> 24 & 255)) + (32 << (r >> 32 & 255)) + (24 << (r >> 8 & 255)) + (16 << (r >> 16 & 255)),
        _ = fun19_token(a, n, o, s, a, n),
        T = fun22_token(o, s, a, n, o),
        E = (fun20_token(s, a, n, o, s, a), (1013904223 + 1664525 * (26191 + (_ ^ T))) % 4294967296);
    return (38630 | E) & ~(38630 & E)
}

function fun13_token(e, t, i, r, a, n) {
    const o = (214013 * (39488 + e) + 2531011) % 4294967296,
        s = ~(49976 & t) & t | 49976 & ~(49976 & t),
        _ = ~(35856 & i) & i | 35856 & ~(35856 & i),
        T = 52219 ^ r,
        E = (a + 3575) % 65503,
        I = ~(6932 & n) & n | 6932 & ~(6932 & n),
        l = fun15_token(o, s, _, T, E),
        u = fun14_token(I, o, s, _, T, E),
        d = (fun35_token(I, o, s, _, T, E), (1013904223 + 1664525 * (60709 + (l ^ u))) % 4294967296);
    return ~(42138 & d) & d | 42138 & ~(42138 & d)
}

function fun16_token(e, t, i, r, a) {
    const n = (2147483629 * (e + 14772) + 2147483587) % 2147483647,
        o = 63080 ^ t,
        s = (22695477 * (i + 60304) + 1) % 4294967296,
        _ = 5467 & ~(5467 & r) | ~(5467 & r) & r,
        T = (40165 | a) & ~(40165 & a),
        E = fun17_token(n, o, s, _),
        I = fun22_token(T, n, o, s, _);
    return (1664525 * (28765 + ((16 << ((E ^ I) >> 24 & 255)) + (8 << ((E ^ I) >> 16 & 255)) + (24 << ((E ^ I) >> 32 & 255)) + (32 << ((E ^ I) >> 8 & 255)) ^ fun33_token(T, n, o, s, _, T))) + 1013904223) % 4294967296
}

function fun11_token(e, t) {
    const i = ~(41406 & e) & e | 41406 & ~(41406 & e),
        r = (1103515245 * (t + 17922) + 12345) % 2147483648,
        a = fun25_token(i, r, i);
    fun12_token(r, i, r, i);
    return (2147483629 * (42346 + (18573 ^ a ^ fun31_token(r, i, r, i, r))) + 2147483587) % 2147483647
}

function fun9_token(e, t, i, r, a) {
    const n = (12345 + 1103515245 * (23101 + e)) % 2147483648,
        o = 58614 ^ t,
        s = (214013 * (i + 45267) + 2531011) % 4294967296,
        _ = 40810 ^ r,
        T = (24 << (a >> 24 & 255)) + (8 << (a >> 32 & 255)) + (32 << (a >> 8 & 255)) + (16 << (a >> 16 & 255)),
        E = fun23_token(n, o),
        I = fun18_token(s, _, T, n),
        l = (fun10_token(o, s, _, T), (24 << ((E ^ I) >> 24 & 255)) + (32 << ((E ^ I) >> 16 & 255)) + (8 << ((E ^ I) >> 32 & 255)) + (16 << ((E ^ I) >> 8 & 255)));
    return ~(13644 & l) & l | 13644 & ~(13644 & l)
}

function fun36_token(e, t, i, r) {
    const a = 11762 ^ e,
        n = 19425 & ~(19425 & t) | ~(19425 & t) & t;
    return (1664525 * (55182 + ((1664525 * (17757 + ((32 << ((a ^ n) >> 32 & 255)) + (8 << ((a ^ n) >> 8 & 255)) + (24 << ((a ^ n) >> 24 & 255)) + (16 << ((a ^ n) >> 16 & 255)) ^ (32 << (i >> 16 & 255)) + (8 << (i >> 32 & 255)) + (24 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)))) + 1013904223) % 4294967296 ^ (259 & ~(259 & r) | ~(259 & r) & r))) + 1013904223) % 4294967296
}

function fun31_token(e, t, i, r, a) {
    const n = (32 << (e >> 24 & 255)) + (16 << (e >> 8 & 255)) + (24 << (e >> 16 & 255)) + (8 << (e >> 32 & 255)),
        o = (t + 39144) % 65406,
        s = 34575 ^ i,
        _ = ~(37841 & r) & r | 37841 & ~(37841 & r),
        T = (25975 | a) & ~(25975 & a),
        E = fun36_token(n, o, s, _);
    fun32_token(T, n, o, s, _), fun35_token(T, n, o, s, _, T);
    return 36297 ^ (19326 | E) & ~(19326 & E)
}

function fun26_token(e, t, i, r, a) {
    const n = (24 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)),
        o = (12345 + 1103515245 * (t + 3024)) % 2147483648,
        s = (8 << (i >> 8 & 255)) + (32 << (i >> 32 & 255)) + (24 << (i >> 16 & 255)) + (16 << (i >> 24 & 255)),
        _ = (1 + 22695477 * (r + 41324)) % 4294967296,
        T = (19607 | a) & ~(19607 & a),
        E = fun27_token(n, o),
        I = (fun32_token(s, _, T, n, o), fun30_token(s, _, T, n, o, s), 49323 & ~(49323 & E) | ~(49323 & E) & E);
    return ~(46567 & I) & (46567 | I)
}

function fun17_token(e, t, i, r) {
    const a = (57611 | e) & ~(57611 & e),
        n = (1664525 * (t + 56889) + 1013904223) % 4294967296,
        o = 62842 ^ i,
        s = ~(1179 & r) & r | 1179 & ~(1179 & r),
        _ = fun36_token(a, n, o, s),
        T = fun21_token(a, n, o, s),
        E = (fun18_token(a, n, o, s), (24 << ((_ ^ T) >> 24 & 255)) + (8 << ((_ ^ T) >> 16 & 255)) + (16 << ((_ ^ T) >> 32 & 255)) + (32 << ((_ ^ T) >> 8 & 255)));
    return ~(63304 & E) & (63304 | E)
}

function fun0_token(e, t, i, r, a, n) {
    const o = (1013904223 + 1664525 * (e + 28824)) % 4294967296,
        s = (1013904223 + 1664525 * (13210 + t)) % 4294967296,
        _ = 32165 & ~(32165 & i) | ~(32165 & i) & i,
        T = (24 << (r >> 24 & 255)) + (16 << (r >> 8 & 255)) + (8 << (r >> 16 & 255)) + (32 << (r >> 32 & 255)),
        E = (1 + 22695477 * (39199 + a)) % 4294967296,
        I = 33037 ^ n,
        l = fun1_token(o, s, _);
    fun21_token(T, E, I, o);
    return (1103515245 * (34159 + (2959 ^ l ^ fun7_token(s, _, T, E))) + 12345) % 2147483648
}

function fun19_token(e, t, i, r, a, n) {
    const o = 10715 ^ e,
        s = (24 << (t >> 16 & 255)) + (16 << (t >> 32 & 255)) + (32 << (t >> 8 & 255)) + (8 << (t >> 24 & 255)),
        _ = (8 << (i >> 16 & 255)) + (32 << (i >> 24 & 255)) + (16 << (i >> 8 & 255)) + (24 << (i >> 32 & 255)),
        T = 40782 ^ r,
        E = 41301 ^ a,
        I = ~(12091 & n) & (12091 | n),
        l = fun20_token(o, s, _, T, E, I),
        u = (fun20_token(o, s, _, T, E, I), fun29_token(o, s, _, T, E), (3006 | l) & ~(3006 & l));
    return ~(24460 & u) & (24460 | u)
}

function fun7_token(e, t, i, r) {
    const a = ~(33107 & e) & (33107 | e),
        n = (24 << (t >> 32 & 255)) + (32 << (t >> 8 & 255)) + (8 << (t >> 16 & 255)) + (16 << (t >> 24 & 255)),
        o = ~(32053 & i) & (32053 | i),
        s = 12240 ^ r,
        _ = fun8_token(a, n, o, s);
    fun21_token(a, n, o, s);
    return (2531011 + 214013 * (44352 + ((64131 & ~(64131 & _) | ~(64131 & _) & _) ^ fun15_token(a, n, o, s, a)))) % 4294967296
}

function fun20_token(e, t, i, r, a, n) {
    const o = ~(36133 & e) & (36133 | e),
        s = (13670 | t) & ~(13670 & t),
        _ = (31390 | i) & ~(31390 & i),
        T = 64081 ^ r,
        E = 7550 ^ a,
        I = (2147483587 + 2147483629 * (n + 63950)) % 2147483647;
    return (12345 + 1103515245 * (36760 + ((2147483629 * (62552 + (fun28_token(o, s, _, T, E) ^ fun21_token(I, o, s, _))) + 2147483587) % 2147483647 ^ fun29_token(T, E, I, o, s)))) % 2147483648
}

function fun5_token(e, t, i) {
    const r = (1664525 * (5294 + e) + 1013904223) % 4294967296,
        a = (55665 | t) & ~(55665 & t),
        n = (i + 54633) % 65404,
        o = fun16_token(r, a, n, r, a);
    fun6_token(n, r, a, n, r, a), fun21_token(n, r, a, n);
    return 15116 ^ ~(43875 & o) & (43875 | o)
}

function fun12_token(e, t, i, r) {
    const a = (15432 | e) & ~(15432 & e),
        n = 12315 ^ t,
        o = 38714 ^ i,
        s = 58084 ^ r,
        _ = fun13_token(a, n, o, s, a, n);
    fun21_token(o, s, a, n);
    return (214013 * (34681 + ((~(41134 & _) & _ | 41134 & ~(41134 & _)) ^ fun35_token(o, s, a, n, o, s))) + 2531011) % 4294967296
}

function fun4_token(e, t) {
    const i = (1103515245 * (e + 49468) + 12345) % 2147483648,
        r = (214013 * (t + 30513) + 2531011) % 4294967296,
        a = fun5_token(i, r, i);
    fun29_token(r, i, r, i, r), fun36_token(i, r, i, r);
    return 21791 ^ (17943 | a) & ~(17943 & a)
}

function fun10_token(e, t, i, r) {
    const a = (e + 34282) % 65336,
        n = 45181 & ~(45181 & t) | ~(45181 & t) & t,
        o = (16 << (i >> 8 & 255)) + (32 << (i >> 24 & 255)) + (8 << (i >> 32 & 255)) + (24 << (i >> 16 & 255)),
        s = 25475 & ~(25475 & r) | ~(25475 & r) & r,
        _ = fun11_token(a, n),
        T = fun32_token(o, s, a, n, o),
        E = (fun23_token(s, a), (58498 + (_ ^ T)) % 65531);
    return 37009 & ~(37009 & E) | ~(37009 & E) & E
}

function fun35_token(e, t, i, r, a, n) {
    const o = 23409 ^ e,
        s = 26380 ^ t,
        _ = (1103515245 * (a + 33017) + 12345) % 2147483648,
        T = 42490 ^ n;
    return (22695477 * (19056 + (fun36_token(o, s, 53590 ^ i, 36633 ^ r) ^ fun36_token(_, T, o, s))) + 1) % 4294967296
}

function fun24_token(e, t, i, r, a) {
    const n = (1664525 * (9716 + e) + 1013904223) % 4294967296,
        o = ~(7703 & t) & t | 7703 & ~(7703 & t),
        s = (31275 | i) & ~(31275 & i),
        _ = 25693 & ~(25693 & r) | ~(25693 & r) & r,
        T = (8 << (a >> 8 & 255)) + (32 << (a >> 24 & 255)) + (24 << (a >> 16 & 255)) + (16 << (a >> 32 & 255)),
        E = fun35_token(n, o, s, _, T, n),
        I = fun36_token(o, s, _, T);
    fun25_token(n, o, s);
    return 31710 ^ (24 << ((E ^ I) >> 16 & 255)) + (8 << ((E ^ I) >> 8 & 255)) + (32 << ((E ^ I) >> 24 & 255)) + (16 << ((E ^ I) >> 32 & 255))
}

function fun34_token(e, t) {
    const i = (2531011 + 214013 * (e + 62874)) % 4294967296,
        r = (24 << (t >> 24 & 255)) + (16 << (t >> 32 & 255)) + (8 << (t >> 8 & 255)) + (32 << (t >> 16 & 255)),
        a = fun35_token(i, r, i, r, i, r),
        n = fun35_token(i, r, i, r, i, r),
        o = (fun36_token(i, r, i, r), (16 << ((a ^ n) >> 32 & 255)) + (8 << ((a ^ n) >> 24 & 255)) + (24 << ((a ^ n) >> 16 & 255)) + (32 << ((a ^ n) >> 8 & 255)));
    return 55949 & ~(55949 & o) | ~(55949 & o) & o
}

function fun30_token(e, t, i, r, a, n) {
    const o = (24 << (e >> 24 & 255)) + (32 << (e >> 16 & 255)) + (16 << (e >> 8 & 255)) + (8 << (e >> 32 & 255)),
        s = (41551 | t) & ~(41551 & t),
        _ = (24 << (i >> 24 & 255)) + (16 << (i >> 32 & 255)) + (8 << (i >> 16 & 255)) + (32 << (i >> 8 & 255)),
        T = ~(32641 & r) & (32641 | r),
        E = (214013 * (a + 35582) + 2531011) % 4294967296,
        I = ~(1090 & n) & (1090 | n),
        l = fun33_token(o, s, _, T, E, I),
        u = (fun31_token(o, s, _, T, E), fun36_token(I, o, s, _), 8077 & ~(8077 & l) | ~(8077 & l) & l);
    return ~(3708 & u) & (3708 | u)
}

function fun14_token(e, t, i, r, a, n) {
    const o = 30142 ^ e,
        s = (t + 63025) % 65493,
        _ = 30777 ^ i,
        T = (22695477 * (45939 + r) + 1) % 4294967296,
        E = (8 << (a >> 16 & 255)) + (32 << (a >> 24 & 255)) + (24 << (a >> 32 & 255)) + (16 << (a >> 8 & 255)),
        I = (45652 | n) & ~(45652 & n),
        l = fun15_token(o, s, _, T, E);
    fun16_token(I, o, s, _, T), fun30_token(E, I, o, s, _, T);
    return 24022 ^ (46918 ^ l)
}

function entrypoint(e) {
    return fun0_token(e, 8260, 46947, 8004, 37330, 5330)
}

function fun6_token(e, t, i, r, a, n) {
    const o = (2531011 + 214013 * (e + 16955)) % 4294967296,
        s = (1103515245 * (9436 + t) + 12345) % 2147483648,
        _ = (14774 | i) & ~(14774 & i),
        T = (48802 | r) & ~(48802 & r),
        E = ~(24998 & a) & (24998 | a),
        I = (8 << (n >> 8 & 255)) + (16 << (n >> 16 & 255)) + (32 << (n >> 32 & 255)) + (24 << (n >> 24 & 255)),
        l = fun7_token(o, s, _, T),
        u = fun32_token(E, I, o, s, _);
    return (214013 * (35404 + ((24 << ((l ^ u) >> 24 & 255)) + (8 << ((l ^ u) >> 32 & 255)) + (16 << ((l ^ u) >> 8 & 255)) + (32 << ((l ^ u) >> 16 & 255)) ^ fun7_token(T, E, I, o))) + 2531011) % 4294967296
}

function fun3_token(e, t, i, r, a) {
    const n = 64570 ^ e,
        o = (2531011 + 214013 * (t + 41768)) % 4294967296,
        s = (1013904223 + 1664525 * (i + 43923)) % 4294967296,
        _ = (16 << (r >> 32 & 255)) + (8 << (r >> 24 & 255)) + (32 << (r >> 16 & 255)) + (24 << (r >> 8 & 255)),
        T = (21896 | a) & ~(21896 & a),
        E = fun4_token(n, o);
    fun12_token(s, _, T, n);
    return (12345 + 1103515245 * (7491 + (~(52206 & E) & (52206 | E) ^ fun26_token(o, s, _, T, n)))) % 2147483648
}

function fun29_token(e, t, i, r, a) {
    const n = (2147483587 + 2147483629 * (e + 64762)) % 2147483647,
        o = (214013 * (18197 + t) + 2531011) % 4294967296,
        s = (2531011 + 214013 * (22845 + i)) % 4294967296,
        _ = (32 << (r >> 16 & 255)) + (16 << (r >> 8 & 255)) + (8 << (r >> 32 & 255)) + (24 << (r >> 24 & 255)),
        T = ~(11999 & a) & a | 11999 & ~(11999 & a),
        E = fun35_token(n, o, s, _, T, n),
        I = fun30_token(o, s, _, T, n, o);
    fun36_token(s, _, T, n);
    return 35444 ^ (8 << ((E ^ I) >> 24 & 255)) + (16 << ((E ^ I) >> 16 & 255)) + (24 << ((E ^ I) >> 8 & 255)) + (32 << ((E ^ I) >> 32 & 255))
}

function fun21_token(e, t, i, r) {
    const a = (2147483587 + 2147483629 * (37418 + e)) % 2147483647,
        n = 57623 ^ t,
        o = ~(40280 & i) & i | 40280 & ~(40280 & i),
        s = ~(24601 & r) & r | 24601 & ~(24601 & r),
        _ = fun27_token(a, n),
        T = (fun27_token(o, s), fun22_token(a, n, o, s, a), 43902 & ~(43902 & _) | ~(43902 & _) & _);
    return (8862 | T) & ~(8862 & T)
}

function fun8_token(e, t, i, r) {
    const a = (32 << (e >> 32 & 255)) + (16 << (e >> 16 & 255)) + (24 << (e >> 24 & 255)) + (8 << (e >> 8 & 255)),
        n = (1 + 22695477 * (50595 + t)) % 4294967296,
        o = ~(40066 & i) & i | 40066 & ~(40066 & i),
        s = 18768 ^ r;
    return (1664525 * (16767 + ((2531011 + 214013 * (35287 + (fun15_token(a, n, o, s, a) ^ fun9_token(n, o, s, a, n)))) % 4294967296 ^ fun34_token(o, s))) + 1013904223) % 4294967296
}

function fun1_token(e, t, i) {
    const r = (12345 + 1103515245 * (39051 + e)) % 2147483648,
        a = (44117 | t) & ~(44117 & t),
        n = (24 << (i >> 24 & 255)) + (8 << (i >> 16 & 255)) + (16 << (i >> 32 & 255)) + (32 << (i >> 8 & 255)),
        o = fun24_token(r, a, n, r, a),
        s = fun33_token(n, r, a, n, r, a),
        _ = fun2_token(n, r),
        T = (16 << ((o ^ s) >> 32 & 255)) + (24 << ((o ^ s) >> 24 & 255)) + (32 << ((o ^ s) >> 8 & 255)) + (8 << ((o ^ s) >> 16 & 255));
    return (8 << ((T ^ _) >> 32 & 255)) + (16 << ((T ^ _) >> 8 & 255)) + (32 << ((T ^ _) >> 16 & 255)) + (24 << ((T ^ _) >> 24 & 255))
}

function fun15_token(e, t, i, r, a) {
    const n = 62008 ^ e,
        o = (24 << (t >> 32 & 255)) + (8 << (t >> 16 & 255)) + (32 << (t >> 8 & 255)) + (16 << (t >> 24 & 255)),
        s = (22695477 * (i + 46531) + 1) % 4294967296,
        _ = 1884 & ~(1884 & r) | ~(1884 & r) & r,
        T = 55588 & ~(55588 & a) | ~(55588 & a) & a,
        E = fun16_token(n, o, s, _, T);
    fun33_token(n, o, s, _, T, n);
    return (1664525 * (3037 + (57467 ^ E ^ fun22_token(o, s, _, T, n))) + 1013904223) % 4294967296
}

function fun27_token(e, t) {
    const i = (1664525 * (e + 44664) + 1013904223) % 4294967296,
        r = 53080 ^ t;
    return (1 + 22695477 * (57525 + ((17769 + (fun28_token(i, r, i, r, i) ^ fun32_token(r, i, r, i, r))) % 65357 ^ fun36_token(i, r, i, r)))) % 4294967296
}

function fun32_token(e, t, i, r, a) {
    const n = ~(42203 & e) & e | 42203 & ~(42203 & e),
        o = 50118 ^ t,
        s = 41620 ^ i,
        _ = (2147483629 * (r + 34240) + 2147483587) % 2147483647,
        T = (32 << (a >> 16 & 255)) + (16 << (a >> 8 & 255)) + (8 << (a >> 32 & 255)) + (24 << (a >> 24 & 255)),
        E = fun33_token(n, o, s, _, T, n);
    fun33_token(o, s, _, T, n, o);
    return (2531011 + 214013 * (53616 + ((43477 | E) & ~(43477 & E) ^ fun36_token(s, _, T, n)))) % 4294967296
}

function fun28_token(e, t, i, r, a) {
    const n = (16 << (e >> 32 & 255)) + (24 << (e >> 24 & 255)) + (8 << (e >> 8 & 255)) + (32 << (e >> 16 & 255)),
        o = 55978 ^ t,
        s = (1664525 * (i + 2934) + 1013904223) % 4294967296,
        _ = ~(30642 & r) & (30642 | r),
        T = (8 << (a >> 8 & 255)) + (24 << (a >> 32 & 255)) + (16 << (a >> 24 & 255)) + (32 << (a >> 16 & 255)),
        E = fun32_token(n, o, s, _, T),
        I = fun29_token(n, o, s, _, T),
        l = (fun36_token(n, o, s, _), (16 << ((E ^ I) >> 32 & 255)) + (24 << ((E ^ I) >> 8 & 255)) + (8 << ((E ^ I) >> 24 & 255)) + (32 << ((E ^ I) >> 16 & 255)));
    return ~(23686 & l) & (23686 | l)
}

function fun22_token(e, t, i, r, a) {
    const n = (1103515245 * (e + 49173) + 12345) % 2147483648,
        o = (t + 52922) % 65337,
        s = 25250 ^ i,
        _ = 10903 & ~(10903 & r) | ~(10903 & r) & r,
        T = 33814 & ~(33814 & a) | ~(33814 & a) & a,
        E = fun31_token(n, o, s, _, T),
        I = fun23_token(n, o),
        l = (fun31_token(s, _, T, n, o), (1 + 22695477 * (19675 + (E ^ I))) % 4294967296);
    return ~(7922 & l) & l | 7922 & ~(7922 & l)
}

function fun23_token(e, t) {
    const i = 24508 ^ e,
        r = (16 << (t >> 16 & 255)) + (24 << (t >> 8 & 255)) + (32 << (t >> 32 & 255)) + (8 << (t >> 24 & 255)),
        a = fun26_token(i, r, i, r, i),
        n = fun28_token(r, i, r, i, r),
        o = (fun24_token(i, r, i, r, i), (2147483629 * (11269 + (a ^ n)) + 2147483587) % 2147483647);
    return 40927 & ~(40927 & o) | ~(40927 & o) & o
}

function fun25_token(e, t, i) {
    const r = 23323 ^ e,
        a = (2531011 + 214013 * (61713 + t)) % 4294967296,
        n = (24198 | i) & ~(24198 & i),
        o = fun26_token(r, a, n, r, a),
        s = fun26_token(n, r, a, n, r);
    fun26_token(a, n, r, a, n);
    return 31181 ^ (16 << ((o ^ s) >> 32 & 255)) + (8 << ((o ^ s) >> 8 & 255)) + (24 << ((o ^ s) >> 24 & 255)) + (32 << ((o ^ s) >> 16 & 255))
}

function fun33_token(e, t, i, r, a, n) {
    const o = 8102 ^ i,
        s = (24 << (r >> 16 & 255)) + (32 << (r >> 32 & 255)) + (8 << (r >> 24 & 255)) + (16 << (r >> 8 & 255)),
        _ = 29687 & ~(29687 & a) | ~(29687 & a) & a,
        T = (1 + 22695477 * (62237 + n)) % 4294967296,
        E = fun34_token((e + 52483) % 65496, (16 << (t >> 16 & 255)) + (24 << (t >> 8 & 255)) + (32 << (t >> 24 & 255)) + (8 << (t >> 32 & 255))),
        I = fun34_token(o, s);
    fun34_token(_, T);
    return 55575 ^ (45290 + (E ^ I)) % 65334
}

function fun2_token(e, t) {
    const i = (16 << (e >> 8 & 255)) + (32 << (e >> 16 & 255)) + (8 << (e >> 32 & 255)) + (24 << (e >> 24 & 255)),
        r = (32 << (t >> 32 & 255)) + (24 << (t >> 24 & 255)) + (8 << (t >> 8 & 255)) + (16 << (t >> 16 & 255)),
        a = fun30_token(i, r, i, r, i, r);
    fun3_token(i, r, i, r, i), fun27_token(r, i);
    return 8337 ^ (58283 | a) & ~(58283 & a)
}
const get_r_token = () => new Promise(((e, t) => {
    grecaptcha.ready((function() {
        grecaptcha.execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
            action: "validate_recaptcha"
        }).then((function(t) {
            e(t)
        })).catch((e => {
            console.log(e), t(e)
        }))
    }))
}));

function Mouse() {
    this.DOWN = 0, this.UP = 1, this.IDLE = 2, this.IN = 0, this.OUT = 1, this.pos = {
        x: 0,
        y: 0
    }, this.x_old = 0, this.y_old = 0, this.angle = 0, this.state = this.IDLE, this.dist = this.IN, this.down = function() {
        this.state = this.DOWN
    }, this.up = function() {
        this.state = this.UP
    }, this.update = function() {
        return (this.pos.x != this.x_old || this.pos.y != this.y_old) && (this.x_old = this.pos.x, this.y_old = this.pos.y, !0)
    }
}

function Keyboard() {
    this.set_azerty = function() {
        this.LEFT = 81, this.RIGHT = 68, this.TOP = 90, this.DOWN = 83
    }, this.set_qwerty = function() {
        this.LEFT = 65, this.RIGHT = 68, this.TOP = 87, this.BOTTOM = 83
    }, this.UP = 0, this.DOWN = 1, this._1 = 49, this._2 = 50, this._3 = 51, this._4 = 52, this._5 = 53, this.CTRL = 17, this.ARROW_LEFT = 37, this.ARROW_RIGHT = 39, this.ARROW_TOP = 38, this.ARROW_BOTTOM = 40, this.SPACE = 32, this.R = 82, this.G = 71, this.V = 86, this.B = 66, this.set_qwerty(), this.keys = new Array(255);
    for (var e = 0; e < 255; e++) this.keys[e] = this.UP;
    this.up = function(e) {
        var t = Math.min(e.charCode || e.keyCode, 255);
        this.keys[t] = this.UP
    }, this.down = function(e) {
        var t = Math.min(e.charCode || e.keyCode, 255);
        return t == this.LEFT || t == this.ARROW_LEFT ? this.press_left() : t == this.TOP || t == this.ARROW_TOP ? this.press_top() : t == this.DOWN || t == this.ARROW_DOWN ? this.press_bottom() : t != this.RIGHT && t != this.ARROW_RIGHT || this.press_right(), this.keys[t] = this.DOWN, t
    }, this.press_left = function() {
        this.keys[this.RIGHT] = this.UP, this.keys[this.ARROW_RIGHT] = this.UP
    }, this.press_right = function() {
        this.keys[this.LEFT] = this.UP, this.keys[this.ARROW_LEFT] = this.UP
    }, this.press_bottom = function() {
        this.keys[this.TOP] = this.UP, this.keys[this.ARROW_TOP] = this.UP
    }, this.press_top = function() {
        this.keys[this.BOTTOM] = this.UP, this.keys[this.ARROW_BOTTOM] = this.UP
    }, this.clear_directionnal = function() {
        this.keys[this.RIGHT] = this.UP, this.keys[this.ARROW_RIGHT] = this.UP, this.keys[this.LEFT] = this.UP, this.keys[this.ARROW_LEFT] = this.UP, this.keys[this.TOP] = this.UP, this.keys[this.ARROW_TOP] = this.UP, this.keys[this.BOTTOM] = this.UP, this.keys[this.ARROW_BOTTOM] = this.UP
    }, this.is_left = function() {
        return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT]
    }, this.is_right = function() {
        return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT]
    }, this.is_top = function() {
        return this.keys[this.TOP] || this.keys[this.ARROW_TOP]
    }, this.is_bottom = function() {
        return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM]
    }, this.is_ctrl = function() {
        return this.keys[this.CTRL]
    }, this.is_1 = function() {
        return this.keys[this._1]
    }, this.is_2 = function() {
        return this.keys[this._2]
    }, this.is_3 = function() {
        return this.keys[this._3]
    }, this.is_4 = function() {
        return this.keys[this._4]
    }, this.is_space = function() {
        return this.keys[this.SPACE]
    }, this.is_r = function() {
        return this.keys[this.R]
    }, this.is_g = function() {
        return this.keys[this.G]
    }, this.is_v = function() {
        return this.keys[this.V]
    }, this.is_b = function() {
        return this.keys[this.B]
    }
}
Utils = {
        get_recaptcha_token: get_r_token,
        open_in_new_tab: function(e) {
            window.open(e, "_blank").focus()
        },
        open_in_new_box: function(e) {
            window.open(e, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes")
        },
        compare_object: function(e, t) {
            for (var i in e)
                if (e[i] != t[i]) return !1;
            return !0
        },
        compare_array: function(e, t) {
            if (e.length != t.length) return !1;
            for (var i = 0; i < e.length; i++)
                if ("object" == typeof e) {
                    if (!this.compare_object(e[i], t[i])) return !1
                } else if (e[i] != t[i]) return !1;
            return !0
        },
        copy_vector: function(e, t) {
            t.x = e.x, t.y = e.y
        },
        get_vector: function(e, t) {
            return {
                x: e.x - t.x,
                y: e.y - t.y
            }
        },
        mul_vector: function(e, t) {
            e.x *= t, e.y *= t
        },
        scalar_product: function(e, t) {
            return e.x * t.x + e.y * t.y
        },
        norm: function(e) {
            return Math.sqrt(e.x * e.x + e.y * e.y)
        },
        sign: function(e) {
            return e < 0 ? -1 : 1
        },
        cross_product: function(e, t) {
            return e.x * t.y - e.y * t.x
        },
        get_angle_2: function(e, t, i, r) {
            var a = r - t,
                n = i - e;
            return Math.atan2(a, n)
        },
        get_angle: function(e, t) {
            return Math.acos(this.scalar_product(e, t) / (this.norm(e) * this.norm(t))) * this.sign(this.cross_product(e, t))
        },
        getURLData: function(e) {
            _url = location.href, e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var t = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(_url);
            return null === t ? null : t[1]
        },
        reduceAngle: function(e, t) {
            var i = 2 * Math.PI;
            return t = (t % i + i) % i, Math.abs(e - t) > Math.PI ? e > t ? t + i : t - i : t
        },
        get_std_angle: function(e, t) {
            return this.get_angle({
                x: 1,
                y: 0
            }, this.get_vector(e, t))
        },
        dist: function(e, t) {
            return Math.sqrt((t.x - e.x) * (t.x - e.x) + (t.y - e.y) * (t.y - e.y))
        },
        build_vector: function(e, t) {
            return {
                x: Math.cos(t) * e,
                y: Math.sin(t) * e
            }
        },
        add_vector: function(e, t) {
            e.x += t.x, e.y += t.y
        },
        sub_vector: function(e, t) {
            e.x -= t.x, e.y -= t.y
        },
        translate_vector: function(e, t, i) {
            e.x += t, e.y += i
        },
        translate_new_vector: function(e, t, i) {
            return {
                x: e.x + t,
                y: e.y + i
            }
        },
        move: function(e, t, i) {
            e.x += Math.cos(i) * t, e.y += Math.sin(i) * t
        },
        middle: function(e, t) {
            return Math.floor((e - t) / 2)
        },
        middle_point: function(e, t) {
            return {
                x: (e.x + t.x) / 2,
                y: (e.y + t.y) / 2
            }
        },
        rand_sign: function() {
            return Math.random() > .5 ? 1 : -1
        },
        get_rand_pos_in_circle: function(e, t, i) {
            var r = this.rand_sign(),
                a = this.rand_sign(),
                n = Math.random() * Math.PI / 2;
            return {
                x: Math.floor(e + Math.cos(n) * r * i),
                y: Math.floor(t + Math.sin(n) * a * i)
            }
        },
        Box: function(e, t, i, r) {
            this.x = e, this.y = t, this.w = i, this.h = r
        },
        randomize_list: function(e) {
            a = [], a.push.apply(a, e);
            for (var t = []; a.length > 0;) {
                var i = Math.floor(Math.random() * a.length);
                t.push(a[i]), a.splice(i, 1)
            }
            return t
        },
        restore_number: function(e) {
            return e >= 2e4 ? e = 1e3 * (e - 2e4) : e >= 1e4 && (e = 100 * (e - 1e4)), e
        },
        simplify_number: function(e) {
            if ("number" != typeof e) return "0";
            if (e >= 1e4) {
                var t = Math.floor(Math.log10(e)) - 2,
                    i = Math.max(0, 3 - t),
                    r = Math.floor(e / 1e3).toString();
                if (i) {
                    for (var a = (r += "." + (e % 1e3 / 1e3).toString().substring(2).substring(0, i)).length - 1, n = 0; a > 0 && "0" == r[a]; a--) n++;
                    "." == (r = r.substring(0, r.length - n))[r.length - 1] && (r = r.substring(0, r.length - 1))
                }
                return r += "k"
            }
            return e.toString()
        },
        ease_out_quad: function(e) {
            return e * (2 - e)
        },
        ease_out_cubic: function(e) {
            return --e * e * e + 1
        },
        ease_in_out_quad: function(e) {
            return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1
        },
        ease_in_out_cubic: function(e) {
            return e < .5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1
        },
        ease_in_out_quart: function(e) {
            return e < .5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e
        },
        ease_out_quart: function(e) {
            return 1 - --e * e * e * e
        },
        ease_out_quint: function(e) {
            return 1 + --e * e * e * e * e
        },
        LinearAnimation: function(e, t, i, r, a, n) {
            return this.o = e, this.v = t, this.max = i, this.min = r, this.max_speed = a, this.min_speed = n, this.last = 0, this.update = function() {
                if (this.o) {
                    if ((e = this.v + delta * this.max_speed) > this.max) return this.v = this.max, this.o = !1, !0;
                    this.v = e
                } else {
                    var e;
                    (e = this.v - delta * this.min_speed) < this.min ? (this.v = this.min, this.o = !0) : this.v = e
                }
            }, !1
        },
        Ease: function(e, t, i, r, a, n) {
            this.fun = e, this.ed = t, this.em = i, this.sx = r, this.x = a, this.ex = n, this.restart = function() {
                this.x = this.sex, this.ed = 0
            }, this.ease = function(e) {
                if (e !== this.ex && (this.ex = e, this.sx = this.x, this.ed = 0), this.ex !== this.x)
                    if (this.ed += delta, this.ed > this.em) this.x = this.ex;
                    else {
                        var t = this.fun(this.ed / this.em);
                        this.x = this.sx + (this.ex - this.sx) * t
                    }
            }
        },
        Ease2d: function(e, t, i, r, a, n, o, s, _) {
            this.fun = e, this.ed = t, this.em = i, this.sx = r, this.sy = a, this.x = n, this.y = o, this.ex = s, this.ey = _, this.ease = function(e) {
                if (e.x == this.ex && e.y == this.ey || (this.ex = e.x, this.ey = e.y, this.sx = this.x, this.sy = this.y, this.ed = 0), this.ex != this.x || this.ey != this.y)
                    if (this.ed += delta, this.ed > this.em) this.x = this.ex, this.y = this.ey;
                    else {
                        var t = this.fun(this.ed / this.em);
                        this.x = this.sx + (this.ex - this.sx) * t, this.y = this.sy + (this.ey - this.sy) * t
                    }
            }
        },
        generate_token: function(e) {
            for (var t = "", i = 0; i < e; i++) t += String.fromCharCode(48 + Math.floor(74 * Math.random()));
            return t
        },
        gup: function(e, t) {
            t || (t = location.href), e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
            var i = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(t);
            return null == i ? null : i[1]
        },
        inside_box: function(e, t) {
            return e.x >= t.x && e.x <= t.x + t.w && e.y >= t.y && e.y <= t.y + t.h
        },
        intersect_aabb: function(e, t, i, r, a, n, o, s) {
            return Math.max(e, a) < Math.min(t, n) && Math.max(i, o) < Math.min(r, s) ? 1 : 0
        },
        lerp: function(e, t, i) {
            return (1 - i) * e + i * t
        },
        escape_html: function(e) {
            return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;")
        }
    }, Math.sign = Math.sign || function(e) {
        return 0 === e ? 0 : e > 0 ? 1 : -1
    }, Math.log10 = Math.log10 || function(e) {
        return Math.log(e) / Math.LOG10
    },
    function(e) {
        var t = !1;
        if ("function" == typeof define && define.amd && (define(e), t = !0), "object" == typeof exports && (module.exports = e(), t = !0), !t) {
            var i = window.Cookies,
                r = window.Cookies = e();
            r.noConflict = function() {
                return window.Cookies = i, r
            }
        }
    }((function() {
        function e() {
            for (var e = 0, t = {}; e < arguments.length; e++) {
                var i = arguments[e];
                for (var r in i) t[r] = i[r]
            }
            return t
        }
        return function t(i) {
            function r(t, a, n) {
                var o;
                if ("undefined" != typeof document) {
                    if (arguments.length > 1) {
                        if ("number" == typeof(n = e({
                                path: "/"
                            }, r.defaults, n)).expires) {
                            var s = new Date;
                            s.setMilliseconds(s.getMilliseconds() + 864e5 * n.expires), n.expires = s
                        }
                        try {
                            o = JSON.stringify(a), /^[\{\[]/.test(o) && (a = o)
                        } catch (e) {}
                        return a = i.write ? i.write(a, t) : encodeURIComponent(String(a)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent), t = (t = (t = encodeURIComponent(String(t))).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)).replace(/[\(\)]/g, escape), document.cookie = [t, "=", a, n.expires ? "; expires=" + n.expires.toUTCString() : "", n.path ? "; path=" + n.path : "", n.domain ? "; domain=" + n.domain : "", n.secure ? "; secure" : ""].join("")
                    }
                    t || (o = {});
                    for (var _ = document.cookie ? document.cookie.split("; ") : [], T = /(%[0-9A-Z]{2})+/g, E = 0; E < _.length; E++) {
                        var I = _[E].split("="),
                            l = I.slice(1).join("=");
                        '"' === l.charAt(0) && (l = l.slice(1, -1));
                        try {
                            var u = I[0].replace(T, decodeURIComponent);
                            if (l = i.read ? i.read(l, u) : i(l, u) || l.replace(T, decodeURIComponent), this.json) try {
                                l = JSON.parse(l)
                            } catch (e) {}
                            if (t === u) {
                                o = l;
                                break
                            }
                            t || (o[u] = l)
                        } catch (e) {}
                    }
                    return o
                }
            }
            return r.set = r, r.get = function(e) {
                return r.call(r, e)
            }, r.getJSON = function() {
                return r.apply({
                    json: !0
                }, [].slice.call(arguments))
            }, r.defaults = {}, r.remove = function(t, i) {
                r(t, "", e(i, {
                    expires: -1
                }))
            }, r.withConverter = t, r
        }((function() {}))
    }));
var JSONWORD2, JSONWORD3, JSONWORD4, JSONWORD5, JSONWORD6, JSONWORD7, JUNK3, JSONWORD8, JUNK10, JSONWORD9, JUNK5, JSONWORD10, can = document.getElementById("game_canvas"),
    ctx = can.getContext("2d"),
    canw = can.width,
    canh = can.height,
    canw2 = can.width / 2,
    canh2 = can.height / 2,
    canm = {
        x: canw2,
        y: canh2
    },
    scale = 1,
    ratio = 1,
    ratio_opt = -1,
    JUNK8 = "J" + JUNK3,
    JUNK6 = "S" + JUNK4,
    WINDOW1 = window,
    JUNK2 = (JUNK1 = "O") + "N",
    JSONWORD1 = "O",
    JSONWORD12 = 0,
    WINDOW2 = WINDOW1,
    JUNK7 = (JUNK6 = "N", "J"),
    JUNK1 = "O" + JUNK3,
    WINDOW3 = WINDOW2,
    WINDOW4 = WINDOW3,
    WINDOW5 = (JUNK2 = "N" + JUNK5, WINDOW4),
    JUNK9 = "",
    WINDOW6 = WINDOW5,
    WINDOW7 = WINDOW6,
    WINDOW8 = WINDOW7,
    WINDOW9 = (JUNK7 = "O", WINDOW8 = WINDOW7),
    WINDOW10 = WINDOW9,
    JUNK4 = (JUNK10 = "J") + (JSONWORD9 = "S");

function CTI(e) {
    var t = new Image;
    return t.src = e.toDataURL("image/png"), t.width = e.width, t.height = e.height, t.isLoaded = 1, t
}
can.oncontextmenu = function() {
    return !1
}, JUNK9 = JUNK8 = JUNK10, JUNK1 = JUNK2, JUNK2 = JUNK3, JUNK3 = JUNK4, JUNK1 = JUNK4, JSONWORD4 = JSONWORD5 = JUNK4 + (JUNK7 += JUNK8 = JUNK6), JUNK6 = JUNK7 + JUNK8, JSONWORD6 = JSONWORD2 = JSONWORD1 = JUNK4 + JUNK7, JUNK1 = JUNK4 + JUNK7, JSONWORD7 = JSONWORD1, JUNK2 = JUNK4 + JUNK7, JSONWORD8 = JSONWORD3 = JSONWORD2, JUNK7 = JUNK3 = JUNK4, JSONWORD9 = JSONWORD1, JSONWORD10 = JSONWORD2, JUNK8 = JUNK1;
var devicePixelRatio = window.devicePixelRatio || 1,
    backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;

function resize_canvas() {
    can.width != window.innerWidth && (can.width = window.innerWidth, canw = can.width, canw2 = can.width / 2), can.height != window.innerHeight && (can.height = window.innerHeight, canh = can.height, canh2 = can.height / 2), canm = {
        x: canw2,
        y: canh2
    };
    var e = can.width,
        t = can.height;
    ratio = -1 === ratio_opt ? devicePixelRatio / backingStoreRatio : ratio_opt, can.width = e * ratio, can.height = t * ratio, can.style.width = e + "px", can.style.height = t + "px", ctx.scale(ratio, ratio), user && (user.cam.rw = e, user.cam.rh = t), loader.is_run ? loader.update() : ui.is_run ? ui.update() : game.is_run ? game.update() : scoreboard.is_run && scoreboard.update()
}
var game_body = document.getElementById("game_body");
game_body.ondragstart = function() {
        return !1
    }, game_body.ondrop = function() {
        return !1
    }, game_body.onresize = resize_canvas,
    function() {
        for (var e = 0, t = ["ms", "moz", "webkit", "o"], i = 0; i < t.length && !window.requestAnimationFrame; ++i) window.requestAnimationFrame = window[t[i] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[t[i] + "CancelAnimationFrame"] || window[t[i] + "CancelRequestAnimationFrame"];
        window.requestAnimationFrame || (window.requestAnimationFrame = function(t, i) {
            var r = (new Date).getTime(),
                a = Math.max(0, 16 - (r - e)),
                n = window.setTimeout((function() {
                    t(r + a)
                }), a);
            return e = r + a, n
        }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function(e) {
            clearTimeout(e)
        })
    }();
var lang = navigator.language || navigator.userLanguage,
    timezone = -(new Date).getTimezoneOffset() / 60,
    TZ_EU = "Europe",
    TZ_RU = "Russia",
    TZ_NA = "North America",
    TZ_SA = "South America",
    TZ_WA = "West America",
    TZ_AS = "Asia",
    TZ_AU = "Australia",
    TZ = TZ_EU;
timezone >= -2 && timezone <= 2 ? TZ = TZ_EU : timezone > 2 && timezone <= 5 ? TZ = TZ_RU : timezone > 5 && timezone <= 9 ? TZ = TZ_AS : timezone > 9 ? TZ = TZ_AU : timezone >= -5 && timezone < -2 ? TZ = "pt-BR" === lang || "pt-br" === lang || "pt" === lang || "pt-pt" === lang ? TZ_SA : TZ_NA : timezone < -5 && (TZ = "pt-BR" === lang || "pt-br" === lang || "pt" === lang || "pt-pt" === lang ? TZ_SA : TZ_WA);
var RNG = {
        Random: function(e) {
            var t = 2147483648,
                i = e || Math.floor(Math.random() * (t - 1));
            this.init = function(e) {
                i = e || Math.floor(Math.random() * (t - 1))
            }, this.get = function() {
                return (i = (1103515245 * i + 12345) % t) / t
            }
        }
    },
    ___MAP___ = [
        [0, "DRAGON", 18, 6, 66, 35, 0],
        [0, "WINTER", 91, 18, 5, 40, 8],
        [0, "DESERT", 135, 180, 89, 124, 5],
        [0, "LAVA", 142, 6, 82, 99, 6],
        [0, "FOREST", 6, 150, 90, 154, 8],
        [0, "WINTER", 6, 6, 90, 150, 0],
        [1, "b", 0, 5, 175, 0],
        [1, "t", 2, 5, 174, 0],
        [1, "t", 5, 5, 173, 0],
        [1, "b", 3, 5, 176, 0],
        [1, "t", 0, 5, 177, 0],
        [1, "t", 3, 5, 178, 0],
        [1, "t", 4, 5, 179, 0],
        [1, "b", 0, 5, 180, 0],
        [1, "t", 5, 5, 181, 0],
        [1, "b", 2, 5, 182, 0],
        [1, "b", 1, 5, 183, 0],
        [1, "b", 2, 5, 184, 0],
        [1, "t", 5, 5, 185, 0],
        [1, "t", 2, 5, 186, 0],
        [1, "t", 0, 5, 187, 0],
        [1, "t", 5, 5, 188, 0],
        [1, "t", 1, 5, 189, 0],
        [1, "b", 2, 5, 190, 0],
        [1, "t", 4, 5, 191, 0],
        [1, "b", 3, 5, 192, 0],
        [1, "t", 5, 5, 193, 0],
        [1, "t", 0, 5, 194, 0],
        [1, "t", 3, 5, 195, 0],
        [1, "b", 0, 5, 196, 0],
        [1, "t", 5, 5, 197, 0],
        [1, "t", 2, 5, 198, 0],
        [1, "b", 2, 5, 199, 0],
        [1, "t", 4, 5, 200, 0],
        [1, "t", 1, 5, 201, 0],
        [1, "b", 1, 5, 202, 0],
        [1, "t", 5, 5, 203, 0],
        [1, "t", 2, 5, 204, 0],
        [1, "t", 4, 5, 205, 0],
        [1, "b", 2, 5, 206, 0],
        [1, "t", 1, 5, 207, 0],
        [1, "t", 4, 5, 208, 0],
        [1, "t", 2, 5, 209, 0],
        [1, "b", 0, 5, 210, 0],
        [1, "t", 5, 5, 211, 0],
        [1, "t", 1, 5, 212, 0],
        [1, "t", 2, 5, 213, 0],
        [1, "b", 3, 5, 214, 0],
        [1, "t", 5, 5, 215, 0],
        [1, "b", 0, 5, 216, 0],
        [1, "t", 4, 5, 217, 0],
        [1, "t", 2, 5, 218, 0],
        [1, "t", 1, 5, 219, 0],
        [1, "t", 3, 5, 220, 0],
        [1, "t", 5, 5, 221, 0],
        [1, "t", 2, 5, 222, 0],
        [1, "t", 4, 5, 223, 0],
        [1, "b", 3, 5, 224, 0],
        [1, "t", 1, 5, 225, 0],
        [1, "t", 3, 5, 226, 0],
        [1, "b", 0, 5, 227, 0],
        [1, "t", 3, 5, 228, 0],
        [1, "t", 5, 5, 229, 0],
        [1, "t", 2, 5, 230, 0],
        [1, "t", 0, 5, 231, 0],
        [1, "b", 2, 5, 232, 0],
        [1, "t", 1, 5, 233, 0],
        [1, "t", 4, 5, 234, 0],
        [1, "b", 1, 5, 235, 0],
        [1, "t", 4, 5, 236, 0],
        [1, "t", 2, 5, 237, 0],
        [1, "t", 0, 5, 238, 0],
        [1, "t", 4, 5, 239, 0],
        [1, "b", 2, 5, 240, 0],
        [1, "t", 5, 5, 241, 0],
        [1, "b", 1, 5, 242, 0],
        [1, "t", 4, 5, 243, 0],
        [1, "t", 2, 5, 244, 0],
        [1, "t", 1, 5, 245, 0],
        [1, "b", 1, 5, 246, 0],
        [1, "t", 3, 5, 247, 0],
        [1, "b", 2, 5, 248, 0],
        [1, "t", 5, 5, 249, 0],
        [1, "t", 2, 5, 250, 0],
        [1, "t", 4, 5, 251, 0],
        [1, "b", 1, 5, 252, 0],
        [1, "t", 4, 5, 253, 0],
        [1, "t", 1, 5, 254, 0],
        [1, "t", 3, 5, 255, 0],
        [1, "t", 5, 5, 256, 0],
        [1, "b", 2, 5, 257, 0],
        [1, "t", 4, 5, 258, 0],
        [1, "b", 3, 5, 259, 0],
        [1, "t", 5, 5, 260, 0],
        [1, "b", 0, 5, 261, 0],
        [1, "t", 3, 5, 262, 0],
        [1, "t", 4, 5, 263, 0],
        [1, "t", 2, 5, 264, 0],
        [1, "b", 1, 5, 265, 0],
        [1, "b", 2, 5, 266, 0],
        [1, "t", 3, 5, 267, 0],
        [1, "t", 4, 5, 268, 0],
        [1, "t", 0, 5, 269, 0],
        [1, "t", 5, 5, 270, 0],
        [1, "t", 3, 5, 271, 0],
        [1, "t", 4, 5, 272, 0],
        [1, "t", 1, 5, 273, 0],
        [1, "b", 2, 5, 274, 0],
        [1, "t", 1, 5, 275, 0],
        [1, "t", 4, 5, 276, 0],
        [1, "b", 1, 5, 277, 0],
        [1, "b", 2, 5, 278, 0],
        [1, "t", 1, 5, 279, 0],
        [1, "t", 4, 5, 280, 0],
        [1, "t", 2, 5, 281, 0],
        [1, "t", 5, 5, 282, 0],
        [1, "b", 2, 5, 283, 0],
        [1, "t", 1, 5, 284, 0],
        [1, "b", 3, 5, 285, 0],
        [1, "t", 4, 5, 286, 0],
        [1, "t", 0, 5, 287, 0],
        [1, "t", 5, 5, 288, 0],
        [1, "t", 2, 5, 289, 0],
        [1, "b", 1, 5, 290, 0],
        [1, "t", 4, 5, 292, 0],
        [1, "t", 2, 5, 291, 0],
        [1, "b", 2, 5, 293, 0],
        [1, "t", 1, 5, 294, 0],
        [1, "t", 3, 5, 295, 0],
        [1, "t", 5, 5, 296, 0],
        [1, "b", 0, 5, 297, 0],
        [1, "b", 3, 5, 298, 0],
        [1, "t", 4, 5, 299, 0],
        [1, "t", 2, 5, 300, 0],
        [1, "t", 4, 5, 301, 0],
        [1, "b", 0, 5, 302, 0],
        [1, "b", 2, 5, 303, 0],
        [1, "t", 1, 6, 303, 0],
        [1, "t", 2, 7, 303, 0],
        [1, "t", 1, 5, 304, 0],
        [1, "t", 3, 6, 304, 0],
        [1, "t", 4, 7, 304, 0],
        [1, "t", 5, 8, 303, 0],
        [1, "b", 1, 8, 304, 0],
        [1, "b", 2, 9, 304, 0],
        [1, "b", 3, 12, 303, 0],
        [1, "b", 3, 17, 304, 0],
        [1, "t", 1, 9, 303, 0],
        [1, "t", 1, 15, 304, 0],
        [1, "t", 1, 13, 303, 0],
        [1, "t", 3, 10, 303, 0],
        [1, "t", 3, 14, 304, 0],
        [1, "t", 4, 10, 304, 0],
        [1, "t", 5, 11, 304, 0],
        [1, "t", 5, 14, 303, 0],
        [1, "t", 5, 16, 304, 0],
        [1, "t", 5, 13, 304, 0],
        [1, "t", 2, 12, 304, 0],
        [1, "t", 1, 11, 303, 0],
        [1, "b", 3, 15, 303, 0],
        [1, "b", 0, 16, 303, 0],
        [1, "t", 3, 17, 303, 0],
        [1, "t", 4, 18, 303, 0],
        [1, "t", 2, 19, 303, 0],
        [1, "t", 1, 20, 303, 0],
        [1, "b", 1, 21, 303, 0],
        [1, "t", 2, 22, 303, 0],
        [1, "t", 4, 23, 303, 0],
        [1, "b", 3, 24, 303, 0],
        [1, "t", 5, 25, 303, 0],
        [1, "t", 1, 26, 303, 0],
        [1, "t", 2, 27, 303, 0],
        [1, "t", 4, 28, 303, 0],
        [1, "b", 0, 18, 304, 0],
        [1, "t", 2, 19, 304, 0],
        [1, "t", 5, 20, 304, 0],
        [1, "b", 2, 21, 304, 0],
        [1, "t", 4, 22, 304, 0],
        [1, "t", 2, 23, 304, 0],
        [1, "t", 1, 24, 304, 0],
        [1, "t", 3, 25, 304, 0],
        [1, "t", 0, 27, 304, 0],
        [1, "t", 5, 26, 304, 0],
        [1, "b", 2, 28, 304, 0],
        [1, "t", 1, 29, 304, 0],
        [1, "b", 1, 29, 303, 0],
        [1, "b", 2, 30, 303, 0],
        [1, "t", 4, 31, 303, 0],
        [1, "t", 0, 32, 303, 0],
        [1, "t", 5, 33, 303, 0],
        [1, "t", 2, 34, 303, 0],
        [1, "t", 4, 35, 303, 0],
        [1, "t", 1, 36, 303, 0],
        [1, "b", 3, 37, 303, 0],
        [1, "t", 2, 32, 304, 0],
        [1, "t", 4, 30, 304, 0],
        [1, "t", 1, 31, 304, 0],
        [1, "b", 1, 33, 304, 0],
        [1, "t", 2, 35, 304, 0],
        [1, "t", 5, 34, 304, 0],
        [1, "b", 2, 36, 304, 0],
        [1, "t", 5, 37, 304, 0],
        [1, "t", 1, 38, 304, 0],
        [1, "b", 1, 40, 303, 0],
        [1, "t", 3, 39, 303, 0],
        [1, "t", 3, 42, 304, 0],
        [1, "t", 5, 38, 303, 0],
        [1, "t", 5, 39, 304, 0],
        [1, "t", 5, 41, 303, 0],
        [1, "t", 4, 41, 304, 0],
        [1, "t", 4, 44, 303, 0],
        [1, "b", 2, 40, 304, 0],
        [1, "b", 2, 43, 303, 0],
        [1, "t", 1, 42, 303, 0],
        [1, "t", 1, 43, 304, 0],
        [1, "t", 5, 44, 304, 0],
        [1, "b", 1, 45, 303, 0],
        [1, "t", 2, 45, 304, 0],
        [1, "t", 2, 46, 303, 0],
        [1, "t", 4, 47, 303, 0],
        [1, "b", 0, 48, 303, 0],
        [1, "t", 5, 49, 303, 0],
        [1, "t", 2, 50, 303, 0],
        [1, "t", 1, 51, 303, 0],
        [1, "t", 4, 52, 303, 0],
        [1, "t", 5, 46, 304, 0],
        [1, "t", 2, 47, 304, 0],
        [1, "t", 5, 48, 304, 0],
        [1, "t", 1, 49, 304, 0],
        [1, "t", 2, 50, 304, 0],
        [1, "b", 1, 53, 303, 0],
        [1, "b", 2, 51, 304, 0],
        [1, "t", 5, 52, 304, 0],
        [1, "t", 3, 53, 304, 0],
        [1, "b", 2, 54, 303, 0],
        [1, "t", 5, 54, 304, 0],
        [1, "t", 5, 55, 303, 0],
        [1, "t", 3, 56, 303, 0],
        [1, "t", 4, 57, 303, 0],
        [1, "t", 5, 58, 303, 0],
        [1, "b", 1, 55, 304, 0],
        [1, "t", 2, 56, 304, 0],
        [1, "t", 0, 57, 304, 0],
        [1, "t", 3, 58, 304, 0],
        [1, "t", 3, 63, 304, 0],
        [1, "t", 3, 59, 303, 0],
        [1, "t", 4, 59, 304, 0],
        [1, "t", 5, 60, 303, 0],
        [1, "t", 0, 60, 304, 0],
        [1, "t", 0, 66, 303, 0],
        [1, "t", 0, 70, 304, 0],
        [1, "t", 3, 61, 304, 0],
        [1, "t", 3, 67, 303, 0],
        [1, "t", 3, 73, 304, 0],
        [1, "t", 3, 76, 303, 0],
        [1, "t", 3, 78, 304, 0],
        [1, "t", 1, 61, 303, 0],
        [1, "t", 1, 73, 303, 0],
        [1, "t", 1, 79, 303, 0],
        [1, "b", 2, 62, 304, 0],
        [1, "b", 2, 70, 303, 0],
        [1, "t", 5, 62, 303, 0],
        [1, "t", 5, 68, 303, 0],
        [1, "t", 5, 71, 304, 0],
        [1, "t", 5, 77, 304, 0],
        [1, "t", 5, 75, 303, 0],
        [1, "t", 5, 64, 304, 0],
        [1, "t", 5, 65, 303, 0],
        [1, "t", 5, 80, 303, 0],
        [1, "t", 1, 76, 304, 0],
        [1, "t", 3, 63, 303, 0],
        [1, "t", 5, 82, 304, 0],
        [1, "b", 2, 65, 304, 0],
        [1, "t", 1, 64, 303, 0],
        [1, "t", 1, 68, 304, 0],
        [1, "t", 2, 69, 304, 0],
        [1, "t", 4, 69, 303, 0],
        [1, "t", 5, 66, 304, 0],
        [1, "t", 0, 67, 304, 0],
        [1, "b", 2, 72, 304, 0],
        [1, "t", 0, 71, 303, 0],
        [1, "t", 4, 72, 303, 0],
        [1, "t", 4, 74, 304, 0],
        [1, "t", 2, 74, 303, 0],
        [1, "t", 3, 75, 304, 0],
        [1, "t", 1, 77, 303, 0],
        [1, "t", 4, 78, 303, 0],
        [1, "t", 4, 79, 304, 0],
        [1, "t", 2, 80, 304, 0],
        [1, "b", 1, 81, 304, 0],
        [1, "t", 2, 81, 303, 0],
        [1, "t", 5, 82, 303, 0],
        [1, "t", 1, 83, 303, 0],
        [1, "b", 2, 83, 304, 0],
        [1, "t", 1, 84, 304, 0],
        [1, "t", 4, 84, 303, 0],
        [1, "t", 5, 85, 304, 0],
        [1, "t", 3, 85, 303, 0],
        [1, "b", 2, 86, 304, 0],
        [1, "t", 1, 86, 303, 0],
        [1, "b", 3, 87, 303, 0],
        [1, "t", 4, 87, 304, 0],
        [1, "t", 4, 88, 303, 0],
        [1, "t", 0, 88, 304, 0],
        [1, "b", 1, 89, 303, 0],
        [1, "t", 3, 89, 304, 0],
        [1, "t", 3, 90, 303, 0],
        [1, "t", 4, 90, 304, 0],
        [1, "t", 4, 91, 303, 0],
        [1, "t", 0, 91, 304, 0],
        [1, "b", 2, 92, 303, 0],
        [1, "t", 4, 92, 304, 0],
        [1, "t", 5, 93, 303, 0],
        [1, "t", 0, 93, 304, 0],
        [1, "b", 3, 94, 303, 0],
        [1, "b", 0, 94, 304, 0],
        [1, "b", 0, 95, 303, 0],
        [1, "t", 2, 95, 304, 0],
        [1, "f", 1, 5, 151, 1],
        [1, "f", 2, 5, 153, 1],
        [1, "f", 0, 5, 152, 1],
        [1, "f", 0, 5, 147, 1],
        [1, "f", 0, 5, 144, 1],
        [1, "f", 0, 5, 140, 1],
        [1, "f", 1, 5, 149, 1],
        [1, "f", 1, 5, 146, 1],
        [1, "f", 1, 5, 143, 1],
        [1, "f", 1, 5, 141, 1],
        [1, "f", 2, 5, 150, 1],
        [1, "f", 2, 5, 148, 1],
        [1, "f", 2, 5, 145, 1],
        [1, "f", 2, 5, 142, 1],
        [1, "f", 2, 5, 139, 1],
        [1, "f", 2, 5, 136, 1],
        [1, "f", 2, 5, 133, 1],
        [1, "f", 2, 5, 131, 1],
        [1, "f", 2, 5, 127, 1],
        [1, "f", 2, 5, 125, 1],
        [1, "f", 1, 5, 138, 1],
        [1, "f", 1, 5, 135, 1],
        [1, "f", 1, 5, 132, 1],
        [1, "f", 1, 5, 130, 1],
        [1, "f", 1, 5, 128, 1],
        [1, "f", 1, 5, 126, 1],
        [1, "f", 1, 5, 124, 1],
        [1, "f", 0, 5, 129, 1],
        [1, "f", 0, 5, 134, 1],
        [1, "f", 0, 5, 137, 1],
        [1, "f", 0, 5, 123, 1],
        [1, "f", 1, 5, 122, 1],
        [1, "f", 1, 5, 120, 1],
        [1, "f", 1, 5, 117, 1],
        [1, "f", 1, 5, 115, 1],
        [1, "f", 1, 5, 111, 1],
        [1, "f", 1, 5, 108, 1],
        [1, "f", 2, 5, 121, 1],
        [1, "f", 2, 5, 118, 1],
        [1, "f", 2, 5, 116, 1],
        [1, "f", 2, 5, 113, 1],
        [1, "f", 2, 5, 110, 1],
        [1, "f", 0, 5, 119, 1],
        [1, "f", 0, 5, 114, 1],
        [1, "f", 0, 5, 112, 1],
        [1, "f", 0, 5, 109, 1],
        [1, "f", 1, 5, 106, 1],
        [1, "f", 1, 5, 103, 1],
        [1, "f", 1, 5, 100, 1],
        [1, "f", 1, 5, 97, 1],
        [1, "f", 1, 5, 95, 1],
        [1, "f", 2, 5, 107, 1],
        [1, "f", 2, 5, 105, 1],
        [1, "f", 2, 5, 102, 1],
        [1, "f", 2, 5, 99, 1],
        [1, "f", 2, 5, 96, 1],
        [1, "f", 2, 5, 94, 1],
        [1, "f", 0, 5, 104, 1],
        [1, "f", 0, 5, 101, 1],
        [1, "f", 0, 5, 98, 1],
        [1, "f", 0, 5, 93, 1],
        [1, "f", 1, 5, 92, 1],
        [1, "f", 1, 5, 89, 1],
        [1, "f", 1, 5, 86, 1],
        [1, "f", 1, 5, 83, 1],
        [1, "f", 1, 5, 80, 1],
        [1, "f", 1, 5, 78, 1],
        [1, "f", 2, 5, 90, 1],
        [1, "f", 2, 5, 88, 1],
        [1, "f", 2, 5, 85, 1],
        [1, "f", 2, 5, 82, 1],
        [1, "f", 2, 5, 79, 1],
        [1, "f", 2, 5, 77, 1],
        [1, "f", 2, 5, 75, 1],
        [1, "f", 2, 5, 72, 1],
        [1, "f", 0, 5, 91, 1],
        [1, "f", 0, 5, 87, 1],
        [1, "f", 0, 5, 84, 1],
        [1, "f", 0, 5, 81, 1],
        [1, "f", 0, 5, 76, 1],
        [1, "f", 0, 5, 74, 1],
        [1, "f", 1, 5, 73, 1],
        [1, "f", 1, 5, 71, 1],
        [1, "f", 1, 5, 68, 1],
        [1, "f", 1, 5, 66, 1],
        [1, "f", 1, 5, 62, 1],
        [1, "f", 1, 5, 59, 1],
        [1, "f", 1, 5, 56, 1],
        [1, "f", 1, 5, 53, 1],
        [1, "f", 1, 5, 50, 1],
        [1, "f", 2, 5, 70, 1],
        [1, "f", 2, 5, 67, 1],
        [1, "f", 2, 5, 65, 1],
        [1, "f", 2, 5, 63, 1],
        [1, "f", 2, 5, 60, 1],
        [1, "f", 2, 5, 57, 1],
        [1, "f", 2, 5, 54, 1],
        [1, "f", 2, 5, 51, 1],
        [1, "f", 0, 5, 69, 1],
        [1, "f", 0, 5, 64, 1],
        [1, "f", 0, 5, 61, 1],
        [1, "f", 0, 5, 58, 1],
        [1, "f", 0, 5, 55, 1],
        [1, "f", 0, 5, 52, 1],
        [1, "f", 0, 5, 49, 1],
        [1, "f", 0, 5, 45, 1],
        [1, "f", 0, 5, 42, 1],
        [1, "f", 0, 5, 38, 1],
        [1, "f", 0, 5, 34, 1],
        [1, "f", 0, 5, 31, 1],
        [1, "f", 1, 5, 48, 1],
        [1, "f", 1, 5, 44, 1],
        [1, "f", 1, 5, 41, 1],
        [1, "f", 1, 5, 37, 1],
        [1, "f", 1, 5, 33, 1],
        [1, "f", 1, 5, 29, 1],
        [1, "f", 2, 5, 30, 1],
        [1, "f", 2, 5, 32, 1],
        [1, "f", 2, 5, 35, 1],
        [1, "f", 2, 5, 39, 1],
        [1, "f", 2, 5, 46, 1],
        [1, "f", 2, 5, 43, 1],
        [1, "f", 1, 5, 47, 1],
        [1, "f", 0, 5, 40, 1],
        [1, "f", 0, 5, 36, 1],
        [1, "f", 0, 5, 28, 1],
        [1, "f", 1, 5, 25, 1],
        [1, "f", 1, 5, 22, 1],
        [1, "f", 1, 5, 20, 1],
        [1, "f", 1, 5, 16, 1],
        [1, "f", 1, 5, 13, 1],
        [1, "f", 1, 5, 10, 1],
        [1, "f", 2, 5, 27, 1],
        [1, "f", 2, 5, 24, 1],
        [1, "f", 2, 5, 21, 1],
        [1, "f", 2, 5, 19, 1],
        [1, "f", 2, 5, 15, 1],
        [1, "f", 2, 5, 12, 1],
        [1, "f", 2, 5, 9, 1],
        [1, "f", 0, 5, 26, 1],
        [1, "f", 0, 5, 23, 1],
        [1, "f", 0, 5, 14, 1],
        [1, "f", 0, 5, 11, 1],
        [1, "f", 0, 5, 17, 1],
        [1, "f", 1, 5, 18, 1],
        [1, "f", 1, 5, 8, 1],
        [1, "f", 0, 5, 7, 1],
        [1, "f", 1, 5, 6, 1],
        [1, "f", 0, 5, 5, 1],
        [1, "f", 1, 6, 5, 1],
        [1, "f", 2, 7, 5, 1],
        [1, "f", 0, 8, 5, 1],
        [1, "f", 1, 9, 5, 1],
        [1, "f", 1, 12, 5, 1],
        [1, "f", 1, 15, 5, 1],
        [1, "f", 1, 17, 5, 1],
        [1, "f", 1, 22, 5, 1],
        [1, "f", 1, 26, 5, 1],
        [1, "f", 2, 10, 5, 1],
        [1, "f", 2, 13, 5, 1],
        [1, "f", 2, 16, 5, 1],
        [1, "f", 2, 18, 5, 1],
        [1, "f", 2, 21, 5, 1],
        [1, "f", 2, 23, 5, 1],
        [1, "f", 2, 25, 5, 1],
        [1, "f", 2, 27, 5, 1],
        [1, "f", 0, 11, 5, 1],
        [1, "f", 0, 14, 5, 1],
        [1, "f", 0, 19, 5, 1],
        [1, "f", 0, 24, 5, 1],
        [1, "f", 0, 28, 5, 1],
        [1, "f", 1, 20, 5, 1],
        [1, "f", 1, 29, 5, 1],
        [1, "f", 1, 32, 5, 1],
        [1, "f", 1, 35, 5, 1],
        [1, "f", 1, 38, 5, 1],
        [1, "f", 1, 41, 5, 1],
        [1, "f", 1, 45, 5, 1],
        [1, "f", 2, 30, 5, 1],
        [1, "f", 2, 33, 5, 1],
        [1, "f", 2, 36, 5, 1],
        [1, "f", 2, 39, 5, 1],
        [1, "f", 2, 42, 5, 1],
        [1, "f", 2, 44, 5, 1],
        [1, "f", 2, 46, 5, 1],
        [1, "f", 0, 43, 5, 1],
        [1, "f", 0, 40, 5, 1],
        [1, "f", 0, 37, 5, 1],
        [1, "f", 0, 34, 5, 1],
        [1, "f", 0, 31, 5, 1],
        [1, "f", 0, 47, 5, 1],
        [1, "f", 1, 48, 5, 1],
        [1, "f", 1, 51, 5, 1],
        [1, "f", 1, 53, 5, 1],
        [1, "f", 1, 57, 5, 1],
        [1, "f", 1, 60, 5, 1],
        [1, "f", 1, 63, 5, 1],
        [1, "f", 1, 65, 5, 1],
        [1, "f", 2, 64, 5, 1],
        [1, "f", 2, 62, 5, 1],
        [1, "f", 2, 59, 5, 1],
        [1, "f", 2, 56, 5, 1],
        [1, "f", 2, 52, 5, 1],
        [1, "f", 2, 49, 5, 1],
        [1, "f", 2, 54, 5, 1],
        [1, "f", 0, 50, 5, 1],
        [1, "f", 0, 55, 5, 1],
        [1, "f", 0, 58, 5, 1],
        [1, "f", 0, 61, 5, 1],
        [1, "f", 0, 66, 5, 1],
        [1, "f", 1, 67, 5, 1],
        [1, "f", 1, 70, 5, 1],
        [1, "f", 1, 72, 5, 1],
        [1, "f", 1, 75, 5, 1],
        [1, "f", 1, 79, 5, 1],
        [1, "f", 2, 68, 5, 1],
        [1, "f", 2, 71, 5, 1],
        [1, "f", 2, 74, 5, 1],
        [1, "f", 2, 76, 5, 1],
        [1, "f", 2, 78, 5, 1],
        [1, "f", 0, 69, 5, 1],
        [1, "f", 0, 73, 5, 1],
        [1, "f", 0, 77, 5, 1],
        [1, "f", 0, 80, 5, 1],
        [1, "f", 1, 81, 5, 1],
        [1, "f", 1, 84, 5, 1],
        [1, "f", 1, 87, 5, 1],
        [1, "f", 1, 89, 5, 1],
        [1, "f", 1, 92, 5, 1],
        [1, "f", 1, 94, 5, 1],
        [1, "f", 0, 82, 5, 1],
        [1, "f", 2, 83, 5, 1],
        [1, "f", 2, 85, 5, 1],
        [1, "f", 2, 88, 5, 1],
        [1, "f", 2, 90, 5, 1],
        [1, "f", 2, 93, 5, 1],
        [1, "f", 2, 95, 5, 1],
        [1, "f", 0, 86, 5, 1],
        [1, "f", 0, 91, 5, 1],
        [1, "f", 2, 6, 153, 1],
        [1, "f", 1, 6, 152, 1],
        [1, "t", 1, 93, 301, 0],
        [1, "t", 3, 94, 302, 0],
        [1, "t", 5, 95, 302, 0],
        [1, "t", 5, 93, 302, 0],
        [1, "b", 3, 92, 302, 0],
        [1, "t", 1, 91, 302, 0],
        [1, "t", 5, 90, 302, 0],
        [1, "b", 2, 92, 301, 0],
        [1, "t", 1, 91, 301, 0],
        [1, "t", 2, 90, 301, 0],
        [1, "b", 2, 89, 302, 0],
        [1, "t", 4, 89, 301, 0],
        [1, "t", 1, 88, 302, 0],
        [1, "t", 2, 88, 301, 0],
        [1, "t", 3, 87, 302, 0],
        [1, "t", 4, 87, 299, 0],
        [1, "t", 4, 86, 302, 0],
        [1, "t", 1, 85, 302, 0],
        [1, "t", 5, 85, 301, 0],
        [1, "b", 2, 84, 302, 0],
        [1, "t", 5, 83, 302, 0],
        [1, "t", 1, 82, 302, 0],
        [1, "t", 5, 81, 302, 0],
        [1, "t", 2, 80, 302, 0],
        [1, "t", 4, 79, 302, 0],
        [1, "t", 2, 78, 302, 0],
        [1, "b", 1, 77, 302, 0],
        [1, "b", 2, 76, 302, 0],
        [1, "t", 2, 75, 302, 0],
        [1, "t", 4, 74, 302, 0],
        [1, "b", 1, 73, 302, 0],
        [1, "t", 2, 72, 302, 0],
        [1, "t", 4, 71, 302, 0],
        [1, "b", 3, 70, 302, 0],
        [1, "t", 1, 69, 302, 0],
        [1, "t", 2, 68, 302, 0],
        [1, "t", 5, 67, 302, 0],
        [1, "b", 1, 66, 302, 0],
        [1, "t", 2, 65, 302, 0],
        [1, "t", 4, 64, 302, 0],
        [1, "b", 3, 63, 302, 0],
        [1, "t", 5, 62, 302, 0],
        [1, "b", 1, 61, 302, 0],
        [1, "t", 3, 60, 302, 0],
        [1, "t", 4, 59, 302, 0],
        [1, "b", 2, 58, 302, 0],
        [1, "t", 5, 57, 302, 0],
        [1, "t", 1, 56, 302, 0],
        [1, "t", 3, 55, 302, 0],
        [1, "t", 4, 54, 302, 0],
        [1, "t", 1, 53, 302, 0],
        [1, "t", 5, 52, 302, 0],
        [1, "t", 2, 51, 302, 0],
        [1, "t", 4, 50, 302, 0],
        [1, "t", 2, 49, 302, 0],
        [1, "b", 1, 48, 302, 0],
        [1, "t", 3, 47, 302, 0],
        [1, "t", 4, 46, 302, 0],
        [1, "t", 1, 45, 302, 0],
        [1, "t", 2, 44, 302, 0],
        [1, "t", 5, 43, 302, 0],
        [1, "t", 2, 42, 302, 0],
        [1, "t", 1, 41, 302, 0],
        [1, "t", 4, 40, 302, 0],
        [1, "b", 2, 39, 302, 0],
        [1, "t", 5, 38, 302, 0],
        [1, "t", 1, 37, 302, 0],
        [1, "t", 2, 36, 302, 0],
        [1, "t", 5, 35, 302, 0],
        [1, "t", 0, 34, 302, 0],
        [1, "t", 3, 33, 302, 0],
        [1, "t", 4, 32, 302, 0],
        [1, "b", 1, 31, 302, 0],
        [1, "t", 2, 30, 302, 0],
        [1, "t", 4, 29, 302, 0],
        [1, "t", 2, 28, 302, 0],
        [1, "t", 5, 27, 302, 0],
        [1, "b", 3, 26, 302, 0],
        [1, "t", 1, 25, 302, 0],
        [1, "t", 4, 24, 302, 0],
        [1, "t", 2, 23, 302, 0],
        [1, "t", 1, 22, 302, 0],
        [1, "t", 5, 21, 302, 0],
        [1, "t", 2, 20, 302, 0],
        [1, "t", 4, 19, 302, 0],
        [1, "b", 1, 18, 302, 0],
        [1, "t", 5, 17, 302, 0],
        [1, "t", 3, 16, 302, 0],
        [1, "t", 1, 15, 302, 0],
        [1, "t", 5, 14, 302, 0],
        [1, "t", 3, 13, 302, 0],
        [1, "t", 4, 12, 302, 0],
        [1, "t", 1, 11, 302, 0],
        [1, "t", 2, 10, 302, 0],
        [1, "t", 4, 9, 302, 0],
        [1, "b", 3, 8, 302, 0],
        [1, "t", 5, 8, 302, 0],
        [1, "t", 5, 7, 302, 0],
        [1, "b", 2, 6, 302, 0],
        [1, "t", 1, 6, 301, 0],
        [1, "t", 4, 6, 300, 0],
        [1, "t", 2, 6, 299, 0],
        [1, "b", 0, 6, 298, 0],
        [1, "t", 5, 6, 297, 0],
        [1, "t", 2, 6, 296, 0],
        [1, "t", 0, 6, 295, 0],
        [1, "b", 2, 6, 294, 0],
        [1, "t", 5, 6, 293, 0],
        [1, "t", 1, 6, 292, 0],
        [1, "b", 0, 6, 291, 0],
        [1, "t", 2, 6, 290, 0],
        [1, "t", 5, 6, 289, 0],
        [1, "t", 1, 6, 288, 0],
        [1, "t", 4, 6, 287, 0],
        [1, "t", 2, 6, 286, 0],
        [1, "t", 5, 6, 285, 0],
        [1, "t", 2, 6, 284, 0],
        [1, "b", 0, 6, 283, 0],
        [1, "t", 2, 6, 282, 0],
        [1, "t", 5, 6, 281, 0],
        [1, "b", 2, 6, 280, 0],
        [1, "t", 5, 6, 279, 0],
        [1, "t", 1, 6, 278, 0],
        [1, "t", 4, 6, 277, 0],
        [1, "t", 3, 6, 276, 0],
        [1, "t", 5, 6, 275, 0],
        [1, "b", 0, 6, 274, 0],
        [1, "t", 5, 6, 273, 0],
        [1, "t", 1, 6, 272, 0],
        [1, "t", 4, 6, 271, 0],
        [1, "b", 3, 6, 270, 0],
        [1, "t", 5, 6, 269, 0],
        [1, "t", 1, 6, 268, 0],
        [1, "t", 4, 6, 267, 0],
        [1, "t", 1, 6, 266, 0],
        [1, "t", 3, 6, 265, 0],
        [1, "t", 4, 6, 264, 0],
        [1, "b", 2, 6, 263, 0],
        [1, "t", 5, 6, 262, 0],
        [1, "t", 3, 6, 261, 0],
        [1, "t", 0, 6, 260, 0],
        [1, "t", 5, 6, 259, 0],
        [1, "t", 1, 6, 258, 0],
        [1, "t", 3, 6, 257, 0],
        [1, "t", 4, 6, 255, 0],
        [1, "t", 3, 6, 254, 0],
        [1, "t", 5, 6, 253, 0],
        [1, "b", 2, 6, 252, 0],
        [1, "t", 5, 6, 251, 0],
        [1, "t", 1, 6, 250, 0],
        [1, "t", 3, 6, 249, 0],
        [1, "t", 4, 6, 248, 0],
        [1, "b", 3, 6, 247, 0],
        [1, "t", 5, 6, 246, 0],
        [1, "t", 3, 6, 245, 0],
        [1, "t", 5, 6, 244, 0],
        [1, "t", 0, 6, 243, 0],
        [1, "t", 4, 6, 242, 0],
        [1, "t", 3, 6, 241, 0],
        [1, "t", 5, 6, 240, 0],
        [1, "b", 0, 6, 239, 0],
        [1, "t", 3, 6, 238, 0],
        [1, "t", 4, 6, 237, 0],
        [1, "t", 1, 6, 236, 0],
        [1, "t", 5, 6, 235, 0],
        [1, "b", 2, 6, 234, 0],
        [1, "t", 2, 6, 233, 0],
        [1, "t", 4, 6, 232, 0],
        [1, "b", 3, 6, 231, 0],
        [1, "t", 5, 6, 230, 0],
        [1, "t", 1, 6, 229, 0],
        [1, "t", 2, 6, 228, 0],
        [1, "t", 5, 6, 227, 0],
        [1, "b", 2, 6, 226, 0],
        [1, "t", 4, 6, 225, 0],
        [1, "t", 0, 6, 224, 0],
        [1, "t", 2, 6, 223, 0],
        [1, "t", 0, 6, 222, 0],
        [1, "b", 2, 6, 221, 0],
        [1, "t", 4, 6, 220, 0],
        [1, "b", 3, 6, 219, 0],
        [1, "t", 5, 6, 218, 0],
        [1, "t", 0, 6, 217, 0],
        [1, "t", 3, 6, 216, 0],
        [1, "b", 0, 6, 215, 0],
        [1, "t", 4, 6, 214, 0],
        [1, "t", 2, 6, 213, 0],
        [1, "t", 0, 6, 212, 0],
        [1, "t", 2, 6, 211, 0],
        [1, "b", 3, 6, 210, 0],
        [1, "t", 0, 6, 209, 0],
        [1, "t", 5, 6, 207, 0],
        [1, "t", 2, 6, 208, 0],
        [1, "t", 0, 6, 206, 0],
        [1, "t", 2, 6, 205, 0],
        [1, "t", 2, 6, 203, 0],
        [1, "b", 0, 6, 202, 0],
        [1, "t", 3, 6, 201, 0],
        [1, "t", 4, 6, 199, 0],
        [1, "t", 0, 6, 198, 0],
        [1, "t", 2, 6, 197, 0],
        [1, "t", 4, 6, 196, 0],
        [1, "t", 1, 6, 195, 0],
        [1, "t", 3, 6, 194, 0],
        [1, "t", 4, 6, 192, 0],
        [1, "t", 2, 6, 191, 0],
        [1, "b", 0, 6, 190, 0],
        [1, "t", 3, 6, 189, 0],
        [1, "t", 4, 6, 187, 0],
        [1, "b", 0, 6, 186, 0],
        [1, "t", 2, 6, 185, 0],
        [1, "t", 4, 6, 184, 0],
        [1, "t", 2, 6, 183, 0],
        [1, "t", 0, 6, 182, 0],
        [1, "b", 2, 6, 181, 0],
        [1, "t", 5, 6, 180, 0],
        [1, "t", 2, 6, 179, 0],
        [1, "t", 0, 6, 178, 0],
        [1, "t", 2, 6, 177, 0],
        [1, "t", 4, 6, 176, 0],
        [1, "b", 2, 6, 175, 0],
        [1, "t", 1, 6, 174, 0],
        [1, "t", 5, 6, 173, 0],
        [1, "t", 2, 6, 256, 0],
        [1, "t", 4, 6, 204, 0],
        [1, "t", 4, 6, 200, 0],
        [1, "t", 2, 6, 193, 0],
        [1, "t", 2, 6, 188, 0],
        [1, "f", 1, 6, 150, 1],
        [1, "f", 2, 6, 151, 1],
        [1, "f", 2, 6, 149, 1],
        [1, "f", 1, 6, 148, 1],
        [1, "f", 2, 6, 147, 1],
        [1, "f", 2, 6, 145, 1],
        [1, "f", 2, 6, 143, 1],
        [1, "f", 1, 6, 146, 1],
        [1, "f", 1, 6, 144, 1],
        [1, "f", 1, 6, 142, 1],
        [1, "f", 2, 6, 141, 1],
        [1, "f", 2, 6, 139, 1],
        [1, "f", 2, 6, 137, 1],
        [1, "f", 2, 6, 135, 1],
        [1, "f", 2, 6, 133, 1],
        [1, "f", 1, 6, 140, 1],
        [1, "f", 1, 6, 138, 1],
        [1, "f", 1, 6, 136, 1],
        [1, "f", 1, 6, 134, 1],
        [1, "f", 1, 6, 132, 1],
        [1, "f", 2, 6, 131, 1],
        [1, "f", 2, 6, 129, 1],
        [1, "f", 2, 6, 127, 1],
        [1, "f", 2, 6, 125, 1],
        [1, "f", 2, 6, 123, 1],
        [1, "f", 2, 6, 121, 1],
        [1, "f", 1, 6, 130, 1],
        [1, "f", 1, 6, 128, 1],
        [1, "f", 1, 6, 126, 1],
        [1, "f", 1, 6, 124, 1],
        [1, "f", 1, 6, 122, 1],
        [1, "f", 1, 6, 120, 1],
        [1, "f", 2, 6, 119, 1],
        [1, "f", 2, 6, 117, 1],
        [1, "f", 2, 6, 115, 1],
        [1, "f", 2, 6, 113, 1],
        [1, "f", 2, 6, 111, 1],
        [1, "f", 2, 6, 109, 1],
        [1, "f", 1, 6, 118, 1],
        [1, "f", 1, 6, 116, 1],
        [1, "f", 1, 6, 114, 1],
        [1, "f", 1, 6, 112, 1],
        [1, "f", 1, 6, 110, 1],
        [1, "f", 1, 6, 108, 1],
        [1, "f", 1, 6, 106, 1],
        [1, "f", 1, 6, 104, 1],
        [1, "f", 2, 6, 107, 1],
        [1, "f", 2, 6, 105, 1],
        [1, "f", 2, 6, 103, 1],
        [1, "f", 2, 6, 101, 1],
        [1, "f", 2, 6, 99, 1],
        [1, "f", 2, 6, 97, 1],
        [1, "f", 2, 6, 95, 1],
        [1, "f", 2, 6, 93, 1],
        [1, "f", 2, 6, 91, 1],
        [1, "f", 1, 6, 102, 1],
        [1, "f", 1, 6, 100, 1],
        [1, "f", 1, 6, 98, 1],
        [1, "f", 1, 6, 96, 1],
        [1, "f", 1, 6, 94, 1],
        [1, "f", 1, 6, 92, 1],
        [1, "f", 1, 6, 90, 1],
        [1, "f", 1, 6, 88, 1],
        [1, "f", 1, 6, 86, 1],
        [1, "f", 2, 6, 89, 1],
        [1, "f", 2, 6, 87, 1],
        [1, "f", 2, 6, 85, 1],
        [1, "f", 2, 6, 83, 1],
        [1, "f", 2, 6, 81, 1],
        [1, "f", 2, 6, 79, 1],
        [1, "f", 2, 6, 77, 1],
        [1, "f", 1, 6, 84, 1],
        [1, "f", 1, 6, 82, 1],
        [1, "f", 1, 6, 80, 1],
        [1, "f", 1, 6, 78, 1],
        [1, "f", 1, 6, 76, 1],
        [1, "f", 2, 6, 75, 1],
        [1, "f", 2, 6, 73, 1],
        [1, "f", 2, 6, 71, 1],
        [1, "f", 2, 6, 69, 1],
        [1, "f", 2, 6, 67, 1],
        [1, "f", 2, 6, 65, 1],
        [1, "f", 1, 6, 74, 1],
        [1, "f", 1, 6, 72, 1],
        [1, "f", 1, 6, 70, 1],
        [1, "f", 1, 6, 68, 1],
        [1, "f", 1, 6, 66, 1],
        [1, "f", 1, 6, 64, 1],
        [1, "f", 2, 6, 63, 1],
        [1, "f", 2, 6, 61, 1],
        [1, "f", 2, 6, 59, 1],
        [1, "f", 2, 6, 57, 1],
        [1, "f", 2, 6, 55, 1],
        [1, "f", 2, 6, 53, 1],
        [1, "f", 2, 6, 51, 1],
        [1, "f", 1, 6, 62, 1],
        [1, "f", 1, 6, 60, 1],
        [1, "f", 1, 6, 58, 1],
        [1, "f", 1, 6, 56, 1],
        [1, "f", 1, 6, 54, 1],
        [1, "f", 1, 6, 52, 1],
        [1, "f", 1, 6, 50, 1],
        [1, "f", 2, 6, 49, 1],
        [1, "f", 2, 6, 47, 1],
        [1, "f", 2, 6, 45, 1],
        [1, "f", 2, 6, 43, 1],
        [1, "f", 2, 6, 41, 1],
        [1, "f", 2, 6, 39, 1],
        [1, "f", 1, 6, 48, 1],
        [1, "f", 1, 6, 46, 1],
        [1, "f", 1, 6, 44, 1],
        [1, "f", 1, 6, 42, 1],
        [1, "f", 1, 6, 40, 1],
        [1, "f", 1, 6, 38, 1],
        [1, "f", 2, 6, 37, 1],
        [1, "f", 2, 6, 35, 1],
        [1, "f", 2, 6, 33, 1],
        [1, "f", 2, 6, 31, 1],
        [1, "f", 2, 6, 29, 1],
        [1, "f", 2, 6, 27, 1],
        [1, "f", 1, 6, 36, 1],
        [1, "f", 1, 6, 34, 1],
        [1, "f", 1, 6, 32, 1],
        [1, "f", 1, 6, 30, 1],
        [1, "f", 1, 6, 28, 1],
        [1, "f", 1, 6, 26, 1],
        [1, "f", 2, 6, 25, 1],
        [1, "f", 2, 6, 23, 1],
        [1, "f", 2, 6, 21, 1],
        [1, "f", 2, 6, 19, 1],
        [1, "f", 2, 6, 17, 1],
        [1, "f", 2, 6, 15, 1],
        [1, "f", 1, 6, 24, 1],
        [1, "f", 1, 6, 22, 1],
        [1, "f", 1, 6, 20, 1],
        [1, "f", 1, 6, 18, 1],
        [1, "f", 1, 6, 16, 1],
        [1, "f", 2, 6, 13, 1],
        [1, "f", 2, 6, 11, 1],
        [1, "f", 2, 6, 9, 1],
        [1, "f", 2, 6, 7, 1],
        [1, "f", 1, 6, 14, 1],
        [1, "f", 1, 6, 12, 1],
        [1, "f", 1, 6, 10, 1],
        [1, "f", 1, 6, 8, 1],
        [1, "f", 1, 6, 6, 1],
        [1, "f", 1, 8, 6, 1],
        [1, "f", 2, 7, 6, 1],
        [1, "f", 2, 9, 6, 1],
        [1, "f", 2, 11, 6, 1],
        [1, "f", 2, 13, 6, 1],
        [1, "f", 2, 15, 6, 1],
        [1, "f", 1, 10, 6, 1],
        [1, "f", 1, 12, 6, 1],
        [1, "f", 1, 14, 6, 1],
        [1, "f", 1, 16, 6, 1],
        [1, "f", 1, 18, 6, 1],
        [1, "f", 1, 20, 6, 1],
        [1, "f", 1, 22, 6, 1],
        [1, "f", 1, 24, 6, 1],
        [1, "f", 1, 26, 6, 1],
        [1, "f", 2, 17, 6, 1],
        [1, "f", 2, 19, 6, 1],
        [1, "f", 2, 21, 6, 1],
        [1, "f", 2, 23, 6, 1],
        [1, "f", 2, 25, 6, 1],
        [1, "f", 2, 27, 6, 1],
        [1, "f", 2, 29, 6, 1],
        [1, "f", 2, 31, 6, 1],
        [1, "f", 2, 33, 6, 1],
        [1, "f", 1, 28, 6, 1],
        [1, "f", 1, 30, 6, 1],
        [1, "f", 1, 32, 6, 1],
        [1, "f", 1, 34, 6, 1],
        [1, "f", 2, 67, 6, 1],
        [1, "f", 2, 69, 6, 1],
        [1, "f", 2, 71, 6, 1],
        [1, "f", 2, 73, 6, 1],
        [1, "f", 2, 75, 6, 1],
        [1, "f", 1, 68, 6, 1],
        [1, "f", 1, 70, 6, 1],
        [1, "f", 1, 72, 6, 1],
        [1, "f", 1, 74, 6, 1],
        [1, "f", 1, 76, 6, 1],
        [1, "f", 2, 77, 6, 1],
        [1, "f", 2, 79, 6, 1],
        [1, "f", 2, 81, 6, 1],
        [1, "f", 2, 83, 6, 1],
        [1, "f", 2, 85, 6, 1],
        [1, "f", 1, 78, 6, 1],
        [1, "f", 1, 80, 6, 1],
        [1, "f", 1, 82, 6, 1],
        [1, "f", 1, 84, 6, 1],
        [1, "f", 1, 86, 6, 1],
        [1, "f", 2, 87, 6, 1],
        [1, "f", 2, 89, 6, 1],
        [1, "f", 2, 91, 6, 1],
        [1, "f", 2, 93, 6, 1],
        [1, "f", 1, 88, 6, 1],
        [1, "f", 1, 90, 6, 1],
        [1, "f", 1, 92, 6, 1],
        [1, "f", 1, 94, 6, 1],
        [1, "f", 2, 95, 6, 1],
        [1, "f", 1, 95, 7, 1],
        [1, "f", 1, 83, 7, 1],
        [1, "f", 1, 81, 7, 1],
        [1, "f", 1, 79, 7, 1],
        [1, "f", 1, 77, 7, 1],
        [1, "f", 1, 75, 7, 1],
        [1, "f", 1, 73, 7, 1],
        [1, "f", 1, 71, 7, 1],
        [1, "f", 1, 69, 7, 1],
        [1, "f", 1, 33, 7, 1],
        [1, "f", 1, 31, 7, 1],
        [1, "f", 1, 29, 7, 1],
        [1, "f", 1, 27, 7, 1],
        [1, "f", 1, 25, 7, 1],
        [1, "f", 1, 23, 7, 1],
        [1, "f", 1, 21, 7, 1],
        [1, "f", 1, 19, 7, 1],
        [1, "f", 1, 17, 7, 1],
        [1, "f", 1, 15, 7, 1],
        [1, "f", 1, 13, 7, 1],
        [1, "f", 1, 11, 7, 1],
        [1, "f", 1, 9, 7, 1],
        [1, "f", 1, 7, 7, 1],
        [1, "s", 0, 7, 8, 1],
        [1, "t", 4, 7, 174, 0],
        [1, "t", 5, 7, 175, 0],
        [1, "t", 4, 7, 176, 0],
        [1, "b", 2, 7, 177, 0],
        [1, "t", 3, 94, 301, 0],
        [1, "b", 3, 95, 301, 0],
        [1, "t", 4, 96, 301, 0],
        [1, "t", 1, 97, 301, 0],
        [1, "t", 2, 98, 301, 0],
        [1, "t", 4, 99, 301, 0],
        [1, "t", 2, 100, 301, 0],
        [1, "t", 4, 96, 304, 0],
        [1, "t", 2, 96, 302, 0],
        [1, "t", 2, 97, 304, 0],
        [1, "t", 2, 96, 303, 0],
        [1, "t", 5, 97, 303, 0],
        [1, "t", 5, 98, 304, 0],
        [1, "b", 2, 97, 302, 0],
        [1, "b", 2, 99, 304, 0],
        [1, "t", 1, 98, 303, 0],
        [1, "t", 4, 98, 302, 0],
        [1, "t", 4, 99, 303, 0],
        [1, "t", 4, 100, 304, 0],
        [1, "t", 5, 99, 302, 0],
        [1, "t", 5, 101, 303, 0],
        [1, "t", 2, 100, 303, 0],
        [1, "t", 0, 100, 302, 0],
        [1, "t", 0, 101, 304, 0],
        [1, "t", 4, 102, 304, 0],
        [1, "f", 0, 94, 7, 1],
        [1, "f", 1, 93, 7, 1],
        [1, "f", 1, 92, 7, 1],
        [1, "f", 0, 91, 7, 1],
        [1, "f", 1, 90, 7, 1],
        [1, "f", 1, 89, 7, 1],
        [1, "f", 0, 88, 7, 1],
        [1, "f", 1, 87, 7, 1],
        [1, "f", 1, 86, 7, 1],
        [1, "f", 1, 85, 7, 1],
        [1, "f", 0, 84, 7, 1],
        [1, "f", 1, 82, 7, 1],
        [1, "f", 0, 80, 7, 1],
        [1, "f", 1, 78, 7, 1],
        [1, "f", 0, 76, 7, 1],
        [1, "f", 1, 74, 7, 1],
        [1, "f", 0, 72, 7, 1],
        [1, "f", 0, 70, 7, 1],
        [1, "f", 1, 68, 7, 1],
        [1, "f", 1, 32, 7, 1],
        [1, "f", 0, 30, 7, 1],
        [1, "f", 1, 28, 7, 1],
        [1, "f", 0, 26, 7, 1],
        [1, "f", 1, 24, 7, 1],
        [1, "f", 0, 22, 7, 1],
        [1, "f", 1, 20, 7, 1],
        [1, "f", 0, 18, 7, 1],
        [1, "f", 1, 16, 7, 1],
        [1, "f", 0, 14, 7, 1],
        [1, "f", 1, 12, 7, 1],
        [1, "f", 0, 10, 7, 1],
        [1, "f", 1, 8, 7, 1],
        [1, "s", 1, 7, 9, 1],
        [1, "f", 0, 95, 152, 1],
        [1, "f", 1, 95, 151, 1],
        [1, "f", 0, 95, 11, 1],
        [1, "f", 1, 95, 12, 1],
        [1, "f", 1, 95, 14, 1],
        [1, "f", 1, 95, 19, 1],
        [1, "f", 0, 95, 15, 1],
        [1, "f", 0, 95, 20, 1],
        [1, "f", 1, 95, 21, 1],
        [1, "f", 1, 95, 26, 1],
        [1, "f", 1, 95, 37, 1],
        [1, "f", 0, 95, 44, 1],
        [1, "f", 1, 95, 50, 1],
        [1, "f", 1, 95, 52, 1],
        [1, "f", 0, 95, 53, 1],
        [1, "f", 1, 95, 54, 1],
        [1, "f", 1, 95, 62, 1],
        [1, "f", 0, 95, 55, 1],
        [1, "f", 1, 95, 64, 1],
        [1, "f", 0, 95, 58, 1],
        [1, "f", 0, 95, 61, 1],
        [1, "f", 0, 95, 68, 1],
        [1, "f", 0, 95, 72, 1],
        [1, "f", 0, 95, 78, 1],
        [1, "f", 1, 95, 115, 1],
        [1, "f", 1, 95, 117, 1],
        [1, "f", 1, 95, 128, 1],
        [1, "f", 0, 95, 85, 1],
        [1, "f", 0, 95, 91, 1],
        [1, "f", 0, 95, 95, 1],
        [1, "f", 0, 95, 114, 1],
        [1, "f", 2, 95, 113, 1],
        [1, "f", 1, 95, 119, 1],
        [1, "f", 0, 95, 120, 1],
        [1, "f", 1, 95, 121, 1],
        [1, "f", 0, 95, 127, 1],
        [1, "f", 1, 95, 130, 1],
        [1, "f", 0, 95, 131, 1],
        [1, "f", 1, 95, 132, 1],
        [1, "f", 1, 95, 136, 1],
        [1, "f", 0, 95, 137, 1],
        [1, "f", 0, 95, 143, 1],
        [1, "f", 0, 95, 147, 1],
        [1, "f", 1, 95, 138, 1],
        [1, "f", 1, 95, 144, 1],
        [1, "f", 1, 95, 10, 1],
        [1, "f", 0, 95, 8, 1],
        [1, "f", 1, 95, 9, 1],
        [1, "f", 0, 95, 13, 1],
        [1, "f", 1, 95, 16, 1],
        [1, "f", 1, 95, 17, 1],
        [1, "f", 0, 95, 18, 1],
        [1, "f", 1, 95, 45, 1],
        [1, "f", 0, 95, 51, 1],
        [1, "f", 1, 95, 56, 1],
        [1, "f", 1, 95, 57, 1],
        [1, "f", 1, 95, 59, 1],
        [1, "f", 1, 95, 60, 1],
        [1, "f", 1, 95, 63, 1],
        [1, "f", 0, 95, 65, 1],
        [1, "f", 1, 95, 66, 1],
        [1, "f", 1, 95, 67, 1],
        [1, "f", 1, 95, 69, 1],
        [1, "f", 1, 95, 70, 1],
        [1, "f", 0, 95, 71, 1],
        [1, "f", 1, 95, 73, 1],
        [1, "f", 1, 95, 74, 1],
        [1, "f", 0, 95, 75, 1],
        [1, "f", 1, 95, 76, 1],
        [1, "f", 1, 95, 77, 1],
        [1, "f", 1, 95, 79, 1],
        [1, "f", 1, 95, 80, 1],
        [1, "f", 0, 95, 81, 1],
        [1, "f", 1, 95, 82, 1],
        [1, "f", 0, 95, 83, 1],
        [1, "f", 1, 95, 84, 1],
        [1, "f", 1, 95, 86, 1],
        [1, "f", 1, 95, 88, 1],
        [1, "f", 0, 95, 87, 1],
        [1, "f", 1, 95, 89, 1],
        [1, "f", 1, 95, 90, 1],
        [1, "f", 1, 95, 92, 1],
        [1, "f", 1, 95, 93, 1],
        [1, "f", 1, 95, 94, 1],
        [1, "f", 1, 95, 96, 1],
        [1, "f", 1, 95, 97, 1],
        [1, "f", 0, 95, 98, 1],
        [1, "f", 1, 95, 99, 1],
        [1, "f", 1, 95, 100, 1],
        [1, "f", 0, 95, 101, 1],
        [1, "f", 1, 95, 102, 1],
        [1, "f", 0, 95, 103, 1],
        [1, "f", 1, 95, 104, 1],
        [1, "f", 1, 95, 105, 1],
        [1, "f", 0, 95, 106, 1],
        [1, "f", 1, 95, 107, 1],
        [1, "f", 1, 95, 108, 1],
        [1, "f", 1, 95, 109, 1],
        [1, "f", 0, 95, 110, 1],
        [1, "f", 1, 95, 111, 1],
        [1, "f", 0, 95, 112, 1],
        [1, "f", 1, 95, 116, 1],
        [1, "f", 0, 95, 118, 1],
        [1, "f", 0, 95, 122, 1],
        [1, "f", 1, 95, 123, 1],
        [1, "f", 1, 95, 124, 1],
        [1, "f", 0, 95, 125, 1],
        [1, "f", 1, 95, 126, 1],
        [1, "f", 1, 95, 129, 1],
        [1, "f", 1, 95, 133, 1],
        [1, "f", 0, 95, 134, 1],
        [1, "f", 1, 95, 135, 1],
        [1, "f", 1, 95, 139, 1],
        [1, "f", 0, 95, 140, 1],
        [1, "f", 1, 95, 141, 1],
        [1, "f", 1, 95, 142, 1],
        [1, "f", 1, 95, 146, 1],
        [1, "f", 0, 95, 145, 1],
        [1, "f", 1, 95, 148, 1],
        [1, "f", 1, 95, 149, 1],
        [1, "f", 1, 95, 150, 1],
        [1, "f", 1, 95, 153, 1],
        [1, "cs", 0, 64, 9, 1],
        [1, "cs", 1, 64, 10, 1],
        [1, "cs", 2, 64, 16, 1],
        [1, "cs", 2, 64, 19, 1],
        [1, "cs", 0, 64, 20, 1],
        [1, "cs", 1, 64, 21, 1],
        [1, "cs", 2, 64, 22, 1],
        [1, "cs", 0, 64, 23, 1],
        [1, "cs", 2, 64, 24, 1],
        [1, "cs", 1, 64, 29, 1],
        [1, "cs", 2, 64, 30, 1],
        [1, "cs", 3, 64, 31, 1],
        [1, "cs", 0, 64, 32, 1],
        [1, "cs", 1, 64, 33, 1],
        [1, "cs", 2, 64, 34, 1],
        [1, "cs", 0, 64, 35, 1],
        [1, "cs", 2, 64, 8, 1],
        [1, "cs", 2, 65, 8, 1],
        [1, "cs", 1, 65, 9, 1],
        [1, "cs", 2, 65, 10, 1],
        [1, "cs", 3, 65, 11, 1],
        [1, "cs", 1, 65, 16, 1],
        [1, "cs", 0, 64, 17, 1],
        [1, "cs", 3, 65, 17, 1],
        [1, "cs", 2, 64, 18, 1],
        [1, "cs", 2, 65, 18, 1],
        [1, "cs", 0, 65, 19, 1],
        [1, "cs", 1, 65, 20, 1],
        [1, "cs", 3, 65, 21, 1],
        [1, "cs", 2, 65, 22, 1],
        [1, "cs", 3, 65, 23, 1],
        [1, "cs", 0, 65, 24, 1],
        [1, "cs", 2, 65, 29, 1],
        [1, "cs", 3, 65, 30, 1],
        [1, "cs", 0, 65, 31, 1],
        [1, "cs", 1, 65, 32, 1],
        [1, "cs", 2, 65, 33, 1],
        [1, "cs", 3, 65, 34, 1],
        [1, "cs", 2, 63, 9, 1],
        [1, "cs", 0, 62, 9, 1],
        [1, "cs", 2, 61, 9, 1],
        [1, "cs", 0, 60, 9, 1],
        [1, "cs", 2, 59, 9, 1],
        [1, "cs", 2, 58, 9, 1],
        [1, "cs", 0, 57, 9, 1],
        [1, "cs", 2, 56, 9, 1],
        [1, "cs", 2, 55, 9, 1],
        [1, "cs", 2, 54, 9, 1],
        [1, "cs", 0, 53, 9, 1],
        [1, "cs", 0, 51, 9, 1],
        [1, "cs", 2, 52, 9, 1],
        [1, "cs", 2, 50, 9, 1],
        [1, "cs", 2, 48, 9, 1],
        [1, "cs", 2, 49, 9, 1],
        [1, "cs", 0, 47, 9, 1],
        [1, "cs", 0, 45, 9, 1],
        [1, "cs", 0, 43, 9, 1],
        [1, "cs", 2, 46, 9, 1],
        [1, "cs", 2, 44, 9, 1],
        [1, "cs", 2, 42, 9, 1],
        [1, "cs", 2, 41, 9, 1],
        [1, "cs", 0, 40, 9, 1],
        [1, "cs", 2, 39, 9, 1],
        [1, "cs", 2, 38, 9, 1],
        [1, "cs", 0, 37, 9, 1],
        [1, "cs", 0, 63, 8, 1],
        [1, "cs", 2, 65, 7, 1],
        [1, "cs", 3, 64, 7, 1],
        [1, "cs", 2, 62, 8, 1],
        [1, "cs", 3, 61, 8, 1],
        [1, "cs", 1, 62, 7, 1],
        [1, "cs", 2, 63, 7, 1],
        [1, "cs", 0, 64, 6, 1],
        [1, "cs", 3, 65, 6, 1],
        [1, "cs", 2, 63, 6, 1],
        [1, "cs", 2, 62, 6, 1],
        [1, "cs", 2, 61, 6, 1],
        [1, "cs", 2, 60, 6, 1],
        [1, "cs", 2, 59, 6, 1],
        [1, "cs", 2, 61, 7, 1],
        [1, "cs", 0, 60, 7, 1],
        [1, "cs", 2, 60, 8, 1],
        [1, "cs", 2, 59, 7, 1],
        [1, "cs", 2, 59, 8, 1],
        [1, "cs", 1, 58, 8, 1],
        [1, "cs", 1, 57, 6, 1],
        [1, "cs", 1, 55, 7, 1],
        [1, "cs", 0, 56, 6, 1],
        [1, "cs", 2, 58, 6, 1],
        [1, "cs", 2, 58, 7, 1],
        [1, "cs", 2, 57, 7, 1],
        [1, "cs", 2, 56, 7, 1],
        [1, "cs", 2, 55, 6, 1],
        [1, "cs", 2, 57, 8, 1],
        [1, "cs", 2, 56, 8, 1],
        [1, "cs", 2, 55, 8, 1],
        [1, "cs", 0, 54, 8, 1],
        [1, "cs", 0, 50, 7, 1],
        [1, "cs", 0, 53, 6, 1],
        [1, "cs", 2, 54, 6, 1],
        [1, "cs", 2, 54, 7, 1],
        [1, "cs", 2, 53, 7, 1],
        [1, "cs", 2, 52, 7, 1],
        [1, "cs", 2, 52, 6, 1],
        [1, "cs", 1, 52, 8, 1],
        [1, "cs", 2, 53, 8, 1],
        [1, "cs", 2, 51, 8, 1],
        [1, "cs", 2, 51, 7, 1],
        [1, "cs", 2, 51, 6, 1],
        [1, "cs", 2, 50, 6, 1],
        [1, "cs", 2, 50, 8, 1],
        [1, "cs", 2, 49, 8, 1],
        [1, "cs", 2, 49, 7, 1],
        [1, "cs", 2, 49, 6, 1],
        [1, "cs", 0, 46, 7, 1],
        [1, "cs", 1, 48, 8, 1],
        [1, "cs", 1, 44, 7, 1],
        [1, "cs", 1, 41, 8, 1],
        [1, "cs", 2, 48, 7, 1],
        [1, "cs", 2, 48, 6, 1],
        [1, "cs", 2, 47, 6, 1],
        [1, "cs", 2, 47, 7, 1],
        [1, "cs", 2, 47, 8, 1],
        [1, "cs", 2, 46, 8, 1],
        [1, "cs", 2, 45, 8, 1],
        [1, "cs", 2, 45, 7, 1],
        [1, "cs", 2, 45, 6, 1],
        [1, "cs", 2, 46, 6, 1],
        [1, "cs", 2, 44, 6, 1],
        [1, "cs", 2, 44, 8, 1],
        [1, "cs", 2, 43, 8, 1],
        [1, "cs", 2, 43, 7, 1],
        [1, "cs", 2, 43, 6, 1],
        [1, "cs", 2, 42, 6, 1],
        [1, "cs", 2, 42, 7, 1],
        [1, "cs", 2, 42, 8, 1],
        [1, "cs", 2, 41, 7, 1],
        [1, "cs", 2, 41, 6, 1],
        [1, "cs", 2, 40, 6, 1],
        [1, "cs", 2, 40, 7, 1],
        [1, "cs", 2, 40, 8, 1],
        [1, "cs", 2, 39, 8, 1],
        [1, "cs", 0, 39, 7, 1],
        [1, "cs", 1, 38, 8, 1],
        [1, "cs", 2, 39, 6, 1],
        [1, "cs", 2, 38, 6, 1],
        [1, "cs", 2, 37, 6, 1],
        [1, "cs", 2, 38, 7, 1],
        [1, "cs", 2, 37, 7, 1],
        [1, "cs", 2, 37, 8, 1],
        [1, "cs", 2, 37, 10, 1],
        [1, "cs", 2, 38, 10, 1],
        [1, "cs", 0, 38, 11, 1],
        [1, "cs", 0, 38, 17, 1],
        [1, "cs", 1, 37, 18, 1],
        [1, "cs", 0, 38, 19, 1],
        [1, "cs", 2, 37, 11, 1],
        [1, "cs", 2, 37, 16, 1],
        [1, "cs", 2, 37, 17, 1],
        [1, "cs", 2, 38, 18, 1],
        [1, "cs", 2, 37, 19, 1],
        [1, "cs", 3, 38, 16, 1],
        [1, "cs", 0, 37, 21, 1],
        [1, "cs", 0, 38, 22, 1],
        [1, "cs", 0, 38, 24, 1],
        [1, "cs", 2, 37, 20, 1],
        [1, "cs", 2, 38, 20, 1],
        [1, "cs", 2, 38, 21, 1],
        [1, "cs", 1, 37, 23, 1],
        [1, "cs", 3, 37, 22, 1],
        [1, "cs", 3, 38, 23, 1],
        [1, "cs", 2, 37, 24, 1],
        [1, "cs", 0, 38, 30, 1],
        [1, "cs", 0, 38, 32, 1],
        [1, "cs", 0, 37, 31, 1],
        [1, "cs", 1, 38, 34, 1],
        [1, "cs", 1, 37, 29, 1],
        [1, "cs", 2, 38, 29, 1],
        [1, "cs", 2, 37, 30, 1],
        [1, "cs", 2, 38, 31, 1],
        [1, "cs", 2, 37, 32, 1],
        [1, "cs", 3, 38, 33, 1],
        [1, "cs", 3, 38, 35, 1],
        [1, "cs", 2, 37, 33, 1],
        [1, "cs", 2, 36, 8, 1],
        [1, "cs", 0, 36, 11, 1],
        [1, "cs", 0, 35, 9, 1],
        [1, "cs", 2, 36, 9, 1],
        [1, "cs", 2, 36, 10, 1],
        [1, "cs", 2, 35, 10, 1],
        [1, "cs", 1, 33, 8, 1],
        [1, "cs", 3, 34, 9, 1],
        [1, "cs", 3, 35, 8, 1],
        [1, "cs", 2, 34, 8, 1],
        [1, "cs", 0, 36, 7, 1],
        [1, "cs", 1, 34, 7, 1],
        [1, "cs", 2, 35, 7, 1],
        [1, "cs", 2, 35, 6, 1],
        [1, "cs", 2, 36, 6, 1],
        [1, "cs", 2, 68, 9, 1],
        [1, "cs", 2, 66, 10, 1],
        [1, "cs", 3, 66, 9, 1],
        [1, "cs", 0, 67, 9, 1],
        [1, "cs", 0, 66, 8, 1],
        [1, "cs", 2, 67, 8, 1],
        [1, "cs", 1, 68, 8, 1],
        [1, "cs", 1, 66, 11, 1],
        [1, "cs", 2, 67, 10, 1],
        [1, "cs", 0, 66, 6, 1],
        [1, "cs", 2, 66, 7, 1],
        [1, "cs", 2, 67, 7, 1],
        [1, "cs", 2, 69, 8, 1],
        [1, "cs", 2, 63, 32, 1],
        [1, "cs", 2, 62, 34, 1],
        [1, "cs", 2, 60, 35, 1],
        [1, "cs", 3, 59, 35, 1],
        [1, "cs", 0, 61, 35, 1],
        [1, "cs", 0, 63, 34, 1],
        [1, "cs", 2, 63, 33, 1],
        [1, "cs", 2, 63, 35, 1],
        [1, "cs", 2, 62, 35, 1],
        [1, "cs", 2, 58, 36, 1],
        [1, "cs", 1, 59, 36, 1],
        [1, "cs", 1, 62, 36, 1],
        [1, "cs", 2, 60, 36, 1],
        [1, "cs", 2, 61, 34, 1],
        [1, "cs", 3, 62, 33, 1],
        [1, "cs", 3, 63, 36, 1],
        [1, "cs", 3, 61, 36, 1],
        [1, "cs", 0, 42, 36, 1],
        [1, "cs", 1, 39, 36, 1],
        [1, "cs", 2, 41, 36, 1],
        [1, "cs", 3, 39, 35, 1],
        [1, "cs", 3, 40, 36, 1],
        [1, "cs", 3, 43, 36, 1],
        [1, "cs", 1, 40, 35, 1],
        [1, "cs", 2, 41, 35, 1],
        [1, "cs", 2, 40, 34, 1],
        [1, "cs", 2, 39, 34, 1],
        [1, "cs", 2, 39, 33, 1],
        [1, "cs", 2, 39, 32, 1],
        [1, "cs", 0, 40, 33, 1],
        [1, "cs", 2, 41, 34, 1],
        [1, "cs", 1, 44, 36, 1],
        [1, "cs", 3, 43, 35, 1],
        [1, "cs", 2, 42, 35, 1],
        [1, "cs", 0, 37, 34, 1],
        [1, "cs", 3, 59, 30, 1],
        [1, "cs", 0, 60, 29, 1],
        [1, "cs", 2, 60, 28, 1],
        [1, "cs", 3, 60, 27, 1],
        [1, "cs", 0, 60, 26, 1],
        [1, "cs", 2, 54, 25, 1],
        [1, "cs", 2, 48, 25, 1],
        [1, "cs", 2, 42, 26, 1],
        [1, "cs", 0, 55, 25, 1],
        [1, "cs", 2, 59, 26, 1],
        [1, "cs", 0, 43, 26, 1],
        [1, "cs", 1, 42, 27, 1],
        [1, "cs", 2, 42, 28, 1],
        [1, "cs", 2, 43, 30, 1],
        [1, "cs", 0, 42, 29, 1],
        [1, "cs", 0, 54, 24, 1],
        [1, "cs", 0, 48, 24, 1],
        [1, "cs", 2, 54, 23, 1],
        [1, "cs", 2, 48, 23, 1],
        [1, "cs", 2, 63, 22, 1],
        [1, "cs", 2, 63, 21, 1],
        [1, "cs", 2, 39, 21, 1],
        [1, "cs", 3, 57, 18, 1],
        [1, "cs", 2, 56, 18, 1],
        [1, "cs", 3, 51, 21, 1],
        [1, "cs", 0, 51, 20, 1],
        [1, "cs", 2, 51, 19, 1],
        [1, "cs", 3, 51, 18, 1],
        [1, "cs", 2, 63, 16, 1],
        [1, "cs", 2, 63, 10, 1],
        [1, "cs", 2, 56, 13, 1],
        [1, "cs", 3, 57, 13, 1],
        [1, "cs", 1, 45, 18, 1],
        [1, "cs", 2, 47, 18, 1],
        [1, "cs", 2, 46, 18, 1],
        [1, "cs", 0, 46, 13, 1],
        [1, "cs", 2, 45, 13, 1],
        [1, "cs", 2, 39, 10, 1],
        [1, "cs", 2, 39, 16, 1],
        [1, "cs", 2, 47, 17, 1],
        [1, "a", 0, 51, 15, 1],
        [1, "a", 1, 53, 14, 1],
        [1, "a", 1, 49, 14, 1],
        [1, "de", 8, 55, 15, 0],
        [1, "de", 9, 48, 28, 0],
        [1, "de", 10, 58, 26, 0],
        [1, "de", 11, 59, 29, 0],
        [1, "de", 11, 55, 34, 0],
        [1, "de", 10, 48, 33, 0],
        [1, "de", 9, 41, 32, 0],
        [1, "de", 9, 56, 24, 0],
        [1, "de", 9, 62, 16, 0],
        [1, "de", 9, 45, 11, 0],
        [1, "de", 9, 44, 17, 0],
        [1, "de", 10, 44, 13, 0],
        [1, "de", 10, 58, 13, 0],
        [1, "de", 10, 63, 31, 0],
        [1, "de", 8, 60, 30, 0],
        [1, "de", 8, 43, 26, 0],
        [1, "de", 10, 43, 29, 0],
        [1, "de", 10, 53, 29, 0],
        [1, "de", 10, 53, 24, 0],
        [1, "de", 9, 53, 19, 0],
        [1, "de", 11, 49, 19, 0],
        [1, "de", 10, 39, 26, 0],
        [1, "de", 9, 46, 24, 0],
        [1, "de", 9, 62, 10, 0],
        [1, "de", 8, 40, 14, 0],
        [1, "de", 32, 55, 35, 0],
        [1, "de", 32, 60, 33, 0],
        [1, "de", 32, 63, 28, 0],
        [1, "de", 32, 63, 24, 0],
        [1, "de", 32, 58, 22, 0],
        [1, "de", 32, 59, 17, 0],
        [1, "de", 32, 63, 13, 0],
        [1, "de", 32, 59, 10, 0],
        [1, "de", 32, 56, 12, 0],
        [1, "de", 32, 52, 17, 0],
        [1, "de", 32, 51, 14, 0],
        [1, "de", 32, 39, 12, 0],
        [1, "de", 32, 39, 18, 0],
        [1, "de", 32, 41, 25, 0],
        [1, "de", 32, 39, 30, 0],
        [1, "de", 32, 50, 29, 0],
        [1, "de", 32, 43, 34, 0],
        [1, "de", 32, 47, 34, 0],
        [1, "de", 31, 54, 33, 0],
        [1, "de", 31, 59, 24, 0],
        [1, "de", 31, 63, 19, 0],
        [1, "de", 31, 47, 15, 0],
        [1, "de", 31, 43, 17, 0],
        [1, "de", 31, 39, 27, 0],
        [1, "de", 31, 48, 27, 0],
        [1, "de", 31, 57, 27, 0],
        [1, "de", 32, 44, 27, 0],
        [1, "d", 0, 12, 13, 1],
        [1, "d", 0, 89, 13, 1],
        [1, "d", 1, 91, 21, 1],
        [1, "d", 1, 10, 22, 1],
        [1, "f", 2, 89, 18, 1],
        [1, "f", 0, 88, 19, 1],
        [1, "g", 1, 85, 22, 1],
        [1, "s", 1, 90, 29, 1],
        [1, "s", 1, 92, 15, 1],
        [1, "s", 0, 91, 31, 1],
        [1, "s", 2, 90, 38, 1],
        [1, "s", 0, 91, 42, 1],
        [1, "s", 0, 90, 49, 1],
        [1, "f", 1, 86, 43, 1],
        [1, "f", 0, 81, 45, 1],
        [1, "f", 2, 66, 44, 1],
        [1, "f", 2, 55, 49, 1],
        [1, "f", 1, 54, 50, 1],
        [1, "f", 2, 43, 45, 1],
        [1, "f", 2, 31, 48, 1],
        [1, "f", 1, 27, 39, 1],
        [1, "f", 1, 80, 46, 1],
        [1, "f", 1, 69, 48, 1],
        [1, "g", 0, 80, 40, 1],
        [1, "g", 2, 81, 40, 1],
        [1, "s", 2, 77, 39, 1],
        [1, "s", 0, 68, 43, 1],
        [1, "s", 2, 57, 41, 1],
        [1, "s", 1, 56, 42, 1],
        [1, "s", 1, 40, 41, 1],
        [1, "s", 2, 48, 48, 1],
        [1, "f", 2, 17, 12, 1],
        [1, "f", 0, 13, 31, 1],
        [1, "f", 1, 14, 32, 1],
        [1, "s", 0, 15, 27, 1],
        [1, "s", 0, 13, 39, 1],
        [1, "f", 2, 11, 17, 1],
        [1, "f", 1, 12, 18, 1],
        [1, "g", 2, 12, 25, 1],
        [1, "f", 0, 16, 45, 1],
        [1, "f", 1, 17, 46, 1],
        [1, "s", 1, 74, 48, 1],
        [1, "s", 1, 20, 47, 1],
        [1, "g", 0, 58, 59, 1],
        [1, "g", 0, 46, 72, 1],
        [1, "g", 0, 69, 79, 1],
        [1, "g", 0, 72, 74, 1],
        [1, "g", 0, 26, 88, 1],
        [1, "g", 0, 20, 74, 1],
        [1, "g", 0, 28, 67, 1],
        [1, "g", 0, 49, 86, 1],
        [1, "g", 0, 77, 90, 1],
        [1, "g", 0, 87, 72, 1],
        [1, "g", 0, 14, 85, 1],
        [1, "g", 1, 85, 97, 1],
        [1, "g", 1, 68, 104, 1],
        [1, "g", 1, 63, 91, 1],
        [1, "g", 1, 39, 90, 1],
        [1, "g", 1, 34, 99, 1],
        [1, "g", 1, 17, 103, 1],
        [1, "g", 2, 77, 60, 1],
        [1, "g", 2, 19, 56, 1],
        [1, "g", 2, 39, 60, 1],
        [1, "g", 2, 87, 57, 1],
        [1, "f", 0, 9, 62, 1],
        [1, "f", 0, 12, 81, 1],
        [1, "f", 0, 26, 59, 1],
        [1, "f", 0, 35, 53, 1],
        [1, "f", 0, 44, 58, 1],
        [1, "f", 0, 88, 62, 1],
        [1, "f", 0, 91, 82, 1],
        [1, "f", 0, 84, 85, 1],
        [1, "f", 0, 79, 69, 1],
        [1, "f", 0, 64, 71, 1],
        [1, "f", 0, 62, 83, 1],
        [1, "f", 0, 34, 81, 1],
        [1, "f", 0, 39, 71, 1],
        [1, "f", 0, 54, 94, 1],
        [1, "f", 1, 81, 70, 1],
        [1, "f", 1, 91, 72, 1],
        [1, "f", 1, 8, 91, 1],
        [1, "f", 1, 14, 81, 1],
        [1, "f", 1, 29, 79, 1],
        [1, "f", 1, 13, 65, 1],
        [1, "f", 1, 46, 97, 1],
        [1, "f", 1, 43, 73, 1],
        [1, "f", 1, 60, 69, 1],
        [1, "f", 1, 70, 96, 1],
        [1, "f", 1, 58, 84, 1],
        [1, "s", 1, 56, 76, 1],
        [1, "s", 1, 85, 74, 1],
        [1, "s", 0, 72, 71, 1],
        [1, "s", 0, 41, 62, 1],
        [1, "s", 0, 60, 61, 1],
        [1, "s", 0, 20, 66, 1],
        [1, "s", 0, 47, 83, 1],
        [1, "s", 0, 29, 86, 1],
        [1, "s", 0, 78, 92, 1],
        [1, "s", 0, 62, 102, 1],
        [1, "s", 0, 18, 95, 1],
        [1, "s", 2, 64, 101, 1],
        [1, "s", 2, 78, 84, 1],
        [1, "s", 2, 49, 83, 1],
        [1, "s", 2, 15, 76, 1],
        [1, "s", 2, 21, 84, 1],
        [1, "f", 1, 26, 94, 1],
        [1, "f", 2, 23, 96, 1],
        [1, "f", 2, 25, 72, 1],
        [1, "f", 2, 85, 77, 1],
        [1, "f", 2, 79, 95, 1],
        [1, "f", 2, 51, 65, 1],
        [1, "f", 2, 69, 60, 1],
        [1, "f", 1, 25, 105, 1],
        [1, "s", 1, 18, 68, 1],
        [1, "s", 0, 55, 76, 1],
        [1, "s", 0, 74, 59, 1],
        [1, "f", 1, 46, 142, 1],
        [1, "f", 1, 19, 140, 1],
        [1, "f", 1, 77, 137, 1],
        [1, "f", 0, 75, 137, 1],
        [1, "f", 0, 55, 138, 1],
        [1, "f", 0, 33, 127, 1],
        [1, "f", 0, 76, 121, 1],
        [1, "f", 0, 55, 121, 1],
        [1, "f", 0, 13, 123, 1],
        [1, "f", 0, 18, 141, 1],
        [1, "f", 0, 40, 137, 1],
        [1, "f", 2, 76, 142, 1],
        [1, "f", 2, 57, 140, 1],
        [1, "f", 2, 39, 138, 1],
        [1, "f", 2, 16, 143, 1],
        [1, "f", 2, 29, 131, 1],
        [1, "f", 0, 70, 150, 1],
        [1, "f", 0, 28, 146, 1],
        [1, "f", 0, 12, 132, 1],
        [1, "f", 0, 90, 129, 1],
        [1, "f", 1, 87, 131, 1],
        [1, "f", 0, 91, 143, 1],
        [1, "f", 2, 87, 145, 1],
        [1, "f", 1, 89, 141, 1],
        [1, "f", 1, 63, 130, 1],
        [1, "f", 1, 75, 122, 1],
        [1, "f", 1, 52, 124, 1],
        [1, "f", 1, 34, 127, 1],
        [1, "f", 1, 14, 123, 1],
        [1, "f", 1, 24, 122, 1],
        [1, "f", 0, 83, 108, 1],
        [1, "f", 0, 89, 118, 1],
        [1, "f", 0, 56, 107, 1],
        [1, "f", 0, 38, 113, 1],
        [1, "f", 0, 16, 110, 1],
        [1, "f", 1, 80, 105, 1],
        [1, "f", 1, 82, 109, 1],
        [1, "f", 1, 87, 118, 1],
        [1, "f", 1, 59, 110, 1],
        [1, "f", 1, 29, 111, 1],
        [1, "f", 2, 28, 112, 1],
        [1, "f", 2, 70, 112, 1],
        [1, "f", 2, 42, 111, 1],
        [1, "s", 0, 68, 157, 1],
        [1, "s", 0, 81, 158, 1],
        [1, "s", 0, 25, 172, 1],
        [1, "s", 0, 22, 161, 1],
        [1, "s", 0, 35, 152, 1],
        [1, "s", 0, 66, 144, 1],
        [1, "s", 0, 87, 145, 1],
        [1, "s", 0, 86, 145, 1],
        [1, "s", 0, 84, 135, 1],
        [1, "s", 0, 69, 133, 1],
        [1, "s", 0, 84, 122, 1],
        [1, "s", 0, 68, 121, 1],
        [1, "s", 0, 48, 124, 1],
        [1, "s", 0, 26, 129, 1],
        [1, "s", 0, 9, 127, 1],
        [1, "s", 0, 11, 144, 1],
        [1, "s", 0, 9, 109, 1],
        [1, "s", 0, 35, 101, 1],
        [1, "s", 0, 47, 109, 1],
        [1, "s", 0, 58, 111, 1],
        [1, "s", 0, 84, 110, 1],
        [1, "s", 0, 28, 114, 1],
        [1, "s", 1, 30, 116, 1],
        [1, "s", 1, 46, 112, 1],
        [1, "s", 1, 81, 111, 1],
        [1, "s", 1, 70, 123, 1],
        [1, "s", 1, 49, 127, 1],
        [1, "s", 1, 66, 134, 1],
        [1, "s", 1, 67, 144, 1],
        [1, "s", 1, 38, 152, 1],
        [1, "s", 1, 21, 164, 1],
        [1, "s", 1, 12, 147, 1],
        [1, "s", 1, 24, 130, 1],
        [1, "s", 1, 12, 125, 1],
        [1, "s", 1, 65, 158, 1],
        [1, "s", 1, 83, 167, 1],
        [1, "s", 1, 65, 167, 1],
        [1, "s", 1, 47, 164, 1],
        [1, "s", 1, 56, 168, 1],
        [1, "s", 2, 54, 169, 1],
        [1, "s", 2, 88, 170, 1],
        [1, "s", 2, 91, 162, 1],
        [1, "s", 2, 79, 149, 1],
        [1, "s", 2, 75, 144, 1],
        [1, "s", 2, 57, 150, 1],
        [1, "s", 2, 47, 143, 1],
        [1, "s", 2, 31, 145, 1],
        [1, "s", 2, 36, 138, 1],
        [1, "s", 2, 10, 163, 1],
        [1, "s", 2, 22, 142, 1],
        [1, "g", 2, 78, 132, 1],
        [1, "g", 1, 48, 135, 1],
        [1, "g", 2, 16, 136, 1],
        [1, "g", 0, 62, 92, 1],
        [1, "g", 2, 70, 80, 1],
        [1, "g", 2, 15, 86, 1],
        [1, "g", 2, 47, 75, 1],
        [1, "g", 2, 36, 89, 1],
        [1, "g", 2, 80, 90, 1],
        [1, "f", 1, 39, 118, 1],
        [1, "d", 2, 84, 54, 1],
        [1, "d", 2, 16, 54, 1],
        [1, "de", 7, 13, 13, 0],
        [1, "de", 5, 16, 28, 0],
        [1, "de", 5, 9, 25, 0],
        [1, "de", 5, 34, 41, 0],
        [1, "de", 4, 28, 40, 0],
        [1, "de", 6, 31, 47, 0],
        [1, "de", 6, 12, 39, 0],
        [1, "de", 4, 16, 47, 0],
        [1, "de", 4, 7, 46, 0],
        [1, "de", 6, 7, 33, 0],
        [1, "de", 6, 40, 42, 0],
        [1, "de", 7, 20, 48, 0],
        [1, "de", 7, 29, 59, 0],
        [1, "de", 6, 27, 58, 0],
        [1, "de", 6, 15, 54, 0],
        [1, "de", 5, 12, 66, 0],
        [1, "de", 5, 37, 53, 0],
        [1, "de", 4, 10, 63, 0],
        [1, "de", 7, 49, 48, 0],
        [1, "de", 7, 37, 63, 0],
        [1, "de", 6, 33, 68, 0],
        [1, "de", 6, 56, 52, 0],
        [1, "de", 5, 59, 58, 0],
        [1, "de", 6, 48, 58, 0],
        [1, "de", 4, 53, 63, 0],
        [1, "de", 4, 67, 44, 0],
        [1, "de", 5, 70, 49, 0],
        [1, "de", 5, 82, 55, 0],
        [1, "de", 5, 79, 41, 0],
        [1, "de", 5, 91, 29, 0],
        [1, "de", 7, 91, 43, 0],
        [1, "de", 6, 85, 44, 0],
        [1, "de", 6, 74, 60, 0],
        [1, "de", 6, 90, 8, 0],
        [1, "de", 5, 91, 15, 0],
        [1, "de", 4, 87, 20, 0],
        [1, "de", 7, 93, 11, 0],
        [1, "de", 6, 91, 21, 0],
        [1, "de", 6, 85, 35, 0],
        [1, "de", 5, 93, 58, 0],
        [1, "de", 5, 87, 63, 0],
        [1, "de", 7, 77, 62, 0],
        [1, "de", 6, 68, 61, 0],
        [1, "de", 5, 90, 73, 0],
        [1, "de", 4, 87, 71, 0],
        [1, "de", 7, 80, 71, 0],
        [1, "de", 7, 83, 77, 0],
        [1, "de", 7, 89, 83, 0],
        [1, "de", 4, 71, 80, 0],
        [1, "de", 4, 71, 70, 0],
        [1, "de", 5, 63, 72, 0],
        [1, "de", 4, 54, 75, 0],
        [1, "de", 5, 44, 83, 0],
        [1, "de", 5, 42, 74, 0],
        [1, "de", 5, 15, 81, 0],
        [1, "de", 4, 29, 80, 0],
        [1, "de", 4, 37, 90, 0],
        [1, "de", 4, 7, 75, 0],
        [1, "de", 6, 22, 74, 0],
        [1, "de", 6, 43, 95, 0],
        [1, "de", 6, 57, 85, 0],
        [1, "de", 6, 19, 94, 0],
        [1, "de", 6, 9, 92, 0],
        [1, "de", 5, 26, 89, 0],
        [1, "de", 5, 31, 112, 0],
        [1, "de", 5, 54, 108, 0],
        [1, "de", 5, 55, 95, 0],
        [1, "de", 5, 35, 104, 0],
        [1, "de", 5, 13, 110, 0],
        [1, "de", 7, 27, 107, 0],
        [1, "de", 7, 47, 99, 0],
        [1, "de", 7, 11, 104, 0],
        [1, "de", 7, 9, 111, 0],
        [1, "de", 7, 40, 114, 0],
        [1, "de", 7, 28, 117, 0],
        [1, "de", 7, 47, 113, 0],
        [1, "de", 7, 63, 104, 0],
        [1, "de", 4, 64, 92, 0],
        [1, "de", 6, 86, 97, 0],
        [1, "de", 5, 76, 91, 0],
        [1, "de", 5, 85, 86, 0],
        [1, "de", 6, 78, 83, 0],
        [1, "de", 6, 71, 97, 0],
        [1, "de", 4, 69, 105, 0],
        [1, "de", 4, 79, 104, 0],
        [1, "de", 4, 86, 109, 0],
        [1, "de", 4, 86, 118, 0],
        [1, "de", 5, 70, 113, 0],
        [1, "de", 6, 69, 121, 0],
        [1, "de", 6, 76, 122, 0],
        [1, "de", 7, 87, 130, 0],
        [1, "de", 4, 84, 123, 0],
        [1, "de", 4, 57, 121, 0],
        [1, "de", 5, 53, 125, 0],
        [1, "de", 5, 62, 131, 0],
        [1, "de", 6, 67, 143, 0],
        [1, "de", 5, 77, 143, 0],
        [1, "de", 5, 85, 136, 0],
        [1, "de", 6, 87, 147, 0],
        [1, "de", 6, 92, 140, 0],
        [1, "de", 4, 93, 127, 0],
        [1, "de", 5, 93, 106, 0],
        [1, "de", 5, 45, 144, 0],
        [1, "de", 4, 41, 139, 0],
        [1, "de", 4, 54, 138, 0],
        [1, "de", 6, 29, 145, 0],
        [1, "de", 6, 29, 132, 0],
        [1, "de", 6, 35, 127, 0],
        [1, "de", 6, 64, 142, 0],
        [1, "de", 5, 23, 131, 0],
        [1, "de", 5, 9, 134, 0],
        [1, "de", 6, 11, 121, 0],
        [1, "de", 4, 26, 121, 0],
        [1, "de", 35, 58, 150, 0],
        [1, "de", 33, 48, 156, 0],
        [1, "de", 33, 25, 158, 0],
        [1, "de", 33, 36, 154, 0],
        [1, "de", 34, 9, 154, 0],
        [1, "de", 34, 13, 148, 0],
        [1, "de", 34, 21, 142, 0],
        [1, "de", 34, 38, 139, 0],
        [1, "de", 34, 47, 144, 0],
        [1, "de", 34, 68, 142, 0],
        [1, "de", 36, 70, 135, 0],
        [1, "de", 36, 64, 132, 0],
        [1, "de", 36, 86, 134, 0],
        [1, "de", 36, 90, 141, 0],
        [1, "de", 36, 93, 131, 0],
        [1, "de", 36, 91, 125, 0],
        [1, "de", 36, 76, 123, 0],
        [1, "de", 33, 82, 122, 0],
        [1, "de", 35, 56, 122, 0],
        [1, "de", 35, 40, 119, 0],
        [1, "de", 35, 17, 112, 0],
        [1, "de", 35, 37, 102, 0],
        [1, "de", 33, 18, 97, 0],
        [1, "de", 34, 10, 83, 0],
        [1, "de", 33, 19, 73, 0],
        [1, "de", 33, 10, 60, 0],
        [1, "de", 35, 24, 60, 0],
        [1, "de", 36, 14, 45, 0],
        [1, "de", 36, 21, 42, 0],
        [1, "de", 35, 8, 32, 0],
        [1, "de", 33, 9, 24, 0],
        [1, "de", 35, 35, 27, 0],
        [1, "de", 33, 56, 35, 0],
        [1, "de", 36, 53, 36, 0],
        [1, "de", 33, 45, 35, 0],
        [1, "de", 35, 53, 39, 0],
        [1, "de", 36, 57, 30, 0],
        [1, "de", 33, 86, 108, 0],
        [1, "de", 33, 68, 112, 0],
        [1, "de", 33, 49, 109, 0],
        [1, "de", 33, 46, 95, 0],
        [1, "de", 33, 90, 76, 0],
        [1, "de", 36, 76, 83, 0],
        [1, "de", 36, 70, 72, 0],
        [1, "de", 36, 78, 63, 0],
        [1, "de", 36, 90, 64, 0],
        [1, "de", 36, 60, 70, 0],
        [1, "de", 35, 75, 90, 0],
        [1, "de", 35, 81, 58, 0],
        [1, "de", 35, 91, 51, 0],
        [1, "de", 35, 93, 56, 0],
        [1, "de", 35, 61, 60, 0],
        [1, "de", 35, 66, 46, 0],
        [1, "de", 33, 90, 19, 0],
        [1, "de", 34, 92, 9, 0],
        [1, "de", 35, 75, 39, 0],
        [1, "de", 35, 67, 42, 0],
        [1, "de", 35, 93, 37, 0],
        [1, "de", 36, 89, 28, 0],
        [1, "de", 36, 42, 61, 0],
        [1, "de", 33, 49, 50, 0],
        [1, "de", 33, 44, 75, 0],
        [1, "de", 33, 46, 85, 0],
        [1, "de", 33, 64, 84, 0],
        [1, "de", 33, 56, 94, 0],
        [1, "de", 33, 25, 90, 0],
        [1, "de", 33, 31, 69, 0],
        [1, "de", 35, 34, 54, 0],
        [1, "de", 35, 29, 47, 0],
        [1, "de", 36, 42, 41, 0],
        [1, "de", 36, 29, 34, 0],
        [1, "de", 35, 20, 55, 0],
        [1, "de", 35, 14, 52, 0],
        [1, "s", 2, 12, 171, 1],
        [1, "r", 20, 188, 0],
        [1, "r", 21, 188, 0],
        [1, "r", 22, 188, 0],
        [1, "r", 23, 188, 0],
        [1, "r", 24, 188, 0],
        [1, "r", 25, 189, 0],
        [1, "r", 24, 189, 0],
        [1, "r", 23, 189, 0],
        [1, "r", 22, 189, 0],
        [1, "r", 21, 189, 0],
        [1, "r", 20, 189, 0],
        [1, "r", 19, 189, 0],
        [1, "r", 19, 190, 0],
        [1, "r", 19, 191, 0],
        [1, "r", 20, 191, 0],
        [1, "r", 21, 191, 0],
        [1, "r", 22, 191, 0],
        [1, "r", 24, 191, 0],
        [1, "r", 23, 191, 0],
        [1, "r", 25, 191, 0],
        [1, "r", 25, 190, 0],
        [1, "r", 24, 190, 0],
        [1, "r", 23, 190, 0],
        [1, "r", 22, 190, 0],
        [1, "r", 21, 190, 0],
        [1, "r", 20, 190, 0],
        [1, "r", 26, 190, 0],
        [1, "r", 26, 191, 0],
        [1, "r", 24, 193, 0],
        [1, "r", 23, 193, 0],
        [1, "r", 22, 193, 0],
        [1, "r", 20, 192, 0],
        [1, "r", 21, 192, 0],
        [1, "r", 22, 192, 0],
        [1, "r", 23, 192, 0],
        [1, "r", 24, 192, 0],
        [1, "r", 25, 192, 0],
        [1, "r", 53, 199, 0],
        [1, "r", 52, 200, 0],
        [1, "r", 54, 199, 0],
        [1, "r", 55, 199, 0],
        [1, "r", 55, 200, 0],
        [1, "r", 54, 200, 0],
        [1, "r", 53, 200, 0],
        [1, "r", 51, 200, 0],
        [1, "r", 56, 200, 0],
        [1, "r", 55, 201, 0],
        [1, "r", 54, 201, 0],
        [1, "r", 55, 202, 0],
        [1, "r", 54, 203, 0],
        [1, "r", 54, 204, 0],
        [1, "r", 54, 202, 0],
        [1, "r", 53, 202, 0],
        [1, "r", 52, 202, 0],
        [1, "r", 53, 201, 0],
        [1, "r", 52, 201, 0],
        [1, "r", 51, 201, 0],
        [1, "r", 51, 202, 0],
        [1, "r", 50, 202, 0],
        [1, "r", 50, 201, 0],
        [1, "r", 56, 201, 0],
        [1, "r", 53, 203, 0],
        [1, "r", 52, 203, 0],
        [1, "r", 51, 203, 0],
        [1, "r", 56, 202, 0],
        [1, "r", 55, 203, 0],
        [1, "r", 53, 204, 0],
        [1, "r", 52, 204, 0],
        [1, "r", 55, 204, 0],
        [1, "r", 56, 203, 0],
        [1, "r", 56, 244, 0],
        [1, "r", 54, 246, 0],
        [1, "r", 50, 248, 0],
        [1, "r", 48, 248, 0],
        [1, "r", 43, 248, 0],
        [1, "r", 45, 238, 0],
        [1, "r", 44, 238, 0],
        [1, "r", 43, 238, 0],
        [1, "r", 46, 238, 0],
        [1, "r", 47, 238, 0],
        [1, "r", 48, 238, 0],
        [1, "r", 49, 238, 0],
        [1, "r", 50, 238, 0],
        [1, "r", 51, 238, 0],
        [1, "r", 52, 238, 0],
        [1, "r", 53, 238, 0],
        [1, "r", 54, 239, 0],
        [1, "r", 53, 240, 0],
        [1, "r", 53, 239, 0],
        [1, "r", 52, 239, 0],
        [1, "r", 51, 239, 0],
        [1, "r", 50, 239, 0],
        [1, "r", 49, 239, 0],
        [1, "r", 48, 239, 0],
        [1, "r", 47, 239, 0],
        [1, "r", 46, 239, 0],
        [1, "r", 45, 239, 0],
        [1, "r", 44, 239, 0],
        [1, "r", 43, 239, 0],
        [1, "r", 42, 239, 0],
        [1, "r", 41, 240, 0],
        [1, "r", 42, 240, 0],
        [1, "r", 43, 240, 0],
        [1, "r", 44, 240, 0],
        [1, "r", 45, 240, 0],
        [1, "r", 46, 240, 0],
        [1, "r", 47, 240, 0],
        [1, "r", 48, 240, 0],
        [1, "r", 49, 240, 0],
        [1, "r", 50, 240, 0],
        [1, "r", 51, 240, 0],
        [1, "r", 52, 240, 0],
        [1, "r", 54, 240, 0],
        [1, "r", 55, 240, 0],
        [1, "r", 56, 241, 0],
        [1, "r", 55, 241, 0],
        [1, "r", 54, 241, 0],
        [1, "r", 53, 241, 0],
        [1, "r", 52, 241, 0],
        [1, "r", 51, 241, 0],
        [1, "r", 49, 241, 0],
        [1, "r", 50, 241, 0],
        [1, "r", 48, 241, 0],
        [1, "r", 47, 241, 0],
        [1, "r", 46, 241, 0],
        [1, "r", 45, 241, 0],
        [1, "r", 44, 241, 0],
        [1, "r", 43, 241, 0],
        [1, "r", 42, 241, 0],
        [1, "r", 41, 241, 0],
        [1, "r", 40, 242, 0],
        [1, "r", 41, 242, 0],
        [1, "r", 42, 242, 0],
        [1, "r", 43, 242, 0],
        [1, "r", 44, 242, 0],
        [1, "r", 45, 242, 0],
        [1, "r", 46, 242, 0],
        [1, "r", 47, 242, 0],
        [1, "r", 48, 242, 0],
        [1, "r", 49, 242, 0],
        [1, "r", 50, 242, 0],
        [1, "r", 51, 242, 0],
        [1, "r", 52, 242, 0],
        [1, "r", 53, 242, 0],
        [1, "r", 54, 242, 0],
        [1, "r", 55, 242, 0],
        [1, "r", 56, 242, 0],
        [1, "r", 56, 243, 0],
        [1, "r", 55, 243, 0],
        [1, "r", 54, 243, 0],
        [1, "r", 53, 243, 0],
        [1, "r", 52, 243, 0],
        [1, "r", 51, 243, 0],
        [1, "r", 50, 243, 0],
        [1, "r", 49, 243, 0],
        [1, "r", 48, 243, 0],
        [1, "r", 47, 243, 0],
        [1, "r", 46, 243, 0],
        [1, "r", 45, 243, 0],
        [1, "r", 44, 243, 0],
        [1, "r", 43, 243, 0],
        [1, "r", 42, 243, 0],
        [1, "r", 41, 243, 0],
        [1, "r", 40, 243, 0],
        [1, "r", 40, 244, 0],
        [1, "r", 41, 244, 0],
        [1, "r", 43, 244, 0],
        [1, "r", 44, 244, 0],
        [1, "r", 45, 244, 0],
        [1, "r", 46, 244, 0],
        [1, "r", 47, 244, 0],
        [1, "r", 48, 244, 0],
        [1, "r", 49, 244, 0],
        [1, "r", 50, 244, 0],
        [1, "r", 51, 244, 0],
        [1, "r", 52, 244, 0],
        [1, "r", 53, 244, 0],
        [1, "r", 54, 244, 0],
        [1, "r", 55, 244, 0],
        [1, "r", 42, 244, 0],
        [1, "r", 40, 245, 0],
        [1, "r", 41, 245, 0],
        [1, "r", 42, 245, 0],
        [1, "r", 43, 245, 0],
        [1, "r", 44, 245, 0],
        [1, "r", 45, 245, 0],
        [1, "r", 46, 245, 0],
        [1, "r", 47, 245, 0],
        [1, "r", 48, 245, 0],
        [1, "r", 49, 245, 0],
        [1, "r", 50, 245, 0],
        [1, "r", 51, 245, 0],
        [1, "r", 52, 246, 0],
        [1, "r", 52, 245, 0],
        [1, "r", 53, 245, 0],
        [1, "r", 54, 245, 0],
        [1, "r", 55, 245, 0],
        [1, "r", 53, 246, 0],
        [1, "r", 51, 246, 0],
        [1, "r", 50, 246, 0],
        [1, "r", 49, 246, 0],
        [1, "r", 48, 246, 0],
        [1, "r", 47, 246, 0],
        [1, "r", 45, 246, 0],
        [1, "r", 46, 246, 0],
        [1, "r", 44, 246, 0],
        [1, "r", 43, 246, 0],
        [1, "r", 42, 246, 0],
        [1, "r", 41, 246, 0],
        [1, "r", 42, 247, 0],
        [1, "r", 43, 247, 0],
        [1, "r", 44, 247, 0],
        [1, "r", 45, 247, 0],
        [1, "r", 46, 247, 0],
        [1, "r", 47, 247, 0],
        [1, "r", 48, 247, 0],
        [1, "r", 50, 247, 0],
        [1, "r", 51, 247, 0],
        [1, "r", 52, 247, 0],
        [1, "r", 53, 247, 0],
        [1, "r", 54, 247, 0],
        [1, "r", 49, 247, 0],
        [1, "r", 49, 248, 0],
        [1, "r", 47, 248, 0],
        [1, "r", 46, 248, 0],
        [1, "r", 45, 248, 0],
        [1, "r", 51, 248, 0],
        [1, "r", 55, 246, 1],
        [1, "r", 55, 247, 1],
        [1, "r", 56, 247, 1],
        [1, "r", 56, 248, 1],
        [1, "r", 95, 270, 1],
        [1, "r", 93, 270, 1],
        [1, "r", 94, 270, 1],
        [1, "r", 95, 271, 1],
        [1, "r", 94, 271, 1],
        [1, "r", 93, 271, 1],
        [1, "r", 94, 282, 1],
        [1, "r", 93, 282, 1],
        [1, "r", 93, 281, 1],
        [1, "r", 92, 281, 1],
        [1, "r", 92, 280, 1],
        [1, "r", 91, 280, 1],
        [1, "r", 90, 279, 1],
        [1, "r", 95, 275, 1],
        [1, "r", 95, 274, 1],
        [1, "r", 95, 273, 1],
        [1, "r", 95, 272, 1],
        [1, "r", 94, 274, 1],
        [1, "r", 94, 273, 1],
        [1, "r", 94, 272, 1],
        [1, "r", 93, 272, 1],
        [1, "r", 93, 273, 1],
        [1, "r", 93, 274, 1],
        [1, "r", 92, 273, 1],
        [1, "r", 92, 272, 1],
        [1, "r", 92, 270, 1],
        [1, "r", 92, 271, 1],
        [1, "r", 92, 269, 1],
        [1, "r", 90, 269, 1],
        [1, "r", 91, 269, 1],
        [1, "r", 91, 271, 1],
        [1, "r", 91, 270, 1],
        [1, "r", 95, 278, 1],
        [1, "r", 95, 277, 1],
        [1, "r", 95, 276, 1],
        [1, "r", 94, 276, 1],
        [1, "r", 94, 275, 1],
        [1, "r", 93, 275, 1],
        [1, "r", 92, 274, 1],
        [1, "r", 92, 275, 1],
        [1, "r", 91, 275, 1],
        [1, "r", 90, 275, 1],
        [1, "r", 89, 274, 1],
        [1, "r", 90, 274, 1],
        [1, "r", 89, 275, 1],
        [1, "r", 88, 274, 1],
        [1, "r", 88, 273, 1],
        [1, "r", 86, 272, 1],
        [1, "r", 85, 271, 1],
        [1, "r", 86, 271, 1],
        [1, "r", 87, 272, 1],
        [1, "r", 55, 248, 1],
        [1, "r", 54, 248, 1],
        [1, "r", 56, 249, 1],
        [1, "r", 55, 249, 1],
        [1, "r", 55, 250, 1],
        [1, "r", 56, 250, 1],
        [1, "r", 57, 250, 1],
        [1, "r", 57, 249, 1],
        [1, "r", 59, 250, 1],
        [1, "r", 58, 250, 1],
        [1, "r", 60, 250, 1],
        [1, "r", 61, 251, 1],
        [1, "r", 60, 251, 1],
        [1, "r", 62, 251, 1],
        [1, "r", 62, 252, 1],
        [1, "r", 63, 252, 1],
        [1, "r", 58, 251, 1],
        [1, "r", 57, 251, 1],
        [1, "r", 56, 251, 1],
        [1, "r", 58, 252, 1],
        [1, "r", 57, 252, 1],
        [1, "r", 57, 253, 1],
        [1, "r", 58, 253, 1],
        [1, "r", 58, 254, 1],
        [1, "r", 59, 255, 1],
        [1, "r", 58, 255, 1],
        [1, "r", 57, 254, 1],
        [1, "r", 56, 252, 1],
        [1, "r", 55, 251, 1],
        [1, "r", 60, 255, 1],
        [1, "r", 61, 255, 1],
        [1, "r", 61, 256, 1],
        [1, "r", 60, 256, 1],
        [1, "r", 62, 256, 1],
        [1, "r", 62, 257, 1],
        [1, "r", 61, 257, 1],
        [1, "r", 64, 253, 1],
        [1, "r", 64, 254, 1],
        [1, "r", 65, 254, 1],
        [1, "r", 61, 250, 1],
        [1, "r", 64, 252, 1],
        [1, "r", 65, 253, 1],
        [1, "r", 66, 254, 1],
        [1, "r", 65, 255, 1],
        [1, "r", 64, 255, 1],
        [1, "r", 64, 256, 1],
        [1, "r", 65, 256, 1],
        [1, "r", 65, 257, 1],
        [1, "r", 64, 257, 1],
        [1, "r", 63, 257, 1],
        [1, "r", 62, 258, 1],
        [1, "r", 63, 258, 1],
        [1, "r", 64, 258, 1],
        [1, "r", 66, 255, 1],
        [1, "r", 66, 256, 1],
        [1, "r", 66, 257, 1],
        [1, "r", 66, 258, 1],
        [1, "r", 65, 258, 1],
        [1, "r", 67, 258, 1],
        [1, "r", 67, 257, 1],
        [1, "r", 67, 259, 1],
        [1, "r", 66, 259, 1],
        [1, "r", 65, 259, 1],
        [1, "r", 56, 246, 1],
        [1, "r", 56, 245, 1],
        [1, "r", 68, 258, 1],
        [1, "r", 68, 259, 1],
        [1, "r", 68, 260, 1],
        [1, "r", 69, 260, 1],
        [1, "r", 69, 261, 1],
        [1, "r", 70, 261, 1],
        [1, "r", 71, 261, 1],
        [1, "r", 67, 260, 1],
        [1, "r", 89, 269, 1],
        [1, "r", 89, 268, 1],
        [1, "r", 90, 268, 1],
        [1, "r", 82, 267, 1],
        [1, "r", 83, 267, 1],
        [1, "r", 80, 266, 1],
        [1, "r", 81, 266, 1],
        [1, "r", 81, 267, 1],
        [1, "r", 79, 266, 1],
        [1, "r", 78, 265, 1],
        [1, "r", 77, 265, 1],
        [1, "r", 76, 264, 1],
        [1, "r", 75, 264, 1],
        [1, "r", 75, 263, 1],
        [1, "r", 74, 263, 1],
        [1, "r", 74, 262, 1],
        [1, "r", 72, 262, 1],
        [1, "r", 73, 262, 1],
        [1, "r", 71, 262, 1],
        [1, "r", 85, 270, 1],
        [1, "r", 84, 270, 1],
        [1, "r", 84, 269, 1],
        [1, "r", 83, 269, 1],
        [1, "r", 82, 269, 1],
        [1, "r", 81, 269, 1],
        [1, "r", 81, 268, 1],
        [1, "r", 82, 268, 1],
        [1, "r", 83, 268, 1],
        [1, "r", 80, 268, 1],
        [1, "r", 80, 267, 1],
        [1, "r", 79, 267, 1],
        [1, "r", 78, 266, 1],
        [1, "r", 76, 265, 1],
        [1, "r", 75, 262, 1],
        [1, "r", 90, 280, 1],
        [1, "r", 89, 280, 1],
        [1, "r", 89, 279, 1],
        [1, "r", 88, 279, 1],
        [1, "r", 88, 278, 1],
        [1, "r", 87, 277, 1],
        [1, "r", 86, 276, 1],
        [1, "r", 86, 275, 1],
        [1, "r", 86, 274, 1],
        [1, "r", 86, 273, 1],
        [1, "r", 85, 273, 1],
        [1, "r", 85, 272, 1],
        [1, "r", 85, 274, 1],
        [1, "r", 86, 277, 1],
        [1, "r", 87, 278, 1],
        [1, "r", 84, 271, 1],
        [1, "r", 83, 270, 1],
        [1, "r", 87, 273, 1],
        [1, "r", 91, 274, 1],
        [1, "r", 89, 273, 1],
        [1, "r", 88, 272, 1],
        [1, "r", 91, 281, 1],
        [1, "r", 92, 282, 1],
        [1, "r", 88, 280, 1],
        [1, "r", 87, 279, 1],
        [1, "r", 85, 275, 1],
        [1, "r", 84, 273, 1],
        [1, "r", 84, 272, 1],
        [1, "r", 83, 271, 1],
        [1, "r", 82, 270, 1],
        [1, "r", 84, 267, 0],
        [1, "r", 85, 267, 0],
        [1, "r", 76, 262, 0],
        [1, "r", 77, 262, 0],
        [1, "r", 88, 268, 0],
        [1, "r", 78, 262, 0],
        [1, "r", 79, 262, 0],
        [1, "r", 80, 262, 0],
        [1, "r", 80, 263, 0],
        [1, "r", 81, 263, 0],
        [1, "r", 82, 263, 0],
        [1, "r", 83, 263, 0],
        [1, "r", 84, 263, 0],
        [1, "r", 85, 263, 0],
        [1, "r", 88, 262, 0],
        [1, "r", 89, 262, 0],
        [1, "r", 90, 262, 0],
        [1, "r", 87, 262, 0],
        [1, "r", 86, 262, 0],
        [1, "r", 86, 263, 0],
        [1, "r", 87, 263, 0],
        [1, "r", 91, 262, 0],
        [1, "r", 95, 262, 0],
        [1, "r", 94, 262, 0],
        [1, "r", 86, 267, 0],
        [1, "r", 87, 267, 0],
        [1, "r", 87, 268, 0],
        [1, "r", 86, 268, 0],
        [1, "r", 74, 189, 0],
        [1, "r", 75, 189, 0],
        [1, "r", 76, 189, 0],
        [1, "r", 77, 189, 0],
        [1, "r", 78, 190, 0],
        [1, "r", 77, 190, 0],
        [1, "r", 75, 190, 0],
        [1, "r", 76, 190, 0],
        [1, "r", 74, 190, 0],
        [1, "r", 73, 190, 0],
        [1, "r", 78, 191, 0],
        [1, "r", 76, 191, 0],
        [1, "r", 77, 191, 0],
        [1, "r", 75, 191, 0],
        [1, "r", 74, 191, 0],
        [1, "r", 78, 192, 0],
        [1, "r", 77, 192, 0],
        [1, "r", 76, 192, 0],
        [1, "r", 75, 192, 0],
        [1, "r", 74, 192, 0],
        [1, "r", 73, 191, 0],
        [1, "f", 1, 96, 22, 1],
        [1, "s", 1, 97, 22, 1],
        [1, "f", 1, 98, 22, 1],
        [1, "s", 0, 99, 22, 1],
        [1, "s", 1, 100, 21, 1],
        [1, "s", 1, 96, 49, 1],
        [1, "s", 1, 100, 50, 1],
        [1, "s", 0, 99, 49, 1],
        [1, "s", 0, 97, 49, 1],
        [1, "f", 1, 98, 49, 1],
        [1, "r", 70, 218, 0],
        [1, "r", 71, 218, 0],
        [1, "r", 72, 218, 0],
        [1, "r", 73, 218, 0],
        [1, "r", 74, 219, 0],
        [1, "r", 73, 219, 0],
        [1, "r", 72, 219, 0],
        [1, "r", 71, 219, 0],
        [1, "r", 70, 219, 0],
        [1, "r", 73, 220, 0],
        [1, "r", 72, 220, 0],
        [1, "r", 71, 220, 0],
        [1, "r", 72, 221, 0],
        [1, "r", 71, 221, 0],
        [1, "r", 70, 221, 0],
        [1, "r", 69, 221, 0],
        [1, "r", 68, 221, 0],
        [1, "r", 70, 220, 0],
        [1, "r", 69, 220, 0],
        [1, "r", 69, 219, 0],
        [1, "r", 68, 220, 0],
        [1, "r", 73, 221, 0],
        [1, "r", 73, 222, 0],
        [1, "r", 71, 222, 0],
        [1, "r", 72, 222, 0],
        [1, "r", 74, 221, 0],
        [1, "r", 74, 220, 0],
        [1, "r", 75, 220, 0],
        [1, "r", 75, 221, 0],
        [1, "r", 70, 222, 0],
        [1, "r", 69, 222, 0],
        [1, "r", 29, 217, 0],
        [1, "r", 30, 217, 0],
        [1, "r", 31, 217, 0],
        [1, "r", 32, 217, 0],
        [1, "r", 31, 219, 0],
        [1, "r", 30, 219, 0],
        [1, "r", 29, 219, 0],
        [1, "r", 27, 219, 0],
        [1, "r", 25, 219, 0],
        [1, "r", 26, 219, 0],
        [1, "r", 28, 219, 0],
        [1, "r", 26, 218, 0],
        [1, "r", 27, 218, 0],
        [1, "r", 28, 218, 0],
        [1, "r", 29, 218, 0],
        [1, "r", 30, 218, 0],
        [1, "r", 28, 217, 0],
        [1, "r", 26, 217, 0],
        [1, "r", 27, 217, 0],
        [1, "r", 28, 216, 0],
        [1, "r", 29, 216, 0],
        [1, "r", 30, 216, 0],
        [1, "r", 31, 218, 0],
        [1, "r", 32, 218, 0],
        [1, "r", 31, 216, 0],
        [1, "r", 31, 221, 0],
        [1, "r", 31, 220, 0],
        [1, "r", 30, 220, 0],
        [1, "r", 29, 220, 0],
        [1, "r", 28, 220, 0],
        [1, "r", 27, 220, 0],
        [1, "r", 26, 220, 0],
        [1, "r", 25, 218, 0],
        [1, "r", 27, 221, 0],
        [1, "r", 28, 221, 0],
        [1, "r", 29, 221, 0],
        [1, "r", 30, 221, 0],
        [1, "r", 32, 220, 0],
        [1, "r", 32, 219, 0],
        [1, "r", 33, 218, 0],
        [1, "r", 33, 219, 0],
        [1, "r", 75, 238, 0],
        [1, "r", 76, 238, 0],
        [1, "r", 77, 239, 0],
        [1, "r", 76, 239, 0],
        [1, "r", 75, 239, 0],
        [1, "r", 74, 239, 0],
        [1, "r", 76, 240, 0],
        [1, "r", 77, 240, 0],
        [1, "r", 78, 240, 0],
        [1, "r", 77, 241, 0],
        [1, "r", 76, 241, 0],
        [1, "r", 75, 241, 0],
        [1, "r", 75, 240, 0],
        [1, "r", 74, 240, 0],
        [1, "r", 78, 239, 0],
        [1, "r", 77, 238, 0],
        [1, "r", 18, 253, 0],
        [1, "r", 19, 252, 0],
        [1, "r", 20, 252, 0],
        [1, "r", 21, 253, 0],
        [1, "r", 23, 254, 0],
        [1, "r", 20, 254, 0],
        [1, "r", 19, 254, 0],
        [1, "r", 22, 254, 0],
        [1, "r", 18, 254, 0],
        [1, "r", 19, 253, 0],
        [1, "r", 20, 253, 0],
        [1, "r", 21, 254, 0],
        [1, "r", 22, 253, 0],
        [1, "r", 21, 255, 0],
        [1, "r", 20, 255, 0],
        [1, "r", 19, 255, 0],
        [1, "r", 18, 255, 0],
        [1, "r", 17, 255, 0],
        [1, "r", 17, 254, 0],
        [1, "r", 22, 255, 0],
        [1, "r", 19, 256, 0],
        [1, "r", 20, 256, 0],
        [1, "r", 21, 256, 0],
        [1, "r", 39, 270, 0],
        [1, "r", 40, 270, 0],
        [1, "r", 41, 270, 0],
        [1, "r", 43, 270, 0],
        [1, "r", 44, 270, 0],
        [1, "r", 46, 270, 0],
        [1, "r", 42, 270, 0],
        [1, "r", 45, 270, 0],
        [1, "r", 44, 269, 0],
        [1, "r", 43, 269, 0],
        [1, "r", 42, 269, 0],
        [1, "r", 40, 269, 0],
        [1, "r", 41, 269, 0],
        [1, "r", 45, 271, 0],
        [1, "r", 44, 271, 0],
        [1, "r", 43, 271, 0],
        [1, "r", 42, 271, 0],
        [1, "r", 41, 271, 0],
        [1, "r", 40, 271, 0],
        [1, "r", 39, 271, 0],
        [1, "r", 46, 271, 0],
        [1, "r", 45, 272, 0],
        [1, "r", 44, 272, 0],
        [1, "r", 43, 272, 0],
        [1, "r", 42, 272, 0],
        [1, "r", 19, 284, 0],
        [1, "r", 20, 284, 0],
        [1, "r", 21, 285, 0],
        [1, "r", 22, 285, 0],
        [1, "r", 23, 286, 0],
        [1, "r", 22, 288, 0],
        [1, "r", 20, 288, 0],
        [1, "r", 18, 288, 0],
        [1, "r", 17, 287, 0],
        [1, "r", 16, 287, 0],
        [1, "r", 16, 286, 0],
        [1, "r", 17, 286, 0],
        [1, "r", 18, 286, 0],
        [1, "r", 19, 286, 0],
        [1, "r", 20, 286, 0],
        [1, "r", 21, 286, 0],
        [1, "r", 22, 286, 0],
        [1, "r", 20, 285, 0],
        [1, "r", 19, 285, 0],
        [1, "r", 18, 285, 0],
        [1, "r", 17, 285, 0],
        [1, "r", 19, 287, 0],
        [1, "r", 18, 287, 0],
        [1, "r", 20, 287, 0],
        [1, "r", 21, 287, 0],
        [1, "r", 22, 287, 0],
        [1, "r", 23, 287, 0],
        [1, "r", 21, 288, 0],
        [1, "r", 19, 288, 0],
        [1, "r", 17, 288, 0],
        [1, "r", 19, 289, 0],
        [1, "r", 21, 289, 0],
        [1, "r", 22, 289, 0],
        [1, "r", 20, 289, 0],
        [1, "r", 23, 288, 0],
        [1, "r", 24, 287, 0],
        [1, "r", 24, 286, 0],
        [1, "r", 23, 285, 0],
        [1, "r", 66, 286, 0],
        [1, "r", 64, 287, 0],
        [1, "r", 63, 287, 0],
        [1, "r", 60, 287, 0],
        [1, "r", 59, 285, 0],
        [1, "r", 58, 284, 0],
        [1, "r", 59, 283, 0],
        [1, "r", 65, 283, 0],
        [1, "r", 64, 283, 0],
        [1, "r", 63, 283, 0],
        [1, "r", 62, 283, 0],
        [1, "r", 61, 283, 0],
        [1, "r", 60, 283, 0],
        [1, "r", 59, 284, 0],
        [1, "r", 58, 285, 0],
        [1, "r", 60, 286, 0],
        [1, "r", 59, 286, 0],
        [1, "r", 61, 287, 0],
        [1, "r", 62, 287, 0],
        [1, "r", 61, 286, 0],
        [1, "r", 62, 286, 0],
        [1, "r", 63, 286, 0],
        [1, "r", 64, 286, 0],
        [1, "r", 65, 286, 0],
        [1, "r", 67, 285, 0],
        [1, "r", 66, 285, 0],
        [1, "r", 65, 285, 0],
        [1, "r", 64, 285, 0],
        [1, "r", 63, 285, 0],
        [1, "r", 62, 285, 0],
        [1, "r", 61, 285, 0],
        [1, "r", 60, 285, 0],
        [1, "r", 60, 284, 0],
        [1, "r", 61, 284, 0],
        [1, "r", 62, 284, 0],
        [1, "r", 63, 284, 0],
        [1, "r", 64, 284, 0],
        [1, "r", 65, 284, 0],
        [1, "r", 66, 284, 0],
        [1, "r", 65, 287, 0],
        [1, "r", 67, 286, 0],
        [1, "p", 0, 13, 189, 1],
        [1, "p", 0, 32, 184, 1],
        [1, "p", 0, 47, 191, 1],
        [1, "p", 0, 64, 184, 1],
        [1, "p", 0, 84, 192, 1],
        [1, "p", 0, 78, 207, 1],
        [1, "p", 0, 58, 216, 1],
        [1, "p", 0, 41, 211, 1],
        [1, "p", 0, 18, 211, 1],
        [1, "p", 0, 14, 230, 1],
        [1, "p", 0, 29, 237, 1],
        [1, "p", 0, 50, 230, 1],
        [1, "p", 0, 78, 241, 1],
        [1, "p", 0, 74, 256, 1],
        [1, "p", 0, 68, 266, 1],
        [1, "p", 0, 48, 259, 1],
        [1, "p", 0, 31, 263, 1],
        [1, "p", 0, 18, 274, 1],
        [1, "p", 0, 33, 283, 1],
        [1, "p", 0, 66, 287, 1],
        [1, "p", 0, 82, 291, 1],
        [1, "p", 0, 16, 295, 1],
        [1, "p", 0, 45, 294, 1],
        [1, "p", 0, 18, 252, 1],
        [1, "p", 0, 79, 227, 1],
        [1, "p", 0, 32, 200, 1],
        [1, "p", 0, 64, 200, 1],
        [1, "s", 0, 21, 193, 1],
        [1, "s", 1, 18, 189, 1],
        [1, "s", 2, 26, 189, 1],
        [1, "b", 1, 15, 181, 0],
        [1, "b", 2, 18, 190, 0],
        [1, "b", 2, 29, 193, 0],
        [1, "t", 3, 16, 182, 0],
        [1, "t", 3, 13, 195, 0],
        [1, "t", 4, 16, 183, 0],
        [1, "t", 5, 10, 184, 0],
        [1, "t", 5, 23, 182, 0],
        [1, "t", 4, 30, 187, 0],
        [1, "t", 1, 26, 192, 0],
        [1, "b", 1, 25, 188, 0],
        [1, "s", 1, 24, 181, 1],
        [1, "t", 3, 33, 183, 0],
        [1, "b", 1, 36, 189, 0],
        [1, "t", 2, 35, 190, 0],
        [1, "b", 3, 19, 200, 0],
        [1, "s", 0, 28, 194, 1],
        [1, "s", 1, 32, 196, 1],
        [1, "s", 1, 36, 183, 1],
        [1, "s", 2, 38, 184, 1],
        [1, "s", 2, 10, 192, 1],
        [1, "s", 2, 12, 183, 1],
        [1, "s", 1, 15, 199, 1],
        [1, "b", 0, 12, 202, 0],
        [1, "t", 2, 13, 203, 0],
        [1, "t", 4, 20, 200, 0],
        [1, "t", 4, 12, 194, 0],
        [1, "t", 5, 15, 205, 0],
        [1, "t", 5, 29, 200, 0],
        [1, "t", 3, 28, 201, 0],
        [1, "s", 2, 25, 199, 1],
        [1, "s", 1, 22, 204, 1],
        [1, "g", 2, 25, 205, 1],
        [1, "b", 1, 27, 216, 0],
        [1, "s", 1, 25, 217, 1],
        [1, "s", 1, 33, 217, 1],
        [1, "s", 2, 35, 215, 1],
        [1, "s", 0, 32, 221, 1],
        [1, "t", 2, 31, 222, 0],
        [1, "t", 4, 26, 221, 0],
        [1, "b", 3, 27, 222, 0],
        [1, "b", 0, 17, 217, 0],
        [1, "t", 3, 18, 216, 0],
        [1, "t", 4, 13, 215, 0],
        [1, "t", 5, 30, 213, 0],
        [1, "t", 5, 24, 208, 0],
        [1, "s", 1, 12, 216, 1],
        [1, "s", 2, 11, 210, 1],
        [1, "s", 2, 34, 223, 1],
        [1, "b", 2, 36, 218, 0],
        [1, "t", 4, 40, 206, 0],
        [1, "t", 5, 35, 203, 0],
        [1, "t", 3, 39, 206, 0],
        [1, "b", 1, 34, 204, 0],
        [1, "s", 1, 33, 206, 1],
        [1, "s", 1, 42, 203, 1],
        [1, "s", 0, 47, 196, 1],
        [1, "b", 2, 40, 196, 0],
        [1, "t", 4, 39, 197, 0],
        [1, "t", 5, 44, 187, 0],
        [1, "b", 1, 46, 181, 0],
        [1, "t", 2, 47, 182, 0],
        [1, "b", 0, 57, 182, 0],
        [1, "b", 3, 56, 183, 0],
        [1, "t", 4, 55, 184, 0],
        [1, "t", 5, 62, 195, 0],
        [1, "s", 1, 51, 185, 1],
        [1, "s", 2, 62, 180, 1],
        [1, "s", 2, 61, 188, 1],
        [1, "s", 1, 61, 189, 1],
        [1, "s", 2, 48, 195, 1],
        [1, "b", 1, 51, 199, 0],
        [1, "t", 2, 52, 199, 0],
        [1, "t", 3, 56, 204, 0],
        [1, "t", 4, 57, 204, 0],
        [1, "t", 4, 51, 204, 0],
        [1, "s", 1, 52, 205, 1],
        [1, "s", 2, 57, 200, 1],
        [1, "s", 1, 56, 199, 1],
        [1, "b", 0, 55, 192, 0],
        [1, "t", 3, 56, 193, 0],
        [1, "t", 4, 50, 190, 0],
        [1, "b", 1, 76, 188, 0],
        [1, "t", 2, 75, 188, 0],
        [1, "t", 2, 73, 192, 0],
        [1, "t", 4, 72, 191, 0],
        [1, "t", 5, 78, 193, 0],
        [1, "b", 0, 79, 192, 0],
        [1, "s", 2, 79, 190, 1],
        [1, "s", 1, 74, 194, 1],
        [1, "s", 1, 72, 187, 1],
        [1, "s", 0, 74, 183, 1],
        [1, "s", 1, 75, 183, 1],
        [1, "t", 2, 69, 181, 0],
        [1, "t", 4, 70, 182, 0],
        [1, "t", 5, 69, 180, 0],
        [1, "b", 1, 65, 189, 0],
        [1, "b", 2, 66, 189, 0],
        [1, "t", 3, 64, 188, 0],
        [1, "t", 4, 67, 192, 0],
        [1, "b", 2, 85, 183, 0],
        [1, "t", 1, 84, 184, 0],
        [1, "t", 4, 81, 180, 0],
        [1, "t", 5, 89, 180, 0],
        [1, "t", 0, 90, 188, 0],
        [1, "t", 3, 89, 190, 0],
        [1, "s", 1, 87, 187, 1],
        [1, "s", 2, 87, 197, 1],
        [1, "b", 1, 84, 200, 0],
        [1, "t", 2, 83, 201, 0],
        [1, "t", 4, 87, 207, 0],
        [1, "s", 2, 79, 202, 1],
        [1, "s", 1, 80, 203, 1],
        [1, "t", 0, 71, 200, 0],
        [1, "b", 2, 72, 201, 0],
        [1, "t", 2, 65, 205, 0],
        [1, "t", 1, 66, 206, 0],
        [1, "t", 4, 63, 209, 0],
        [1, "t", 5, 73, 203, 0],
        [1, "s", 0, 70, 207, 1],
        [1, "s", 1, 71, 206, 1],
        [1, "s", 2, 68, 199, 1],
        [1, "s", 1, 64, 213, 1],
        [1, "t", 0, 85, 213, 0],
        [1, "b", 2, 84, 212, 0],
        [1, "t", 3, 77, 209, 0],
        [1, "t", 4, 83, 216, 0],
        [1, "t", 4, 73, 209, 0],
        [1, "b", 0, 86, 222, 0],
        [1, "b", 3, 87, 221, 0],
        [1, "s", 1, 80, 214, 1],
        [1, "s", 2, 87, 216, 1],
        [1, "s", 2, 84, 224, 1],
        [1, "s", 1, 77, 227, 1],
        [1, "t", 1, 74, 222, 0],
        [1, "b", 1, 69, 218, 0],
        [1, "b", 2, 75, 219, 0],
        [1, "s", 2, 74, 218, 1],
        [1, "s", 1, 69, 223, 1],
        [1, "s", 1, 77, 221, 1],
        [1, "b", 1, 72, 211, 0],
        [1, "b", 1, 85, 232, 0],
        [1, "t", 2, 84, 233, 0],
        [1, "t", 2, 78, 238, 0],
        [1, "b", 1, 77, 237, 0],
        [1, "t", 5, 87, 236, 0],
        [1, "t", 5, 76, 229, 0],
        [1, "b", 2, 74, 241, 0],
        [1, "s", 0, 73, 242, 1],
        [1, "s", 0, 81, 238, 1],
        [1, "s", 1, 82, 237, 1],
        [1, "s", 2, 72, 237, 1],
        [1, "s", 2, 78, 242, 1],
        [1, "b", 1, 66, 230, 0],
        [1, "b", 2, 62, 229, 0],
        [1, "t", 4, 67, 231, 0],
        [1, "t", 4, 62, 228, 0],
        [1, "t", 5, 64, 233, 0],
        [1, "t", 2, 65, 234, 0],
        [1, "t", 2, 51, 220, 0],
        [1, "t", 1, 50, 218, 0],
        [1, "b", 1, 45, 223, 0],
        [1, "b", 2, 46, 224, 0],
        [1, "t", 4, 49, 218, 0],
        [1, "t", 4, 47, 225, 0],
        [1, "s", 1, 50, 215, 1],
        [1, "s", 2, 51, 213, 1],
        [1, "s", 2, 42, 227, 1],
        [1, "s", 1, 44, 227, 1],
        [1, "s", 1, 60, 230, 1],
        [1, "s", 2, 59, 231, 1],
        [1, "b", 1, 85, 252, 0],
        [1, "t", 2, 84, 251, 0],
        [1, "t", 2, 74, 250, 0],
        [1, "t", 0, 75, 251, 0],
        [1, "b", 0, 83, 246, 0],
        [1, "t", 3, 82, 247, 0],
        [1, "t", 4, 81, 259, 0],
        [1, "t", 4, 69, 249, 0],
        [1, "t", 5, 87, 246, 0],
        [1, "t", 5, 75, 252, 0],
        [1, "s", 1, 79, 257, 1],
        [1, "s", 2, 78, 249, 1],
        [1, "s", 2, 80, 258, 1],
        [1, "s", 1, 88, 254, 1],
        [1, "s", 1, 85, 264, 1],
        [1, "s", 2, 89, 263, 1],
        [1, "s", 2, 87, 269, 1],
        [1, "s", 0, 84, 268, 1],
        [1, "s", 2, 76, 267, 1],
        [1, "s", 1, 66, 261, 1],
        [1, "s", 1, 87, 274, 1],
        [1, "s", 1, 76, 263, 1],
        [1, "s", 1, 59, 251, 1],
        [1, "s", 0, 59, 252, 1],
        [1, "t", 2, 86, 265, 0],
        [1, "t", 0, 78, 270, 0],
        [1, "t", 2, 79, 271, 0],
        [1, "t", 0, 77, 260, 0],
        [1, "t", 3, 78, 261, 0],
        [1, "b", 1, 71, 264, 0],
        [1, "b", 1, 88, 269, 0],
        [1, "t", 5, 84, 264, 0],
        [1, "t", 5, 79, 261, 0],
        [1, "t", 5, 72, 265, 0],
        [1, "t", 5, 77, 270, 0],
        [1, "t", 0, 87, 261, 0],
        [1, "t", 2, 86, 260, 0],
        [1, "t", 4, 84, 255, 0],
        [1, "t", 4, 68, 255, 0],
        [1, "t", 1, 67, 254, 0],
        [1, "t", 2, 65, 262, 0],
        [1, "t", 1, 57, 260, 0],
        [1, "t", 2, 58, 259, 0],
        [1, "b", 1, 63, 256, 0],
        [1, "b", 1, 52, 248, 0],
        [1, "t", 2, 53, 248, 0],
        [1, "s", 1, 50, 253, 1],
        [1, "s", 2, 67, 263, 1],
        [1, "s", 2, 52, 252, 1],
        [1, "s", 2, 71, 244, 1],
        [1, "b", 0, 57, 245, 0],
        [1, "t", 2, 58, 244, 0],
        [1, "b", 1, 53, 237, 0],
        [1, "t", 2, 54, 237, 0],
        [1, "t", 2, 41, 238, 0],
        [1, "t", 1, 42, 237, 0],
        [1, "t", 5, 57, 235, 0],
        [1, "t", 5, 60, 246, 0],
        [1, "t", 5, 50, 252, 0],
        [1, "t", 1, 42, 248, 0],
        [1, "b", 1, 43, 249, 0],
        [1, "b", 3, 37, 243, 0],
        [1, "s", 0, 50, 236, 1],
        [1, "s", 2, 39, 247, 1],
        [1, "s", 2, 51, 235, 1],
        [1, "s", 2, 60, 243, 1],
        [1, "s", 2, 36, 240, 1],
        [1, "s", 2, 43, 254, 1],
        [1, "s", 1, 42, 254, 1],
        [1, "t", 1, 38, 233, 0],
        [1, "t", 2, 35, 235, 0],
        [1, "t", 4, 33, 228, 0],
        [1, "t", 4, 33, 245, 0],
        [1, "t", 4, 43, 235, 0],
        [1, "t", 5, 45, 249, 0],
        [1, "t", 5, 41, 253, 0],
        [1, "b", 1, 20, 227, 0],
        [1, "b", 1, 14, 240, 0],
        [1, "t", 3, 21, 227, 0],
        [1, "t", 3, 27, 234, 0],
        [1, "t", 3, 15, 241, 0],
        [1, "t", 3, 12, 229, 0],
        [1, "t", 4, 17, 224, 0],
        [1, "t", 4, 11, 231, 0],
        [1, "t", 4, 22, 238, 0],
        [1, "t", 4, 11, 239, 0],
        [1, "t", 1, 22, 243, 0],
        [1, "b", 2, 23, 242, 0],
        [1, "s", 1, 23, 238, 1],
        [1, "s", 1, 22, 228, 1],
        [1, "s", 2, 24, 228, 1],
        [1, "s", 2, 21, 236, 1],
        [1, "s", 0, 13, 228, 1],
        [1, "s", 0, 16, 242, 1],
        [1, "s", 1, 15, 244, 1],
        [1, "s", 1, 34, 236, 1],
        [1, "t", 1, 26, 249, 0],
        [1, "t", 1, 22, 256, 0],
        [1, "t", 2, 23, 255, 0],
        [1, "b", 1, 17, 256, 0],
        [1, "b", 2, 18, 256, 0],
        [1, "s", 0, 21, 252, 1],
        [1, "s", 2, 20, 250, 1],
        [1, "s", 2, 23, 259, 1],
        [1, "s", 1, 13, 257, 1],
        [1, "t", 1, 31, 254, 0],
        [1, "t", 2, 32, 254, 0],
        [1, "t", 4, 28, 254, 0],
        [1, "t", 4, 34, 258, 0],
        [1, "t", 0, 29, 260, 0],
        [1, "b", 2, 30, 261, 0],
        [1, "t", 0, 43, 262, 0],
        [1, "t", 2, 42, 263, 0],
        [1, "t", 4, 46, 264, 0],
        [1, "b", 1, 39, 265, 0],
        [1, "b", 1, 58, 267, 0],
        [1, "t", 2, 57, 268, 0],
        [1, "t", 4, 62, 270, 0],
        [1, "t", 5, 52, 273, 0],
        [1, "s", 1, 52, 269, 1],
        [1, "s", 1, 41, 272, 1],
        [1, "s", 2, 41, 274, 1],
        [1, "t", 2, 42, 268, 0],
        [1, "t", 0, 43, 268, 0],
        [1, "b", 1, 46, 272, 0],
        [1, "b", 1, 14, 265, 0],
        [1, "t", 2, 15, 266, 0],
        [1, "t", 4, 19, 264, 0],
        [1, "t", 4, 29, 263, 0],
        [1, "t", 4, 11, 269, 0],
        [1, "t", 1, 29, 271, 0],
        [1, "b", 2, 28, 272, 0],
        [1, "t", 2, 24, 267, 0],
        [1, "t", 2, 20, 279, 0],
        [1, "t", 0, 19, 278, 0],
        [1, "t", 3, 13, 278, 0],
        [1, "b", 0, 21, 284, 0],
        [1, "b", 0, 18, 289, 0],
        [1, "t", 2, 20, 283, 0],
        [1, "t", 2, 19, 290, 0],
        [1, "t", 4, 19, 283, 0],
        [1, "t", 4, 20, 290, 0],
        [1, "s", 1, 16, 285, 1],
        [1, "s", 1, 24, 288, 1],
        [1, "s", 2, 26, 287, 1],
        [1, "s", 2, 16, 278, 1],
        [1, "s", 1, 21, 268, 1],
        [1, "s", 2, 19, 268, 1],
        [1, "t", 0, 12, 294, 0],
        [1, "b", 1, 13, 295, 0],
        [1, "t", 3, 13, 291, 0],
        [1, "t", 3, 10, 299, 0],
        [1, "t", 4, 11, 287, 0],
        [1, "t", 4, 17, 298, 0],
        [1, "t", 1, 27, 294, 0],
        [1, "b", 2, 26, 295, 0],
        [1, "t", 3, 33, 297, 0],
        [1, "b", 1, 48, 278, 0],
        [1, "b", 0, 46, 280, 0],
        [1, "b", 2, 50, 280, 0],
        [1, "t", 0, 44, 282, 0],
        [1, "b", 1, 49, 283, 0],
        [1, "b", 0, 51, 278, 0],
        [1, "b", 3, 50, 279, 0],
        [1, "b", 3, 44, 284, 0],
        [1, "b", 0, 47, 284, 0],
        [1, "b", 2, 42, 283, 0],
        [1, "t", 4, 51, 277, 0],
        [1, "b", 1, 44, 286, 0],
        [1, "b", 2, 46, 286, 0],
        [1, "b", 1, 42, 285, 0],
        [1, "b", 3, 41, 286, 0],
        [1, "t", 5, 42, 287, 0],
        [1, "b", 1, 42, 278, 0],
        [1, "b", 2, 43, 279, 0],
        [1, "b", 0, 40, 280, 0],
        [1, "t", 4, 39, 283, 0],
        [1, "t", 4, 39, 279, 0],
        [1, "t", 5, 43, 277, 0],
        [1, "t", 5, 47, 287, 0],
        [1, "t", 4, 46, 277, 0],
        [1, "t", 4, 45, 290, 0],
        [1, "t", 4, 36, 285, 0],
        [1, "t", 3, 35, 284, 0],
        [1, "t", 3, 36, 272, 0],
        [1, "t", 4, 35, 271, 0],
        [1, "t", 1, 29, 279, 0],
        [1, "b", 1, 32, 277, 0],
        [1, "t", 3, 31, 278, 0],
        [1, "b", 2, 28, 280, 0],
        [1, "t", 4, 29, 286, 0],
        [1, "t", 5, 28, 275, 0],
        [1, "t", 3, 37, 292, 0],
        [1, "b", 1, 36, 291, 0],
        [1, "b", 0, 34, 298, 0],
        [1, "t", 4, 31, 292, 0],
        [1, "t", 4, 46, 295, 0],
        [1, "t", 4, 59, 287, 0],
        [1, "b", 1, 58, 286, 0],
        [1, "s", 1, 68, 284, 1],
        [1, "s", 2, 70, 286, 1],
        [1, "s", 0, 67, 284, 1],
        [1, "t", 3, 66, 283, 0],
        [1, "t", 1, 65, 282, 0],
        [1, "b", 1, 64, 288, 0],
        [1, "t", 3, 60, 293, 0],
        [1, "t", 1, 61, 294, 0],
        [1, "b", 1, 76, 294, 0],
        [1, "t", 5, 75, 295, 0],
        [1, "t", 5, 56, 293, 0],
        [1, "t", 5, 59, 281, 0],
        [1, "t", 5, 67, 291, 0],
        [1, "b", 0, 88, 293, 0],
        [1, "t", 2, 89, 292, 0],
        [1, "t", 2, 85, 286, 0],
        [1, "t", 4, 88, 289, 0],
        [1, "t", 4, 79, 287, 0],
        [1, "b", 1, 84, 285, 0],
        [1, "t", 3, 75, 284, 0],
        [1, "b", 0, 75, 278, 0],
        [1, "t", 3, 74, 277, 0],
        [1, "t", 4, 81, 276, 0],
        [1, "t", 2, 65, 276, 0],
        [1, "b", 1, 66, 275, 0],
        [1, "g", 0, 45, 261, 1],
        [1, "g", 1, 39, 258, 1],
        [1, "g", 0, 35, 250, 1],
        [1, "g", 2, 22, 247, 1],
        [1, "g", 2, 27, 227, 1],
        [1, "g", 2, 63, 218, 1],
        [1, "g", 1, 56, 224, 1],
        [1, "g", 0, 46, 231, 1],
        [1, "g", 1, 65, 240, 1],
        [1, "g", 2, 67, 238, 1],
        [1, "g", 2, 79, 232, 1],
        [1, "g", 2, 72, 253, 1],
        [1, "g", 2, 62, 264, 1],
        [1, "g", 2, 28, 267, 1],
        [1, "g", 2, 58, 274, 1],
        [1, "de", 2, 14, 182, 0],
        [1, "de", 2, 24, 182, 0],
        [1, "de", 0, 11, 185, 0],
        [1, "de", 0, 14, 194, 0],
        [1, "de", 1, 25, 196, 0],
        [1, "de", 3, 31, 183, 0],
        [1, "de", 0, 38, 181, 0],
        [1, "de", 2, 45, 186, 0],
        [1, "de", 1, 38, 191, 0],
        [1, "de", 0, 56, 181, 0],
        [1, "de", 1, 68, 182, 0],
        [1, "de", 2, 80, 181, 0],
        [1, "de", 3, 86, 187, 0],
        [1, "de", 0, 84, 193, 0],
        [1, "de", 1, 82, 201, 0],
        [1, "de", 2, 64, 191, 0],
        [1, "de", 2, 72, 200, 0],
        [1, "de", 3, 64, 201, 0],
        [1, "de", 2, 76, 209, 0],
        [1, "de", 3, 71, 212, 0],
        [1, "de", 1, 86, 214, 0],
        [1, "de", 0, 57, 208, 0],
        [1, "de", 0, 41, 203, 0],
        [1, "de", 1, 15, 206, 0],
        [1, "de", 2, 25, 209, 0],
        [1, "de", 3, 16, 218, 0],
        [1, "de", 3, 11, 227, 0],
        [1, "de", 0, 22, 229, 0],
        [1, "de", 1, 15, 239, 0],
        [1, "de", 2, 24, 238, 0],
        [1, "de", 3, 22, 246, 0],
        [1, "de", 3, 10, 253, 0],
        [1, "de", 1, 18, 258, 0],
        [1, "de", 1, 28, 261, 0],
        [1, "de", 1, 14, 267, 0],
        [1, "de", 0, 24, 268, 0],
        [1, "de", 0, 15, 278, 0],
        [1, "de", 2, 21, 279, 0],
        [1, "de", 2, 30, 272, 0],
        [1, "de", 2, 29, 281, 0],
        [1, "de", 2, 15, 284, 0],
        [1, "de", 3, 12, 291, 0],
        [1, "de", 3, 30, 287, 0],
        [1, "de", 3, 27, 293, 0],
        [1, "de", 0, 25, 296, 0],
        [1, "de", 0, 11, 298, 0],
        [1, "de", 0, 8, 286, 0],
        [1, "de", 2, 36, 299, 0],
        [1, "de", 2, 37, 280, 0],
        [1, "de", 3, 38, 291, 0],
        [1, "de", 1, 48, 287, 0],
        [1, "de", 1, 46, 277, 0],
        [1, "de", 1, 53, 278, 0],
        [1, "de", 3, 48, 295, 0],
        [1, "de", 0, 57, 294, 0],
        [1, "de", 1, 65, 290, 0],
        [1, "de", 1, 84, 292, 0],
        [1, "de", 2, 77, 295, 0],
        [1, "de", 2, 84, 287, 0],
        [1, "de", 0, 74, 279, 0],
        [1, "de", 3, 65, 274, 0],
        [1, "de", 2, 71, 267, 0],
        [1, "de", 2, 65, 261, 0],
        [1, "de", 2, 47, 264, 0],
        [1, "de", 3, 47, 258, 0],
        [1, "de", 3, 53, 251, 0],
        [1, "de", 2, 40, 253, 0],
        [1, "de", 0, 35, 244, 0],
        [1, "de", 0, 37, 233, 0],
        [1, "de", 3, 44, 226, 0],
        [1, "de", 2, 37, 219, 0],
        [1, "de", 2, 54, 234, 0],
        [1, "de", 1, 66, 234, 0],
        [1, "de", 2, 65, 241, 0],
        [1, "de", 0, 68, 249, 0],
        [1, "de", 3, 78, 257, 0],
        [1, "de", 2, 86, 253, 0],
        [1, "de", 2, 83, 245, 0],
        [1, "de", 1, 82, 238, 0],
        [1, "de", 3, 76, 235, 0],
        [1, "de", 2, 86, 232, 0],
        [1, "de", 0, 86, 224, 0],
        [1, "de", 2, 76, 226, 0],
        [1, "de", 2, 61, 228, 0],
        [1, "de", 2, 58, 217, 0],
        [1, "de", 0, 49, 217, 0],
        [1, "de", 19, 11, 179, 0],
        [1, "de", 20, 17, 180, 0],
        [1, "de", 22, 18, 181, 0],
        [1, "de", 19, 30, 184, 0],
        [1, "de", 19, 27, 187, 0],
        [1, "de", 19, 30, 195, 0],
        [1, "de", 19, 18, 192, 0],
        [1, "de", 19, 44, 182, 0],
        [1, "de", 19, 49, 182, 0],
        [1, "de", 19, 54, 182, 0],
        [1, "de", 19, 59, 183, 0],
        [1, "de", 19, 56, 186, 0],
        [1, "de", 19, 46, 188, 0],
        [1, "de", 19, 58, 193, 0],
        [1, "de", 19, 67, 187, 0],
        [1, "de", 19, 65, 192, 0],
        [1, "de", 19, 71, 180, 0],
        [1, "de", 19, 78, 187, 0],
        [1, "de", 19, 80, 194, 0],
        [1, "de", 19, 72, 193, 0],
        [1, "de", 19, 82, 182, 0],
        [1, "de", 19, 88, 185, 0],
        [1, "de", 19, 87, 189, 0],
        [1, "de", 19, 86, 197, 0],
        [1, "de", 19, 85, 203, 0],
        [1, "de", 19, 74, 200, 0],
        [1, "de", 19, 70, 202, 0],
        [1, "de", 19, 83, 199, 0],
        [1, "de", 19, 86, 208, 0],
        [1, "de", 19, 84, 214, 0],
        [1, "de", 19, 83, 211, 0],
        [1, "de", 19, 84, 217, 0],
        [1, "de", 19, 77, 210, 0],
        [1, "de", 19, 71, 210, 0],
        [1, "de", 19, 73, 213, 0],
        [1, "de", 19, 66, 207, 0],
        [1, "de", 19, 66, 204, 0],
        [1, "de", 19, 62, 209, 0],
        [1, "de", 19, 63, 201, 0],
        [1, "de", 19, 56, 205, 0],
        [1, "de", 19, 49, 199, 0],
        [1, "de", 19, 50, 205, 0],
        [1, "de", 19, 40, 197, 0],
        [1, "de", 19, 38, 198, 0],
        [1, "de", 19, 40, 208, 0],
        [1, "de", 19, 36, 204, 0],
        [1, "de", 19, 33, 204, 0],
        [1, "de", 19, 29, 202, 0],
        [1, "de", 19, 27, 200, 0],
        [1, "de", 19, 26, 193, 0],
        [1, "de", 19, 18, 201, 0],
        [1, "de", 19, 20, 199, 0],
        [1, "de", 19, 12, 196, 0],
        [1, "de", 19, 12, 204, 0],
        [1, "de", 19, 11, 201, 0],
        [1, "de", 19, 23, 208, 0],
        [1, "de", 19, 31, 214, 0],
        [1, "de", 19, 26, 215, 0],
        [1, "de", 19, 36, 217, 0],
        [1, "de", 19, 32, 223, 0],
        [1, "de", 19, 26, 223, 0],
        [1, "de", 19, 18, 218, 0],
        [1, "de", 19, 15, 215, 0],
        [1, "de", 19, 17, 212, 0],
        [1, "de", 19, 15, 224, 0],
        [1, "de", 19, 19, 229, 0],
        [1, "de", 19, 10, 230, 0],
        [1, "de", 19, 22, 240, 0],
        [1, "de", 19, 13, 238, 0],
        [1, "de", 19, 13, 243, 0],
        [1, "de", 19, 24, 244, 0],
        [1, "de", 19, 24, 250, 0],
        [1, "de", 19, 28, 253, 0],
        [1, "de", 19, 33, 255, 0],
        [1, "de", 19, 34, 260, 0],
        [1, "de", 19, 31, 260, 0],
        [1, "de", 19, 38, 267, 0],
        [1, "de", 19, 44, 264, 0],
        [1, "de", 19, 43, 261, 0],
        [1, "de", 19, 16, 257, 0],
        [1, "de", 19, 22, 258, 0],
        [1, "de", 19, 12, 253, 0],
        [1, "de", 19, 8, 242, 0],
        [1, "de", 19, 8, 255, 0],
        [1, "de", 19, 15, 264, 0],
        [1, "de", 19, 20, 265, 0],
        [1, "de", 19, 12, 271, 0],
        [1, "de", 19, 8, 272, 0],
        [1, "de", 19, 13, 277, 0],
        [1, "de", 19, 21, 277, 0],
        [1, "de", 19, 21, 281, 0],
        [1, "de", 19, 27, 282, 0],
        [1, "de", 19, 29, 278, 0],
        [1, "de", 19, 29, 273, 0],
        [1, "de", 19, 36, 271, 0],
        [1, "de", 19, 8, 278, 0],
        [1, "de", 19, 11, 286, 0],
        [1, "de", 19, 17, 291, 0],
        [1, "de", 19, 14, 294, 0],
        [1, "de", 19, 8, 292, 0],
        [1, "de", 19, 12, 300, 0],
        [1, "de", 19, 18, 298, 0],
        [1, "de", 19, 16, 301, 0],
        [1, "de", 19, 27, 296, 0],
        [1, "de", 19, 25, 292, 0],
        [1, "de", 19, 23, 301, 0],
        [1, "de", 19, 28, 301, 0],
        [1, "de", 19, 35, 297, 0],
        [1, "de", 19, 37, 301, 0],
        [1, "de", 19, 43, 301, 0],
        [1, "de", 19, 46, 294, 0],
        [1, "de", 19, 46, 288, 0],
        [1, "de", 19, 40, 287, 0],
        [1, "de", 19, 50, 301, 0],
        [1, "de", 19, 58, 301, 0],
        [1, "de", 19, 64, 301, 0],
        [1, "de", 19, 71, 301, 0],
        [1, "de", 19, 80, 301, 0],
        [1, "de", 19, 87, 301, 0],
        [1, "de", 19, 86, 294, 0],
        [1, "de", 19, 87, 290, 0],
        [1, "de", 19, 82, 286, 0],
        [1, "de", 19, 75, 285, 0],
        [1, "de", 19, 66, 292, 0],
        [1, "de", 19, 66, 288, 0],
        [1, "de", 19, 58, 288, 0],
        [1, "de", 19, 67, 282, 0],
        [1, "de", 19, 61, 281, 0],
        [1, "de", 19, 60, 295, 0],
        [1, "de", 19, 50, 282, 0],
        [1, "de", 19, 47, 283, 0],
        [1, "de", 19, 48, 281, 0],
        [1, "de", 19, 44, 277, 0],
        [1, "de", 19, 41, 282, 0],
        [1, "de", 19, 38, 281, 0],
        [1, "de", 19, 42, 288, 0],
        [1, "de", 19, 52, 281, 0],
        [1, "de", 19, 50, 275, 0],
        [1, "de", 19, 39, 277, 0],
        [1, "de", 19, 38, 284, 0],
        [1, "de", 19, 51, 285, 0],
        [1, "de", 19, 38, 278, 0],
        [1, "de", 19, 47, 272, 0],
        [1, "de", 19, 44, 267, 0],
        [1, "de", 19, 76, 280, 0],
        [1, "de", 19, 78, 272, 0],
        [1, "de", 19, 68, 275, 0],
        [1, "de", 19, 70, 265, 0],
        [1, "de", 19, 65, 263, 0],
        [1, "de", 19, 64, 262, 0],
        [1, "de", 19, 60, 268, 0],
        [1, "de", 19, 56, 266, 0],
        [1, "de", 19, 55, 260, 0],
        [1, "de", 19, 59, 258, 0],
        [1, "de", 19, 62, 255, 0],
        [1, "de", 19, 67, 253, 0],
        [1, "de", 19, 69, 256, 0],
        [1, "de", 19, 44, 253, 0],
        [1, "de", 19, 44, 250, 0],
        [1, "de", 19, 36, 245, 0],
        [1, "de", 19, 39, 239, 0],
        [1, "de", 19, 42, 234, 0],
        [1, "de", 19, 37, 235, 0],
        [1, "de", 19, 45, 226, 0],
        [1, "de", 19, 46, 222, 0],
        [1, "de", 19, 51, 218, 0],
        [1, "de", 19, 68, 218, 0],
        [1, "de", 19, 74, 224, 0],
        [1, "de", 19, 76, 218, 0],
        [1, "de", 19, 84, 221, 0],
        [1, "de", 19, 88, 223, 0],
        [1, "de", 19, 76, 230, 0],
        [1, "de", 19, 86, 234, 0],
        [1, "de", 19, 79, 237, 0],
        [1, "de", 19, 75, 243, 0],
        [1, "de", 19, 81, 245, 0],
        [1, "de", 19, 83, 247, 0],
        [1, "de", 19, 88, 247, 0],
        [1, "de", 19, 84, 254, 0],
        [1, "de", 19, 86, 251, 0],
        [1, "de", 19, 85, 260, 0],
        [1, "de", 19, 79, 260, 0],
        [1, "de", 19, 76, 251, 0],
        [1, "de", 19, 72, 251, 0],
        [1, "de", 19, 69, 251, 0],
        [1, "de", 19, 87, 266, 0],
        [1, "de", 19, 89, 270, 0],
        [1, "de", 19, 87, 271, 0],
        [1, "de", 19, 82, 277, 0],
        [1, "de", 19, 87, 284, 0],
        [1, "de", 19, 87, 237, 0],
        [1, "de", 19, 88, 179, 0],
        [1, "de", 19, 50, 191, 0],
        [1, "de", 19, 52, 221, 0],
        [1, "de", 19, 34, 234, 0],
        [1, "de", 19, 27, 233, 0],
        [1, "de", 19, 37, 293, 0],
        [1, "de", 29, 13, 181, 0],
        [1, "de", 29, 8, 180, 0],
        [1, "de", 30, 13, 186, 0],
        [1, "de", 31, 24, 183, 0],
        [1, "de", 32, 33, 185, 0],
        [1, "de", 32, 37, 182, 0],
        [1, "de", 29, 45, 183, 0],
        [1, "de", 30, 48, 183, 0],
        [1, "de", 30, 58, 181, 0],
        [1, "de", 30, 66, 188, 0],
        [1, "de", 30, 66, 182, 0],
        [1, "de", 29, 63, 196, 0],
        [1, "de", 29, 54, 194, 0],
        [1, "de", 30, 79, 189, 0],
        [1, "de", 30, 87, 182, 0],
        [1, "de", 30, 83, 185, 0],
        [1, "de", 29, 88, 189, 0],
        [1, "de", 29, 85, 202, 0],
        [1, "de", 31, 82, 203, 0],
        [1, "de", 32, 80, 201, 0],
        [1, "de", 32, 87, 209, 0],
        [1, "de", 32, 83, 214, 0],
        [1, "de", 30, 88, 220, 0],
        [1, "de", 30, 78, 229, 0],
        [1, "de", 30, 73, 223, 0],
        [1, "de", 29, 74, 217, 0],
        [1, "de", 29, 67, 217, 0],
        [1, "de", 30, 72, 208, 0],
        [1, "de", 30, 73, 199, 0],
        [1, "de", 30, 65, 207, 0],
        [1, "de", 29, 63, 210, 0],
        [1, "de", 29, 50, 204, 0],
        [1, "de", 30, 41, 205, 0],
        [1, "de", 29, 35, 205, 0],
        [1, "de", 30, 27, 202, 0],
        [1, "de", 30, 20, 201, 0],
        [1, "de", 29, 10, 203, 0],
        [1, "de", 29, 14, 196, 0],
        [1, "de", 29, 24, 187, 0],
        [1, "de", 29, 28, 223, 0],
        [1, "de", 29, 32, 212, 0],
        [1, "de", 30, 28, 214, 0],
        [1, "de", 31, 24, 218, 0],
        [1, "de", 29, 36, 219, 0],
        [1, "de", 29, 37, 217, 0],
        [1, "de", 29, 52, 217, 0],
        [1, "de", 29, 59, 217, 0],
        [1, "de", 29, 69, 231, 0],
        [1, "de", 29, 64, 242, 0],
        [1, "de", 30, 53, 253, 0],
        [1, "de", 30, 45, 250, 0],
        [1, "de", 30, 58, 261, 0],
        [1, "de", 30, 73, 276, 0],
        [1, "de", 30, 64, 276, 0],
        [1, "de", 30, 82, 285, 0],
        [1, "de", 30, 65, 293, 0],
        [1, "de", 30, 56, 288, 0],
        [1, "de", 30, 45, 296, 0],
        [1, "de", 30, 40, 288, 0],
        [1, "de", 30, 37, 283, 0],
        [1, "de", 30, 53, 280, 0],
        [1, "de", 30, 41, 277, 0],
        [1, "de", 29, 28, 296, 0],
        [1, "de", 29, 18, 292, 0],
        [1, "de", 29, 24, 284, 0],
        [1, "de", 30, 10, 295, 0],
        [1, "de", 30, 10, 286, 0],
        [1, "de", 30, 15, 279, 0],
        [1, "de", 30, 15, 269, 0],
        [1, "de", 30, 21, 259, 0],
        [1, "de", 30, 12, 256, 0],
        [1, "de", 30, 31, 245, 0],
        [1, "de", 30, 12, 240, 0],
        [1, "de", 30, 28, 235, 0],
        [1, "de", 30, 13, 226, 0],
        [1, "de", 30, 39, 231, 0],
        [1, "de", 30, 61, 226, 0],
        [1, "r", 96, 262, 0],
        [1, "r", 97, 262, 0],
        [1, "r", 98, 262, 0],
        [1, "r", 97, 270, 0],
        [1, "r", 97, 271, 0],
        [1, "r", 97, 272, 0],
        [1, "r", 97, 273, 0],
        [1, "r", 97, 274, 0],
        [1, "r", 97, 275, 0],
        [1, "r", 97, 276, 0],
        [1, "r", 97, 277, 0],
        [1, "r", 97, 278, 0],
        [1, "r", 98, 270, 0],
        [1, "r", 98, 271, 0],
        [1, "r", 98, 272, 0],
        [1, "r", 98, 273, 0],
        [1, "r", 98, 274, 0],
        [1, "r", 98, 275, 0],
        [1, "r", 98, 276, 0],
        [1, "r", 98, 277, 0],
        [1, "r", 98, 278, 0],
        [1, "r", 96, 283, 0],
        [1, "r", 97, 283, 0],
        [1, "r", 97, 284, 0],
        [1, "r", 97, 285, 0],
        [1, "r", 98, 283, 0],
        [1, "r", 98, 284, 0],
        [1, "r", 98, 285, 0],
        [1, "r", 96, 270, 0],
        [1, "r", 96, 271, 0],
        [1, "r", 96, 272, 0],
        [1, "r", 96, 273, 0],
        [1, "r", 96, 274, 0],
        [1, "r", 96, 275, 0],
        [1, "r", 96, 276, 0],
        [1, "r", 96, 277, 0],
        [1, "r", 96, 278, 0],
        [1, "r", 44, 248, 0],
        [1, "de", 16, 94, 290, 0],
        [1, "de", 16, 94, 252, 0],
        [1, "de", 16, 94, 228, 0],
        [1, "de", 17, 94, 200, 0],
        [1, "r", 95, 282, 1],
        [1, "r", 95, 281, 1],
        [1, "r", 94, 281, 1],
        [1, "r", 90, 281, 1],
        [1, "r", 91, 282, 1],
        [1, "r", 89, 281, 1],
        [1, "r", 85, 276, 1],
        [1, "r", 85, 277, 1],
        [1, "r", 86, 278, 1],
        [1, "p", 0, 85, 279, 1],
        [1, "r", 86, 279, 1],
        [1, "r", 87, 280, 1],
        [1, "r", 96, 281, 0],
        [1, "r", 97, 281, 0],
        [1, "r", 98, 281, 0],
        [1, "r", 98, 282, 0],
        [1, "r", 97, 282, 0],
        [1, "r", 96, 282, 0],
        [1, "r", 68, 261, 1],
        [1, "fo", 1, 94, 168, 0],
        [1, "fo", 2, 94, 151, 0],
        [1, "fo", 1, 94, 138, 0],
        [1, "fo", 1, 93, 124, 0],
        [1, "fo", 1, 94, 129, 0],
        [1, "fo", 1, 93, 113, 0],
        [1, "fo", 1, 94, 102, 0],
        [1, "fo", 1, 94, 93, 0],
        [1, "fo", 1, 93, 90, 0],
        [1, "fo", 1, 94, 79, 0],
        [1, "fo", 1, 94, 76, 0],
        [1, "fo", 1, 93, 70, 0],
        [1, "fo", 1, 93, 63, 0],
        [1, "fo", 1, 94, 53, 0],
        [1, "fo", 1, 93, 10, 0],
        [1, "fo", 1, 85, 8, 0],
        [1, "fo", 1, 94, 12, 0],
        [1, "fo", 1, 66, 13, 0],
        [1, "fo", 1, 69, 9, 0],
        [1, "fo", 2, 68, 14, 0],
        [1, "fo", 2, 66, 25, 0],
        [1, "fo", 2, 92, 9, 0],
        [1, "fo", 2, 94, 14, 0],
        [1, "fo", 2, 87, 9, 0],
        [1, "fo", 2, 71, 9, 0],
        [1, "fo", 2, 90, 12, 0],
        [1, "fo", 2, 91, 13, 0],
        [1, "fo", 1, 74, 12, 0],
        [1, "fo", 2, 72, 12, 0],
        [1, "fo", 2, 75, 13, 0],
        [1, "fo", 2, 74, 15, 0],
        [1, "fo", 2, 84, 12, 0],
        [1, "fo", 2, 81, 14, 0],
        [1, "fo", 1, 84, 13, 0],
        [1, "fo", 1, 84, 19, 0],
        [1, "fo", 1, 11, 9, 0],
        [1, "fo", 1, 7, 14, 0],
        [1, "fo", 1, 8, 22, 0],
        [1, "fo", 1, 7, 34, 0],
        [1, "fo", 1, 12, 24, 0],
        [1, "fo", 2, 8, 24, 0],
        [1, "fo", 2, 9, 21, 0],
        [1, "fo", 2, 31, 10, 0],
        [1, "fo", 2, 33, 27, 0],
        [1, "fo", 2, 9, 34, 0],
        [1, "fo", 2, 8, 19, 0],
        [1, "fo", 1, 14, 10, 0],
        [1, "fo", 2, 13, 9, 0],
        [1, "fo", 2, 15, 11, 0],
        [1, "fo", 2, 9, 9, 0],
        [1, "fo", 2, 9, 10, 0],
        [1, "fo", 2, 9, 15, 0],
        [1, "fo", 2, 10, 23, 0],
        [1, "fo", 2, 34, 29, 0],
        [1, "fo", 2, 27, 18, 0],
        [1, "fo", 2, 25, 21, 0],
        [1, "fo", 2, 20, 18, 0],
        [1, "fo", 2, 18, 21, 0],
        [1, "fo", 2, 29, 9, 0],
        [1, "fo", 2, 13, 14, 0],
        [1, "fo", 2, 9, 38, 0],
        [1, "fo", 2, 21, 39, 0],
        [1, "fo", 2, 84, 26, 0],
        [1, "fo", 2, 77, 25, 0],
        [1, "fo", 2, 86, 35, 0],
        [1, "fo", 1, 70, 35, 0],
        [1, "fo", 2, 72, 36, 0],
        [1, "fo", 2, 73, 31, 0],
        [1, "fo", 2, 89, 39, 0],
        [1, "fo", 2, 65, 40, 0],
        [1, "fo", 2, 92, 32, 0],
        [1, "fo", 2, 90, 28, 0],
        [1, "de", 22, 25, 266, 0],
        [1, "de", 22, 17, 206, 0],
        [1, "de", 19, 8, 184, 0],
        [1, "de", 19, 22, 183, 0],
        [1, "de", 19, 35, 188, 0],
        [1, "de", 19, 36, 192, 0],
        [1, "de", 19, 50, 277, 0],
        [1, "de", 19, 35, 279, 0],
        [1, "t", 4, 7, 178, 0],
        [1, "t", 1, 7, 179, 0],
        [1, "t", 3, 7, 180, 0],
        [1, "t", 2, 7, 181, 0],
        [1, "t", 5, 7, 182, 0],
        [1, "t", 4, 7, 183, 0],
        [1, "t", 3, 7, 184, 0],
        [1, "t", 4, 7, 185, 0],
        [1, "t", 2, 7, 186, 0],
        [1, "t", 1, 7, 187, 0],
        [1, "t", 4, 7, 188, 0],
        [1, "t", 3, 7, 189, 0],
        [1, "t", 5, 7, 190, 0],
        [1, "t", 1, 7, 191, 0],
        [1, "t", 3, 7, 192, 0],
        [1, "t", 4, 7, 193, 0],
        [1, "t", 3, 7, 194, 0],
        [1, "t", 5, 7, 195, 0],
        [1, "t", 2, 7, 196, 0],
        [1, "t", 4, 7, 197, 0],
        [1, "b", 2, 7, 198, 0],
        [1, "t", 4, 7, 199, 0],
        [1, "t", 2, 7, 200, 0],
        [1, "t", 5, 7, 201, 0],
        [1, "t", 2, 7, 202, 0],
        [1, "t", 4, 7, 203, 0],
        [1, "t", 2, 7, 204, 0],
        [1, "t", 5, 7, 205, 0],
        [1, "t", 2, 7, 206, 0],
        [1, "t", 1, 7, 207, 0],
        [1, "t", 4, 7, 208, 0],
        [1, "t", 3, 7, 209, 0],
        [1, "t", 1, 7, 210, 0],
        [1, "b", 0, 7, 211, 0],
        [1, "t", 3, 7, 212, 0],
        [1, "t", 4, 7, 213, 0],
        [1, "t", 3, 7, 214, 0],
        [1, "t", 5, 7, 215, 0],
        [1, "t", 5, 7, 216, 0],
        [1, "t", 3, 7, 217, 0],
        [1, "t", 1, 7, 218, 0],
        [1, "t", 4, 7, 219, 0],
        [1, "b", 2, 7, 220, 0],
        [1, "t", 1, 7, 221, 0],
        [1, "t", 2, 7, 222, 0],
        [1, "t", 4, 7, 223, 0],
        [1, "t", 3, 7, 224, 0],
        [1, "t", 1, 7, 225, 0],
        [1, "t", 4, 7, 226, 0],
        [1, "t", 2, 7, 227, 0],
        [1, "t", 5, 7, 228, 0],
        [1, "t", 3, 7, 229, 0],
        [1, "t", 1, 7, 230, 0],
        [1, "t", 4, 7, 231, 0],
        [1, "b", 2, 7, 232, 0],
        [1, "t", 5, 7, 233, 0],
        [1, "t", 1, 7, 234, 0],
        [1, "t", 3, 7, 235, 0],
        [1, "t", 4, 7, 236, 0],
        [1, "t", 2, 7, 237, 0],
        [1, "t", 5, 7, 238, 0],
        [1, "b", 3, 7, 239, 0],
        [1, "t", 2, 7, 240, 0],
        [1, "t", 1, 7, 241, 0],
        [1, "t", 2, 7, 242, 0],
        [1, "t", 4, 7, 243, 0],
        [1, "t", 3, 7, 244, 0],
        [1, "t", 4, 7, 245, 0],
        [1, "t", 1, 7, 246, 0],
        [1, "b", 0, 7, 247, 0],
        [1, "t", 3, 7, 248, 0],
        [1, "t", 5, 7, 249, 0],
        [1, "t", 2, 7, 250, 0],
        [1, "t", 1, 7, 251, 0],
        [1, "t", 4, 7, 252, 0],
        [1, "t", 3, 7, 253, 0],
        [1, "t", 5, 7, 254, 0],
        [1, "t", 1, 7, 255, 0],
        [1, "t", 4, 7, 256, 0],
        [1, "t", 1, 7, 257, 0],
        [1, "t", 2, 7, 258, 0],
        [1, "t", 5, 7, 260, 0],
        [1, "t", 3, 7, 259, 0],
        [1, "t", 1, 7, 261, 0],
        [1, "t", 3, 7, 262, 0],
        [1, "t", 4, 7, 263, 0],
        [1, "t", 1, 7, 264, 0],
        [1, "t", 2, 7, 265, 0],
        [1, "t", 5, 7, 266, 0],
        [1, "t", 2, 7, 267, 0],
        [1, "t", 2, 7, 269, 0],
        [1, "b", 2, 7, 268, 0],
        [1, "t", 4, 7, 270, 0],
        [1, "t", 1, 7, 271, 0],
        [1, "t", 5, 7, 272, 0],
        [1, "b", 2, 7, 273, 0],
        [1, "t", 4, 7, 274, 0],
        [1, "t", 2, 7, 275, 0],
        [1, "t", 5, 7, 276, 0],
        [1, "t", 5, 7, 277, 0],
        [1, "t", 2, 7, 278, 0],
        [1, "t", 1, 7, 279, 0],
        [1, "t", 4, 7, 280, 0],
        [1, "b", 1, 7, 281, 0],
        [1, "t", 3, 7, 282, 0],
        [1, "t", 4, 7, 283, 0],
        [1, "t", 1, 7, 284, 0],
        [1, "t", 3, 7, 285, 0],
        [1, "t", 5, 7, 286, 0],
        [1, "t", 4, 7, 288, 0],
        [1, "t", 2, 7, 287, 0],
        [1, "b", 0, 7, 289, 0],
        [1, "t", 4, 7, 290, 0],
        [1, "t", 2, 7, 291, 0],
        [1, "t", 5, 7, 292, 0],
        [1, "t", 3, 7, 293, 0],
        [1, "t", 1, 7, 294, 0],
        [1, "t", 4, 7, 295, 0],
        [1, "t", 3, 7, 296, 0],
        [1, "t", 1, 7, 297, 0],
        [1, "t", 4, 7, 298, 0],
        [1, "t", 2, 7, 299, 0],
        [1, "b", 0, 7, 300, 0],
        [1, "t", 2, 7, 301, 0],
        [1, "r", 196, 271, 0],
        [1, "r", 199, 274, 0],
        [1, "r", 167, 238, 0],
        [1, "r", 171, 240, 0],
        [1, "r", 189, 207, 0],
        [1, "r", 192, 209, 0],
        [1, "r", 198, 271, 0],
        [1, "r", 197, 271, 0],
        [1, "r", 198, 272, 0],
        [1, "r", 197, 272, 0],
        [1, "r", 196, 272, 0],
        [1, "r", 195, 272, 0],
        [1, "r", 199, 272, 0],
        [1, "r", 199, 273, 0],
        [1, "r", 198, 273, 0],
        [1, "r", 197, 273, 0],
        [1, "r", 196, 273, 0],
        [1, "r", 198, 274, 0],
        [1, "r", 197, 274, 0],
        [1, "r", 195, 273, 0],
        [1, "r", 196, 274, 0],
        [1, "r", 198, 275, 0],
        [1, "r", 197, 275, 0],
        [1, "r", 200, 274, 0],
        [1, "r", 200, 273, 0],
        [1, "r", 199, 275, 0],
        [1, "plm", 2, 200, 272, 0],
        [1, "plm", 1, 195, 271, 0],
        [1, "plm", 0, 199, 268, 0],
        [1, "plm", 0, 193, 277, 0],
        [1, "plm", 1, 199, 276, 0],
        [1, "s", 1, 200, 275, 1],
        [1, "s", 1, 194, 272, 1],
        [1, "s", 2, 193, 270, 1],
        [1, "g", 2, 193, 273, 1],
        [1, "g", 2, 201, 267, 1],
        [1, "m", 2, 220, 298, 1],
        [1, "m", 1, 219, 292, 1],
        [1, "m", 1, 214, 297, 1],
        [1, "r", 168, 238, 0],
        [1, "r", 169, 238, 0],
        [1, "r", 170, 238, 0],
        [1, "r", 171, 239, 0],
        [1, "r", 170, 239, 0],
        [1, "r", 169, 239, 0],
        [1, "r", 168, 239, 0],
        [1, "r", 167, 239, 0],
        [1, "r", 166, 239, 0],
        [1, "r", 166, 240, 0],
        [1, "r", 167, 240, 0],
        [1, "r", 168, 240, 0],
        [1, "r", 169, 240, 0],
        [1, "r", 170, 240, 0],
        [1, "r", 168, 241, 0],
        [1, "r", 169, 241, 0],
        [1, "r", 170, 241, 0],
        [1, "r", 171, 241, 0],
        [1, "plm", 2, 171, 238, 0],
        [1, "plm", 1, 166, 238, 0],
        [1, "plm", 0, 167, 237, 0],
        [1, "plm", 0, 171, 242, 0],
        [1, "plm", 0, 165, 243, 0],
        [1, "plm", 0, 171, 235, 0],
        [1, "plm", 0, 174, 241, 0],
        [1, "s", 1, 165, 239, 1],
        [1, "s", 1, 172, 241, 1],
        [1, "s", 0, 170, 237, 1],
        [1, "s", 1, 171, 237, 1],
        [1, "s", 2, 174, 236, 1],
        [1, "s", 2, 162, 241, 1],
        [1, "s", 2, 170, 246, 1],
        [1, "s", 2, 167, 235, 1],
        [1, "s", 2, 176, 243, 1],
        [1, "r", 190, 207, 0],
        [1, "r", 191, 207, 0],
        [1, "r", 192, 208, 0],
        [1, "r", 191, 208, 0],
        [1, "r", 190, 208, 0],
        [1, "r", 189, 208, 0],
        [1, "r", 188, 208, 0],
        [1, "r", 189, 209, 0],
        [1, "r", 190, 209, 0],
        [1, "r", 191, 209, 0],
        [1, "r", 188, 209, 0],
        [1, "r", 190, 210, 0],
        [1, "r", 191, 210, 0],
        [1, "r", 192, 210, 0],
        [1, "plm", 2, 189, 210, 0],
        [1, "plm", 2, 192, 205, 0],
        [1, "plm", 1, 192, 207, 0],
        [1, "plm", 0, 193, 210, 0],
        [1, "plm", 0, 187, 208, 0],
        [1, "plm", 0, 197, 206, 0],
        [1, "plm", 0, 191, 213, 0],
        [1, "plm", 0, 190, 204, 0],
        [1, "s", 1, 188, 207, 1],
        [1, "s", 1, 190, 211, 1],
        [1, "s", 2, 188, 213, 1],
        [1, "s", 2, 187, 205, 1],
        [1, "s", 0, 194, 210, 1],
        [1, "s", 0, 198, 207, 1],
        [1, "s", 1, 193, 204, 1],
        [1, "s", 1, 193, 213, 1],
        [1, "s", 2, 198, 212, 1],
        [1, "s", 2, 182, 208, 1],
        [1, "s", 1, 204, 271, 1],
        [1, "s", 0, 203, 272, 1],
        [1, "s", 0, 189, 275, 1],
        [1, "s", 0, 195, 265, 1],
        [1, "s", 2, 196, 264, 1],
        [1, "s", 2, 186, 274, 1],
        [1, "s", 2, 197, 280, 1],
        [1, "s", 0, 217, 282, 1],
        [1, "s", 1, 214, 285, 1],
        [1, "s", 1, 214, 274, 1],
        [1, "s", 1, 203, 282, 1],
        [1, "s", 1, 205, 290, 1],
        [1, "s", 0, 207, 292, 1],
        [1, "s", 0, 197, 297, 1],
        [1, "s", 0, 184, 287, 1],
        [1, "s", 2, 213, 289, 1],
        [1, "s", 2, 196, 294, 1],
        [1, "s", 2, 187, 286, 1],
        [1, "s", 1, 192, 289, 1],
        [1, "s", 1, 189, 299, 1],
        [1, "s", 0, 213, 273, 1],
        [1, "g", 2, 212, 278, 1],
        [1, "g", 1, 200, 288, 1],
        [1, "g", 2, 215, 265, 1],
        [1, "g", 2, 183, 281, 1],
        [1, "s", 0, 178, 295, 1],
        [1, "s", 0, 167, 281, 1],
        [1, "s", 0, 175, 263, 1],
        [1, "s", 1, 176, 293, 1],
        [1, "s", 1, 163, 285, 1],
        [1, "s", 1, 177, 266, 1],
        [1, "s", 1, 161, 272, 1],
        [1, "s", 2, 185, 261, 1],
        [1, "c", 0, 217, 270, 1],
        [1, "c", 0, 220, 278, 1],
        [1, "c", 0, 217, 283, 1],
        [1, "c", 0, 220, 287, 1],
        [1, "c", 0, 210, 292, 1],
        [1, "c", 0, 205, 297, 1],
        [1, "c", 0, 198, 293, 1],
        [1, "c", 0, 208, 283, 1],
        [1, "c", 0, 197, 283, 1],
        [1, "c", 0, 190, 289, 1],
        [1, "c", 0, 183, 296, 1],
        [1, "c", 0, 189, 291, 1],
        [1, "c", 0, 178, 284, 1],
        [1, "c", 0, 208, 265, 1],
        [1, "c", 0, 169, 292, 1],
        [1, "s", 1, 158, 294, 1],
        [1, "s", 0, 151, 297, 1],
        [1, "s", 0, 147, 288, 1],
        [1, "c", 0, 150, 289, 1],
        [1, "c", 0, 160, 282, 1],
        [1, "c", 0, 146, 274, 1],
        [1, "c", 0, 167, 264, 1],
        [1, "c", 0, 165, 267, 1],
        [1, "g", 0, 189, 257, 1],
        [1, "g", 1, 197, 248, 1],
        [1, "g", 2, 170, 255, 1],
        [1, "g", 2, 212, 234, 1],
        [1, "g", 2, 189, 230, 1],
        [1, "g", 2, 173, 221, 1],
        [1, "g", 1, 210, 214, 1],
        [1, "s", 1, 153, 257, 1],
        [1, "s", 0, 158, 255, 1],
        [1, "s", 0, 184, 248, 1],
        [1, "s", 0, 212, 254, 1],
        [1, "s", 1, 203, 249, 1],
        [1, "s", 2, 204, 252, 1],
        [1, "s", 2, 187, 248, 1],
        [1, "s", 0, 206, 237, 1],
        [1, "s", 0, 196, 227, 1],
        [1, "s", 0, 181, 228, 1],
        [1, "s", 1, 199, 227, 1],
        [1, "s", 1, 208, 238, 1],
        [1, "s", 1, 179, 222, 1],
        [1, "s", 1, 213, 223, 1],
        [1, "s", 2, 182, 222, 1],
        [1, "s", 2, 211, 226, 1],
        [1, "s", 2, 214, 214, 1],
        [1, "s", 2, 201, 216, 1],
        [1, "s", 2, 215, 192, 1],
        [1, "s", 1, 210, 198, 1],
        [1, "s", 1, 198, 196, 1],
        [1, "s", 2, 208, 199, 1],
        [1, "s", 2, 187, 192, 1],
        [1, "s", 1, 179, 198, 1],
        [1, "s", 2, 177, 197, 1],
        [1, "s", 0, 164, 197, 1],
        [1, "s", 1, 159, 193, 1],
        [1, "s", 1, 149, 206, 1],
        [1, "s", 1, 164, 209, 1],
        [1, "s", 2, 165, 210, 1],
        [1, "s", 2, 161, 191, 1],
        [1, "s", 1, 162, 224, 1],
        [1, "s", 0, 150, 236, 1],
        [1, "s", 1, 149, 239, 1],
        [1, "s", 2, 153, 236, 1],
        [1, "s", 2, 160, 223, 1],
        [1, "s", 2, 151, 207, 1],
        [1, "s", 2, 147, 220, 1],
        [1, "s", 2, 145, 265, 1],
        [1, "s", 2, 145, 285, 1],
        [1, "c", 0, 152, 266, 1],
        [1, "c", 0, 185, 271, 1],
        [1, "c", 0, 210, 254, 1],
        [1, "c", 0, 209, 256, 1],
        [1, "c", 0, 198, 254, 1],
        [1, "c", 0, 213, 246, 1],
        [1, "c", 0, 216, 237, 1],
        [1, "c", 0, 204, 240, 1],
        [1, "c", 0, 196, 234, 1],
        [1, "c", 0, 188, 238, 1],
        [1, "c", 0, 182, 245, 1],
        [1, "c", 0, 173, 252, 1],
        [1, "c", 0, 153, 248, 1],
        [1, "c", 0, 158, 233, 1],
        [1, "c", 0, 147, 230, 1],
        [1, "c", 0, 151, 224, 1],
        [1, "c", 0, 157, 214, 1],
        [1, "c", 0, 167, 219, 1],
        [1, "c", 0, 171, 208, 1],
        [1, "c", 0, 179, 219, 1],
        [1, "c", 0, 176, 229, 1],
        [1, "c", 0, 195, 221, 1],
        [1, "c", 0, 207, 222, 1],
        [1, "c", 0, 214, 207, 1],
        [1, "c", 0, 205, 210, 1],
        [1, "c", 0, 204, 196, 1],
        [1, "c", 0, 214, 196, 1],
        [1, "c", 0, 190, 199, 1],
        [1, "c", 0, 184, 194, 1],
        [1, "c", 0, 172, 199, 1],
        [1, "c", 0, 161, 204, 1],
        [1, "c", 0, 157, 196, 1],
        [1, "c", 0, 149, 194, 1],
        [1, "c", 0, 147, 208, 1],
        [1, "c", 0, 207, 274, 1],
        [1, "c", 0, 217, 258, 1],
        [1, "c", 0, 201, 260, 1],
        [1, "c", 0, 178, 276, 1],
        [1, "c", 0, 187, 265, 1],
        [1, "s", 1, 204, 260, 1],
        [1, "s", 1, 216, 260, 1],
        [1, "s", 1, 187, 255, 1],
        [1, "s", 2, 189, 254, 1],
        [1, "s", 2, 212, 257, 1],
        [1, "s", 2, 182, 286, 1],
        [1, "s", 2, 169, 280, 1],
        [1, "s", 2, 217, 273, 1],
        [1, "s", 2, 215, 282, 1],
        [1, "s", 2, 172, 263, 1],
        [1, "s", 2, 176, 267, 1],
        [1, "s", 2, 215, 251, 1],
        [1, "fod", 1, 221, 282, 0],
        [1, "fod", 1, 222, 284, 0],
        [1, "fod", 1, 221, 290, 0],
        [1, "fod", 1, 222, 294, 0],
        [1, "fod", 1, 221, 297, 0],
        [1, "fod", 1, 223, 298, 0],
        [1, "fod", 1, 222, 300, 0],
        [1, "fod", 1, 218, 301, 0],
        [1, "fod", 1, 217, 299, 0],
        [1, "fod", 1, 215, 301, 0],
        [1, "fod", 1, 212, 300, 0],
        [1, "fod", 1, 206, 300, 0],
        [1, "fod", 1, 209, 301, 0],
        [1, "fod", 1, 204, 299, 0],
        [1, "fod", 1, 202, 301, 0],
        [1, "fod", 1, 199, 301, 0],
        [1, "fod", 1, 222, 282, 0],
        [1, "fod", 1, 207, 301, 0],
        [1, "fod", 1, 197, 301, 0],
        [1, "fod", 1, 215, 291, 0],
        [1, "fod", 1, 216, 286, 0],
        [1, "fod", 1, 214, 292, 0],
        [1, "fod", 1, 210, 289, 0],
        [1, "fod", 1, 208, 294, 0],
        [1, "fod", 1, 210, 298, 0],
        [1, "fod", 1, 212, 281, 0],
        [1, "fod", 1, 219, 278, 0],
        [1, "fod", 1, 219, 282, 0],
        [1, "fod", 1, 205, 286, 0],
        [1, "fod", 1, 202, 293, 0],
        [1, "fod", 1, 198, 295, 0],
        [1, "fod", 2, 213, 282, 0],
        [1, "fod", 2, 213, 291, 0],
        [1, "fod", 2, 216, 289, 0],
        [1, "fod", 2, 219, 289, 0],
        [1, "fod", 2, 218, 285, 0],
        [1, "fod", 2, 220, 283, 0],
        [1, "fod", 2, 211, 283, 0],
        [1, "fod", 2, 215, 281, 0],
        [1, "fod", 2, 217, 279, 0],
        [1, "fod", 2, 208, 290, 0],
        [1, "fod", 2, 211, 296, 0],
        [1, "fod", 2, 215, 294, 0],
        [1, "fod", 2, 212, 298, 0],
        [1, "fod", 2, 203, 294, 0],
        [1, "fod", 2, 204, 288, 0],
        [1, "fod", 2, 200, 294, 0],
        [1, "fod", 2, 198, 297, 0],
        [1, "fod", 2, 202, 299, 0],
        [1, "fod", 2, 200, 299, 0],
        [1, "fod", 2, 220, 300, 0],
        [1, "fod", 2, 220, 295, 0],
        [1, "fod", 2, 220, 292, 0],
        [1, "fod", 2, 219, 287, 0],
        [1, "fod", 2, 211, 288, 0],
        [1, "fod", 2, 213, 287, 0],
        [1, "fod", 2, 211, 289, 0],
        [1, "fod", 2, 212, 290, 0],
        [1, "fod", 2, 195, 296, 0],
        [1, "fod", 2, 196, 299, 0],
        [1, "fod", 2, 194, 300, 0],
        [1, "fod", 2, 195, 300, 0],
        [1, "fod", 2, 213, 279, 0],
        [1, "fod", 2, 211, 279, 0],
        [1, "fod", 0, 218, 290, 0],
        [1, "fod", 0, 212, 294, 0],
        [1, "fod", 1, 213, 295, 0],
        [1, "fod", 1, 217, 292, 0],
        [1, "fod", 1, 218, 288, 0],
        [1, "fod", 1, 210, 295, 0],
        [1, "fod", 1, 213, 292, 0],
        [1, "fod", 1, 212, 289, 0],
        [1, "fod", 1, 205, 295, 0],
        [1, "fod", 2, 206, 296, 0],
        [1, "fod", 2, 208, 296, 0],
        [1, "fod", 2, 221, 288, 0],
        [1, "fod", 2, 209, 299, 0],
        [1, "fod", 2, 211, 291, 0],
        [1, "fod", 1, 203, 275, 0],
        [1, "fod", 1, 204, 272, 0],
        [1, "fod", 2, 205, 273, 0],
        [1, "fod", 2, 204, 276, 0],
        [1, "fod", 2, 202, 276, 0],
        [1, "fod", 2, 199, 277, 0],
        [1, "fod", 2, 202, 273, 0],
        [1, "fod", 2, 199, 270, 0],
        [1, "fod", 2, 194, 274, 0],
        [1, "fod", 2, 194, 277, 0],
        [1, "fod", 1, 192, 274, 0],
        [1, "fod", 1, 194, 267, 0],
        [1, "fod", 2, 194, 265, 0],
        [1, "fod", 2, 190, 272, 0],
        [1, "fod", 2, 191, 275, 0],
        [1, "fod", 2, 195, 274, 0],
        [1, "fod", 2, 200, 271, 0],
        [1, "fod", 1, 168, 243, 0],
        [1, "fod", 1, 175, 240, 0],
        [1, "fod", 1, 169, 234, 0],
        [1, "fod", 1, 162, 235, 0],
        [1, "fod", 2, 169, 236, 0],
        [1, "fod", 2, 171, 234, 0],
        [1, "fod", 2, 165, 238, 0],
        [1, "fod", 2, 173, 241, 0],
        [1, "fod", 2, 174, 238, 0],
        [1, "fod", 2, 176, 240, 0],
        [1, "fod", 2, 169, 244, 0],
        [1, "fod", 2, 166, 243, 0],
        [1, "fod", 2, 162, 236, 0],
        [1, "fod", 2, 164, 235, 0],
        [1, "fod", 2, 162, 233, 0],
        [1, "fod", 2, 163, 236, 0],
        [1, "fod", 2, 174, 242, 0],
        [1, "fod", 2, 171, 243, 0],
        [1, "fod", 1, 194, 206, 0],
        [1, "fod", 1, 190, 214, 0],
        [1, "fod", 1, 186, 206, 0],
        [1, "fod", 1, 197, 207, 0],
        [1, "fod", 2, 196, 208, 0],
        [1, "fod", 2, 198, 206, 0],
        [1, "fod", 2, 198, 208, 0],
        [1, "fod", 2, 194, 204, 0],
        [1, "fod", 2, 187, 206, 0],
        [1, "fod", 2, 186, 204, 0],
        [1, "fod", 2, 189, 214, 0],
        [1, "fod", 2, 189, 213, 0],
        [1, "fod", 2, 193, 215, 0],
        [1, "fod", 2, 194, 214, 0],
        [1, "fod", 2, 187, 215, 0],
        [1, "fod", 2, 193, 209, 0],
        [1, "fod", 2, 189, 211, 0],
        [1, "fod", 2, 187, 209, 0],
        [1, "fod", 2, 187, 207, 0],
        [1, "fod", 2, 191, 205, 0],
        [1, "fod", 2, 189, 203, 0],
        [1, "cs", 2, 224, 176, 1],
        [1, "cs", 0, 224, 177, 1],
        [1, "cs", 3, 224, 178, 1],
        [1, "cs", 2, 224, 179, 1],
        [1, "cs", 1, 224, 180, 1],
        [1, "cs", 2, 224, 181, 1],
        [1, "cs", 0, 224, 182, 1],
        [1, "cs", 2, 224, 183, 1],
        [1, "cs", 0, 224, 184, 1],
        [1, "cs", 3, 224, 185, 1],
        [1, "cs", 2, 224, 186, 1],
        [1, "cs", 0, 224, 187, 1],
        [1, "cs", 2, 224, 188, 1],
        [1, "cs", 0, 224, 189, 1],
        [1, "cs", 1, 224, 190, 1],
        [1, "cs", 2, 224, 191, 1],
        [1, "cs", 0, 224, 192, 1],
        [1, "cs", 2, 224, 193, 1],
        [1, "cs", 2, 224, 194, 1],
        [1, "cs", 1, 224, 195, 1],
        [1, "cs", 2, 224, 196, 1],
        [1, "cs", 0, 224, 197, 1],
        [1, "cs", 3, 224, 198, 1],
        [1, "cs", 2, 224, 199, 1],
        [1, "cs", 1, 224, 200, 1],
        [1, "cs", 2, 224, 201, 1],
        [1, "cs", 3, 224, 202, 1],
        [1, "cs", 0, 224, 203, 1],
        [1, "cs", 1, 224, 204, 1],
        [1, "cs", 2, 224, 205, 1],
        [1, "cs", 0, 224, 206, 1],
        [1, "cs", 1, 224, 207, 1],
        [1, "cs", 3, 224, 208, 1],
        [1, "cs", 2, 224, 209, 1],
        [1, "cs", 2, 224, 210, 1],
        [1, "cs", 0, 223, 211, 1],
        [1, "cs", 1, 224, 211, 1],
        [1, "cs", 2, 224, 212, 1],
        [1, "cs", 2, 224, 213, 1],
        [1, "cs", 1, 224, 214, 1],
        [1, "cs", 3, 224, 215, 1],
        [1, "cs", 0, 224, 216, 1],
        [1, "cs", 1, 224, 217, 1],
        [1, "cs", 2, 224, 218, 1],
        [1, "cs", 3, 224, 219, 1],
        [1, "cs", 0, 223, 215, 1],
        [1, "cs", 2, 223, 214, 1],
        [1, "cs", 2, 223, 212, 1],
        [1, "cs", 2, 223, 216, 1],
        [1, "cs", 3, 223, 217, 1],
        [1, "cs", 0, 223, 218, 1],
        [1, "cs", 0, 224, 220, 1],
        [1, "cs", 0, 224, 222, 1],
        [1, "cs", 0, 223, 209, 1],
        [1, "cs", 0, 223, 205, 1],
        [1, "cs", 2, 224, 221, 1],
        [1, "cs", 2, 223, 219, 1],
        [1, "cs", 2, 223, 220, 1],
        [1, "cs", 2, 223, 213, 1],
        [1, "cs", 2, 223, 210, 1],
        [1, "cs", 1, 223, 178, 1],
        [1, "cs", 3, 223, 179, 1],
        [1, "cs", 3, 223, 181, 1],
        [1, "cs", 3, 223, 182, 1],
        [1, "cs", 1, 223, 185, 1],
        [1, "cs", 2, 223, 184, 1],
        [1, "cs", 2, 223, 186, 1],
        [1, "cs", 0, 223, 180, 1],
        [1, "cs", 0, 223, 183, 1],
        [1, "cs", 2, 223, 187, 1],
        [1, "cs", 1, 223, 188, 1],
        [1, "cs", 2, 223, 189, 1],
        [1, "cs", 2, 223, 190, 1],
        [1, "cs", 3, 223, 191, 1],
        [1, "cs", 1, 223, 192, 1],
        [1, "cs", 2, 223, 193, 1],
        [1, "cs", 2, 223, 194, 1],
        [1, "cs", 3, 223, 195, 1],
        [1, "cs", 1, 223, 196, 1],
        [1, "cs", 2, 223, 197, 1],
        [1, "cs", 2, 223, 199, 1],
        [1, "cs", 2, 223, 198, 1],
        [1, "cs", 0, 223, 200, 1],
        [1, "cs", 2, 223, 201, 1],
        [1, "cs", 0, 223, 202, 1],
        [1, "cs", 3, 223, 203, 1],
        [1, "cs", 3, 223, 204, 1],
        [1, "cs", 3, 223, 206, 1],
        [1, "cs", 3, 223, 207, 1],
        [1, "cs", 3, 223, 208, 1],
        [1, "cs", 2, 223, 221, 1],
        [1, "cs", 2, 223, 222, 1],
        [1, "cs", 0, 223, 224, 1],
        [1, "cs", 0, 224, 228, 1],
        [1, "cs", 0, 224, 230, 1],
        [1, "cs", 0, 223, 234, 1],
        [1, "cs", 2, 223, 223, 1],
        [1, "cs", 2, 224, 223, 1],
        [1, "cs", 2, 224, 224, 1],
        [1, "cs", 2, 224, 225, 1],
        [1, "cs", 1, 223, 226, 1],
        [1, "cs", 1, 224, 231, 1],
        [1, "cs", 1, 223, 232, 1],
        [1, "cs", 3, 223, 225, 1],
        [1, "cs", 3, 224, 226, 1],
        [1, "cs", 3, 223, 227, 1],
        [1, "cs", 3, 224, 227, 1],
        [1, "cs", 3, 223, 229, 1],
        [1, "cs", 3, 223, 228, 1],
        [1, "cs", 3, 224, 229, 1],
        [1, "cs", 3, 223, 230, 1],
        [1, "cs", 3, 223, 231, 1],
        [1, "cs", 3, 224, 232, 1],
        [1, "cs", 3, 224, 233, 1],
        [1, "cs", 3, 223, 233, 1],
        [1, "cs", 3, 224, 234, 1],
        [1, "cs", 3, 224, 235, 1],
        [1, "cs", 3, 223, 235, 1],
        [1, "cs", 1, 224, 236, 1],
        [1, "cs", 2, 223, 236, 1],
        [1, "cs", 2, 223, 237, 1],
        [1, "cs", 3, 224, 237, 1],
        [1, "cs", 3, 224, 238, 1],
        [1, "cs", 0, 224, 239, 1],
        [1, "cs", 1, 223, 241, 1],
        [1, "cs", 0, 224, 243, 1],
        [1, "cs", 0, 223, 245, 1],
        [1, "cs", 0, 224, 247, 1],
        [1, "cs", 2, 223, 240, 1],
        [1, "cs", 2, 223, 239, 1],
        [1, "cs", 2, 224, 240, 1],
        [1, "cs", 2, 224, 241, 1],
        [1, "cs", 2, 224, 242, 1],
        [1, "cs", 2, 223, 242, 1],
        [1, "cs", 2, 223, 243, 1],
        [1, "cs", 2, 223, 244, 1],
        [1, "cs", 2, 224, 244, 1],
        [1, "cs", 2, 224, 245, 1],
        [1, "cs", 2, 224, 246, 1],
        [1, "cs", 3, 223, 238, 1],
        [1, "cs", 3, 223, 246, 1],
        [1, "cs", 2, 223, 247, 1],
        [1, "cs", 1, 223, 249, 1],
        [1, "cs", 1, 224, 253, 1],
        [1, "cs", 1, 223, 256, 1],
        [1, "cs", 0, 223, 254, 1],
        [1, "cs", 0, 224, 250, 1],
        [1, "cs", 3, 223, 248, 1],
        [1, "cs", 3, 223, 250, 1],
        [1, "cs", 3, 223, 252, 1],
        [1, "cs", 3, 223, 255, 1],
        [1, "cs", 3, 223, 257, 1],
        [1, "cs", 2, 224, 248, 1],
        [1, "cs", 2, 224, 249, 1],
        [1, "cs", 2, 223, 251, 1],
        [1, "cs", 2, 224, 251, 1],
        [1, "cs", 2, 224, 252, 1],
        [1, "cs", 2, 223, 253, 1],
        [1, "cs", 2, 224, 254, 1],
        [1, "cs", 2, 224, 255, 1],
        [1, "cs", 2, 224, 256, 1],
        [1, "cs", 2, 224, 257, 1],
        [1, "cs", 0, 224, 258, 1],
        [1, "cs", 0, 223, 261, 1],
        [1, "cs", 0, 224, 263, 1],
        [1, "cs", 0, 224, 266, 1],
        [1, "cs", 0, 224, 272, 1],
        [1, "cs", 0, 223, 270, 1],
        [1, "cs", 0, 223, 275, 1],
        [1, "cs", 1, 223, 259, 1],
        [1, "cs", 1, 223, 264, 1],
        [1, "cs", 1, 223, 268, 1],
        [1, "cs", 1, 224, 274, 1],
        [1, "cs", 2, 223, 258, 1],
        [1, "cs", 2, 223, 260, 1],
        [1, "cs", 2, 223, 263, 1],
        [1, "cs", 2, 223, 265, 1],
        [1, "cs", 2, 223, 267, 1],
        [1, "cs", 2, 223, 271, 1],
        [1, "cs", 2, 223, 273, 1],
        [1, "cs", 3, 223, 262, 1],
        [1, "cs", 3, 223, 266, 1],
        [1, "cs", 3, 223, 269, 1],
        [1, "cs", 3, 223, 272, 1],
        [1, "cs", 3, 223, 274, 1],
        [1, "cs", 3, 224, 275, 1],
        [1, "cs", 3, 224, 273, 1],
        [1, "cs", 3, 224, 271, 1],
        [1, "cs", 3, 224, 270, 1],
        [1, "cs", 3, 224, 269, 1],
        [1, "cs", 3, 224, 268, 1],
        [1, "cs", 3, 224, 267, 1],
        [1, "cs", 3, 224, 265, 1],
        [1, "cs", 3, 224, 264, 1],
        [1, "cs", 3, 224, 262, 1],
        [1, "cs", 3, 224, 261, 1],
        [1, "cs", 3, 224, 260, 1],
        [1, "cs", 3, 224, 259, 1],
        [1, "cs", 2, 223, 276, 1],
        [1, "cs", 1, 224, 276, 1],
        [1, "cs", 1, 224, 280, 1],
        [1, "cs", 1, 223, 281, 1],
        [1, "cs", 1, 224, 286, 1],
        [1, "cs", 0, 223, 280, 1],
        [1, "cs", 0, 223, 284, 1],
        [1, "cs", 0, 224, 288, 1],
        [1, "cs", 0, 224, 279, 1],
        [1, "cs", 2, 223, 277, 1],
        [1, "cs", 2, 224, 277, 1],
        [1, "cs", 2, 224, 278, 1],
        [1, "cs", 2, 224, 281, 1],
        [1, "cs", 2, 224, 283, 1],
        [1, "cs", 2, 224, 282, 1],
        [1, "cs", 2, 224, 284, 1],
        [1, "cs", 2, 224, 285, 1],
        [1, "cs", 2, 224, 287, 1],
        [1, "cs", 2, 223, 287, 1],
        [1, "cs", 2, 223, 285, 1],
        [1, "cs", 2, 223, 283, 1],
        [1, "cs", 2, 223, 279, 1],
        [1, "cs", 3, 223, 278, 1],
        [1, "cs", 3, 223, 282, 1],
        [1, "cs", 3, 223, 286, 1],
        [1, "cs", 3, 223, 289, 1],
        [1, "cs", 3, 224, 289, 1],
        [1, "cs", 2, 223, 288, 1],
        [1, "cs", 2, 224, 290, 1],
        [1, "cs", 1, 223, 290, 1],
        [1, "cs", 0, 224, 292, 1],
        [1, "cs", 0, 223, 294, 1],
        [1, "cs", 0, 224, 297, 1],
        [1, "cs", 0, 223, 299, 1],
        [1, "cs", 2, 223, 291, 1],
        [1, "cs", 2, 224, 291, 1],
        [1, "cs", 2, 223, 292, 1],
        [1, "cs", 2, 223, 293, 1],
        [1, "cs", 2, 224, 293, 1],
        [1, "cs", 2, 224, 294, 1],
        [1, "cs", 1, 224, 295, 1],
        [1, "cs", 2, 223, 295, 1],
        [1, "cs", 2, 223, 296, 1],
        [1, "cs", 2, 224, 296, 1],
        [1, "cs", 2, 223, 297, 1],
        [1, "cs", 2, 223, 298, 1],
        [1, "cs", 2, 224, 298, 1],
        [1, "cs", 2, 224, 299, 1],
        [1, "cs", 2, 223, 300, 1],
        [1, "cs", 1, 224, 300, 1],
        [1, "cs", 0, 223, 301, 1],
        [1, "cs", 0, 224, 302, 1],
        [1, "cs", 0, 224, 304, 1],
        [1, "cs", 3, 224, 301, 1],
        [1, "cs", 3, 224, 303, 1],
        [1, "cs", 0, 221, 303, 1],
        [1, "cs", 0, 219, 304, 1],
        [1, "cs", 1, 222, 304, 1],
        [1, "cs", 1, 222, 302, 1],
        [1, "cs", 2, 223, 302, 1],
        [1, "cs", 2, 223, 303, 1],
        [1, "cs", 2, 222, 303, 1],
        [1, "cs", 2, 223, 304, 1],
        [1, "cs", 2, 221, 304, 1],
        [1, "cs", 2, 220, 304, 1],
        [1, "cs", 2, 220, 303, 1],
        [1, "cs", 2, 220, 302, 1],
        [1, "cs", 2, 221, 302, 1],
        [1, "cs", 2, 219, 303, 1],
        [1, "cs", 0, 217, 302, 1],
        [1, "cs", 0, 215, 304, 1],
        [1, "cs", 0, 214, 302, 1],
        [1, "cs", 1, 218, 302, 1],
        [1, "cs", 1, 217, 304, 1],
        [1, "cs", 1, 215, 302, 1],
        [1, "cs", 2, 219, 302, 1],
        [1, "cs", 2, 218, 303, 1],
        [1, "cs", 2, 218, 304, 1],
        [1, "cs", 2, 217, 303, 1],
        [1, "cs", 2, 216, 304, 1],
        [1, "cs", 2, 215, 303, 1],
        [1, "cs", 2, 216, 303, 1],
        [1, "cs", 2, 216, 302, 1],
        [1, "cs", 2, 214, 303, 1],
        [1, "cs", 2, 214, 304, 1],
        [1, "cs", 0, 212, 302, 1],
        [1, "cs", 0, 210, 303, 1],
        [1, "cs", 0, 212, 304, 1],
        [1, "cs", 0, 208, 304, 1],
        [1, "cs", 1, 210, 302, 1],
        [1, "cs", 1, 208, 303, 1],
        [1, "cs", 2, 213, 302, 1],
        [1, "cs", 2, 213, 303, 1],
        [1, "cs", 2, 213, 304, 1],
        [1, "cs", 2, 212, 303, 1],
        [1, "cs", 2, 211, 304, 1],
        [1, "cs", 2, 211, 303, 1],
        [1, "cs", 2, 211, 302, 1],
        [1, "cs", 2, 209, 302, 1],
        [1, "cs", 2, 209, 303, 1],
        [1, "cs", 2, 209, 304, 1],
        [1, "cs", 2, 210, 304, 1],
        [1, "cs", 2, 208, 302, 1],
        [1, "cs", 0, 206, 303, 1],
        [1, "cs", 0, 203, 304, 1],
        [1, "cs", 0, 200, 303, 1],
        [1, "cs", 0, 199, 304, 1],
        [1, "cs", 0, 195, 304, 1],
        [1, "cs", 0, 191, 303, 1],
        [1, "cs", 0, 193, 304, 1],
        [1, "cs", 0, 189, 304, 1],
        [1, "cs", 1, 204, 303, 1],
        [1, "cs", 0, 197, 302, 1],
        [1, "cs", 0, 202, 302, 1],
        [1, "cs", 0, 188, 302, 1],
        [1, "cs", 0, 194, 302, 1],
        [1, "cs", 1, 197, 303, 1],
        [1, "cs", 1, 201, 304, 1],
        [1, "cs", 1, 192, 302, 1],
        [1, "cs", 1, 189, 303, 1],
        [1, "cs", 1, 205, 302, 1],
        [1, "cs", 1, 188, 304, 1],
        [1, "cs", 2, 207, 302, 1],
        [1, "cs", 2, 207, 303, 1],
        [1, "cs", 2, 207, 304, 1],
        [1, "cs", 2, 206, 304, 1],
        [1, "cs", 2, 206, 302, 1],
        [1, "cs", 2, 205, 303, 1],
        [1, "cs", 2, 204, 304, 1],
        [1, "cs", 2, 205, 304, 1],
        [1, "cs", 2, 204, 302, 1],
        [1, "cs", 2, 203, 302, 1],
        [1, "cs", 2, 203, 303, 1],
        [1, "cs", 2, 202, 303, 1],
        [1, "cs", 2, 201, 303, 1],
        [1, "cs", 2, 201, 302, 1],
        [1, "cs", 2, 200, 302, 1],
        [1, "cs", 2, 199, 302, 1],
        [1, "cs", 2, 198, 303, 1],
        [1, "cs", 2, 198, 302, 1],
        [1, "cs", 2, 199, 303, 1],
        [1, "cs", 2, 200, 304, 1],
        [1, "cs", 2, 202, 304, 1],
        [1, "cs", 2, 197, 304, 1],
        [1, "cs", 2, 198, 304, 1],
        [1, "cs", 2, 196, 304, 1],
        [1, "cs", 2, 196, 303, 1],
        [1, "cs", 2, 196, 302, 1],
        [1, "cs", 2, 195, 302, 1],
        [1, "cs", 2, 195, 303, 1],
        [1, "cs", 2, 194, 303, 1],
        [1, "cs", 2, 194, 304, 1],
        [1, "cs", 2, 193, 303, 1],
        [1, "cs", 2, 193, 302, 1],
        [1, "cs", 2, 192, 303, 1],
        [1, "cs", 2, 192, 304, 1],
        [1, "cs", 2, 191, 304, 1],
        [1, "cs", 2, 190, 304, 1],
        [1, "cs", 2, 190, 303, 1],
        [1, "cs", 2, 189, 302, 1],
        [1, "cs", 2, 190, 302, 1],
        [1, "cs", 2, 191, 302, 1],
        [1, "cs", 2, 188, 303, 1],
        [1, "cs", 0, 186, 303, 1],
        [1, "cs", 0, 183, 304, 1],
        [1, "cs", 0, 184, 302, 1],
        [1, "cs", 0, 181, 302, 1],
        [1, "cs", 0, 176, 302, 1],
        [1, "cs", 0, 178, 303, 1],
        [1, "cs", 0, 173, 304, 1],
        [1, "cs", 0, 170, 303, 1],
        [1, "cs", 0, 172, 302, 1],
        [1, "cs", 1, 182, 303, 1],
        [1, "cs", 1, 178, 304, 1],
        [1, "cs", 1, 175, 304, 1],
        [1, "cs", 1, 173, 302, 1],
        [1, "cs", 1, 185, 304, 1],
        [1, "cs", 1, 169, 304, 1],
        [1, "cs", 3, 187, 304, 1],
        [1, "cs", 3, 186, 304, 1],
        [1, "cs", 3, 187, 303, 1],
        [1, "cs", 3, 187, 302, 1],
        [1, "cs", 3, 186, 302, 1],
        [1, "cs", 3, 185, 302, 1],
        [1, "cs", 3, 185, 303, 1],
        [1, "cs", 3, 184, 303, 1],
        [1, "cs", 3, 183, 303, 1],
        [1, "cs", 3, 183, 302, 1],
        [1, "cs", 3, 182, 302, 1],
        [1, "cs", 3, 184, 304, 1],
        [1, "cs", 3, 182, 304, 1],
        [1, "cs", 3, 181, 304, 1],
        [1, "cs", 3, 179, 304, 1],
        [1, "cs", 3, 180, 304, 1],
        [1, "cs", 3, 181, 303, 1],
        [1, "cs", 3, 180, 303, 1],
        [1, "cs", 3, 179, 303, 1],
        [1, "cs", 3, 180, 302, 1],
        [1, "cs", 3, 179, 302, 1],
        [1, "cs", 3, 178, 302, 1],
        [1, "cs", 3, 177, 302, 1],
        [1, "cs", 3, 177, 304, 1],
        [1, "cs", 3, 177, 303, 1],
        [1, "cs", 3, 176, 303, 1],
        [1, "cs", 3, 176, 304, 1],
        [1, "cs", 3, 174, 304, 1],
        [1, "cs", 3, 175, 303, 1],
        [1, "cs", 3, 174, 303, 1],
        [1, "cs", 3, 173, 303, 1],
        [1, "cs", 3, 172, 303, 1],
        [1, "cs", 3, 171, 303, 1],
        [1, "cs", 3, 170, 304, 1],
        [1, "cs", 3, 171, 304, 1],
        [1, "cs", 3, 172, 304, 1],
        [1, "cs", 3, 174, 302, 1],
        [1, "cs", 3, 175, 302, 1],
        [1, "cs", 3, 171, 302, 1],
        [1, "cs", 3, 170, 302, 1],
        [1, "cs", 3, 169, 302, 1],
        [1, "cs", 3, 169, 303, 1],
        [1, "cs", 0, 168, 302, 1],
        [1, "cs", 0, 166, 303, 1],
        [1, "cs", 0, 163, 304, 1],
        [1, "cs", 0, 161, 302, 1],
        [1, "cs", 0, 159, 303, 1],
        [1, "cs", 0, 152, 304, 1],
        [1, "cs", 0, 155, 303, 1],
        [1, "cs", 1, 164, 303, 1],
        [1, "cs", 1, 162, 303, 1],
        [1, "cs", 1, 158, 304, 1],
        [1, "cs", 1, 156, 302, 1],
        [1, "cs", 1, 153, 302, 1],
        [1, "cs", 1, 154, 304, 1],
        [1, "cs", 2, 168, 304, 1],
        [1, "cs", 2, 168, 303, 1],
        [1, "cs", 2, 167, 303, 1],
        [1, "cs", 2, 167, 304, 1],
        [1, "cs", 2, 166, 304, 1],
        [1, "cs", 2, 165, 304, 1],
        [1, "cs", 2, 164, 304, 1],
        [1, "cs", 2, 165, 303, 1],
        [1, "cs", 2, 167, 302, 1],
        [1, "cs", 2, 166, 302, 1],
        [1, "cs", 2, 165, 302, 1],
        [1, "cs", 2, 164, 302, 1],
        [1, "cs", 2, 163, 302, 1],
        [1, "cs", 2, 162, 302, 1],
        [1, "cs", 2, 163, 303, 1],
        [1, "cs", 2, 162, 304, 1],
        [1, "cs", 2, 160, 304, 1],
        [1, "cs", 2, 159, 304, 1],
        [1, "cs", 2, 161, 304, 1],
        [1, "cs", 2, 161, 303, 1],
        [1, "cs", 2, 160, 303, 1],
        [1, "cs", 2, 160, 302, 1],
        [1, "cs", 2, 158, 302, 1],
        [1, "cs", 2, 159, 302, 1],
        [1, "cs", 2, 157, 302, 1],
        [1, "cs", 2, 156, 303, 1],
        [1, "cs", 2, 157, 303, 1],
        [1, "cs", 2, 158, 303, 1],
        [1, "cs", 2, 157, 304, 1],
        [1, "cs", 2, 156, 304, 1],
        [1, "cs", 2, 155, 304, 1],
        [1, "cs", 2, 153, 304, 1],
        [1, "cs", 2, 153, 303, 1],
        [1, "cs", 2, 154, 303, 1],
        [1, "cs", 2, 154, 302, 1],
        [1, "cs", 2, 155, 302, 1],
        [1, "cs", 2, 152, 303, 1],
        [1, "cs", 2, 152, 302, 1],
        [1, "cs", 0, 151, 302, 1],
        [1, "cs", 0, 149, 303, 1],
        [1, "cs", 0, 145, 304, 1],
        [1, "cs", 0, 147, 302, 1],
        [1, "cs", 0, 143, 303, 1],
        [1, "cs", 0, 141, 303, 1],
        [1, "cs", 1, 147, 304, 1],
        [1, "cs", 1, 145, 302, 1],
        [1, "cs", 1, 142, 302, 1],
        [1, "cs", 1, 150, 304, 1],
        [1, "cs", 2, 151, 304, 1],
        [1, "cs", 2, 151, 303, 1],
        [1, "cs", 2, 150, 303, 1],
        [1, "cs", 2, 150, 302, 1],
        [1, "cs", 2, 148, 302, 1],
        [1, "cs", 2, 146, 302, 1],
        [1, "cs", 2, 144, 302, 1],
        [1, "cs", 2, 141, 302, 1],
        [1, "cs", 2, 141, 304, 1],
        [1, "cs", 2, 142, 304, 1],
        [1, "cs", 2, 142, 303, 1],
        [1, "cs", 2, 143, 304, 1],
        [1, "cs", 2, 144, 304, 1],
        [1, "cs", 2, 144, 303, 1],
        [1, "cs", 2, 148, 304, 1],
        [1, "cs", 2, 148, 303, 1],
        [1, "cs", 2, 146, 303, 1],
        [1, "cs", 2, 145, 303, 1],
        [1, "cs", 2, 147, 303, 1],
        [1, "cs", 2, 146, 304, 1],
        [1, "cs", 2, 149, 304, 1],
        [1, "cs", 3, 149, 302, 1],
        [1, "cs", 3, 143, 302, 1],
        [1, "cs", 0, 139, 304, 1],
        [1, "cs", 0, 138, 302, 1],
        [1, "cs", 1, 139, 302, 1],
        [1, "cs", 2, 140, 302, 1],
        [1, "cs", 2, 140, 303, 1],
        [1, "cs", 2, 139, 303, 1],
        [1, "cs", 2, 138, 303, 1],
        [1, "cs", 2, 138, 304, 1],
        [1, "cs", 2, 140, 304, 1],
        [1, "cs", 0, 137, 304, 1],
        [1, "cs", 0, 135, 303, 1],
        [1, "cs", 0, 133, 304, 1],
        [1, "cs", 1, 135, 304, 1],
        [1, "cs", 1, 136, 302, 1],
        [1, "cs", 2, 137, 302, 1],
        [1, "cs", 2, 136, 303, 1],
        [1, "cs", 2, 137, 303, 1],
        [1, "cs", 2, 136, 304, 1],
        [1, "cs", 2, 134, 304, 1],
        [1, "cs", 2, 134, 303, 1],
        [1, "cs", 2, 133, 303, 1],
        [1, "cs", 2, 132, 304, 1],
        [1, "cs", 0, 131, 302, 1],
        [1, "cs", 0, 134, 302, 1],
        [1, "cs", 0, 129, 304, 1],
        [1, "cs", 1, 130, 303, 1],
        [1, "cs", 1, 132, 302, 1],
        [1, "cs", 2, 135, 302, 1],
        [1, "cs", 2, 133, 302, 1],
        [1, "cs", 2, 132, 303, 1],
        [1, "cs", 2, 131, 303, 1],
        [1, "cs", 2, 130, 304, 1],
        [1, "cs", 2, 131, 304, 1],
        [1, "cs", 2, 128, 304, 1],
        [1, "cs", 2, 129, 303, 1],
        [1, "cs", 2, 130, 302, 1],
        [1, "cs", 3, 127, 304, 1],
        [1, "cs", 2, 132, 301, 1],
        [1, "cs", 2, 133, 301, 1],
        [1, "cs", 2, 134, 301, 1],
        [1, "cs", 2, 135, 301, 1],
        [1, "cs", 3, 131, 301, 1],
        [1, "cs", 3, 136, 301, 1],
        [1, "cs", 3, 136, 178, 1],
        [1, "cs", 0, 136, 183, 1],
        [1, "cs", 2, 136, 182, 1],
        [1, "cs", 1, 136, 181, 1],
        [1, "cs", 0, 136, 179, 1],
        [1, "cs", 3, 136, 180, 1],
        [1, "cs", 2, 135, 183, 1],
        [1, "cs", 1, 135, 182, 1],
        [1, "cs", 3, 135, 180, 1],
        [1, "cs", 0, 134, 183, 1],
        [1, "cs", 2, 133, 183, 1],
        [1, "cs", 3, 133, 182, 1],
        [1, "cs", 1, 132, 183, 1],
        [1, "cs", 3, 131, 183, 1],
        [1, "cs", 2, 135, 181, 1],
        [1, "cs", 2, 134, 182, 1],
        [1, "cs", 3, 134, 181, 1],
        [1, "fod", 0, 213, 301, 0],
        [1, "fod", 0, 204, 301, 0],
        [1, "fod", 1, 196, 288, 0],
        [1, "fod", 1, 198, 283, 0],
        [1, "fod", 1, 190, 288, 0],
        [1, "fod", 1, 189, 296, 0],
        [1, "fod", 1, 193, 293, 0],
        [1, "fod", 1, 183, 292, 0],
        [1, "fod", 1, 186, 287, 0],
        [1, "fod", 1, 190, 290, 0],
        [1, "fod", 1, 218, 271, 0],
        [1, "fod", 1, 220, 266, 0],
        [1, "fod", 1, 211, 268, 0],
        [1, "fod", 1, 210, 274, 0],
        [1, "fod", 1, 205, 263, 0],
        [1, "fod", 1, 216, 258, 0],
        [1, "fod", 2, 201, 294, 0],
        [1, "fod", 2, 190, 296, 0],
        [1, "fod", 2, 188, 299, 0],
        [1, "fod", 2, 186, 297, 0],
        [1, "fod", 2, 188, 296, 0],
        [1, "fod", 2, 189, 291, 0],
        [1, "fod", 2, 189, 286, 0],
        [1, "fod", 2, 191, 286, 0],
        [1, "fod", 2, 197, 286, 0],
        [1, "fod", 2, 195, 290, 0],
        [1, "fod", 2, 186, 288, 0],
        [1, "fod", 2, 184, 290, 0],
        [1, "fod", 2, 183, 293, 0],
        [1, "fod", 2, 198, 286, 0],
        [1, "fod", 2, 196, 283, 0],
        [1, "fod", 2, 196, 281, 0],
        [1, "fod", 2, 201, 280, 0],
        [1, "fod", 2, 205, 287, 0],
        [1, "fod", 2, 209, 283, 0],
        [1, "fod", 2, 212, 280, 0],
        [1, "fod", 2, 209, 277, 0],
        [1, "fod", 2, 217, 278, 0],
        [1, "fod", 2, 219, 275, 0],
        [1, "fod", 2, 220, 271, 0],
        [1, "fod", 2, 220, 267, 0],
        [1, "fod", 2, 217, 265, 0],
        [1, "fod", 2, 213, 267, 0],
        [1, "fod", 2, 208, 264, 0],
        [1, "fod", 2, 206, 261, 0],
        [1, "fod", 2, 203, 265, 0],
        [1, "fod", 2, 204, 270, 0],
        [1, "fod", 2, 196, 267, 0],
        [1, "fod", 2, 214, 261, 0],
        [1, "fod", 2, 211, 260, 0],
        [1, "fod", 2, 218, 256, 0],
        [1, "fod", 2, 219, 262, 0],
        [1, "fod", 2, 220, 253, 0],
        [1, "fod", 2, 211, 257, 0],
        [1, "la", 3, 198, 27, 1],
        [1, "la", 3, 201, 30, 1],
        [1, "la", 3, 200, 32, 1],
        [1, "la", 3, 198, 33, 1],
        [1, "la", 3, 196, 33, 1],
        [1, "la", 3, 194, 32, 1],
        [1, "la", 3, 194, 28, 1],
        [1, "la", 0, 200, 28, 1],
        [1, "la", 0, 193, 30, 1],
        [1, "la", 3, 196, 27, 1],
        [1, "la", 3, 199, 30, 1],
        [1, "la", 3, 197, 29, 1],
        [1, "la", 3, 195, 30, 1],
        [1, "la", 3, 197, 31, 1],
        [1, "la", 2, 201, 33, 1],
        [1, "la", 4, 202, 34, 1],
        [1, "la", 4, 202, 35, 1],
        [1, "la", 4, 203, 36, 1],
        [1, "la", 4, 204, 37, 1],
        [1, "la", 2, 205, 38, 1],
        [1, "la", 5, 205, 39, 1],
        [1, "la", 5, 205, 40, 1],
        [1, "la", 2, 206, 41, 1],
        [1, "la", 1, 207, 42, 1],
        [1, "la", 1, 205, 41, 1],
        [1, "la", 4, 208, 43, 1],
        [1, "la", 4, 209, 43, 1],
        [1, "la", 1, 210, 43, 1],
        [1, "la", 2, 211, 43, 1],
        [1, "la", 5, 212, 43, 1],
        [1, "la", 4, 213, 44, 1],
        [1, "la", 3, 223, 54, 1],
        [1, "la", 3, 221, 53, 1],
        [1, "la", 3, 219, 53, 1],
        [1, "la", 4, 218, 52, 1],
        [1, "la", 4, 217, 51, 1],
        [1, "la", 4, 216, 51, 1],
        [1, "la", 1, 215, 50, 1],
        [1, "la", 4, 212, 46, 1],
        [1, "la", 1, 210, 44, 1],
        [1, "la", 3, 206, 50, 1],
        [1, "re", 0, 217, 24, 1],
        [1, "re", 0, 207, 16, 1],
        [1, "de", 44, 54, 14, 0],
        [1, "de", 44, 53, 13, 0],
        [1, "de", 44, 51, 16, 0],
        [1, "de", 44, 49, 13, 0],
        [1, "de", 44, 48, 14, 0],
        [1, "de", 21, 78, 293, 0],
        [1, "cs", 0, 221, 8, 1],
        [1, "cs", 0, 224, 9, 1],
        [1, "cs", 1, 223, 8, 1],
        [1, "cs", 2, 224, 8, 1],
        [1, "cs", 2, 222, 8, 1],
        [1, "cs", 0, 224, 6, 1],
        [1, "cs", 0, 222, 5, 1],
        [1, "cs", 0, 219, 7, 1],
        [1, "cs", 1, 220, 5, 1],
        [1, "cs", 1, 217, 7, 1],
        [1, "cs", 2, 224, 5, 1],
        [1, "cs", 2, 223, 5, 1],
        [1, "cs", 2, 224, 7, 1],
        [1, "cs", 2, 223, 7, 1],
        [1, "cs", 2, 223, 6, 1],
        [1, "cs", 2, 222, 6, 1],
        [1, "cs", 2, 222, 7, 1],
        [1, "cs", 2, 221, 7, 1],
        [1, "cs", 2, 221, 6, 1],
        [1, "cs", 2, 221, 5, 1],
        [1, "cs", 2, 220, 6, 1],
        [1, "cs", 2, 220, 7, 1],
        [1, "cs", 2, 220, 8, 1],
        [1, "cs", 2, 219, 8, 1],
        [1, "cs", 2, 219, 6, 1],
        [1, "cs", 2, 219, 5, 1],
        [1, "cs", 0, 218, 5, 1],
        [1, "cs", 0, 216, 8, 1],
        [1, "cs", 2, 218, 8, 1],
        [1, "cs", 2, 217, 8, 1],
        [1, "cs", 2, 218, 7, 1],
        [1, "cs", 2, 218, 6, 1],
        [1, "cs", 2, 217, 6, 1],
        [1, "cs", 2, 217, 5, 1],
        [1, "cs", 1, 215, 6, 1],
        [1, "cs", 1, 213, 5, 1],
        [1, "cs", 0, 214, 6, 1],
        [1, "cs", 0, 216, 5, 1],
        [1, "cs", 0, 213, 8, 1],
        [1, "cs", 0, 211, 7, 1],
        [1, "cs", 0, 209, 5, 1],
        [1, "cs", 0, 208, 7, 1],
        [1, "cs", 0, 207, 8, 1],
        [1, "cs", 2, 216, 6, 1],
        [1, "cs", 2, 216, 7, 1],
        [1, "cs", 2, 215, 7, 1],
        [1, "cs", 2, 215, 8, 1],
        [1, "cs", 2, 214, 8, 1],
        [1, "cs", 2, 214, 7, 1],
        [1, "cs", 2, 215, 5, 1],
        [1, "cs", 2, 214, 5, 1],
        [1, "cs", 2, 213, 6, 1],
        [1, "cs", 2, 213, 7, 1],
        [1, "cs", 2, 212, 7, 1],
        [1, "cs", 1, 211, 5, 1],
        [1, "cs", 1, 209, 8, 1],
        [1, "cs", 2, 212, 8, 1],
        [1, "cs", 2, 211, 8, 1],
        [1, "cs", 2, 210, 8, 1],
        [1, "cs", 2, 209, 7, 1],
        [1, "cs", 2, 210, 7, 1],
        [1, "cs", 2, 210, 6, 1],
        [1, "cs", 2, 212, 6, 1],
        [1, "cs", 2, 212, 5, 1],
        [1, "cs", 2, 211, 6, 1],
        [1, "cs", 2, 210, 5, 1],
        [1, "cs", 2, 209, 6, 1],
        [1, "cs", 2, 208, 6, 1],
        [1, "cs", 2, 208, 5, 1],
        [1, "cs", 2, 207, 7, 1],
        [1, "cs", 2, 207, 6, 1],
        [1, "cs", 2, 207, 5, 1],
        [1, "cs", 2, 206, 5, 1],
        [1, "cs", 2, 208, 8, 1],
        [1, "cs", 2, 206, 6, 1],
        [1, "cs", 0, 204, 8, 1],
        [1, "cs", 0, 205, 6, 1],
        [1, "cs", 0, 203, 5, 1],
        [1, "cs", 0, 202, 7, 1],
        [1, "cs", 0, 199, 8, 1],
        [1, "cs", 0, 200, 6, 1],
        [1, "cs", 0, 197, 6, 1],
        [1, "cs", 0, 195, 8, 1],
        [1, "cs", 0, 194, 6, 1],
        [1, "cs", 1, 202, 8, 1],
        [1, "cs", 1, 206, 7, 1],
        [1, "cs", 1, 201, 5, 1],
        [1, "cs", 1, 197, 8, 1],
        [1, "cs", 1, 192, 7, 1],
        [1, "cs", 1, 195, 5, 1],
        [1, "cs", 2, 205, 7, 1],
        [1, "cs", 2, 205, 8, 1],
        [1, "cs", 2, 206, 8, 1],
        [1, "cs", 2, 204, 7, 1],
        [1, "cs", 2, 204, 6, 1],
        [1, "cs", 2, 204, 5, 1],
        [1, "cs", 2, 205, 5, 1],
        [1, "cs", 2, 203, 6, 1],
        [1, "cs", 2, 203, 7, 1],
        [1, "cs", 2, 203, 8, 1],
        [1, "cs", 2, 201, 8, 1],
        [1, "cs", 2, 200, 8, 1],
        [1, "cs", 2, 200, 7, 1],
        [1, "cs", 2, 201, 7, 1],
        [1, "cs", 2, 201, 6, 1],
        [1, "cs", 2, 202, 5, 1],
        [1, "cs", 2, 202, 6, 1],
        [1, "cs", 2, 200, 5, 1],
        [1, "cs", 2, 199, 5, 1],
        [1, "cs", 2, 197, 5, 1],
        [1, "cs", 2, 196, 5, 1],
        [1, "cs", 2, 198, 5, 1],
        [1, "cs", 2, 198, 6, 1],
        [1, "cs", 2, 199, 6, 1],
        [1, "cs", 2, 199, 7, 1],
        [1, "cs", 2, 198, 7, 1],
        [1, "cs", 2, 198, 8, 1],
        [1, "cs", 2, 197, 7, 1],
        [1, "cs", 2, 196, 7, 1],
        [1, "cs", 2, 196, 8, 1],
        [1, "cs", 2, 196, 6, 1],
        [1, "cs", 2, 195, 6, 1],
        [1, "cs", 2, 195, 7, 1],
        [1, "cs", 2, 194, 7, 1],
        [1, "cs", 2, 193, 8, 1],
        [1, "cs", 2, 194, 8, 1],
        [1, "cs", 2, 193, 7, 1],
        [1, "cs", 2, 193, 6, 1],
        [1, "cs", 2, 193, 5, 1],
        [1, "cs", 2, 194, 5, 1],
        [1, "cs", 0, 192, 5, 1],
        [1, "cs", 0, 191, 8, 1],
        [1, "cs", 0, 190, 6, 1],
        [1, "cs", 0, 188, 7, 1],
        [1, "cs", 0, 186, 8, 1],
        [1, "cs", 0, 186, 5, 1],
        [1, "cs", 0, 184, 7, 1],
        [1, "cs", 0, 182, 8, 1],
        [1, "cs", 0, 181, 6, 1],
        [1, "cs", 1, 189, 8, 1],
        [1, "cs", 1, 183, 8, 1],
        [1, "cs", 1, 188, 5, 1],
        [1, "cs", 1, 185, 6, 1],
        [1, "cs", 1, 180, 7, 1],
        [1, "cs", 1, 183, 5, 1],
        [1, "cs", 1, 178, 8, 1],
        [1, "cs", 1, 177, 6, 1],
        [1, "cs", 1, 173, 7, 1],
        [1, "cs", 1, 171, 7, 1],
        [1, "cs", 0, 177, 8, 1],
        [1, "cs", 0, 175, 7, 1],
        [1, "cs", 0, 179, 5, 1],
        [1, "cs", 0, 174, 5, 1],
        [1, "cs", 0, 176, 5, 1],
        [1, "cs", 0, 172, 8, 1],
        [1, "cs", 0, 170, 8, 1],
        [1, "cs", 0, 169, 6, 1],
        [1, "cs", 2, 192, 6, 1],
        [1, "cs", 2, 192, 8, 1],
        [1, "cs", 2, 191, 7, 1],
        [1, "cs", 2, 191, 6, 1],
        [1, "cs", 2, 191, 5, 1],
        [1, "cs", 2, 190, 5, 1],
        [1, "cs", 2, 189, 5, 1],
        [1, "cs", 2, 189, 6, 1],
        [1, "cs", 2, 189, 7, 1],
        [1, "cs", 2, 190, 7, 1],
        [1, "cs", 2, 190, 8, 1],
        [1, "cs", 2, 188, 8, 1],
        [1, "cs", 2, 187, 8, 1],
        [1, "cs", 2, 187, 7, 1],
        [1, "cs", 2, 187, 6, 1],
        [1, "cs", 2, 188, 6, 1],
        [1, "cs", 2, 187, 5, 1],
        [1, "cs", 2, 186, 6, 1],
        [1, "cs", 2, 186, 7, 1],
        [1, "cs", 2, 185, 7, 1],
        [1, "cs", 2, 185, 8, 1],
        [1, "cs", 2, 184, 8, 1],
        [1, "cs", 2, 183, 7, 1],
        [1, "cs", 2, 183, 6, 1],
        [1, "cs", 2, 184, 6, 1],
        [1, "cs", 2, 184, 5, 1],
        [1, "cs", 2, 185, 5, 1],
        [1, "cs", 2, 182, 6, 1],
        [1, "cs", 2, 182, 7, 1],
        [1, "cs", 2, 181, 7, 1],
        [1, "cs", 2, 181, 8, 1],
        [1, "cs", 2, 180, 8, 1],
        [1, "cs", 2, 179, 8, 1],
        [1, "cs", 2, 182, 5, 1],
        [1, "cs", 2, 181, 5, 1],
        [1, "cs", 2, 180, 5, 1],
        [1, "cs", 2, 180, 6, 1],
        [1, "cs", 2, 179, 6, 1],
        [1, "cs", 2, 179, 7, 1],
        [1, "cs", 2, 178, 7, 1],
        [1, "cs", 2, 178, 6, 1],
        [1, "cs", 2, 178, 5, 1],
        [1, "cs", 2, 177, 5, 1],
        [1, "cs", 2, 177, 7, 1],
        [1, "cs", 2, 176, 7, 1],
        [1, "cs", 2, 176, 6, 1],
        [1, "cs", 2, 175, 6, 1],
        [1, "cs", 2, 175, 5, 1],
        [1, "cs", 2, 176, 8, 1],
        [1, "cs", 2, 174, 8, 1],
        [1, "cs", 2, 175, 8, 1],
        [1, "cs", 2, 173, 8, 1],
        [1, "cs", 2, 174, 7, 1],
        [1, "cs", 2, 173, 6, 1],
        [1, "cs", 2, 174, 6, 1],
        [1, "cs", 2, 172, 5, 1],
        [1, "cs", 2, 173, 5, 1],
        [1, "cs", 2, 172, 6, 1],
        [1, "cs", 2, 172, 7, 1],
        [1, "cs", 2, 171, 8, 1],
        [1, "cs", 2, 170, 7, 1],
        [1, "cs", 2, 170, 6, 1],
        [1, "cs", 2, 170, 5, 1],
        [1, "cs", 2, 171, 5, 1],
        [1, "cs", 2, 171, 6, 1],
        [1, "cs", 2, 169, 5, 1],
        [1, "cs", 2, 169, 7, 1],
        [1, "cs", 2, 169, 8, 1],
        [1, "cs", 1, 168, 7, 1],
        [1, "cs", 1, 166, 5, 1],
        [1, "cs", 1, 164, 7, 1],
        [1, "cs", 1, 160, 7, 1],
        [1, "cs", 1, 156, 8, 1],
        [1, "cs", 0, 166, 8, 1],
        [1, "cs", 0, 168, 5, 1],
        [1, "cs", 0, 164, 6, 1],
        [1, "cs", 0, 162, 7, 1],
        [1, "cs", 0, 158, 8, 1],
        [1, "cs", 0, 157, 6, 1],
        [1, "cs", 0, 161, 5, 1],
        [1, "cs", 0, 159, 5, 1],
        [1, "cs", 0, 155, 7, 1],
        [1, "cs", 0, 154, 5, 1],
        [1, "cs", 0, 151, 7, 1],
        [1, "cs", 1, 153, 8, 1],
        [1, "cs", 1, 151, 5, 1],
        [1, "cs", 2, 168, 6, 1],
        [1, "cs", 2, 168, 8, 1],
        [1, "cs", 2, 167, 8, 1],
        [1, "cs", 2, 167, 7, 1],
        [1, "cs", 2, 167, 6, 1],
        [1, "cs", 2, 167, 5, 1],
        [1, "cs", 2, 166, 6, 1],
        [1, "cs", 2, 166, 7, 1],
        [1, "cs", 2, 165, 7, 1],
        [1, "cs", 2, 165, 6, 1],
        [1, "cs", 2, 165, 5, 1],
        [1, "cs", 2, 164, 5, 1],
        [1, "cs", 2, 163, 5, 1],
        [1, "cs", 2, 162, 5, 1],
        [1, "cs", 2, 162, 6, 1],
        [1, "cs", 2, 163, 6, 1],
        [1, "cs", 2, 163, 7, 1],
        [1, "cs", 2, 163, 8, 1],
        [1, "cs", 2, 164, 8, 1],
        [1, "cs", 2, 165, 8, 1],
        [1, "cs", 2, 161, 8, 1],
        [1, "cs", 2, 162, 8, 1],
        [1, "cs", 2, 160, 8, 1],
        [1, "cs", 2, 159, 8, 1],
        [1, "cs", 2, 159, 7, 1],
        [1, "cs", 2, 159, 6, 1],
        [1, "cs", 2, 160, 5, 1],
        [1, "cs", 2, 160, 6, 1],
        [1, "cs", 2, 161, 6, 1],
        [1, "cs", 2, 161, 7, 1],
        [1, "cs", 2, 157, 7, 1],
        [1, "cs", 2, 158, 7, 1],
        [1, "cs", 2, 158, 6, 1],
        [1, "cs", 2, 158, 5, 1],
        [1, "cs", 2, 155, 5, 1],
        [1, "cs", 2, 155, 6, 1],
        [1, "cs", 2, 156, 6, 1],
        [1, "cs", 2, 156, 7, 1],
        [1, "cs", 2, 157, 8, 1],
        [1, "cs", 2, 155, 8, 1],
        [1, "cs", 2, 154, 8, 1],
        [1, "cs", 2, 154, 7, 1],
        [1, "cs", 2, 154, 6, 1],
        [1, "cs", 2, 152, 8, 1],
        [1, "cs", 2, 153, 7, 1],
        [1, "cs", 2, 153, 6, 1],
        [1, "cs", 2, 153, 5, 1],
        [1, "cs", 2, 152, 5, 1],
        [1, "cs", 2, 152, 6, 1],
        [1, "cs", 2, 152, 7, 1],
        [1, "cs", 2, 151, 6, 1],
        [1, "cs", 2, 157, 5, 1],
        [1, "cs", 1, 156, 5, 1],
        [1, "cs", 0, 150, 5, 1],
        [1, "cs", 0, 149, 7, 1],
        [1, "cs", 0, 147, 8, 1],
        [1, "cs", 0, 146, 5, 1],
        [1, "cs", 0, 144, 7, 1],
        [1, "cs", 0, 142, 5, 1],
        [1, "cs", 1, 147, 6, 1],
        [1, "cs", 1, 145, 8, 1],
        [1, "cs", 1, 144, 5, 1],
        [1, "cs", 2, 148, 5, 1],
        [1, "cs", 2, 149, 5, 1],
        [1, "cs", 2, 150, 6, 1],
        [1, "cs", 2, 150, 8, 1],
        [1, "cs", 2, 151, 8, 1],
        [1, "cs", 2, 150, 7, 1],
        [1, "cs", 2, 149, 8, 1],
        [1, "cs", 2, 148, 8, 1],
        [1, "cs", 2, 149, 6, 1],
        [1, "cs", 2, 148, 6, 1],
        [1, "cs", 2, 148, 7, 1],
        [1, "cs", 2, 147, 7, 1],
        [1, "cs", 2, 147, 5, 1],
        [1, "cs", 2, 146, 6, 1],
        [1, "cs", 2, 146, 7, 1],
        [1, "cs", 2, 146, 8, 1],
        [1, "cs", 2, 145, 7, 1],
        [1, "cs", 2, 145, 6, 1],
        [1, "cs", 2, 145, 5, 1],
        [1, "cs", 2, 144, 6, 1],
        [1, "cs", 2, 143, 5, 1],
        [1, "cs", 2, 143, 6, 1],
        [1, "cs", 2, 142, 6, 1],
        [1, "cs", 2, 141, 5, 1],
        [1, "cs", 2, 224, 10, 1],
        [1, "cs", 0, 224, 11, 1],
        [1, "cs", 0, 224, 13, 1],
        [1, "cs", 0, 224, 17, 1],
        [1, "cs", 0, 224, 19, 1],
        [1, "cs", 0, 224, 22, 1],
        [1, "cs", 0, 224, 24, 1],
        [1, "cs", 0, 224, 29, 1],
        [1, "cs", 0, 224, 33, 1],
        [1, "cs", 0, 224, 35, 1],
        [1, "cs", 0, 224, 38, 1],
        [1, "cs", 1, 224, 14, 1],
        [1, "cs", 1, 224, 20, 1],
        [1, "cs", 1, 224, 27, 1],
        [1, "cs", 1, 224, 31, 1],
        [1, "cs", 1, 224, 36, 1],
        [1, "cs", 2, 224, 12, 1],
        [1, "cs", 2, 224, 15, 1],
        [1, "cs", 2, 224, 16, 1],
        [1, "cs", 2, 224, 18, 1],
        [1, "cs", 2, 224, 21, 1],
        [1, "cs", 2, 224, 23, 1],
        [1, "cs", 2, 224, 25, 1],
        [1, "cs", 2, 224, 26, 1],
        [1, "cs", 2, 224, 28, 1],
        [1, "cs", 2, 224, 30, 1],
        [1, "cs", 2, 224, 32, 1],
        [1, "cs", 2, 224, 34, 1],
        [1, "cs", 2, 224, 37, 1],
        [1, "cs", 2, 224, 39, 1],
        [1, "cs", 0, 224, 41, 1],
        [1, "cs", 0, 224, 44, 1],
        [1, "cs", 0, 224, 46, 1],
        [1, "cs", 0, 224, 52, 1],
        [1, "cs", 0, 224, 57, 1],
        [1, "cs", 1, 224, 47, 1],
        [1, "cs", 2, 224, 40, 1],
        [1, "cs", 2, 224, 42, 1],
        [1, "cs", 2, 224, 43, 1],
        [1, "cs", 2, 224, 45, 1],
        [1, "cs", 2, 224, 49, 1],
        [1, "cs", 1, 224, 50, 1],
        [1, "cs", 2, 224, 51, 1],
        [1, "la", 3, 224, 54, 1],
        [1, "cs", 2, 224, 56, 1],
        [1, "cs", 2, 224, 58, 1],
        [1, "cs", 2, 224, 61, 1],
        [1, "cs", 0, 224, 60, 1],
        [1, "cs", 0, 224, 64, 1],
        [1, "cs", 0, 224, 66, 1],
        [1, "cs", 0, 224, 70, 1],
        [1, "cs", 0, 224, 74, 1],
        [1, "cs", 0, 224, 77, 1],
        [1, "cs", 1, 224, 62, 1],
        [1, "cs", 1, 224, 68, 1],
        [1, "cs", 1, 224, 72, 1],
        [1, "cs", 1, 224, 76, 1],
        [1, "cs", 1, 224, 80, 1],
        [1, "cs", 1, 224, 83, 1],
        [1, "cs", 1, 224, 91, 1],
        [1, "cs", 1, 224, 95, 1],
        [1, "cs", 1, 224, 97, 1],
        [1, "cs", 0, 224, 85, 1],
        [1, "cs", 0, 224, 88, 1],
        [1, "cs", 0, 224, 93, 1],
        [1, "cs", 0, 224, 98, 1],
        [1, "cs", 2, 224, 59, 1],
        [1, "cs", 2, 224, 63, 1],
        [1, "cs", 2, 224, 65, 1],
        [1, "cs", 2, 224, 67, 1],
        [1, "cs", 2, 224, 69, 1],
        [1, "cs", 2, 224, 71, 1],
        [1, "cs", 2, 224, 73, 1],
        [1, "cs", 2, 224, 75, 1],
        [1, "cs", 2, 224, 78, 1],
        [1, "cs", 2, 224, 79, 1],
        [1, "cs", 2, 224, 81, 1],
        [1, "cs", 2, 224, 82, 1],
        [1, "cs", 2, 224, 84, 1],
        [1, "cs", 2, 224, 86, 1],
        [1, "cs", 2, 224, 87, 1],
        [1, "cs", 2, 224, 89, 1],
        [1, "cs", 2, 224, 90, 1],
        [1, "cs", 2, 224, 92, 1],
        [1, "cs", 2, 224, 94, 1],
        [1, "cs", 2, 224, 96, 1],
        [1, "cs", 2, 224, 99, 1],
        [1, "cs", 2, 224, 100, 1],
        [1, "cs", 0, 224, 101, 1],
        [1, "cs", 1, 224, 103, 1],
        [1, "cs", 2, 224, 102, 1],
        [1, "cs", 0, 222, 10, 1],
        [1, "cs", 2, 223, 9, 1],
        [1, "cs", 2, 222, 9, 1],
        [1, "cs", 2, 221, 9, 1],
        [1, "cs", 2, 223, 10, 1],
        [1, "cs", 2, 223, 11, 1],
        [1, "cs", 2, 223, 12, 1],
        [1, "cs", 3, 223, 13, 1],
        [1, "cs", 3, 222, 11, 1],
        [1, "cs", 3, 220, 9, 1],
        [1, "cs", 3, 219, 9, 1],
        [1, "cs", 3, 221, 10, 1],
        [1, "re", 2, 219, 13, 1],
        [1, "re", 1, 218, 18, 1],
        [1, "re", 1, 214, 13, 1],
        [1, "cs", 0, 221, 20, 1],
        [1, "cs", 1, 223, 18, 1],
        [1, "cs", 2, 222, 19, 1],
        [1, "cs", 2, 223, 19, 1],
        [1, "cs", 2, 223, 20, 1],
        [1, "cs", 2, 222, 20, 1],
        [1, "cs", 2, 220, 21, 1],
        [1, "cs", 0, 219, 21, 1],
        [1, "cs", 3, 221, 21, 1],
        [1, "cs", 3, 218, 21, 1],
        [1, "cs", 3, 222, 21, 1],
        [1, "cs", 3, 220, 22, 1],
        [1, "cs", 3, 219, 22, 1],
        [1, "cs", 3, 221, 22, 1],
        [1, "cs", 0, 211, 9, 1],
        [1, "cs", 1, 211, 10, 1],
        [1, "cs", 1, 210, 12, 1],
        [1, "cs", 0, 211, 13, 1],
        [1, "cs", 2, 210, 9, 1],
        [1, "cs", 2, 210, 10, 1],
        [1, "cs", 2, 210, 11, 1],
        [1, "cs", 2, 212, 9, 1],
        [1, "cs", 2, 210, 13, 1],
        [1, "cs", 2, 211, 12, 1],
        [1, "cs", 2, 211, 11, 1],
        [1, "cs", 2, 211, 14, 1],
        [1, "cs", 2, 212, 15, 1],
        [1, "cs", 2, 210, 14, 1],
        [1, "cs", 3, 211, 15, 1],
        [1, "cs", 3, 213, 9, 1],
        [1, "cs", 3, 212, 10, 1],
        [1, "cs", 3, 223, 21, 1],
        [1, "cs", 3, 209, 9, 1],
        [1, "la", 3, 223, 22, 1],
        [1, "la", 3, 221, 23, 1],
        [1, "la", 3, 207, 9, 1],
        [1, "la", 3, 209, 10, 1],
        [1, "la", 0, 209, 12, 1],
        [1, "la", 4, 209, 14, 1],
        [1, "la", 4, 219, 23, 1],
        [1, "la", 3, 210, 15, 1],
        [1, "la", 3, 217, 22, 1],
        [1, "la", 4, 212, 16, 1],
        [1, "la", 2, 214, 19, 1],
        [1, "la", 4, 213, 20, 1],
        [1, "la", 1, 212, 21, 1],
        [1, "la", 4, 215, 18, 1],
        [1, "la", 2, 216, 17, 1],
        [1, "la", 5, 216, 16, 1],
        [1, "la", 5, 216, 15, 1],
        [1, "la", 1, 217, 16, 1],
        [1, "la", 2, 218, 16, 1],
        [1, "la", 2, 216, 14, 1],
        [1, "la", 2, 219, 16, 1],
        [1, "la", 5, 220, 16, 1],
        [1, "la", 5, 216, 13, 1],
        [1, "la", 4, 217, 15, 1],
        [1, "cs", 0, 211, 44, 1],
        [1, "cs", 1, 212, 45, 1],
        [1, "cs", 2, 213, 45, 1],
        [1, "cs", 0, 214, 46, 1],
        [1, "cs", 2, 215, 46, 1],
        [1, "cs", 3, 213, 46, 1],
        [1, "cs", 3, 214, 47, 1],
        [1, "cs", 3, 214, 48, 1],
        [1, "cs", 3, 216, 46, 1],
        [1, "cs", 0, 208, 20, 1],
        [1, "cs", 0, 210, 21, 1],
        [1, "cs", 0, 212, 23, 1],
        [1, "cs", 0, 213, 25, 1],
        [1, "cs", 2, 213, 24, 1],
        [1, "cs", 2, 211, 22, 1],
        [1, "cs", 2, 210, 20, 1],
        [1, "cs", 2, 209, 21, 1],
        [1, "cs", 2, 209, 20, 1],
        [1, "cs", 2, 211, 21, 1],
        [1, "cs", 2, 212, 22, 1],
        [1, "cs", 2, 213, 23, 1],
        [1, "cs", 3, 213, 26, 1],
        [1, "cs", 3, 207, 20, 1],
        [1, "la", 4, 192, 33, 1],
        [1, "la", 4, 191, 34, 1],
        [1, "la", 4, 190, 35, 1],
        [1, "la", 3, 189, 37, 1],
        [1, "la", 3, 188, 39, 1],
        [1, "la", 4, 186, 40, 1],
        [1, "la", 4, 185, 39, 1],
        [1, "la", 4, 184, 39, 1],
        [1, "la", 2, 183, 39, 1],
        [1, "la", 1, 182, 40, 1],
        [1, "la", 2, 181, 41, 1],
        [1, "la", 5, 180, 41, 1],
        [1, "la", 5, 179, 41, 1],
        [1, "la", 4, 192, 28, 1],
        [1, "la", 4, 191, 28, 1],
        [1, "la", 4, 190, 27, 1],
        [1, "la", 3, 188, 27, 1],
        [1, "la", 4, 187, 26, 1],
        [1, "la", 4, 186, 25, 1],
        [1, "la", 4, 185, 25, 1],
        [1, "la", 4, 184, 24, 1],
        [1, "la", 5, 184, 23, 1],
        [1, "la", 2, 184, 22, 1],
        [1, "la", 5, 184, 21, 1],
        [1, "la", 1, 183, 20, 1],
        [1, "la", 5, 182, 20, 1],
        [1, "la", 2, 181, 20, 1],
        [1, "la", 5, 180, 20, 1],
        [1, "la", 2, 179, 20, 1],
        [1, "la", 4, 178, 19, 1],
        [1, "la", 3, 178, 17, 1],
        [1, "la", 3, 176, 18, 1],
        [1, "cs", 0, 177, 15, 1],
        [1, "cs", 0, 175, 17, 1],
        [1, "cs", 0, 180, 16, 1],
        [1, "cs", 0, 174, 19, 1],
        [1, "cs", 0, 172, 20, 1],
        [1, "cs", 1, 175, 15, 1],
        [1, "cs", 1, 172, 18, 1],
        [1, "cs", 1, 181, 15, 1],
        [1, "cs", 2, 179, 15, 1],
        [1, "cs", 2, 177, 16, 1],
        [1, "cs", 2, 176, 16, 1],
        [1, "cs", 2, 174, 18, 1],
        [1, "cs", 2, 173, 19, 1],
        [1, "cs", 2, 172, 19, 1],
        [1, "cs", 2, 173, 18, 1],
        [1, "cs", 2, 173, 17, 1],
        [1, "cs", 2, 174, 17, 1],
        [1, "cs", 2, 174, 16, 1],
        [1, "cs", 2, 175, 16, 1],
        [1, "cs", 2, 176, 15, 1],
        [1, "cs", 2, 178, 15, 1],
        [1, "cs", 2, 178, 16, 1],
        [1, "cs", 2, 179, 16, 1],
        [1, "cs", 2, 180, 15, 1],
        [1, "cs", 2, 181, 16, 1],
        [1, "cs", 3, 182, 16, 1],
        [1, "cs", 3, 172, 21, 1],
        [1, "la", 1, 175, 19, 1],
        [1, "la", 2, 174, 20, 1],
        [1, "la", 2, 173, 20, 1],
        [1, "la", 1, 180, 17, 1],
        [1, "la", 2, 181, 17, 1],
        [1, "la", 3, 191, 20, 1],
        [1, "s", 0, 217, 30, 1],
        [1, "s", 0, 208, 35, 1],
        [1, "s", 0, 204, 24, 1],
        [1, "s", 1, 218, 32, 1],
        [1, "s", 1, 207, 34, 1],
        [1, "s", 1, 202, 23, 1],
        [1, "s", 1, 195, 16, 1],
        [1, "s", 2, 222, 28, 1],
        [1, "s", 2, 212, 38, 1],
        [1, "s", 2, 207, 23, 1],
        [1, "s", 2, 202, 12, 1],
        [1, "s", 2, 195, 18, 1],
        [1, "s", 1, 191, 12, 1],
        [1, "s", 0, 187, 16, 1],
        [1, "s", 2, 188, 16, 1],
        [1, "s", 1, 186, 14, 1],
        [1, "s", 1, 201, 16, 1],
        [1, "g", 1, 216, 31, 1],
        [1, "g", 0, 200, 15, 1],
        [1, "g", 0, 202, 40, 1],
        [1, "g", 0, 189, 32, 1],
        [1, "g", 0, 204, 28, 1],
        [1, "g", 0, 196, 24, 1],
        [1, "g", 2, 198, 37, 1],
        [1, "s", 0, 193, 39, 1],
        [1, "s", 0, 201, 45, 1],
        [1, "a", 0, 210, 29, 1],
        [1, "a", 0, 200, 20, 1],
        [1, "cs", 0, 200, 34, 1],
        [1, "cs", 0, 193, 27, 1],
        [1, "cs", 1, 203, 30, 1],
        [1, "cs", 1, 191, 31, 1],
        [1, "cs", 2, 202, 32, 1],
        [1, "cs", 2, 194, 26, 1],
        [1, "cs", 2, 192, 27, 1],
        [1, "cs", 2, 192, 32, 1],
        [1, "cs", 2, 203, 31, 1],
        [1, "cs", 2, 202, 31, 1],
        [1, "cs", 2, 202, 30, 1],
        [1, "cs", 3, 202, 29, 1],
        [1, "cs", 3, 201, 32, 1],
        [1, "cs", 3, 199, 35, 1],
        [1, "cs", 0, 193, 34, 1],
        [1, "cs", 2, 194, 34, 1],
        [1, "cs", 2, 198, 35, 1],
        [1, "cs", 3, 199, 34, 1],
        [1, "cs", 3, 191, 29, 1],
        [1, "cs", 0, 191, 30, 1],
        [1, "cs", 3, 190, 29, 1],
        [1, "la", 3, 180, 69, 1],
        [1, "la", 3, 182, 68, 1],
        [1, "la", 3, 184, 68, 1],
        [1, "la", 3, 186, 70, 1],
        [1, "la", 3, 184, 72, 1],
        [1, "la", 3, 182, 72, 1],
        [1, "la", 3, 180, 71, 1],
        [1, "cs", 0, 186, 68, 1],
        [1, "cs", 0, 187, 70, 1],
        [1, "cs", 0, 183, 74, 1],
        [1, "cs", 0, 178, 70, 1],
        [1, "cs", 2, 182, 66, 1],
        [1, "cs", 2, 182, 74, 1],
        [1, "cs", 2, 181, 73, 1],
        [1, "cs", 2, 180, 74, 1],
        [1, "cs", 2, 181, 74, 1],
        [1, "la", 0, 184, 70, 1],
        [1, "la", 3, 182, 70, 1],
        [1, "cs", 2, 181, 67, 1],
        [1, "cs", 3, 184, 67, 1],
        [1, "cs", 3, 182, 67, 1],
        [1, "la", 4, 187, 69, 1],
        [1, "la", 1, 188, 68, 1],
        [1, "la", 4, 189, 68, 1],
        [1, "la", 2, 190, 68, 1],
        [1, "la", 1, 191, 68, 1],
        [1, "la", 4, 192, 68, 1],
        [1, "la", 2, 193, 68, 1],
        [1, "la", 4, 194, 69, 1],
        [1, "la", 2, 194, 70, 1],
        [1, "la", 5, 195, 71, 1],
        [1, "la", 1, 194, 71, 1],
        [1, "la", 2, 196, 72, 1],
        [1, "la", 4, 196, 71, 1],
        [1, "la", 1, 197, 73, 1],
        [1, "la", 5, 196, 73, 1],
        [1, "la", 5, 198, 73, 1],
        [1, "la", 3, 201, 73, 1],
        [1, "la", 3, 203, 72, 1],
        [1, "la", 4, 199, 73, 1],
        [1, "la", 1, 205, 72, 1],
        [1, "la", 2, 206, 72, 1],
        [1, "la", 5, 207, 72, 1],
        [1, "la", 1, 208, 72, 1],
        [1, "la", 1, 209, 73, 1],
        [1, "la", 2, 209, 74, 1],
        [1, "la", 5, 211, 76, 1],
        [1, "la", 4, 210, 75, 1],
        [1, "la", 5, 212, 76, 1],
        [1, "la", 4, 202, 75, 1],
        [1, "la", 2, 203, 76, 1],
        [1, "la", 4, 204, 77, 1],
        [1, "la", 2, 204, 78, 1],
        [1, "la", 2, 204, 79, 1],
        [1, "la", 5, 204, 80, 1],
        [1, "cs", 0, 202, 74, 1],
        [1, "cs", 1, 203, 74, 1],
        [1, "cs", 2, 204, 73, 1],
        [1, "cs", 2, 203, 75, 1],
        [1, "cs", 3, 204, 76, 1],
        [1, "cs", 3, 205, 73, 1],
        [1, "cs", 0, 205, 74, 1],
        [1, "cs", 2, 204, 74, 1],
        [1, "cs", 2, 204, 75, 1],
        [1, "cs", 2, 206, 73, 1],
        [1, "cs", 3, 207, 73, 1],
        [1, "cs", 2, 205, 76, 1],
        [1, "cs", 3, 205, 77, 1],
        [1, "la", 3, 183, 66, 1],
        [1, "la", 4, 183, 65, 1],
        [1, "la", 4, 184, 64, 1],
        [1, "la", 4, 185, 63, 1],
        [1, "la", 1, 185, 62, 1],
        [1, "la", 2, 185, 61, 1],
        [1, "la", 2, 185, 60, 1],
        [1, "la", 4, 186, 59, 1],
        [1, "la", 1, 187, 58, 1],
        [1, "la", 2, 187, 57, 1],
        [1, "la", 2, 187, 56, 1],
        [1, "s", 0, 191, 60, 1],
        [1, "s", 1, 195, 58, 1],
        [1, "s", 1, 199, 46, 1],
        [1, "s", 2, 202, 49, 1],
        [1, "g", 2, 197, 55, 1],
        [1, "g", 1, 213, 55, 1],
        [1, "g", 0, 192, 45, 1],
        [1, "g", 0, 210, 61, 1],
        [1, "g", 0, 182, 52, 1],
        [1, "g", 0, 180, 35, 1],
        [1, "g", 0, 175, 25, 1],
        [1, "g", 0, 168, 32, 1],
        [1, "g", 1, 179, 28, 1],
        [1, "g", 1, 161, 16, 1],
        [1, "g", 2, 172, 12, 1],
        [1, "g", 2, 160, 25, 1],
        [1, "g", 2, 157, 39, 1],
        [1, "g", 2, 170, 43, 1],
        [1, "g", 2, 202, 67, 1],
        [1, "g", 2, 217, 72, 1],
        [1, "g", 2, 214, 82, 1],
        [1, "g", 2, 193, 86, 1],
        [1, "g", 2, 168, 60, 1],
        [1, "g", 2, 165, 78, 1],
        [1, "g", 2, 173, 88, 1],
        [1, "s", 0, 185, 51, 1],
        [1, "s", 0, 175, 44, 1],
        [1, "s", 0, 165, 50, 1],
        [1, "s", 0, 160, 32, 1],
        [1, "s", 1, 162, 30, 1],
        [1, "s", 1, 176, 28, 1],
        [1, "s", 1, 154, 17, 1],
        [1, "s", 1, 184, 49, 1],
        [1, "s", 1, 192, 62, 1],
        [1, "s", 1, 216, 62, 1],
        [1, "s", 1, 204, 65, 1],
        [1, "s", 1, 217, 79, 1],
        [1, "s", 1, 206, 86, 1],
        [1, "la", 3, 211, 69, 1],
        [1, "la", 4, 215, 69, 1],
        [1, "la", 5, 201, 81, 1],
        [1, "la", 1, 207, 83, 1],
        [1, "la", 3, 173, 32, 1],
        [1, "la", 2, 181, 45, 1],
        [1, "la", 1, 178, 38, 1],
        [1, "la", 1, 213, 69, 1],
        [1, "la", 5, 214, 69, 1],
        [1, "la", 4, 216, 68, 1],
        [1, "la", 0, 191, 78, 1],
        [1, "la", 3, 191, 80, 1],
        [1, "la", 3, 189, 79, 1],
        [1, "g", 2, 150, 29, 1],
        [1, "g", 2, 154, 67, 1],
        [1, "g", 2, 202, 94, 1],
        [1, "g", 2, 155, 90, 1],
        [1, "s", 2, 215, 80, 1],
        [1, "s", 2, 204, 62, 1],
        [1, "s", 2, 218, 60, 1],
        [1, "s", 2, 194, 62, 1],
        [1, "s", 0, 216, 86, 1],
        [1, "s", 0, 211, 93, 1],
        [1, "la", 0, 216, 92, 1],
        [1, "la", 0, 151, 96, 1],
        [1, "la", 1, 155, 95, 1],
        [1, "la", 4, 214, 88, 1],
        [1, "s", 0, 205, 99, 1],
        [1, "s", 1, 217, 88, 1],
        [1, "s", 1, 213, 94, 1],
        [1, "s", 1, 202, 97, 1],
        [1, "s", 0, 199, 85, 1],
        [1, "s", 0, 190, 93, 1],
        [1, "s", 1, 199, 87, 1],
        [1, "s", 1, 192, 97, 1],
        [1, "la", 3, 196, 92, 1],
        [1, "la", 1, 199, 91, 1],
        [1, "la", 1, 220, 91, 1],
        [1, "la", 0, 219, 77, 1],
        [1, "la", 0, 200, 59, 1],
        [1, "la", 3, 188, 87, 1],
        [1, "la", 0, 183, 94, 1],
        [1, "la", 1, 187, 83, 1],
        [1, "la", 1, 175, 82, 1],
        [1, "la", 1, 172, 94, 1],
        [1, "la", 2, 179, 78, 1],
        [1, "la", 0, 166, 87, 1],
        [1, "la", 3, 159, 80, 1],
        [1, "la", 3, 167, 15, 1],
        [1, "la", 1, 164, 17, 1],
        [1, "la", 1, 172, 28, 1],
        [1, "la", 3, 153, 24, 1],
        [1, "la", 4, 164, 91, 1],
        [1, "la", 4, 156, 82, 1],
        [1, "la", 4, 149, 90, 1],
        [1, "s", 0, 178, 85, 1],
        [1, "s", 1, 180, 85, 1],
        [1, "s", 0, 163, 96, 1],
        [1, "s", 0, 159, 86, 1],
        [1, "s", 0, 185, 78, 1],
        [1, "s", 1, 194, 75, 1],
        [1, "s", 2, 195, 76, 1],
        [1, "s", 2, 181, 78, 1],
        [1, "s", 2, 161, 87, 1],
        [1, "s", 2, 166, 97, 1],
        [1, "s", 2, 177, 97, 1],
        [1, "s", 0, 149, 85, 1],
        [1, "s", 1, 151, 83, 1],
        [1, "s", 1, 175, 74, 1],
        [1, "s", 0, 174, 72, 1],
        [1, "la", 3, 168, 71, 1],
        [1, "la", 3, 180, 60, 1],
        [1, "s", 0, 156, 63, 1],
        [1, "s", 0, 151, 47, 1],
        [1, "s", 1, 158, 64, 1],
        [1, "s", 1, 161, 75, 1],
        [1, "s", 1, 162, 51, 1],
        [1, "s", 1, 175, 45, 1],
        [1, "s", 1, 152, 47, 1],
        [1, "s", 1, 159, 33, 1],
        [1, "s", 1, 152, 18, 1],
        [1, "s", 0, 151, 13, 1],
        [1, "s", 0, 166, 22, 1],
        [1, "s", 0, 170, 63, 1],
        [1, "s", 2, 172, 62, 1],
        [1, "s", 2, 155, 61, 1],
        [1, "s", 2, 167, 51, 1],
        [1, "s", 2, 150, 52, 1],
        [1, "la", 4, 178, 69, 1],
        [1, "la", 4, 177, 68, 1],
        [1, "la", 3, 176, 67, 1],
        [1, "la", 0, 174, 67, 1],
        [1, "la", 1, 172, 67, 1],
        [1, "la", 4, 171, 67, 1],
        [1, "la", 4, 170, 66, 1],
        [1, "la", 4, 169, 66, 1],
        [1, "la", 1, 168, 66, 1],
        [1, "la", 4, 167, 67, 1],
        [1, "la", 1, 166, 67, 1],
        [1, "la", 4, 165, 68, 1],
        [1, "la", 5, 164, 68, 1],
        [1, "la", 2, 163, 68, 1],
        [1, "la", 5, 162, 68, 1],
        [1, "la", 2, 161, 68, 1],
        [1, "la", 3, 153, 72, 1],
        [1, "la", 3, 163, 60, 1],
        [1, "la", 3, 164, 42, 1],
        [1, "la", 0, 155, 51, 1],
        [1, "la", 1, 168, 42, 1],
        [1, "la", 4, 158, 48, 1],
        [1, "la", 4, 178, 57, 1],
        [1, "la", 4, 151, 69, 1],
        [1, "la", 2, 170, 74, 1],
        [1, "la", 2, 160, 84, 1],
        [1, "la", 2, 174, 92, 1],
        [1, "la", 2, 188, 90, 1],
        [1, "la", 2, 209, 84, 1],
        [1, "la", 2, 206, 93, 1],
        [1, "la", 5, 156, 70, 1],
        [1, "la", 5, 165, 57, 1],
        [1, "la", 5, 182, 58, 1],
        [1, "la", 5, 166, 44, 1],
        [1, "la", 1, 163, 39, 1],
        [1, "la", 1, 152, 53, 1],
        [1, "la", 1, 152, 37, 1],
        [1, "la", 2, 163, 13, 1],
        [1, "de", 12, 219, 12, 0],
        [1, "de", 14, 203, 13, 0],
        [1, "de", 15, 220, 19, 0],
        [1, "de", 12, 223, 15, 0],
        [1, "de", 12, 213, 10, 0],
        [1, "de", 37, 217, 19, 0],
        [1, "de", 38, 220, 14, 0],
        [1, "de", 38, 215, 10, 0],
        [1, "de", 40, 214, 14, 0],
        [1, "de", 40, 222, 16, 0],
        [1, "de", 40, 209, 18, 0],
        [1, "de", 37, 212, 18, 0],
        [1, "de", 38, 215, 26, 0],
        [1, "de", 37, 222, 25, 0],
        [1, "de", 40, 221, 29, 0],
        [1, "de", 12, 220, 27, 0],
        [1, "de", 13, 213, 27, 0],
        [1, "de", 14, 215, 30, 0],
        [1, "de", 15, 219, 33, 0],
        [1, "de", 38, 220, 31, 0],
        [1, "de", 38, 217, 35, 0],
        [1, "de", 40, 221, 34, 0],
        [1, "de", 39, 215, 32, 0],
        [1, "de", 37, 211, 35, 0],
        [1, "de", 12, 223, 38, 0],
        [1, "de", 13, 213, 38, 0],
        [1, "de", 14, 222, 44, 0],
        [1, "de", 15, 208, 33, 0],
        [1, "de", 15, 206, 23, 0],
        [1, "de", 13, 205, 28, 0],
        [1, "de", 14, 211, 23, 0],
        [1, "de", 14, 201, 20, 0],
        [1, "de", 15, 198, 9, 0],
        [1, "de", 15, 199, 16, 0],
        [1, "de", 12, 194, 15, 0],
        [1, "de", 12, 197, 23, 0],
        [1, "de", 37, 205, 13, 0],
        [1, "de", 39, 204, 9, 0],
        [1, "de", 40, 196, 12, 0],
        [1, "de", 40, 198, 18, 0],
        [1, "de", 37, 192, 11, 0],
        [1, "de", 37, 199, 24, 0],
        [1, "de", 37, 209, 24, 0],
        [1, "de", 39, 209, 30, 0],
        [1, "de", 39, 204, 31, 0],
        [1, "de", 39, 192, 24, 0],
        [1, "de", 40, 187, 23, 0],
        [1, "de", 38, 187, 18, 0],
        [1, "de", 39, 192, 18, 0],
        [1, "de", 37, 185, 15, 0],
        [1, "de", 12, 188, 15, 0],
        [1, "de", 13, 185, 13, 0],
        [1, "de", 14, 189, 9, 0],
        [1, "de", 15, 187, 22, 0],
        [1, "de", 15, 180, 9, 0],
        [1, "de", 12, 177, 14, 0],
        [1, "de", 14, 173, 9, 0],
        [1, "de", 14, 171, 15, 0],
        [1, "de", 40, 182, 9, 0],
        [1, "de", 39, 179, 13, 0],
        [1, "de", 39, 175, 9, 0],
        [1, "de", 40, 173, 14, 0],
        [1, "de", 37, 169, 11, 0],
        [1, "de", 37, 163, 10, 0],
        [1, "de", 38, 164, 15, 0],
        [1, "de", 39, 170, 20, 0],
        [1, "de", 40, 160, 17, 0],
        [1, "de", 40, 154, 10, 0],
        [1, "de", 40, 165, 23, 0],
        [1, "de", 40, 150, 19, 0],
        [1, "de", 37, 155, 16, 0],
        [1, "de", 39, 146, 10, 0],
        [1, "de", 12, 159, 12, 0],
        [1, "de", 13, 151, 9, 0],
        [1, "de", 14, 150, 14, 0],
        [1, "de", 15, 153, 19, 0],
        [1, "de", 13, 161, 25, 0],
        [1, "de", 14, 169, 25, 0],
        [1, "de", 15, 176, 25, 0],
        [1, "de", 12, 180, 29, 0],
        [1, "de", 12, 188, 31, 0],
        [1, "de", 14, 181, 36, 0],
        [1, "de", 37, 186, 33, 0],
        [1, "de", 38, 183, 26, 0],
        [1, "de", 39, 177, 21, 0],
        [1, "de", 40, 175, 31, 0],
        [1, "de", 37, 176, 39, 0],
        [1, "de", 37, 168, 34, 0],
        [1, "de", 38, 162, 32, 0],
        [1, "de", 38, 168, 45, 0],
        [1, "de", 38, 173, 45, 0],
        [1, "de", 39, 160, 35, 0],
        [1, "de", 40, 161, 42, 0],
        [1, "de", 40, 170, 39, 0],
        [1, "de", 40, 181, 43, 0],
        [1, "de", 40, 156, 26, 0],
        [1, "de", 40, 150, 32, 0],
        [1, "de", 37, 159, 26, 0],
        [1, "de", 37, 155, 40, 0],
        [1, "de", 37, 154, 45, 0],
        [1, "de", 39, 149, 45, 0],
        [1, "de", 40, 150, 50, 0],
        [1, "de", 40, 160, 52, 0],
        [1, "de", 37, 164, 52, 0],
        [1, "de", 38, 168, 50, 0],
        [1, "de", 12, 176, 45, 0],
        [1, "de", 12, 167, 32, 0],
        [1, "de", 13, 158, 32, 0],
        [1, "de", 14, 149, 28, 0],
        [1, "de", 15, 163, 30, 0],
        [1, "de", 14, 158, 39, 0],
        [1, "de", 12, 171, 43, 0],
        [1, "de", 12, 174, 36, 0],
        [1, "de", 12, 151, 43, 0],
        [1, "de", 13, 152, 48, 0],
        [1, "de", 14, 164, 49, 0],
        [1, "de", 15, 149, 52, 0],
        [1, "de", 12, 174, 49, 0],
        [1, "de", 13, 183, 51, 0],
        [1, "de", 14, 186, 48, 0],
        [1, "de", 37, 182, 48, 0],
        [1, "de", 38, 187, 52, 0],
        [1, "de", 39, 188, 43, 0],
        [1, "de", 37, 200, 38, 0],
        [1, "de", 40, 194, 37, 0],
        [1, "de", 39, 199, 44, 0],
        [1, "de", 38, 200, 49, 0],
        [1, "de", 37, 196, 54, 0],
        [1, "de", 12, 194, 40, 0],
        [1, "de", 13, 202, 45, 0],
        [1, "de", 14, 198, 47, 0],
        [1, "de", 15, 198, 55, 0],
        [1, "de", 15, 212, 54, 0],
        [1, "de", 15, 216, 63, 0],
        [1, "de", 14, 209, 62, 0],
        [1, "de", 12, 219, 60, 0],
        [1, "de", 12, 206, 56, 0],
        [1, "de", 12, 218, 72, 0],
        [1, "de", 12, 223, 67, 0],
        [1, "de", 12, 205, 64, 0],
        [1, "de", 12, 193, 63, 0],
        [1, "de", 14, 216, 80, 0],
        [1, "de", 14, 222, 87, 0],
        [1, "de", 38, 210, 53, 0],
        [1, "de", 37, 210, 47, 0],
        [1, "de", 37, 200, 63, 0],
        [1, "de", 37, 218, 62, 0],
        [1, "de", 37, 222, 60, 0],
        [1, "de", 37, 207, 70, 0],
        [1, "de", 38, 203, 68, 0],
        [1, "de", 38, 195, 66, 0],
        [1, "de", 38, 218, 55, 0],
        [1, "de", 38, 212, 61, 0],
        [1, "de", 38, 222, 70, 0],
        [1, "de", 38, 218, 70, 0],
        [1, "de", 40, 222, 81, 0],
        [1, "de", 38, 214, 79, 0],
        [1, "de", 39, 213, 83, 0],
        [1, "de", 39, 207, 76, 0],
        [1, "de", 39, 208, 86, 0],
        [1, "de", 39, 218, 87, 0],
        [1, "de", 39, 222, 93, 0],
        [1, "de", 39, 216, 96, 0],
        [1, "de", 39, 209, 94, 0],
        [1, "de", 39, 201, 87, 0],
        [1, "de", 39, 198, 82, 0],
        [1, "de", 39, 207, 99, 0],
        [1, "de", 39, 200, 97, 0],
        [1, "de", 39, 202, 92, 0],
        [1, "de", 37, 194, 97, 0],
        [1, "de", 39, 204, 88, 0],
        [1, "de", 39, 189, 90, 0],
        [1, "de", 39, 194, 81, 0],
        [1, "de", 39, 188, 98, 0],
        [1, "de", 37, 183, 91, 0],
        [1, "de", 37, 186, 80, 0],
        [1, "de", 37, 191, 72, 0],
        [1, "de", 38, 184, 77, 0],
        [1, "de", 38, 180, 80, 0],
        [1, "de", 39, 173, 75, 0],
        [1, "de", 40, 178, 87, 0],
        [1, "de", 40, 174, 94, 0],
        [1, "de", 40, 192, 93, 0],
        [1, "de", 40, 165, 92, 0],
        [1, "de", 37, 160, 89, 0],
        [1, "de", 38, 161, 85, 0],
        [1, "de", 38, 164, 98, 0],
        [1, "de", 38, 151, 99, 0],
        [1, "de", 38, 151, 85, 0],
        [1, "de", 40, 148, 83, 0],
        [1, "de", 40, 160, 77, 0],
        [1, "de", 40, 167, 77, 0],
        [1, "de", 40, 153, 69, 0],
        [1, "de", 40, 149, 74, 0],
        [1, "de", 37, 161, 64, 0],
        [1, "de", 37, 154, 61, 0],
        [1, "de", 39, 157, 55, 0],
        [1, "de", 39, 174, 64, 0],
        [1, "de", 39, 175, 56, 0],
        [1, "de", 39, 149, 67, 0],
        [1, "de", 12, 218, 96, 0],
        [1, "de", 13, 212, 95, 0],
        [1, "de", 14, 204, 85, 0],
        [1, "de", 15, 215, 85, 0],
        [1, "de", 15, 197, 97, 0],
        [1, "de", 12, 198, 87, 0],
        [1, "de", 14, 196, 77, 0],
        [1, "de", 13, 194, 86, 0],
        [1, "de", 15, 181, 84, 0],
        [1, "de", 14, 184, 79, 0],
        [1, "de", 14, 188, 93, 0],
        [1, "de", 13, 180, 87, 0],
        [1, "de", 13, 178, 96, 0],
        [1, "de", 13, 163, 95, 0],
        [1, "de", 15, 172, 88, 0],
        [1, "de", 15, 176, 75, 0],
        [1, "de", 14, 172, 72, 0],
        [1, "de", 14, 169, 82, 0],
        [1, "de", 13, 164, 78, 0],
        [1, "de", 13, 158, 87, 0],
        [1, "de", 13, 149, 86, 0],
        [1, "de", 15, 154, 91, 0],
        [1, "de", 15, 160, 74, 0],
        [1, "de", 14, 152, 76, 0],
        [1, "de", 14, 158, 63, 0],
        [1, "de", 14, 150, 60, 0],
        [1, "de", 12, 169, 59, 0],
        [1, "de", 13, 173, 61, 0],
        [1, "cs", 1, 143, 104, 1],
        [1, "cs", 0, 141, 102, 1],
        [1, "cs", 3, 138, 102, 1],
        [1, "cs", 2, 139, 102, 1],
        [1, "cs", 2, 140, 102, 1],
        [1, "cs", 3, 143, 107, 1],
        [1, "cs", 0, 143, 106, 1],
        [1, "cs", 2, 143, 105, 1],
        [1, "cs", 2, 142, 103, 1],
        [1, "cs", 0, 142, 104, 1],
        [1, "cs", 2, 141, 103, 1],
        [1, "cs", 3, 142, 105, 1],
        [1, "cs", 3, 140, 103, 1],
        [1, "cs", 3, 141, 104, 1],
        [1, "la", 4, 151, 23, 1],
        [1, "la", 4, 150, 22, 1],
        [1, "la", 1, 149, 21, 1],
        [1, "la", 4, 148, 21, 1],
        [1, "la", 2, 147, 20, 1],
        [1, "la", 4, 147, 19, 1],
        [1, "la", 5, 147, 18, 1],
        [1, "la", 1, 147, 17, 1],
        [1, "la", 3, 144, 9, 1],
        [1, "la", 5, 147, 16, 1],
        [1, "la", 2, 147, 15, 1],
        [1, "la", 4, 147, 14, 1],
        [1, "la", 4, 145, 11, 1],
        [1, "la", 5, 145, 12, 1],
        [1, "la", 1, 146, 13, 1],
        [1, "la", 2, 145, 13, 1],
        [1, "la", 3, 155, 25, 1],
        [1, "la", 0, 155, 24, 1],
        [1, "la", 3, 153, 26, 1],
        [1, "cs", 0, 151, 24, 1],
        [1, "cs", 0, 153, 22, 1],
        [1, "cs", 3, 152, 22, 1],
        [1, "cs", 3, 154, 22, 1],
        [1, "cs", 1, 157, 26, 1],
        [1, "cs", 2, 157, 24, 1],
        [1, "cs", 2, 156, 26, 1],
        [1, "cs", 2, 154, 28, 1],
        [1, "cs", 2, 151, 26, 1],
        [1, "cs", 2, 152, 25, 1],
        [1, "cs", 2, 151, 25, 1],
        [1, "cs", 2, 156, 27, 1],
        [1, "cs", 2, 157, 23, 1],
        [1, "cs", 2, 157, 22, 1],
        [1, "cs", 3, 150, 24, 1],
        [1, "cs", 3, 150, 23, 1],
        [1, "de", 38, 155, 29, 0],
        [1, "de", 12, 157, 27, 0],
        [1, "de", 14, 153, 29, 0],
        [1, "de", 15, 158, 23, 0],
        [1, "de", 13, 156, 21, 0],
        [1, "de", 13, 147, 36, 0],
        [1, "de", 13, 161, 56, 0],
        [1, "de", 13, 147, 79, 0],
        [1, "de", 12, 157, 99, 0],
        [1, "de", 12, 172, 99, 0],
        [1, "la", 3, 143, 102, 1],
        [1, "la", 4, 149, 96, 1],
        [1, "la", 4, 145, 102, 1],
        [1, "la", 1, 148, 97, 1],
        [1, "la", 5, 148, 98, 1],
        [1, "cs", 3, 144, 104, 1],
        [1, "cs", 3, 144, 103, 1],
        [1, "cs", 3, 145, 103, 1],
        [1, "cs", 3, 145, 104, 1],
        [1, "cs", 3, 142, 101, 1],
        [1, "cs", 3, 143, 100, 1],
        [1, "cs", 3, 141, 101, 1],
        [1, "cs", 3, 142, 100, 1],
        [1, "cs", 0, 141, 100, 1],
        [1, "cs", 2, 140, 101, 1],
        [1, "cs", 2, 144, 105, 1],
        [1, "cs", 3, 146, 103, 1],
        [1, "cs", 3, 146, 102, 1],
        [1, "cs", 3, 150, 95, 1],
        [1, "cs", 0, 150, 97, 1],
        [1, "cs", 2, 151, 98, 1],
        [1, "cs", 0, 153, 97, 1],
        [1, "cs", 3, 153, 96, 1],
        [1, "cs", 2, 149, 95, 1],
        [1, "s", 0, 213, 127, 1],
        [1, "plm", 1, 214, 131, 0],
        [1, "plm", 1, 207, 128, 0],
        [1, "plm", 0, 208, 127, 0],
        [1, "s", 1, 207, 132, 1],
        [1, "s", 2, 208, 133, 1],
        [1, "plm", 0, 217, 132, 0],
        [1, "plm", 2, 186, 158, 0],
        [1, "plm", 0, 184, 160, 0],
        [1, "s", 1, 183, 156, 1],
        [1, "s", 2, 186, 159, 1],
        [1, "p", 0, 182, 157, 1],
        [1, "p", 0, 114, 205, 1],
        [1, "plm", 1, 117, 204, 0],
        [1, "plm", 0, 117, 205, 0],
        [1, "plm", 2, 112, 204, 0],
        [1, "s", 2, 114, 207, 1],
        [1, "s", 2, 115, 204, 1],
        [1, "plm", 2, 122, 151, 0],
        [1, "plm", 1, 123, 150, 0],
        [1, "plm", 1, 117, 151, 0],
        [1, "s", 0, 118, 150, 1],
        [1, "s", 1, 122, 152, 1],
        [1, "plm", 2, 156, 130, 0],
        [1, "plm", 1, 154, 127, 0],
        [1, "s", 0, 153, 128, 1],
        [1, "s", 2, 152, 130, 1],
        [1, "p", 0, 123, 65, 1],
        [1, "plm", 2, 125, 62, 0],
        [1, "plm", 1, 124, 62, 0],
        [1, "plm", 0, 120, 65, 0],
        [1, "s", 1, 125, 63, 1],
        [1, "s", 1, 121, 64, 1],
        [1, "s", 2, 122, 62, 1],
        [1, "cs", 0, 140, 106, 1],
        [1, "cs", 2, 144, 106, 1],
        [1, "cs", 2, 145, 105, 1],
        [1, "cs", 2, 144, 107, 1],
        [1, "cs", 2, 141, 106, 1],
        [1, "cs", 2, 141, 105, 1],
        [1, "cs", 2, 140, 105, 1],
        [1, "cs", 2, 140, 104, 1],
        [1, "cs", 1, 138, 103, 1],
        [1, "cs", 0, 139, 104, 1],
        [1, "cs", 2, 139, 103, 1],
        [1, "cs", 2, 139, 105, 1],
        [1, "cs", 2, 142, 106, 1],
        [1, "cs", 2, 142, 107, 1],
        [1, "cs", 2, 139, 101, 1],
        [1, "de", 19, 27, 264, 0],
        [1, "la", 4, 147, 99, 1],
        [1, "la", 1, 146, 100, 1],
        [1, "la", 4, 145, 101, 1],
        [1, "cs", 1, 215, 47, 1],
        [1, "cs", 2, 216, 47, 1],
        [1, "cs", 2, 215, 48, 1],
        [1, "la", 4, 214, 45, 1],
        [1, "la", 4, 215, 45, 1],
        [1, "la", 0, 216, 46, 1],
        [1, "la", 4, 216, 48, 1],
        [1, "la", 4, 216, 49, 1],
        [1, "la", 4, 217, 50, 1],
        [1, "la", 3, 214, 49, 1],
        [1, "la", 4, 211, 45, 1],
        [1, "la", 3, 213, 47, 1],
        [1, "cs", 2, 224, 48, 1],
        [1, "plm", 2, 111, 243, 0],
        [1, "plm", 1, 108, 246, 0],
        [1, "s", 1, 110, 243, 1],
        [1, "s", 0, 108, 245, 1],
        [1, "s", 0, 121, 276, 1],
        [1, "plm", 2, 122, 277, 0],
        [1, "plm", 2, 117, 276, 0],
        [1, "plm", 1, 118, 277, 0],
        [1, "s", 1, 118, 278, 1],
        [1, "cs", 2, 66, 16, 1],
        [1, "cs", 3, 67, 16, 1],
        [1, "cs", 0, 67, 17, 1],
        [1, "cs", 2, 66, 17, 1],
        [1, "cs", 3, 66, 18, 1],
        [1, "cs", 3, 68, 17, 1],
        [1, "cs", 0, 36, 16, 1],
        [1, "cs", 2, 36, 17, 1],
        [1, "cs", 2, 36, 18, 1],
        [1, "cs", 3, 35, 17, 1],
        [1, "cs", 3, 36, 19, 1],
        [1, "cs", 3, 35, 18, 1],
        [1, "cs", 2, 66, 30, 1],
        [1, "cs", 2, 66, 23, 1],
        [1, "cs", 3, 66, 22, 1],
        [1, "cs", 3, 66, 31, 1],
        [1, "cs", 2, 36, 30, 1],
        [1, "cs", 2, 36, 23, 1],
        [1, "cs", 1, 36, 22, 1],
        [1, "cs", 2, 36, 31, 1],
        [1, "cs", 3, 42, 13, 1],
        [1, "cs", 0, 43, 13, 1],
        [1, "cs", 2, 44, 13, 1],
        [1, "cs", 3, 42, 16, 1],
        [1, "cs", 3, 41, 16, 1],
        [1, "cs", 3, 40, 16, 1],
        [1, "cs", 0, 42, 19, 1],
        [1, "cs", 3, 43, 19, 1],
        [1, "cs", 3, 44, 19, 1],
        [1, "cs", 3, 45, 19, 1],
        [1, "cs", 2, 46, 19, 1],
        [1, "cs", 0, 43, 22, 1],
        [1, "cs", 2, 42, 22, 1],
        [1, "cs", 1, 41, 22, 1],
        [1, "cs", 0, 40, 22, 1],
        [1, "cs", 3, 39, 17, 1],
        [1, "cs", 1, 44, 26, 1],
        [1, "cs", 2, 45, 26, 1],
        [1, "cs", 3, 46, 26, 1],
        [1, "cs", 0, 47, 26, 1],
        [1, "cs", 2, 48, 26, 1],
        [1, "cs", 3, 47, 25, 1],
        [1, "cs", 3, 43, 27, 1],
        [1, "cs", 1, 49, 32, 1],
        [1, "cs", 2, 50, 32, 1],
        [1, "cs", 2, 51, 32, 1],
        [1, "cs", 2, 52, 32, 1],
        [1, "d", 0, 51, 29, 1],
        [1, "d", 1, 53, 29, 1],
        [1, "d", 1, 49, 29, 1],
        [1, "cs", 3, 55, 31, 1],
        [1, "cs", 3, 54, 32, 1],
        [1, "cs", 3, 47, 31, 1],
        [1, "cs", 3, 48, 32, 1],
        [1, "cs", 0, 51, 33, 1],
        [1, "cs", 2, 52, 33, 1],
        [1, "cs", 2, 50, 33, 1],
        [1, "cs", 3, 56, 30, 1],
        [1, "cs", 3, 56, 31, 1],
        [1, "cs", 3, 46, 30, 1],
        [1, "cs", 3, 46, 31, 1],
        [1, "cs", 1, 53, 33, 1],
        [1, "cs", 2, 49, 33, 1],
        [1, "cs", 2, 53, 32, 1],
        [1, "cs", 0, 55, 32, 1],
        [1, "cs", 0, 47, 32, 1],
        [1, "d", 1, 54, 35, 1],
        [1, "fo", 2, 35, 15, 0],
        [1, "fo", 2, 36, 12, 0],
        [1, "fo", 2, 67, 15, 0],
        [1, "cs", 3, 60, 13, 1],
        [1, "cs", 2, 59, 13, 1],
        [1, "cs", 1, 58, 13, 1],
        [1, "cs", 3, 62, 16, 1],
        [1, "cs", 0, 61, 16, 1],
        [1, "cs", 3, 60, 16, 1],
        [1, "cs", 3, 63, 17, 1],
        [1, "cs", 2, 60, 19, 1],
        [1, "cs", 1, 59, 19, 1],
        [1, "cs", 3, 58, 19, 1],
        [1, "cs", 2, 57, 19, 1],
        [1, "cs", 2, 56, 19, 1],
        [1, "cs", 0, 55, 18, 1],
        [1, "cs", 2, 55, 17, 1],
        [1, "cs", 2, 63, 23, 1],
        [1, "cs", 0, 62, 22, 1],
        [1, "cs", 2, 61, 22, 1],
        [1, "cs", 1, 60, 22, 1],
        [1, "cs", 0, 59, 22, 1],
        [1, "cs", 2, 54, 26, 1],
        [1, "cs", 2, 55, 26, 1],
        [1, "cs", 2, 56, 26, 1],
        [1, "cs", 1, 57, 26, 1],
        [1, "cs", 2, 58, 26, 1],
        [1, "cs", 2, 59, 27, 1],
        [1, "cs", 2, 68, 16, 1],
        [1, "cs", 2, 68, 15, 1],
        [1, "cs", 3, 69, 15, 1],
        [1, "cs", 3, 70, 15, 1],
        [1, "cs", 3, 70, 14, 1],
        [1, "cs", 1, 69, 14, 1],
        [1, "cs", 1, 69, 16, 1],
        [1, "cs", 2, 71, 13, 1],
        [1, "cs", 2, 71, 14, 1],
        [1, "cs", 3, 72, 13, 1],
        [1, "cs", 3, 70, 8, 1],
        [1, "cs", 3, 71, 8, 1],
        [1, "cs", 2, 72, 8, 1],
        [1, "cs", 0, 73, 8, 1],
        [1, "cs", 3, 74, 9, 1],
        [1, "cs", 3, 74, 8, 1],
        [1, "cs", 0, 75, 8, 1],
        [1, "cs", 3, 76, 8, 1],
        [1, "cs", 3, 75, 9, 1],
        [1, "cs", 3, 75, 10, 1],
        [1, "cs", 0, 76, 10, 1],
        [1, "cs", 0, 76, 16, 1],
        [1, "cs", 3, 76, 15, 1],
        [1, "cs", 3, 75, 16, 1],
        [1, "cs", 2, 77, 11, 1],
        [1, "cs", 2, 77, 14, 1],
        [1, "cs", 3, 77, 12, 1],
        [1, "cs", 3, 77, 13, 1],
        [1, "cs", 3, 77, 15, 1],
        [1, "cs", 0, 74, 18, 1],
        [1, "cs", 1, 75, 17, 1],
        [1, "cs", 2, 74, 17, 1],
        [1, "cs", 3, 73, 19, 1],
        [1, "cs", 3, 67, 23, 1],
        [1, "cs", 0, 68, 23, 1],
        [1, "cs", 0, 72, 20, 1],
        [1, "cs", 2, 73, 20, 1],
        [1, "cs", 2, 74, 19, 1],
        [1, "cs", 2, 74, 36, 1],
        [1, "cs", 2, 77, 27, 1],
        [1, "cs", 2, 76, 26, 1],
        [1, "cs", 2, 75, 26, 1],
        [1, "cs", 0, 74, 26, 1],
        [1, "cs", 2, 75, 25, 1],
        [1, "cs", 0, 76, 25, 1],
        [1, "cs", 1, 77, 23, 1],
        [1, "cs", 2, 77, 16, 1],
        [1, "cs", 2, 76, 17, 1],
        [1, "cs", 2, 76, 24, 1],
        [1, "cs", 2, 77, 24, 1],
        [1, "cs", 2, 77, 25, 1],
        [1, "cs", 2, 77, 26, 1],
        [1, "cs", 1, 75, 27, 1],
        [1, "cs", 3, 76, 27, 1],
        [1, "cs", 2, 67, 24, 1],
        [1, "cs", 2, 66, 24, 1],
        [1, "cs", 2, 73, 26, 1],
        [1, "cs", 2, 74, 27, 1],
        [1, "cs", 2, 74, 25, 1],
        [1, "cs", 2, 66, 19, 1],
        [1, "cs", 2, 66, 20, 1],
        [1, "cs", 2, 66, 21, 1],
        [1, "cs", 2, 67, 18, 1],
        [1, "cs", 2, 67, 22, 1],
        [1, "cs", 0, 77, 36, 1],
        [1, "cs", 0, 77, 32, 1],
        [1, "cs", 1, 75, 35, 1],
        [1, "cs", 2, 75, 36, 1],
        [1, "cs", 2, 76, 36, 1],
        [1, "cs", 2, 77, 35, 1],
        [1, "cs", 2, 77, 34, 1],
        [1, "cs", 2, 76, 35, 1],
        [1, "cs", 2, 77, 33, 1],
        [1, "cs", 2, 77, 31, 1],
        [1, "cs", 0, 77, 29, 1],
        [1, "cs", 0, 71, 32, 1],
        [1, "cs", 0, 76, 34, 1],
        [1, "cs", 2, 77, 30, 1],
        [1, "cs", 2, 77, 28, 1],
        [1, "cs", 2, 76, 28, 1],
        [1, "cs", 2, 75, 28, 1],
        [1, "cs", 2, 76, 29, 1],
        [1, "cs", 2, 76, 33, 1],
        [1, "cs", 2, 70, 32, 1],
        [1, "cs", 2, 69, 31, 1],
        [1, "cs", 0, 68, 31, 1],
        [1, "cs", 2, 67, 31, 1],
        [1, "cs", 2, 67, 30, 1],
        [1, "cs", 2, 69, 32, 1],
        [1, "cs", 1, 67, 32, 1],
        [1, "cs", 2, 68, 32, 1],
        [1, "cs", 2, 66, 32, 1],
        [1, "cs", 2, 66, 33, 1],
        [1, "cs", 2, 67, 33, 1],
        [1, "cs", 2, 70, 33, 1],
        [1, "cs", 2, 69, 33, 1],
        [1, "cs", 2, 68, 33, 1],
        [1, "cs", 0, 68, 34, 1],
        [1, "cs", 1, 66, 35, 1],
        [1, "cs", 2, 67, 34, 1],
        [1, "cs", 2, 66, 34, 1],
        [1, "cs", 2, 65, 35, 1],
        [1, "cs", 2, 64, 36, 1],
        [1, "cs", 2, 65, 36, 1],
        [1, "cs", 2, 67, 35, 1],
        [1, "cs", 2, 66, 36, 1],
        [1, "cs", 2, 69, 34, 1],
        [1, "cs", 2, 68, 35, 1],
        [1, "cs", 2, 76, 9, 1],
        [1, "cs", 2, 77, 9, 1],
        [1, "cs", 2, 77, 8, 1],
        [1, "cs", 2, 77, 10, 1],
        [1, "cs", 2, 78, 8, 1],
        [1, "cs", 2, 78, 9, 1],
        [1, "cs", 2, 78, 10, 1],
        [1, "cs", 2, 78, 11, 1],
        [1, "cs", 2, 78, 12, 1],
        [1, "cs", 2, 78, 13, 1],
        [1, "cs", 0, 79, 9, 1],
        [1, "cs", 1, 79, 11, 1],
        [1, "cs", 3, 79, 8, 1],
        [1, "cs", 3, 79, 10, 1],
        [1, "cs", 3, 79, 12, 1],
        [1, "cs", 3, 80, 8, 1],
        [1, "cs", 1, 80, 10, 1],
        [1, "cs", 2, 80, 9, 1],
        [1, "cs", 2, 80, 11, 1],
        [1, "cs", 2, 81, 8, 1],
        [1, "cs", 2, 81, 9, 1],
        [1, "cs", 2, 81, 10, 1],
        [1, "cs", 2, 78, 14, 1],
        [1, "cs", 2, 79, 13, 1],
        [1, "cs", 2, 78, 15, 1],
        [1, "cs", 2, 80, 12, 1],
        [1, "cs", 0, 79, 14, 1],
        [1, "cs", 0, 82, 9, 1],
        [1, "cs", 2, 82, 8, 1],
        [1, "cs", 2, 82, 10, 1],
        [1, "cs", 2, 81, 11, 1],
        [1, "cs", 3, 80, 13, 1],
        [1, "cs", 1, 78, 30, 1],
        [1, "cs", 1, 78, 34, 1],
        [1, "cs", 1, 78, 27, 1],
        [1, "cs", 0, 78, 25, 1],
        [1, "cs", 0, 79, 29, 1],
        [1, "cs", 0, 79, 32, 1],
        [1, "cs", 0, 79, 35, 1],
        [1, "cs", 2, 78, 35, 1],
        [1, "cs", 2, 78, 36, 1],
        [1, "cs", 2, 79, 34, 1],
        [1, "cs", 2, 78, 33, 1],
        [1, "cs", 2, 79, 33, 1],
        [1, "cs", 2, 78, 32, 1],
        [1, "cs", 2, 78, 31, 1],
        [1, "cs", 2, 79, 31, 1],
        [1, "cs", 2, 79, 30, 1],
        [1, "cs", 2, 78, 29, 1],
        [1, "cs", 2, 78, 28, 1],
        [1, "cs", 2, 79, 28, 1],
        [1, "cs", 2, 79, 27, 1],
        [1, "cs", 2, 78, 26, 1],
        [1, "cs", 2, 79, 26, 1],
        [1, "cs", 2, 78, 24, 1],
        [1, "cs", 2, 80, 34, 1],
        [1, "cs", 2, 80, 33, 1],
        [1, "cs", 2, 80, 31, 1],
        [1, "cs", 2, 80, 30, 1],
        [1, "cs", 2, 80, 32, 1],
        [1, "cs", 2, 80, 29, 1],
        [1, "cs", 2, 80, 28, 1],
        [1, "cs", 2, 80, 27, 1],
        [1, "cs", 0, 81, 30, 1],
        [1, "cs", 1, 81, 32, 1],
        [1, "cs", 1, 81, 28, 1],
        [1, "cs", 2, 81, 29, 1],
        [1, "cs", 2, 81, 31, 1],
        [1, "cs", 2, 81, 33, 1],
        [1, "cs", 2, 82, 30, 1],
        [1, "cs", 2, 82, 31, 1],
        [1, "cs", 2, 82, 32, 1],
        [1, "cs", 0, 37, 36, 1],
        [1, "cs", 2, 38, 36, 1],
        [1, "cs", 2, 37, 35, 1],
        [1, "cs", 2, 36, 36, 1],
        [1, "cs", 2, 34, 35, 1],
        [1, "cs", 2, 35, 35, 1],
        [1, "cs", 2, 36, 35, 1],
        [1, "cs", 0, 33, 34, 1],
        [1, "cs", 1, 35, 34, 1],
        [1, "cs", 2, 36, 34, 1],
        [1, "cs", 2, 34, 34, 1],
        [1, "cs", 2, 36, 33, 1],
        [1, "cs", 2, 35, 33, 1],
        [1, "cs", 2, 34, 33, 1],
        [1, "cs", 2, 33, 33, 1],
        [1, "cs", 2, 31, 32, 1],
        [1, "cs", 1, 36, 32, 1],
        [1, "cs", 1, 32, 32, 1],
        [1, "cs", 2, 35, 32, 1],
        [1, "cs", 2, 33, 32, 1],
        [1, "cs", 2, 32, 33, 1],
        [1, "cs", 2, 33, 31, 1],
        [1, "cs", 2, 34, 31, 1],
        [1, "cs", 2, 35, 31, 1],
        [1, "cs", 0, 34, 32, 1],
        [1, "cs", 2, 35, 30, 1],
        [1, "cs", 1, 39, 23, 1],
        [1, "cs", 3, 39, 22, 1],
        [1, "cs", 3, 36, 24, 1],
        [1, "cs", 3, 35, 24, 1],
        [1, "cs", 2, 34, 23, 1],
        [1, "cs", 2, 35, 23, 1],
        [1, "cs", 2, 36, 20, 1],
        [1, "cs", 2, 36, 21, 1],
        [1, "cs", 2, 35, 22, 1],
        [1, "cs", 2, 35, 16, 1],
        [1, "cs", 2, 34, 16, 1],
        [1, "cs", 2, 33, 16, 1],
        [1, "cs", 0, 34, 17, 1],
        [1, "cs", 0, 32, 15, 1],
        [1, "cs", 2, 31, 14, 1],
        [1, "cs", 3, 30, 13, 1],
        [1, "cs", 1, 33, 15, 1],
        [1, "cs", 1, 31, 13, 1],
        [1, "cs", 2, 32, 14, 1],
        [1, "cs", 0, 31, 8, 1],
        [1, "cs", 2, 32, 8, 1],
        [1, "cs", 2, 25, 13, 1],
        [1, "cs", 0, 25, 12, 1],
        [1, "cs", 2, 25, 11, 1],
        [1, "cs", 3, 25, 10, 1],
        [1, "cs", 0, 25, 9, 1],
        [1, "cs", 2, 25, 8, 1],
        [1, "cs", 2, 26, 8, 1],
        [1, "cs", 2, 27, 8, 1],
        [1, "cs", 2, 28, 8, 1],
        [1, "cs", 2, 29, 8, 1],
        [1, "cs", 2, 30, 8, 1],
        [1, "cs", 2, 26, 9, 1],
        [1, "cs", 2, 27, 9, 1],
        [1, "cs", 2, 26, 10, 1],
        [1, "cs", 1, 27, 10, 1],
        [1, "cs", 3, 28, 9, 1],
        [1, "cs", 3, 25, 14, 1],
        [1, "cs", 0, 25, 15, 1],
        [1, "cs", 2, 26, 15, 1],
        [1, "cs", 3, 27, 16, 1],
        [1, "cs", 0, 28, 17, 1],
        [1, "cs", 1, 29, 18, 1],
        [1, "cs", 2, 26, 16, 1],
        [1, "cs", 2, 25, 16, 1],
        [1, "cs", 2, 27, 17, 1],
        [1, "cs", 2, 26, 17, 1],
        [1, "cs", 1, 27, 18, 1],
        [1, "cs", 2, 28, 18, 1],
        [1, "cs", 2, 30, 19, 1],
        [1, "cs", 2, 29, 19, 1],
        [1, "cs", 2, 24, 14, 1],
        [1, "cs", 2, 24, 15, 1],
        [1, "cs", 0, 23, 14, 1],
        [1, "cs", 2, 24, 10, 1],
        [1, "cs", 2, 24, 11, 1],
        [1, "cs", 2, 24, 12, 1],
        [1, "cs", 2, 24, 13, 1],
        [1, "cs", 1, 23, 10, 1],
        [1, "cs", 0, 22, 8, 1],
        [1, "cs", 0, 22, 12, 1],
        [1, "cs", 1, 23, 8, 1],
        [1, "cs", 2, 24, 8, 1],
        [1, "cs", 2, 24, 9, 1],
        [1, "cs", 2, 23, 9, 1],
        [1, "cs", 2, 22, 9, 1],
        [1, "cs", 2, 22, 10, 1],
        [1, "cs", 2, 22, 11, 1],
        [1, "cs", 2, 23, 11, 1],
        [1, "cs", 2, 23, 12, 1],
        [1, "cs", 2, 23, 13, 1],
        [1, "cs", 2, 22, 13, 1],
        [1, "cs", 2, 21, 9, 1],
        [1, "cs", 2, 21, 8, 1],
        [1, "cs", 2, 29, 25, 1],
        [1, "cs", 2, 25, 24, 1],
        [1, "cs", 2, 26, 25, 1],
        [1, "cs", 2, 27, 25, 1],
        [1, "cs", 0, 28, 25, 1],
        [1, "cs", 1, 25, 23, 1],
        [1, "cs", 2, 26, 24, 1],
        [1, "cs", 0, 24, 25, 1],
        [1, "cs", 3, 23, 24, 1],
        [1, "cs", 3, 24, 24, 1],
        [1, "cs", 3, 25, 25, 1],
        [1, "cs", 3, 23, 25, 1],
        [1, "cs", 1, 22, 26, 1],
        [1, "cs", 1, 26, 26, 1],
        [1, "cs", 1, 29, 26, 1],
        [1, "cs", 2, 23, 26, 1],
        [1, "cs", 2, 24, 26, 1],
        [1, "cs", 2, 25, 26, 1],
        [1, "cs", 2, 27, 26, 1],
        [1, "cs", 2, 28, 26, 1],
        [1, "cs", 2, 30, 26, 1],
        [1, "cs", 2, 29, 27, 1],
        [1, "cs", 2, 28, 28, 1],
        [1, "cs", 1, 26, 29, 1],
        [1, "cs", 0, 28, 27, 1],
        [1, "cs", 2, 27, 28, 1],
        [1, "cs", 2, 27, 27, 1],
        [1, "cs", 2, 26, 28, 1],
        [1, "cs", 2, 26, 27, 1],
        [1, "cs", 2, 25, 28, 1],
        [1, "cs", 2, 25, 27, 1],
        [1, "cs", 2, 23, 27, 1],
        [1, "cs", 2, 22, 27, 1],
        [1, "cs", 2, 24, 27, 1],
        [1, "cs", 0, 24, 28, 1],
        [1, "cs", 0, 25, 32, 1],
        [1, "cs", 1, 24, 30, 1],
        [1, "cs", 2, 25, 31, 1],
        [1, "cs", 2, 25, 30, 1],
        [1, "cs", 2, 25, 29, 1],
        [1, "cs", 2, 24, 29, 1],
        [1, "cs", 2, 23, 29, 1],
        [1, "cs", 2, 26, 33, 1],
        [1, "cs", 0, 26, 34, 1],
        [1, "cs", 2, 27, 35, 1],
        [1, "cs", 2, 22, 28, 1],
        [1, "cs", 2, 23, 28, 1],
        [1, "cs", 2, 24, 31, 1],
        [1, "cs", 2, 24, 32, 1],
        [1, "cs", 2, 25, 33, 1],
        [1, "cs", 2, 26, 35, 1],
        [1, "cs", 2, 24, 33, 1],
        [1, "cs", 2, 25, 34, 1],
        [1, "cs", 1, 22, 29, 1],
        [1, "cs", 1, 24, 34, 1],
        [1, "cs", 0, 23, 35, 1],
        [1, "cs", 2, 25, 35, 1],
        [1, "cs", 2, 24, 35, 1],
        [1, "cs", 2, 23, 34, 1],
        [1, "cs", 2, 23, 33, 1],
        [1, "cs", 0, 22, 33, 1],
        [1, "cs", 1, 23, 32, 1],
        [1, "cs", 2, 22, 32, 1],
        [1, "cs", 2, 23, 31, 1],
        [1, "cs", 2, 23, 30, 1],
        [1, "cs", 2, 22, 30, 1],
        [1, "cs", 2, 22, 31, 1],
        [1, "cs", 1, 21, 31, 1],
        [1, "cs", 0, 21, 29, 1],
        [1, "cs", 2, 21, 30, 1],
        [1, "cs", 2, 24, 36, 1],
        [1, "cs", 2, 26, 36, 1],
        [1, "cs", 2, 25, 36, 1],
        [1, "cs", 2, 27, 36, 1],
        [1, "cs", 2, 28, 36, 1],
        [1, "d", 2, 83, 65, 1],
        [1, "d", 2, 16, 67, 1],
        [1, "g", 0, 15, 17, 1],
        [1, "s", 0, 18, 13, 1],
        [1, "s", 0, 85, 11, 1],
        [1, "f", 0, 41, 102, 1],
        [1, "f", 0, 42, 124, 1],
        [1, "f", 0, 64, 116, 1],
        [1, "f", 0, 74, 104, 1],
        [1, "f", 0, 70, 87, 1],
        [1, "f", 0, 27, 96, 1],
        [1, "f", 0, 22, 79, 1],
        [1, "f", 0, 20, 117, 1],
        [1, "f", 0, 30, 137, 1],
        [1, "f", 0, 59, 146, 1],
        [1, "f", 0, 52, 147, 1],
        [1, "f", 0, 20, 149, 1],
        [1, "f", 0, 36, 146, 1],
        [1, "f", 0, 62, 124, 1],
        [1, "g", 1, 34, 121, 1],
        [1, "g", 1, 52, 116, 1],
        [1, "g", 1, 78, 116, 1],
        [1, "g", 1, 71, 129, 1],
        [1, "s", 0, 53, 100, 1],
        [1, "s", 0, 73, 111, 1],
        [1, "s", 0, 77, 126, 1],
        [1, "s", 0, 48, 90, 1],
        [1, "s", 0, 19, 102, 1],
        [1, "s", 0, 18, 127, 1],
        [1, "s", 0, 35, 159, 1],
        [1, "s", 0, 65, 54, 1],
        [1, "s", 0, 44, 52, 1],
        [1, "s", 0, 26, 51, 1],
        [1, "f", 1, 56, 136, 1],
        [1, "f", 1, 41, 133, 1],
        [1, "f", 1, 80, 120, 1],
        [1, "f", 1, 16, 117, 1],
        [1, "f", 1, 13, 99, 1],
        [1, "f", 1, 17, 89, 1],
        [1, "f", 1, 90, 98, 1],
        [1, "f", 1, 84, 95, 1],
        [1, "f", 1, 16, 57, 1],
        [1, "f", 1, 77, 53, 1],
        [1, "d", 1, 48, 35, 1],
        [1, "de", 8, 33, 13, 0],
        [1, "de", 8, 30, 9, 0],
        [1, "de", 9, 32, 30, 0],
        [1, "de", 10, 30, 25, 0],
        [1, "de", 10, 33, 21, 0],
        [1, "de", 8, 31, 34, 0],
        [1, "de", 8, 67, 29, 0],
        [1, "de", 9, 70, 22, 0],
        [1, "de", 10, 70, 16, 0],
        [1, "de", 10, 75, 11, 0],
        [1, "de", 8, 68, 10, 0],
        [1, "de", 8, 75, 30, 0],
        [1, "de", 11, 71, 33, 0],
        [1, "de", 11, 72, 25, 0],
        [1, "de", 11, 64, 25, 0],
        [1, "de", 11, 52, 10, 0],
        [1, "de", 11, 31, 15, 0],
        [1, "de", 30, 29, 14, 0],
        [1, "de", 30, 36, 15, 0],
        [1, "de", 30, 34, 29, 0],
        [1, "de", 30, 30, 29, 0],
        [1, "de", 30, 71, 29, 0],
        [1, "de", 28, 68, 25, 0],
        [1, "de", 28, 75, 15, 0],
        [1, "de", 27, 67, 19, 0],
        [1, "de", 29, 72, 10, 0],
        [1, "de", 29, 75, 32, 0],
        [1, "de", 29, 32, 20, 0],
        [1, "fo", 1, 39, 12, 0],
        [1, "fo", 1, 34, 14, 0],
        [1, "fo", 1, 74, 28, 0],
        [1, "fo", 2, 74, 29, 0],
        [1, "fo", 2, 69, 30, 0],
        [1, "fo", 2, 77, 22, 0],
        [1, "fo", 2, 74, 21, 0],
        [1, "fo", 2, 76, 18, 0],
        [1, "fo", 1, 78, 17, 0],
        [1, "fo", 1, 28, 19, 0],
        [1, "fo", 2, 27, 24, 0],
        [1, "fo", 2, 24, 17, 0],
        [1, "fo", 2, 29, 21, 0],
        [1, "fo", 1, 27, 32, 0],
        [1, "fo", 2, 30, 33, 0],
        [1, "fo", 1, 29, 28, 0],
        [1, "fo", 2, 28, 31, 0],
        [1, "fo", 2, 20, 24, 0],
        [1, "fo", 2, 20, 26, 0],
        [1, "fo", 2, 23, 16, 0],
        [1, "fo", 2, 11, 25, 0],
        [1, "de", 33, 29, 22, 0],
        [1, "de", 34, 32, 25, 0],
        [1, "de", 34, 30, 18, 0],
        [1, "de", 33, 78, 18, 0],
        [1, "de", 33, 73, 35, 0],
        [1, "de", 36, 72, 23, 0],
        [1, "de", 35, 25, 18, 0],
        [1, "d", 1, 83, 41, 1],
        [1, "d", 1, 17, 40, 1],
        [1, "cs", 2, 224, 104, 1],
        [1, "cs", 0, 224, 105, 1],
        [1, "cs", 3, 224, 106, 1],
        [1, "la", 3, 216, 128, 1],
        [1, "la", 0, 215, 126, 1],
        [1, "s", 0, 216, 130, 1],
        [1, "s", 1, 217, 129, 1],
        [1, "s", 0, 218, 128, 1],
        [1, "s", 1, 217, 127, 1],
        [1, "s", 0, 217, 126, 1],
        [1, "s", 1, 217, 125, 1],
        [1, "s", 0, 216, 124, 1],
        [1, "s", 1, 215, 124, 1],
        [1, "s", 0, 214, 124, 1],
        [1, "s", 1, 213, 125, 1],
        [1, "s", 0, 213, 126, 1],
        [1, "plm", 2, 217, 130, 0],
        [1, "plm", 2, 212, 125, 0],
        [1, "p", 0, 214, 134, 1],
        [1, "s", 1, 211, 126, 1],
        [1, "b", 1, 45, 277, 0],
        [1, "b", 1, 50, 286, 0],
        [1, "b", 2, 51, 284, 0],
        [1, "b", 1, 47, 287, 0],
        [1, "b", 0, 39, 285, 0],
        [1, "b", 3, 40, 283, 0],
        [1, "b", 0, 52, 283, 0],
        [1, "b", 1, 51, 280, 0],
        [1, "g", 0, 45, 269, 1],
        [1, "p", 0, 55, 281, 1],
        [1, "b", 1, 5, 172, 0],
        [1, "b", 2, 6, 172, 0],
        [1, "t", 5, 6, 171, 0],
        [1, "t", 1, 5, 170, 0],
        [1, "t", 1, 5, 164, 0],
        [1, "t", 3, 6, 164, 0],
        [1, "b", 0, 6, 165, 0],
        [1, "t", 3, 5, 165, 0],
        [1, "b", 2, 6, 166, 0],
        [1, "t", 4, 5, 166, 0],
        [1, "t", 4, 6, 167, 0],
        [1, "t", 2, 6, 168, 0],
        [1, "t", 0, 6, 169, 0],
        [1, "t", 4, 6, 170, 0],
        [1, "t", 0, 5, 167, 0],
        [1, "t", 2, 5, 169, 0],
        [1, "b", 0, 5, 168, 0],
        [1, "s", 1, 7, 153, 1],
        [1, "s", 2, 7, 151, 1],
        [1, "de", 5, 7, 152, 0],
        [1, "t", 1, 5, 154, 0],
        [1, "b", 0, 6, 154, 0],
        [1, "t", 2, 6, 155, 0],
        [1, "b", 2, 6, 156, 0],
        [1, "t", 2, 5, 157, 0],
        [1, "t", 4, 5, 155, 0],
        [1, "b", 0, 6, 157, 0],
        [1, "t", 1, 5, 156, 0],
        [1, "t", 5, 6, 158, 0],
        [1, "b", 2, 6, 159, 0],
        [1, "b", 0, 6, 162, 0],
        [1, "t", 4, 6, 163, 0],
        [1, "t", 4, 6, 161, 0],
        [1, "b", 1, 6, 160, 0],
        [1, "b", 2, 5, 163, 0],
        [1, "b", 2, 5, 158, 0],
        [1, "b", 2, 5, 161, 0],
        [1, "t", 1, 5, 162, 0],
        [1, "t", 1, 5, 160, 0],
        [1, "b", 1, 85, 176, 0],
        [1, "b", 2, 83, 178, 0],
        [1, "s", 1, 82, 177, 1],
        [1, "b", 0, 76, 172, 0],
        [1, "b", 3, 76, 174, 0],
        [1, "t", 3, 73, 174, 0],
        [1, "t", 5, 72, 175, 0],
        [1, "t", 5, 87, 173, 0],
        [1, "de", 2, 76, 175, 0],
        [1, "de", 3, 77, 171, 0],
        [1, "de", 3, 86, 177, 0],
        [1, "de", 2, 71, 175, 0],
        [1, "s", 1, 70, 174, 1],
        [1, "r", 48, 174, 0],
        [1, "r", 49, 175, 0],
        [1, "r", 50, 175, 0],
        [1, "r", 51, 175, 0],
        [1, "r", 51, 174, 0],
        [1, "r", 50, 174, 0],
        [1, "r", 49, 174, 0],
        [1, "r", 52, 175, 0],
        [1, "r", 52, 176, 0],
        [1, "r", 51, 176, 0],
        [1, "r", 50, 176, 0],
        [1, "r", 49, 176, 0],
        [1, "r", 48, 175, 0],
        [1, "r", 47, 175, 0],
        [1, "r", 48, 176, 0],
        [1, "r", 69, 163, 0],
        [1, "r", 70, 163, 0],
        [1, "r", 71, 163, 0],
        [1, "r", 73, 163, 0],
        [1, "r", 72, 163, 0],
        [1, "r", 73, 164, 0],
        [1, "r", 72, 164, 0],
        [1, "r", 71, 164, 0],
        [1, "r", 70, 164, 0],
        [1, "r", 69, 164, 0],
        [1, "r", 68, 164, 0],
        [1, "r", 68, 165, 0],
        [1, "r", 69, 165, 0],
        [1, "r", 70, 165, 0],
        [1, "r", 71, 165, 0],
        [1, "r", 72, 165, 0],
        [1, "r", 74, 164, 0],
        [1, "r", 73, 165, 0],
        [1, "r", 72, 166, 0],
        [1, "r", 71, 166, 0],
        [1, "r", 70, 166, 0],
        [1, "r", 74, 165, 0],
        [1, "r", 24, 164, 0],
        [1, "r", 25, 164, 0],
        [1, "r", 27, 164, 0],
        [1, "r", 26, 164, 0],
        [1, "r", 28, 165, 0],
        [1, "r", 26, 165, 0],
        [1, "r", 27, 165, 0],
        [1, "r", 25, 165, 0],
        [1, "r", 24, 165, 0],
        [1, "r", 23, 165, 0],
        [1, "r", 22, 165, 0],
        [1, "r", 21, 165, 0],
        [1, "r", 21, 166, 0],
        [1, "r", 22, 166, 0],
        [1, "r", 23, 166, 0],
        [1, "r", 24, 166, 0],
        [1, "r", 25, 166, 0],
        [1, "r", 26, 166, 0],
        [1, "r", 27, 166, 0],
        [1, "r", 28, 166, 0],
        [1, "r", 28, 167, 0],
        [1, "r", 26, 167, 0],
        [1, "r", 25, 167, 0],
        [1, "r", 24, 167, 0],
        [1, "r", 23, 167, 0],
        [1, "r", 22, 167, 0],
        [1, "r", 27, 167, 0],
        [1, "r", 29, 166, 0],
        [1, "r", 29, 167, 0],
        [1, "r", 28, 168, 0],
        [1, "r", 27, 168, 0],
        [1, "r", 26, 168, 0],
        [1, "r", 25, 168, 0],
        [1, "r", 24, 168, 0],
        [1, "r", 23, 168, 0],
        [1, "r", 27, 169, 0],
        [1, "r", 26, 169, 0],
        [1, "r", 25, 169, 0],
        [1, "r", 24, 169, 0],
        [1, "r", 23, 169, 0],
        [1, "r", 22, 168, 0],
        [1, "r", 21, 167, 0],
        [1, "s", 1, 52, 174, 1],
        [1, "t", 3, 50, 177, 0],
        [1, "t", 4, 49, 177, 0],
        [1, "b", 0, 47, 174, 0],
        [1, "b", 0, 69, 166, 0],
        [1, "t", 2, 68, 166, 0],
        [1, "t", 5, 74, 163, 0],
        [1, "t", 1, 73, 162, 0],
        [1, "s", 0, 73, 166, 1],
        [1, "s", 2, 76, 165, 1],
        [1, "g", 2, 59, 175, 1],
        [1, "p", 0, 78, 168, 1],
        [1, "p", 0, 61, 162, 1],
        [1, "p", 0, 42, 170, 1],
        [1, "p", 0, 20, 174, 1],
        [1, "p", 0, 16, 160, 1],
        [1, "b", 1, 23, 164, 0],
        [1, "b", 1, 28, 169, 0],
        [1, "b", 2, 29, 168, 0],
        [1, "b", 2, 16, 170, 0],
        [1, "t", 1, 15, 171, 0],
        [1, "t", 5, 13, 175, 0],
        [1, "t", 5, 19, 166, 0],
        [1, "t", 5, 26, 163, 0],
        [1, "s", 1, 29, 165, 1],
        [1, "t", 5, 11, 167, 0],
        [1, "t", 0, 29, 176, 0],
        [1, "b", 2, 30, 175, 0],
        [1, "t", 2, 24, 177, 0],
        [1, "b", 1, 37, 174, 0],
        [1, "b", 0, 35, 172, 0],
        [1, "b", 3, 37, 170, 0],
        [1, "t", 4, 38, 169, 0],
        [1, "t", 4, 34, 173, 0],
        [1, "t", 5, 38, 175, 0],
        [1, "b", 2, 39, 173, 0],
        [1, "t", 3, 37, 176, 0],
        [1, "t", 4, 30, 168, 0],
        [1, "s", 2, 35, 176, 1],
        [1, "s", 1, 41, 175, 1],
        [1, "b", 2, 53, 176, 0],
        [1, "t", 5, 55, 173, 0],
        [1, "t", 5, 45, 170, 0],
        [1, "b", 1, 53, 162, 0],
        [1, "b", 0, 50, 164, 0],
        [1, "t", 2, 54, 163, 0],
        [1, "t", 3, 49, 165, 0],
        [1, "t", 4, 48, 160, 0],
        [1, "t", 4, 57, 164, 0],
        [1, "t", 4, 66, 162, 0],
        [1, "b", 1, 86, 161, 0],
        [1, "b", 2, 81, 163, 0],
        [1, "t", 3, 85, 162, 0],
        [1, "t", 5, 81, 162, 0],
        [1, "t", 5, 88, 163, 0],
        [1, "t", 1, 84, 166, 0],
        [1, "t", 5, 72, 160, 0],
        [1, "t", 5, 70, 170, 0],
        [1, "s", 1, 57, 162, 1],
        [1, "b", 1, 39, 161, 0],
        [1, "b", 0, 34, 164, 0],
        [1, "b", 2, 54, 164, 0],
        [1, "t", 1, 59, 169, 0],
        [1, "t", 3, 60, 170, 0],
        [1, "t", 4, 63, 169, 0],
        [1, "t", 4, 63, 174, 0],
        [1, "t", 1, 62, 175, 0],
        [1, "t", 5, 40, 162, 0],
        [1, "t", 1, 63, 180, 0],
        [1, "t", 2, 64, 179, 0],
        [1, "t", 2, 35, 165, 0],
        [1, "s", 1, 63, 173, 1],
        [1, "s", 2, 40, 165, 1],
        [1, "b", 0, 46, 169, 0],
        [1, "de", 22, 74, 168, 0],
        [1, "de", 22, 86, 168, 0],
        [1, "de", 22, 83, 175, 0],
        [1, "de", 22, 78, 175, 0],
        [1, "de", 19, 72, 176, 0],
        [1, "de", 19, 68, 168, 0],
        [1, "de", 19, 65, 163, 0],
        [1, "de", 19, 75, 162, 0],
        [1, "de", 19, 80, 162, 0],
        [1, "de", 19, 88, 159, 0],
        [1, "de", 19, 87, 164, 0],
        [1, "de", 19, 61, 177, 0],
        [1, "de", 19, 59, 172, 0],
        [1, "de", 19, 59, 167, 0],
        [1, "de", 19, 53, 165, 0],
        [1, "de", 19, 56, 163, 0],
        [1, "de", 19, 51, 161, 0],
        [1, "de", 19, 48, 167, 0],
        [1, "de", 19, 47, 170, 0],
        [1, "de", 19, 41, 163, 0],
        [1, "de", 19, 37, 161, 0],
        [1, "de", 19, 36, 166, 0],
        [1, "de", 19, 36, 171, 0],
        [1, "de", 19, 34, 174, 0],
        [1, "de", 19, 40, 172, 0],
        [1, "de", 19, 38, 177, 0],
        [1, "de", 19, 42, 176, 0],
        [1, "de", 19, 53, 178, 0],
        [1, "de", 19, 53, 172, 0],
        [1, "de", 19, 64, 181, 0],
        [1, "de", 19, 64, 175, 0],
        [1, "de", 19, 79, 172, 0],
        [1, "de", 19, 30, 170, 0],
        [1, "de", 19, 17, 168, 0],
        [1, "de", 19, 14, 173, 0],
        [1, "de", 19, 12, 162, 0],
        [1, "de", 19, 9, 167, 0],
        [1, "de", 19, 20, 161, 0],
        [1, "de", 19, 27, 162, 0],
        [1, "de", 19, 83, 195, 0],
        [1, "de", 2, 85, 163, 0],
        [1, "de", 2, 80, 164, 0],
        [1, "de", 2, 84, 169, 0],
        [1, "de", 2, 55, 165, 0],
        [1, "de", 3, 46, 163, 0],
        [1, "de", 2, 66, 169, 0],
        [1, "de", 0, 63, 175, 0],
        [1, "de", 0, 34, 164, 0],
        [1, "de", 0, 18, 160, 0],
        [1, "de", 2, 40, 160, 0],
        [1, "de", 2, 53, 160, 0],
        [1, "de", 2, 14, 170, 0],
        [1, "de", 2, 19, 175, 0],
        [1, "de", 2, 23, 176, 0],
        [1, "de", 5, 60, 147, 0],
        [1, "de", 33, 59, 160, 0],
        [1, "de", 33, 85, 157, 0],
        [1, "de", 33, 29, 143, 0],
        [1, "de", 33, 62, 140, 0],
        [1, "de", 33, 43, 127, 0],
        [1, "de", 33, 18, 129, 0],
        [1, "de", 33, 50, 134, 0],
        [1, "de", 33, 79, 127, 0],
        [1, "de", 33, 89, 139, 0],
        [1, "b", 1, 44, 156, 0],
        [1, "t", 2, 45, 157, 0],
        [1, "b", 0, 75, 156, 0],
        [1, "t", 3, 76, 157, 0],
        [1, "t", 5, 62, 157, 0],
        [1, "t", 5, 79, 156, 0],
        [1, "t", 5, 41, 156, 0],
        [1, "b", 1, 28, 156, 0],
        [1, "t", 2, 27, 157, 0],
        [1, "t", 4, 21, 156, 0],
        [1, "t", 4, 56, 159, 0],
        [1, "f", 1, 94, 153, 1],
        [1, "f", 2, 93, 153, 1],
        [1, "f", 2, 99, 153, 1],
        [1, "f", 1, 98, 153, 1],
        [1, "f", 0, 97, 153, 1],
        [1, "f", 1, 96, 153, 1],
        [1, "s", 1, 7, 149, 1],
        [1, "de", 4, 7, 150, 0],
        [1, "b", 3, 43, 281, 0],
        [1, "de", 50, 24, 39, 0],
        [1, "de", 50, 21, 39, 0],
        [1, "de", 50, 22, 43, 0],
        [1, "de", 50, 15, 34, 0],
        [1, "de", 50, 18, 26, 0],
        [1, "de", 50, 44, 42, 0],
        [1, "de", 50, 57, 39, 0],
        [1, "de", 50, 62, 43, 0],
        [1, "de", 50, 77, 44, 0],
        [1, "de", 50, 71, 41, 0],
        [1, "de", 50, 55, 39, 0],
        [1, "de", 50, 22, 39, 0],
        [1, "de", 50, 20, 41, 0],
        [1, "de", 50, 18, 21, 0],
        [1, "de", 50, 15, 21, 0],
        [1, "de", 50, 18, 19, 0],
        [1, "de", 50, 17, 17, 0],
        [1, "de", 50, 18, 10, 0],
        [1, "de", 50, 18, 9, 0],
        [1, "de", 50, 52, 41, 0],
        [1, "de", 50, 82, 39, 0],
        [1, "de", 50, 86, 38, 0],
        [1, "de", 50, 84, 31, 0],
        [1, "de", 50, 86, 30, 0],
        [1, "de", 50, 84, 26, 0],
        [1, "de", 50, 86, 23, 0],
        [1, "de", 50, 86, 14, 0],
        [1, "de", 50, 29, 42, 0],
        [1, "de", 9, 74, 37, 0],
        [1, "de", 9, 76, 22, 0],
        [1, "de", 10, 79, 24, 0],
        [1, "de", 11, 77, 17, 0],
        [1, "de", 36, 81, 25, 0],
        [1, "de", 36, 80, 36, 0],
        [1, "de", 36, 21, 36, 0],
        [1, "de", 28, 23, 22, 0],
        [1, "de", 28, 27, 31, 0],
        [1, "de", 28, 69, 36, 0],
        [1, "de", 28, 80, 20, 0],
        [1, "de", 51, 24, 155, 0],
        [1, "de", 51, 7, 154, 0],
        [1, "de", 51, 11, 154, 0],
        [1, "de", 51, 12, 156, 0],
        [1, "de", 51, 16, 154, 0],
        [1, "de", 51, 20, 154, 0],
        [1, "de", 51, 23, 154, 0],
        [1, "de", 51, 18, 157, 0],
        [1, "de", 51, 31, 154, 0],
        [1, "de", 51, 32, 157, 0],
        [1, "de", 51, 86, 154, 0],
        [1, "de", 51, 88, 156, 0],
        [1, "de", 51, 82, 154, 0],
        [1, "de", 51, 80, 154, 0],
        [1, "de", 51, 77, 154, 0],
        [1, "de", 51, 74, 154, 0],
        [1, "de", 51, 71, 154, 0],
        [1, "de", 51, 67, 154, 0],
        [1, "de", 51, 60, 154, 0],
        [1, "de", 51, 57, 154, 0],
        [1, "de", 51, 65, 154, 0],
        [1, "de", 51, 68, 156, 0],
        [1, "de", 51, 59, 156, 0],
        [1, "de", 51, 55, 154, 0],
        [1, "de", 51, 54, 154, 0],
        [1, "de", 51, 52, 154, 0],
        [1, "de", 51, 55, 155, 0],
        [1, "de", 51, 54, 157, 0],
        [1, "de", 51, 49, 154, 0],
        [1, "de", 51, 46, 154, 0],
        [1, "de", 51, 44, 154, 0],
        [1, "de", 51, 43, 154, 0],
        [1, "de", 51, 41, 154, 0],
        [1, "de", 51, 38, 154, 0],
        [1, "de", 51, 39, 156, 0],
        [1, "de", 51, 34, 154, 0],
        [1, "de", 5, 19, 142, 0],
        [1, "de", 5, 37, 147, 0],
        [1, "de", 7, 53, 147, 0],
        [1, "de", 6, 69, 150, 0],
        [1, "de", 4, 94, 148, 0],
        [1, "de", 4, 66, 147, 0],
        [1, "de", 4, 10, 145, 0],
        [1, "de", 4, 28, 137, 0],
        [1, "de", 4, 15, 137, 0],
        [1, "de", 4, 48, 134, 0],
        [1, "de", 5, 67, 135, 0],
        [1, "de", 34, 84, 155, 0],
        [1, "de", 35, 70, 156, 0],
        [1, "de", 35, 51, 156, 0],
        [1, "de", 35, 56, 157, 0],
        [1, "de", 35, 65, 159, 0],
        [1, "de", 35, 23, 156, 0],
        [1, "de", 35, 15, 155, 0],
        [1, "de", 35, 8, 155, 0],
        [1, "de", 33, 13, 155, 0],
        [1, "de", 33, 33, 158, 0],
        [1, "de", 36, 78, 155, 0],
        [1, "de", 36, 87, 157, 0],
        [1, "fo", 1, 73, 36, 0],
        [1, "fo", 1, 80, 24, 0],
        [1, "fo", 2, 67, 36, 0],
        [1, "fo", 2, 45, 36, 0],
        [1, "fo", 2, 53, 34, 0],
        [1, "fo", 1, 51, 35, 0],
        [1, "fo", 1, 58, 35, 0],
        [1, "fo", 1, 33, 35, 0],
        [1, "fo", 1, 31, 33, 0],
        [1, "fo", 2, 29, 36, 0],
        [1, "fo", 2, 56, 36, 0],
        [1, "fo", 2, 60, 37, 0],
        [1, "fo", 2, 45, 32, 0],
        [1, "fo", 2, 22, 25, 0],
        [1, "fo", 2, 21, 35, 0],
        [1, "de", 52, 90, 208, 0],
        [1, "de", 18, 94, 250, 0],
        [1, "de", 17, 95, 253, 0],
        [1, "cs", 0, 140, 5, 1],
        [1, "cs", 2, 139, 5, 1],
        [1, "cs", 2, 138, 5, 1],
        [1, "cs", 2, 138, 6, 1],
        [1, "cs", 2, 139, 6, 1],
        [1, "cs", 2, 141, 6, 1],
        [1, "cs", 2, 140, 6, 1],
        [1, "la", 3, 143, 7, 1],
        [1, "la", 3, 139, 7, 1],
        [1, "cs", 0, 137, 7, 1],
        [1, "cs", 1, 138, 8, 1],
        [1, "cs", 2, 137, 6, 1],
        [1, "cs", 2, 137, 8, 1],
        [1, "cs", 2, 136, 7, 1],
        [1, "cs", 2, 138, 9, 1],
        [1, "cs", 3, 139, 9, 1],
        [1, "cs", 3, 136, 8, 1],
        [1, "cs", 3, 137, 9, 1],
        [1, "de", 53, 92, 165, 0],
        [1, "de", 53, 92, 180, 0],
        [1, "de", 53, 92, 188, 0],
        [1, "de", 54, 92, 153, 0],
        [1, "de", 54, 91, 153, 0],
        [1, "de", 54, 90, 153, 0],
        [1, "de", 54, 89, 153, 0],
        [1, "de", 54, 88, 153, 0],
        [1, "de", 54, 87, 153, 0],
        [1, "de", 54, 86, 153, 0],
        [1, "de", 54, 85, 153, 0],
        [1, "de", 54, 84, 153, 0],
        [1, "de", 54, 83, 153, 0],
        [1, "de", 54, 82, 153, 0],
        [1, "de", 54, 81, 153, 0],
        [1, "de", 54, 80, 153, 0],
        [1, "de", 54, 79, 153, 0],
        [1, "de", 54, 78, 153, 0],
        [1, "de", 54, 77, 153, 0],
        [1, "de", 54, 76, 153, 0],
        [1, "de", 54, 75, 153, 0],
        [1, "de", 54, 74, 153, 0],
        [1, "de", 54, 73, 153, 0],
        [1, "de", 54, 72, 153, 0],
        [1, "de", 54, 70, 153, 0],
        [1, "de", 54, 71, 153, 0],
        [1, "de", 54, 69, 153, 0],
        [1, "de", 54, 68, 153, 0],
        [1, "de", 54, 67, 153, 0],
        [1, "de", 54, 66, 153, 0],
        [1, "de", 54, 65, 153, 0],
        [1, "de", 54, 64, 153, 0],
        [1, "de", 54, 63, 153, 0],
        [1, "de", 54, 61, 153, 0],
        [1, "de", 54, 62, 153, 0],
        [1, "de", 54, 60, 153, 0],
        [1, "de", 54, 59, 153, 0],
        [1, "de", 54, 57, 153, 0],
        [1, "de", 54, 58, 153, 0],
        [1, "de", 54, 56, 153, 0],
        [1, "de", 54, 55, 153, 0],
        [1, "de", 54, 54, 153, 0],
        [1, "de", 54, 53, 153, 0],
        [1, "de", 54, 52, 153, 0],
        [1, "de", 54, 51, 153, 0],
        [1, "de", 54, 50, 153, 0],
        [1, "de", 54, 49, 153, 0],
        [1, "de", 54, 48, 153, 0],
        [1, "de", 54, 47, 153, 0],
        [1, "de", 54, 46, 153, 0],
        [1, "de", 54, 45, 153, 0],
        [1, "de", 54, 44, 153, 0],
        [1, "de", 54, 43, 153, 0],
        [1, "de", 54, 42, 153, 0],
        [1, "de", 54, 41, 153, 0],
        [1, "de", 54, 40, 153, 0],
        [1, "de", 54, 39, 153, 0],
        [1, "de", 54, 37, 153, 0],
        [1, "de", 54, 38, 153, 0],
        [1, "de", 54, 36, 153, 0],
        [1, "de", 54, 35, 153, 0],
        [1, "de", 54, 34, 153, 0],
        [1, "de", 54, 33, 153, 0],
        [1, "de", 54, 32, 153, 0],
        [1, "de", 54, 31, 153, 0],
        [1, "de", 54, 30, 153, 0],
        [1, "de", 54, 29, 153, 0],
        [1, "de", 54, 28, 153, 0],
        [1, "de", 54, 27, 153, 0],
        [1, "de", 54, 26, 153, 0],
        [1, "de", 54, 25, 153, 0],
        [1, "de", 54, 24, 153, 0],
        [1, "de", 54, 23, 153, 0],
        [1, "de", 54, 22, 153, 0],
        [1, "de", 54, 21, 153, 0],
        [1, "de", 54, 20, 153, 0],
        [1, "de", 54, 19, 153, 0],
        [1, "de", 54, 18, 153, 0],
        [1, "de", 54, 17, 153, 0],
        [1, "de", 54, 16, 153, 0],
        [1, "de", 54, 15, 153, 0],
        [1, "de", 54, 14, 153, 0],
        [1, "de", 54, 13, 153, 0],
        [1, "de", 54, 12, 153, 0],
        [1, "de", 54, 11, 153, 0],
        [1, "de", 54, 10, 153, 0],
        [1, "de", 54, 8, 153, 0],
        [1, "de", 54, 9, 153, 0],
        [1, "de", 55, 83, 8, 0],
        [1, "de", 55, 83, 9, 0],
        [1, "de", 55, 83, 10, 0],
        [1, "de", 55, 83, 11, 0],
        [1, "de", 55, 83, 12, 0],
        [1, "de", 55, 83, 13, 0],
        [1, "de", 55, 83, 14, 0],
        [1, "de", 55, 83, 15, 0],
        [1, "de", 55, 83, 16, 0],
        [1, "de", 55, 83, 17, 0],
        [1, "de", 55, 83, 19, 0],
        [1, "de", 55, 83, 18, 0],
        [1, "de", 55, 83, 20, 0],
        [1, "de", 55, 83, 21, 0],
        [1, "de", 55, 83, 22, 0],
        [1, "de", 55, 83, 23, 0],
        [1, "de", 55, 83, 24, 0],
        [1, "de", 55, 83, 25, 0],
        [1, "de", 55, 83, 26, 0],
        [1, "de", 55, 83, 27, 0],
        [1, "de", 55, 83, 28, 0],
        [1, "de", 55, 83, 29, 0],
        [1, "de", 55, 83, 30, 0],
        [1, "de", 55, 83, 31, 0],
        [1, "de", 55, 83, 32, 0],
        [1, "de", 55, 83, 33, 0],
        [1, "de", 55, 83, 34, 0],
        [1, "de", 55, 83, 36, 0],
        [1, "de", 55, 83, 35, 0],
        [1, "de", 55, 83, 37, 0],
        [1, "de", 55, 83, 38, 0],
        [1, "de", 55, 81, 38, 0],
        [1, "de", 55, 82, 38, 0],
        [1, "de", 55, 80, 38, 0],
        [1, "de", 55, 79, 38, 0],
        [1, "de", 55, 78, 38, 0],
        [1, "de", 55, 77, 38, 0],
        [1, "de", 55, 76, 38, 0],
        [1, "de", 55, 75, 38, 0],
        [1, "de", 55, 73, 38, 0],
        [1, "de", 55, 74, 38, 0],
        [1, "de", 55, 72, 38, 0],
        [1, "de", 55, 71, 38, 0],
        [1, "de", 55, 70, 38, 0],
        [1, "de", 55, 68, 38, 0],
        [1, "de", 55, 69, 38, 0],
        [1, "de", 55, 67, 38, 0],
        [1, "de", 55, 66, 38, 0],
        [1, "de", 55, 65, 38, 0],
        [1, "de", 55, 64, 38, 0],
        [1, "de", 55, 63, 38, 0],
        [1, "de", 55, 62, 38, 0],
        [1, "de", 55, 60, 38, 0],
        [1, "de", 55, 61, 38, 0],
        [1, "de", 55, 59, 38, 0],
        [1, "de", 55, 57, 38, 0],
        [1, "de", 55, 58, 38, 0],
        [1, "de", 55, 56, 38, 0],
        [1, "de", 55, 55, 38, 0],
        [1, "de", 55, 54, 38, 0],
        [1, "de", 55, 53, 38, 0],
        [1, "de", 55, 52, 38, 0],
        [1, "de", 55, 51, 38, 0],
        [1, "de", 55, 49, 38, 0],
        [1, "de", 55, 50, 38, 0],
        [1, "de", 55, 48, 38, 0],
        [1, "de", 55, 47, 38, 0],
        [1, "de", 55, 46, 38, 0],
        [1, "de", 55, 45, 38, 0],
        [1, "de", 55, 44, 38, 0],
        [1, "de", 55, 43, 38, 0],
        [1, "de", 55, 42, 38, 0],
        [1, "de", 55, 41, 38, 0],
        [1, "de", 55, 40, 38, 0],
        [1, "de", 55, 39, 38, 0],
        [1, "de", 55, 38, 38, 0],
        [1, "de", 55, 37, 38, 0],
        [1, "de", 55, 36, 38, 0],
        [1, "de", 55, 34, 38, 0],
        [1, "de", 55, 35, 38, 0],
        [1, "de", 55, 33, 38, 0],
        [1, "de", 55, 31, 38, 0],
        [1, "de", 55, 32, 38, 0],
        [1, "de", 55, 30, 38, 0],
        [1, "de", 55, 29, 38, 0],
        [1, "de", 55, 28, 38, 0],
        [1, "de", 55, 27, 38, 0],
        [1, "de", 55, 26, 38, 0],
        [1, "de", 55, 25, 38, 0],
        [1, "de", 55, 24, 38, 0],
        [1, "de", 55, 23, 38, 0],
        [1, "de", 55, 21, 38, 0],
        [1, "de", 55, 22, 38, 0],
        [1, "de", 55, 20, 38, 0],
        [1, "de", 55, 19, 38, 0],
        [1, "de", 55, 19, 37, 0],
        [1, "de", 55, 19, 36, 0],
        [1, "de", 55, 19, 35, 0],
        [1, "de", 55, 19, 34, 0],
        [1, "de", 55, 19, 33, 0],
        [1, "de", 55, 19, 32, 0],
        [1, "de", 55, 19, 31, 0],
        [1, "de", 55, 19, 30, 0],
        [1, "de", 55, 19, 28, 0],
        [1, "de", 55, 19, 29, 0],
        [1, "de", 55, 19, 27, 0],
        [1, "de", 55, 19, 26, 0],
        [1, "de", 55, 19, 25, 0],
        [1, "de", 55, 19, 24, 0],
        [1, "de", 55, 19, 23, 0],
        [1, "de", 55, 19, 22, 0],
        [1, "de", 55, 19, 21, 0],
        [1, "de", 55, 19, 20, 0],
        [1, "de", 55, 19, 18, 0],
        [1, "de", 55, 19, 19, 0],
        [1, "de", 55, 19, 16, 0],
        [1, "de", 55, 19, 17, 0],
        [1, "de", 55, 19, 15, 0],
        [1, "de", 55, 19, 14, 0],
        [1, "de", 55, 19, 13, 0],
        [1, "de", 55, 19, 12, 0],
        [1, "de", 55, 19, 11, 0],
        [1, "de", 55, 19, 10, 0],
        [1, "de", 55, 19, 9, 0],
        [1, "de", 55, 19, 8, 0],
        [1, "de", 55, 84, 35, 0],
        [1, "de", 55, 84, 32, 0],
        [1, "de", 55, 84, 25, 0],
        [1, "de", 50, 84, 24, 0],
        [1, "de", 55, 84, 20, 0],
        [1, "de", 55, 84, 17, 0],
        [1, "de", 55, 84, 16, 0],
        [1, "de", 50, 84, 15, 0],
        [1, "de", 55, 84, 8, 0],
        [1, "de", 55, 84, 9, 0],
        [1, "de", 50, 85, 11, 0],
        [1, "de", 55, 81, 39, 0],
        [1, "de", 50, 83, 40, 0],
        [1, "de", 55, 72, 39, 0],
        [1, "de", 55, 74, 39, 0],
        [1, "de", 55, 66, 39, 0],
        [1, "de", 55, 65, 39, 0],
        [1, "de", 50, 67, 41, 0],
        [1, "de", 55, 56, 39, 0],
        [1, "de", 55, 58, 39, 0],
        [1, "de", 55, 50, 39, 0],
        [1, "de", 50, 49, 39, 0],
        [1, "de", 55, 44, 39, 0],
        [1, "de", 55, 42, 39, 0],
        [1, "de", 50, 43, 39, 0],
        [1, "de", 50, 41, 39, 0],
        [1, "de", 50, 37, 39, 0],
        [1, "de", 55, 36, 39, 0],
        [1, "de", 55, 32, 39, 0],
        [1, "de", 50, 31, 39, 0],
        [1, "de", 55, 23, 39, 0],
        [1, "de", 55, 18, 37, 0],
        [1, "de", 50, 18, 36, 0],
        [1, "de", 55, 18, 35, 0],
        [1, "de", 50, 18, 34, 0],
        [1, "de", 55, 18, 31, 0],
        [1, "de", 50, 18, 30, 0],
        [1, "de", 55, 18, 25, 0],
        [1, "de", 50, 18, 24, 0],
        [1, "de", 55, 18, 20, 0],
        [1, "de", 55, 18, 14, 0],
        [1, "de", 50, 18, 15, 0],
        [1, "de", 55, 18, 8, 0],
        [1, "de", 54, 90, 154, 0],
        [1, "de", 51, 89, 154, 0],
        [1, "de", 54, 85, 154, 0],
        [1, "de", 54, 81, 154, 0],
        [1, "de", 54, 76, 154, 0],
        [1, "de", 54, 70, 154, 0],
        [1, "de", 54, 66, 154, 0],
        [1, "de", 54, 61, 154, 0],
        [1, "de", 54, 56, 154, 0],
        [1, "de", 54, 53, 154, 0],
        [1, "de", 54, 45, 154, 0],
        [1, "de", 54, 42, 154, 0],
        [1, "de", 54, 37, 154, 0],
        [1, "de", 54, 30, 154, 0],
        [1, "de", 54, 25, 154, 0],
        [1, "de", 54, 17, 154, 0],
        [1, "de", 54, 10, 154, 0],
        [1, "de", 54, 8, 154, 0],
        [1, "de", 55, 20, 9, 0],
        [1, "de", 53, 93, 154, 0],
        [1, "de", 53, 93, 156, 0],
        [1, "de", 53, 93, 158, 0],
        [1, "de", 52, 91, 157, 0],
        [1, "de", 53, 93, 159, 0],
        [1, "de", 53, 93, 161, 0],
        [1, "de", 53, 93, 162, 0],
        [1, "de", 53, 93, 163, 0],
        [1, "de", 53, 93, 164, 0],
        [1, "de", 53, 93, 165, 0],
        [1, "de", 53, 93, 166, 0],
        [1, "de", 53, 93, 167, 0],
        [1, "de", 52, 91, 167, 0],
        [1, "de", 53, 93, 169, 0],
        [1, "de", 53, 93, 168, 0],
        [1, "de", 53, 93, 170, 0],
        [1, "de", 53, 93, 171, 0],
        [1, "de", 53, 93, 173, 0],
        [1, "de", 53, 93, 176, 0],
        [1, "de", 53, 93, 175, 0],
        [1, "de", 53, 92, 169, 0],
        [1, "de", 53, 93, 178, 0],
        [1, "de", 53, 93, 179, 0],
        [1, "de", 53, 93, 180, 0],
        [1, "de", 53, 93, 181, 0],
        [1, "de", 53, 93, 183, 0],
        [1, "de", 53, 93, 184, 0],
        [1, "de", 53, 93, 186, 0],
        [1, "de", 18, 95, 185, 0],
        [1, "de", 53, 93, 187, 0],
        [1, "de", 53, 93, 188, 0],
        [1, "de", 52, 91, 186, 0],
        [1, "de", 53, 93, 190, 0],
        [1, "de", 53, 93, 192, 0],
        [1, "de", 53, 93, 195, 0],
        [1, "de", 53, 93, 194, 0],
        [1, "de", 52, 91, 196, 0],
        [1, "de", 53, 93, 197, 0],
        [1, "de", 53, 93, 200, 0],
        [1, "de", 53, 93, 198, 0],
        [1, "de", 53, 93, 201, 0],
        [1, "de", 53, 93, 202, 0],
        [1, "de", 53, 93, 203, 0],
        [1, "de", 53, 93, 204, 0],
        [1, "de", 53, 93, 206, 0],
        [1, "de", 53, 93, 205, 0],
        [1, "de", 53, 93, 207, 0],
        [1, "de", 53, 93, 209, 0],
        [1, "de", 53, 93, 210, 0],
        [1, "de", 53, 93, 212, 0],
        [1, "de", 52, 91, 204, 0],
        [1, "de", 53, 93, 213, 0],
        [1, "de", 53, 93, 214, 0],
        [1, "de", 53, 93, 215, 0],
        [1, "de", 53, 93, 216, 0],
        [1, "de", 53, 93, 217, 0],
        [1, "de", 53, 93, 218, 0],
        [1, "de", 53, 93, 219, 0],
        [1, "de", 53, 93, 220, 0],
        [1, "de", 52, 92, 213, 0],
        [1, "de", 52, 92, 206, 0],
        [1, "de", 52, 92, 202, 0],
        [1, "de", 53, 92, 201, 0],
        [1, "de", 52, 92, 194, 0],
        [1, "de", 52, 92, 178, 0],
        [1, "de", 52, 92, 171, 0],
        [1, "de", 53, 93, 221, 0],
        [1, "de", 53, 93, 222, 0],
        [1, "de", 53, 93, 223, 0],
        [1, "de", 53, 93, 225, 0],
        [1, "de", 53, 93, 228, 0],
        [1, "de", 53, 93, 227, 0],
        [1, "de", 52, 92, 217, 0],
        [1, "de", 53, 92, 218, 0],
        [1, "de", 52, 92, 221, 0],
        [1, "de", 52, 92, 225, 0],
        [1, "de", 52, 93, 226, 0],
        [1, "de", 52, 93, 224, 0],
        [1, "de", 52, 93, 208, 0],
        [1, "de", 52, 93, 211, 0],
        [1, "de", 52, 93, 196, 0],
        [1, "de", 52, 93, 199, 0],
        [1, "de", 52, 93, 189, 0],
        [1, "de", 52, 93, 191, 0],
        [1, "de", 52, 93, 193, 0],
        [1, "de", 52, 93, 182, 0],
        [1, "de", 52, 93, 185, 0],
        [1, "de", 52, 93, 172, 0],
        [1, "de", 52, 93, 174, 0],
        [1, "de", 52, 93, 177, 0],
        [1, "de", 52, 93, 155, 0],
        [1, "de", 52, 93, 157, 0],
        [1, "de", 52, 93, 160, 0],
        [1, "de", 52, 92, 162, 0],
        [1, "de", 53, 93, 229, 0],
        [1, "de", 53, 93, 231, 0],
        [1, "de", 53, 93, 232, 0],
        [1, "de", 53, 93, 234, 0],
        [1, "de", 52, 93, 230, 0],
        [1, "de", 52, 92, 228, 0],
        [1, "de", 53, 93, 235, 0],
        [1, "de", 53, 93, 236, 0],
        [1, "de", 53, 93, 237, 0],
        [1, "de", 53, 93, 239, 0],
        [1, "de", 53, 93, 240, 0],
        [1, "de", 52, 93, 238, 0],
        [1, "de", 53, 93, 241, 0],
        [1, "de", 52, 93, 242, 0],
        [1, "de", 52, 93, 243, 0],
        [1, "de", 53, 93, 244, 0],
        [1, "de", 53, 93, 246, 0],
        [1, "de", 53, 93, 245, 0],
        [1, "de", 52, 93, 247, 0],
        [1, "de", 53, 93, 248, 0],
        [1, "de", 52, 92, 235, 0],
        [1, "de", 52, 92, 245, 0],
        [1, "de", 52, 93, 249, 0],
        [1, "de", 53, 93, 250, 0],
        [1, "de", 53, 93, 251, 0],
        [1, "de", 53, 93, 252, 0],
        [1, "de", 53, 93, 254, 0],
        [1, "de", 52, 93, 253, 0],
        [1, "de", 52, 93, 255, 0],
        [1, "de", 53, 93, 257, 0],
        [1, "de", 53, 93, 256, 0],
        [1, "de", 52, 93, 258, 0],
        [1, "de", 53, 93, 259, 0],
        [1, "de", 52, 93, 260, 0],
        [1, "de", 53, 93, 263, 0],
        [1, "de", 53, 93, 264, 0],
        [1, "de", 53, 93, 265, 0],
        [1, "de", 52, 93, 266, 0],
        [1, "de", 53, 93, 267, 0],
        [1, "de", 52, 93, 268, 0],
        [1, "de", 52, 93, 269, 0],
        [1, "de", 53, 93, 276, 0],
        [1, "de", 53, 93, 277, 0],
        [1, "de", 52, 93, 278, 0],
        [1, "de", 53, 93, 279, 0],
        [1, "de", 52, 93, 280, 0],
        [1, "de", 52, 93, 283, 0],
        [1, "de", 53, 93, 284, 0],
        [1, "de", 53, 93, 285, 0],
        [1, "de", 53, 93, 286, 0],
        [1, "de", 52, 93, 287, 0],
        [1, "de", 53, 93, 288, 0],
        [1, "de", 53, 93, 289, 0],
        [1, "de", 52, 93, 290, 0],
        [1, "de", 52, 93, 291, 0],
        [1, "de", 53, 93, 292, 0],
        [1, "de", 52, 93, 293, 0],
        [1, "de", 53, 93, 294, 0],
        [1, "de", 52, 93, 295, 0],
        [1, "de", 52, 93, 296, 0],
        [1, "de", 53, 93, 297, 0],
        [1, "de", 53, 93, 298, 0],
        [1, "de", 52, 93, 299, 0],
        [1, "de", 53, 93, 300, 0],
        [1, "de", 52, 92, 298, 0],
        [1, "de", 52, 92, 293, 0],
        [1, "r", 92, 262, 0],
        [1, "r", 93, 262, 0],
        [1, "de", 52, 93, 261, 0],
        [1, "cs", 0, 223, 104, 1],
        [1, "cs", 2, 223, 105, 1],
        [1, "cs", 2, 223, 102, 1],
        [1, "cs", 2, 223, 103, 1],
        [1, "la", 3, 141, 8, 1],
        [1, "cs", 2, 140, 9, 1],
        [1, "la", 4, 142, 9, 1],
        [1, "de", 4, 81, 149, 0],
        [1, "f", 0, 83, 148, 1],
        [1, "f", 1, 82, 149, 1],
        [1, "de", 34, 81, 156, 0],
        [1, "de", 51, 17, 9, 0],
        [1, "de", 54, 16, 9, 0],
        [1, "de", 54, 15, 9, 0],
        [1, "cs", 3, 223, 106, 1],
        [1, "p", 0, 119, 279, 1],
        [1, "p", 0, 109, 242, 1],
        [1, "cs", 1, 29, 9, 1],
        [1, "cs", 2, 30, 9, 1],
        [1, "cs", 2, 31, 9, 1],
        [1, "cs", 2, 32, 9, 1],
        [1, "cs", 2, 33, 9, 1],
        [1, "cs", 2, 69, 9, 1],
        [1, "cs", 2, 71, 9, 1],
        [1, "cs", 2, 70, 9, 1],
        [1, "cs", 1, 72, 9, 1],
        [1, "cs", 2, 73, 9, 1],
        [1, "de", 10, 31, 10, 0],
        [1, "de", 10, 29, 10, 0],
        [1, "de", 10, 44, 10, 0],
        [1, "de", 4, 87, 10, 0],
        [1, "de", 4, 86, 10, 0],
        [1, "de", 5, 87, 9, 0],
        [1, "de", 5, 13, 10, 0],
        [1, "de", 4, 14, 11, 0],
        [1, "de", 4, 16, 10, 0],
        [1, "de", 4, 17, 10, 0],
        [1, "cs", 2, 146, 9, 1],
        [1, "cs", 2, 148, 9, 1],
        [1, "cs", 2, 150, 9, 1],
        [1, "cs", 2, 153, 9, 1],
        [1, "cs", 2, 155, 9, 1],
        [1, "cs", 1, 149, 9, 1],
        [1, "cs", 1, 154, 9, 1],
        [1, "cs", 3, 147, 9, 1],
        [1, "cs", 3, 151, 9, 1],
        [1, "cs", 3, 152, 9, 1],
        [1, "cs", 3, 156, 9, 1],
        [1, "cs", 3, 157, 9, 1],
        [1, "cs", 3, 158, 9, 1],
        [1, "cs", 3, 159, 9, 1],
        [1, "cs", 3, 160, 9, 1],
        [1, "cs", 0, 161, 9, 1],
        [1, "cs", 2, 162, 9, 1],
        [1, "cs", 2, 163, 9, 1],
        [1, "cs", 1, 164, 9, 1],
        [1, "cs", 2, 165, 9, 1],
        [1, "cs", 3, 166, 9, 1],
        [1, "cs", 3, 168, 9, 1],
        [1, "cs", 3, 170, 9, 1],
        [1, "cs", 1, 169, 9, 1],
        [1, "cs", 2, 167, 9, 1],
        [1, "cs", 2, 171, 9, 1],
        [1, "cs", 2, 173, 9, 1],
        [1, "cs", 2, 172, 9, 1],
        [1, "cs", 2, 174, 9, 1],
        [1, "cs", 1, 175, 9, 1],
        [1, "cs", 3, 176, 9, 1],
        [1, "cs", 3, 178, 9, 1],
        [1, "cs", 3, 179, 9, 1],
        [1, "cs", 0, 180, 9, 1],
        [1, "cs", 2, 177, 9, 1],
        [1, "cs", 2, 182, 9, 1],
        [1, "cs", 2, 181, 9, 1],
        [1, "cs", 2, 183, 9, 1],
        [1, "cs", 2, 184, 9, 1],
        [1, "cs", 2, 185, 9, 1],
        [1, "cs", 2, 186, 9, 1],
        [1, "cs", 1, 187, 9, 1],
        [1, "cs", 2, 188, 9, 1],
        [1, "cs", 3, 189, 9, 1],
        [1, "cs", 3, 190, 9, 1],
        [1, "cs", 3, 191, 9, 1],
        [1, "cs", 2, 192, 9, 1],
        [1, "cs", 0, 193, 9, 1],
        [1, "cs", 2, 194, 9, 1],
        [1, "cs", 2, 196, 9, 1],
        [1, "cs", 2, 198, 9, 1],
        [1, "cs", 2, 200, 9, 1],
        [1, "cs", 3, 195, 9, 1],
        [1, "cs", 3, 197, 9, 1],
        [1, "cs", 3, 199, 9, 1],
        [1, "cs", 0, 201, 9, 1],
        [1, "cs", 2, 202, 9, 1],
        [1, "cs", 2, 203, 9, 1],
        [1, "cs", 3, 208, 9, 1],
        [1, "cs", 3, 207, 9, 1],
        [1, "cs", 3, 206, 9, 1],
        [1, "cs", 3, 205, 9, 1],
        [1, "cs", 3, 204, 9, 1],
        [1, "cs", 3, 214, 9, 1],
        [1, "cs", 3, 215, 9, 1],
        [1, "cs", 3, 216, 9, 1],
        [1, "cs", 3, 217, 9, 1],
        [1, "cs", 3, 218, 9, 1],
        [1, "b", 0, 5, 159, 0],
        [1, "b", 0, 5, 171, 0],
        [2, "isl", 1, 122, 63, 0],
        [2, "isl", 2, 119, 277, 0],
        [2, "isl", 2, 109, 244, 0],
        [2, "isl", 2, 114, 205, 0],
        [2, "isl", 1, 120, 150, 0],
        [2, "isl", 2, 154, 129, 0],
        [2, "isl", 0, 184, 158, 0],
        [2, "isl", 1, 208, 128, 0],
        [2, "isl", 1, 215, 132, 0],
        [2, "isl", 1, 214, 128, 0],
        [2, "isl", 1, 209, 132, 0],
        [1, "la", 3, 217, 20, 1],
        [1, "la", 1, 215, 19, 1],
        [1, "la", 0, 212, 18, 1],
        [1, "la", 4, 214, 18, 1],
        [1, "la", 4, 216, 19, 1],
        [1, "la", 4, 211, 20, 1],
        [1, "la", 3, 210, 19, 1],
        [1, "la", 3, 215, 21, 1],
        [1, "la", 1, 214, 20, 1],
        [1, "la", 3, 214, 22, 1],
        [1, "la", 3, 214, 24, 1],
        [1, "la", 4, 214, 26, 1],
        [1, "la", 4, 213, 27, 1],
        [1, "la", 1, 212, 28, 1],
        [1, "la", 2, 212, 29, 1],
        [1, "la", 5, 212, 30, 1],
        [1, "la", 4, 208, 19, 1],
        [1, "la", 4, 207, 19, 1],
        [1, "la", 1, 206, 19, 1],
        [1, "la", 1, 205, 19, 1],
        [1, "la", 2, 204, 19, 1],
        [1, "la", 5, 203, 19, 1],
        [1, "la", 3, 210, 17, 1]
    ],
    COUNTER = 0,
    SPRITE = {
        GROUND: ["#133A2B", "#042b30"],
        SNOW_GROUND: ["#EBF2F0", "#136167"],
        CRAFT_LOADING: ["#4EB687", "#187484"],
        BROWN_LIFE: ["#664516", "#13474C"],
        SAND_COLOR: ["#FCEFBB", "#0F4D48"],
        SAND_SHOVEL_CO: ["#C1AA7E", "#0F423D"],
        GRD_SHOVEL_CO: ["#594837", "#163A3A"],
        ICE_SHOVEL_CO: ["#A5D6D6", "#539CA0"],
        WATER_3_COLOR: ["#0B6A84", "#09373F"],
        WATER_2_COLOR: ["#2A8B9B", "#0F464C"],
        WATER_1_COLOR: ["#A9D6D3", "#115E60"],
        FLOAM_COLOR: ["#ECF7F9", "#539CA0"],
        WEAPON_LOADING: ["#FFF", "#FFF"],
        HELMET_LOADING: ["#FFF", "#FFF"],
        SWIM_COLOR: ["#1C9BA4", "#00272F"],
        LAVA_GROUND: ["#2D2017", "#031C1E"],
        DAY: 0,
        NIGHT: 1,
        DRAGON_DEN_X: 2300,
        DRAGON_DEN_Y: 2290,
        FLAKES_NUMBER: 34,
        FLAKES_SIZES: 5,
        SAND_NUMBER: 68,
        ASHES_NUMBER: 34,
        ASHES_SIZES: 5,
        SMOG: 1,
        SMOG_PUSH: .6,
        SMOG_SPEED: .25,
        STEP_SPACE: 50,
        TRAIL_SPACE: 10,
        SWIM_SPACE: 75,
        GHOST_BUBBLES: 20,
        BUBBLES_SIZES: 5,
        SWORD: COUNTER++,
        PICK: COUNTER++,
        FUR: COUNTER++,
        PICK_GOLD: COUNTER++,
        PICK_DIAMOND: COUNTER++,
        SWORD_GOLD: COUNTER++,
        SWORD_DIAMOND: COUNTER++,
        HAND: COUNTER++,
        PICK_WOOD: COUNTER++,
        PIRATE_SWORD: COUNTER++,
        EARMUFFS: COUNTER++,
        COAT: COUNTER++,
        WOOD_SPEAR: COUNTER++,
        SPEAR: COUNTER++,
        GOLD_SPEAR: COUNTER++,
        DIAMOND_SPEAR: COUNTER++,
        DRAGON_SPEAR: COUNTER++,
        LAVA_SPEAR: COUNTER++,
        CRAB_SPEAR: COUNTER++,
        REIDITE_SWORD: COUNTER++,
        DIAMOND_PROTECTION: COUNTER++,
        AMETHYST_PROTECTION: COUNTER++,
        REIDITE_PROTECTION: COUNTER++,
        EXPLORER_HAT: COUNTER++,
        PIRATE_HAT: COUNTER++,
        STONE_HELMET: COUNTER++,
        GOLD_HELMET: COUNTER++,
        DIAMOND_HELMET: COUNTER++,
        BOOK: COUNTER++,
        BAG: COUNTER++,
        SWORD_AMETHYST: COUNTER++,
        PICK_AMETHYST: COUNTER++,
        PICK_REIDITE: COUNTER++,
        AMETHYST_SPEAR: COUNTER++,
        REIDITE_SPEAR: COUNTER++,
        HAMMER: COUNTER++,
        HAMMER_GOLD: COUNTER++,
        HAMMER_DIAMOND: COUNTER++,
        HAMMER_AMETHYST: COUNTER++,
        HAMMER_REIDITE: COUNTER++,
        CAP_SCARF: COUNTER++,
        CHRISTMAS_HAT: COUNTER++,
        ELF_HAT: COUNTER++,
        AMETHYST_HELMET: COUNTER++,
        REIDITE_HELMET: COUNTER++,
        SUPER_HAMMER: COUNTER++,
        SHOVEL: COUNTER++,
        SUPER_DIVING_SUIT: COUNTER++,
        DIVING_MASK: COUNTER++,
        WATERING_CAN_FULL: COUNTER++,
        SHOVEL_GOLD: COUNTER++,
        SHOVEL_DIAMOND: COUNTER++,
        SHOVEL_AMETHYST: COUNTER++,
        PITCHFORK: COUNTER++,
        PITCHFORK2: COUNTER++,
        SPANNER: COUNTER++,
        MACHETE: COUNTER++,
        SWORD_WOOD: COUNTER++,
        WOOD_HELMET: COUNTER++,
        DRAGON_HELMET: COUNTER++,
        LAVA_HELMET: COUNTER++,
        CROWN_CRAB: COUNTER++,
        DRAGON_SWORD: COUNTER++,
        LAVA_SWORD: COUNTER++,
        WOOD_BOW: COUNTER++,
        STONE_BOW: COUNTER++,
        GOLD_BOW: COUNTER++,
        DIAMOND_BOW: COUNTER++,
        AMETHYST_BOW: COUNTER++,
        REIDITE_BOW: COUNTER++,
        DRAGON_BOW: COUNTER++,
        WOOD_SHIELD: COUNTER++,
        STONE_SHIELD: COUNTER++,
        GOLD_SHIELD: COUNTER++,
        DIAMOND_SHIELD: COUNTER++,
        AMETHYST_SHIELD: COUNTER++,
        REIDITE_SHIELD: COUNTER++,
        CROWN_GREEN: COUNTER++,
        CROWN_ORANGE: COUNTER++,
        CROWN_BLUE: COUNTER++,
        TURBAN1: COUNTER++,
        TURBAN2: COUNTER++,
        PILOT_HELMET: COUNTER++,
        HOOD: COUNTER++,
        PEASANT: COUNTER++,
        WINTER_HOOD: COUNTER++,
        WINTER_PEASANT: COUNTER++,
        FLOWER_HAT: COUNTER++,
        FUR_HAT: COUNTER++,
        SADDLE: COUNTER++,
        WITCH: COUNTER++,
        NIMBUS: COUNTER++,
        WAND1: COUNTER++,
        WAND2: COUNTER++,
        FIREFLY_ITEM: COUNTER++,
        WOOD_ARROW: COUNTER++,
        STONE_ARROW: COUNTER++,
        GOLD_ARROW: COUNTER++,
        DIAMOND_ARROW: COUNTER++,
        AMETHYST_ARROW: COUNTER++,
        REIDITE_ARROW: COUNTER++,
        DRAGON_ARROW: COUNTER++,
        STONES: COUNTER++,
        TREE: COUNTER++,
        PLANT: COUNTER++,
        GOLD: COUNTER++,
        DIAMOND: COUNTER++,
        WOOD_FIRE: COUNTER++,
        WORKBENCH: COUNTER++,
        PLANT_SEED: COUNTER++,
        MEAT: COUNTER++,
        COOKED_MEAT: COUNTER++,
        BIG_FIRE_WOOD: COUNTER++,
        FURNACE_OFF: COUNTER++,
        PAPER: COUNTER++,
        AMETHYST: COUNTER++,
        AMETHYST_WALL: COUNTER++,
        AMETHYST_SPIKE: COUNTER++,
        DOOR_AMETHYST_CLOSE: COUNTER++,
        BRIDGE: COUNTER++,
        SAND: COUNTER++,
        BOTTLE_FULL: COUNTER++,
        BOTTLE_EMPTY: COUNTER++,
        KRAKEN_SKIN: COUNTER++,
        WATERING_CAN: COUNTER++,
        FLOUR: COUNTER++,
        WHEAT_SEED: COUNTER++,
        COOKIE: COUNTER++,
        WILD_WHEAT: COUNTER++,
        WINDMILL: COUNTER++,
        CAKE: COUNTER++,
        FOODFISH: COUNTER++,
        FOODFISH_COOKED: COUNTER++,
        SCALES: COUNTER++,
        INV_GROUND: COUNTER++,
        PLOT: COUNTER++,
        INV_ICE: COUNTER++,
        INV_BREAD: COUNTER++,
        BREAD_OVEN_OFF: COUNTER++,
        INV_SANDWICH: COUNTER++,
        FUR_WINTER: COUNTER++,
        BLUE_CORD: COUNTER++,
        LOCK: COUNTER++,
        DRAGON_HEART: COUNTER++,
        LAVA_HEART: COUNTER++,
        RESURRECTION: COUNTER++,
        EMERALD_MACHINE: COUNTER++,
        EXTRACTOR_MACHINE_STONE: COUNTER++,
        EXTRACTOR_MACHINE_GOLD: COUNTER++,
        EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
        EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
        EXTRACTOR_MACHINE_REIDITE: COUNTER++,
        LOCKPICK: COUNTER++,
        TOTEM: COUNTER++,
        SPIKE: COUNTER++,
        CORD: COUNTER++,
        WALL: COUNTER++,
        STONE_WALL: COUNTER++,
        GOLD_WALL: COUNTER++,
        DIAMOND_WALL: COUNTER++,
        DOOR_WOOD_CLOSE: COUNTER++,
        CHEST: COUNTER++,
        STONE_SPIKE: COUNTER++,
        GOLD_SPIKE: COUNTER++,
        DIAMOND_SPIKE: COUNTER++,
        DOOR_STONE_CLOSE: COUNTER++,
        DOOR_GOLD_CLOSE: COUNTER++,
        DOOR_DIAMOND_CLOSE: COUNTER++,
        FUR_WOLF: COUNTER++,
        INV_GEMME_BLUE: COUNTER++,
        INV_GEMME_GREEN: COUNTER++,
        INV_GEMME_ORANGE: COUNTER++,
        INV_SPECIAL_FUR: COUNTER++,
        INV_SPECIAL_FUR_2: COUNTER++,
        INV_BUCKET_FULL: COUNTER++,
        INV_BUCKET_EMPTY: COUNTER++,
        WELL_EMPTY: COUNTER++,
        SIGN: COUNTER++,
        DRAGON_CUBE: COUNTER++,
        DRAGON_ORB: COUNTER++,
        LAVA_CUBE: COUNTER++,
        LAVA_ORB: COUNTER++,
        PLANT_PUMPKIN: COUNTER++,
        PUMPKIN: COUNTER++,
        ROOF: COUNTER++,
        PLANT_GARLIC: COUNTER++,
        GARLIC: COUNTER++,
        PLANT_THORNBUSH: COUNTER++,
        THORNBUSH: COUNTER++,
        BANDAGE: COUNTER++,
        INV_CRAB_STICK: COUNTER++,
        INV_CRAB_LOOT: COUNTER++,
        BED: COUNTER++,
        SUGAR_CAN: COUNTER++,
        INV_CANDY: COUNTER++,
        GARLAND: COUNTER++,
        REIDITE: COUNTER++,
        MAGMA: COUNTER++,
        PLANT_CARROT: COUNTER++,
        CARROT: COUNTER++,
        PLANT_TOMATO: COUNTER++,
        TOMATO: COUNTER++,
        PLANT_WATERMELON: COUNTER++,
        WATERMELON: COUNTER++,
        PLANT_ALOE_VERA: COUNTER++,
        ALOE_VERA_GROWN: COUNTER++,
        WOOD_DOOR_SPIKE: COUNTER++,
        STONE_DOOR_SPIKE: COUNTER++,
        GOLD_DOOR_SPIKE: COUNTER++,
        DIAMOND_DOOR_SPIKE: COUNTER++,
        AMETHYST_DOOR_SPIKE: COUNTER++,
        REIDITE_WALL: COUNTER++,
        REIDITE_DOOR: COUNTER++,
        REIDITE_SPIKE: COUNTER++,
        REIDITE_DOOR_SPIKE: COUNTER++,
        WOOD_TOWER: COUNTER++,
        PENGUIN_FEATHER: COUNTER++,
        BOAT: COUNTER++,
        SLED: COUNTER++,
        BOAT_WAVE: COUNTER++,
        SLED_WAVE: COUNTER++,
        MOUNT_BOAR: COUNTER++,
        BOAR_STEP: COUNTER++,
        CRAB_STICK: COUNTER++,
        CRAB_LOOT: COUNTER++,
        CRAB_BOSS: COUNTER++,
        BABY_DRAGON: COUNTER++,
        BABY_LAVA: COUNTER++,
        CRAB_STEP: COUNTER++,
        HAWK: COUNTER++,
        PLANE: COUNTER++,
        HAWK_FEATHER: COUNTER++,
        VULTURE: COUNTER++,
        ALOE_VERA: COUNTER++,
        VULTURE_FEATHER: COUNTER++,
        EMERALD: COUNTER++,
        FUR_BOAR: COUNTER++,
        DECORATION: COUNTER++,
        FOD: COUNTER++,
        FIREFLY: COUNTER++,
        HURT_FIREFLY: COUNTER++,
        SPELL: COUNTER++,
        BABY_MAMMOTH: COUNTER++,
        BABY_MAMMOTH_STEP: COUNTER++,
        CRATE: COUNTER++,
        SEED: COUNTER++,
        INV_DRAGON_ORB: COUNTER++,
        INV_LAVA_ORB: COUNTER++,
        CRAFT_SWORD: COUNTER++,
        BODY: COUNTER++,
        CRAFT_PICK: COUNTER++,
        CRAFT_PICK_DIAMOND: COUNTER++,
        INV_PICK_GOLD: COUNTER++,
        MINIMAP: COUNTER++,
        SPIDER: COUNTER++,
        INV_SWORD: COUNTER++,
        CRAFT_WORK: COUNTER++,
        CRAFT_STONE_WALL: COUNTER++,
        RABBIT: COUNTER++,
        CRAFT_GOLD_WALL: COUNTER++,
        WEB: COUNTER++,
        GAUGES: COUNTER++,
        CRAFT_DOOR_WOOD_CLOSE: COUNTER++,
        CHEST_PLANT: COUNTER++,
        CHEST_GOLD: COUNTER++,
        CHEST_DIAMOND: COUNTER++,
        CHEST_PICK_GOLD: COUNTER++,
        CHEST_FIRE: COUNTER++,
        CHEST_PICK_WOOD: COUNTER++,
        CHEST_MEAT: COUNTER++,
        CHEST_BIG_FIRE: COUNTER++,
        INV_PLANT: COUNTER++,
        LEADERBOARD: COUNTER++,
        HURT: COUNTER++,
        COLD: COUNTER++,
        HUNGER: COUNTER++,
        GROUND_FIRE: COUNTER++,
        COUNTER: COUNTER++,
        CRAFT_SEED: COUNTER++,
        HERB: COUNTER++,
        HAND_SHADOW: COUNTER++,
        PLANT_MINI: COUNTER++,
        FIRE: COUNTER++,
        HALO_FIRE: COUNTER++,
        CRAFT_SWORD_GOLD: COUNTER++,
        CRAFT_SWORD_DIAMOND: COUNTER++,
        INV_SWORD_GOLD: COUNTER++,
        INV_SWORD_DIAMOND: COUNTER++,
        FRUIT: COUNTER++,
        CRAFT_PICK_GOLD: COUNTER++,
        INV_PICK_DIAMOND: COUNTER++,
        INV_GOLD: COUNTER++,
        INV_DIAMOND: COUNTER++,
        WOLF: COUNTER++,
        INV_MEAT: COUNTER++,
        GEAR2: COUNTER++,
        CRAFT_FIRE: COUNTER++,
        INV_BANDAGE: COUNTER++,
        CRAFT_BANDAGE: COUNTER++,
        INV_CORD: COUNTER++,
        YOUR_SCORE: COUNTER++,
        TREE_BRANCH: COUNTER++,
        HEAL: COUNTER++,
        INV_FIRE: COUNTER++,
        INV_WORK: COUNTER++,
        INV_SEED: COUNTER++,
        INV_PICK: COUNTER++,
        INV_PICK_WOOD: COUNTER++,
        CRAFT_PICK_WOOD: COUNTER++,
        INV_STONE: COUNTER++,
        INV_WOOD: COUNTER++,
        INV_WALL: COUNTER++,
        CRAFT_WALL: COUNTER++,
        INV_SPIKE: COUNTER++,
        CRAFT_SPIKE: COUNTER++,
        WHEAT_MOB: COUNTER++,
        HURT_RABBIT: COUNTER++,
        INV_COOKED_MEAT: COUNTER++,
        GEAR: COUNTER++,
        CRAFT_COOKED_MEAT: COUNTER++,
        HURT_WOLF: COUNTER++,
        CRAFT_BIG_FIRE: COUNTER++,
        INV_BIG_FIRE: COUNTER++,
        INV_STONE_WALL: COUNTER++,
        INV_GOLD_WALL: COUNTER++,
        INV_DIAMOND_WALL: COUNTER++,
        CRAFT_DIAMOND_WALL: COUNTER++,
        HURT_SPIDER: COUNTER++,
        EMPTY_SLOT: COUNTER++,
        INV_DOOR_WOOD_CLOSE: COUNTER++,
        DOOR_WOOD_OPEN: COUNTER++,
        INV_CHEST: COUNTER++,
        CRAFT_CHEST: COUNTER++,
        CHEST_SLOT: COUNTER++,
        CHEST_SWORD: COUNTER++,
        CHEST_PICK: COUNTER++,
        CHEST_STONE: COUNTER++,
        CHEST_WOOD: COUNTER++,
        CHEST_PICK_DIAMOND: COUNTER++,
        CHEST_SWORD_GOLD: COUNTER++,
        CHEST_SWORD_DIAMOND: COUNTER++,
        CHEST_WORK: COUNTER++,
        CHEST_SEED: COUNTER++,
        CHEST_WALL: COUNTER++,
        CHEST_SPIKE: COUNTER++,
        CHEST_COOKED_MEAT: COUNTER++,
        CHEST_BANDAGE: COUNTER++,
        CHEST_CORD: COUNTER++,
        CHEST_STONE_WALL: COUNTER++,
        CHEST_GOLD_WALL: COUNTER++,
        CHEST_DIAMOND_WALL: COUNTER++,
        CHEST_DOOR_WOOD_CLOSE: COUNTER++,
        CHEST_WORKBENCH: COUNTER++,
        CHEST_CHEST: COUNTER++,
        CRAFT_STONE_SPIKE: COUNTER++,
        INV_STONE_SPIKE: COUNTER++,
        INV_GOLD_SPIKE: COUNTER++,
        CRAFT_GOLD_SPIKE: COUNTER++,
        INV_DIAMOND_SPIKE: COUNTER++,
        CRAFT_DIAMOND_SPIKE: COUNTER++,
        CHEST_PLUS: COUNTER++,
        CRAFT_BAG: COUNTER++,
        INV_FUR: COUNTER++,
        INV_EARMUFFS: COUNTER++,
        CRAFT_EARMUFFS: COUNTER++,
        CRAFT_DOOR_STONE_CLOSE: COUNTER++,
        INV_DOOR_STONE_CLOSE: COUNTER++,
        DOOR_STONE_OPEN: COUNTER++,
        CRAFT_DOOR_GOLD_CLOSE: COUNTER++,
        INV_DOOR_GOLD_CLOSE: COUNTER++,
        DOOR_GOLD_OPEN: COUNTER++,
        CRAFT_DOOR_DIAMOND_CLOSE: COUNTER++,
        INV_DOOR_DIAMOND_CLOSE: COUNTER++,
        DOOR_DIAMOND_OPEN: COUNTER++,
        CRAFT_COAT: COUNTER++,
        INV_COAT: COUNTER++,
        CHEST_STONE_SPIKE: COUNTER++,
        CHEST_GOLD_SPIKE: COUNTER++,
        CHEST_DIAMOND_SPIKE: COUNTER++,
        CHEST_BAG: COUNTER++,
        CHEST_FUR: COUNTER++,
        CHEST_EARMUFFS: COUNTER++,
        CHEST_DOOR_STONE_CLOSE: COUNTER++,
        CHEST_DOOR_GOLD_CLOSE: COUNTER++,
        CHEST_DOOR_DIAMOND_CLOSE: COUNTER++,
        CHEST_COAT: COUNTER++,
        INV_BAG: COUNTER++,
        INV_FUR_WOLF: COUNTER++,
        CHEST_FUR_WOLF: COUNTER++,
        INV_SPEAR: COUNTER++,
        CRAFT_SPEAR: COUNTER++,
        CHEST_SPEAR: COUNTER++,
        INV_GOLD_SPEAR: COUNTER++,
        CRAFT_GOLD_SPEAR: COUNTER++,
        CHEST_GOLD_SPEAR: COUNTER++,
        INV_WOOD_SPEAR: COUNTER++,
        CRAFT_WOOD_SPEAR: COUNTER++,
        CHEST_WOOD_SPEAR: COUNTER++,
        INV_DIAMOND_SPEAR: COUNTER++,
        CRAFT_DIAMOND_SPEAR: COUNTER++,
        CHEST_DIAMOND_SPEAR: COUNTER++,
        FURNACE_ON: COUNTER++,
        INV_FURNACE: COUNTER++,
        CRAFT_FURNACE: COUNTER++,
        CHEST_FURNACE: COUNTER++,
        FURNACE_SLOT: COUNTER++,
        FURNACE_BUTTON: COUNTER++,
        FIR: COUNTER++,
        STONES_WINTER: COUNTER++,
        GOLD_WINTER: COUNTER++,
        DIAMOND_WINTER: COUNTER++,
        GROUND_FIRE_WINTER: COUNTER++,
        INV_AMETHYST: COUNTER++,
        FOX: COUNTER++,
        INV_EXPLORER_HAT: COUNTER++,
        CRAFT_EXPLORER_HAT: COUNTER++,
        CHEST_EXPLORER_HAT: COUNTER++,
        INV_PIRATE_HAT: COUNTER++,
        CRAFT_PIRATE_HAT: COUNTER++,
        CHEST_PIRATE_HAT: COUNTER++,
        INV_PILOT_HELMET: COUNTER++,
        CRAFT_PILOT_HELMET: COUNTER++,
        CHEST_PILOT_HELMET: COUNTER++,
        INV_STONE_HELMET: COUNTER++,
        CRAFT_STONE_HELMET: COUNTER++,
        CHEST_STONE_HELMET: COUNTER++,
        INV_GOLD_HELMET: COUNTER++,
        CRAFT_GOLD_HELMET: COUNTER++,
        CHEST_GOLD_HELMET: COUNTER++,
        INV_DIAMOND_HELMET: COUNTER++,
        CRAFT_DIAMOND_HELMET: COUNTER++,
        CHEST_DIAMOND_HELMET: COUNTER++,
        INV_BOOK: COUNTER++,
        CRAFT_BOOK: COUNTER++,
        CHEST_BOOK: COUNTER++,
        INV_PAPER: COUNTER++,
        CRAFT_PAPER: COUNTER++,
        CHEST_PAPER: COUNTER++,
        HERB_WINTER: COUNTER++,
        BEAR: COUNTER++,
        CHEST_AMETHYST: COUNTER++,
        SNOW: COUNTER++,
        DRAGON_GROUND: COUNTER++,
        DRAGON: COUNTER++,
        LAVA_DRAGON: COUNTER++,
        WING_LEFT: COUNTER++,
        WING_RIGHT: COUNTER++,
        LAVA_WING_LEFT: COUNTER++,
        LAVA_WING_RIGHT: COUNTER++,
        INV_SWORD_AMETHYST: COUNTER++,
        CRAFT_SWORD_AMETHYST: COUNTER++,
        CHEST_SWORD_AMETHYST: COUNTER++,
        INV_PICK_AMETHYST: COUNTER++,
        CHEST_PICK_AMETHYST: COUNTER++,
        CRAFT_PICK_AMETHYST: COUNTER++,
        HURT_FOX: COUNTER++,
        HURT_BEAR: COUNTER++,
        HURT_DRAGON: COUNTER++,
        HURT_LAVA_DRAGON: COUNTER++,
        SLOT_NUMBER: COUNTER++,
        HURT_WING_LEFT: COUNTER++,
        HURT_WING_RIGHT: COUNTER++,
        HURT_LAVA_WING_LEFT: COUNTER++,
        HURT_LAVA_WING_RIGHT: COUNTER++,
        FLAKES: COUNTER++,
        DESERT: COUNTER++,
        INV_AMETHYST_SPEAR: COUNTER++,
        CRAFT_AMETHYST_SPEAR: COUNTER++,
        CHEST_AMETHYST_SPEAR: COUNTER++,
        SNOW_STEP: COUNTER++,
        LAVA_STEP: COUNTER++,
        INV_HAMMER: COUNTER++,
        CRAFT_HAMMER: COUNTER++,
        CHEST_HAMMER: COUNTER++,
        INV_HAMMER_GOLD: COUNTER++,
        CRAFT_HAMMER_GOLD: COUNTER++,
        CHEST_HAMMER_GOLD: COUNTER++,
        INV_HAMMER_DIAMOND: COUNTER++,
        CRAFT_HAMMER_DIAMOND: COUNTER++,
        CHEST_HAMMER_DIAMOND: COUNTER++,
        INV_HAMMER_AMETHYST: COUNTER++,
        CRAFT_HAMMER_AMETHYST: COUNTER++,
        CHEST_HAMMER_AMETHYST: COUNTER++,
        INV_HAMMER_REIDITE: COUNTER++,
        CRAFT_HAMMER_REIDITE: COUNTER++,
        CHEST_HAMMER_REIDITE: COUNTER++,
        INV_AMETHYST_WALL: COUNTER++,
        CRAFT_AMETHYST_WALL: COUNTER++,
        CHEST_AMETHYST_WALL: COUNTER++,
        INV_AMETHYST_SPIKE: COUNTER++,
        CRAFT_AMETHYST_SPIKE: COUNTER++,
        CHEST_AMETHYST_SPIKE: COUNTER++,
        CRAFT_DOOR_AMETHYST_CLOSE: COUNTER++,
        INV_DOOR_AMETHYST_CLOSE: COUNTER++,
        DOOR_AMETHYST_OPEN: COUNTER++,
        CHEST_DOOR_AMETHYST_CLOSE: COUNTER++,
        INV_CAP_SCARF: COUNTER++,
        CRAFT_CAP_SCARF: COUNTER++,
        CHEST_CAP_SCARF: COUNTER++,
        INV_FUR_WINTER: COUNTER++,
        CHEST_FUR_WINTER: COUNTER++,
        SLOT_NUMBER: COUNTER++,
        DOOR_WOOD_OPEN_WINTER: COUNTER++,
        DOOR_STONE_OPEN_WINTER: COUNTER++,
        DOOR_GOLD_OPEN_WINTER: COUNTER++,
        DOOR_DIAMOND_OPEN_WINTER: COUNTER++,
        DOOR_AMETHYST_OPEN_WINTER: COUNTER++,
        INV_BLUE_CORD: COUNTER++,
        CHEST_BLUE_CORD: COUNTER++,
        CRAFT_BLUE_CORD: COUNTER++,
        BIGMAP: COUNTER++,
        SHOW_SPECTATORS: COUNTER++,
        INV_LOCK: COUNTER++,
        CRAFT_LOCK: COUNTER++,
        CHEST_LOCK: COUNTER++,
        INV_DRAGON_HEART: COUNTER++,
        CHEST_DRAGON_HEART: COUNTER++,
        INV_LAVA_HEART: COUNTER++,
        CHEST_LAVA_HEART: COUNTER++,
        RECONNECT: COUNTER++,
        RESURRECTION_GROUND: COUNTER++,
        RESURRECTION_HOLE: COUNTER++,
        RESURRECTION_ROTATE: COUNTER++,
        INV_RESURRECTION: COUNTER++,
        CRAFT_RESURRECTION: COUNTER++,
        CHEST_RESURRECTION: COUNTER++,
        INV_LOCKPICK: COUNTER++,
        CRAFT_LOCKPICK: COUNTER++,
        CHEST_LOCKPICK: COUNTER++,
        KEY: COUNTER++,
        PADLOCK: COUNTER++,
        DELAY_WEAPON: COUNTER++,
        LOCKED: COUNTER++,
        PADLOCK_ON_CHEST: COUNTER++,
        BUBBLES: COUNTER++,
        INV_AMETHYST_HELMET: COUNTER++,
        CRAFT_AMETHYST_HELMET: COUNTER++,
        CHEST_AMETHYST_HELMET: COUNTER++,
        SPECIAL_ITEMS: COUNTER++,
        POINTS: COUNTER++,
        AUTO_FEED: COUNTER++,
        BANDAGE_ACTIVATED: COUNTER++,
        STOP_REGENERATION: COUNTER++,
        STOP_REGENERATION_BLIZZARD: COUNTER++,
        INV_SUPER_HAMMER: COUNTER++,
        CRAFT_SUPER_HAMMER: COUNTER++,
        CHEST_SUPER_HAMMER: COUNTER++,
        INV_TOTEM: COUNTER++,
        CHEST_TOTEM: COUNTER++,
        CRAFT_TOTEM: COUNTER++,
        TEAM_BUTTON: COUNTER++,
        MANAGE_TEAM_BUTTON: COUNTER++,
        ICON_MEMBER: COUNTER++,
        ICON_LEADER: COUNTER++,
        FULL_TEAM_BUTTON: COUNTER++,
        SHOW_TEAM_BUTTON: COUNTER++,
        DELAY_TEAM: COUNTER++,
        INV_DRAGON_SWORD: COUNTER++,
        CRAFT_DRAGON_SWORD: COUNTER++,
        CHEST_DRAGON_SWORD: COUNTER++,
        INV_LAVA_SWORD: COUNTER++,
        CRAFT_LAVA_SWORD: COUNTER++,
        CHEST_LAVA_SWORD: COUNTER++,
        INV_WOOD_BOW: COUNTER++,
        CRAFT_WOOD_BOW: COUNTER++,
        CHEST_WOOD_BOW: COUNTER++,
        INV_STONE_BOW: COUNTER++,
        CRAFT_STONE_BOW: COUNTER++,
        CHEST_STONE_BOW: COUNTER++,
        INV_GOLD_BOW: COUNTER++,
        CRAFT_GOLD_BOW: COUNTER++,
        CHEST_GOLD_BOW: COUNTER++,
        INV_DIAMOND_BOW: COUNTER++,
        CRAFT_DIAMOND_BOW: COUNTER++,
        CHEST_DIAMOND_BOW: COUNTER++,
        INV_AMETHYST_BOW: COUNTER++,
        CRAFT_AMETHYST_BOW: COUNTER++,
        CHEST_AMETHYST_BOW: COUNTER++,
        INV_REIDITE_BOW: COUNTER++,
        CRAFT_REIDITE_BOW: COUNTER++,
        CHEST_REIDITE_BOW: COUNTER++,
        INV_DRAGON_BOW: COUNTER++,
        CRAFT_DRAGON_BOW: COUNTER++,
        CHEST_DRAGON_BOW: COUNTER++,
        CHEST_DRAGON_ORB: COUNTER++,
        CHEST_LAVA_ORB: COUNTER++,
        SHOP: COUNTER++,
        CURSED_SWORD: COUNTER++,
        INV_CURSED_SWORD: COUNTER++,
        CRAFT_CURSED_SWORD: COUNTER++,
        CHEST_CURSED_SWORD: COUNTER++,
        ITEM1: COUNTER++,
        ITEM2: COUNTER++,
        ITEM3: COUNTER++,
        ITEM4: COUNTER++,
        SAND_BORDER: COUNTER++,
        SAND_STEP: COUNTER++,
        OCEAN: COUNTER++,
        CRAFT_BRIDGE: COUNTER++,
        INV_BRIDGE: COUNTER++,
        CHEST_BRIDGE: COUNTER++,
        LACK: COUNTER++,
        OXYGEN: COUNTER++,
        INV_SAND: COUNTER++,
        CHEST_SAND: COUNTER++,
        CRAFT_BOTTLE_EMPTY: COUNTER++,
        INV_BOTTLE_EMPTY: COUNTER++,
        INV_BOTTLE_FULL: COUNTER++,
        CHEST_BOTTLE_EMPTY: COUNTER++,
        CHEST_BOTTLE_FULL: COUNTER++,
        INV_SHOVEL: COUNTER++,
        CHEST_SHOVEL: COUNTER++,
        CRAFT_SHOVEL: COUNTER++,
        LAKE_DEEP: COUNTER++,
        LAKE: COUNTER++,
        LAKE_EDGE: COUNTER++,
        SHINGLE: COUNTER++,
        DRIED_PLANT: COUNTER++,
        INV_KRAKEN_SKIN: COUNTER++,
        CHEST_KRAKEN_SKIN: COUNTER++,
        INV_WATERING_CAN: COUNTER++,
        CRAFT_WATERING_CAN: COUNTER++,
        CHEST_WATERING_CAN: COUNTER++,
        INV_FLOUR: COUNTER++,
        CHEST_FLOUR: COUNTER++,
        INV_WHEAT_SEED: COUNTER++,
        CRAFT_WHEAT_SEED: COUNTER++,
        CHEST_WHEAT_SEED: COUNTER++,
        INV_COOKIE: COUNTER++,
        CRAFT_COOKIE: COUNTER++,
        CHEST_COOKIE: COUNTER++,
        KRAKEN: COUNTER++,
        DRIED_WHEAT: COUNTER++,
        INV_WILD_WHEAT: COUNTER++,
        CHEST_WILD_WHEAT: COUNTER++,
        WINDMILL_WINGS: COUNTER++,
        WINDMILL_HEAD: COUNTER++,
        CRAFT_WINDMILL: COUNTER++,
        INV_WINDMILL: COUNTER++,
        CHEST_WINDMILL: COUNTER++,
        INV_SUPER_DIVING_SUIT: COUNTER++,
        CRAFT_SUPER_DIVING_SUIT: COUNTER++,
        CHEST_SUPER_DIVING_SUIT: COUNTER++,
        INV_DIVING_MASK: COUNTER++,
        CRAFT_DIVING_MASK: COUNTER++,
        CHEST_DIVING_MASK: COUNTER++,
        INV_WATERING_CAN_FULL: COUNTER++,
        CHEST_WATERING_CAN_FULL: COUNTER++,
        CRAFT_WATERING_CAN_FULL: COUNTER++,
        WINDMILL_CASES: COUNTER++,
        EXTRACTOR_CASES: COUNTER++,
        WINDMILL_WHEAT_SEED: COUNTER++,
        WINDMILL_FLOUR: COUNTER++,
        INV_CAKE: COUNTER++,
        CRAFT_CAKE: COUNTER++,
        CHEST_CAKE: COUNTER++,
        INV_FOODFISH: COUNTER++,
        CHEST_FOODFISH: COUNTER++,
        INV_FOODFISH_COOKED: COUNTER++,
        CHEST_FOODFISH_COOKED: COUNTER++,
        CRAFT_FOODFISH_COOKED: COUNTER++,
        DELAY_DRINK: COUNTER++,
        WHEAT_SEED_DRIED: COUNTER++,
        HEART_SYMBOL_HUD: COUNTER++,
        COLD_SYMBOL_HUD: COUNTER++,
        FOOD_SYMBOL_HUD: COUNTER++,
        WATER_SYMBOL_HUD: COUNTER++,
        PIRANHA: COUNTER++,
        INV_SCALES: COUNTER++,
        CHEST_SCALES: COUNTER++,
        CAVE_STONES: COUNTER++,
        HERB_CAVE: COUNTER++,
        WATERBLOCK: COUNTER++,
        SHADOW_CAVE_STONES: COUNTER++,
        CAVE_STEP: COUNTER++,
        DELAY_SPIKE: COUNTER++,
        CHEST_GROUND: COUNTER++,
        CHEST_PLOT: COUNTER++,
        CRAFT_PLOT: COUNTER++,
        INV_PLOT: COUNTER++,
        CHEST_ICE: COUNTER++,
        HURT_KRAKEN: COUNTER++,
        HURT_PIRANHA: COUNTER++,
        CHEST_BREAD: COUNTER++,
        CRAFT_BREAD: COUNTER++,
        TREASURE_CHEST: COUNTER++,
        ISLAND: COUNTER++,
        PALM: COUNTER++,
        WAVE_ONE: COUNTER++,
        WAVE_TWO: COUNTER++,
        ISLAND_BLOCK: COUNTER++,
        HURT_TREASURE_CHEST: COUNTER++,
        ISLAND_STEP: COUNTER++,
        INV_SHOVEL_GOLD: COUNTER++,
        CRAFT_SHOVEL_GOLD: COUNTER++,
        CHEST_SHOVEL_GOLD: COUNTER++,
        INV_SHOVEL_DIAMOND: COUNTER++,
        CHEST_SHOVEL_DIAMOND: COUNTER++,
        CRAFT_SHOVEL_DIAMOND: COUNTER++,
        INV_SHOVEL_AMETHYST: COUNTER++,
        CRAFT_SHOVEL_AMETHYST: COUNTER++,
        CHEST_SHOVEL_AMETHYST: COUNTER++,
        RECIPE_BUTTON: COUNTER++,
        INV_SPANNER: COUNTER++,
        CHEST_SPANNER: COUNTER++,
        CRAFT_SPANNER: COUNTER++,
        INV_MACHETE: COUNTER++,
        CHEST_MACHETE: COUNTER++,
        CRAFT_MACHETE: COUNTER++,
        CRAFT_BOTTLE_FULL: COUNTER++,
        BREAD_OVEN_ON: COUNTER++,
        INV_BREAD_OVEN: COUNTER++,
        CRAFT_BREAD_OVEN: COUNTER++,
        CHEST_BREAD_OVEN: COUNTER++,
        BREAD_LIGHT_UP: COUNTER++,
        BREAD_LIGHT_DOWN: COUNTER++,
        BREAD_OVEN_UI: COUNTER++,
        BREAD_OVEN_WOOD: COUNTER++,
        BREAD_OVEN_BREAD: COUNTER++,
        CLOCK: COUNTER++,
        ARROW_CLOCK: COUNTER++,
        OPTION_BUTTON: COUNTER++,
        DEAD_BOX: COUNTER++,
        HURT_DEAD_BOX: COUNTER++,
        CRAFT_SANDWICH: COUNTER++,
        CHEST_SANDWICH: COUNTER++,
        INV_DRAGON_HELMET: COUNTER++,
        CHEST_DRAGON_HELMET: COUNTER++,
        CRAFT_DRAGON_HELMET: COUNTER++,
        INV_LAVA_HELMET: COUNTER++,
        CHEST_LAVA_HELMET: COUNTER++,
        CRAFT_LAVA_HELMET: COUNTER++,
        INV_WITCH: COUNTER++,
        CHEST_WITCH: COUNTER++,
        CRAFT_WITCH: COUNTER++,
        INV_NIMBUS: COUNTER++,
        CHEST_NIMBUS: COUNTER++,
        CRAFT_NIMBUS: COUNTER++,
        INV_WAND1: COUNTER++,
        CHEST_WAND1: COUNTER++,
        CRAFT_WAND1: COUNTER++,
        INV_WAND2: COUNTER++,
        CHEST_WAND2: COUNTER++,
        CRAFT_WAND2: COUNTER++,
        DRAGON_SWORD_HALO: COUNTER++,
        INV_DRAGON_CUBE: COUNTER++,
        CHEST_DRAGON_CUBE: COUNTER++,
        INV_LAVA_CUBE: COUNTER++,
        CHEST_LAVA_CUBE: COUNTER++,
        QUEST_BUTTON: COUNTER++,
        INV_CROWN_GREEN: COUNTER++,
        CHEST_CROWN_GREEN: COUNTER++,
        CRAFT_CROWN_GREEN: COUNTER++,
        CHEST_GEMME_GREEN: COUNTER++,
        INV_CROWN_ORANGE: COUNTER++,
        CHEST_CROWN_ORANGE: COUNTER++,
        CRAFT_CROWN_ORANGE: COUNTER++,
        CHEST_GEMME_ORANGE: COUNTER++,
        INV_CROWN_BLUE: COUNTER++,
        CHEST_CROWN_BLUE: COUNTER++,
        CHEST_GEMME_BLUE: COUNTER++,
        INV_HOOD: COUNTER++,
        CRAFT_HOOD: COUNTER++,
        CHEST_HOOD: COUNTER++,
        CRAFT_CROWN_BLUE: COUNTER++,
        INV_PEASANT: COUNTER++,
        CRAFT_PEASANT: COUNTER++,
        CHEST_PEASANT: COUNTER++,
        CHEST_SPECIAL_FUR: COUNTER++,
        CHEST_SPECIAL_FUR_2: COUNTER++,
        INV_WINTER_PEASANT: COUNTER++,
        CRAFT_WINTER_PEASANT: COUNTER++,
        CHEST_WINTER_PEASANT: COUNTER++,
        INV_WINTER_HOOD: COUNTER++,
        CRAFT_WINTER_HOOD: COUNTER++,
        CHEST_WINTER_HOOD: COUNTER++,
        SOUND_BUTTON_ON: COUNTER++,
        SOUND_BUTTON_OFF: COUNTER++,
        CRAFT_BUCKET_FULL: COUNTER++,
        CRAFT_BUCKET_EMPTY: COUNTER++,
        CHEST_BUCKET_FULL: COUNTER++,
        CHEST_BUCKET_EMPTY: COUNTER++,
        WELL_FULL: COUNTER++,
        INV_WELL: COUNTER++,
        CHEST_WELL: COUNTER++,
        CRAFT_WELL: COUNTER++,
        DELAY_HELMET: COUNTER++,
        GLOVES_HOOD: COUNTER++,
        DELAY_WALL: COUNTER++,
        MARKET_BUTTON: COUNTER++,
        ACCESSORY: COUNTER++,
        MARKET_BGD: COUNTER++,
        DEAD_BOX_UI: COUNTER++,
        CRAFT_SIGN: COUNTER++,
        INV_SIGN: COUNTER++,
        CHEST_SIGN: COUNTER++,
        SYMBOLS: COUNTER++,
        SIGN_BUTTON: COUNTER++,
        TREE_WEB1: COUNTER++,
        TREE_WEB2: COUNTER++,
        TREE_BRANCH_WEB1: COUNTER++,
        TREE_BRANCH_WEB2: COUNTER++,
        INV_PUMPKIN_SEED: COUNTER++,
        CRAFT_PUMPKIN_SEED: COUNTER++,
        CHEST_PUMPKIN_SEED: COUNTER++,
        PUMPKIN_SEED_MOB: COUNTER++,
        PLANT_PUMPKIN_DRIED: COUNTER++,
        DRIED_PUMPKIN: COUNTER++,
        INV_PUMPKIN: COUNTER++,
        CHEST_PUMPKIN: COUNTER++,
        HALO_FIRE_PUMPKIN: COUNTER++,
        GROUND_FIRE_PUMPKIN: COUNTER++,
        MINIMAP_CTX: COUNTER++,
        BIGMAP_CTX: COUNTER++,
        ZOMBIE_BODY: COUNTER++,
        ZOMBIE_HEAD: COUNTER++,
        ZOMBIE_HAND: COUNTER++,
        ZOMBIE_HURT: COUNTER++,
        ZOMBIE_HUNGER: COUNTER++,
        ZOMBIE_HEAL: COUNTER++,
        INV_WOOD_HELMET: COUNTER++,
        CRAFT_WOOD_HELMET: COUNTER++,
        CHEST_WOOD_HELMET: COUNTER++,
        INV_SWORD_WOOD: COUNTER++,
        CRAFT_SWORD_WOOD: COUNTER++,
        CHEST_SWORD_WOOD: COUNTER++,
        ZOMBIE_PLAYER: COUNTER++,
        VAMPIRE: COUNTER++,
        INV_GARLIC_SEED: COUNTER++,
        CRAFT_GARLIC_SEED: COUNTER++,
        CHEST_GARLIC_SEED: COUNTER++,
        GARLIC_SEED_MOB: COUNTER++,
        PLANT_GARLIC_DRIED: COUNTER++,
        DRIED_GARLIC: COUNTER++,
        INV_GARLIC: COUNTER++,
        CHEST_GARLIC: COUNTER++,
        INV_ROOF: COUNTER++,
        CRAFT_ROOF: COUNTER++,
        CHEST_ROOF: COUNTER++,
        INV_THORNBUSH_SEED: COUNTER++,
        CRAFT_THORNBUSH_SEED: COUNTER++,
        CHEST_THORNBUSH_SEED: COUNTER++,
        THORNBUSH_SEED_MOB: COUNTER++,
        PLANT_THORNBUSH_DRIED: COUNTER++,
        INV_THORNBUSH: COUNTER++,
        CHEST_THORNBUSH: COUNTER++,
        CRAFT_THORNBUSH: COUNTER++,
        ROOFS: COUNTER++,
        GIFT: COUNTER++,
        TREE_SNOW1: COUNTER++,
        TREE_SNOW2: COUNTER++,
        TREE_BRANCH_SNOW1: COUNTER++,
        TREE_BRANCH_SNOW2: COUNTER++,
        HURT_GIFT: COUNTER++,
        INV_PIRATE_SWORD: COUNTER++,
        CRAFT_PIRATE_SWORD: COUNTER++,
        CHEST_PIRATE_SWORD: COUNTER++,
        CHEST_SUGAR_CAN: COUNTER++,
        CRAFT_SUGAR_CAN: COUNTER++,
        INV_SUGAR_CAN: COUNTER++,
        INV_FERRERO: COUNTER++,
        CHEST_FERRERO: COUNTER++,
        CHEST_CANDY: COUNTER++,
        DRIED_THORNBUSH: COUNTER++,
        INV_GARLAND: COUNTER++,
        CHEST_GARLAND: COUNTER++,
        GARLANDS: COUNTER++,
        GARLANDS_LIGHT: COUNTER++,
        INV_DRAGON_SPEAR: COUNTER++,
        CHEST_DRAGON_SPEAR: COUNTER++,
        CRAFT_DRAGON_SPEAR: COUNTER++,
        INV_LAVA_SPEAR: COUNTER++,
        CHEST_LAVA_SPEAR: COUNTER++,
        CRAFT_LAVA_SPEAR: COUNTER++,
        INV_CHRISTMAS_HAT: COUNTER++,
        CHEST_CHRISTMAS_HAT: COUNTER++,
        INV_ELF_HAT: COUNTER++,
        CHEST_ELF_HAT: COUNTER++,
        ROBOT_SKIN: COUNTER++,
        VERIFIED: COUNTER++,
        CRAB_ATTACK: COUNTER++,
        CRAB: COUNTER++,
        HURT_CRAB: COUNTER++,
        HURT_CRAB_CLAW_LEFT: COUNTER++,
        HURT_CRAB_CLAW_RIGHT: COUNTER++,
        HEAL_CRAB: COUNTER++,
        HEAL_CRAB_CLAW_LEFT: COUNTER++,
        HEAL_CRAB_CLAW_RIGHT: COUNTER++,
        CRAB_CLAW_LEFT: COUNTER++,
        CRAB_CLAW_RIGHT: COUNTER++,
        CRAB_CLAW_LEFT_ATTACK: COUNTER++,
        CRAB_CLAW_RIGHT_ATTACK: COUNTER++,
        CHEST_CRAB_STICK: COUNTER++,
        CHEST_CRAB_SPEAR: COUNTER++,
        CRAFT_CRAB_SPEAR: COUNTER++,
        INV_CRAB_SPEAR: COUNTER++,
        FISH1: COUNTER++,
        FISH2: COUNTER++,
        HURT_FISH1: COUNTER++,
        HURT_FISH2: COUNTER++,
        CHEST_CRAB_LOOT: COUNTER++,
        INV_BED: COUNTER++,
        CHEST_BED: COUNTER++,
        CRAFT_BED: COUNTER++,
        INV_CROWN_CRAB: COUNTER++,
        CHEST_CROWN_CRAB: COUNTER++,
        CRAFT_CROWN_CRAB: COUNTER++,
        BED_TOP: COUNTER++,
        HURT_RABBIT_SKIN: COUNTER++,
        COLD_RABBIT_SKIN: COUNTER++,
        HUNGER_RABBIT_SKIN: COUNTER++,
        HEAL_RABBIT_SKIN: COUNTER++,
        FIRE_MOB: COUNTER++,
        HURT_FIRE_MOB: COUNTER++,
        GLOVES_DIAMOND_PROTECTION: COUNTER++,
        INV_DIAMOND_PROTECTION: COUNTER++,
        CRAFT_DIAMOND_PROTECTION: COUNTER++,
        CHEST_DIAMOND_PROTECTION: COUNTER++,
        GLOVES_AMETHYST_PROTECTION: COUNTER++,
        INV_AMETHYST_PROTECTION: COUNTER++,
        CRAFT_AMETHYST_PROTECTION: COUNTER++,
        CHEST_AMETHYST_PROTECTION: COUNTER++,
        GLOVES_REIDITE_PROTECTION: COUNTER++,
        INV_REIDITE_PROTECTION: COUNTER++,
        CRAFT_REIDITE_PROTECTION: COUNTER++,
        CHEST_REIDITE_PROTECTION: COUNTER++,
        INV_REIDITE_SWORD: COUNTER++,
        CRAFT_REIDITE_SWORD: COUNTER++,
        CHEST_REIDITE_SWORD: COUNTER++,
        LAVA_SHINGLE: COUNTER++,
        INV_FLAME: COUNTER++,
        CHEST_FLAME: COUNTER++,
        INV_REIDITE: COUNTER++,
        CHEST_REIDITE: COUNTER++,
        HERB_LAVA: COUNTER++,
        LAVA_BUBBLE: COUNTER++,
        ASHES: COUNTER++,
        INV_REIDITE_SPEAR: COUNTER++,
        CRAFT_REIDITE_SPEAR: COUNTER++,
        CHEST_REIDITE_SPEAR: COUNTER++,
        INV_REIDITE_HELMET: COUNTER++,
        CRAFT_REIDITE_HELMET: COUNTER++,
        CHEST_REIDITE_HELMET: COUNTER++,
        INV_CARROT_SEED: COUNTER++,
        CRAFT_CARROT_SEED: COUNTER++,
        CHEST_CARROT_SEED: COUNTER++,
        CARROT_SEED_MOB: COUNTER++,
        PLANT_CARROT_DRIED: COUNTER++,
        DRIED_CARROT: COUNTER++,
        INV_CARROT: COUNTER++,
        CHEST_CARROT: COUNTER++,
        TOMATO_MINI: COUNTER++,
        DRIED_TOMATO_MINI: COUNTER++,
        INV_TOMATO_SEED: COUNTER++,
        CRAFT_TOMATO_SEED: COUNTER++,
        CHEST_TOMATO_SEED: COUNTER++,
        TOMATO_SEED_MOB: COUNTER++,
        PLANT_TOMATO_DRIED: COUNTER++,
        DRIED_TOMATO: COUNTER++,
        INV_TOMATO: COUNTER++,
        INV_WATERMELON_SEED: COUNTER++,
        CRAFT_WATERMELON_SEED: COUNTER++,
        CHEST_WATERMELON_SEED: COUNTER++,
        WATERMELON_SEED_MOB: COUNTER++,
        PLANT_WATERMELON_DRIED: COUNTER++,
        DRIED_WATERMELON: COUNTER++,
        INV_WATERMELON: COUNTER++,
        CHEST_WATERMELON: COUNTER++,
        CHEST_TOMATO: COUNTER++,
        INV_PITCHFORK: COUNTER++,
        CHEST_PITCHFORK: COUNTER++,
        CRAFT_PITCHFORK: COUNTER++,
        INV_PITCHFORK2: COUNTER++,
        CHEST_PITCHFORK2: COUNTER++,
        CRAFT_PITCHFORK2: COUNTER++,
        INV_ALOE_VERA_SEED: COUNTER++,
        CRAFT_ALOE_VERA_SEED: COUNTER++,
        CHEST_ALOE_VERA_SEED: COUNTER++,
        ALOE_VERA_SEED_MOB: COUNTER++,
        PLANT_ALOE_VERA_DRIED: COUNTER++,
        DRIED_ALOE_VERA: COUNTER++,
        INV_ALOE_VERA: COUNTER++,
        CHEST_ALOE_VERA: COUNTER++,
        CACTUS: COUNTER++,
        CRAFT_WOOD_DOOR_SPIKE: COUNTER++,
        INV_WOOD_DOOR_SPIKE: COUNTER++,
        CHEST_WOOD_DOOR_SPIKE: COUNTER++,
        CRAFT_STONE_DOOR_SPIKE: COUNTER++,
        INV_STONE_DOOR_SPIKE: COUNTER++,
        CHEST_STONE_DOOR_SPIKE: COUNTER++,
        CRAFT_GOLD_DOOR_SPIKE: COUNTER++,
        INV_GOLD_DOOR_SPIKE: COUNTER++,
        CHEST_GOLD_DOOR_SPIKE: COUNTER++,
        CRAFT_DIAMOND_DOOR_SPIKE: COUNTER++,
        INV_DIAMOND_DOOR_SPIKE: COUNTER++,
        CHEST_DIAMOND_DOOR_SPIKE: COUNTER++,
        CRAFT_AMETHYST_DOOR_SPIKE: COUNTER++,
        INV_AMETHYST_DOOR_SPIKE: COUNTER++,
        CHEST_AMETHYST_DOOR_SPIKE: COUNTER++,
        CRAFT_REIDITE_DOOR_SPIKE: COUNTER++,
        INV_REIDITE_DOOR_SPIKE: COUNTER++,
        CHEST_REIDITE_DOOR_SPIKE: COUNTER++,
        CRAFT_REIDITE_DOOR: COUNTER++,
        INV_REIDITE_DOOR: COUNTER++,
        CHEST_REIDITE_DOOR: COUNTER++,
        CRAFT_REIDITE_SPIKE: COUNTER++,
        INV_REIDITE_SPIKE: COUNTER++,
        CHEST_REIDITE_SPIKE: COUNTER++,
        CRAFT_REIDITE_WALL: COUNTER++,
        INV_REIDITE_WALL: COUNTER++,
        CHEST_REIDITE_WALL: COUNTER++,
        INV_PICK_REIDITE: COUNTER++,
        CHEST_PICK_REIDITE: COUNTER++,
        CRAFT_PICK_REIDITE: COUNTER++,
        GOLDEN_HEN: COUNTER++,
        GOLDEN_CHICKEN: COUNTER++,
        HURT_GOLDEN_HEN: COUNTER++,
        HURT_GOLDEN_CHICKEN: COUNTER++,
        RIVER: COUNTER++,
        RIVER_DECO: COUNTER++,
        RIVER_WAVE: COUNTER++,
        CRAFT_BOAT: COUNTER++,
        INV_BOAT: COUNTER++,
        CHEST_BOAT: COUNTER++,
        CRAFT_SLED: COUNTER++,
        INV_SLED: COUNTER++,
        CHEST_SLED: COUNTER++,
        PENGUIN: COUNTER++,
        HURT_PENGUIN: COUNTER++,
        INV_PENGUIN_FEATHER: COUNTER++,
        CHEST_PENGUIN_FEATHER: COUNTER++,
        INV_HAWK_FEATHER: COUNTER++,
        CHEST_HAWK_FEATHER: COUNTER++,
        INV_VULTURE_FEATHER: COUNTER++,
        CHEST_VULTURE_FEATHER: COUNTER++,
        FOG: COUNTER++,
        BOAR: COUNTER++,
        BOAR_TAMED: COUNTER++,
        BOAR_ATTACK: COUNTER++,
        HURT_BOAR: COUNTER++,
        INV_SADDLE: COUNTER++,
        CHEST_SADDLE: COUNTER++,
        CRAFT_SADDLE: COUNTER++,
        INV_MOUNT_BOAR: COUNTER++,
        CHEST_MOUNT_BOAR: COUNTER++,
        CRAFT_MOUNT_BOAR: COUNTER++,
        MARKER: COUNTER++,
        CRAB_BOSS_ATTACK: COUNTER++,
        CRAB_BOSS: COUNTER++,
        CRAB_BOSS_TAMED: COUNTER++,
        HURT_CRAB_BOSS: COUNTER++,
        HURT_CRAB_BOSS_CLAW_LEFT: COUNTER++,
        HURT_CRAB_BOSS_CLAW_RIGHT: COUNTER++,
        CRAB_BOSS_CLAW_LEFT_ATTACK: COUNTER++,
        CRAB_BOSS_CLAW_LEFT: COUNTER++,
        CRAB_BOSS_CLAW_LEFT_TAMED: COUNTER++,
        CRAB_BOSS_CLAW_RIGHT_ATTACK: COUNTER++,
        CRAB_BOSS_CLAW_RIGHT: COUNTER++,
        CRAB_BOSS_CLAW_RIGHT_TAMED: COUNTER++,
        HEAL_CRAB_BOSS: COUNTER++,
        HEAL_CRAB_BOSS_CLAW_LEFT: COUNTER++,
        HEAL_CRAB_BOSS_CLAW_RIGHT: COUNTER++,
        BABY_DRAGON_ATTACK: COUNTER++,
        BABY_DRAGON: COUNTER++,
        BABY_DRAGON_TAMED: COUNTER++,
        BABY_DRAGON_WING_LEFT_ATTACK: COUNTER++,
        BABY_DRAGON_WING_LEFT: COUNTER++,
        BABY_DRAGON_WING_LEFT_TAMED: COUNTER++,
        BABY_DRAGON_WING_RIGHT_ATTACK: COUNTER++,
        BABY_DRAGON_WING_RIGHT: COUNTER++,
        BABY_DRAGON_WING_RIGHT_TAMED: COUNTER++,
        HURT_BABY_DRAGON: COUNTER++,
        HURT_BABY_DRAGON_WING_LEFT: COUNTER++,
        HURT_BABY_DRAGON_WING_RIGHT: COUNTER++,
        INV_BABY_DRAGON: COUNTER++,
        CHEST_BABY_DRAGON: COUNTER++,
        CRAFT_BABY_DRAGON: COUNTER++,
        BABY_LAVA_ATTACK: COUNTER++,
        BABY_LAVA: COUNTER++,
        BABY_LAVA_TAMED: COUNTER++,
        BABY_LAVA_WING_LEFT_ATTACK: COUNTER++,
        BABY_LAVA_WING_LEFT: COUNTER++,
        BABY_LAVA_WING_LEFT_TAMED: COUNTER++,
        BABY_LAVA_WING_RIGHT_ATTACK: COUNTER++,
        BABY_LAVA_WING_RIGHT: COUNTER++,
        BABY_LAVA_WING_RIGHT_TAMED: COUNTER++,
        HURT_BABY_LAVA: COUNTER++,
        HURT_BABY_LAVA_WING_LEFT: COUNTER++,
        HURT_BABY_LAVA_WING_RIGHT: COUNTER++,
        INV_BABY_LAVA: COUNTER++,
        CHEST_BABY_LAVA: COUNTER++,
        CRAFT_BABY_LAVA: COUNTER++,
        HAWK_ATTACK: COUNTER++,
        HAWK: COUNTER++,
        HAWK_TAMED: COUNTER++,
        HAWK_WING_LEFT_ATTACK: COUNTER++,
        HAWK_WING_LEFT: COUNTER++,
        HAWK_WING_LEFT_TAMED: COUNTER++,
        HAWK_WING_RIGHT_ATTACK: COUNTER++,
        HAWK_WING_RIGHT: COUNTER++,
        HAWK_WING_RIGHT_TAMED: COUNTER++,
        HURT_HAWK: COUNTER++,
        HURT_HAWK_WING_LEFT: COUNTER++,
        HURT_HAWK_WING_RIGHT: COUNTER++,
        INV_HAWK: COUNTER++,
        CHEST_HAWK: COUNTER++,
        CRAFT_HAWK: COUNTER++,
        HAWK_GROUND: COUNTER++,
        HAWK_GROUND_ATTACK: COUNTER++,
        HURT_HAWK_GROUND: COUNTER++,
        CRAFT_PLANE: COUNTER++,
        INV_PLANE: COUNTER++,
        CHEST_PLANE: COUNTER++,
        VULTURE_ATTACK: COUNTER++,
        VULTURE: COUNTER++,
        VULTURE_TAMED: COUNTER++,
        VULTURE_WING_LEFT_ATTACK: COUNTER++,
        VULTURE_WING_LEFT: COUNTER++,
        VULTURE_WING_LEFT_TAMED: COUNTER++,
        VULTURE_WING_RIGHT_ATTACK: COUNTER++,
        VULTURE_WING_RIGHT: COUNTER++,
        VULTURE_WING_RIGHT_TAMED: COUNTER++,
        HURT_VULTURE: COUNTER++,
        HURT_VULTURE_WING_LEFT: COUNTER++,
        HURT_VULTURE_WING_RIGHT: COUNTER++,
        INV_VULTURE: COUNTER++,
        CHEST_VULTURE: COUNTER++,
        CRAFT_VULTURE: COUNTER++,
        VULTURE_GROUND: COUNTER++,
        VULTURE_GROUND_ATTACK: COUNTER++,
        HURT_VULTURE_GROUND: COUNTER++,
        INV_TURBAN1: COUNTER++,
        CRAFT_TURBAN1: COUNTER++,
        CHEST_TURBAN1: COUNTER++,
        INV_TURBAN2: COUNTER++,
        CRAFT_TURBAN2: COUNTER++,
        CHEST_TURBAN2: COUNTER++,
        SCORPION: COUNTER++,
        HURT_SCORPION: COUNTER++,
        SCORPION_HAND_LEFT: COUNTER++,
        SCORPION_HAND_RIGHT: COUNTER++,
        HURT_SCORPION_HAND_LEFT: COUNTER++,
        HURT_SCORPION_HAND_RIGHT: COUNTER++,
        SAND_WORM_GROUND: ["#E9CF96", "#144940"],
        HURT_SAND_WORM0: COUNTER++,
        SAND_WORM1: COUNTER++,
        HURT_SAND_WORM1: COUNTER++,
        SAND_WORM2: COUNTER++,
        HURT_SAND_WORM2: COUNTER++,
        INV_CACTUS: COUNTER++,
        CHEST_CACTUS: COUNTER++,
        INV_EMERALD: COUNTER++,
        CHEST_EMERALD: COUNTER++,
        INV_PITCHFORK_PART: COUNTER++,
        CHEST_PITCHFORK_PART: COUNTER++,
        INV_PILOT_GLASSES: COUNTER++,
        CHEST_PILOT_GLASSES: COUNTER++,
        INV_FUR_BOAR: COUNTER++,
        CHEST_FUR_BOAR: COUNTER++,
        INV_FIREFLY: COUNTER++,
        CHEST_FIREFLY: COUNTER++,
        INV_WOOD_ARROW: COUNTER++,
        CHEST_WOOD_ARROW: COUNTER++,
        CRAFT_WOOD_ARROW: COUNTER++,
        INV_STONE_ARROW: COUNTER++,
        CHEST_STONE_ARROW: COUNTER++,
        CRAFT_STONE_ARROW: COUNTER++,
        INV_GOLD_ARROW: COUNTER++,
        CHEST_GOLD_ARROW: COUNTER++,
        CRAFT_GOLD_ARROW: COUNTER++,
        INV_DIAMOND_ARROW: COUNTER++,
        CHEST_DIAMOND_ARROW: COUNTER++,
        CRAFT_DIAMOND_ARROW: COUNTER++,
        INV_AMETHYST_ARROW: COUNTER++,
        CHEST_AMETHYST_ARROW: COUNTER++,
        CRAFT_AMETHYST_ARROW: COUNTER++,
        INV_REIDITE_ARROW: COUNTER++,
        CHEST_REIDITE_ARROW: COUNTER++,
        CRAFT_REIDITE_ARROW: COUNTER++,
        INV_DRAGON_ARROW: COUNTER++,
        CHEST_DRAGON_ARROW: COUNTER++,
        CRAFT_DRAGON_ARROW: COUNTER++,
        INV_SANDWORM_JUICE: COUNTER++,
        CHEST_SANDWORM_JUICE: COUNTER++,
        INV_CRAB_BOSS: COUNTER++,
        CHEST_CRAB_BOSS: COUNTER++,
        CRAFT_CRAB_BOSS: COUNTER++,
        EMERALD_MACHINE_GROUND: COUNTER++,
        EMERALD_MACHINE_HOLE: COUNTER++,
        EMERALD_MACHINE_ROTATE: COUNTER++,
        INV_EMERALD_MACHINE: COUNTER++,
        CRAFT_EMERALD_MACHINE: COUNTER++,
        CHEST_EMERALD_MACHINE: COUNTER++,
        EXTRACTOR_MACHINE0_STONE: COUNTER++,
        INV_EXTRACTOR_MACHINE_STONE: COUNTER++,
        CRAFT_EXTRACTOR_MACHINE_STONE: COUNTER++,
        CHEST_EXTRACTOR_MACHINE_STONE: COUNTER++,
        EXTRACTOR_MACHINE0_GOLD: COUNTER++,
        INV_EXTRACTOR_MACHINE_GOLD: COUNTER++,
        CRAFT_EXTRACTOR_MACHINE_GOLD: COUNTER++,
        CHEST_EXTRACTOR_MACHINE_GOLD: COUNTER++,
        EXTRACTOR_MACHINE0_DIAMOND: COUNTER++,
        INV_EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
        CRAFT_EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
        CHEST_EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
        EXTRACTOR_MACHINE0_AMETHYST: COUNTER++,
        INV_EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
        CRAFT_EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
        CHEST_EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
        EXTRACTOR_MACHINE0_REIDITE: COUNTER++,
        INV_EXTRACTOR_MACHINE_REIDITE: COUNTER++,
        CRAFT_EXTRACTOR_MACHINE_REIDITE: COUNTER++,
        CHEST_EXTRACTOR_MACHINE_REIDITE: COUNTER++,
        MAMMOTH: COUNTER++,
        HURT_MAMMOTH: COUNTER++,
        BABY_MAMMOTH: COUNTER++,
        BABY_MAMMOTH_TAMED: COUNTER++,
        BABY_MAMMOTH_ATTACK: COUNTER++,
        HURT_BABY_MAMMOTH: COUNTER++,
        INV_BABY_MAMMOTH: COUNTER++,
        CHEST_BABY_MAMMOTH: COUNTER++,
        CRAFT_BABY_MAMMOTH: COUNTER++,
        INV_FLOWER_HAT: COUNTER++,
        CRAFT_FLOWER_HAT: COUNTER++,
        CHEST_FLOWER_HAT: COUNTER++,
        INV_FUR_HAT: COUNTER++,
        CRAFT_FUR_HAT: COUNTER++,
        CHEST_FUR_HAT: COUNTER++,
        INV_FUR_MAMMOTH: COUNTER++,
        CHEST_FUR_MAMMOTH: COUNTER++,
        CRAFT_WOOD_TOWER: COUNTER++,
        INV_WOOD_TOWER: COUNTER++,
        CHEST_WOOD_TOWER: COUNTER++,
        CRAFT_WOOD_SHIELD: COUNTER++,
        INV_WOOD_SHIELD: COUNTER++,
        CHEST_WOOD_SHIELD: COUNTER++,
        CRAFT_STONE_SHIELD: COUNTER++,
        INV_STONE_SHIELD: COUNTER++,
        CHEST_STONE_SHIELD: COUNTER++,
        CRAFT_GOLD_SHIELD: COUNTER++,
        INV_GOLD_SHIELD: COUNTER++,
        CHEST_GOLD_SHIELD: COUNTER++,
        CRAFT_DIAMOND_SHIELD: COUNTER++,
        INV_DIAMOND_SHIELD: COUNTER++,
        CHEST_DIAMOND_SHIELD: COUNTER++,
        CRAFT_AMETHYST_SHIELD: COUNTER++,
        INV_AMETHYST_SHIELD: COUNTER++,
        CHEST_AMETHYST_SHIELD: COUNTER++,
        CRAFT_REIDITE_SHIELD: COUNTER++,
        INV_REIDITE_SHIELD: COUNTER++,
        CHEST_REIDITE_SHIELD: COUNTER++
    },
    CRAFT = (COUNTER = 0, {
        FIRE: COUNTER++,
        BIG_FIRE: COUNTER++,
        FURNACE: COUNTER++,
        WORKBENCH: COUNTER++,
        PICK_WOOD: COUNTER++,
        PICK: COUNTER++,
        PICK_GOLD: COUNTER++,
        PICK_DIAMOND: COUNTER++,
        PICK_AMETHYST: COUNTER++,
        PICK_REIDITE: COUNTER++,
        HAMMER: COUNTER++,
        HAMMER_GOLD: COUNTER++,
        HAMMER_DIAMOND: COUNTER++,
        HAMMER_AMETHYST: COUNTER++,
        HAMMER_REIDITE: COUNTER++,
        SUPER_HAMMER: COUNTER++,
        SHOVEL: COUNTER++,
        SHOVEL_GOLD: COUNTER++,
        SHOVEL_DIAMOND: COUNTER++,
        SHOVEL_AMETHYST: COUNTER++,
        WATERING_CAN: COUNTER++,
        WATERING_CAN_FULL: COUNTER++,
        PITCHFORK: COUNTER++,
        PITCHFORK2: COUNTER++,
        BOOK: COUNTER++,
        WOOD_SPEAR: COUNTER++,
        SPEAR: COUNTER++,
        GOLD_SPEAR: COUNTER++,
        DIAMOND_SPEAR: COUNTER++,
        AMETHYST_SPEAR: COUNTER++,
        REIDITE_SPEAR: COUNTER++,
        DRAGON_SPEAR: COUNTER++,
        LAVA_SPEAR: COUNTER++,
        CRAB_SPEAR: COUNTER++,
        SWORD_WOOD: COUNTER++,
        SWORD: COUNTER++,
        SWORD_GOLD: COUNTER++,
        SWORD_DIAMOND: COUNTER++,
        SWORD_AMETHYST: COUNTER++,
        REIDITE_SWORD: COUNTER++,
        SEED: COUNTER++,
        WHEAT_SEED: COUNTER++,
        PUMPKIN_SEED: COUNTER++,
        GARLIC_SEED: COUNTER++,
        THORNBUSH_SEED: COUNTER++,
        CARROT_SEED: COUNTER++,
        TOMATO_SEED: COUNTER++,
        WATERMELON_SEED: COUNTER++,
        ALOE_VERA_SEED: COUNTER++,
        COOKED_MEAT: COUNTER++,
        FOODFISH_COOKED: COUNTER++,
        BREAD: COUNTER++,
        COOKIE: COUNTER++,
        CAKE: COUNTER++,
        BANDAGE: COUNTER++,
        WALL: COUNTER++,
        STONE_WALL: COUNTER++,
        GOLD_WALL: COUNTER++,
        DIAMOND_WALL: COUNTER++,
        AMETHYST_WALL: COUNTER++,
        REIDITE_WALL: COUNTER++,
        WOOD_DOOR: COUNTER++,
        STONE_DOOR: COUNTER++,
        GOLD_DOOR: COUNTER++,
        DIAMOND_DOOR: COUNTER++,
        AMETHYST_DOOR: COUNTER++,
        REIDITE_DOOR: COUNTER++,
        SPIKE: COUNTER++,
        STONE_SPIKE: COUNTER++,
        GOLD_SPIKE: COUNTER++,
        DIAMOND_SPIKE: COUNTER++,
        AMETHYST_SPIKE: COUNTER++,
        REIDITE_SPIKE: COUNTER++,
        WOOD_DOOR_SPIKE: COUNTER++,
        STONE_DOOR_SPIKE: COUNTER++,
        GOLD_DOOR_SPIKE: COUNTER++,
        DIAMOND_DOOR_SPIKE: COUNTER++,
        AMETHYST_DOOR_SPIKE: COUNTER++,
        REIDITE_DOOR_SPIKE: COUNTER++,
        CHEST: COUNTER++,
        EXPLORER_HAT: COUNTER++,
        PIRATE_HAT: COUNTER++,
        PILOT_HELMET: COUNTER++,
        EARMUFFS: COUNTER++,
        COAT: COUNTER++,
        CAP_SCARF: COUNTER++,
        FUR_HAT: COUNTER++,
        WOOD_HELMET: COUNTER++,
        STONE_HELMET: COUNTER++,
        GOLD_HELMET: COUNTER++,
        DIAMOND_HELMET: COUNTER++,
        AMETHYST_HELMET: COUNTER++,
        REIDITE_HELMET: COUNTER++,
        DIVING_MASK: COUNTER++,
        SUPER_DIVING_SUIT: COUNTER++,
        DIAMOND_PROTECTION: COUNTER++,
        AMETHYST_PROTECTION: COUNTER++,
        REIDITE_PROTECTION: COUNTER++,
        TURBAN1: COUNTER++,
        TURBAN2: COUNTER++,
        BAG: COUNTER++,
        PAPER: COUNTER++,
        BLUE_CORD: COUNTER++,
        LOCK: COUNTER++,
        LOCKPICK: COUNTER++,
        TOTEM: COUNTER++,
        BRIDGE: COUNTER++,
        ROOF: COUNTER++,
        WOOD_TOWER: COUNTER++,
        PLOT: COUNTER++,
        BOTTLE_EMPTY: COUNTER++,
        BOTTLE_FULL: COUNTER++,
        BOTTLE_FULL_2: COUNTER++,
        BOTTLE_FULL_3: COUNTER++,
        WINDMILL: COUNTER++,
        RESURRECTION: COUNTER++,
        EMERALD_MACHINE: COUNTER++,
        EXTRACTOR_MACHINE_STONE: COUNTER++,
        EXTRACTOR_MACHINE_GOLD: COUNTER++,
        EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
        EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
        EXTRACTOR_MACHINE_REIDITE: COUNTER++,
        SPANNER: COUNTER++,
        MACHETE: COUNTER++,
        BREAD_OVEN: COUNTER++,
        SANDWICH: COUNTER++,
        DRAGON_HELMET: COUNTER++,
        LAVA_HELMET: COUNTER++,
        CROWN_CRAB: COUNTER++,
        DRAGON_SWORD: COUNTER++,
        LAVA_SWORD: COUNTER++,
        WOOD_BOW: COUNTER++,
        WOOD_ARROW: COUNTER++,
        STONE_BOW: COUNTER++,
        STONE_ARROW: COUNTER++,
        GOLD_BOW: COUNTER++,
        GOLD_ARROW: COUNTER++,
        DIAMOND_BOW: COUNTER++,
        DIAMOND_ARROW: COUNTER++,
        AMETHYST_BOW: COUNTER++,
        AMETHYST_ARROW: COUNTER++,
        REIDITE_BOW: COUNTER++,
        REIDITE_ARROW: COUNTER++,
        DRAGON_BOW: COUNTER++,
        DRAGON_ARROW: COUNTER++,
        WOOD_SHIELD: COUNTER++,
        STONE_SHIELD: COUNTER++,
        GOLD_SHIELD: COUNTER++,
        DIAMOND_SHIELD: COUNTER++,
        AMETHYST_SHIELD: COUNTER++,
        REIDITE_SHIELD: COUNTER++,
        CROWN_GREEN: COUNTER++,
        CROWN_ORANGE: COUNTER++,
        CROWN_BLUE: COUNTER++,
        HOOD: COUNTER++,
        PEASANT: COUNTER++,
        WINTER_HOOD: COUNTER++,
        WINTER_PEASANT: COUNTER++,
        BUCKET_FULL: COUNTER++,
        BUCKET_EMPTY: COUNTER++,
        WELL: COUNTER++,
        SIGN: COUNTER++,
        BED: COUNTER++,
        BOAT: COUNTER++,
        SLED: COUNTER++,
        SADDLE: COUNTER++,
        PLANE: COUNTER++,
        WITCH: COUNTER++,
        WAND1: COUNTER++,
        WAND2: COUNTER++,
        NIMBUS: COUNTER++
    }),
    INV = (COUNTER = 0, {
        SWORD: COUNTER++,
        PICK: COUNTER++,
        FUR: COUNTER++,
        PICK_GOLD: COUNTER++,
        PICK_DIAMOND: COUNTER++,
        SWORD_GOLD: COUNTER++,
        SWORD_DIAMOND: COUNTER++,
        HAND: COUNTER++,
        PICK_WOOD: COUNTER++,
        PIRATE_SWORD: COUNTER++,
        EARMUFFS: COUNTER++,
        COAT: COUNTER++,
        WOOD_SPEAR: COUNTER++,
        SPEAR: COUNTER++,
        GOLD_SPEAR: COUNTER++,
        DIAMOND_SPEAR: COUNTER++,
        DRAGON_SPEAR: COUNTER++,
        LAVA_SPEAR: COUNTER++,
        CRAB_SPEAR: COUNTER++,
        REIDITE_SWORD: COUNTER++,
        DIAMOND_PROTECTION: COUNTER++,
        AMETHYST_PROTECTION: COUNTER++,
        REIDITE_PROTECTION: COUNTER++,
        EXPLORER_HAT: COUNTER++,
        PIRATE_HAT: COUNTER++,
        STONE_HELMET: COUNTER++,
        GOLD_HELMET: COUNTER++,
        DIAMOND_HELMET: COUNTER++,
        BOOK: COUNTER++,
        BAG: COUNTER++,
        SWORD_AMETHYST: COUNTER++,
        PICK_AMETHYST: COUNTER++,
        PICK_REIDITE: COUNTER++,
        AMETHYST_SPEAR: COUNTER++,
        REIDITE_SPEAR: COUNTER++,
        HAMMER: COUNTER++,
        HAMMER_GOLD: COUNTER++,
        HAMMER_DIAMOND: COUNTER++,
        HAMMER_AMETHYST: COUNTER++,
        HAMMER_REIDITE: COUNTER++,
        CAP_SCARF: COUNTER++,
        CHRISTMAS_HAT: COUNTER++,
        ELF_HAT: COUNTER++,
        AMETHYST_HELMET: COUNTER++,
        REIDITE_HELMET: COUNTER++,
        SUPER_HAMMER: COUNTER++,
        SHOVEL: COUNTER++,
        SUPER_DIVING_SUIT: COUNTER++,
        DIVING_MASK: COUNTER++,
        WATERING_CAN_FULL: COUNTER++,
        SHOVEL_GOLD: COUNTER++,
        SHOVEL_DIAMOND: COUNTER++,
        SHOVEL_AMETHYST: COUNTER++,
        PITCHFORK: COUNTER++,
        PITCHFORK2: COUNTER++,
        SPANNER: COUNTER++,
        MACHETE: COUNTER++,
        SWORD_WOOD: COUNTER++,
        WOOD_HELMET: COUNTER++,
        DRAGON_HELMET: COUNTER++,
        LAVA_HELMET: COUNTER++,
        CROWN_CRAB: COUNTER++,
        DRAGON_SWORD: COUNTER++,
        LAVA_SWORD: COUNTER++,
        WOOD_BOW: COUNTER++,
        STONE_BOW: COUNTER++,
        GOLD_BOW: COUNTER++,
        DIAMOND_BOW: COUNTER++,
        AMETHYST_BOW: COUNTER++,
        REIDITE_BOW: COUNTER++,
        DRAGON_BOW: COUNTER++,
        WOOD_SHIELD: COUNTER++,
        STONE_SHIELD: COUNTER++,
        GOLD_SHIELD: COUNTER++,
        DIAMOND_SHIELD: COUNTER++,
        AMETHYST_SHIELD: COUNTER++,
        REIDITE_SHIELD: COUNTER++,
        CROWN_GREEN: COUNTER++,
        CROWN_ORANGE: COUNTER++,
        CROWN_BLUE: COUNTER++,
        TURBAN1: COUNTER++,
        TURBAN2: COUNTER++,
        PILOT_HELMET: COUNTER++,
        HOOD: COUNTER++,
        PEASANT: COUNTER++,
        WINTER_HOOD: COUNTER++,
        WINTER_PEASANT: COUNTER++,
        FLOWER_HAT: COUNTER++,
        FUR_HAT: COUNTER++,
        SADDLE: COUNTER++,
        WITCH: COUNTER++,
        NIMBUS: COUNTER++,
        WAND1: COUNTER++,
        WAND2: COUNTER++,
        FIREFLY: COUNTER++,
        WOOD_ARROW: COUNTER++,
        STONE_ARROW: COUNTER++,
        GOLD_ARROW: COUNTER++,
        DIAMOND_ARROW: COUNTER++,
        AMETHYST_ARROW: COUNTER++,
        REIDITE_ARROW: COUNTER++,
        DRAGON_ARROW: COUNTER++,
        STONE: COUNTER++,
        WOOD: COUNTER++,
        PLANT: COUNTER++,
        GOLD: COUNTER++,
        DIAMOND: COUNTER++,
        FIRE: COUNTER++,
        WORKBENCH: COUNTER++,
        SEED: COUNTER++,
        MEAT: COUNTER++,
        COOKED_MEAT: COUNTER++,
        BIG_FIRE: COUNTER++,
        FURNACE: COUNTER++,
        PAPER: COUNTER++,
        AMETHYST: COUNTER++,
        AMETHYST_WALL: COUNTER++,
        AMETHYST_SPIKE: COUNTER++,
        AMETHYST_DOOR: COUNTER++,
        BRIDGE: COUNTER++,
        SAND: COUNTER++,
        BOTTLE_FULL: COUNTER++,
        BOTTLE_EMPTY: COUNTER++,
        KRAKEN_SKIN: COUNTER++,
        WATERING_CAN: COUNTER++,
        FLOUR: COUNTER++,
        WHEAT_SEED: COUNTER++,
        COOKIE: COUNTER++,
        WILD_WHEAT: COUNTER++,
        WINDMILL: COUNTER++,
        CAKE: COUNTER++,
        FOODFISH: COUNTER++,
        FOODFISH_COOKED: COUNTER++,
        SCALES: COUNTER++,
        GROUND: COUNTER++,
        PLOT: COUNTER++,
        ICE: COUNTER++,
        BREAD: COUNTER++,
        BREAD_OVEN: COUNTER++,
        SANDWICH: COUNTER++,
        FUR_WINTER: COUNTER++,
        BLUE_CORD: COUNTER++,
        LOCK: COUNTER++,
        DRAGON_HEART: COUNTER++,
        LAVA_HEART: COUNTER++,
        RESURRECTION: COUNTER++,
        EMERALD_MACHINE: COUNTER++,
        EXTRACTOR_MACHINE_STONE: COUNTER++,
        EXTRACTOR_MACHINE_GOLD: COUNTER++,
        EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
        EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
        EXTRACTOR_MACHINE_REIDITE: COUNTER++,
        LOCKPICK: COUNTER++,
        TOTEM: COUNTER++,
        SPIKE: COUNTER++,
        CORD: COUNTER++,
        WALL: COUNTER++,
        STONE_WALL: COUNTER++,
        GOLD_WALL: COUNTER++,
        DIAMOND_WALL: COUNTER++,
        WOOD_DOOR: COUNTER++,
        CHEST: COUNTER++,
        STONE_SPIKE: COUNTER++,
        GOLD_SPIKE: COUNTER++,
        DIAMOND_SPIKE: COUNTER++,
        STONE_DOOR: COUNTER++,
        GOLD_DOOR: COUNTER++,
        DIAMOND_DOOR: COUNTER++,
        FUR_WOLF: COUNTER++,
        GEMME_GREEN: COUNTER++,
        GEMME_ORANGE: COUNTER++,
        GEMME_BLUE: COUNTER++,
        SPECIAL_FUR: COUNTER++,
        SPECIAL_FUR_2: COUNTER++,
        BUCKET_FULL: COUNTER++,
        BUCKET_EMPTY: COUNTER++,
        WELL: COUNTER++,
        SIGN: COUNTER++,
        DRAGON_CUBE: COUNTER++,
        DRAGON_ORB: COUNTER++,
        LAVA_CUBE: COUNTER++,
        LAVA_ORB: COUNTER++,
        PUMPKIN_SEED: COUNTER++,
        PUMPKIN: COUNTER++,
        ROOF: COUNTER++,
        GARLIC_SEED: COUNTER++,
        GARLIC: COUNTER++,
        THORNBUSH_SEED: COUNTER++,
        THORNBUSH: COUNTER++,
        BANDAGE: COUNTER++,
        CRAB_STICK: COUNTER++,
        CRAB_LOOT: COUNTER++,
        BED: COUNTER++,
        SUGAR_CAN: COUNTER++,
        CANDY: COUNTER++,
        GARLAND: COUNTER++,
        REIDITE: COUNTER++,
        FLAME: COUNTER++,
        CARROT_SEED: COUNTER++,
        CARROT: COUNTER++,
        TOMATO_SEED: COUNTER++,
        TOMATO: COUNTER++,
        WATERMELON_SEED: COUNTER++,
        WATERMELON: COUNTER++,
        ALOE_VERA_SEED: COUNTER++,
        ALOE_VERA: COUNTER++,
        WOOD_DOOR_SPIKE: COUNTER++,
        STONE_DOOR_SPIKE: COUNTER++,
        GOLD_DOOR_SPIKE: COUNTER++,
        DIAMOND_DOOR_SPIKE: COUNTER++,
        AMETHYST_DOOR_SPIKE: COUNTER++,
        REIDITE_WALL: COUNTER++,
        REIDITE_DOOR: COUNTER++,
        REIDITE_SPIKE: COUNTER++,
        REIDITE_DOOR_SPIKE: COUNTER++,
        WOOD_TOWER: COUNTER++,
        PENGUIN_FEATHER: COUNTER++,
        BOAT: COUNTER++,
        SLED: COUNTER++,
        MOUNT_BOAR: COUNTER++,
        CRAB_BOSS: COUNTER++,
        BABY_DRAGON: COUNTER++,
        BABY_LAVA: COUNTER++,
        HAWK: COUNTER++,
        PLANE: COUNTER++,
        HAWK_FEATHER: COUNTER++,
        VULTURE_FEATHER: COUNTER++,
        CACTUS: COUNTER++,
        EMERALD: COUNTER++,
        PITCHFORK_PART: COUNTER++,
        PILOT_GLASSES: COUNTER++,
        FUR_BOAR: COUNTER++,
        SANDWORM_JUICE: COUNTER++,
        BABY_MAMMOTH: COUNTER++,
        FUR_MAMMOTH: COUNTER++
    }),
    CATEGORY = {
        TOOLS: 0,
        WEAPONS: 1,
        CLOTHES: 2,
        FOODS: 3,
        UTILS: 4,
        BASES: 5
    },
    INV_INFOS = [];
INV_INFOS[INV.WOOD] = {
    name: "Wood",
    img: SPRITE.INV_WOOD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.STONE] = {
    name: "Stone",
    img: SPRITE.INV_STONE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.GOLD] = {
    name: "Gold",
    img: SPRITE.INV_GOLD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.DIAMOND] = {
    name: "Diamond",
    img: SPRITE.INV_DIAMOND,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.AMETHYST] = {
    name: "Amethyst",
    img: SPRITE.INV_AMETHYST,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FUR] = {
    name: "Rabbit fur",
    img: SPRITE.INV_FUR,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FUR_WOLF] = {
    name: "Wolf fur",
    img: SPRITE.INV_FUR_WOLF,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FUR_BOAR] = {
    name: "Boar fur",
    img: SPRITE.INV_FUR_BOAR,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FIREFLY] = {
    name: "Firefly",
    img: SPRITE.INV_FIREFLY,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WOOD_ARROW] = {
    name: "Wood arrow",
    img: SPRITE.INV_WOOD_ARROW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.STONE_ARROW] = {
    name: "Stone arrow",
    img: SPRITE.INV_STONE_ARROW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.GOLD_ARROW] = {
    name: "Gold arrow",
    img: SPRITE.INV_GOLD_ARROW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_ARROW] = {
    name: "Diamond arrow",
    img: SPRITE.INV_DIAMOND_ARROW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_ARROW] = {
    name: "Amethyst arrow",
    img: SPRITE.INV_AMETHYST_ARROW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_ARROW] = {
    name: "Reidite arrow",
    img: SPRITE.INV_REIDITE_ARROW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DRAGON_ARROW] = {
    name: "Dragon arrow",
    img: SPRITE.INV_DRAGON_ARROW,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FUR_WINTER] = {
    name: "Winter fur",
    img: SPRITE.INV_FUR_WINTER,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FUR_MAMMOTH] = {
    name: "Fur mammoth",
    img: SPRITE.INV_FUR_MAMMOTH,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CORD] = {
    name: "Web",
    img: SPRITE.INV_CORD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.MEAT] = {
    name: "Meat",
    img: SPRITE.INV_MEAT,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FOODFISH] = {
    name: "Fish",
    img: SPRITE.INV_FOODFISH,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.KRAKEN_SKIN] = {
    name: "Kraken skin",
    img: SPRITE.INV_KRAKEN_SKIN,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.SCALES] = {
    name: "Piranha scales",
    img: SPRITE.INV_SCALES,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.ICE] = {
    name: "Ice",
    img: SPRITE.INV_ICE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.SAND] = {
    name: "Sand",
    img: SPRITE.INV_SAND,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.GROUND] = {
    name: "Dirt",
    img: SPRITE.INV_GROUND,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.PLANT] = {
    name: "Berrie",
    img: SPRITE.INV_PLANT,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FLOUR] = {
    name: "Flour",
    img: SPRITE.INV_FLOUR,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WILD_WHEAT] = {
    name: "Flour",
    img: SPRITE.INV_WILD_WHEAT,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.SPECIAL_FUR] = {
    name: "Special fur peasant",
    img: SPRITE.INV_SPECIAL_FUR,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.SPECIAL_FUR_2] = {
    name: "Special fur hood",
    img: SPRITE.INV_SPECIAL_FUR_2,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.PUMPKIN] = {
    name: "Pumpkin",
    img: SPRITE.INV_PUMPKIN,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.GARLIC] = {
    name: "Garlic",
    img: SPRITE.INV_GARLIC,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.THORNBUSH] = {
    name: "Thornbush",
    img: SPRITE.INV_THORNBUSH,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CARROT] = {
    name: "Carrot",
    img: SPRITE.INV_CARROT,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.TOMATO] = {
    name: "Tomato",
    img: SPRITE.INV_TOMATO,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WATERMELON] = {
    name: "Watermelon",
    img: SPRITE.INV_WATERMELON,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.ALOE_VERA] = {
    name: "Aloe Vera",
    img: SPRITE.INV_ALOE_VERA,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.PENGUIN_FEATHER] = {
    name: "Penguin Feather",
    img: SPRITE.INV_PENGUIN_FEATHER,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.HAWK_FEATHER] = {
    name: "Hawk Feather",
    img: SPRITE.INV_HAWK_FEATHER,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.VULTURE_FEATHER] = {
    name: "Vulture Feather",
    img: SPRITE.INV_VULTURE_FEATHER,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CACTUS] = {
    name: "Cactus",
    img: SPRITE.INV_CACTUS,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.PILOT_GLASSES] = {
    name: "Cactus",
    img: SPRITE.INV_PILOT_GLASSES,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.PITCHFORK_PART] = {
    name: "Pitchfork Part",
    img: SPRITE.INV_PITCHFORK_PART,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.SANDWORM_JUICE] = {
    name: "Emerald Machine",
    img: SPRITE.INV_SANDWORM_JUICE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.EMERALD] = {
    name: "Emerald",
    img: SPRITE.INV_EMERALD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CHRISTMAS_HAT] = {
    name: "Christmas Hat",
    img: SPRITE.INV_CHRISTMAS_HAT,
    recycle: 0
}, INV_INFOS[INV.ELF_HAT] = {
    name: "Elf Hat",
    img: SPRITE.INV_ELF_HAT,
    recycle: 0
}, INV_INFOS[INV.GARLAND] = {
    name: "Garland",
    img: SPRITE.INV_GARLAND,
    recycle: 0,
    grid: 0
}, INV_INFOS[INV.CANDY] = {
    name: "Candy",
    img: SPRITE.INV_CANDY,
    recycle: 0
}, INV_INFOS[INV.SUGAR_CAN] = {
    name: "Sugar Cane",
    img: SPRITE.INV_SUGAR_CAN,
    recycle: 0
}, INV_INFOS[INV.PIRATE_SWORD] = {
    name: "Pirate Sword",
    img: SPRITE.INV_PIRATE_SWORD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CRAB_STICK] = {
    name: "Crab Stick",
    img: SPRITE.INV_CRAB_STICK,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.REIDITE] = {
    name: "Reidite",
    img: SPRITE.INV_REIDITE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FLAME] = {
    name: "Flame",
    img: SPRITE.INV_FLAME,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FIRE] = {
    name: "Campfire",
    img: SPRITE.CRAFT_FIRE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.BED] = {
    name: "Bed",
    img: SPRITE.CRAFT_BED,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WORKBENCH] = {
    name: "Workbench",
    img: SPRITE.CRAFT_WORK,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SWORD] = {
    name: "Stone sword",
    img: SPRITE.CRAFT_SWORD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PICK] = {
    name: "Stone pick",
    img: SPRITE.CRAFT_PICK,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SEED] = {
    name: "Berries bush",
    img: SPRITE.CRAFT_SEED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.PICK_GOLD] = {
    name: "Gold pick",
    img: SPRITE.CRAFT_PICK_GOLD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PICK_DIAMOND] = {
    name: "Diamond pick",
    img: SPRITE.CRAFT_PICK_DIAMOND,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SWORD_WOOD] = {
    name: "Wood sword",
    img: SPRITE.CRAFT_SWORD_WOOD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SWORD_GOLD] = {
    name: "Gold sword",
    img: SPRITE.CRAFT_SWORD_GOLD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SWORD_DIAMOND] = {
    name: "Diamond sword",
    img: SPRITE.CRAFT_SWORD_DIAMOND,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PICK_WOOD] = {
    name: "Wood pick",
    img: SPRITE.CRAFT_PICK_WOOD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WALL] = {
    name: "Wood wall",
    img: SPRITE.CRAFT_WALL,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SPIKE] = {
    name: "Wood spike",
    img: SPRITE.CRAFT_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.COOKED_MEAT] = {
    name: "Cooked meat",
    img: SPRITE.CRAFT_COOKED_MEAT,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.BIG_FIRE] = {
    name: "Big campfire",
    img: SPRITE.CRAFT_BIG_FIRE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.BANDAGE] = {
    name: "Bandage",
    img: SPRITE.CRAFT_BANDAGE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.STONE_WALL] = {
    name: "Stone wall",
    img: SPRITE.CRAFT_STONE_WALL,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.GOLD_WALL] = {
    name: "Gold wall",
    img: SPRITE.CRAFT_GOLD_WALL,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_WALL] = {
    name: "Diamond wall",
    img: SPRITE.CRAFT_DIAMOND_WALL,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WOOD_DOOR] = {
    name: "Wood door",
    img: SPRITE.CRAFT_DOOR_WOOD_CLOSE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.CHEST] = {
    name: "Chest",
    img: SPRITE.CRAFT_CHEST,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.STONE_SPIKE] = {
    name: "Stone spike",
    img: SPRITE.CRAFT_STONE_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.GOLD_SPIKE] = {
    name: "Gold spike",
    img: SPRITE.CRAFT_GOLD_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_SPIKE] = {
    name: "Diamond spike",
    img: SPRITE.CRAFT_DIAMOND_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.STONE_DOOR] = {
    name: "Stone door",
    img: SPRITE.CRAFT_DOOR_STONE_CLOSE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.GOLD_DOOR] = {
    name: "Gold door",
    img: SPRITE.CRAFT_DOOR_GOLD_CLOSE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_DOOR] = {
    name: "Diamond door",
    img: SPRITE.CRAFT_DOOR_DIAMOND_CLOSE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.EARMUFFS] = {
    name: "Chapka",
    img: SPRITE.CRAFT_EARMUFFS,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.COAT] = {
    name: "Big Chapka",
    img: SPRITE.CRAFT_COAT,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WOOD_SPEAR] = {
    name: "Wood spear",
    img: SPRITE.CRAFT_WOOD_SPEAR,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SPEAR] = {
    name: "Stone spear",
    img: SPRITE.CRAFT_SPEAR,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.GOLD_SPEAR] = {
    name: "Gold spear",
    img: SPRITE.CRAFT_GOLD_SPEAR,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_SPEAR] = {
    name: "Diamond spear",
    img: SPRITE.CRAFT_DIAMOND_SPEAR,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DRAGON_SPEAR] = {
    name: "Dragon spear",
    img: SPRITE.CRAFT_DRAGON_SPEAR,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.LAVA_SPEAR] = {
    name: "Dragon spear",
    img: SPRITE.CRAFT_LAVA_SPEAR,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CRAB_SPEAR] = {
    name: "Crab spear",
    img: SPRITE.CRAFT_CRAB_SPEAR,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.CRAB_LOOT] = {
    name: "Crab loot",
    img: SPRITE.INV_CRAB_LOOT,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FURNACE] = {
    name: "Furnace",
    img: SPRITE.CRAFT_FURNACE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.EXPLORER_HAT] = {
    name: "Explorer hat",
    img: SPRITE.CRAFT_EXPLORER_HAT,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PIRATE_HAT] = {
    name: "Pirate hat",
    img: SPRITE.CRAFT_PIRATE_HAT,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.FLOWER_HAT] = {
    name: "Flower hat",
    img: SPRITE.CRAFT_FLOWER_HAT,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.FUR_HAT] = {
    name: "Fur hat",
    img: SPRITE.CRAFT_FUR_HAT,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WOOD_HELMET] = {
    name: "Wood helmet",
    img: SPRITE.CRAFT_WOOD_HELMET,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.STONE_HELMET] = {
    name: "Stone helmet",
    img: SPRITE.CRAFT_STONE_HELMET,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.GOLD_HELMET] = {
    name: "Gold helmet",
    img: SPRITE.CRAFT_GOLD_HELMET,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_HELMET] = {
    name: "Diamond helmet",
    img: SPRITE.CRAFT_DIAMOND_HELMET,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.BOOK] = {
    name: "Book",
    img: SPRITE.CRAFT_BOOK,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PAPER] = {
    name: "Paper",
    img: SPRITE.CRAFT_PAPER,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.BAG] = {
    name: "Bag",
    img: SPRITE.CRAFT_BAG,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SWORD_AMETHYST] = {
    name: "Amethyst sword",
    img: SPRITE.CRAFT_SWORD_AMETHYST,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PICK_AMETHYST] = {
    name: "Amethyst pick",
    img: SPRITE.CRAFT_PICK_AMETHYST,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_SPEAR] = {
    name: "Amethyst spear",
    img: SPRITE.CRAFT_AMETHYST_SPEAR,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.HAMMER] = {
    name: "Stone hammer",
    img: SPRITE.CRAFT_HAMMER,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.HAMMER_GOLD] = {
    name: "Gold hammer",
    img: SPRITE.CRAFT_HAMMER_GOLD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.HAMMER_DIAMOND] = {
    name: "Diamond hammer",
    img: SPRITE.CRAFT_HAMMER_DIAMOND,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.HAMMER_AMETHYST] = {
    name: "Amethyst hammer",
    img: SPRITE.CRAFT_HAMMER_AMETHYST,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.HAMMER_REIDITE] = {
    name: "Reidite hammer",
    img: SPRITE.CRAFT_HAMMER_REIDITE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_WALL] = {
    name: "Amethyst wall",
    img: SPRITE.CRAFT_AMETHYST_WALL,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_SPIKE] = {
    name: "Amethyst spike",
    img: SPRITE.CRAFT_AMETHYST_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_DOOR] = {
    name: "Amethyst door",
    img: SPRITE.CRAFT_DOOR_AMETHYST_CLOSE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.CAP_SCARF] = {
    name: "Cap & scarf",
    img: SPRITE.CRAFT_CAP_SCARF,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.BLUE_CORD] = {
    name: "Blue cord",
    img: SPRITE.CRAFT_BLUE_CORD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.LOCK] = {
    name: "Lock",
    img: SPRITE.CRAFT_LOCK,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.RESURRECTION] = {
    name: "Resurrection",
    img: SPRITE.CRAFT_RESURRECTION,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.LOCKPICK] = {
    name: "Lockpick",
    img: SPRITE.CRAFT_LOCKPICK,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.TOTEM] = {
    name: "Totem",
    img: SPRITE.CRAFT_TOTEM,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_HELMET] = {
    name: "Amethyst helmet",
    img: SPRITE.CRAFT_AMETHYST_HELMET,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SUPER_HAMMER] = {
    name: "Super hammer",
    img: SPRITE.CRAFT_SUPER_HAMMER,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.BRIDGE] = {
    name: "Bridge",
    img: SPRITE.CRAFT_BRIDGE,
    grid: 1,
    recycle: 1
}, INV_INFOS[INV.WOOD_TOWER] = {
    name: "Wood Tower",
    img: SPRITE.CRAFT_WOOD_TOWER,
    grid: 1,
    recycle: 1
}, INV_INFOS[INV.BOTTLE_FULL] = {
    name: "Bottle full",
    img: SPRITE.CRAFT_BOTTLE_FULL,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.BOTTLE_EMPTY] = {
    name: "Bottle empty",
    img: SPRITE.CRAFT_BOTTLE_EMPTY,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.SHOVEL] = {
    name: "Stone shovel",
    img: SPRITE.CRAFT_SHOVEL,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WATERING_CAN] = {
    name: "Watering can",
    img: SPRITE.CRAFT_WATERING_CAN,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WHEAT_SEED] = {
    name: "Wheat",
    img: SPRITE.CRAFT_WHEAT_SEED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.COOKIE] = {
    name: "Cookie",
    img: SPRITE.CRAFT_COOKIE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WINDMILL] = {
    name: "Windmill",
    img: SPRITE.CRAFT_WINDMILL,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SUPER_DIVING_SUIT] = {
    name: "Super diving suit",
    img: SPRITE.CRAFT_SUPER_DIVING_SUIT,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIVING_MASK] = {
    name: "Diving mask",
    img: SPRITE.CRAFT_DIVING_MASK,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WATERING_CAN_FULL] = {
    name: "Watering can full",
    img: SPRITE.CRAFT_WATERING_CAN_FULL,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CAKE] = {
    name: "Cake",
    img: SPRITE.CRAFT_CAKE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.FOODFISH_COOKED] = {
    name: "Foodfish cooked",
    img: SPRITE.CRAFT_FOODFISH_COOKED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.PLOT] = {
    name: "Plot",
    img: SPRITE.CRAFT_PLOT,
    grid: 1,
    recycle: 1
}, INV_INFOS[INV.BREAD] = {
    name: "Bread",
    img: SPRITE.CRAFT_BREAD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.BOTTLE_FULL_2] = {
    name: "Bottle full (with ice)",
    img: SPRITE.CRAFT_BOTTLE_FULL_2,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.BOTTLE_FULL_3] = {
    name: "Bottle full (with well)",
    img: SPRITE.CRAFT_BOTTLE_FULL_3,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SHOVEL_GOLD] = {
    name: "Gold shovel",
    img: SPRITE.CRAFT_SHOVEL_GOLD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SHOVEL_DIAMOND] = {
    name: "Diamond shovel",
    img: SPRITE.CRAFT_SHOVEL_DIAMOND,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SHOVEL_AMETHYST] = {
    name: "Amethyst shovel",
    img: SPRITE.CRAFT_SHOVEL_AMETHYST,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SPANNER] = {
    name: "Spanner",
    img: SPRITE.CRAFT_SPANNER,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.MACHETE] = {
    name: "Machete",
    img: SPRITE.CRAFT_MACHETE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.BREAD_OVEN] = {
    name: "Bread oven",
    img: SPRITE.CRAFT_BREAD_OVEN,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SANDWICH] = {
    name: "Sandwich",
    img: SPRITE.CRAFT_SANDWICH,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.DRAGON_HELMET] = {
    name: "Dragon helmet",
    img: SPRITE.CRAFT_DRAGON_HELMET,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.LAVA_HELMET] = {
    name: "Dragon helmet",
    img: SPRITE.CRAFT_LAVA_HELMET,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WITCH] = {
    name: "Witch",
    img: SPRITE.CRAFT_WITCH,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.NIMBUS] = {
    name: "Nimbus",
    img: SPRITE.CRAFT_NIMBUS,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WAND1] = {
    name: "Wand1",
    img: SPRITE.CRAFT_WAND1,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WAND2] = {
    name: "Wand2",
    img: SPRITE.CRAFT_WAND2,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.DRAGON_SWORD] = {
    name: "Dragon sword",
    img: SPRITE.CRAFT_DRAGON_SWORD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.LAVA_SWORD] = {
    name: "Dragon sword",
    img: SPRITE.CRAFT_LAVA_SWORD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WOOD_SHIELD] = {
    name: "Wood shield",
    img: SPRITE.CRAFT_WOOD_SHIELD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.STONE_SHIELD] = {
    name: "Stone shield",
    img: SPRITE.CRAFT_STONE_SHIELD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.GOLD_SHIELD] = {
    name: "Gold shield",
    img: SPRITE.CRAFT_GOLD_SHIELD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_SHIELD] = {
    name: "Diamond shield",
    img: SPRITE.CRAFT_DIAMOND_SHIELD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_SHIELD] = {
    name: "Amethyst shield",
    img: SPRITE.CRAFT_AMETHYST_SHIELD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_SHIELD] = {
    name: "Reidite shield",
    img: SPRITE.CRAFT_REIDITE_SHIELD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WOOD_BOW] = {
    name: "Wood bow",
    img: SPRITE.CRAFT_WOOD_BOW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.STONE_BOW] = {
    name: "Stone bow",
    img: SPRITE.CRAFT_STONE_BOW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.GOLD_BOW] = {
    name: "Gold bow",
    img: SPRITE.CRAFT_GOLD_BOW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_BOW] = {
    name: "Diamond bow",
    img: SPRITE.CRAFT_DIAMOND_BOW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_BOW] = {
    name: "Amethyst bow",
    img: SPRITE.CRAFT_AMETHYST_BOW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_BOW] = {
    name: "Reidite bow",
    img: SPRITE.CRAFT_REIDITE_BOW,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DRAGON_BOW] = {
    name: "Dragon bow",
    img: SPRITE.CRAFT_DRAGON_BOW,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CROWN_GREEN] = {
    name: "Crown of life",
    img: SPRITE.CRAFT_CROWN_GREEN,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.GEMME_GREEN] = {
    name: "Gem of life",
    img: SPRITE.INV_GEMME_GREEN,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.DRAGON_ORB] = {
    name: "Orb of the dragon",
    img: SPRITE.INV_DRAGON_ORB,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.LAVA_ORB] = {
    name: "Orb of the dragon",
    img: SPRITE.INV_LAVA_ORB,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.DRAGON_CUBE] = {
    name: "Cube of the dragon",
    img: SPRITE.INV_DRAGON_CUBE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.LAVA_CUBE] = {
    name: "Cube of the dragon",
    img: SPRITE.INV_LAVA_CUBE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CROWN_ORANGE] = {
    name: "Crown of luck",
    img: SPRITE.CRAFT_CROWN_ORANGE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.GEMME_ORANGE] = {
    name: "Gem of luck",
    img: SPRITE.INV_GEMME_ORANGE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CROWN_BLUE] = {
    name: "Crown of the angel",
    img: SPRITE.CRAFT_CROWN_BLUE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.GEMME_BLUE] = {
    name: "Gem of the angel",
    img: SPRITE.INV_GEMME_BLUE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.DRAGON_HEART] = {
    name: "Dragon heart",
    img: SPRITE.INV_DRAGON_HEART,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.LAVA_HEART] = {
    name: "Lava heart",
    img: SPRITE.INV_LAVA_HEART,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.HOOD] = {
    name: "Hood",
    img: SPRITE.CRAFT_HOOD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PEASANT] = {
    name: "Peasant",
    img: SPRITE.CRAFT_PEASANT,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WINTER_PEASANT] = {
    name: "Winter peasant",
    img: SPRITE.CRAFT_WINTER_PEASANT,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WINTER_HOOD] = {
    name: "Winter hood",
    img: SPRITE.CRAFT_WINTER_HOOD,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.BUCKET_FULL] = {
    name: "Bucket full",
    img: SPRITE.CRAFT_BUCKET_FULL,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.BUCKET_EMPTY] = {
    name: "Bucket empty",
    img: SPRITE.CRAFT_BUCKET_EMPTY,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WELL] = {
    name: "Well",
    img: SPRITE.CRAFT_WELL,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SIGN] = {
    name: "Sign",
    img: SPRITE.CRAFT_SIGN,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PUMPKIN_SEED] = {
    name: "Pumpkin Seed",
    img: SPRITE.CRAFT_PUMPKIN_SEED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.GARLIC_SEED] = {
    name: "Garlic Seed",
    img: SPRITE.CRAFT_GARLIC_SEED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.THORNBUSH_SEED] = {
    name: "Thorbushes Seed",
    img: SPRITE.CRAFT_THORNBUSH_SEED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.ROOF] = {
    name: "Roof",
    img: SPRITE.CRAFT_ROOF,
    grid: 1,
    recycle: 1
}, INV_INFOS[INV.CROWN_CRAB] = {
    name: "Crab Crown",
    img: SPRITE.CRAFT_CROWN_CRAB,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.CARROT_SEED] = {
    name: "Carrot Seed",
    img: SPRITE.CRAFT_CARROT_SEED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.TOMATO_SEED] = {
    name: "Tomato Seed",
    img: SPRITE.CRAFT_TOMATO_SEED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.WATERMELON_SEED] = {
    name: "Watermelon Seed",
    img: SPRITE.CRAFT_WATERMELON_SEED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.ALOE_VERA_SEED] = {
    name: "Aloe Vera Seed",
    img: SPRITE.CRAFT_ALOE_VERA_SEED,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.TURBAN1] = {
    name: "Cap",
    img: SPRITE.CRAFT_TURBAN1,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.TURBAN2] = {
    name: "Turban",
    img: SPRITE.CRAFT_TURBAN2,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PILOT_HELMET] = {
    name: "Pilot Helmet",
    img: SPRITE.CRAFT_PILOT_HELMET,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.EMERALD_MACHINE] = {
    name: "Emerald Machine",
    img: SPRITE.CRAFT_EMERALD_MACHINE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.EXTRACTOR_MACHINE_STONE] = {
    name: "Emerald Machine",
    img: SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.EXTRACTOR_MACHINE_GOLD] = {
    name: "Emerald Machine",
    img: SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.EXTRACTOR_MACHINE_DIAMOND] = {
    name: "Emerald Machine",
    img: SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.EXTRACTOR_MACHINE_AMETHYST] = {
    name: "Emerald Machine",
    img: SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.EXTRACTOR_MACHINE_REIDITE] = {
    name: "Emerald Machine",
    img: SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PITCHFORK] = {
    name: "Pitchfork",
    img: SPRITE.CRAFT_PITCHFORK,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.WOOD_DOOR_SPIKE] = {
    name: "Wood Door Spike",
    img: SPRITE.CRAFT_WOOD_DOOR_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.STONE_DOOR_SPIKE] = {
    name: "Stone Door Spike",
    img: SPRITE.CRAFT_STONE_DOOR_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.GOLD_DOOR_SPIKE] = {
    name: "Gold Door Spike",
    img: SPRITE.CRAFT_GOLD_DOOR_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_DOOR_SPIKE] = {
    name: "Diamond Door Spike",
    img: SPRITE.CRAFT_DIAMOND_DOOR_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_DOOR_SPIKE] = {
    name: "Amethyst Door Spike",
    img: SPRITE.CRAFT_AMETHYST_DOOR_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.DIAMOND_PROTECTION] = {
    name: "Diamond Fire Protection ",
    img: SPRITE.CRAFT_DIAMOND_PROTECTION,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.AMETHYST_PROTECTION] = {
    name: "Amethyst Fire Protection ",
    img: SPRITE.CRAFT_AMETHYST_PROTECTION,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_PROTECTION] = {
    name: "Amethyst Fire Protection ",
    img: SPRITE.CRAFT_REIDITE_PROTECTION,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_SWORD] = {
    name: "Reidite Sword",
    img: SPRITE.CRAFT_REIDITE_SWORD,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_SPEAR] = {
    name: "Reidite Spear",
    img: SPRITE.CRAFT_REIDITE_SPEAR,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_HELMET] = {
    name: "Reidite Helmet",
    img: SPRITE.CRAFT_REIDITE_HELMET,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_DOOR_SPIKE] = {
    name: "Reidite Door Spike",
    img: SPRITE.CRAFT_REIDITE_DOOR_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_DOOR] = {
    name: "Reidite Door",
    img: SPRITE.CRAFT_REIDITE_DOOR,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_SPIKE] = {
    name: "Reidite Spike",
    img: SPRITE.CRAFT_REIDITE_SPIKE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.REIDITE_WALL] = {
    name: "Reidite Wall",
    img: SPRITE.CRAFT_REIDITE_WALL,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.PICK_REIDITE] = {
    name: "Reidite pick",
    img: SPRITE.CRAFT_PICK_REIDITE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.BOAT] = {
    name: "Boat",
    img: SPRITE.CRAFT_BOAT,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SLED] = {
    name: "Sled",
    img: SPRITE.CRAFT_SLED,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.SADDLE] = {
    name: "Saddle",
    img: SPRITE.CRAFT_SADDLE,
    grid: 0,
    recycle: 1
}, INV_INFOS[INV.MOUNT_BOAR] = {
    name: "Mount Boar",
    img: SPRITE.CRAFT_MOUNT_BOAR,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.CRAB_BOSS] = {
    name: "Mount King Crab",
    img: SPRITE.CRAFT_CRAB_BOSS,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.BABY_DRAGON] = {
    name: "Mount Baby Dragon",
    img: SPRITE.CRAFT_BABY_DRAGON,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.BABY_LAVA] = {
    name: "Mount Baby Lava",
    img: SPRITE.CRAFT_BABY_LAVA,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.HAWK] = {
    name: "Mount Hawk",
    img: SPRITE.CRAFT_HAWK,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.PLANE] = {
    name: "Plane",
    img: SPRITE.CRAFT_PLANE,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.PITCHFORK2] = {
    name: "Pitchfork 2",
    img: SPRITE.CRAFT_PITCHFORK2,
    grid: 0,
    recycle: 0
}, INV_INFOS[INV.BABY_MAMMOTH] = {
    name: "Baby Mammoth",
    img: SPRITE.CRAFT_BABY_MAMMOTH,
    grid: 0,
    recycle: 0
};
var OLD_RECIPES = void 0,
    RECIPES = [{
        r: [
            [INV.WOOD, 25],
            [INV.STONE, 5]
        ],
        w: 0,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.FIRE,
        id2: INV.FIRE,
        time: .2,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.FIRE, 1],
            [INV.WOOD, 35],
            [INV.STONE, 10]
        ],
        w: 0,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BIG_FIRE,
        id2: INV.BIG_FIRE,
        time: .2,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 150],
            [INV.STONE, 50],
            [INV.GOLD, 15]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.FURNACE,
        id2: INV.FURNACE,
        time: .05,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 20],
            [INV.STONE, 10]
        ],
        w: 0,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WORKBENCH,
        id2: INV.WORKBENCH,
        time: 1 / 6,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 10]
        ],
        w: 0,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PICK_WOOD,
        id2: INV.PICK_WOOD,
        time: 1 / 3,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.PICK_WOOD, 1],
            [INV.WOOD, 50],
            [INV.STONE, 15]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PICK,
        id2: INV.PICK,
        time: 1 / 8,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WOOD, 40],
            [INV.GOLD, 20],
            [INV.STONE, 30],
            [INV.PICK, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PICK_GOLD,
        id2: INV.PICK_GOLD,
        time: 1 / 12,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.DIAMOND, 20],
            [INV.GOLD, 50],
            [INV.STONE, 80],
            [INV.PICK_GOLD, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PICK_DIAMOND,
        id2: INV.PICK_DIAMOND,
        time: .05,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.DIAMOND, 40],
            [INV.GOLD, 60],
            [INV.AMETHYST, 30],
            [INV.PICK_DIAMOND, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PICK_AMETHYST,
        id2: INV.PICK_AMETHYST,
        time: 1 / 60,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.AMETHYST, 30],
            [INV.DIAMOND, 40],
            [INV.REIDITE, 30],
            [INV.PICK_AMETHYST, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PICK_REIDITE,
        id2: INV.PICK_REIDITE,
        time: 1 / 90,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WOOD, 90],
            [INV.STONE, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.HAMMER,
        id2: INV.HAMMER,
        time: .1,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WOOD, 160],
            [INV.STONE, 120],
            [INV.GOLD, 80],
            [INV.HAMMER, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.HAMMER_GOLD,
        id2: INV.HAMMER_GOLD,
        time: 1 / 15,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.DIAMOND, 80],
            [INV.STONE, 200],
            [INV.GOLD, 150],
            [INV.HAMMER_GOLD, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.HAMMER_DIAMOND,
        id2: INV.HAMMER_DIAMOND,
        time: .05,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.DIAMOND, 160],
            [INV.AMETHYST, 60],
            [INV.GOLD, 250],
            [INV.HAMMER_DIAMOND, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.HAMMER_AMETHYST,
        id2: INV.HAMMER_AMETHYST,
        time: 1 / 60,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.AMETHYST, 160],
            [INV.REIDITE, 60],
            [INV.DIAMOND, 250],
            [INV.HAMMER_AMETHYST, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.HAMMER_REIDITE,
        id2: INV.HAMMER_REIDITE,
        time: 1 / 90,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.HAMMER_REIDITE, 1],
            [INV.BOTTLE_FULL, 1],
            [INV.KRAKEN_SKIN, 1],
            [INV.SCALES, 10],
            [INV.AMETHYST, 20]
        ],
        w: 1,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.SUPER_HAMMER,
        id2: INV.SUPER_HAMMER,
        time: 1 / 120,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WOOD, 30],
            [INV.STONE, 15]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SHOVEL,
        id2: INV.SHOVEL,
        time: .2,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.SHOVEL, 1],
            [INV.GOLD, 20],
            [INV.STONE, 30],
            [INV.WOOD, 40]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SHOVEL_GOLD,
        id2: INV.SHOVEL_GOLD,
        time: .1,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.SHOVEL_GOLD, 1],
            [INV.DIAMOND, 20],
            [INV.GOLD, 50],
            [INV.STONE, 80]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SHOVEL_DIAMOND,
        id2: INV.SHOVEL_DIAMOND,
        time: .05,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.SHOVEL_DIAMOND, 1],
            [INV.GOLD, 60],
            [INV.AMETHYST, 30],
            [INV.DIAMOND, 40]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SHOVEL_AMETHYST,
        id2: INV.SHOVEL_AMETHYST,
        time: 1 / 40,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WOOD, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WATERING_CAN,
        id2: INV.WATERING_CAN,
        time: .2,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WATERING_CAN, 1]
        ],
        w: 0,
        f: 0,
        o: 1,
        e: 0,
        id: CRAFT.WATERING_CAN_FULL,
        id2: INV.WATERING_CAN_FULL,
        time: .2,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WOOD, 100],
            [INV.STONE, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PITCHFORK,
        id2: INV.PITCHFORK,
        time: .1,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.PITCHFORK, 1],
            [INV.PITCHFORK_PART, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PITCHFORK2,
        id2: INV.PITCHFORK2,
        time: 1 / 60,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.PAPER, 4],
            [INV.CORD, 4],
            [INV.FUR_WOLF, 4]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BOOK,
        id2: INV.BOOK,
        time: 1 / 15,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WOOD, 40]
        ],
        w: 0,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WOOD_SPEAR,
        id2: INV.WOOD_SPEAR,
        time: .2,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD_SPEAR, 1],
            [INV.WOOD, 60],
            [INV.STONE, 10]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SPEAR,
        id2: INV.SPEAR,
        time: .1,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD, 80],
            [INV.GOLD, 30],
            [INV.STONE, 30],
            [INV.SPEAR, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.GOLD_SPEAR,
        id2: INV.GOLD_SPEAR,
        t: CATEGORY.WEAPONS,
        time: .05
    }, {
        r: [
            [INV.WOOD, 200],
            [INV.DIAMOND, 40],
            [INV.GOLD, 60],
            [INV.GOLD_SPEAR, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_SPEAR,
        id2: INV.DIAMOND_SPEAR,
        time: 1 / 30,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.AMETHYST, 40],
            [INV.DIAMOND, 80],
            [INV.GOLD, 90],
            [INV.DIAMOND_SPEAR, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_SPEAR,
        id2: INV.AMETHYST_SPEAR,
        time: 1 / 60,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.REIDITE, 40],
            [INV.AMETHYST, 80],
            [INV.DIAMOND, 90],
            [INV.AMETHYST_SPEAR, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_SPEAR,
        id2: INV.REIDITE_SPEAR,
        time: 1 / 90,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.BLUE_CORD, 20],
            [INV.DRAGON_ORB, 1],
            [INV.AMETHYST, 100],
            [INV.DRAGON_HEART, 3]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.DRAGON_SPEAR,
        id2: INV.DRAGON_SPEAR,
        time: 1 / 120,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.DRAGON_SPEAR, 1],
            [INV.LAVA_ORB, 1],
            [INV.REIDITE, 100],
            [INV.LAVA_HEART, 2]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.LAVA_SPEAR,
        id2: INV.LAVA_SPEAR,
        time: .005,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD_SPEAR, 1],
            [INV.CRAB_LOOT, 5],
            [INV.CORD, 6]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.CRAB_SPEAR,
        id2: INV.CRAB_SPEAR,
        time: 1 / 30,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD, 30]
        ],
        w: 0,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SWORD_WOOD,
        id2: INV.SWORD_WOOD,
        time: .2,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD, 50],
            [INV.STONE, 25],
            [INV.SWORD_WOOD, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SWORD,
        id2: INV.SWORD,
        time: .1,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD, 60],
            [INV.GOLD, 40],
            [INV.STONE, 50],
            [INV.SWORD, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SWORD_GOLD,
        id2: INV.SWORD_GOLD,
        time: .05,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.DIAMOND, 40],
            [INV.GOLD, 60],
            [INV.STONE, 80],
            [INV.SWORD_GOLD, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SWORD_DIAMOND,
        id2: INV.SWORD_DIAMOND,
        time: 1 / 30,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.DIAMOND, 60],
            [INV.GOLD, 100],
            [INV.AMETHYST, 40],
            [INV.SWORD_DIAMOND, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SWORD_AMETHYST,
        id2: INV.SWORD_AMETHYST,
        time: 1 / 60,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.DIAMOND, 100],
            [INV.AMETHYST, 80],
            [INV.REIDITE, 40],
            [INV.SWORD_AMETHYST, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_SWORD,
        id2: INV.REIDITE_SWORD,
        time: 1 / 90,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.PLANT, 3]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.SEED,
        id2: INV.SEED,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.WILD_WHEAT, 3]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.WHEAT_SEED,
        id2: INV.WHEAT_SEED,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.PUMPKIN, 8]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.PUMPKIN_SEED,
        id2: INV.PUMPKIN_SEED,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.GARLIC, 8]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.GARLIC_SEED,
        id2: INV.GARLIC_SEED,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.THORNBUSH, 8]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.THORNBUSH_SEED,
        id2: INV.THORNBUSH_SEED,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.CARROT, 8]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.CARROT_SEED,
        id2: INV.CARROT_SEED,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.TOMATO, 8]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.TOMATO_SEED,
        id2: INV.TOMATO_SEED,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.WATERMELON, 16]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.WATERMELON_SEED,
        id2: INV.WATERMELON_SEED,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.ALOE_VERA, 16]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.ALOE_VERA_SEED,
        id2: INV.ALOE_VERA_SEED,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.MEAT, 1]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.COOKED_MEAT,
        id2: INV.COOKED_MEAT,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.FOODFISH, 1]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.FOODFISH_COOKED,
        id2: INV.FOODFISH_COOKED,
        time: 1 / 3,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.FLOUR, 3]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.BREAD,
        id2: INV.BREAD,
        time: 1 / 3,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.FLOUR, 3],
            [INV.PLANT, 1]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.COOKIE,
        id2: INV.COOKIE,
        time: 1 / 3,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.FLOUR, 5],
            [INV.PLANT, 2],
            [INV.ICE, 2]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.CAKE,
        id2: INV.CAKE,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.CORD, 2]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BANDAGE,
        id2: INV.BANDAGE,
        time: .2,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 20]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WALL,
        id2: INV.WALL,
        time: .2,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.WALL, 1],
            [INV.STONE, 17]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.STONE_WALL,
        id2: INV.STONE_WALL,
        time: .2,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.STONE_WALL, 1],
            [INV.GOLD, 14]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.GOLD_WALL,
        id2: INV.GOLD_WALL,
        time: .2,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.GOLD_WALL, 1],
            [INV.DIAMOND, 11]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_WALL,
        id2: INV.DIAMOND_WALL,
        time: .2,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.DIAMOND_WALL, 1],
            [INV.AMETHYST, 8]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_WALL,
        id2: INV.AMETHYST_WALL,
        time: .2,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.AMETHYST_WALL, 1],
            [INV.REIDITE, 5]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_WALL,
        id2: INV.REIDITE_WALL,
        time: .2,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.WOOD, 30]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WOOD_DOOR,
        id2: INV.WOOD_DOOR,
        time: 1 / 8,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.WOOD_DOOR, 1],
            [INV.STONE, 27]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.STONE_DOOR,
        id2: INV.STONE_DOOR,
        time: 1 / 8,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.STONE_DOOR, 1],
            [INV.GOLD, 24]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.GOLD_DOOR,
        id2: INV.GOLD_DOOR,
        time: 1 / 8,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.GOLD_DOOR, 1],
            [INV.DIAMOND, 21]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_DOOR,
        id2: INV.DIAMOND_DOOR,
        time: 1 / 8,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.DIAMOND_DOOR, 1],
            [INV.AMETHYST, 18]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_DOOR,
        id2: INV.AMETHYST_DOOR,
        time: 1 / 8,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.AMETHYST_DOOR, 1],
            [INV.REIDITE, 15]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_DOOR,
        id2: INV.REIDITE_DOOR,
        time: 1 / 8,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.WALL, 1],
            [INV.WOOD, 40],
            [INV.STONE, 30]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SPIKE,
        id2: INV.SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.STONE_WALL, 1],
            [INV.STONE, 70]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.STONE_SPIKE,
        id2: INV.STONE_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.GOLD_WALL, 1],
            [INV.GOLD, 40],
            [INV.STONE, 30]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.GOLD_SPIKE,
        id2: INV.GOLD_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.DIAMOND_WALL, 1],
            [INV.DIAMOND, 40],
            [INV.STONE, 30]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_SPIKE,
        id2: INV.DIAMOND_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.AMETHYST_WALL, 1],
            [INV.AMETHYST, 40],
            [INV.STONE, 30]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_SPIKE,
        id2: INV.AMETHYST_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.REIDITE_WALL, 1],
            [INV.REIDITE, 40],
            [INV.GOLD, 30]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_SPIKE,
        id2: INV.REIDITE_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.WOOD_DOOR, 1],
            [INV.WOOD, 80],
            [INV.STONE, 60]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WOOD_DOOR_SPIKE,
        id2: INV.WOOD_DOOR_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.STONE_DOOR, 1],
            [INV.STONE, 140]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.STONE_DOOR_SPIKE,
        id2: INV.STONE_DOOR_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.GOLD_DOOR, 1],
            [INV.GOLD, 80],
            [INV.STONE, 60]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.GOLD_DOOR_SPIKE,
        id2: INV.GOLD_DOOR_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.DIAMOND_DOOR, 1],
            [INV.DIAMOND, 80],
            [INV.STONE, 60]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_DOOR_SPIKE,
        id2: INV.DIAMOND_DOOR_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.AMETHYST_DOOR, 1],
            [INV.AMETHYST, 80],
            [INV.STONE, 60]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_DOOR_SPIKE,
        id2: INV.AMETHYST_DOOR_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.REIDITE_DOOR, 1],
            [INV.REIDITE, 80],
            [INV.GOLD, 60]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_DOOR_SPIKE,
        id2: INV.REIDITE_DOOR_SPIKE,
        time: .05,
        t: CATEGORY.BASES
    }, {
        r: [
            [INV.WOOD, 25],
            [INV.GOLD, 2]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.CHEST,
        id2: INV.CHEST,
        time: .2,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.PAPER, 1],
            [INV.FUR, 1],
            [INV.CORD, 2]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.EXPLORER_HAT,
        id2: INV.EXPLORER_HAT,
        time: .2,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.PAPER, 5],
            [INV.PENGUIN_FEATHER, 20],
            [INV.BLUE_CORD, 5],
            [INV.FUR, 5]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PIRATE_HAT,
        id2: INV.PIRATE_HAT,
        time: 1 / 30,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.PILOT_GLASSES, 1],
            [INV.HAWK_FEATHER, 8],
            [INV.VULTURE_FEATHER, 8],
            [INV.PENGUIN_FEATHER, 8],
            [INV.CORD, 6]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PILOT_HELMET,
        id2: INV.PILOT_HELMET,
        time: 1 / 60,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.FUR, 1],
            [INV.CORD, 2]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.EARMUFFS,
        id2: INV.EARMUFFS,
        time: .2,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.EARMUFFS, 1],
            [INV.FUR_WOLF, 5],
            [INV.CORD, 4]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.COAT,
        id2: INV.COAT,
        time: 1 / 12,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.COAT, 1],
            [INV.FUR_WINTER, 5],
            [INV.BLUE_CORD, 4]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.CAP_SCARF,
        id2: INV.CAP_SCARF,
        time: 1 / 30,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.CAP_SCARF, 1],
            [INV.FUR_WINTER, 5],
            [INV.FUR_MAMMOTH, 10],
            [INV.BLUE_CORD, 4]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.FUR_HAT,
        id2: INV.FUR_HAT,
        time: .02,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.WOOD, 50]
        ],
        w: 0,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WOOD_HELMET,
        id2: INV.WOOD_HELMET,
        time: .2,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.STONE, 75],
            [INV.WOOD, 75],
            [INV.WOOD_HELMET, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.STONE_HELMET,
        id2: INV.STONE_HELMET,
        time: .1,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.STONE, 90],
            [INV.WOOD, 90],
            [INV.GOLD, 90],
            [INV.STONE_HELMET, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.GOLD_HELMET,
        id2: INV.GOLD_HELMET,
        time: .05,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.STONE, 100],
            [INV.GOLD, 100],
            [INV.DIAMOND, 100],
            [INV.GOLD_HELMET, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_HELMET,
        id2: INV.DIAMOND_HELMET,
        time: 1 / 30,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.AMETHYST, 80],
            [INV.GOLD, 150],
            [INV.DIAMOND, 120],
            [INV.DIAMOND_HELMET, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_HELMET,
        id2: INV.AMETHYST_HELMET,
        time: 1 / 60,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.REIDITE, 80],
            [INV.DIAMOND, 150],
            [INV.AMETHYST, 120],
            [INV.AMETHYST_HELMET, 1]
        ],
        w: 1,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_HELMET,
        id2: INV.REIDITE_HELMET,
        time: 1 / 90,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.SCALES, 2],
            [INV.DIAMOND, 40],
            [INV.CORD, 4]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIVING_MASK,
        id2: INV.DIVING_MASK,
        time: .05,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.DIVING_MASK, 1],
            [INV.GOLD, 80],
            [INV.KRAKEN_SKIN, 1],
            [INV.AMETHYST, 20]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SUPER_DIVING_SUIT,
        id2: INV.SUPER_DIVING_SUIT,
        time: 1 / 90,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.FLAME, 5],
            [INV.DIAMOND, 50],
            [INV.BLUE_CORD, 5]
        ],
        w: 1,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_PROTECTION,
        id2: INV.DIAMOND_PROTECTION,
        time: .05,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.DIAMOND_PROTECTION, 1],
            [INV.FLAME, 10],
            [INV.AMETHYST, 50]
        ],
        w: 1,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_PROTECTION,
        id2: INV.AMETHYST_PROTECTION,
        time: 1 / 60,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.AMETHYST_PROTECTION, 1],
            [INV.FLAME, 15],
            [INV.AMETHYST, 50],
            [INV.REIDITE, 50]
        ],
        w: 1,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_PROTECTION,
        id2: INV.REIDITE_PROTECTION,
        time: 1 / 90,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.CORD, 4],
            [INV.FUR_BOAR, 2]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.TURBAN1,
        id2: INV.TURBAN1,
        time: 1 / 15,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.TURBAN1, 1],
            [INV.CORD, 6],
            [INV.FUR_BOAR, 4],
            [INV.VULTURE_FEATHER, 12],
            [INV.PENGUIN_FEATHER, 4]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.TURBAN2,
        id2: INV.TURBAN2,
        time: 1 / 150,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.CORD, 6],
            [INV.FUR_WOLF, 5]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BAG,
        id2: INV.BAG,
        time: 1 / 15,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.WOOD, 20]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.PAPER,
        id2: INV.PAPER,
        time: 1 / 3,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.DIAMOND, 1],
            [INV.CORD, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BLUE_CORD,
        id2: INV.BLUE_CORD,
        time: 1 / 3,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.GOLD, 10]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.LOCK,
        id2: INV.LOCK,
        time: .2,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.GOLD, 250]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.LOCKPICK,
        id2: INV.LOCKPICK,
        time: 1 / 60,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.TOTEM,
        id2: INV.TOTEM,
        time: .1,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 15]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BRIDGE,
        id2: INV.BRIDGE,
        time: .2,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 30]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.ROOF,
        id2: INV.ROOF,
        time: .2,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 120]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WOOD_TOWER,
        id2: INV.WOOD_TOWER,
        time: 1 / 15,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 20],
            [INV.GROUND, 15]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PLOT,
        id2: INV.PLOT,
        time: .2,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.SAND, 25]
        ],
        w: 1,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.BOTTLE_EMPTY,
        id2: INV.BOTTLE_EMPTY,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.BOTTLE_EMPTY, 1]
        ],
        w: 0,
        f: 0,
        o: 1,
        e: 0,
        id: CRAFT.BOTTLE_FULL,
        id2: INV.BOTTLE_FULL,
        time: .2,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.ICE, 20],
            [INV.BOTTLE_EMPTY, 1]
        ],
        w: 0,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.BOTTLE_FULL_2,
        id2: INV.BOTTLE_FULL,
        time: .1,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.BOTTLE_EMPTY, 1]
        ],
        w: 0,
        f: 0,
        o: 0,
        e: 1,
        id: CRAFT.BOTTLE_FULL_3,
        id2: INV.BOTTLE_FULL,
        time: 1 / 3,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.WOOD, 60],
            [INV.STONE, 20],
            [INV.CORD, 2]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WINDMILL,
        id2: INV.WINDMILL,
        time: .1,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.DIAMOND, 40],
            [INV.STONE, 45]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.RESURRECTION,
        id2: INV.RESURRECTION,
        time: .05,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.RESURRECTION, 1],
            [INV.EMERALD, 40],
            [INV.SANDWORM_JUICE, 1]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.EMERALD_MACHINE,
        id2: INV.EMERALD_MACHINE,
        time: .005,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 50],
            [INV.STONE, 100]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.EXTRACTOR_MACHINE_STONE,
        id2: INV.EXTRACTOR_MACHINE_STONE,
        time: 1 / 90,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.STONE, 60],
            [INV.GOLD, 120]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.EXTRACTOR_MACHINE_GOLD,
        id2: INV.EXTRACTOR_MACHINE_GOLD,
        time: 1 / 90,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.GOLD, 70],
            [INV.DIAMOND, 140]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.EXTRACTOR_MACHINE_DIAMOND,
        id2: INV.EXTRACTOR_MACHINE_DIAMOND,
        time: 1 / 90,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.DIAMOND, 80],
            [INV.AMETHYST, 160]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.EXTRACTOR_MACHINE_AMETHYST,
        id2: INV.EXTRACTOR_MACHINE_AMETHYST,
        time: 1 / 90,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.AMETHYST, 90],
            [INV.REIDITE, 180]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.EXTRACTOR_MACHINE_REIDITE,
        id2: INV.EXTRACTOR_MACHINE_REIDITE,
        time: 1 / 90,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.STONE, 70]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SPANNER,
        id2: INV.SPANNER,
        time: .1,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.STONE, 70],
            [INV.WOOD, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.MACHETE,
        id2: INV.MACHETE,
        time: .1,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WOOD, 40],
            [INV.STONE, 40]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BREAD_OVEN,
        id2: INV.BREAD_OVEN,
        time: .1,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.BREAD, 1],
            [INV.COOKED_MEAT, 1]
        ],
        w: 0,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SANDWICH,
        id2: INV.SANDWICH,
        time: 1 / 3,
        t: CATEGORY.FOODS
    }, {
        r: [
            [INV.BLUE_CORD, 30],
            [INV.DRAGON_CUBE, 1],
            [INV.AMETHYST, 150],
            [INV.DRAGON_HEART, 3]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.DRAGON_HELMET,
        id2: INV.DRAGON_HELMET,
        time: 1 / 120,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.DRAGON_HELMET, 1],
            [INV.LAVA_CUBE, 1],
            [INV.REIDITE, 150],
            [INV.LAVA_HEART, 2]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.LAVA_HELMET,
        id2: INV.LAVA_HELMET,
        time: 1 / 180,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.GOLD_HELMET, 1],
            [INV.CRAB_LOOT, 10],
            [INV.CRAB_STICK, 10],
            [INV.CORD, 10]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.CROWN_CRAB,
        id2: INV.CROWN_CRAB,
        time: 1 / 60,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.BLUE_CORD, 20],
            [INV.DRAGON_ORB, 1],
            [INV.AMETHYST, 150],
            [INV.DRAGON_HEART, 3]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.DRAGON_SWORD,
        id2: INV.DRAGON_SWORD,
        time: 1 / 120,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.DRAGON_SWORD, 1],
            [INV.LAVA_ORB, 1],
            [INV.REIDITE, 150],
            [INV.LAVA_HEART, 2]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.LAVA_SWORD,
        id2: INV.LAVA_SWORD,
        time: 1 / 180,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD, 100],
            [INV.CORD, 4]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WOOD_BOW,
        id2: INV.WOOD_BOW,
        time: .05,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD, 30]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WOOD_ARROW,
        id2: INV.WOOD_ARROW,
        time: .2,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.STONE, 200],
            [INV.CORD, 8],
            [INV.PENGUIN_FEATHER, 4],
            [INV.WOOD_BOW, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.STONE_BOW,
        id2: INV.STONE_BOW,
        time: .04,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.STONE, 20],
            [INV.HAWK_FEATHER, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.STONE_ARROW,
        id2: INV.STONE_ARROW,
        time: .2,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.GOLD, 200],
            [INV.CORD, 12],
            [INV.HAWK_FEATHER, 4],
            [INV.PENGUIN_FEATHER, 4],
            [INV.STONE_BOW, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.GOLD_BOW,
        id2: INV.GOLD_BOW,
        time: 1 / 30,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.GOLD, 20],
            [INV.PENGUIN_FEATHER, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.GOLD_ARROW,
        id2: INV.GOLD_ARROW,
        time: .1,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.DIAMOND, 200],
            [INV.BLUE_CORD, 10],
            [INV.HAWK_FEATHER, 8],
            [INV.PENGUIN_FEATHER, 8],
            [INV.GOLD_BOW, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_BOW,
        id2: INV.DIAMOND_BOW,
        time: 1 / 35,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.DIAMOND, 10],
            [INV.PENGUIN_FEATHER, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_ARROW,
        id2: INV.DIAMOND_ARROW,
        time: .1,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.AMETHYST, 200],
            [INV.BLUE_CORD, 10],
            [INV.PENGUIN_FEATHER, 8],
            [INV.VULTURE_FEATHER, 8],
            [INV.DIAMOND_BOW, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_BOW,
        id2: INV.AMETHYST_BOW,
        time: 1 / 40,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.AMETHYST, 10],
            [INV.VULTURE_FEATHER, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_ARROW,
        id2: INV.AMETHYST_ARROW,
        time: 1 / 15,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.REIDITE, 200],
            [INV.BLUE_CORD, 10],
            [INV.KRAKEN_SKIN, 1],
            [INV.AMETHYST_BOW, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_BOW,
        id2: INV.REIDITE_BOW,
        time: 1 / 45,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.REIDITE, 10],
            [INV.VULTURE_FEATHER, 1],
            [INV.FLAME, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_ARROW,
        id2: INV.REIDITE_ARROW,
        time: 1 / 15,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.EMERALD, 200],
            [INV.BLUE_CORD, 10],
            [INV.DRAGON_ORB, 1],
            [INV.REIDITE_BOW, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DRAGON_BOW,
        id2: INV.DRAGON_BOW,
        time: .02,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.EMERALD, 10],
            [INV.SANDWORM_JUICE, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DRAGON_ARROW,
        id2: INV.DRAGON_ARROW,
        time: .05,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD, 100]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WOOD_SHIELD,
        id2: INV.WOOD_SHIELD,
        time: .04,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.WOOD_SHIELD, 1],
            [INV.STONE, 100],
            [INV.WOOD, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.STONE_SHIELD,
        id2: INV.STONE_SHIELD,
        time: 1 / 40,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.STONE_SHIELD, 1],
            [INV.GOLD, 50],
            [INV.STONE, 50],
            [INV.WOOD, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.GOLD_SHIELD,
        id2: INV.GOLD_SHIELD,
        time: .02,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.GOLD_SHIELD, 1],
            [INV.DIAMOND, 50],
            [INV.GOLD, 50],
            [INV.STONE, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.DIAMOND_SHIELD,
        id2: INV.DIAMOND_SHIELD,
        time: 1 / 70,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.DIAMOND_SHIELD, 1],
            [INV.AMETHYST, 50],
            [INV.DIAMOND, 50],
            [INV.GOLD, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.AMETHYST_SHIELD,
        id2: INV.AMETHYST_SHIELD,
        time: 1 / 90,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.AMETHYST_SHIELD, 1],
            [INV.REIDITE, 50],
            [INV.AMETHYST, 50],
            [INV.DIAMOND, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.REIDITE_SHIELD,
        id2: INV.REIDITE_SHIELD,
        time: 1 / 120,
        t: CATEGORY.WEAPONS
    }, {
        r: [
            [INV.GEMME_GREEN, 1],
            [INV.GOLD, 200]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.CROWN_GREEN,
        id2: INV.CROWN_GREEN,
        time: 1 / 60,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.GEMME_ORANGE, 1],
            [INV.GOLD, 200]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.CROWN_ORANGE,
        id2: INV.CROWN_ORANGE,
        time: 1 / 60,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.GEMME_BLUE, 1],
            [INV.GOLD, 200],
            [INV.DRAGON_HEART, 1]
        ],
        w: 1,
        f: 1,
        o: 1,
        e: 0,
        id: CRAFT.CROWN_BLUE,
        id2: INV.CROWN_BLUE,
        time: 1 / 60,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.FUR_WOLF, 10],
            [INV.FUR, 5],
            [INV.CORD, 6]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.HOOD,
        id2: INV.HOOD,
        time: .1,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.FUR, 3],
            [INV.CORD, 2]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PEASANT,
        id2: INV.PEASANT,
        time: .1,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.HOOD, 1],
            [INV.SPECIAL_FUR_2, 1],
            [INV.FUR_WINTER, 15],
            [INV.BLUE_CORD, 5],
            [INV.PENGUIN_FEATHER, 8]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WINTER_HOOD,
        id2: INV.WINTER_HOOD,
        time: 1 / 60,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.PEASANT, 1],
            [INV.SPECIAL_FUR, 1],
            [INV.FUR_WINTER, 10],
            [INV.BLUE_CORD, 5],
            [INV.PENGUIN_FEATHER, 8]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.WINTER_PEASANT,
        id2: INV.WINTER_PEASANT,
        time: 1 / 60,
        t: CATEGORY.CLOTHES
    }, {
        r: [
            [INV.BUCKET_EMPTY, 1]
        ],
        w: 0,
        f: 0,
        o: 1,
        e: 0,
        id: CRAFT.BUCKET_FULL,
        id2: INV.BUCKET_FULL,
        time: .2,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.WOOD, 20],
            [INV.CORD, 1]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BUCKET_EMPTY,
        id2: INV.BUCKET_EMPTY,
        time: .2,
        t: CATEGORY.TOOLS
    }, {
        r: [
            [INV.STONE, 100],
            [INV.GROUND, 30]
        ],
        w: 1,
        f: 1,
        o: 0,
        e: 0,
        id: CRAFT.WELL,
        id2: INV.WELL,
        time: .1,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 20]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SIGN,
        id2: INV.SIGN,
        time: .2,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 100],
            [INV.STONE, 50],
            [INV.FUR, 5],
            [INV.FUR_WOLF, 5],
            [INV.CORD, 6]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BED,
        id2: INV.BED,
        time: .05,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 250],
            [INV.BLUE_CORD, 10],
            [INV.FUR_WINTER, 2],
            [INV.SCALES, 2]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.BOAT,
        id2: INV.BOAT,
        time: .02,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 250],
            [INV.CORD, 10],
            [INV.FUR_WINTER, 2],
            [INV.PENGUIN_FEATHER, 8]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SLED,
        id2: INV.SLED,
        time: .02,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.CORD, 10],
            [INV.FUR_WOLF, 6],
            [INV.FUR, 4],
            [INV.SAND, 50]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.SADDLE,
        id2: INV.SADDLE,
        time: .05,
        t: CATEGORY.UTILS
    }, {
        r: [
            [INV.WOOD, 250],
            [INV.CORD, 10],
            [INV.PAPER, 10],
            [INV.HAWK_FEATHER, 8]
        ],
        w: 1,
        f: 0,
        o: 0,
        e: 0,
        id: CRAFT.PLANE,
        id2: INV.PLANE,
        time: .02,
        t: CATEGORY.UTILS
    }];
COUNTER = 300;
TEXT = {
    YOU_CANNOT_JOIN: COUNTER++,
    KICKED: COUNTER++,
    KEY_ALREADY: COUNTER++,
    KEY_WRONG: COUNTER++,
    OLD_VERSION: COUNTER++,
    NO_MORE_RESOURCES: COUNTER++,
    SURVIVED_1DAY: COUNTER++,
    SURVIVED: COUNTER++,
    DAYS: COUNTER++,
    DEAD_SAD: COUNTER++,
    SPAM_ME: COUNTER++,
    SPAM_ME2: COUNTER++,
    EMPTY: COUNTER++,
    INV_FULL: COUNTER++,
    DEAD: COUNTER++,
    WRONG_TOOL: COUNTER++,
    JOIN_TEAM: COUNTER++,
    YOU_DEAD: COUNTER++,
    JOINED_TEAM: COUNTER++,
    TEAM_DESTROYED: COUNTER++,
    LEFT_TEAM: COUNTER++,
    LEFT_TEAM2: COUNTER++,
    TOKEN: COUNTER++,
    CHOOSE: COUNTER++,
    PLAYERS: COUNTER++,
    TOTAL_PLAYERS: COUNTER++,
    TOTAL_MODE: COUNTER++,
    COMMING_SOON: COUNTER++,
    BACK_TO_THE_GAME: COUNTER++,
    TWITTER: COUNTER++,
    FACEBOOK: COUNTER++,
    KIT_NEXT: COUNTER++,
    POINTS: COUNTER++,
    SCORE: COUNTER++,
    KILL: COUNTER++,
    DAYS_SURVIVED: COUNTER++,
    MODE_FREE: COUNTER++,
    MODE_GRID: COUNTER++,
    NEW_VERSION: COUNTER++,
    WRONG_PASSWORD: COUNTER++,
    TEMPEST_OFF: COUNTER++,
    TEMPEST_ON: COUNTER++,
    BLIZZARD_OFF: COUNTER++,
    BLIZZARD_ON: COUNTER++
};
for (var set_english = function() {
        LANG[INV.EXTRACTOR_MACHINE_STONE] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"], LANG[INV.EXTRACTOR_MACHINE_GOLD] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"], LANG[INV.EXTRACTOR_MACHINE_DIAMOND] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"], LANG[INV.EXTRACTOR_MACHINE_AMETHYST] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"], LANG[INV.EXTRACTOR_MACHINE_REIDITE] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"], LANG[INV.REIDITE_SHIELD] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"], LANG[INV.AMETHYST_SHIELD] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"], LANG[INV.DIAMOND_SHIELD] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"], LANG[INV.GOLD_SHIELD] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"], LANG[INV.STONE_SHIELD] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"], LANG[INV.WOOD_SHIELD] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"], LANG[INV.MACHETE] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"], LANG[INV.WOOD_TOWER] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"], LANG[INV.DRAGON_ARROW] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"], LANG[INV.DRAGON_BOW] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"], LANG[INV.REIDITE_ARROW] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"], LANG[INV.REIDITE_BOW] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"], LANG[INV.AMETHYST_ARROW] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"], LANG[INV.AMETHYST_BOW] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"], LANG[INV.DIAMOND_ARROW] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"], LANG[INV.DIAMOND_BOW] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"], LANG[INV.GOLD_ARROW] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"], LANG[INV.GOLD_BOW] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"], LANG[INV.STONE_ARROW] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"], LANG[INV.STONE_BOW] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"], LANG[INV.WOOD_ARROW] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"], LANG[INV.WOOD_BOW] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"], LANG[INV.EMERALD_MACHINE] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."], LANG[INV.FUR_BOAR] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"], LANG[INV.FUR_MAMMOTH] = ["Mammoth fur", "Soft and warm. Perfect for a hat."], LANG[INV.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"], LANG[INV.EMERALD] = ["Emerald", "How many golden breads can you get from it?"], LANG[INV.SANDWORM_JUICE] = ["Sand Worm Juice", "I don't want to know how you got this."], LANG[INV.TURBAN1] = ["Turban", "Useful to survive in the desert."], LANG[INV.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"], LANG[INV.PILOT_HELMET] = ["Pilot Hat", "Take off and land with flying objects much faster."], LANG[INV.PILOT_GLASSES] = ["Pilot Glasses"], LANG[INV.MOUNT_BOAR] = ["Tamed Boar", "Fast on lands and slow on water."], LANG[INV.BABY_MAMMOTH] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."], LANG[INV.CRAB_BOSS] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"], LANG[INV.BABY_DRAGON] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"], LANG[INV.BABY_LAVA] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"], LANG[INV.HAWK] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"], LANG[INV.SADDLE] = ["Saddle", "Hit a boar with it to tame it."], LANG[INV.WITCH] = ["Witch Hat", "You're a wizard Starvy!"], LANG[INV.NIMBUS] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."], LANG[INV.WAND1] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"], LANG[INV.WAND2] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"], LANG[INV.FIREFLY] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."], LANG[INV.PIRATE_HAT] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"], LANG[INV.SLED] = ["Sled", "You are faster with it in the snow"], LANG[INV.BOAT] = ["Boat", "You are faster with it in the water"], LANG[INV.PLANE] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"], LANG[INV.HAMMER_REIDITE] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"], LANG[INV.PENGUIN_FEATHER] = ["Penguin Feather", "From a deadly cute penguin."], LANG[INV.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."], LANG[INV.CACTUS] = ["Cactus", "Food : 20", "Water : 10"], LANG[INV.ALOE_VERA] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"], LANG[INV.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"], LANG[INV.WATERMELON] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"], LANG[INV.WATERMELON_SEED] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"], LANG[INV.REIDITE_DOOR] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"], LANG[INV.REIDITE_WALL] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"], LANG[INV.REIDITE_SPIKE] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"], LANG[INV.REIDITE_DOOR_SPIKE] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"], LANG[INV.PICK_REIDITE] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"], LANG[INV.WOOD_DOOR_SPIKE] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"], LANG[INV.STONE_DOOR_SPIKE] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"], LANG[INV.GOLD_DOOR_SPIKE] = ["Gold Door Spike", 'Are you rebuilding the "el dorado?"', "Damage: 15", "On-Hit Damage: 2", "Durability: 400"], LANG[INV.DIAMOND_DOOR_SPIKE] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"], LANG[INV.AMETHYST_DOOR_SPIKE] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"], LANG[INV.CARROT] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"], LANG[INV.TOMATO] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"], LANG[INV.CARROT_SEED] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"], LANG[INV.TOMATO_SEED] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"], LANG[INV.PITCHFORK] = ["Pitchfork", "Perfect for gathering"], LANG[INV.PITCHFORK2] = ["Golden Pitchfork", "Essential for a real farmer."], LANG[INV.PITCHFORK_PART] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."], LANG[INV.EGG0] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"], LANG[INV.EGG1] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"], LANG[INV.EGG2] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"], LANG[INV.EGG3] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"], LANG[INV.EGG4] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"], LANG[INV.LAVA_CUBE] = ["Lava Cube", "You feel an immense power emanating from this cube"], LANG[INV.LAVA_ORB] = ["Lava Orb", "You feel an immense power emanating from this orb"], LANG[INV.LAVA_SWORD] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"], LANG[INV.LAVA_SPEAR] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"], LANG[INV.LAVA_HEART] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."], LANG[INV.LAVA_HELMET] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"], LANG[INV.REIDITE_SPEAR] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"], LANG[INV.REIDITE_SWORD] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"], LANG[INV.FLAME] = ["Flame", "It's hot!"], LANG[INV.DIAMOND_PROTECTION] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"], LANG[INV.AMETHYST_PROTECTION] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"], LANG[INV.REIDITE_PROTECTION] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"], LANG[INV.REIDITE] = ["Reidite", "The ultimate ore"], LANG[INV.DRAGON_CUBE] = ["Dragon Cube", "You feel a great power emanating from this cube"], DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], DIE[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."], DIE[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."], DIE[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."], DIE[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."], DIE[27] = ['You were trampled by that boar. From now on, your new nickname is "the doormat".'], DIE[28] = ['With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"'], DIE[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."], DIE[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."], DIE[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."], DIE[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."], DIE[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."], DIE[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"], DIE[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"], DIE[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."], DIE[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'], DIE[38] = ["You died crushed by an angry baby mammoth."], DIE[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."], DIE[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."], LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], LANG[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.", LANG[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.", LANG[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.", LANG[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.", LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", LANG[TEXT.TWITTER] = " Share on Twitter", LANG[TEXT.FACEBOOK] = " Share on Facebook", LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", LANG[TEXT.POINTS] = "points", LANG[TEXT.SCORE] = "Score", LANG[TEXT.KILL] = "Kill", LANG[TEXT.DAYS_SURVIVED] = "Days survived", LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change", LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"], LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"], LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT", LANG[INV.HAND] = ["Hand"], LANG[INV.GROUND] = ["Dirt", "Dirty!"], LANG[INV.SAND] = ["Sand", "I got it in my eyes!"], LANG[INV.WOOD] = ["Wood", "You can't get enough of it!"], LANG[INV.STONE] = ["Stone", "Also called a rock"], LANG[INV.GOLD] = ["Gold", "Be generous, give it to others"], LANG[INV.DIAMOND] = ["Diamond", "What will you make with it?"], LANG[INV.AMETHYST] = ["Amethyst", "It's Mauve like Lapa"], LANG[INV.FLOUR] = ["Flour", "Used in cooking"], LANG[INV.COOKIE] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"], LANG[INV.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"], LANG[INV.MEAT] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"], LANG[INV.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"], LANG[INV.FOODFISH] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"], LANG[INV.FOODFISH_COOKED] = ["Cooked fish", "With lemon it's perfect", "Food: 35"], LANG[INV.BREAD] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"], LANG[INV.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"], LANG[INV.CANDY] = ["Candies", "Only for children!", "Food: 20"], LANG[INV.SUGAR_CAN] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"], LANG[INV.GARLAND] = ["Garland", "Perfect decoration for roofs"], LANG[INV.SEED] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"], LANG[INV.PLANT] = ["Berry", "Berry tasty!", "Food: 10"], LANG[INV.WHEAT_SEED] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"], LANG[INV.WILD_WHEAT] = ["Wild Wheat", "Turns into Flour when placed in Windmill"], LANG[INV.PUMPKIN_SEED] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"], LANG[INV.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"], LANG[INV.GARLIC_SEED] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"], LANG[INV.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"], LANG[INV.THORNBUSH_SEED] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"], LANG[INV.THORNBUSH] = ["Thorn bush", "It stings!"], LANG[INV.PLOT] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"], LANG[INV.ICE] = ["Ice", "Useful for making cakes and water"], LANG[INV.SPANNER] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"], LANG[INV.FUR_WOLF] = ["Wolf Fur", "Puppy? But where is Puppy?!"], LANG[INV.FUR] = ["Rabbit Fur", "That rabbit was so cute..."], LANG[INV.SPECIAL_FUR] = ["Pure Fur", "You're a bread factory"], LANG[INV.SPECIAL_FUR_2] = ["Dark Fur", "You get ready to do something wrong"], LANG[INV.FUR_WINTER] = ["Winter Fur", "These animals just wanted a hug..."], LANG[INV.SCALES] = ["Scales", "It smells like fish!"], LANG[INV.KRAKEN_SKIN] = ["Kraken Skin", "Weren't you too scared?"], LANG[INV.FIRE] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"], LANG[INV.BIG_FIRE] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"], LANG[INV.WORKBENCH] = ["Workbench", "Very useful to craft all kinds of objects"], LANG[INV.CORD] = ["Cord", "Used in crafting Hats and Bag"], LANG[INV.BLUE_CORD] = ["Diamond Cord", "Used in crafting Special Hats"], LANG[INV.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"], LANG[INV.SWORD_WOOD] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"], LANG[INV.SWORD] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"], LANG[INV.SWORD_GOLD] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"], LANG[INV.SWORD_DIAMOND] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"], LANG[INV.PIRATE_SWORD] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"], LANG[INV.SWORD_AMETHYST] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"], LANG[INV.DRAGON_SWORD] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"], LANG[INV.DRAGON_SPEAR] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"], LANG[INV.PICK_WOOD] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"], LANG[INV.PICK] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"], LANG[INV.PICK_GOLD] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"], LANG[INV.PICK_DIAMOND] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"], LANG[INV.PICK_AMETHYST] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"], LANG[INV.HAMMER] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"], LANG[INV.HAMMER_GOLD] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"], LANG[INV.HAMMER_DIAMOND] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"], LANG[INV.HAMMER_AMETHYST] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"], LANG[INV.SUPER_HAMMER] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"], LANG[INV.WOOD_SPEAR] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"], LANG[INV.SPEAR] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"], LANG[INV.GOLD_SPEAR] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"], LANG[INV.DIAMOND_SPEAR] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"], LANG[INV.AMETHYST_SPEAR] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"], LANG[INV.SHOVEL] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"], LANG[INV.SHOVEL_GOLD] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"], LANG[INV.SHOVEL_DIAMOND] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"], LANG[INV.SHOVEL_AMETHYST] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"], LANG[INV.WOOD_HELMET] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"], LANG[INV.STONE_HELMET] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"], LANG[INV.GOLD_HELMET] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"], LANG[INV.DIAMOND_HELMET] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"], LANG[INV.AMETHYST_HELMET] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"], LANG[INV.REIDITE_HELMET] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"], LANG[INV.DRAGON_HELMET] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"], LANG[INV.EXPLORER_HAT] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"], LANG[INV.CHRISTMAS_HAT] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"], LANG[INV.ELF_HAT] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"], LANG[INV.HOOD] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"], LANG[INV.EARMUFFS] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"], LANG[INV.COAT] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"], LANG[INV.CAP_SCARF] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"], LANG[INV.FUR_HAT] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"], LANG[INV.PEASANT] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"], LANG[INV.WINTER_HOOD] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"], LANG[INV.WINTER_PEASANT] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"], LANG[INV.DIVING_MASK] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"], LANG[INV.SUPER_DIVING_SUIT] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"], LANG[INV.DRAGON_ORB] = ["Dragon Orb", "You feel a great power emanating from this orb"], LANG[INV.DRAGON_HEART] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"], LANG[INV.GEMME_GREEN] = ["Green Gemstone", "You didn't cheat, promise?"], LANG[INV.GEMME_ORANGE] = ["Orange Gemstone", "Only a real pirate can find it!"], LANG[INV.GEMME_BLUE] = ["Blue Gemstone", "For too kind people"], LANG[INV.CROWN_GREEN] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"], LANG[INV.CROWN_ORANGE] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"], LANG[INV.CROWN_BLUE] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"], LANG[INV.BUCKET_FULL] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"], LANG[INV.BUCKET_EMPTY] = ["Empty Bucket", "You need to fill this bucket near a water source"], LANG[INV.BOTTLE_FULL] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"], LANG[INV.BOTTLE_EMPTY] = ["Empty Bottle", "You can fill this bottle near a water source"], LANG[INV.WATERING_CAN] = ["Empty Watering Can", "You must fill it with a water source to use it"], LANG[INV.WATERING_CAN_FULL] = ["Watering Can", "Allows watering of plants", "Damage: 1"], LANG[INV.BAG] = ["Bag", "More space for your items!"], LANG[INV.PAPER] = ["Paper", "Used in book-crafting"], LANG[INV.BOOK] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"], LANG[INV.BANDAGE] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"], LANG[INV.LOCK] = ["Lock", "Allow you to lock your chest"], LANG[INV.LOCKPICK] = ["Lock-pick", "Allows you to unlock one chest"], LANG[INV.TOTEM] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"], LANG[INV.BRIDGE] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"], LANG[INV.SIGN] = ["Sign", "Leave a message to others", "Durability: 200"], LANG[INV.ROOF] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"], LANG[INV.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"], LANG[INV.WALL] = ["Wood Wall", "It's just a wall", "Durability: 1000"], LANG[INV.STONE_WALL] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"], LANG[INV.GOLD_WALL] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"], LANG[INV.DIAMOND_WALL] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"], LANG[INV.AMETHYST_WALL] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"], LANG[INV.SPIKE] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"], LANG[INV.STONE_SPIKE] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"], LANG[INV.GOLD_SPIKE] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"], LANG[INV.DIAMOND_SPIKE] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"], LANG[INV.AMETHYST_SPIKE] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"], LANG[INV.WOOD_DOOR] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"], LANG[INV.STONE_DOOR] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"], LANG[INV.GOLD_DOOR] = ["Gold Door", 'Are you rebuilding the "el dorado?"', "Durability: 2000"], LANG[INV.DIAMOND_DOOR] = ["Diamond Door", "For a shining house", "Durability: 2500"], LANG[INV.AMETHYST_DOOR] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"], LANG[INV.FURNACE] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"], LANG[INV.WINDMILL] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"], LANG[INV.BREAD_OVEN] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"], LANG[INV.RESURRECTION] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"], LANG[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server", LANG[TEXT.KICKED] = "Kicked: ", LANG[TEXT.KEY_ALREADY] = "Your key is already used by someone else", LANG[TEXT.KEY_WRONG] = "Your key is wrong", LANG[TEXT.OLD_VERSION] = "You have an old version, you need to clear your cache", LANG[TEXT.NEW_VERSION] = "Your client version is too recent for this server. The server is being updated", LANG[TEXT.WRONG_PASSWORD] = "Wrong password! To enter a password: https://starve.io/?password=...", LANG[TEXT.NO_MORE_RESOURCES] = "There are no more new resources", LANG[TEXT.SURVIVED_1DAY] = "You survived 1 day", LANG[TEXT.SURVIVED] = "You survived ", LANG[TEXT.DAYS] = " days", LANG[TEXT.DEAD_SAD] = "You are dead ;-;", LANG[TEXT.SPAM_ME] = "Server cannot find spawn location! Spam the play button!", LANG[TEXT.SPAM_ME2] = "Server is full! Spam the play button!", LANG[TEXT.EMPTY] = "Resource is empty", LANG[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)", LANG[TEXT.DEAD] = " is dead", LANG[TEXT.WRONG_TOOL] = "This is not the right tool", LANG[TEXT.JOIN_TEAM] = "You joined a team", LANG[TEXT.YOU_DEAD] = "You are dead", LANG[TEXT.JOINED_TEAM] = " joined the team", LANG[TEXT.TEAM_DESTROYED] = "Your team was destroyed", LANG[TEXT.LEFT_TEAM] = "You left the team", LANG[TEXT.LEFT_TEAM2] = " left the team", LANG[TEXT.TOKEN] = "Someone stole your token :>", LANG[TEXT.CHOOSE] = "Choose a server", LANG[TEXT.PLAYERS] = "players", LANG[TEXT.TOTAL_PLAYERS] = "total players", LANG[TEXT.TOTAL_MODE] = "players on this mode", LANG[TEXT.COMMING_SOON] = "Coming soon...", document.getElementById("nickname_input").placeholder = "Nickname", DIE[0] = ["You were killed for no reason"], DIE[1] = ["You starved to death, as the name of the game implies"], DIE[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."], DIE[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."], DIE[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."], DIE[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."], DIE[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."], DIE[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"], DIE[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."], DIE[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."], DIE[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."], DIE[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."], DIE[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."], DIE[13] = ["You died of thirst. Better drink your own piss."], DIE[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."], DIE[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."], DIE[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."], DIE[17] = ["Your skin's falling apart, the sun killed you."], DIE[18] = ["Garlic stored in your pockets boiled your brain."], DIE[19] = ["As a vampire, don't stand near the garlic cloves."], DIE[20] = ["You ate garlic as a vampire, what did you expect?"], DIE[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"]
    }, set_russian = function() {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", LANG[TEXT.TWITTER] = " Share on Twitter", LANG[TEXT.FACEBOOK] = " Share on Facebook", LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", LANG[TEXT.POINTS] = "points", LANG[TEXT.SCORE] = "Score", LANG[TEXT.KILL] = "Kill", LANG[TEXT.DAYS_SURVIVED] = "Days survived", LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change", LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT", LANG[INV.HAND] = ["Рука"], LANG[INV.GROUND] = ["Земля", "Грязно!"], LANG[INV.SAND] = ["Песок", "Он в моих глазах!"], LANG[INV.WOOD] = ["Дерево", "Постоянно нужно больше!"], LANG[INV.STONE] = ["Камень", "Твердый"], LANG[INV.GOLD] = ["Золото", "Будьте щедры, давайте его другим"], LANG[INV.DIAMOND] = ["Алмаз", "Что вы создадите с помощью него?"], LANG[INV.AMETHYST] = ["Аметист", "Он сиреневый, как Lapa"], LANG[INV.FLOUR] = ["Мука", "Используется в готовке"], LANG[INV.COOKIE] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"], LANG[INV.CAKE] = ["Торт", "Торт мечты для гурманов", "Еда: 100"], LANG[INV.MEAT] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"], LANG[INV.COOKED_MEAT] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"], LANG[INV.FOODFISH] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"], LANG[INV.FOODFISH_COOKED] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"], LANG[INV.BREAD] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"], LANG[INV.SANDWICH] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"], LANG[INV.CANDY] = ["Конфеты", "Только для детей!", "Еда: 20"], LANG[INV.SUGAR_CAN] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"], LANG[INV.GARLAND] = ["Гирлянда", "Прекрасная декорация для крыши"], LANG[INV.SEED] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"], LANG[INV.PLANT] = ["Ягода", "Ягода вкусная!", "Еда: 10"], LANG[INV.WHEAT_SEED] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"], LANG[INV.WILD_WHEAT] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"], LANG[INV.PUMPKIN_SEED] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"], LANG[INV.PUMPKIN] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"], LANG[INV.GARLIC_SEED] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"], LANG[INV.GARLIC] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"], LANG[INV.THORNBUSH_SEED] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"], LANG[INV.THORNBUSH] = ["Колючий Куст", "Это больно!"], LANG[INV.PLOT] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"], LANG[INV.ICE] = ["Лёд", "Используется для изготовления тортов и воды"], LANG[INV.SPANNER] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"], LANG[INV.FUR_WOLF] = ["Шкура Волка", "Щенок? Но где же Щенок?!"], LANG[INV.FUR] = ["Шкура Зайца", "Этот кролик был таким милым..."], LANG[INV.SPECIAL_FUR] = ["Чистая Шкура", "Вы - фабрика хлеба"], LANG[INV.SPECIAL_FUR_2] = ["Чёрная Шкура", "Вы готовы делать зло."], LANG[INV.FUR_WINTER] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."], LANG[INV.SCALES] = ["Чешуя", "Она пахнет рыбой!"], LANG[INV.KRAKEN_SKIN] = ["Шкура Кракена", "Вы не испугались?"], LANG[INV.FIRE] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"], LANG[INV.BIG_FIRE] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"], LANG[INV.WORKBENCH] = ["Верстак", "Необходим для создания многих предметов"], LANG[INV.CORD] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"], LANG[INV.BLUE_CORD] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"], LANG[INV.CHEST] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"], LANG[INV.SWORD_WOOD] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"], LANG[INV.SWORD] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"], LANG[INV.SWORD_GOLD] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"], LANG[INV.SWORD_DIAMOND] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"], LANG[INV.PIRATE_SWORD] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"], LANG[INV.SWORD_AMETHYST] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"], LANG[INV.DRAGON_SWORD] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"], LANG[INV.DRAGON_SPEAR] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"], LANG[INV.PICK_WOOD] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"], LANG[INV.PICK] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"], LANG[INV.PICK_GOLD] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"], LANG[INV.PICK_DIAMOND] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"], LANG[INV.PICK_AMETHYST] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"], LANG[INV.HAMMER] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"], LANG[INV.HAMMER_GOLD] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"], LANG[INV.HAMMER_DIAMOND] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"], LANG[INV.HAMMER_AMETHYST] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"], LANG[INV.SUPER_HAMMER] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"], LANG[INV.WOOD_SPEAR] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"], LANG[INV.SPEAR] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"], LANG[INV.GOLD_SPEAR] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"], LANG[INV.DIAMOND_SPEAR] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"], LANG[INV.AMETHYST_SPEAR] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"], LANG[INV.SHOVEL] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"], LANG[INV.SHOVEL_GOLD] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"], LANG[INV.SHOVEL_DIAMOND] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"], LANG[INV.SHOVEL_AMETHYST] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"], LANG[INV.WOOD_HELMET] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"], LANG[INV.STONE_HELMET] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"], LANG[INV.GOLD_HELMET] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"], LANG[INV.DIAMOND_HELMET] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"], LANG[INV.AMETHYST_HELMET] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"], LANG[INV.DRAGON_HELMET] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"], LANG[INV.EXPLORER_HAT] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."], LANG[INV.CHRISTMAS_HAT] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."], LANG[INV.ELF_HAT] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."], LANG[INV.HOOD] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."], LANG[INV.EARMUFFS] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."], LANG[INV.COAT] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."], LANG[INV.CAP_SCARF] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"], LANG[INV.PEASANT] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."], LANG[INV.WINTER_HOOD] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."], LANG[INV.WINTER_PEASANT] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."], LANG[INV.DIVING_MASK] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"], LANG[INV.SUPER_DIVING_SUIT] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"], LANG[INV.DRAGON_ORB] = ["Шар Дракона", "Даётся за квест"], LANG[INV.DRAGON_HEART] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"], LANG[INV.GEMME_GREEN] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"], LANG[INV.GEMME_ORANGE] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"], LANG[INV.GEMME_BLUE] = ["Синий Драгоценный Камень", "Для очень добрых людей"], LANG[INV.CROWN_GREEN] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"], LANG[INV.CROWN_ORANGE] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"], LANG[INV.CROWN_BLUE] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"], LANG[INV.BUCKET_FULL] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"], LANG[INV.BUCKET_EMPTY] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"], LANG[INV.BOTTLE_FULL] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"], LANG[INV.BOTTLE_EMPTY] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"], LANG[INV.WATERING_CAN] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"], LANG[INV.WATERING_CAN_FULL] = ["Лейка", "Позволяет поливать растения", "Урон: 1"], LANG[INV.BAG] = ["Рюкзак", "Больше места для ваших предметов!"], LANG[INV.PAPER] = ["Бумага", "Используется при создании книги"], LANG[INV.BOOK] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"], LANG[INV.BANDAGE] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"], LANG[INV.LOCK] = ["Замок", "Позволяет вам закрыть ваш сундук"], LANG[INV.LOCKPICK] = ["Ключ", "Даёт вам открыть один запертый сундук"], LANG[INV.TOTEM] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"], LANG[INV.BRIDGE] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"], LANG[INV.SIGN] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"], LANG[INV.ROOF] = ["Крыша", "Немного скрывает вас и согревает!"], LANG[INV.WELL] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"], LANG[INV.WALL] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"], LANG[INV.STONE_WALL] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"], LANG[INV.GOLD_WALL] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"], LANG[INV.DIAMOND_WALL] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"], LANG[INV.AMETHYST_WALL] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"], LANG[INV.SPIKE] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"], LANG[INV.STONE_SPIKE] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"], LANG[INV.GOLD_SPIKE] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"], LANG[INV.DIAMOND_SPIKE] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"], LANG[INV.AMETHYST_SPIKE] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"], LANG[INV.WOOD_DOOR] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"], LANG[INV.STONE_DOOR] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"], LANG[INV.GOLD_DOOR] = ["Золотая Дверь", 'Вы перестраиваете "Эль Дорадо?"', "Прочность: 2000"], LANG[INV.DIAMOND_DOOR] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"], LANG[INV.AMETHYST_DOOR] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"], LANG[INV.FURNACE] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"], LANG[INV.WINDMILL] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"], LANG[INV.BREAD_OVEN] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"], LANG[INV.RESURRECTION] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"], LANG[TEXT.YOU_CANNOT_JOIN] = "Вы не можете зайти на этот сервер", LANG[TEXT.KICKED] = "Выгнаны: ", LANG[TEXT.KEY_ALREADY] = "Ваш ключ уже используется кем-то", LANG[TEXT.KEY_WRONG] = "Ваш ключ неправильный", LANG[TEXT.OLD_VERSION] = "У вас старая версия, вам нужно очистить кеш", LANG[TEXT.NO_MORE_RESOURCES] = "Ресурсов больше нет", LANG[TEXT.SURVIVED_1DAY] = "Вы выжили 1 день", LANG[TEXT.SURVIVED] = "Вы выжили ", LANG[TEXT.DAYS] = " дней", LANG[TEXT.DEAD_SAD] = "Вы умерли ;-;", LANG[TEXT.SPAM_ME] = "Сервер не может найти точку спавна! Спамьте кнопку играть!", LANG[TEXT.SPAM_ME2] = "Сервер заполнен! Спамьте кнопку играть!", LANG[TEXT.EMPTY] = "Ресурсы закончились", LANG[TEXT.INV_FULL] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)", LANG[TEXT.DEAD] = " умер", LANG[TEXT.WRONG_TOOL] = "Это не тот инструмент", LANG[TEXT.JOIN_TEAM] = "Вы вошли в команду", LANG[TEXT.YOU_DEAD] = "Вы умерли", LANG[TEXT.JOINED_TEAM] = " вошёл в команду", LANG[TEXT.TEAM_DESTROYED] = "Ваша команда была разрушена", LANG[TEXT.LEFT_TEAM] = "Вы покинули команду", LANG[TEXT.LEFT_TEAM2] = " покинул команду", LANG[TEXT.TOKEN] = "Кто-то использует ваш токен :>", LANG[TEXT.CHOOSE] = "Выберите сервер", LANG[TEXT.PLAYERS] = "игроков", LANG[TEXT.TOTAL_PLAYERS] = "игроков всего", LANG[TEXT.TOTAL_MODE] = "игроков в этом режиме", LANG[TEXT.COMMING_SOON] = "Скоро...", document.getElementById("nickname_input").placeholder = "Имя", DIE[0] = ["Вы были убиты без причины"], DIE[1] = ["Вы умерли от голода, как название игры подразумевает это"], DIE[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."], DIE[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."], DIE[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."], DIE[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."], DIE[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."], DIE[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"], DIE[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."], DIE[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."], DIE[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."], DIE[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."], DIE[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."], DIE[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."], DIE[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."], DIE[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."], DIE[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."], DIE[17] = ["Твоя кожа разваливается, солнце убило тебя"], DIE[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."], DIE[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."], DIE[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"], DIE[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"]
    }, set_portuguese = function() {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", LANG[TEXT.TWITTER] = " Share on Twitter", LANG[TEXT.FACEBOOK] = " Share on Facebook", LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", LANG[TEXT.POINTS] = "points", LANG[TEXT.SCORE] = "Score", LANG[TEXT.KILL] = "Kill", LANG[TEXT.DAYS_SURVIVED] = "Days survived", LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change", LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT", LANG[INV.HAND] = ["mão"], LANG[INV.GROUND] = ["terra", "está sujo!"], LANG[INV.SAND] = ["areia", "entrou nos meus olhos!"], LANG[INV.WOOD] = ["madeira", "você não pode pegar o suficiente disso!"], LANG[INV.STONE] = ["pedra", "também chamado rocha"], LANG[INV.GOLD] = ["ouro", "seja generoso, dê para outros"], LANG[INV.DIAMOND] = ["diamante", "o que você irá fazer com isso?"], LANG[INV.AMETHYST] = ["ametista", "é mauve como lapa"], LANG[INV.FLOUR] = ["farinha", "usada na cozinha"], LANG[INV.COOKIE] = ["biscoito", "biscoito da vovó", "comida: 50"], LANG[INV.CAKE] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"], LANG[INV.MEAT] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"], LANG[INV.COOKED_MEAT] = ["carne assada", "um mal passado, por favor", "comida: 35"], LANG[INV.FOODFISH] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"], LANG[INV.FOODFISH_COOKED] = ["peixe assado", "com limão é perfeito", "comida: 35"], LANG[INV.BREAD] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"], LANG[INV.SANDWICH] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"], LANG[INV.CANDY] = ["doces", "apenas para crianças!", "comida: 100"], LANG[INV.SUGAR_CAN] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"], LANG[INV.GARLAND] = ["pisca-pisca", "decoração perfeita de telhado"], LANG[INV.SEED] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"], LANG[INV.PLANT] = ["berry", "Berry saborosa!", "comida: 10"], LANG[INV.WHEAT_SEED] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"], LANG[INV.WILD_WHEAT] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"], LANG[INV.PUMPKIN_SEED] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"], LANG[INV.PUMPKIN] = ["abóbora", "é a lembrança do halloween", "comida: 30"], LANG[INV.GARLIC_SEED] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"], LANG[INV.GARLIC] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"], LANG[INV.THORNBUSH_SEED] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"], LANG[INV.THORNBUSH] = ["mato de espinhos", "pica!"], LANG[INV.PLOT] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"], LANG[INV.ICE] = ["gelo", "útil para fazer bolo e água"], LANG[INV.SPANNER] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"], LANG[INV.FUR_WOLF] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"], LANG[INV.FUR] = ["pele de coelho", "o coelho era tão fofo..."], LANG[INV.SPECIAL_FUR] = ["pele pura", "você é uma fábrica de pão"], LANG[INV.SPECIAL_FUR_2] = ["pele negra", "você está pronto para fazer algo errado"], LANG[INV.FUR_WINTER] = ["pele de inverno", "ele só queria um abraço"], LANG[INV.SCALES] = ["escala", "é pequeno como peixe!"], LANG[INV.KRAKEN_SKIN] = ["pele do kraken", "você não está com medo?"], LANG[INV.FIRE] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"], LANG[INV.BIG_FIRE] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"], LANG[INV.WORKBENCH] = ["mesa de trabalho", "muito útil para fazer todos os objetos"], LANG[INV.CORD] = ["linha", "usada para fazer chapéus e mochila"], LANG[INV.BLUE_CORD] = ["linha de diamante", "usada para fazer chapéus especiais"], LANG[INV.CHEST] = ["baú", "permite que você guarde itens", "durabilidade: 500"], LANG[INV.SWORD_WOOD] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"], LANG[INV.SWORD] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"], LANG[INV.SWORD_GOLD] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"], LANG[INV.SWORD_DIAMOND] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"], LANG[INV.PIRATE_SWORD] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"], LANG[INV.SWORD_AMETHYST] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"], LANG[INV.DRAGON_SWORD] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"], LANG[INV.DRAGON_SPEAR] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"], LANG[INV.PICK_WOOD] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"], LANG[INV.PICK_STONE] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"], LANG[INV.PICK_GOLD] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"], LANG[INV.PICK_DIAMOND] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"], LANG[INV.PICK_AMETHYST] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"], LANG[INV.HAMMER] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"], LANG[INV.HAMMER_GOLD] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"], LANG[INV.HAMMER_DIAMOND] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"], LANG[INV.HAMMER_AMETHYST] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"], LANG[INV.SUPER_HAMMER] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"], LANG[INV.WOOD_SPEAR] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"], LANG[INV.SPEAR] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"], LANG[INV.GOLD_SPEAR] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"], LANG[INV.DIAMOND_SPEAR] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"], LANG[INV.AMETHYST_SPEAR] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"], LANG[INV.SHOVEL] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"], LANG[INV.SHOVEL_GOLD] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"], LANG[INV.SHOVEL_DIAMOND] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"], LANG[INV.SHOVEL_AMETHYST] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"], LANG[INV.WOOD_HELMET] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"], LANG[INV.STONE_HELMET] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"], LANG[INV.GOLD_HELMET] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"], LANG[INV.DIAMOND_HELMET] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"], LANG[INV.AMETHYST_HELMET] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"], LANG[INV.DRAGON_HELMET] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"], LANG[INV.EXPLORER_HAT] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"], LANG[INV.CHRISTMAS_HAT] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"], LANG[INV.ELF_HAT] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"], LANG[INV.HOOD] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"], LANG[INV.EARMUFFS] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"], LANG[INV.COAT] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"], LANG[INV.CAP_SCARF] = ["Chapéu de inverno", "Muito confortável", "Muito quente"], LANG[INV.PEASANT] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"], LANG[INV.WINTER_HOOD] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"], LANG[INV.WINTER_PEASANT] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"], LANG[INV.DIVING_MASK] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"], LANG[INV.SUPER_DIVING_SUIT] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"], LANG[INV.DRAGON_ORB] = ["esfera do dragão", "dado na questt"], LANG[INV.DRAGON_HEART] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"], LANG[INV.GEMME_GREEN] = ["pedra verde", "você não vai trapacear, promete?"], LANG[INV.GEMME_ORANGE] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"], LANG[INV.GEMME_BLUE] = ["pedra azul", "para pessoas muito gentis"], LANG[INV.CROWN_GREEN] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"], LANG[INV.CROWN_ORANGE] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"], LANG[INV.CROWN_BLUE] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"], LANG[INV.BUCKET_FULL] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"], LANG[INV.BUCKET_EMPTY] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"], LANG[INV.BOTTLE_FULL] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"], LANG[INV.BOTTLE_EMPTY] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"], LANG[INV.WATERING_CAN] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"], LANG[INV.WATERING_CAN_FULL] = ["regador", "permite regar as plantas", "dano: 1"], LANG[INV.BAG] = ["mochila", "mais espaço para seus itens!"], LANG[INV.PAPER] = ["papel", "usado para fazer o livro"], LANG[INV.BOOK] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"], LANG[INV.BANDAGE] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"], LANG[INV.LOCK] = ["fechadura", "permite você trancar seu baú"], LANG[INV.LOCKPICK] = ["chave", "permite destrancar um baú"], LANG[INV.TOTEM] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"], LANG[INV.BRIDGE] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"], LANG[INV.SIGN] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"], LANG[INV.ROOF] = ["telhado", "esconde você um pouco e te esquenta!"], LANG[INV.WELL] = ["poço", "permite encher garrafas", "durabilidade: 1000"], LANG[INV.WALL] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"], LANG[INV.STONE_WALL] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"], LANG[INV.GOLD_WALL] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"], LANG[INV.DIAMOND_WALL] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"], LANG[INV.AMETHYST_WALL] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"], LANG[INV.SPIKE] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"], LANG[INV.STONE_SPIKE] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"], LANG[INV.GOLD_SPIKE] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"], LANG[INV.DIAMOND_SPIKE] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"], LANG[INV.AMETHYST_SPIKE] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"], LANG[INV.WOOD_DOOR] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"], LANG[INV.STONE_DOOR] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"], LANG[INV.GOLD_DOOR] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"], LANG[INV.DIAMOND_DOOR] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"], LANG[INV.AMETHYST_DOOR] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"], LANG[INV.FURNACE] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"], LANG[INV.WINDMILL] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"], LANG[INV.BREAD_OVEN] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"], LANG[INV.RESURRECTION] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"], LANG[TEXT.YOU_CANNOT_JOIN] = "você não pode entrar no servidor", LANG[TEXT.KICKED] = "kickado: ", LANG[TEXT.KEY_ALREADY] = "sua chave está em uso por outra pessoa", LANG[TEXT.KEY_WRONG] = "sua chave está errada", LANG[TEXT.OLD_VERSION] = "você tem uma versão velha, limpe seu cache", LANG[TEXT.NO_MORE_RESOURCES] = "não tem mais recursos", LANG[TEXT.SURVIVED_1DAY] = "você sobreviveu 1 dia", LANG[TEXT.SURVIVED] = "você sobreviveu ", LANG[TEXT.DAYS] = " dias", LANG[TEXT.DEAD_SAD] = "você está morto ;-;", LANG[TEXT.SPAM_ME] = "servidor não pôde achar um local de spawn! spam o botão de play!", LANG[TEXT.SPAM_ME2] = "servidor está cheio! spam o botão de play!", LANG[TEXT.EMPTY] = "não tem recursos", LANG[TEXT.INV_FULL] = "inventário está cheio (botão direito para deletar itens)", LANG[TEXT.DEAD] = " está morto", LANG[TEXT.WRONG_TOOL] = "essa não é a ferramenta certa", LANG[TEXT.JOIN_TEAM] = "você entrou no time", LANG[TEXT.YOU_DEAD] = "você está morto", LANG[TEXT.JOINED_TEAM] = "entrou no time", LANG[TEXT.TEAM_DESTROYED] = "seu time foi destruido", LANG[TEXT.LEFT_TEAM] = "você saiu do time", LANG[TEXT.LEFT_TEAM2] = " saiu do time", LANG[TEXT.TOKEN] = "alguém roubou sua ficha :>", LANG[TEXT.CHOOSE] = "escolha um servidor", LANG[TEXT.PLAYERS] = "jogadores", LANG[TEXT.TOTAL_PLAYERS] = "jogadores totais", LANG[TEXT.TOTAL_MODE] = "jogadores nesse modo", LANG[TEXT.COMMING_SOON] = "Coming soon...", document.getElementById("nickname_input").placeholder = "Apelido", DIE[0] = ["você morreu sem motivo"], DIE[1] = ["você morreu de fome, como o jogo diz"], DIE[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."], DIE[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."], DIE[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."], DIE[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."], DIE[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."], DIE[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"], DIE[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."], DIE[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."], DIE[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."], DIE[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."], DIE[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."], DIE[13] = ["você morreu de sede. melhor beber sua própria urina."], DIE[14] = ["você sabia que você morre afogado? agora você sabe."], DIE[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."], DIE[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."], DIE[17] = ["sua pele caindo aos pedaços, o sol te matou."], DIE[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."], DIE[19] = ["como vampiro, não chegue perto do alho."], DIE[20] = ["você comeu alho como vampiro, o que você esperava?"], DIE[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"]
    }, set_spanish = function() {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", LANG[TEXT.TWITTER] = " Share on Twitter", LANG[TEXT.FACEBOOK] = " Share on Facebook", LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", LANG[TEXT.POINTS] = "points", LANG[TEXT.SCORE] = "Score", LANG[TEXT.KILL] = "Kill", LANG[TEXT.DAYS_SURVIVED] = "Days survived", LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change", LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT", LANG[INV.HAND] = ["Mano"], LANG[INV.GROUND] = ["Tierra", "¡Tan limpia como mis manos!"], LANG[INV.SAND] = ["Arena", "¡Tengo arena en mis ojos!"], LANG[INV.WOOD] = ["Madera", "¡Nunca hay suficiente!"], LANG[INV.STONE] = ["Piedra", "También llamada roca."], LANG[INV.GOLD] = ["Oro", "Sé generoso, compártelo con los otros"], LANG[INV.DIAMOND] = ["Diamante", "¿Que vas a hacer con él?"], LANG[INV.AMETHYST] = ["Amatista", "Es Mauve como Lapa"], LANG[INV.FLOUR] = ["Harina", "Usada para cocinar."], LANG[INV.COOKIE] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"], LANG[INV.CAKE] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"], LANG[INV.MEAT] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"], LANG[INV.COOKED_MEAT] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"], LANG[INV.FOODFISH] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"], LANG[INV.FOODFISH_COOKED] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"], LANG[INV.BREAD] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"], LANG[INV.SANDWICH] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"], LANG[INV.CANDY] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"], LANG[INV.SUGAR_CAN] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"], LANG[INV.GARLAND] = ["Guirnalda", "Perfecta para decorar el techo"], LANG[INV.SEED] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"], LANG[INV.PLANT] = ["Baya", "No es venenosa.", "Comida: 10"], LANG[INV.WHEAT_SEED] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"], LANG[INV.WILD_WHEAT] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"], LANG[INV.PUMPKIN_SEED] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"], LANG[INV.PUMPKIN] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"], LANG[INV.GARLIC_SEED] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"], LANG[INV.GARLIC] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"], LANG[INV.THORNBUSH_SEED] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"], LANG[INV.THORNBUSH] = ["Planta de Espinas", "¡Te daña!"], LANG[INV.PLOT] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"], LANG[INV.ICE] = ["Hielo", "Bueno para hacer tartas y agua"], LANG[INV.SPANNER] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"], LANG[INV.FUR_WOLF] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"], LANG[INV.FUR] = ["Pelaje de Conejo", "El Conejo era muy lindo..."], LANG[INV.SPECIAL_FUR] = ["Pelaje Puro", "¡Eres una maquina de pan!"], LANG[INV.SPECIAL_FUR_2] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"], LANG[INV.FUR_WINTER] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."], LANG[INV.SCALES] = ["Escamas", "¡Huele a pescado!"], LANG[INV.KRAKEN_SKIN] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"], LANG[INV.FIRE] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"], LANG[INV.BIG_FIRE] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"], LANG[INV.WORKBENCH] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"], LANG[INV.CORD] = ["Hilo", "Usado para craftear ropa y mochila"], LANG[INV.BLUE_CORD] = ["Hilo de Diamante", "Usado para craftear ropa especial"], LANG[INV.CHEST] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"], LANG[INV.SWORD_WOOD] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"], LANG[INV.SWORD] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"], LANG[INV.SWORD_GOLD] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"], LANG[INV.SWORD_DIAMOND] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"], LANG[INV.PIRATE_SWORD] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"], LANG[INV.SWORD_AMETHYST] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"], LANG[INV.DRAGON_SWORD] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"], LANG[INV.DRAGON_SPEAR] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"], LANG[INV.PICK_WOOD] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"], LANG[INV.PICK] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"], LANG[INV.PICK_GOLD] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"], LANG[INV.PICK_DIAMOND] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"], LANG[INV.PICK_AMETHYST] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"], LANG[INV.HAMMER] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"], LANG[INV.HAMMER_GOLD] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"], LANG[INV.HAMMER_DIAMOND] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"], LANG[INV.HAMMER_AMETHYST] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"], LANG[INV.SUPER_HAMMER] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"], LANG[INV.WOOD_SPEAR] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"], LANG[INV.SPEAR] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"], LANG[INV.GOLD_SPEAR] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"], LANG[INV.DIAMOND_SPEAR] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"], LANG[INV.AMETHYST_SPEAR] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"], LANG[INV.SHOVEL] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"], LANG[INV.SHOVEL_GOLD] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"], LANG[INV.SHOVEL_DIAMOND] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"], LANG[INV.SHOVEL_AMETHYST] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"], LANG[INV.WOOD_HELMET] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"], LANG[INV.STONE_HELMET] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"], LANG[INV.GOLD_HELMET] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"], LANG[INV.DIAMOND_HELMET] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"], LANG[INV.AMETHYST_HELMET] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"], LANG[INV.DRAGON_HELMET] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"], LANG[INV.EXPLORER_HAT] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"], LANG[INV.CHRISTMAS_HAT] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"], LANG[INV.ELF_HAT] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"], LANG[INV.HOOD] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"], LANG[INV.EARMUFFS] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"], LANG[INV.COAT] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"], LANG[INV.CAP_SCARF] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"], LANG[INV.PEASANT] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"], LANG[INV.WINTER_HOOD] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"], LANG[INV.WINTER_PEASANT] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"], LANG[INV.DIVING_MASK] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"], LANG[INV.SUPER_DIVING_SUIT] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"], LANG[INV.DRAGON_ORB] = ["Esfera del Dragón", "Dada en la misión"], LANG[INV.DRAGON_HEART] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"], LANG[INV.GEMME_GREEN] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"], LANG[INV.GEMME_ORANGE] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"], LANG[INV.GEMME_BLUE] = ["Gema Azul", "Para gente muy amable"], LANG[INV.CROWN_GREEN] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"], LANG[INV.CROWN_ORANGE] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"], LANG[INV.CROWN_BLUE] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"], LANG[INV.BUCKET_FULL] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"], LANG[INV.BUCKET_EMPTY] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"], LANG[INV.BOTTLE_FULL] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"], LANG[INV.BOTTLE_EMPTY] = ["Botella Vacia", "La puedes llenar de agua"], LANG[INV.WATERING_CAN] = ["Regadera Vacía", "La tienes que llenar de agua"], LANG[INV.WATERING_CAN_FULL] = ["Regadera", "Te permite regar las plantas", "Daño: 1"], LANG[INV.BAG] = ["Mochila", "¡Mas espacio para tus cosas!"], LANG[INV.PAPER] = ["Hoja", "Usada para hacer un libro"], LANG[INV.BOOK] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"], LANG[INV.BANDAGE] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"], LANG[INV.LOCK] = ["Cerradura", "Te permite cerrar tu cofre"], LANG[INV.LOCKPICK] = ["Llave", "Te permite abrir un cofre cerrado"], LANG[INV.TOTEM] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"], LANG[INV.BRIDGE] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"], LANG[INV.SIGN] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"], LANG[INV.ROOF] = ["Techo", "Te esconde un poco y te protege del frío"], LANG[INV.WELL] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"], LANG[INV.WALL] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"], LANG[INV.STONE_WALL] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"], LANG[INV.GOLD_WALL] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"], LANG[INV.DIAMOND_WALL] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"], LANG[INV.AMETHYST_WALL] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"], LANG[INV.SPIKE] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"], LANG[INV.STONE_SPIKE] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"], LANG[INV.GOLD_SPIKE] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"], LANG[INV.DIAMOND_SPIKE] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"], LANG[INV.AMETHYST_SPIKE] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"], LANG[INV.WOOD_DOOR] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"], LANG[INV.STONE_DOOR] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"], LANG[INV.GOLD_DOOR] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"], LANG[INV.DIAMOND_DOOR] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"], LANG[INV.AMETHYST_DOOR] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"], LANG[INV.FURNACE] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"], LANG[INV.WINDMILL] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"], LANG[INV.BREAD_OVEN] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"], LANG[INV.RESURRECTION] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"], LANG[TEXT.YOU_CANNOT_JOIN] = "No puedes unirte a este servidor", LANG[TEXT.KICKED] = "Expulsado: ", LANG[TEXT.KEY_ALREADY] = "Tu llave ya está usada", LANG[TEXT.KEY_WRONG] = "Tu llave está mal", LANG[TEXT.OLD_VERSION] = "Tienes una versión antigua, limpia tu cache", LANG[TEXT.NO_MORE_RESOURCES] = "No hay mas recursos", LANG[TEXT.SURVIVED_1DAY] = "Has sobrevivido 1 día", LANG[TEXT.SURVIVED] = "Has sobrevivido ", LANG[TEXT.DAYS] = " días", LANG[TEXT.DEAD_SAD] = "Estás muerto ;-;", LANG[TEXT.SPAM_ME] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!", LANG[TEXT.SPAM_ME2] = "El servidor esta lleno, ¡spamea el botón de jugar!", LANG[TEXT.EMPTY] = "Recurso vacio", LANG[TEXT.INV_FULL] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ", LANG[TEXT.DEAD] = " está muerto", LANG[TEXT.WRONG_TOOL] = "Esta no es la herramienta correcta", LANG[TEXT.JOIN_TEAM] = "Te has unido a un equipo", LANG[TEXT.YOU_DEAD] = "Estás muerto", LANG[TEXT.JOINED_TEAM] = " se unió al equipo", LANG[TEXT.TEAM_DESTROYED] = "Tu equipo ha sido destruido", LANG[TEXT.LEFT_TEAM] = "Has dejado el equipo", LANG[TEXT.LEFT_TEAM2] = " dejo el equipo ", LANG[TEXT.TOKEN] = "Alguien te robó tu token :>", LANG[TEXT.CHOOSE] = "Elige un servidor", LANG[TEXT.PLAYERS] = "jugadores", LANG[TEXT.TOTAL_PLAYERS] = "total de jugadores", LANG[TEXT.TOTAL_MODE] = "Jugadores en este modo de juego", LANG[TEXT.COMMING_SOON] = "Próximamente...", document.getElementById("nickname_input").placeholder = "Apodo", DIE[0] = ["Has muerto por ninguna razón"], DIE[1] = ["Has muerto de hambre, como implica el nombre del juego dice"], DIE[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."], DIE[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."], DIE[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."], DIE[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."], DIE[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."], DIE[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"], DIE[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."], DIE[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."], DIE[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."], DIE[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."], DIE[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."], DIE[13] = ["Has muerto de sed, mejor bebe tu propia orina."], DIE[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."], DIE[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."], DIE[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."], DIE[17] = ["Tu piel se cayó, el sol te quemó."], DIE[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."], DIE[19] = ["Eres un vampiro, no te quedes cerca del ajo."], DIE[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"], DIE[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"]
    }, set_german = function() {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", LANG[TEXT.TWITTER] = " Share on Twitter", LANG[TEXT.FACEBOOK] = " Share on Facebook", LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", LANG[TEXT.POINTS] = "points", LANG[TEXT.SCORE] = "Score", LANG[TEXT.KILL] = "Kill", LANG[TEXT.DAYS_SURVIVED] = "Days survived", LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change", LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT", LANG[INV.HAND] = ["Hand"], LANG[INV.GROUND] = ["Boden", "Dreckig!"], LANG[INV.SAND] = ["Sand", "Ich habe es in meine Augen bekommen!"], LANG[INV.WOOD] = ["Holz", "Du kannst niemals zu viel haben!"], LANG[INV.STONE] = ["Stein", "Auch Fels gennant"], LANG[INV.GOLD] = ["Gold", "Sei großzügig, gib anderen etwas ab "], LANG[INV.DIAMOND] = ["Diamant", "Was wirst du daraus machen?"], LANG[INV.AMETHYST] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"], LANG[INV.FLOUR] = ["Mehl", "wird fürs Backen gebraucht"], LANG[INV.COOKIE] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"], LANG[INV.CAKE] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"], LANG[INV.MEAT] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"], LANG[INV.COOKED_MEAT] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"], LANG[INV.FOODFISH] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"], LANG[INV.FOODFISH_COOKED] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"], LANG[INV.BREAD] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"], LANG[INV.SANDWICH] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"], LANG[INV.CANDY] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"], LANG[INV.SUGAR_CAN] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"], LANG[INV.GARLAND] = ["Girlande", "perfekter Schmuck für Dächer"], LANG[INV.SEED] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"], LANG[INV.PLANT] = ["Beere", "Beeren lecker!", "Essen: 10"], LANG[INV.WHEAT_SEED] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"], LANG[INV.WILD_WHEAT] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"], LANG[INV.PUMPKIN_SEED] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"], LANG[INV.PUMPKIN] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"], LANG[INV.GARLIC_SEED] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"], LANG[INV.GARLIC] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"], LANG[INV.THORNBUSH_SEED] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"], LANG[INV.THORNBUSH] = ["Dornenbusch", "Es sticht!"], LANG[INV.PLOT] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"], LANG[INV.ICE] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"], LANG[INV.SPANNER] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"], LANG[INV.FUR_WOLF] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"], LANG[INV.FUR] = ["Hasenfell", "Der Hase war so süß..."], LANG[INV.SPECIAL_FUR] = ["Klares Fell", "Du bist eine Brotfabrik"], LANG[INV.SPECIAL_FUR_2] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"], LANG[INV.FUR_WINTER] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."], LANG[INV.SCALES] = ["Schuppen", "Es riecht wie Fisch!"], LANG[INV.KRAKEN_SKIN] = ["Kraken Haut", "Warst du nicht zu ängstlich?"], LANG[INV.FIRE] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"], LANG[INV.BIG_FIRE] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"], LANG[INV.WORKBENCH] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"], LANG[INV.CORD] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "], LANG[INV.BLUE_CORD] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"], LANG[INV.CHEST] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"], LANG[INV.SWORD_WOOD] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"], LANG[INV.SWORD] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"], LANG[INV.SWORD_GOLD] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"], LANG[INV.SWORD_DIAMOND] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"], LANG[INV.PIRATE_SWORD] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"], LANG[INV.SWORD_AMETHYST] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"], LANG[INV.DRAGON_SWORD] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"], LANG[INV.DRAGON_SPEAR] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"], LANG[INV.PICK_WOOD] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"], LANG[INV.PICK] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"], LANG[INV.PICK_GOLD] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"], LANG[INV.PICK_DIAMOND] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"], LANG[INV.PICK_AMETHYST] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"], LANG[INV.HAMMER] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"], LANG[INV.HAMMER_GOLD] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"], LANG[INV.HAMMER_DIAMOND] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"], LANG[INV.HAMMER_AMETHYST] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"], LANG[INV.SUPER_HAMMER] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"], LANG[INV.WOOD_SPEAR] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"], LANG[INV.SPEAR] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"], LANG[INV.GOLD_SPEAR] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"], LANG[INV.DIAMOND_SPEAR] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"], LANG[INV.AMETHYST_SPEAR] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"], LANG[INV.SHOVEL] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"], LANG[INV.SHOVEL_GOLD] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"], LANG[INV.SHOVEL_DIAMOND] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"], LANG[INV.SHOVEL_AMETHYST] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"], LANG[INV.WOOD_HELMET] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"], LANG[INV.STONE_HELMET] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"], LANG[INV.GOLD_HELMET] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"], LANG[INV.DIAMOND_HELMET] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"], LANG[INV.AMETHYST_HELMET] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"], LANG[INV.DRAGON_HELMET] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"], LANG[INV.EXPLORER_HAT] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"], LANG[INV.CHRISTMAS_HAT] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"], LANG[INV.ELF_HAT] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"], LANG[INV.HOOD] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"], LANG[INV.EARMUFFS] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"], LANG[INV.COAT] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"], LANG[INV.CAP_SCARF] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"], LANG[INV.PEASANT] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"], LANG[INV.WINTER_HOOD] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"], LANG[INV.WINTER_PEASANT] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"], LANG[INV.DIVING_MASK] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"], LANG[INV.SUPER_DIVING_SUIT] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"], LANG[INV.DRAGON_ORB] = ["Drachenkugel", "Erhalten bei abschließung der Quest"], LANG[INV.DRAGON_HEART] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."], LANG[INV.GEMME_GREEN] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"], LANG[INV.GEMME_ORANGE] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"], LANG[INV.GEMME_BLUE] = ["Blauer Edelstein", "Für sehr nette Leute"], LANG[INV.CROWN_GREEN] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"], LANG[INV.CROWN_ORANGE] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"], LANG[INV.CROWN_BLUE] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"], LANG[INV.BUCKET_FULL] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"], LANG[INV.BUCKET_EMPTY] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"], LANG[INV.BOTTLE_FULL] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"], LANG[INV.BOTTLE_EMPTY] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"], LANG[INV.WATERING_CAN] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"], LANG[INV.WATERING_CAN_FULL] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"], LANG[INV.BAG] = ["Rucksack", "Mehr Platz im Inventar!"], LANG[INV.PAPER] = ["Papier", "Wird fürs Büchermachen verwendet"], LANG[INV.BOOK] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"], LANG[INV.BANDAGE] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"], LANG[INV.LOCK] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"], LANG[INV.LOCKPICK] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"], LANG[INV.TOTEM] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"], LANG[INV.BRIDGE] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"], LANG[INV.SIGN] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"], LANG[INV.ROOF] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"], LANG[INV.WELL] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"], LANG[INV.WALL] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"], LANG[INV.STONE_WALL] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"], LANG[INV.GOLD_WALL] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"], LANG[INV.DIAMOND_WALL] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"], LANG[INV.AMETHYST_WALL] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"], LANG[INV.SPIKE] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"], LANG[INV.STONE_SPIKE] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"], LANG[INV.GOLD_SPIKE] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"], LANG[INV.DIAMOND_SPIKE] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"], LANG[INV.AMETHYST_SPIKE] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"], LANG[INV.WOOD_DOOR] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"], LANG[INV.STONE_DOOR] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"], LANG[INV.GOLD_DOOR] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"], LANG[INV.DIAMOND_DOOR] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"], LANG[INV.AMETHYST_DOOR] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"], LANG[INV.FURNACE] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"], LANG[INV.WINDMILL] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"], LANG[INV.BREAD_OVEN] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"], LANG[INV.RESURRECTION] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"], LANG[TEXT.YOU_CANNOT_JOIN] = "Du kannst diesem Server nicht beitreten", LANG[TEXT.KICKED] = "Gekickt: ", LANG[TEXT.KEY_ALREADY] = "Dein Schlüssel wurde bereits von jemand anderem benutzt", LANG[TEXT.KEY_WRONG] = "Dein Schlüssel ist falsch", LANG[TEXT.OLD_VERSION] = "Deine Version ist veraltet, säubere dein Cache", LANG[TEXT.NO_MORE_RESOURCES] = "Es gibt keine neuen Ressourcen", LANG[TEXT.SURVIVED_1DAY] = "Du hast einen Tag überlebt", LANG[TEXT.SURVIVED] = "Du hast überlebt ", LANG[TEXT.DAYS] = " Tage", LANG[TEXT.DEAD_SAD] = "Du bist gestorben ;-;", LANG[TEXT.SPAM_ME] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!", LANG[TEXT.SPAM_ME2] = "Server ist voll! Drücke immer wieder auf spielen!", LANG[TEXT.EMPTY] = "Ressource ist leer", LANG[TEXT.INV_FULL] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)", LANG[TEXT.DEAD] = " ist gestorben", LANG[TEXT.WRONG_TOOL] = "Das ist nicht das richtige Werkzeug", LANG[TEXT.JOIN_TEAM] = "Du bist einem Team beigetreten", LANG[TEXT.YOU_DEAD] = "Du bist gestorben", LANG[TEXT.JOINED_TEAM] = " ist dem Team beigetreten", LANG[TEXT.TEAM_DESTROYED] = "Dein Team wurde zerstört", LANG[TEXT.LEFT_TEAM] = "Du hast das Team verlassen", LANG[TEXT.LEFT_TEAM2] = " hat das Team verlassen", LANG[TEXT.TOKEN] = "Jemand hat dein Token gestohlen :>", LANG[TEXT.CHOOSE] = "Suche dir ein Server aus", LANG[TEXT.PLAYERS] = "Spieler", LANG[TEXT.TOTAL_PLAYERS] = "alle Spieler", LANG[TEXT.TOTAL_MODE] = "Spieler in diesem Modus", LANG[TEXT.COMMING_SOON] = "Bald verfügbar...", document.getElementById("nickname_input").placeholder = "Spitzname", DIE[0] = ["Du wurdest ohne Grund getötet"], DIE[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"], DIE[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."], DIE[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."], DIE[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."], DIE[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."], DIE[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."], DIE[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"], DIE[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."], DIE[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."], DIE[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."], DIE[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."], DIE[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."], DIE[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."], DIE[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."], DIE[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."], DIE[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."], DIE[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."], DIE[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "], DIE[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."], DIE[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"], DIE[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"]
    }, set_polish = function() {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME", LANG[TEXT.TWITTER] = " Share on Twitter", LANG[TEXT.FACEBOOK] = " Share on Facebook", LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points", LANG[TEXT.POINTS] = "points", LANG[TEXT.SCORE] = "Score", LANG[TEXT.KILL] = "Kill", LANG[TEXT.DAYS_SURVIVED] = "Days survived", LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change", LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change", LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"], LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"], LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"], LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quests", document.getElementById("timeremainingquest").innerHTML = "Time Remaining", document.getElementById("constraintquest").innerHTML = " Constraints", document.getElementById("claim_rewards").innerHTML = " Claim rewards", document.getElementById("rewardquest").innerHTML = " Reward", document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart", document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst", document.getElementById("survive20min_3").innerHTML = "Survive without losing life", document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests", document.getElementById("dont_hit_5").innerHTML = " Be peaceful", document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter", document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
        for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "CLAIM REWARD!";
        document.getElementById("quit_chronoquest").innerHTML = " QUIT", LANG[INV.HAND] = ["Ręka"], LANG[INV.GROUND] = ["Ziemia", "Brudna!"], LANG[INV.SAND] = ["Piasek", "Mam go w oczach!"], LANG[INV.WOOD] = ["Drewno", "Nie możesz mieć go wystarczająco!"], LANG[INV.STONE] = ["Kamień", "Także nazywany skałą"], LANG[INV.GOLD] = ["Złoto", "Bądź hojny, daj trochę innym"], LANG[INV.DIAMOND] = ["Diament", "Co z nim zrobisz?"], LANG[INV.AMETHYST] = ["Ametyst", "Jest Fiołkowy jak Lapa"], LANG[INV.FLOUR] = ["Mąka", "Używana w gotowaniu"], LANG[INV.COOKIE] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"], LANG[INV.CAKE] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"], LANG[INV.MEAT] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"], LANG[INV.COOKED_MEAT] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"], LANG[INV.FOODFISH] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"], LANG[INV.FOODFISH_COOKED] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"], LANG[INV.BREAD] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"], LANG[INV.SANDWICH] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"], LANG[INV.CANDY] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"], LANG[INV.SUGAR_CAN] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"], LANG[INV.GARLAND] = ["Girlanda", "Idealna do dekorowania dachów"], LANG[INV.SEED] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"], LANG[INV.PLANT] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"], LANG[INV.WHEAT_SEED] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"], LANG[INV.WILD_WHEAT] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"], LANG[INV.PUMPKIN_SEED] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"], LANG[INV.PUMPKIN] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"], LANG[INV.GARLIC_SEED] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"], LANG[INV.GARLIC] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"], LANG[INV.THORNBUSH_SEED] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"], LANG[INV.THORNBUSH] = ["Kolczasty krzew", "Kłuje!"], LANG[INV.PLOT] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"], LANG[INV.ICE] = ["Lód", "Użyteczny do robienia ciast i wody"], LANG[INV.SPANNER] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"], LANG[INV.FUR_WOLF] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"], LANG[INV.FUR] = ["Skóra królika", "Ten królik był taki słodziutki..."], LANG[INV.SPECIAL_FUR] = ["Skóra", "Jesteś fabryką chleba"], LANG[INV.SPECIAL_FUR_2] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"], LANG[INV.FUR_WINTER] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."], LANG[INV.SCALES] = ["Łuski", "Pachnie jak ryba!"], LANG[INV.KRAKEN_SKIN] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"], LANG[INV.FIRE] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"], LANG[INV.BIG_FIRE] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"], LANG[INV.WORKBENCH] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"], LANG[INV.CORD] = ["Nić", "Używany w tworzeniu czapek i plecaków"], LANG[INV.BLUE_CORD] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"], LANG[INV.CHEST] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"], LANG[INV.SWORD_WOOD] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"], LANG[INV.SWORD] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"], LANG[INV.SWORD_GOLD] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"], LANG[INV.SWORD_DIAMOND] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"], LANG[INV.PIRATE_SWORD] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"], LANG[INV.SWORD_AMETHYST] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"], LANG[INV.DRAGON_SWORD] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"], LANG[INV.DRAGON_SPEAR] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"], LANG[INV.PICK_WOOD] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"], LANG[INV.PICK] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"], LANG[INV.PICK_GOLD] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"], LANG[INV.PICK_DIAMOND] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"], LANG[INV.PICK_AMETHYST] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"], LANG[INV.HAMMER] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"], LANG[INV.HAMMER_GOLD] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"], LANG[INV.HAMMER_DIAMOND] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"], LANG[INV.HAMMER_AMETHYST] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"], LANG[INV.SUPER_HAMMER] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"], LANG[INV.WOOD_SPEAR] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"], LANG[INV.SPEAR] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"], LANG[INV.GOLD_SPEAR] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"], LANG[INV.DIAMOND_SPEAR] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"], LANG[INV.AMETHYST_SPEAR] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"], LANG[INV.SHOVEL] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"], LANG[INV.SHOVEL_GOLD] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"], LANG[INV.SHOVEL_DIAMOND] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"], LANG[INV.SHOVEL_AMETHYST] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"], LANG[INV.WOOD_HELMET] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"], LANG[INV.STONE_HELMET] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"], LANG[INV.GOLD_HELMET] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"], LANG[INV.DIAMOND_HELMET] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"], LANG[INV.AMETHYST_HELMET] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"], LANG[INV.DRAGON_HELMET] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"], LANG[INV.EXPLORER_HAT] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"], LANG[INV.CHRISTMAS_HAT] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"], LANG[INV.ELF_HAT] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"], LANG[INV.HOOD] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"], LANG[INV.EARMUFFS] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"], LANG[INV.COAT] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"], LANG[INV.CAP_SCARF] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"], LANG[INV.PEASANT] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"], LANG[INV.WINTER_HOOD] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"], LANG[INV.WINTER_PEASANT] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"], LANG[INV.DIVING_MASK] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"], LANG[INV.SUPER_DIVING_SUIT] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"], LANG[INV.DRAGON_ORB] = ["Smocza kula", "Zdobyta podczas zadania"], LANG[INV.DRAGON_HEART] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"], LANG[INV.GEMME_GREEN] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"], LANG[INV.GEMME_ORANGE] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"], LANG[INV.GEMME_BLUE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"], LANG[INV.CROWN_GREEN] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"], LANG[INV.CROWN_ORANGE] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"], LANG[INV.CROWN_BLUE] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"], LANG[INV.BUCKET_FULL] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"], LANG[INV.BUCKET_EMPTY] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"], LANG[INV.BOTTLE_FULL] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"], LANG[INV.BOTTLE_EMPTY] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"], LANG[INV.WATERING_CAN] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"], LANG[INV.WATERING_CAN_FULL] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"], LANG[INV.BAG] = ["Plecak", "Więcej miejsca na twoje przedmioty!"], LANG[INV.PAPER] = ["Papier", "Używany w tworzeniu książki"], LANG[INV.BOOK] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"], LANG[INV.BANDAGE] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"], LANG[INV.LOCK] = ["Zamek", "Pozwala ci zamknąć skrzynię"], LANG[INV.LOCKPICK] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"], LANG[INV.TOTEM] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"], LANG[INV.BRIDGE] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"], LANG[INV.SIGN] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"], LANG[INV.ROOF] = ["Dach", "Trochę cie ogrzewa i chowa!"], LANG[INV.WELL] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"], LANG[INV.WALL] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"], LANG[INV.STONE_WALL] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"], LANG[INV.GOLD_WALL] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"], LANG[INV.DIAMOND_WALL] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"], LANG[INV.AMETHYST_WALL] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"], LANG[INV.SPIKE] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"], LANG[INV.STONE_SPIKE] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"], LANG[INV.GOLD_SPIKE] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"], LANG[INV.DIAMOND_SPIKE] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"], LANG[INV.AMETHYST_SPIKE] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"], LANG[INV.WOOD_DOOR] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"], LANG[INV.STONE_DOOR] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"], LANG[INV.GOLD_DOOR] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"], LANG[INV.DIAMOND_DOOR] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"], LANG[INV.AMETHYST_DOOR] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"], LANG[INV.FURNACE] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"], LANG[INV.WINDMILL] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"], LANG[INV.BREAD_OVEN] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"], LANG[INV.RESURRECTION] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"], LANG[TEXT.YOU_CANNOT_JOIN] = "Nie możesz dołączyć do tego serwera", LANG[TEXT.KICKED] = "Wyrzucony: ", LANG[TEXT.KEY_ALREADY] = "Twój klucz jest aktualnie używany przez innego gracza", LANG[TEXT.KEY_WRONG] = "Twój klucz jest nieprawidłowy", LANG[TEXT.OLD_VERSION] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć", LANG[TEXT.NO_MORE_RESOURCES] = "Nie ma nowych minerałów, zwierząt, i jedzenia", LANG[TEXT.SURVIVED_1DAY] = "Przeżyłeś 1 dzień", LANG[TEXT.SURVIVED] = "Przeżyłeś ", LANG[TEXT.DAYS] = " dni", LANG[TEXT.DEAD_SAD] = "Jesteś martwy ;-;", LANG[TEXT.SPAM_ME] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...", LANG[TEXT.SPAM_ME2] = "Serwer jest pełny! Spamuj przycisk zagraj!", LANG[TEXT.EMPTY] = "Źródło jest puste", LANG[TEXT.INV_FULL] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)", LANG[TEXT.DEAD] = " jest martwy", LANG[TEXT.WRONG_TOOL] = "To nie jest właściwe narzędzie", LANG[TEXT.JOIN_TEAM] = "Dołączyłeś do drużyny", LANG[TEXT.YOU_DEAD] = "Jesteś martwy", LANG[TEXT.JOINED_TEAM] = " dołączył do drużyny", LANG[TEXT.TEAM_DESTROYED] = "Twoja drużyna została zniszczona", LANG[TEXT.LEFT_TEAM] = " Opuściłeś drużynę", LANG[TEXT.LEFT_TEAM2] = " opuścił drużynę", LANG[TEXT.TOKEN] = "Ktoś ukradł twój żeton :>", LANG[TEXT.CHOOSE] = "Wybierz serwer", LANG[TEXT.PLAYERS] = "graczy", LANG[TEXT.TOTAL_PLAYERS] = "wszystkich graczy", LANG[TEXT.TOTAL_MODE] = "graczy w tym trybie", LANG[TEXT.COMMING_SOON] = "Już wkrótce...", document.getElementById("nickname_input").placeholder = "Przydomek", DIE[0] = ["Zostałeś zabity bez powodu"], DIE[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"], DIE[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."], DIE[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."], DIE[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."], DIE[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."], DIE[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."], DIE[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"], DIE[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."], DIE[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."], DIE[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."], DIE[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."], DIE[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."], DIE[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."], DIE[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."], DIE[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."], DIE[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."], DIE[17] = ["Twoja skóra odpada, słońce cię zabija."], DIE[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."], DIE[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."], DIE[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"], DIE[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"]
    }, set_french = function() {
        LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"], DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."], LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"], LANG[TEXT.BACK_TO_THE_GAME] = " RETOUR AU JEU", LANG[TEXT.TWITTER] = " Partage sur Twitter", LANG[TEXT.FACEBOOK] = " Partage sur Facebook", LANG[TEXT.KIT_NEXT] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points", LANG[TEXT.POINTS] = "points", LANG[TEXT.SCORE] = "Score", LANG[TEXT.KILL] = "Tués", LANG[TEXT.DAYS_SURVIVED] = "Jours survécus", LANG[TEXT.MODE_FREE] = "Mode de construction: Libre. Appuie sur G pour changer", LANG[TEXT.MODE_GRID] = "Mode de construction: Grille. Appuie sur G pour changer", LANG[INV.CRAB_LOOT] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"], LANG[INV.CRAB_SPEAR] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"], LANG[INV.CROWN_CRAB] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"], LANG[INV.BED] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"], document.getElementById("typequest").innerHTML = "Chrono Quêtes", document.getElementById("timeremainingquest").innerHTML = "Temps Restant", document.getElementById("constraintquest").innerHTML = " Contraintes", document.getElementById("claim_rewards").innerHTML = " Résultat", document.getElementById("rewardquest").innerHTML = " Récompenses", document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave", document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste", document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie", document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor", document.getElementById("dont_hit_5").innerHTML = " Sois pacifique", document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière", document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
        for (var e = 0; e < 7; e++) document.getElementById("claim_reward_" + e).innerHTML = "RÉCOMPENSE!";
        document.getElementById("quit_chronoquest").innerHTML = " QUITTER", LANG[INV.HAND] = ["Main"], LANG[INV.GROUND] = ["Terre", "C'est sale!"], LANG[INV.SAND] = ["Sable", "J'en ai dans les yeux"], LANG[INV.WOOD] = ["Bois", "Tu n'en auras jamais trop!"], LANG[INV.STONE] = ["Pierre", "Aussi appelée roche"], LANG[INV.GOLD] = ["Or", "Sois généreux, donne en aux autres"], LANG[INV.DIAMOND] = ["Diamant", "Comme tes yeux! wesh"], LANG[INV.AMETHYST] = ["Améthyste", "C'est Mauve comme Lapa"], LANG[INV.FLOUR] = ["Farine", "Utile pour la cuisine"], LANG[INV.COOKIE] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"], LANG[INV.CAKE] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"], LANG[INV.MEAT] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"], LANG[INV.COOKED_MEAT] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"], LANG[INV.FOODFISH] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"], LANG[INV.FOODFISH_COOKED] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"], LANG[INV.BREAD] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"], LANG[INV.SANDWICH] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"], LANG[INV.CANDY] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"], LANG[INV.SUGAR_CAN] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"], LANG[INV.GARLAND] = ["Guirlandes", "Utilisable sur les toits"], LANG[INV.SEED] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"], LANG[INV.PLANT] = ["Baies", "Peu nourrissant", "Nourriture: 10"], LANG[INV.WHEAT_SEED] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"], LANG[INV.WILD_WHEAT] = ["Blé", "Peut être transformé en farine dans les moulins"], LANG[INV.PUMPKIN_SEED] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"], LANG[INV.PUMPKIN] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"], LANG[INV.GARLIC_SEED] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"], LANG[INV.GARLIC] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"], LANG[INV.THORNBUSH_SEED] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"], LANG[INV.THORNBUSH] = ["Ronces", "Ça pique!"], LANG[INV.PLOT] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"], LANG[INV.ICE] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"], LANG[INV.SPANNER] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"], LANG[INV.FUR_WOLF] = ["Peau de loup", "Il était où le gentil ti Youki?"], LANG[INV.FUR] = ["Peau de lapin", "Vous êtes un monstre"], LANG[INV.SPECIAL_FUR] = ["Fourrure blanche", "Tu es une usine à pain"], LANG[INV.SPECIAL_FUR_2] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"], LANG[INV.FUR_WINTER] = ["Fourrure d'hiver", "Il voulait juste un calin"], LANG[INV.SCALES] = ["Écailles", "Ça sent le poisson!"], LANG[INV.KRAKEN_SKIN] = ["Peau du kraken", "Tu n'as pas eu trop peur?"], LANG[INV.FIRE] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"], LANG[INV.BIG_FIRE] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"], LANG[INV.WORKBENCH] = ["Établi", "Utile pour fabriquer toute sorte d'objets"], LANG[INV.CORD] = ["Fil", "Utile pour faire des chapeaux et un sac"], LANG[INV.BLUE_CORD] = ["Fil de diamant", "Utile pour faire des chapeaux"], LANG[INV.CHEST] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"], LANG[INV.SWORD_WOOD] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"], LANG[INV.SWORD] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"], LANG[INV.SWORD_GOLD] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"], LANG[INV.SWORD_DIAMOND] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"], LANG[INV.PIRATE_SWORD] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"], LANG[INV.SWORD_AMETHYST] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"], LANG[INV.DRAGON_SWORD] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"], LANG[INV.DRAGON_SPEAR] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"], LANG[INV.PICK_WOOD] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"], LANG[INV.PICK] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"], LANG[INV.PICK_GOLD] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"], LANG[INV.PICK_DIAMOND] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"], LANG[INV.PICK_AMETHYST] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"], LANG[INV.HAMMER] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"], LANG[INV.HAMMER_GOLD] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"], LANG[INV.HAMMER_DIAMOND] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"], LANG[INV.HAMMER_AMETHYST] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"], LANG[INV.SUPER_HAMMER] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"], LANG[INV.WOOD_SPEAR] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"], LANG[INV.SPEAR] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"], LANG[INV.GOLD_SPEAR] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"], LANG[INV.DIAMOND_SPEAR] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"], LANG[INV.AMETHYST_SPEAR] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"], LANG[INV.SHOVEL] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"], LANG[INV.SHOVEL_GOLD] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"], LANG[INV.SHOVEL_DIAMOND] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"], LANG[INV.SHOVEL_AMETHYST] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"], LANG[INV.WOOD_HELMET] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"], LANG[INV.STONE_HELMET] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"], LANG[INV.GOLD_HELMET] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"], LANG[INV.DIAMOND_HELMET] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"], LANG[INV.AMETHYST_HELMET] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"], LANG[INV.DRAGON_HELMET] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"], LANG[INV.EXPLORER_HAT] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"], LANG[INV.CHRISTMAS_HAT] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"], LANG[INV.ELF_HAT] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"], LANG[INV.HOOD] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"], LANG[INV.EARMUFFS] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"], LANG[INV.COAT] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"], LANG[INV.CAP_SCARF] = ["Bonnet d'hiver", "Très confortable", "Très chaud"], LANG[INV.PEASANT] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"], LANG[INV.WINTER_HOOD] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"], LANG[INV.WINTER_PEASANT] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"], LANG[INV.DIVING_MASK] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"], LANG[INV.SUPER_DIVING_SUIT] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"], LANG[INV.DRAGON_ORB] = ["Orbe du Dragon", "Donné en Quête"], LANG[INV.DRAGON_HEART] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"], LANG[INV.GEMME_GREEN] = ["Gemme verte", "Tu n'as pas triché, promis?"], LANG[INV.GEMME_ORANGE] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"], LANG[INV.GEMME_BLUE] = ["Gemme bleue", "Pour les gens trop gentils"], LANG[INV.CROWN_GREEN] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"], LANG[INV.CROWN_ORANGE] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"], LANG[INV.CROWN_BLUE] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"], LANG[INV.BUCKET_FULL] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"], LANG[INV.BUCKET_EMPTY] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"], LANG[INV.BOTTLE_FULL] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"], LANG[INV.BOTTLE_EMPTY] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"], LANG[INV.WATERING_CAN] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"], LANG[INV.WATERING_CAN_FULL] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"], LANG[INV.BAG] = ["Sac", "Plus de place dans ton inventaire!"], LANG[INV.PAPER] = ["Papier", "Pour fabriquer toute sorte d'objets"], LANG[INV.BOOK] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"], LANG[INV.BANDAGE] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"], LANG[INV.LOCK] = ["Cadenas", "Pour verrouiller un coffre"], LANG[INV.LOCKPICK] = ["Clé", "Pour déverrouiller un coffre"], LANG[INV.TOTEM] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"], LANG[INV.BRIDGE] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"], LANG[INV.SIGN] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"], LANG[INV.ROOF] = ["Toit", "Te cache un peu et te réchauffe"], LANG[INV.WELL] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"], LANG[INV.WALL] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"], LANG[INV.STONE_WALL] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"], LANG[INV.GOLD_WALL] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"], LANG[INV.DIAMOND_WALL] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"], LANG[INV.AMETHYST_WALL] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"], LANG[INV.SPIKE] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"], LANG[INV.STONE_SPIKE] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"], LANG[INV.GOLD_SPIKE] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"], LANG[INV.DIAMOND_SPIKE] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"], LANG[INV.AMETHYST_SPIKE] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"], LANG[INV.WOOD_DOOR] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"], LANG[INV.STONE_DOOR] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"], LANG[INV.GOLD_DOOR] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"], LANG[INV.DIAMOND_DOOR] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"], LANG[INV.AMETHYST_DOOR] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"], LANG[INV.FURNACE] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"], LANG[INV.WINDMILL] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"], LANG[INV.BREAD_OVEN] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"], LANG[INV.RESURRECTION] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"], LANG[TEXT.YOU_CANNOT_JOIN] = "Tu ne peux pas rejoindre le serveur", LANG[TEXT.KICKED] = "Expulsé: ", LANG[TEXT.KEY_ALREADY] = "Ta clé est déjà utilisée par quelqu'un d'autre", LANG[TEXT.KEY_WRONG] = "Ta clé est fausse", LANG[TEXT.OLD_VERSION] = "Tu as une vieille version, rafraichis tes caches", LANG[TEXT.NO_MORE_RESOURCES] = "Il n'y a plus de nouvelles ressources", LANG[TEXT.SURVIVED_1DAY] = "Tu as survécu 1 jour", LANG[TEXT.SURVIVED] = "Tu as survécu ", LANG[TEXT.DAYS] = " jours", LANG[TEXT.DEAD_SAD] = "Tu es mort ;-;", LANG[TEXT.SPAM_ME] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!", LANG[TEXT.SPAM_ME2] = "Le serveur est complet! Spam le bouton jouer", LANG[TEXT.EMPTY] = "Cette ressource est vide", LANG[TEXT.INV_FULL] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)", LANG[TEXT.DEAD] = " est mort", LANG[TEXT.WRONG_TOOL] = "Ce n'est pas le bon outil", LANG[TEXT.JOIN_TEAM] = "Tu as rejoins une équipe", LANG[TEXT.YOU_DEAD] = "Tu es mort", LANG[TEXT.JOINED_TEAM] = " a rejoint l'équipe", LANG[TEXT.TEAM_DESTROYED] = "Ton équipe a été détruite", LANG[TEXT.LEFT_TEAM] = "Tu as quitté l'équipe", LANG[TEXT.LEFT_TEAM2] = " a quitté l'équipe", LANG[TEXT.TOKEN] = "Quelqu'un a volé ton token :>", LANG[TEXT.CHOOSE] = "Choisis un serveur", LANG[TEXT.PLAYERS] = "joueurs", LANG[TEXT.TOTAL_PLAYERS] = "joueurs", LANG[TEXT.TOTAL_MODE] = "joueurs dans ce mode", LANG[TEXT.COMMING_SOON] = "Bientôt...", document.getElementById("nickname_input").placeholder = "Surnom", DIE[0] = ["Tu as été tué sans raison particulière, juste comme ça"], DIE[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"], DIE[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"], DIE[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"], DIE[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"], DIE[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."], DIE[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."], DIE[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"], DIE[8] = ["Cet ours voulait juste un câlin."], DIE[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."], DIE[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"], DIE[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."], DIE[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."], DIE[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"], DIE[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"], DIE[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."], DIE[16] = ["Un kraken a 'kraké' tes os."], DIE[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."], DIE[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."], DIE[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."], DIE[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"], DIE[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."], ZOMBIE_GRUMBLE = "Uuunnnggg", ZOMBIE_GRUMBLES = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"]
    }, LANG = [], i = 0; i < COUNTER; i++) LANG[i] = "";
var DIE = [];
$(".md-languages").on("click", (function() {
    $(this).toggleClass("active")
})), $(".md-languages ul li").on("click", (function() {
    var e = $(this).text();
    "English" === e ? set_english() : "Français" === e ? set_french() : "Deutsch" === e ? set_german() : "Español" === e ? set_spanish() : "Português" === e ? set_portuguese() : "Русский" === e ? set_russian() : "Polski" === e && set_polish(), INFO_BOX = [], user.craft.label = [], $(".md-languages ul li").removeClass("active"), $(this).addClass("active"), $(".md-languages label button").text(e)
}));
lang = "EN";
var next_lang, userlang = navigator.language || navigator.userLanguage;
switch (userlang) {
    case "ru":
        lang = "RU";
        break;
    case "en":
        lang = "EN";
        break;
    case "es":
        lang = "SP";
        break;
    case "fr":
        lang = "FR";
        break;
    case "pl":
        lang = "PL";
        break;
    case "de":
        lang = "DE";
        break;
    case "pt":
        lang = "PT"
}
for (var i in "FR" === lang ? ($(".md-languages label button").text("Français"), next_lang = set_french) : "PL" === lang ? ($(".md-languages label button").text("Polski"), next_lang = set_polish) : "PT" === lang ? ($(".md-languages label button").text("Português"), next_lang = set_portuguese) : "SP" === lang ? ($(".md-languages label button").text("Español"), next_lang = set_spanish) : "RU" === lang ? ($(".md-languages label button").text("Русский"), next_lang = set_russian) : "DE" === lang ? ($(".md-languages label button").text("Deutsch"), next_lang = set_german) : ($(".md-languages label button").text("English"), next_lang = set_english), IMAGES = {
        LOGO: "img/logo.png",
        BIGDAY: "img/mapday.png",
        BIGNIGHT: "img/mapnight.png",
        BIGZDAY: "img/bigzday.png",
        BIGZNIGHT: "img/bigznight.png",
        MAPDAY_RIVER: "img/bigday-river1.png",
        MAPDAY_LAKE: "img/bigday-lake.png",
        MAPDAY_BERRY: "img/bigday-berry.png",
        MAPDAY_STONE1: "img/bigday-stone1.png",
        MAPDAY_STONE2: "img/bigday-stone2.png",
        MAPDAY_GOLD1: "img/bigday-gold1.png",
        MAPDAY_GOLD2: "img/bigday-gold2.png",
        MAPDAY_EMERALD1: "img/bigday-emerald1.png",
        MAPDAY_EMERALD2: "img/bigday-emerald2.png",
        MAPDAY_AMETHYST: "img/bigday-amethyst.png",
        MAPDAY_BEAR: "img/bigday-bear.png",
        MAPDAY_CAVE: "img/bigday-cave.png",
        MAPDAY_DIAMOND: "img/bigday-diamond.png",
        MAPDAY_ISLAND: "img/bigday-island.png",
        MAPDAY_REIDITE: "img/bigday-reidite.png",
        MAPDAY_SPIDER: "img/bigday-spider.png",
        MAPDAY_WOLF: "img/bigday-wolf.png",
        MAPDAY_FIR_TREE: "img/bigday-fir-tree.png",
        MAPDAY_FOX: "img/bigday-fox.png",
        MAPDAY_KRAKEN: "img/bigday-kraken.png",
        MAPDAY_PIRANHA: "img/bigday-piranha.png",
        MAPDAY_CACTUS: "img/bigday-cactus.png",
        MAPDAY_MAGMA: "img/bigday-magma.png",
        MAPNIGHT_RIVER: "img/bigday-river1.png",
        MAPNIGHT_LAKE: "img/bignight-lake.png",
        MAPNIGHT_BERRY: "img/bignight-berry.png",
        MAPNIGHT_STONE1: "img/bignight-stone1.png",
        MAPNIGHT_STONE2: "img/bignight-stone2.png",
        MAPNIGHT_GOLD1: "img/bignight-gold1.png",
        MAPNIGHT_GOLD2: "img/bignight-gold2.png",
        MAPNIGHT_EMERALD1: "img/bignight-emerald1.png",
        MAPNIGHT_EMERALD2: "img/bignight-emerald2.png",
        MAPNIGHT_AMETHYST: "img/bignight-amethyst.png",
        MAPNIGHT_BEAR: "img/bignight-bear.png",
        MAPNIGHT_CAVE: "img/bignight-cave.png",
        MAPNIGHT_DIAMOND: "img/bignight-diamond.png",
        MAPNIGHT_ISLAND: "img/bignight-island.png",
        MAPNIGHT_REIDITE: "img/bignight-reidite.png",
        MAPNIGHT_SPIDER: "img/bignight-spider.png",
        MAPNIGHT_WOLF: "img/bignight-wolf.png",
        MAPNIGHT_FIR_TREE: "img/bignight-fir-tree.png",
        MAPNIGHT_FOX: "img/bignight-fox.png",
        MAPNIGHT_KRAKEN: "img/bignight-kraken.png",
        MAPNIGHT_PIRANHA: "img/bignight-piranha.png",
        MAPNIGHT_CACTUS: "img/bignight-cactus.png",
        MAPNIGHT_MAGMA: "img/bignight-magma.png",
        MAPDAY_DESERT: "img/bigday-desert.png",
        MAPDAY_WINTER: "img/bigday-winter.png",
        MAPDAY_LAVA: "img/bigday-lava.png",
        MAPDAY_FOREST: "img/bigday-forest.png",
        MAPNIGHT_DESERT: "img/bignight-desert.png",
        MAPNIGHT_WINTER: "img/bignight-winter.png",
        MAPNIGHT_LAVA: "img/bignight-lava.png",
        MAPNIGHT_FOREST: "img/bignight-forest.png",
        RIVER_WAVED: "img/day-river-wave.png",
        RIVER_WAVEN: "img/night-river-wave.png",
        FOG0D: "img/day-fog0.png",
        FOG1D: "img/day-fog1.png",
        FOG2D: "img/day-fog2.png",
        FOG0N: "img/night-fog0.png",
        FOG1N: "img/night-fog1.png",
        FOG2N: "img/night-fog2.png",
        FOD0D: "img/day-fogdesert0.png",
        FOD1D: "img/day-fogdesert1.png",
        FOD2D: "img/day-fogdesert2.png",
        FOD0N: "img/night-fogdesert0.png",
        FOD1N: "img/night-fogdesert1.png",
        FOD2N: "img/night-fogdesert2.png",
        MARKER0D: "img/day-cross-server.png",
        MARKER1D: "img/day-here-server.png",
        MARKER2D: "img/day-finish-server.png",
        MARKER3D: "img/day-item-server.png",
        MARKER0N: "img/night-cross-server.png",
        MARKER1N: "img/night-here-server.png",
        MARKER2N: "img/night-finish-server.png",
        MARKER3N: "img/night-item-server.png",
        REIDITE0D: "img/day-reidite0.png",
        REIDITE0N: "img/night-reidite0.png",
        REIDITE1D: "img/day-reidite1.png",
        REIDITE1N: "img/night-reidite1.png",
        REIDITE2D: "img/day-reidite2.png",
        REIDITE2N: "img/night-reidite2.png",
        MAGMA1D: "img/day-lava1.png",
        MAGMA1N: "img/night-lava1.png",
        MAGMA2D: "img/day-lava2.png",
        MAGMA2N: "img/night-lava2.png",
        MAGMA3D: "img/day-lava3.png",
        MAGMA3N: "img/night-lava3.png",
        MAGMA4D: "img/day-lava4.png",
        MAGMA4N: "img/night-lava4.png",
        MAGMA5D: "img/day-lava5.png",
        MAGMA5N: "img/night-lava5.png",
        MAGMA6D: "img/day-lava6.png",
        MAGMA6N: "img/night-lava6.png",
        LAVA_GROUND1D: "img/day-lava-ground1.png",
        LAVA_GROUND1N: "img/night-lava-ground1.png",
        LAVA_GROUND2D: "img/day-lava-ground2.png",
        LAVA_GROUND2N: "img/night-lava-ground2.png",
        LAVA_GROUND3D: "img/day-lava-ground3.png",
        LAVA_GROUND3N: "img/night-lava-ground3.png",
        LAVA_GROUND4D: "img/day-lava-ground4.png",
        LAVA_GROUND4N: "img/night-lava-ground4.png",
        LAVA_GROUND5D: "img/day-lava-ground5.png",
        LAVA_GROUND5N: "img/night-lava-ground5.png",
        LAVA_GROUND6D: "img/day-lava-ground6.png",
        LAVA_GROUND6N: "img/night-lava-ground6.png",
        FIRE_MOBD: "img/day-fire-mob.png",
        FIRE_MOBN: "img/night-fire-mob.png",
        FIRE_MOB_HURT: "img/hurt-fire-mob.png",
        DIAMOND_PROTECTIOND: "img/day-diamond-protection.png",
        DIAMOND_PROTECTIONN: "img/night-diamond-protection.png",
        HAND_DIAMOND_PROTECTIOND: "img/day-hand-diamond-protection.png",
        HAND_DIAMOND_PROTECTIONN: "img/night-hand-diamond-protection.png",
        INV_DIAMOND_PROTECTION_OUT: "img/inv-diamond-protection-out.png",
        INV_DIAMOND_PROTECTION_IN: "img/inv-diamond-protection-in.png",
        INV_DIAMOND_PROTECTION_CLICK: "img/inv-diamond-protection-click.png",
        AMETHYST_PROTECTIOND: "img/day-amethyst-protection.png",
        AMETHYST_PROTECTIONN: "img/night-amethyst-protection.png",
        HAND_AMETHYST_PROTECTIOND: "img/day-hand-amethyst-protection.png",
        HAND_AMETHYST_PROTECTIONN: "img/night-hand-amethyst-protection.png",
        INV_AMETHYST_PROTECTION_OUT: "img/inv-amethyst-protection-out.png",
        INV_AMETHYST_PROTECTION_IN: "img/inv-amethyst-protection-in.png",
        INV_AMETHYST_PROTECTION_CLICK: "img/inv-amethyst-protection-click.png",
        REIDITE_SWORDD: "img/day-reidite-sword.png",
        REIDITE_SWORDN: "img/night-reidite-sword.png",
        INV_REIDITE_SWORD_OUT: "img/inv-reidite-sword-out.png",
        INV_REIDITE_SWORD_IN: "img/inv-reidite-sword-in.png",
        INV_REIDITE_SWORD_CLICK: "img/inv-reidite-sword-click.png",
        INV_REIDITE_OUT: "img/inv-reidite-out.png",
        INV_REIDITE_IN: "img/inv-reidite-in.png",
        INV_REIDITE_CLICK: "img/inv-reidite-click.png",
        INV_FLAME_OUT: "img/inv-flame-out.png",
        INV_FLAME_IN: "img/inv-flame-in.png",
        INV_FLAME_CLICK: "img/inv-flame-click.png",
        LAVA_BUBLE0D: "img/day-magma-buble0.png",
        LAVA_BUBLE0N: "img/night-magma-buble0.png",
        LAVA_BUBLE1D: "img/day-magma-buble1.png",
        LAVA_BUBLE1N: "img/night-magma-buble1.png",
        LAVA_BUBLE2D: "img/day-magma-buble2.png",
        LAVA_BUBLE2N: "img/night-magma-buble2.png",
        LAVA_DRAGOND: "img/day-lava-dragon.png",
        LAVA_DRAGONN: "img/night-lava-dragon.png",
        LAVA_FIRE_DRAGOND: "img/day-fire-dragon.png",
        LAVA_FIRE_DRAGONN: "img/night-fire-dragon.png",
        HURT_LAVA_DRAGON: "img/hurt-lava-dragon.png",
        LAVA_WING_LEFTD: "img/day-lava-wing-left.png",
        LAVA_WING_LEFTN: "img/night-lava-wing-left.png",
        LAVA_WING_RIGHTD: "img/day-lava-wing-right.png",
        LAVA_WING_RIGHTN: "img/night-lava-wing-right.png",
        HURT_LAVA_WING_LEFT: "img/hurt-lava-wing-left.png",
        HURT_LAVA_WING_RIGHT: "img/hurt-lava-wing-right.png",
        REIDITE_SPEARD: "img/day-reidite-spear.png",
        REIDITE_SPEARN: "img/night-reidite-spear.png",
        INV_REIDITE_SPEAR_OUT: "img/inv-reidite-spear-out.png",
        INV_REIDITE_SPEAR_IN: "img/inv-reidite-spear-in.png",
        INV_REIDITE_SPEAR_CLICK: "img/inv-reidite-spear-click.png",
        REIDITE_HELMETD: "img/day-reidite-helmet.png",
        REIDITE_HELMETN: "img/night-reidite-helmet.png",
        INV_REIDITE_HELMET_OUT: "img/inv-reidite-helmet-out.png",
        INV_REIDITE_HELMET_IN: "img/inv-reidite-helmet-in.png",
        INV_REIDITE_HELMET_CLICK: "img/inv-reidite-helmet-click.png",
        HAND_REIDITE_PROTECTIOND: "img/day-hand-reidite-protection.png",
        HAND_REIDITE_PROTECTIONN: "img/night-hand-reidite-protection.png",
        REIDITE_PROTECTIOND: "img/day-reidite-protection.png",
        REIDITE_PROTECTIONN: "img/night-reidite-protection.png",
        INV_REIDITE_PROTECTION_OUT: "img/inv-reidite-protection-out.png",
        INV_REIDITE_PROTECTION_IN: "img/inv-reidite-protection-in.png",
        INV_REIDITE_PROTECTION_CLICK: "img/inv-reidite-protection-click.png",
        LAVA_SWORDD: "img/day-lava-dragon-sword.png",
        LAVA_SWORDN: "img/night-lava-dragon-sword.png",
        INV_LAVA_SWORD_OUT: "img/inv-lava-dragon-sword-out.png",
        INV_LAVA_SWORD_IN: "img/inv-lava-dragon-sword-in.png",
        INV_LAVA_SWORD_CLICK: "img/inv-lava-dragon-sword-click.png",
        LAVA_SPEARD: "img/day-lava-spear.png",
        LAVA_SPEARN: "img/night-lava-spear.png",
        INV_LAVA_SPEAR_OUT: "img/inv-lava-spear-out.png",
        INV_LAVA_SPEAR_IN: "img/inv-lava-spear-in.png",
        INV_LAVA_SPEAR_CLICK: "img/inv-lava-spear-click.png",
        LAVA_HELMETD: "img/day-lava-helmet.png",
        LAVA_HELMETN: "img/night-lava-helmet.png",
        INV_LAVA_HELMET_OUT: "img/inv-lava-helmet-out.png",
        INV_LAVA_HELMET_IN: "img/inv-lava-helmet-in.png",
        INV_LAVA_HELMET_CLICK: "img/inv-lava-helmet-click.png",
        WITCHD: "img/day-witch-hat.png",
        WITCHN: "img/night-witch-hat.png",
        INV_WITCH_OUT: "img/inv-witch-hat-out.png",
        INV_WITCH_IN: "img/inv-witch-hat-in.png",
        INV_WITCH_CLICK: "img/inv-witch-hat-click.png",
        NIMBUSD: "img/day-nimbus2000.png",
        NIMBUSN: "img/night-nimbus2000.png",
        INV_NIMBUS_OUT: "img/inv-nimbus2000-out.png",
        INV_NIMBUS_IN: "img/inv-nimbus2000-in.png",
        INV_NIMBUS_CLICK: "img/inv-nimbus2000-click.png",
        ACCESSORY1D: "img/day-accessory1-pacques.png",
        ACCESSORY1N: "img/night-accessory1-pacques.png",
        ACCESSORY2D: "img/day-accessory2-pacques.png",
        ACCESSORY2N: "img/night-accessory2-pacques.png",
        ACCESSORY3D: "img/day-accessory3-pacques.png",
        ACCESSORY3N: "img/night-accessory3-pacques.png",
        ACCESSORY5D: "img/day-accessory5-pacques.png",
        ACCESSORY5N: "img/night-accessory5-pacques.png",
        ACCESSORY6D: "img/day-accessory6-pacques.png",
        ACCESSORY6N: "img/night-accessory6-pacques.png",
        ACCESSORY7D: "img/day-accessory7-pacques.png",
        ACCESSORY7N: "img/night-accessory7-pacques.png",
        ACCESSORY8D: "img/day-accessory8-pacques.png",
        ACCESSORY8N: "img/night-accessory8-pacques.png",
        BAG_EASTERD: "img/day-bag-pacques.png",
        BAG_EASTERN: "img/night-bag-pacques.png",
        CARROTD: "img/day-carrot.png",
        CARROTN: "img/night-carrot.png",
        CARROT_DRIEDD: "img/day-carrot-dried.png",
        CARROT_DRIEDN: "img/night-carrot-dried.png",
        TOMATO_MINID: "img/day-tomato-herb.png",
        TOMATO_MININ: "img/night-tomato-herb.png",
        TOMATO_MINI_DRIEDD: "img/day-tomato-herb-dried.png",
        TOMATO_MINI_DRIEDN: "img/night-tomato-herb-dried.png",
        TOMATOD: "img/day-tomato.png",
        TOMATON: "img/night-tomato.png",
        INV_CARROT_OUT: "img/inv-carrot-out.png",
        INV_CARROT_IN: "img/inv-carrot-in.png",
        INV_CARROT_CLICK: "img/inv-carrot-click.png",
        INV_TOMATO_OUT: "img/inv-tomato-out.png",
        INV_TOMATO_IN: "img/inv-tomato-in.png",
        INV_TOMATO_CLICK: "img/inv-tomato-click.png",
        PLAYER0D: "img/day-player0.png",
        PLAYER0N: "img/night-player0.png",
        PLAYER1D: "img/day-player1.png",
        PLAYER1N: "img/night-player1.png",
        PLAYER2D: "img/day-player2.png",
        PLAYER2N: "img/night-player22.png",
        PLAYER3D: "img/day-player3.png",
        PLAYER3N: "img/night-player33.png",
        PLAYER4D: "img/day-player4.png",
        PLAYER4N: "img/night-player4.png",
        PLAYER5D: "img/day-player5.png",
        PLAYER5N: "img/night-player5.png",
        PLAYER6D: "img/day-player6.png",
        PLAYER6N: "img/night-player6.png",
        PLAYER7D: "img/day-player7.png",
        PLAYER7N: "img/night-player7.png",
        PLAYER8D: "img/day-player8.png",
        PLAYER8N: "img/night-player8.png",
        PLAYER9D: "img/day-player9.png",
        PLAYER9N: "img/night-player9.png",
        PLAYER10D: "img/day-player10.png",
        PLAYER10N: "img/night-player10.png",
        PLAYER11D: "img/day-player11.png",
        PLAYER11N: "img/night-player11.png",
        PLAYER12D: "img/day-player12.png",
        PLAYER12N: "img/night-player12.png",
        PLAYER13D: "img/day-player13.png",
        PLAYER13N: "img/night-player13.png",
        PLAYER14D: "img/day-player14.png",
        PLAYER14N: "img/night-player14.png",
        PLAYER15D: "img/day-player15.png",
        PLAYER15N: "img/night-player15.png",
        PLAYER16D: "img/day-player16.png",
        PLAYER16N: "img/night-player16.png",
        PLAYER17D: "img/day-player17.png",
        PLAYER17N: "img/night-player17.png",
        PLAYER18D: "img/day-player18.png",
        PLAYER18N: "img/night-player18.png",
        PLAYER19D: "img/day-player19.png",
        PLAYER19N: "img/night-player19.png",
        HAND0D: "img/day-hand-player0.png",
        HAND0N: "img/night-hand-player0.png",
        HAND1D: "img/day-hand-player1.png",
        HAND1N: "img/night-hand-player1.png",
        HAND2D: "img/day-hand-player2.png",
        HAND2N: "img/night-hand-player22.png",
        HAND3D: "img/day-hand-player3.png",
        HAND3N: "img/night-hand-player33.png",
        HAND4D: "img/day-hand-player4.png",
        HAND4N: "img/night-hand-player4.png",
        HAND5D: "img/day-hand-player5.png",
        HAND5N: "img/night-hand-player5.png",
        HAND6D: "img/day-hand-player6.png",
        HAND6N: "img/night-hand-player6.png",
        HAND7D: "img/day-hand-player7.png",
        HAND7N: "img/night-hand-player7.png",
        HAND8D: "img/day-hand-player8.png",
        HAND8N: "img/night-hand-player8.png",
        HAND9D: "img/day-hand-player9.png",
        HAND9N: "img/night-hand-player9.png",
        HAND10D: "img/day-hand-player10.png",
        HAND10N: "img/night-hand-player10.png",
        HAND11D: "img/day-hand-player11.png",
        HAND11N: "img/night-hand-player11.png",
        HAND12D: "img/day-hand-player12.png",
        HAND12N: "img/night-hand-player12.png",
        HAND13D: "img/day-hand-player13.png",
        HAND13N: "img/night-hand-player13.png",
        HAND14D: "img/day-hand-player14.png",
        HAND14N: "img/night-hand-player14.png",
        HAND15D: "img/day-hand-player15.png",
        HAND15N: "img/night-hand-player15.png",
        HAND16D: "img/day-hand-player16.png",
        HAND16N: "img/night-hand-player16.png",
        HAND17D: "img/day-hand-player17.png",
        HAND17N: "img/night-hand-player17.png",
        HAND18D: "img/day-hand-player18.png",
        HAND18N: "img/night-hand-player18.png",
        HAND19D: "img/day-hand-player19.png",
        HAND19N: "img/night-hand-player19.png",
        ACCESSORY4D: "img/day-accessory4.png",
        ACCESSORY4N: "img/night-accessory4.png",
        ACCESSORY9D: "img/day-accessory9.png",
        ACCESSORY9N: "img/night-accessory9.png",
        ACCESSORY10D: "img/day-accessory10.png",
        ACCESSORY10N: "img/night-accessory10.png",
        ACCESSORY11D: "img/day-accessory11.png",
        ACCESSORY11N: "img/night-accessory11.png",
        ACCESSORY12D: "img/day-accessory12.png",
        ACCESSORY12N: "img/night-accessory12.png",
        BAGD: "img/day-bag.png",
        BAGN: "img/night-bag.png",
        INV_BAG_OUT: "img/inv-bag-out.png",
        INV_BAG_IN: "img/inv-bag-in.png",
        INV_BAG_CLICK: "img/inv-bag-click.png",
        PITCHFORKD: "img/day-pitchfork.png",
        PITCHFORKN: "img/night-pitchfork.png",
        INV_PITCHFORK_OUT: "img/inv-pitchfork-out.png",
        INV_PITCHFORK_IN: "img/inv-pitchfork-in.png",
        INV_PITCHFORK_CLICK: "img/inv-pitchfork-click.png",
        INV_WOOD_DOOR_SPIKE_OUT: "img/inv-wood-spike-door-out.png",
        INV_WOOD_DOOR_SPIKE_IN: "img/inv-wood-spike-door-in.png",
        INV_WOOD_DOOR_SPIKE_CLICK: "img/inv-wood-spike-door-click.png",
        INV_STONE_DOOR_SPIKE_OUT: "img/inv-stone-spike-door-out.png",
        INV_STONE_DOOR_SPIKE_IN: "img/inv-stone-spike-door-in.png",
        INV_STONE_DOOR_SPIKE_CLICK: "img/inv-stone-spike-door-click.png",
        INV_GOLD_DOOR_SPIKE_OUT: "img/inv-gold-spike-door-out.png",
        INV_GOLD_DOOR_SPIKE_IN: "img/inv-gold-spike-door-in.png",
        INV_GOLD_DOOR_SPIKE_CLICK: "img/inv-gold-spike-door-click.png",
        INV_DIAMOND_DOOR_SPIKE_OUT: "img/inv-diamond-spike-door-out.png",
        INV_DIAMOND_DOOR_SPIKE_IN: "img/inv-diamond-spike-door-in.png",
        INV_DIAMOND_DOOR_SPIKE_CLICK: "img/inv-diamond-spike-door-click.png",
        INV_AMETHYST_DOOR_SPIKE_OUT: "img/inv-amethyst-spike-door-out.png",
        INV_AMETHYST_DOOR_SPIKE_IN: "img/inv-amethyst-spike-door-in.png",
        INV_AMETHYST_DOOR_SPIKE_CLICK: "img/inv-amethyst-spike-door-click.png",
        WOOD_DOOR_SPIKED: "img/day-wood-spike-door.png",
        WOOD_DOOR_SPIKEN: "img/night-wood-spike-door.png",
        STONE_DOOR_SPIKED: "img/day-stone-spike-door.png",
        STONE_DOOR_SPIKEN: "img/night-stone-spike-door.png",
        GOLD_DOOR_SPIKED: "img/day-gold-spike-door.png",
        GOLD_DOOR_SPIKEN: "img/night-gold-spike-door.png",
        DIAMOND_DOOR_SPIKED: "img/day-diamond-spike-door.png",
        DIAMOND_DOOR_SPIKEN: "img/night-diamond-spike-door.png",
        AMETHYST_DOOR_SPIKED: "img/day-amethyst-spike-door.png",
        AMETHYST_DOOR_SPIKEN: "img/night-amethyst-spike-door.png",
        INV_REIDITE_DOOR_SPIKE_OUT: "img/inv-reidite-spike-door-out.png",
        INV_REIDITE_DOOR_SPIKE_IN: "img/inv-reidite-spike-door-in.png",
        INV_REIDITE_DOOR_SPIKE_CLICK: "img/inv-reidite-spike-door-click.png",
        INV_REIDITE_DOOR_OUT: "img/inv-reidite-door-out.png",
        INV_REIDITE_DOOR_IN: "img/inv-reidite-door-in.png",
        INV_REIDITE_DOOR_CLICK: "img/inv-reidite-door-click.png",
        INV_REIDITE_SPIKE_OUT: "img/inv-reidite-spike-out.png",
        INV_REIDITE_SPIKE_IN: "img/inv-reidite-spike-in.png",
        INV_REIDITE_SPIKE_CLICK: "img/inv-reidite-spike-click.png",
        INV_REIDITE_WALL_OUT: "img/inv-reidite-wall-out.png",
        INV_REIDITE_WALL_IN: "img/inv-reidite-wall-in.png",
        INV_REIDITE_WALL_CLICK: "img/inv-reidite-wall-click.png",
        REIDITE_WALLD: "img/day-reidite-wall.png",
        REIDITE_WALLN: "img/night-reidite-wall.png",
        REIDITE_DOORD: "img/day-reidite-door.png",
        REIDITE_DOORN: "img/night-reidite-door.png",
        REIDITE_SPIKED: "img/day-reidite-spike.png",
        REIDITE_SPIKEN: "img/night-reidite-spike.png",
        REIDITE_DOOR_SPIKED: "img/day-reidite-spike-door.png",
        REIDITE_DOOR_SPIKEN: "img/night-reidite-spike-door.png",
        INV_PICK_REIDITE_OUT: "img/inv-reidite-pickaxe-out.png",
        INV_PICK_REIDITE_IN: "img/inv-reidite-pickaxe-in.png",
        INV_PICK_REIDITE_CLICK: "img/inv-reidite-pickaxe-click.png",
        PICK_REIDITED: "img/day-reidite-pickaxe.png",
        PICK_REIDITEN: "img/night-reidite-pickaxe.png",
        INV_HAMMER_REIDITE_OUT: "img/inv-reidite-hammer-out.png",
        INV_HAMMER_REIDITE_IN: "img/inv-reidite-hammer-in.png",
        INV_HAMMER_REIDITE_CLICK: "img/inv-reidite-hammer-click.png",
        HAMMER_REIDITED: "img/day-reidite-hammer.png",
        HAMMER_REIDITEN: "img/night-reidite-hammer.png",
        WATERMELOND: "img/day-watermelon1.png",
        WATERMELONN: "img/night-watermelon1.png",
        DRIED_WATERMELOND: "img/day-watermelon-dried1.png",
        DRIED_WATERMELONN: "img/night-watermelon-dried1.png",
        INV_WATERMELON_OUT: "img/inv-watermelon-out.png",
        INV_WATERMELON_IN: "img/inv-watermelon-in.png",
        INV_WATERMELON_CLICK: "img/inv-watermelon-click.png",
        BOATD: "img/day-boat.png",
        BOATN: "img/night-boat.png",
        BOAT_WAVED: "img/day-boat-wave.png",
        BOAT_WAVEN: "img/night-boat-wave.png",
        INV_BOAT_OUT: "img/inv-boat-out.png",
        INV_BOAT_IN: "img/inv-boat-in.png",
        INV_BOAT_CLICK: "img/inv-boat-click.png",
        PLANED: "img/day-plane.png",
        PLANEN: "img/night-plane.png",
        INV_PLANE_OUT: "img/inv-plane-out.png",
        INV_PLANE_IN: "img/inv-plane-in.png",
        INV_PLANE_CLICK: "img/inv-plane-click.png",
        SLEDD: "img/day-sled.png",
        SLEDN: "img/night-sled.png",
        SLED_WAVED: "img/day-sled-wave.png",
        SLED_WAVEN: "img/night-sled-wave.png",
        INV_SLED_OUT: "img/inv-sled-out.png",
        INV_SLED_IN: "img/inv-sled-in.png",
        INV_SLED_CLICK: "img/inv-sled-click.png",
        PIRATE_HATD: "img/day-pirate-hat.png",
        PIRATE_HATN: "img/night-pirate-hat.png",
        INV_PIRATE_HAT_OUT: "img/inv-pirate-hat-out.png",
        INV_PIRATE_HAT_IN: "img/inv-pirate-hat-in.png",
        INV_PIRATE_HAT_CLICK: "img/inv-pirate-hat-click.png",
        PENGUIND: "img/day-penguin.png",
        PENGUINN: "img/night-penguin.png",
        HURT_PENGUIN: "img/hurt-penguin.png",
        INV_PENGUIN_FEATHER: "img/inv-penguin-feather-click.png",
        INV_HAWK_FEATHER: "img/inv-hawk-feather-click.png",
        BOARD: "img/day-boar1.png",
        BOAR_TAMEDD: "img/day-boar1-tamed.png",
        BOAR_ANGRYD: "img/day-boar1-angry.png",
        BOARN: "img/night-boar1.png",
        BOAR_TAMEDN: "img/night-boar1-tamed.png",
        BOAR_ANGRYN: "img/night-boar1-angry.png",
        INV_MOUNT_BOAR_OUT: "img/inv-mount-boar-out.png",
        INV_MOUNT_BOAR_IN: "img/inv-mount-boar-in.png",
        INV_MOUNT_BOAR_CLICK: "img/inv-mount-boar-click.png",
        HURT_BOAR: "img/day-hurt-boar1.png",
        BOAR_STEP: "img/boar1-step.png",
        SADDLED: "img/day-saddle1.png",
        SADDLEN: "img/night-saddle1.png",
        INV_SADDLE_OUT: "img/inv-saddle-out.png",
        INV_SADDLE_IN: "img/inv-saddle-in.png",
        INV_SADDLE_CLICK: "img/inv-saddle-click.png",
        WAND1D: "img/day-magic-wand0.png",
        WAND1N: "img/night-magic-wand0.png",
        LIGHT_WAND1D: "img/day-light-wand1.png",
        LIGHT_WAND1N: "img/night-light-wand1.png",
        INV_WAND1_OUT: "img/inv-magic-wand0-out.png",
        INV_WAND1_IN: "img/inv-magic-wand0-in.png",
        INV_WAND1_CLICK: "img/inv-magic-wand0-click.png",
        WAND2D: "img/day-magic-wand1.png",
        WAND2N: "img/night-magic-wand1.png",
        LIGHT_WAND0D: "img/day-light-wand0.png",
        LIGHT_WAND0N: "img/night-light-wand0.png",
        INV_WAND2_OUT: "img/inv-magic-wand1-out.png",
        INV_WAND2_IN: "img/inv-magic-wand1-in.png",
        INV_WAND2_CLICK: "img/inv-magic-wand1-click.png",
        FIREFLYD: "img/day-firefly.png",
        FIREFLYN: "img/night-firefly.png",
        HURT_FIREFLY: "img/hurt-firefly.png",
        INV_FIREFLY_OUT: "img/inv-firefly-out.png",
        INV_FIREFLY_IN: "img/inv-firefly-in.png",
        INV_FIREFLY_CLICK: "img/inv-firefly-click.png",
        BABY_DRAGOND: "img/day-baby-dragon.png",
        BABY_DRAGONN: "img/night-baby-dragon.png",
        BABY_DRAGON_ATTACKD: "img/day-baby-dragon-angry.png",
        BABY_DRAGON_ATTACKN: "img/night-baby-dragon-angry.png",
        BABY_DRAGON_TAMEDD: "img/day-baby-dragon-tamed.png",
        BABY_DRAGON_TAMEDN: "img/night-baby-dragon-tamed.png",
        BABY_DRAGON_WING_LEFT_ATTACKD: "img/day-wing-dragon-left-angry.png",
        BABY_DRAGON_WING_LEFT_ATTACKN: "img/night-dragon-wing-left-angry.png",
        BABY_DRAGON_WING_RIGHT_ATTACKD: "img/day-wing-dragon-right-angry.png",
        BABY_DRAGON_WING_RIGHT_ATTACKN: "img/night-dragon-wing-right-angry.png",
        BABY_DRAGON_WING_LEFT_TAMEDD: "img/day-wing-dragon-left-tamed.png",
        BABY_DRAGON_WING_LEFT_TAMEDN: "img/night-dragon-wing-left-tamed.png",
        BABY_DRAGON_WING_RIGHT_TAMEDD: "img/day-wing-dragon-right-tamed.png",
        BABY_DRAGON_WING_RIGHT_TAMEDN: "img/night-wing-dragon-right-tamed.png",
        BABY_DRAGON_WING_LEFTD: "img/day-wing-dragon-left.png",
        BABY_DRAGON_WING_LEFTN: "img/night-dragon-wing-left.png",
        BABY_DRAGON_WING_RIGHTD: "img/day-wing-dragon-right.png",
        BABY_DRAGON_WING_RIGHTN: "img/night-wing-dragon-right.png",
        HURT_BABY_DRAGON: "img/hurt-baby-dragon.png",
        HURT_BABY_DRAGON_WING_LEFT: "img/hurt-baby-dragon-wing-left.png",
        HURT_BABY_DRAGON_WING_RIGHT: "img/hurt-baby-dragon-wing-right.png",
        INV_BABY_DRAGON_OUT: "img/inv-baby-dragon-out.png",
        INV_BABY_DRAGON_IN: "img/inv-baby-dragon-in.png",
        INV_BABY_DRAGON_CLICK: "img/inv-baby-dragon-click.png",
        BABY_LAVAD: "img/day-baby-lava.png",
        BABY_LAVAN: "img/night-baby-lava.png",
        BABY_LAVA_ATTACKD: "img/day-baby-lava-angry.png",
        BABY_LAVA_ATTACKN: "img/night-baby-lava-angry.png",
        BABY_LAVA_TAMEDD: "img/day-baby-lava-tamed.png",
        BABY_LAVA_TAMEDN: "img/night-baby-lava-tamed.png",
        BABY_LAVA_WING_LEFT_ATTACKD: "img/day-wing-lava-left-angry.png",
        BABY_LAVA_WING_LEFT_ATTACKN: "img/night-wing-lava-left-angry.png",
        BABY_LAVA_WING_RIGHT_ATTACKD: "img/day-wing-lava-right-angry.png",
        BABY_LAVA_WING_RIGHT_ATTACKN: "img/night-wing-lava-right-angry.png",
        BABY_LAVA_WING_LEFT_TAMEDD: "img/day-wing-lava-left-tamed.png",
        BABY_LAVA_WING_LEFT_TAMEDN: "img/night-wing-lava-left-tamed.png",
        BABY_LAVA_WING_RIGHT_TAMEDD: "img/day-wing-lava-right-tamed.png",
        BABY_LAVA_WING_RIGHT_TAMEDN: "img/night-wing-lava-right-tamed.png",
        BABY_LAVA_WING_LEFTD: "img/day-wing-lava-left.png",
        BABY_LAVA_WING_LEFTN: "img/night-wing-lava-left.png",
        BABY_LAVA_WING_RIGHTD: "img/day-wing-lava-right.png",
        BABY_LAVA_WING_RIGHTN: "img/night-wing-lava-right.png",
        HURT_BABY_LAVA: "img/hurt-baby-lava.png",
        HURT_BABY_LAVA_WING_LEFT: "img/hurt-baby-lava-wing-left.png",
        HURT_BABY_LAVA_WING_RIGHT: "img/hurt-baby-lava-wing-right.png",
        INV_BABY_LAVA_OUT: "img/inv-baby-lava-out.png",
        INV_BABY_LAVA_IN: "img/inv-baby-lava-in.png",
        INV_BABY_LAVA_CLICK: "img/inv-baby-lava-click.png",
        HAWKD: "img/day-falcon.png",
        HAWKN: "img/night-falcon.png",
        HAWK_ATTACKD: "img/day-falcon-angry.png",
        HAWK_ATTACKN: "img/night-falcon-angry.png",
        HAWK_GROUNDD: "img/day-falcon-ground.png",
        HAWK_GROUNDN: "img/night-falcon-ground.png",
        HAWK_GROUND_ATTACKD: "img/day-falcon-ground-angry.png",
        HAWK_GROUND_ATTACKN: "img/night-falcon-ground-angry.png",
        HAWK_WING_LEFTD: "img/day-falcon-wings-left.png",
        HAWK_WING_LEFTN: "img/night-falcon-wings-left.png",
        HAWK_WING_RIGHTD: "img/day-falcon-wings-right.png",
        HAWK_WING_RIGHTN: "img/night-falcon-wings-right.png",
        HAWK_WING_LEFT_ATTACKD: "img/day-falcon-angry-wings-left.png",
        HAWK_WING_LEFT_ATTACKN: "img/night-falcon-angry-wings-left.png",
        HAWK_WING_RIGHT_ATTACKD: "img/day-falcon-angry-wings-right.png",
        HAWK_WING_RIGHT_ATTACKN: "img/night-falcon-angry-wings-right.png",
        HAWK_WING_LEFT_TAMEDD: "img/day-falcon-wings-left-tamed.png",
        HAWK_WING_LEFT_TAMEDN: "img/night-falcon-wings-left-tamed.png",
        HAWK_WING_RIGHT_TAMEDD: "img/day-falcon-wings-right-tamed.png",
        HAWK_WING_RIGHT_TAMEDN: "img/night-falcon-wings-right-tamed.png",
        HAWK_TAMEDD: "img/day-falcon-tamed.png",
        HAWK_TAMEDN: "img/night-falcon-tamed.png",
        HURT_HAWK_GROUND: "img/hurt-falcon-ground.png",
        HURT_HAWK: "img/hurt-falcon.png",
        HURT_HAWK_WING_LEFT: "img/hurt-falcon-wings-left.png",
        HURT_HAWK_WING_RIGHT: "img/hurt-falcon-wings-right.png",
        INV_HAWK_OUT: "img/inv-falcon-out.png",
        INV_HAWK_IN: "img/inv-falcon-in.png",
        INV_HAWK_CLICK: "img/inv-falcon-click.png",
        CRAB_BOSSD: "img/day-crab-boss.png",
        CRAB_BOSSN: "img/night-crab-boss.png",
        CRAB_BOSS_ATTACKD: "img/day-crab-boss-angry.png",
        CRAB_BOSS_ATTACKN: "img/night-crab-boss-angry.png",
        CRAB_BOSS_TAMEDD: "img/day-crab-boss-tamed.png",
        CRAB_BOSS_TAMEDN: "img/night-crab-boss-tamed.png",
        CRAB_BOSS_CLAW_LEFT_ATTACKD: "img/day-crab-boss-claw-left-attack.png",
        CRAB_BOSS_CLAW_LEFT_ATTACKN: "img/night-crab-boss-claw-left-attack.png",
        CRAB_BOSS_CLAW_RIGHT_ATTACKD: "img/day-crab-boss-claw-right-attack.png",
        CRAB_BOSS_CLAW_RIGHT_ATTACKN: "img/night-crab-boss-claw-right-attack.png",
        CRAB_BOSS_CLAW_LEFT_TAMEDD: "img/day-crab-boss-claw-left-tamed.png",
        CRAB_BOSS_CLAW_LEFT_TAMEDN: "img/night-crab-boss-claw-left-tamed.png",
        CRAB_BOSS_CLAW_RIGHT_TAMEDD: "img/day-crab-boss-claw-right-tamed.png",
        CRAB_BOSS_CLAW_RIGHT_TAMEDN: "img/night-crab-boss-claw-right-tamed.png",
        CRAB_BOSS_CLAW_LEFTD: "img/day-crab-boss-claw-left.png",
        CRAB_BOSS_CLAW_LEFTN: "img/night-crab-boss-claw-left.png",
        CRAB_BOSS_CLAW_RIGHTD: "img/day-crab-boss-claw-right.png",
        CRAB_BOSS_CLAW_RIGHTN: "img/night-crab-boss-claw-right.png",
        HURT_CRAB_BOSS: "img/hurt-crab-boss.png",
        HURT_CRAB_BOSS_CLAW_LEFT: "img/hurt-crab-boss-claw-left.png",
        HURT_CRAB_BOSS_CLAW_RIGHT: "img/hurt-crab-boss-claw-right.png",
        HEAL_CRAB_BOSS: "img/heal-crab-boss.png",
        HEAL_CRAB_BOSS_CLAW_LEFT: "img/heal-crab-boss-claw-left.png",
        HEAL_CRAB_BOSS_CLAW_RIGHT: "img/heal-crab-boss-claw-right.png",
        CRAB_STEP: "img/crab-step.png",
        INV_CRAB_BOSS_OUT: "img/inv-crab-boss-out.png",
        INV_CRAB_BOSS_IN: "img/inv-crab-boss-in.png",
        INV_CRAB_BOSS_CLICK: "img/inv-crab-boss-click.png",
        CACTUSD: "img/day-cactus10.png",
        CACTUSN: "img/night-cactus10.png",
        INV_CACTUS_OUT: "img/inv-cactus-out.png",
        INV_CACTUS_IN: "img/inv-cactus-in.png",
        INV_CACTUS_CLICK: "img/inv-cactus-click.png",
        SCORPIOND: "img/day-scorpion.png",
        SCORPIONN: "img/night-scorpion.png",
        SCORPION_HAND_LEFTD: "img/day-scorpion-hand-left.png",
        SCORPION_HAND_LEFTN: "img/night-scorpion-hand-left.png",
        SCORPION_HAND_RIGHTD: "img/day-scorpion-hand-right.png",
        SCORPION_HAND_RIGHTN: "img/night-scorpion-hand-right.png",
        HURT_SCORPION: "img/hurt-scorpion.png",
        HURT_SCORPION_HAND_LEFT: "img/hurt-scorpion-hand-left.png",
        HURT_SCORPION_HAND_RIGHT: "img/hurt-scorpion-hand-right.png",
        VULTURED: "img/day-vulture.png",
        VULTUREN: "img/night-vulture.png",
        VULTURE_ATTACKD: "img/day-vulture-angry.png",
        VULTURE_ATTACKN: "img/night-vulture-angry.png",
        VULTURE_GROUNDD: "img/day-vulture-ground.png",
        VULTURE_GROUNDN: "img/night-vulture-ground.png",
        VULTURE_GROUND_ATTACKD: "img/day-vulture-ground-angry.png",
        VULTURE_GROUND_ATTACKN: "img/night-vulture-ground-angry.png",
        VULTURE_WING_LEFTD: "img/day-vulture-wings-left.png",
        VULTURE_WING_LEFTN: "img/night-vulture-wings-left.png",
        VULTURE_WING_RIGHTD: "img/day-vulture-wings-right.png",
        VULTURE_WING_RIGHTN: "img/night-vulture-wings-right.png",
        VULTURE_WING_LEFT_ATTACKD: "img/day-vulture-angry-wings-left.png",
        VULTURE_WING_LEFT_ATTACKN: "img/night-vulture-angry-wings-left.png",
        VULTURE_WING_RIGHT_ATTACKD: "img/day-vulture-angry-wings-right.png",
        VULTURE_WING_RIGHT_ATTACKN: "img/night-vulture-angry-wings-right.png",
        VULTURE_WING_LEFT_TAMEDD: "img/day-vulture-wings-left-tamed.png",
        VULTURE_WING_LEFT_TAMEDN: "img/night-vulture-wings-left-tamed.png",
        VULTURE_WING_RIGHT_TAMEDD: "img/day-vulture-wings-right-tamed.png",
        VULTURE_WING_RIGHT_TAMEDN: "img/night-vulture-wings-right-tamed.png",
        VULTURE_TAMEDD: "img/day-vulture-tamed.png",
        VULTURE_TAMEDN: "img/night-vulture-tamed.png",
        HURT_VULTURE_GROUND: "img/hurt-vulture-ground.png",
        HURT_VULTURE: "img/hurt-vulture.png",
        HURT_VULTURE_WING_LEFT: "img/hurt-vulture-wings-left.png",
        HURT_VULTURE_WING_RIGHT: "img/hurt-vulture-wings-right.png",
        ALOE_VERAD: "img/day-aloe-vera.png",
        ALOE_VERAN: "img/night-aloe-vera.png",
        INV_ALOE_VERA_OUT: "img/inv-aloe-vera-out.png",
        INV_ALOE_VERA_IN: "img/inv-aloe-vera-in.png",
        INV_ALOE_VERA_CLICK: "img/inv-aloe-vera-click.png",
        ALOE_VERA_GROWND: "img/day-aloe-vera-grown.png",
        ALOE_VERA_GROWNN: "img/night-aloe-vera-grown.png",
        ALOE_VERA_DRIEDD: "img/day-aloe-vera-dried.png",
        ALOE_VERAN_DRIEDN: "img/night-aloe-vera-dried.png",
        TURBAN1D: "img/day-turban1.png",
        TURBAN1N: "img/night-turban1.png",
        TURBAN2D: "img/day-turban2.png",
        TURBAN2N: "img/night-turban2.png",
        INV_TURBAN2_OUT: "img/inv-turban2-out.png",
        INV_TURBAN2_IN: "img/inv-turban2-in.png",
        INV_TURBAN2_CLICK: "img/inv-turban2-click.png",
        INV_TURBAN1_OUT: "img/inv-turban1-out.png",
        INV_TURBAN1_IN: "img/inv-turban1-in.png",
        INV_TURBAN1_CLICK: "img/inv-turban1-click.png",
        PITCHFORK2D: "img/day-pitchfork2.png",
        PITCHFORK2N: "img/night-pitchfork2.png",
        INV_PITCHFORK2_OUT: "img/inv-pitchfork2-out.png",
        INV_PITCHFORK2_IN: "img/inv-pitchfork2-in.png",
        INV_PITCHFORK2_CLICK: "img/inv-pitchfork2-click.png",
        INV_PITCHFORK_PART_CLICK: "img/inv-gold-fork-click.png",
        INV_PILOT_GLASSES_CLICK: "img/inv-pilot-glasses-click.png",
        PILOT_HELMETD: "img/day-pilot-helmet.png",
        PILOT_HELMETN: "img/night-pilot-helmet.png",
        INV_PILOT_HELMET_OUT: "img/inv-pilot-helmet-out.png",
        INV_PILOT_HELMET_IN: "img/inv-pilot-helmet-in.png",
        INV_PILOT_HELMET_CLICK: "img/inv-pilot-helmet-click.png",
        SAND_WORM0D: "img/day-sandworm0.png",
        SAND_WORM1D: "img/day-sandworm1.png",
        SAND_WORM2D: "img/day-sandworm2.png",
        SAND_WORM0N: "img/night-sandworm0.png",
        SAND_WORM1N: "img/night-sandworm1.png",
        SAND_WORM2N: "img/night-sandworm2.png",
        HURT_SAND_WORM0: "img/hurt-sandworm0.png",
        HURT_SAND_WORM1: "img/hurt-sandworm1.png",
        HURT_SAND_WORM2: "img/hurt-sandworm2.png",
        INV_VULTURE_FEATHER: "img/inv-vulture-feather-click.png",
        EMERALD0D: "img/day-emerald0.png",
        EMERALD0N: "img/night-emerald0.png",
        EMERALD1D: "img/day-emerald1.png",
        EMERALD1N: "img/night-emerald1.png",
        EMERALD2D: "img/day-emerald2.png",
        EMERALD2N: "img/night-emerald2.png",
        INV_EMERALD: "img/inv-emerald-click.png",
        INV_SANDWORM_JUICE_OUT: "img/inv-sworm-juice-out.png",
        INV_SANDWORM_JUICE_IN: "img/inv-sworm-juice-in.png",
        INV_SANDWORM_JUICE_CLICK: "img/inv-sworm-juice-click.png",
        EMERALD_MACHINED: "img/day-point-machine.png",
        EMERALD_MACHINEN: "img/night-point-machine.png",
        EMERALD_MACHINE_HOLED: "img/day-point-machine-hole.png",
        EMERALD_MACHINE_HOLEN: "img/night-point-machine-hole.png",
        EMERALD_MACHINE_GROUNDD: "img/day-point-machine-ground.png",
        EMERALD_MACHINE_GROUNDN: "img/night-point-machine-ground.png",
        EMERALD_MACHINE_ROTATED: "img/day-point-machine-rotate.png",
        EMERALD_MACHINE_ROTATEN: "img/night-point-machine-rotate.png",
        INV_EMERALD_MACHINE_OUT: "img/inv-point-machine-out.png",
        INV_EMERALD_MACHINE_IN: "img/inv-point-machine-in.png",
        INV_EMERALD_MACHINE_CLICK: "img/inv-point-machine-click.png",
        EXTRACTOR_MACHINE0_STONED: "img/day-extractor-machine0-stone.png",
        EXTRACTOR_MACHINE0_STONEN: "img/night-extractor-machine0-stone.png",
        EXTRACTOR_MACHINE_STONED: "img/day-extractor-machine-stone.png",
        EXTRACTOR_MACHINE_STONEN: "img/night-extractor-machine-stone.png",
        INV_EXTRACTOR_MACHINE_STONE_OUT: "img/inv-extractor-machine-stone-out.png",
        INV_EXTRACTOR_MACHINE_STONE_IN: "img/inv-extractor-machine-stone-in.png",
        INV_EXTRACTOR_MACHINE_STONE_CLICK: "img/inv-extractor-machine-stone-click.png",
        EXTRACTOR_MACHINE0_GOLDD: "img/day-extractor-machine0-gold.png",
        EXTRACTOR_MACHINE0_GOLDN: "img/night-extractor-machine0-gold.png",
        EXTRACTOR_MACHINE_GOLDD: "img/day-extractor-machine-gold.png",
        EXTRACTOR_MACHINE_GOLDN: "img/night-extractor-machine-gold.png",
        INV_EXTRACTOR_MACHINE_GOLD_OUT: "img/inv-extractor-machine-gold-out.png",
        INV_EXTRACTOR_MACHINE_GOLD_IN: "img/inv-extractor-machine-gold-in.png",
        INV_EXTRACTOR_MACHINE_GOLD_CLICK: "img/inv-extractor-machine-gold-click.png",
        EXTRACTOR_MACHINE0_DIAMONDD: "img/day-extractor-machine0-diamond.png",
        EXTRACTOR_MACHINE0_DIAMONDN: "img/night-extractor-machine0-diamond.png",
        EXTRACTOR_MACHINE_DIAMONDD: "img/day-extractor-machine-diamond.png",
        EXTRACTOR_MACHINE_DIAMONDN: "img/night-extractor-machine-diamond.png",
        INV_EXTRACTOR_MACHINE_DIAMOND_OUT: "img/inv-extractor-machine-diamond-out.png",
        INV_EXTRACTOR_MACHINE_DIAMOND_IN: "img/inv-extractor-machine-diamond-in.png",
        INV_EXTRACTOR_MACHINE_DIAMOND_CLICK: "img/inv-extractor-machine-diamond-click.png",
        EXTRACTOR_MACHINE0_AMETHYSTD: "img/day-extractor-machine0-amethyst.png",
        EXTRACTOR_MACHINE0_AMETHYSTN: "img/night-extractor-machine0-amethyst.png",
        EXTRACTOR_MACHINE_AMETHYSTD: "img/day-extractor-machine-amethyst.png",
        EXTRACTOR_MACHINE_AMETHYSTN: "img/night-extractor-machine-amethyst.png",
        INV_EXTRACTOR_MACHINE_AMETHYST_OUT: "img/inv-extractor-machine-amethyst-out.png",
        INV_EXTRACTOR_MACHINE_AMETHYST_IN: "img/inv-extractor-machine-amethyst-in.png",
        INV_EXTRACTOR_MACHINE_AMETHYST_CLICK: "img/inv-extractor-machine-amethyst-click.png",
        EXTRACTOR_MACHINE0_REIDITED: "img/day-extractor-machine0-reidite.png",
        EXTRACTOR_MACHINE0_REIDITEN: "img/night-extractor-machine0-reidite.png",
        EXTRACTOR_MACHINE_REIDITED: "img/day-extractor-machine-reidite.png",
        EXTRACTOR_MACHINE_REIDITEN: "img/night-extractor-machine-reidite.png",
        INV_EXTRACTOR_MACHINE_REIDITE_OUT: "img/inv-extractor-machine-reidite-out.png",
        INV_EXTRACTOR_MACHINE_REIDITE_IN: "img/inv-extractor-machine-reidite-in.png",
        INV_EXTRACTOR_MACHINE_REIDITE_CLICK: "img/inv-extractor-machine-reidite-click.png",
        EXTRACTOR_CASES: "img/extractor-cases.png",
        HEND: "img/day-golden-hen.png",
        HENN: "img/night-golden-hen.png",
        CHICKEND: "img/day-golden-chicken.png",
        CHICKENN: "img/night-golden-chicken.png",
        HURT_GOLDEN_HEN: "img/hurt-golden-hen.png",
        HURT_GOLDEN_CHICKEN: "img/hurt-golden-chicken.png",
        LOGO_INTERFACE: "img/logo-interface.png",
        FOREST_MODE_HOVER: "img/forest-mode-hover.png",
        NORMAL_MODE_HOVER: "img/normal-mode-hover.png",
        VAMPIRE_MODE_HOVER: "img/vampire-mode-hover.png",
        ZOMBIE_MODE_HOVER: "img/zombie-mode-hover.png",
        MODE_COMMUNITY_HOVER: "img/community-mode-hover2.png",
        MODE_EXPERIMENTAL_HOVER: "img/experimental-mode-hover.png",
        ZOMBIE_MODE_OUT: "img/zombie-mode-out.png",
        ZOMBIE_MODE_IN: "img/zombie-mode-in.png",
        ZOMBIE_MODE_CLICK: "img/zombie-mode-click.png",
        VAMPIRE_MODE_OUT: "img/vampire-mode-out.png",
        VAMPIRE_MODE_IN: "img/vampire-mode-in.png",
        VAMPIRE_MODE_CLICK: "img/vampire-mode-click.png",
        NORMAL_MODE_OUT: "img/normal-mode-out.png",
        NORMAL_MODE_IN: "img/normal-mode-in.png",
        NORMAL_MODE_CLICK: "img/normal-mode-click.png",
        FOREST_MODE_OUT: "img/forest-mode-out.png",
        FOREST_MODE_IN: "img/forest-mode-in.png",
        FOREST_MODE_CLICK: "img/forest-mode-click.png",
        MODE_COMMUNITY_OUT: "img/community-mode-out.png",
        MODE_COMMUNITY_IN: "img/community-mode-in.png",
        MODE_COMMUNITY_CLICK: "img/community-mode-click.png",
        MODE_EXPERIMENTAL_OUT: "img/experimental-modes-out.png",
        MODE_EXPERIMENTAL_IN: "img/experimental-modes-in.png",
        MODE_EXPERIMENTAL_CLICK: "img/experimental-modes-click.png",
        YOUTUBE_BUTTON_OUT: "img/youtube-button-out.png",
        YOUTUBE_BUTTON_IN: "img/youtube-button-in.png",
        YOUTUBE_BUTTON_CLICK: "img/youtube-button-click.png",
        WIKI_BUTTON_OUT: "img/wiki-button-out.png",
        WIKI_BUTTON_IN: "img/wiki-button-in.png",
        WIKI_BUTTON_CLICK: "img/wiki-button-click.png",
        TWITTER_BUTTON_OUT: "img/twitter-button-out.png",
        TWITTER_BUTTON_IN: "img/twitter-button-in.png",
        TWITTER_BUTTON_CLICK: "img/twitter-button-click.png",
        FACEBOOK_BUTTON_OUT: "img/facebook-button-out.png",
        FACEBOOK_BUTTON_IN: "img/facebook-button-in.png",
        FACEBOOK_BUTTON_CLICK: "img/facebook-button-click.png",
        REDDIT_BUTTON_OUT: "img/reddit-button-out.png",
        REDDIT_BUTTON_IN: "img/reddit-button-in.png",
        REDDIT_BUTTON_CLICK: "img/reddit-button-click.png",
        DISCORD_BUTTON_OUT: "img/discord-button-out.png",
        DISCORD_BUTTON_IN: "img/discord-button-in.png",
        DISCORD_BUTTON_CLICK: "img/discord-button-click.png",
        MERCH_BUTTON_OUT: "img/merch-button-out.png",
        MERCH_BUTTON_IN: "img/merch-button-in.png",
        MERCH_BUTTON_CLICK: "img/merch-button-click.png",
        TERMINAL_BUTTON_OUT: "img/terminal-button-out.png",
        TERMINAL_BUTTON_IN: "img/terminal-button-in.png",
        TERMINAL_BUTTON_CLICK: "img/terminal-button-click.png",
        RESTART_OUT: "img/restart-out.png",
        RESTART_IN: "img/restart-in.png",
        RESTART_CLICK: "img/restart-click.png",
        GUIDE_OUT: "img/guide-out.png",
        GUIDE_IN: "img/guide-in.png",
        GUIDE_CLICK: "img/guide-click.png",
        COPY_PASTE_OUT: "img/copy-paste-out.png",
        COPY_PASTE_IN: "img/copy-paste-in.png",
        COPY_PASTE_CLICK: "img/copy-paste-click.png",
        LINKS_BG: "img/link-buttons-bg.png",
        CHANGELOG_BOX: "img/changelog-box2.png",
        CHANGELOG_BUTTON_OUT: "img/changelog_29.png",
        DEVASTIO_BUTTON_OUT: "img/banner-devast.png",
        PROFILE_BUTTON_OUT: "img/profile-button-out.png",
        PROFILE_BUTTON_IN: "img/profile-button-in.png",
        PROFILE_BUTTON_CLICK: "img/profile-button-click.png",
        LOGIN_BUTTON_OUT: "img/login-button-out.png",
        LOGIN_BUTTON_IN: "img/login-button-in.png",
        LOGIN_BUTTON_CLICK: "img/login-button-click.png",
        LOGIN_GOOGLE_OUT: "img/login-google-out.png",
        LOGIN_GOOGLE_IN: "img/login-google-in.png",
        LOGIN_GOOGLE_CLICK: "img/login-google-click.png",
        LOGIN_FACEBOOK_OUT: "img/login-facebook-out.png",
        LOGIN_FACEBOOK_IN: "img/login-facebook-in.png",
        LOGIN_FACEBOOK_CLICK: "img/login-facebook-click.png",
        ACCOUNT_BOX: "img/account-box.png",
        ACCOUNT_MAINTENANCE: "img/account-under-maintenance.png",
        CLOSE_BUTTON_OUT: "img/close-button-account-out.png",
        CLOSE_BUTTON_IN: "img/close-button-account-in.png",
        CLOSE_BUTTON_CLICK: "img/close-button-account-click.png",
        PLAY_BUTTON_OUT: "img/play-button-out.png",
        PLAY_BUTTON_IN: "img/play-button-in.png",
        PLAY_BUTTON_CLICK: "img/play-button-click.png",
        APP_STORE_BADGE: "img/app-store-badge.png",
        PLAY_STORE_BADGE: "img/play-store-badge.png",
        MOBILE_BOXAD: "img/mobile-boxad.png",
        MODIFY_NAME_OUT: "img/modify-name-out.png",
        MODIFY_NAME_IN: "img/modify-name-in.png",
        MODIFY_NAME_CLICK: "img/modify-name-click.png",
        YES_BUTTON_OUT: "img/yes-button-out.png",
        YES_BUTTON_IN: "img/yes-button-in.png",
        YES_BUTTON_CLICK: "img/yes-button-click.png",
        YES_300_BUTTON_OUT: "img/yes-300-button-out.png",
        YES_300_BUTTON_IN: "img/yes-300-button-in.png",
        YES_300_BUTTON_CLICK: "img/yes-300-button-click.png",
        NO_BUTTON_OUT: "img/no-button-out.png",
        NO_BUTTON_IN: "img/no-button-in.png",
        NO_BUTTON_CLICK: "img/no-button-click.png",
        NO_THANKS_BUTTON_OUT: "img/no-thanks-button-out.png",
        NO_THANKS_BUTTON_IN: "img/no-thanks-button-in.png",
        NO_THANKS_BUTTON_CLICK: "img/no-thanks-button-click.png",
        SHOP_BUTTON_OUT: "img/shop-button-out.png",
        SHOP_BUTTON_IN: "img/shop-button-in.png",
        SHOP_BUTTON_CLICK: "img/shop-button-click.png",
        LOGOUT_OUT: "img/logout-out.png",
        LOGOUT_IN: "img/logout-in.png",
        LOGOUT_CLICK: "img/logout-click.png",
        TERMS_BUTTON_OUT: "img/terms-button-out.png",
        TERMS_BUTTON_IN: "img/terms-button-in.png",
        TERMS_BUTTON_CLICK: "img/terms-button-click.png",
        TUTORIAL_ICON: "img/tutorial-icon.png",
        SKINS_ICON: "img/skins-icon.png",
        SHOP_ICON: "img/shop-icon.png",
        PAINT_ICON: "img/paint-icon.png",
        LEADERBOARD_ICON: "img/leaderboard-icon.png",
        START_ICON: "img/start-icon.png",
        PROFILE_ICON: "img/profile-icon.png",
        SERVER_ACCESS_ICON: "img/server-access-icon2.png",
        ICONS_BG_BUTTON_OUT: "img/button-homepage-bg-out.png",
        ICONS_BG_BUTTON_IN: "img/button-homepage-bg-in.png",
        ICONS_BG_BUTTON_CLICK: "img/button-homepage-bg-click.png",
        ICONS_BOTTOM_BG_BUTTON_OUT: "img/button-bottom-homepage-bg-out.png",
        ICONS_BOTTOM_BG_BUTTON_IN: "img/button-bottom-homepage-bg-in.png",
        ICONS_BOTTOM_BG_BUTTON_CLICK: "img/button-bottom-homepage-bg-click.png",
        AVATAR_RESUME: "img/lvl-player.png",
        AVATAR_LVL1: "img/avatar-player.png",
        AVATAR_LVL2: "img/avatar-player1.png",
        AVATAR_LVL3: "img/avatar-player2.png",
        AVATAR_LVL4: "img/avatar-player3.png",
        AVATAR_LVL5: "img/avatar-player4.png",
        AVATAR_LVL6: "img/avatar-player5.png",
        AVATAR_LVL7: "img/avatar-player6.png",
        AVATAR_LVL8: "img/avatar-player7.png",
        AVATAR_LVL9: "img/avatar-player8.png",
        AVATAR_LVL10: "img/avatar-player9.png",
        AVATAR_LVL11: "img/avatar-player10.png",
        AVATAR_LVL12: "img/avatar-player11.png",
        AVATAR_LVL13: "img/avatar-player12.png",
        AVATAR_LVL14: "img/avatar-player13.png",
        AVATAR_LVL15: "img/avatar-player14.png",
        AVATAR_LVL16: "img/avatar-player14.png",
        AVATAR_LVL17: "img/avatar-player14.png",
        AVATAR_LVL18: "img/avatar-player14.png",
        GOLDEN_BREAD: "img/golden-bread.png",
        BUY_BREAD_OUT: "img/buy-bread-out.png",
        BUY_BREAD_IN: "img/buy-bread-in.png",
        BUY_BREAD_CLICK: "img/buy-bread-click.png",
        GAUGE: "img/gauge.png",
        SEASON_4: "img/season-4-out.png",
        SEASON_4_IN: "img/season-4-in.png",
        SEASON_4_OUT: "img/season-4-click.png",
        SEASON4_BOX: "img/season4-box.png",
        SEASON_5: "img/season-5-out.png",
        SEASON_5_IN: "img/season-5-in.png",
        SEASON_5_OUT: "img/season-5-click.png",
        SEASON5_BOX: "img/season5-box.png",
        PROFILE_BOX: "img/profile2-box.png",
        SKINS_BOX: "img/skins-box.png",
        SHOP_BOX: "img/shop-box.png",
        PRIVATE_SERVER_BOX: "img/private-server-box.png",
        SERVER_LOCATION_BOX: "img/location-box.png",
        SERVER_DURATION_BOX: "img/server-duration-box.png",
        TUTORIAL_BOX: "img/tutorial-box.png",
        LEADERBOARD_BOX: "img/leaderboard1-box.png",
        BUY_BREAD_BOX: "img/buy-breads-box.png",
        BAG_BOX: "img/bag-box.png",
        CRATE_BOX: "img/deadbox-box.png",
        BOOK_BOX: "img/book-box.png",
        ACCESSORIES_BOX: "img/accessories-box.png",
        CUSTOM_SKIN_BOX: "img/customskin-box.png",
        BAG_REMAIN_BOX: "img/bag-lasts.png",
        SERVER_REMAIN_BOX: "img/server-lasts.png",
        SERVER_ACCESS_BOX: "img/server-access-box2.png",
        LOOT_BOX: "img/lootbox-box.png",
        CHANGE_NICKNAME1_BOX: "img/change-nickname0.png",
        CHANGE_NICKNAME0_BOX: "img/change-nickname1.png",
        CHEATING_BOX: "img/cheating-box.png",
        DAILY_QUEST_BOX: "img/daily-quest-box.png",
        DAILY_5_BREAD: "img/daily-5-bread.png",
        DAILY_10_BREAD: "img/daily-10-bread.png",
        DAILY_VALID: "img/daily-valid.png",
        NORMAL_PROFILE_OUT: "img/normal-profile-out.png",
        NORMAL_PROFILE_IN: "img/normal-profile-in.png",
        NORMAL_PROFILE_CLICK: "img/normal-profile-click.png",
        FOREST_PROFILE_OUT: "img/forest-profile-out.png",
        FOREST_PROFILE_IN: "img/forest-profile-in.png",
        FOREST_PROFILE_CLICK: "img/forest-profile-click.png",
        ZOMBIE_PROFILE_OUT: "img/zombie-profile-out.png",
        ZOMBIE_PROFILE_IN: "img/zombie-profile-in.png",
        ZOMBIE_PROFILE_CLICK: "img/zombie-profile-click.png",
        VAMPIRE_PROFILE_OUT: "img/vampire-profile-out.png",
        VAMPIRE_PROFILE_IN: "img/vampire-profile-in.png",
        VAMPIRE_PROFILE_CLICK: "img/vampire-profile-click.png",
        TOTAL_PROFILE_OUT: "img/total-profile-out.png",
        TOTAL_PROFILE_IN: "img/total-profile-in.png",
        TOTAL_PROFILE_CLICK: "img/total-profile-click.png",
        SEASON1_PROFILE_OUT: "img/season1-profile-out.png",
        SEASON1_PROFILE_IN: "img/season1-profile-in.png",
        SEASON1_PROFILE_CLICK: "img/season1-profile-click.png",
        SEASON2_PROFILE_OUT: "img/season2-profile-out.png",
        SEASON2_PROFILE_IN: "img/season2-profile-in.png",
        SEASON2_PROFILE_CLICK: "img/season2-profile-click.png",
        SEASON3_PROFILE_OUT: "img/season3-profile-out.png",
        SEASON3_PROFILE_IN: "img/season3-profile-in.png",
        SEASON3_PROFILE_CLICK: "img/season3-profile-click.png",
        SEASON4_PROFILE_OUT: "img/season4-profile-out.png",
        SEASON4_PROFILE_IN: "img/season4-profile-in.png",
        SEASON4_PROFILE_CLICK: "img/season4-profile-click.png",
        SEASON5_PROFILE_OUT: "img/season5-profile-out.png",
        SEASON5_PROFILE_IN: "img/season5-profile-in.png",
        SEASON5_PROFILE_CLICK: "img/season5-profile-click.png",
        LOCKED_SKIN_ALERT: "img/locked-skin-alert.png",
        LOCKED_CUSTOM_ALERT: "img/locked-custom-alert.png",
        RED_LOCKED: "img/bg-red-locked.png",
        SKIN_BUTTON_OUT: "img/skin-button-out.png",
        SKIN_BUTTON_IN: "img/skin-button-in.png",
        SKIN_BUTTON_CLICK: "img/skin-button-click.png",
        ACCESSORY_BUTTON_OUT: "img/accessory-button-out.png",
        ACCESSORY_BUTTON_IN: "img/accessory-button-in.png",
        ACCESSORY_BUTTON_CLICK: "img/accessory-button-click.png",
        BAG_BUTTON_OUT: "img/bag-button-out.png",
        BAG_BUTTON_IN: "img/bag-button-in.png",
        BAG_BUTTON_CLICK: "img/bag-button-click.png",
        BOOK_BUTTON_OUT: "img/book-button-out.png",
        BOOK_BUTTON_IN: "img/book-button-in.png",
        BOOK_BUTTON_CLICK: "img/book-button-click.png",
        CRATE_BUTTON_OUT: "img/deadbox-button-out.png",
        CRATE_BUTTON_IN: "img/deadbox-button-in.png",
        CRATE_BUTTON_CLICK: "img/deadbox-button-click.png",
        LOOT_BUTTON_OUT: "img/loot-button-out.png",
        LOOT_BUTTON_IN: "img/loot-button-in.png",
        LOOT_BUTTON_CLICK: "img/loot-button-click.png",
        FREE_ITEM_OUT: "img/free-item-out.png",
        FREE_ITEM_IN: "img/free-item-in.png",
        FREE_ITEM_CLICK: "img/free-item-click.png",
        WOOD_ITEM_OUT: "img/wood-item-out.png",
        WOOD_ITEM_IN: "img/wood-item-in.png",
        WOOD_ITEM_CLICK: "img/wood-item-click.png",
        STONE_ITEM_OUT: "img/stone-item.png",
        STONE_ITEM_IN: "img/stone-item-in.png",
        STONE_ITEM_CLICK: "img/stone-item-click.png",
        GOLD_ITEM_OUT: "img/gold-item.png",
        GOLD_ITEM_IN: "img/gold-item-in.png",
        GOLD_ITEM_CLICK: "img/gold-item-click.png",
        DIAMOND_ITEM_OUT: "img/diamond-item.png",
        DIAMOND_ITEM_IN: "img/diamond-item-in.png",
        DIAMOND_ITEM_CLICK: "img/diamond-item-click.png",
        AMETHYST_ITEM_OUT: "img/amethyst-item.png",
        AMETHYST_ITEM_IN: "img/amethyst-item-in.png",
        AMETHYST_ITEM_CLICK: "img/amethyst-item-click.png",
        REIDITE_ITEM_OUT: "img/reidite-item.png",
        REIDITE_ITEM_IN: "img/reidite-item-in.png",
        REIDITE_ITEM_CLICK: "img/reidite-item-click.png",
        SPECIAL_ITEM_OUT: "img/special-item-out.png",
        SPECIAL_ITEM_IN: "img/special-item-in.png",
        SPECIAL_ITEM_CLICK: "img/special-item-click.png",
        LEVEL_ITEM_OUT: "img/level-item-out.png",
        LEVEL_ITEM_IN: "img/level-item-in.png",
        LEVEL_ITEM_CLICK: "img/level-item-click.png",
        SKIN_PREVIOUS_OUT: "img/skin-previous-out.png",
        SKIN_PREVIOUS_IN: "img/skin-previous-in.png",
        SKIN_PREVIOUS_CLICK: "img/skin-previous-click.png",
        SKIN_NEXT_OUT: "img/skin-next-out.png",
        SKIN_NEXT_IN: "img/skin-next-in.png",
        SKIN_NEXT_CLICK: "img/skin-next-click.png",
        BACK_BUTTON_OUT: "img/back-button-out.png",
        BACK_BUTTON_IN: "img/back-button-in.png",
        BACK_BUTTON_CLICK: "img/back-button-click.png",
        GET_MORE_BUTTON_OUT: "img/get-more-button-out.png",
        GET_MORE_BUTTON_IN: "img/get-more-button-in.png",
        GET_MORE_BUTTON_CLICK: "img/get-more-button-click.png",
        CURRENCY1_OUT: "img/currency1-out.png",
        CURRENCY1_IN: "img/currency1-in.png",
        CURRENCY1_CLICK: "img/currency1-click.png",
        CURRENCY2_OUT: "img/currency2-out.png",
        CURRENCY2_IN: "img/currency2-in.png",
        CURRENCY2_CLICK: "img/currency2-click.png",
        CURRENCY3_OUT: "img/currency3-out.png",
        CURRENCY3_IN: "img/currency3-in.png",
        CURRENCY3_CLICK: "img/currency3-click.png",
        CURRENCY4_OUT: "img/currency4-out.png",
        CURRENCY4_IN: "img/currency4-in.png",
        CURRENCY4_CLICK: "img/currency4-click.png",
        CURRENCY5_OUT: "img/currency5-out.png",
        CURRENCY5_IN: "img/currency5-in.png",
        CURRENCY5_CLICK: "img/currency5-click.png",
        PRICE1_OUT: "img/price1-out.png",
        PRICE1_IN: "img/price1-in.png",
        PRICE1_CLICK: "img/price1-click.png",
        PRICE2_OUT: "img/price2-out.png",
        PRICE2_IN: "img/price2-in.png",
        PRICE2_CLICK: "img/price2-click.png",
        PRICE3_OUT: "img/price3-out.png",
        PRICE3_IN: "img/price3-in.png",
        PRICE3_CLICK: "img/price3-click.png",
        PRICE4_OUT: "img/price4-out.png",
        PRICE4_IN: "img/price4-in.png",
        PRICE4_CLICK: "img/price4-click.png",
        PRICE5_OUT: "img/price5-out.png",
        PRICE5_IN: "img/price5-in.png",
        PRICE5_CLICK: "img/price5-click.png",
        BUY_PRIVATE_SERVER_OUT: "img/buy-private-server-out.png",
        BUY_PRIVATE_SERVER_IN: "img/buy-private-server-in.png",
        BUY_PRIVATE_SERVER_CLICK: "img/buy-private-server-click.png",
        ATLANTA_OUT: "img/atlanta-out.png",
        ATLANTA_IN: "img/atlanta-in.png",
        ATLANTA_CLICK: "img/atlanta-click.png",
        DALLAS_OUT: "img/dallas-out.png",
        DALLAS_IN: "img/dallas-in.png",
        DALLAS_CLICK: "img/dallas-click.png",
        FREMONT_OUT: "img/fremont-out.png",
        FREMONT_IN: "img/fremont-in.png",
        FREMONT_CLICK: "img/fremont-click.png",
        NEWARK_OUT: "img/newark-out.png",
        NEWARK_IN: "img/newark-in.png",
        NEWARK_CLICK: "img/newark-click.png",
        TORONTO_OUT: "img/toronto-out.png",
        TORONTO_IN: "img/toronto-in.png",
        TORONTO_CLICK: "img/toronto-click.png",
        SINGAPORE_OUT: "img/singapore-out.png",
        SINGAPORE_IN: "img/singapore-in.png",
        SINGAPORE_CLICK: "img/singapore-click.png",
        FRANKFURT_OUT: "img/frankfurt-out.png",
        FRANKFURT_IN: "img/frankfurt-in.png",
        FRANKFURT_CLICK: "img/frankfurt-click.png",
        LONDON_OUT: "img/london-out.png",
        LONDON_IN: "img/london-in.png",
        LONDON_CLICK: "img/london-click.png",
        MUMBAI_OUT: "img/mumbai-out.png",
        MUMBAI_IN: "img/mumbai-in.png",
        MUMBAI_CLICK: "img/mumbai-click.png",
        TOKYO_OUT: "img/tokyo-out.png",
        TOKYO_IN: "img/tokyo-in.png",
        TOKYO_CLICK: "img/tokyo-click.png",
        YES_LOCATION_OUT: "img/yes-location-out.png",
        YES_LOCATION_IN: "img/yes-location-in.png",
        YES_LOCATION_CLICK: "img/yes-location-click.png",
        DAYS3_OUT: "img/3days-out.png",
        DAYS3_IN: "img/3days-in.png",
        DAYS3_CLICK: "img/3days-click.png",
        DAYS7_OUT: "img/7days-out.png",
        DAYS7_IN: "img/7days-in.png",
        DAYS7_CLICK: "img/7days-click.png",
        DAYS30_OUT: "img/30days-out.png",
        DAYS30_IN: "img/30days-in.png",
        DAYS30_CLICK: "img/30days-click.png",
        DAYS90_OUT: "img/90days-out.png",
        DAYS90_IN: "img/90days-in.png",
        DAYS90_CLICK: "img/90days-click.png",
        SPIN1: "img/spin1.png",
        SPIN2: "img/spin2.png",
        SPIN3: "img/spin3.png",
        SPIN4: "img/spin4.png",
        SPIN5: "img/spin5.png",
        SPIN6: "img/spin6.png",
        ARROW_SPIN: "img/arrow-spin.png",
        SPIN_BUTTON_1_OUT: "img/spin-button-1-out.png",
        SPIN_BUTTON_1_IN: "img/spin-button-1-in.png",
        SPIN_BUTTON_1_CLICK: "img/spin-button-1-click.png",
        SPIN_BUTTON_2_OUT: "img/spin-button-2-out.png",
        SPIN_BUTTON_2_IN: "img/spin-button-2-in.png",
        SPIN_BUTTON_2_CLICK: "img/spin-button-2-click.png",
        SPIN_BUTTON_3_OUT: "img/spin-button-3-out.png",
        SPIN_BUTTON_3_IN: "img/spin-button-3-in.png",
        SPIN_BUTTON_3_CLICK: "img/spin-button-3-click.png",
        SPIN_BUTTON_4_OUT: "img/spin-button-4-out.png",
        SPIN_BUTTON_4_IN: "img/spin-button-4-in.png",
        SPIN_BUTTON_4_CLICK: "img/spin-button-4-click.png",
        SPIN_BUTTON_5_OUT: "img/spin-button-5-out.png",
        SPIN_BUTTON_5_IN: "img/spin-button-5-in.png",
        SPIN_BUTTON_5_CLICK: "img/spin-button-5-click.png",
        SPIN_LIGHT: "img/spin-light.png",
        TUTO_WIKI_OUT: "img/tuto-wiki-out.png",
        TUTO_WIKI_IN: "img/tuto-wiki-in.png",
        TUTO_WIKI_CLICK: "img/tuto-wiki-click.png",
        TUTO_PREVIOUS_OUT: "img/tuto-previous-out.png",
        TUTO_PREVIOUS_IN: "img/tuto-previous-in.png",
        TUTO_PREVIOUS_CLICK: "img/tuto-previous-click.png",
        TUTO_NEXT_OUT: "img/tuto-next-out.png",
        TUTO_NEXT_IN: "img/tuto-next-in.png",
        TUTO_NEXT_CLICK: "img/tuto-next-click.png",
        TIME_LEADERBOARD_OUT: "img/time-leaderboard-out.png",
        TIME_LEADERBOARD_IN: "img/time-leaderboard-in.png",
        TIME_LEADERBOARD_CLICK: "img/time-leaderboard-click.png",
        SCORE_LEADERBOARD_OUT: "img/score-leaderboard-out.png",
        SCORE_LEADERBOARD_IN: "img/score-leaderboard-in.png",
        SCORE_LEADERBOARD_CLICK: "img/score-leaderboard-click.png",
        LVL_LEADERBOARD_OUT: "img/lvl-leaderboard-out.png",
        LVL_LEADERBOARD_IN: "img/lvl-leaderboard-in.png",
        LVL_LEADERBOARD_CLICK: "img/lvl-leaderboard-click.png",
        KILL_LEADERBOARD_OUT: "img/kill-leaderboard-out.png",
        KILL_LEADERBOARD_IN: "img/kill-leaderboard-in.png",
        KILL_LEADERBOARD_CLICK: "img/kill-leaderboard-click.png",
        ALL_LEADERBOARD_OUT: "img/all-leaderboard-out.png",
        ALL_LEADERBOARD_IN: "img/all-leaderboard-in.png",
        ALL_LEADERBOARD_CLICK: "img/all-leaderboard-click.png",
        TODAY_LEADERBOARD_OUT: "img/today-leaderboard-out.png",
        TODAY_LEADERBOARD_IN: "img/today-leaderboard-in.png",
        TODAY_LEADERBOARD_CLICK: "img/today-leaderboard-click.png",
        WEEK_LEADERBOARD_OUT: "img/week-leaderboard-out.png",
        WEEK_LEADERBOARD_IN: "img/week-leaderboard-in.png",
        WEEK_LEADERBOARD_CLICK: "img/week-leaderboard-click.png",
        SEASON1_LEADERBOARD_OUT: "img/season1-out.png",
        SEASON1_LEADERBOARD_IN: "img/season1-in.png",
        SEASON1_LEADERBOARD_CLICK: "img/season1-click.png",
        SEASON2_LEADERBOARD_OUT: "img/season2--out.png",
        SEASON2_LEADERBOARD_IN: "img/season2--in.png",
        SEASON2_LEADERBOARD_CLICK: "img/season2--click.png",
        SEASON3_LEADERBOARD_OUT: "img/season3-out.png",
        SEASON3_LEADERBOARD_IN: "img/season3-in.png",
        SEASON3_LEADERBOARD_CLICK: "img/season3-click.png",
        SEASON4_LEADERBOARD_OUT: "img/season4-out.png",
        SEASON4_LEADERBOARD_IN: "img/season4-in.png",
        SEASON4_LEADERBOARD_CLICK: "img/season4-click.png",
        SEASON5_LEADERBOARD_OUT: "img/season5-out.png",
        SEASON5_LEADERBOARD_IN: "img/season5-in.png",
        SEASON5_LEADERBOARD_CLICK: "img/season5-click.png",
        TOTAL_LEAD_OUT: "img/total-lead-out.png",
        TOTAL_LEAD_IN: "img/total-lead-in.png",
        TOTAL_LEAD_CLICK: "img/total-lead-click.png",
        NORMAL_LEAD_OUT: "img/normal-lead-out.png",
        NORMAL_LEAD_IN: "img/normal-lead-in.png",
        NORMAL_LEAD_CLICK: "img/normal-lead-click.png",
        FOREST_LEAD_OUT: "img/forest-lead-out.png",
        FOREST_LEAD_IN: "img/forest-lead-in.png",
        FOREST_LEAD_CLICK: "img/forest-lead-click.png",
        VAMPIRE_LEAD_OUT: "img/vampire-lead-out.png",
        VAMPIRE_LEAD_IN: "img/vampire-lead-in.png",
        VAMPIRE_LEAD_CLICK: "img/vampire-lead-click.png",
        ZOMBIE_LEAD_OUT: "img/zombie-lead-out.png",
        ZOMBIE_LEAD_IN: "img/zombie-lead-in.png",
        ZOMBIE_LEAD_CLICK: "img/zombie-lead-click.png",
        LEVEL5D: "img/day-level5.png",
        LEVEL5N: "img/night-level5.png",
        LEVEL10D: "img/day-level10.png",
        LEVEL10N: "img/night-level10.png",
        LEVEL15D: "img/day-level15.png",
        LEVEL15N: "img/night-level15.png",
        LEVEL20D: "img/day-level20.png",
        LEVEL20N: "img/night-level20.png",
        LEVEL25D: "img/day-level25.png",
        LEVEL25N: "img/night-level25.png",
        LEVEL30D: "img/day-level30.png",
        LEVEL30N: "img/night-level30.png",
        LEVEL35D: "img/day-level35.png",
        LEVEL35N: "img/night-level35.png",
        LEVEL40D: "img/day-level40.png",
        LEVEL40N: "img/night-level40.png",
        LEVEL45D: "img/day-level45.png",
        LEVEL45N: "img/night-level45.png",
        LEVEL50D: "img/day-level50.png",
        LEVEL50N: "img/night-level50.png",
        LEVEL55D: "img/day-level55.png",
        LEVEL55N: "img/night-level55.png",
        LEVEL60D: "img/day-level60.png",
        LEVEL60N: "img/night-level60.png",
        SKIN_DEVASTD: "img/day-skin-devast0.png",
        SKIN_DEVASTN: "img/night-skin-devast0.png",
        HAND_DEVASTD: "img/day-hand-devaster.png",
        HAND_DEVASTN: "img/night-hand-devaster.png",
        SKIN_STARD: "img/day-skin-star0.png",
        SKIN_STARN: "img/night-skin-star0.png",
        HAND_STARD: "img/day-hand-star0.png",
        HAND_STARN: "img/night-hand-star0.png",
        SKIN_VAMPIRED: "img/day-vampire.png",
        SKIN_VAMPIREN: "img/night-vampire.png",
        HAND_VAMPIRED: "img/day-hand-vampire.png",
        HAND_VAMPIREN: "img/night-hand-vampire.png",
        SKIN_ZOMBIED: "img/day-zombie.png",
        SKIN_ZOMBIEN: "img/night-zombie.png",
        HAND_ZOMBIED: "img/day-hand-zombie.png",
        HAND_ZOMBIEN: "img/night-hand-zombie.png",
        SKIN_ROBOTD: "img/day-skin113.png",
        SKIN_ROBOTN: "img/night-skin113.png",
        HAND_ROBOTD: "img/day-hand-skin113.png",
        HAND_ROBOTN: "img/night-hand-skin113.png",
        SKIN0D: "img/day-skin0.png",
        SKIN0N: "img/night-skin0.png",
        SKIN1D: "img/day-skin1.png",
        SKIN1N: "img/night-skin1.png",
        SKIN2D: "img/day-skin2.png",
        SKIN2N: "img/night-skin2.png",
        SKIN3D: "img/day-skin3.png",
        SKIN3N: "img/night-skin3.png",
        SKIN4D: "img/day-skin4.png",
        SKIN4N: "img/night-skin4.png",
        SKIN5D: "img/day-skin5.png",
        SKIN5N: "img/night-skin5.png",
        SKIN6D: "img/day-skin6.png",
        SKIN6N: "img/night-skin6.png",
        SKIN7D: "img/day-skin7.png",
        SKIN7N: "img/night-skin7.png",
        SKIN8D: "img/day-skin8.png",
        SKIN8N: "img/night-skin8.png",
        SKIN9D: "img/day-skin9.png",
        SKIN9N: "img/night-skin9.png",
        SKIN10D: "img/day-skin10.png",
        SKIN10N: "img/night-skin10.png",
        SKIN11D: "img/day-skin11.png",
        SKIN11N: "img/night-skin11.png",
        SKIN12D: "img/day-skin12.png",
        SKIN12N: "img/night-skin12.png",
        SKIN13D: "img/day-skin13.png",
        SKIN13N: "img/night-skin13.png",
        SKIN14D: "img/day-skin14.png",
        SKIN14N: "img/night-skin14.png",
        SKIN15D: "img/day-skin15.png",
        SKIN15N: "img/night-skin15.png",
        SKIN16D: "img/day-skin16.png",
        SKIN16N: "img/night-skin16.png",
        SKIN17D: "img/day-skin17.png",
        SKIN17N: "img/night-skin17.png",
        SKIN18D: "img/day-skin18.png",
        SKIN18N: "img/night-skin18.png",
        SKIN19D: "img/day-skin19.png",
        SKIN19N: "img/night-skin19.png",
        SKIN20D: "img/day-skin20.png",
        SKIN20N: "img/night-skin20.png",
        SKIN21D: "img/day-skin21.png",
        SKIN21N: "img/night-skin21.png",
        SKIN22D: "img/day-skin22.png",
        SKIN22N: "img/night-skin22.png",
        SKIN23D: "img/day-skin23.png",
        SKIN23N: "img/night-skin23.png",
        SKIN24D: "img/day-skin24.png",
        SKIN24N: "img/night-skin24.png",
        SKIN25D: "img/day-skin25.png",
        SKIN25N: "img/night-skin25.png",
        SKIN26D: "img/day-skin26.png",
        SKIN26N: "img/night-skin26.png",
        SKIN27D: "img/day-skin27.png",
        SKIN27N: "img/night-skin27.png",
        SKIN28D: "img/day-skin28.png",
        SKIN28N: "img/night-skin28.png",
        SKIN29D: "img/day-skin29.png",
        SKIN29N: "img/night-skin29.png",
        SKIN30D: "img/day-skin30.png",
        SKIN30N: "img/night-skin30.png",
        SKIN31D: "img/day-skin31.png",
        SKIN31N: "img/night-skin31.png",
        SKIN32D: "img/day-skin32.png",
        SKIN32N: "img/night-skin32.png",
        SKIN33D: "img/day-skin33.png",
        SKIN33N: "img/night-skin33.png",
        SKIN34D: "img/day-skin34.png",
        SKIN34N: "img/night-skin34.png",
        SKIN35D: "img/day-skin35.png",
        SKIN35N: "img/night-skin35.png",
        SKIN36D: "img/day-skin36.png",
        SKIN36N: "img/night-skin36.png",
        SKIN37D: "img/day-skin37.png",
        SKIN37N: "img/night-skin37.png",
        SKIN38D: "img/day-skin38.png",
        SKIN38N: "img/night-skin38.png",
        SKIN39D: "img/day-skin39.png",
        SKIN39N: "img/night-skin39.png",
        SKIN40D: "img/day-skin40.png",
        SKIN40N: "img/night-skin40.png",
        SKIN41D: "img/day-skin41.png",
        SKIN41N: "img/night-skin41.png",
        SKIN42D: "img/day-skin42.png",
        SKIN42N: "img/night-skin42.png",
        SKIN43D: "img/day-skin43.png",
        SKIN43N: "img/night-skin43.png",
        SKIN44D: "img/day-skin44.png",
        SKIN44N: "img/night-skin44.png",
        SKIN45D: "img/day-skin45.png",
        SKIN45N: "img/night-skin45.png",
        SKIN46D: "img/day-skin46.png",
        SKIN46N: "img/night-skin46.png",
        SKIN47D: "img/day-skin47.png",
        SKIN47N: "img/night-skin47.png",
        SKIN48D: "img/day-skin48.png",
        SKIN48N: "img/night-skin48.png",
        SKIN49D: "img/day-skin49.png",
        SKIN49N: "img/night-skin49.png",
        SKIN50D: "img/day-skin50.png",
        SKIN50N: "img/night-skin50.png",
        SKIN51D: "img/day-skin51.png",
        SKIN51N: "img/night-skin51.png",
        SKIN52D: "img/day-skin52.png",
        SKIN52N: "img/night-skin52.png",
        SKIN53D: "img/day-skin53.png",
        SKIN53N: "img/night-skin53.png",
        SKIN54D: "img/day-skin54.png",
        SKIN54N: "img/night-skin54.png",
        SKIN55D: "img/day-skin55.png",
        SKIN55N: "img/night-skin55.png",
        SKIN56D: "img/day-skin56.png",
        SKIN56N: "img/night-skin56.png",
        SKIN57D: "img/day-skin57.png",
        SKIN57N: "img/night-skin57.png",
        SKIN58D: "img/day-skin58.png",
        SKIN58N: "img/night-skin58.png",
        SKIN59D: "img/day-skin59.png",
        SKIN59N: "img/night-skin59.png",
        SKIN60D: "img/day-skin60.png",
        SKIN60N: "img/night-skin60.png",
        SKIN61D: "img/day-skin61.png",
        SKIN61N: "img/night-skin61.png",
        SKIN62D: "img/day-skin62.png",
        SKIN62N: "img/night-skin62.png",
        SKIN63D: "img/day-skin63.png",
        SKIN63N: "img/night-skin63.png",
        SKIN64D: "img/day-skin64.png",
        SKIN64N: "img/night-skin64.png",
        SKIN65D: "img/day-skin65.png",
        SKIN65N: "img/night-skin65.png",
        SKIN66D: "img/day-skin66.png",
        SKIN66N: "img/night-skin66.png",
        SKIN67D: "img/day-skin67.png",
        SKIN67N: "img/night-skin67.png",
        SKIN68D: "img/day-skin68.png",
        SKIN68N: "img/night-skin68.png",
        SKIN69D: "img/day-skin69.png",
        SKIN69N: "img/night-skin69.png",
        SKIN70D: "img/day-skin70.png",
        SKIN70N: "img/night-skin70.png",
        SKIN71D: "img/day-skin71.png",
        SKIN71N: "img/night-skin71.png",
        SKIN72D: "img/day-skin72.png",
        SKIN72N: "img/night-skin72.png",
        SKIN73D: "img/day-skin73.png",
        SKIN73N: "img/night-skin73.png",
        SKIN74D: "img/day-skin74.png",
        SKIN74N: "img/night-skin74.png",
        SKIN75D: "img/day-skin75.png",
        SKIN75N: "img/night-skin75.png",
        SKIN76D: "img/day-skin76.png",
        SKIN76N: "img/night-skin76.png",
        SKIN77D: "img/day-skin77.png",
        SKIN77N: "img/night-skin77.png",
        SKIN78D: "img/day-skin78.png",
        SKIN78N: "img/night-skin78.png",
        SKIN79D: "img/day-skin79.png",
        SKIN79N: "img/night-skin79.png",
        SKIN80D: "img/day-skin80.png",
        SKIN80N: "img/night-skin80.png",
        SKIN81D: "img/day-skin81.png",
        SKIN81N: "img/night-skin81.png",
        SKIN82D: "img/day-skin82.png",
        SKIN82N: "img/night-skin82.png",
        SKIN83D: "img/day-skin83.png",
        SKIN83N: "img/night-skin83.png",
        SKIN84D: "img/day-skin84.png",
        SKIN84N: "img/night-skin84.png",
        SKIN85D: "img/day-skin85.png",
        SKIN85N: "img/night-skin85.png",
        SKIN86D: "img/day-skin86.png",
        SKIN86N: "img/night-skin86.png",
        SKIN87D: "img/day-skin87.png",
        SKIN87N: "img/night-skin87.png",
        SKIN88D: "img/day-skin88.png",
        SKIN88N: "img/night-skin88.png",
        SKIN89D: "img/day-skin89.png",
        SKIN89N: "img/night-skin89.png",
        SKIN90D: "img/day-skin90.png",
        SKIN90N: "img/night-skin90.png",
        SKIN91D: "img/day-skin91.png",
        SKIN91N: "img/night-skin91.png",
        SKIN92D: "img/day-skin92.png",
        SKIN92N: "img/night-skin92.png",
        SKIN93D: "img/day-skin93.png",
        SKIN93N: "img/night-skin93.png",
        SKIN94D: "img/day-skin94.png",
        SKIN94N: "img/night-skin94.png",
        SKIN95D: "img/day-skin95.png",
        SKIN95N: "img/night-skin95.png",
        SKIN96D: "img/day-skin96.png",
        SKIN96N: "img/night-skin96.png",
        SKIN97D: "img/day-skin97.png",
        SKIN97N: "img/night-skin97.png",
        SKIN98D: "img/day-skin98.png",
        SKIN98N: "img/night-skin98.png",
        SKIN99D: "img/day-skin99.png",
        SKIN99N: "img/night-skin99.png",
        SKIN100D: "img/day-skin100.png",
        SKIN100N: "img/night-skin100.png",
        SKIN101D: "img/day-skin101.png",
        SKIN101N: "img/night-skin101.png",
        SKIN102D: "img/day-skin102.png",
        SKIN102N: "img/night-skin102.png",
        SKIN103D: "img/day-skin103.png",
        SKIN103N: "img/night-skin103.png",
        SKIN104D: "img/day-skin104.png",
        SKIN104N: "img/night-skin104.png",
        SKIN105D: "img/day-skin105.png",
        SKIN105N: "img/night-skin105.png",
        SKIN106D: "img/day-skin106.png",
        SKIN106N: "img/night-skin106.png",
        SKIN107D: "img/day-skin107.png",
        SKIN107N: "img/night-skin107.png",
        SKIN108D: "img/day-skin108.png",
        SKIN108N: "img/night-skin108.png",
        SKIN109D: "img/day-skin109.png",
        SKIN109N: "img/night-skin109.png",
        SKIN110D: "img/day-skin110.png",
        SKIN110N: "img/night-skin110.png",
        SKIN111D: "img/day-skin111.png",
        SKIN111N: "img/night-skin111.png",
        SKIN112D: "img/day-skin112.png",
        SKIN112N: "img/night-skin112.png",
        SKIN113D: "img/day-skin113.png",
        SKIN113N: "img/night-skin113.png",
        SKIN114D: "img/day-skin114.png",
        SKIN114N: "img/night-skin114.png",
        SKIN115D: "img/day-skin115.png",
        SKIN115N: "img/night-skin115.png",
        SKIN116D: "img/day-skin116.png",
        SKIN116N: "img/night-skin116.png",
        SKIN117D: "img/day-skin117.png",
        SKIN117N: "img/night-skin117.png",
        SKIN118D: "img/day-skin118.png",
        SKIN118N: "img/night-skin118.png",
        SKIN119D: "img/day-skin119.png",
        SKIN119N: "img/night-skin119.png",
        SKIN120D: "img/day-skin120.png",
        SKIN120N: "img/night-skin120.png",
        SKIN121D: "img/day-skin121.png",
        SKIN121N: "img/night-skin121.png",
        SKIN122D: "img/day-skin122.png",
        SKIN122N: "img/night-skin122.png",
        SKIN123D: "img/day-skin123.png",
        SKIN123N: "img/night-skin123.png",
        SKIN124D: "img/day-skin124.png",
        SKIN124N: "img/night-skin124.png",
        SKIN125D: "img/day-skin125.png",
        SKIN125N: "img/night-skin125.png",
        SKIN126D: "img/day-skin126.png",
        SKIN126N: "img/night-skin126.png",
        SKIN127D: "img/day-skin127.png",
        SKIN127N: "img/night-skin127.png",
        SKIN128D: "img/day-skin128.png",
        SKIN128N: "img/night-skin128.png",
        SKIN129D: "img/day-skin129.png",
        SKIN129N: "img/night-skin129.png",
        SKIN130D: "img/day-skin130-1.png",
        SKIN130N: "img/night-skin130-1.png",
        SKIN131D: "img/day-skin131.png",
        SKIN131N: "img/night-skin131.png",
        SKIN132D: "img/day-skin132.png",
        SKIN132N: "img/night-skin132.png",
        SKIN133D: "img/day-skin133.png",
        SKIN133N: "img/night-skin133.png",
        SKIN134D: "img/day-skin134.png",
        SKIN134N: "img/night-skin134.png",
        SKIN135D: "img/day-skin135.png",
        SKIN135N: "img/night-skin135.png",
        SKIN136D: "img/day-skin136.png",
        SKIN136N: "img/night-skin136.png",
        SKIN137D: "img/day-skin137.png",
        SKIN137N: "img/night-skin137.png",
        SKIN138D: "img/day-skin138.png",
        SKIN138N: "img/night-skin138.png",
        SKIN139D: "img/day-skin139.png",
        SKIN139N: "img/night-skin139.png",
        SKIN140D: "img/day-skin140.png",
        SKIN140N: "img/night-skin140.png",
        SKIN141D: "img/day-skin141.png",
        SKIN141N: "img/night-skin141.png",
        SKIN142D: "img/day-skin142.png",
        SKIN142N: "img/night-skin142.png",
        SKIN143D: "img/day-skin143.png",
        SKIN143N: "img/night-skin143.png",
        SKIN144D: "img/day-skin144.png",
        SKIN144N: "img/night-skin144.png",
        SKIN145D: "img/day-skin145.png",
        SKIN145N: "img/night-skin145.png",
        SKIN146D: "img/day-skin146.png",
        SKIN146N: "img/night-skin146.png",
        SKIN147D: "img/day-skin147.png",
        SKIN147N: "img/night-skin147.png",
        SKIN148D: "img/day-skin148.png",
        SKIN148N: "img/night-skin148.png",
        SKIN149D: "img/day-skin149.png",
        SKIN149N: "img/night-skin149.png",
        SKIN150D: "img/day-skin150.png",
        SKIN150N: "img/night-skin150.png",
        HAND_SKIN0D: "img/day-hand-skin0.png",
        HAND_SKIN0N: "img/night-hand-skin0.png",
        HAND_SKIN1D: "img/day-hand-skin1.png",
        HAND_SKIN1N: "img/night-hand-skin1.png",
        HAND_SKIN2D: "img/day-hand-skin2.png",
        HAND_SKIN2N: "img/night-hand-skin2.png",
        HAND_SKIN3D: "img/day-hand-skin3.png",
        HAND_SKIN3N: "img/night-hand-skin3.png",
        HAND_SKIN4D: "img/day-hand-skin4.png",
        HAND_SKIN4N: "img/night-hand-skin4.png",
        HAND_SKIN5D: "img/day-hand-skin5.png",
        HAND_SKIN5N: "img/night-hand-skin5.png",
        HAND_SKIN6D: "img/day-hand-skin6.png",
        HAND_SKIN6N: "img/night-hand-skin6.png",
        HAND_SKIN7D: "img/day-hand-skin6.png",
        HAND_SKIN7N: "img/night-hand-skin6.png",
        HAND_SKIN8D: "img/day-hand-skin8.png",
        HAND_SKIN8N: "img/night-hand-skin8.png",
        HAND_SKIN9D: "img/day-hand-skin9.png",
        HAND_SKIN9N: "img/night-hand-skin9.png",
        HAND_SKIN10D: "img/day-hand-skin10.png",
        HAND_SKIN10N: "img/night-hand-skin10.png",
        HAND_SKIN11D: "img/day-hand-skin11.png",
        HAND_SKIN11N: "img/night-hand-skin11.png",
        HAND_SKIN12D: "img/day-hand-skin12.png",
        HAND_SKIN12N: "img/night-hand-skin12.png",
        HAND_SKIN13D: "img/day-hand-skin13.png",
        HAND_SKIN13N: "img/night-hand-skin13.png",
        HAND_SKIN14D: "img/day-hand-skin14.png",
        HAND_SKIN14N: "img/night-hand-skin14.png",
        HAND_SKIN15D: "img/day-hand-skin15.png",
        HAND_SKIN15N: "img/night-hand-skin15.png",
        HAND_SKIN16D: "img/day-hand-skin16.png",
        HAND_SKIN16N: "img/night-hand-skin16.png",
        HAND_SKIN17D: "img/day-hand-skin17.png",
        HAND_SKIN17N: "img/night-hand-skin17.png",
        HAND_SKIN18D: "img/day-hand-skin18.png",
        HAND_SKIN18N: "img/night-hand-skin18.png",
        HAND_SKIN19D: "img/day-hand-skin19.png",
        HAND_SKIN19N: "img/night-hand-skin19.png",
        HAND_SKIN20D: "img/day-hand-skin20.png",
        HAND_SKIN20N: "img/night-hand-skin20.png",
        HAND_SKIN21D: "img/day-hand-skin21.png",
        HAND_SKIN21N: "img/night-hand-skin21.png",
        HAND_SKIN22D: "img/day-hand-skin22.png",
        HAND_SKIN22N: "img/night-hand-skin22.png",
        HAND_SKIN23D: "img/day-hand-skin23.png",
        HAND_SKIN23N: "img/night-hand-skin23.png",
        HAND_SKIN24D: "img/day-hand-skin24.png",
        HAND_SKIN24N: "img/night-hand-skin24.png",
        HAND_SKIN25D: "img/day-hand-skin25.png",
        HAND_SKIN25N: "img/night-hand-skin25.png",
        HAND_SKIN26D: "img/day-hand-skin26.png",
        HAND_SKIN26N: "img/night-hand-skin26.png",
        HAND_SKIN27D: "img/day-hand-skin27.png",
        HAND_SKIN27N: "img/night-hand-skin27.png",
        HAND_SKIN28D: "img/day-hand-skin28.png",
        HAND_SKIN28N: "img/night-hand-skin28.png",
        HAND_SKIN29D: "img/day-hand-skin29.png",
        HAND_SKIN29N: "img/night-hand-skin29.png",
        HAND_SKIN30D: "img/day-hand-skin30.png",
        HAND_SKIN30N: "img/night-hand-skin30.png",
        HAND_SKIN31D: "img/day-hand-skin31.png",
        HAND_SKIN31N: "img/night-hand-skin31.png",
        HAND_SKIN32D: "img/day-hand-skin32.png",
        HAND_SKIN32N: "img/night-hand-skin32.png",
        HAND_SKIN33D: "img/day-hand-skin33.png",
        HAND_SKIN33N: "img/night-hand-skin33.png",
        HAND_SKIN34D: "img/day-hand-skin34.png",
        HAND_SKIN34N: "img/night-hand-skin34.png",
        HAND_SKIN35D: "img/day-hand-skin35.png",
        HAND_SKIN35N: "img/night-hand-skin35.png",
        HAND_SKIN36D: "img/day-hand-skin36.png",
        HAND_SKIN36N: "img/night-hand-skin36.png",
        HAND_SKIN37D: "img/day-hand-skin37.png",
        HAND_SKIN37N: "img/night-hand-skin37.png",
        HAND_SKIN38D: "img/day-hand-skin38.png",
        HAND_SKIN38N: "img/night-hand-skin38.png",
        HAND_SKIN39D: "img/day-hand-skin39.png",
        HAND_SKIN39N: "img/night-hand-skin39.png",
        HAND_SKIN40D: "img/day-hand-skin40.png",
        HAND_SKIN40N: "img/night-hand-skin40.png",
        HAND_SKIN41D: "img/day-hand-skin41.png",
        HAND_SKIN41N: "img/night-hand-skin41.png",
        HAND_SKIN42D: "img/day-hand-skin42.png",
        HAND_SKIN42N: "img/night-hand-skin42.png",
        HAND_SKIN43D: "img/day-hand-skin43.png",
        HAND_SKIN43N: "img/night-hand-skin43.png",
        HAND_SKIN44D: "img/day-hand-skin16.png",
        HAND_SKIN44N: "img/night-hand-skin16.png",
        HAND_SKIN45D: "img/day-hand-skin45.png",
        HAND_SKIN45N: "img/night-hand-skin45.png",
        HAND_SKIN46D: "img/day-hand-skin46.png",
        HAND_SKIN46N: "img/night-hand-skin46.png",
        HAND_SKIN47D: "img/day-hand-skin47.png",
        HAND_SKIN47N: "img/night-hand-skin47.png",
        HAND_SKIN48D: "img/day-hand-skin48.png",
        HAND_SKIN48N: "img/night-hand-skin48.png",
        HAND_SKIN49D: "img/day-hand-skin49.png",
        HAND_SKIN49N: "img/night-hand-skin49.png",
        HAND_SKIN50D: "img/day-hand-skin49.png",
        HAND_SKIN50N: "img/night-hand-skin49.png",
        HAND_SKIN51D: "img/day-hand-skin51.png",
        HAND_SKIN51N: "img/night-hand-skin51.png",
        HAND_SKIN52D: "img/day-hand-skin52.png",
        HAND_SKIN52N: "img/night-hand-skin52.png",
        HAND_SKIN53D: "img/day-hand-skin53.png",
        HAND_SKIN53N: "img/night-hand-skin53.png",
        HAND_SKIN54D: "img/day-hand-skin53.png",
        HAND_SKIN54N: "img/night-hand-skin53.png",
        HAND_SKIN55D: "img/day-hand-skin55.png",
        HAND_SKIN55N: "img/night-hand-skin55.png",
        HAND_SKIN56D: "img/day-hand-skin56.png",
        HAND_SKIN56N: "img/night-hand-skin56.png",
        HAND_SKIN57D: "img/day-hand-skin57.png",
        HAND_SKIN57N: "img/night-hand-skin57.png",
        HAND_SKIN58D: "img/day-hand-skin58.png",
        HAND_SKIN58N: "img/night-hand-skin58.png",
        HAND_SKIN59D: "img/day-hand-skin59.png",
        HAND_SKIN59N: "img/night-hand-skin59.png",
        HAND_SKIN60D: "img/day-hand-skin61.png",
        HAND_SKIN60N: "img/night-hand-skin61.png",
        HAND_SKIN61D: "img/day-hand-skin61.png",
        HAND_SKIN61N: "img/night-hand-skin61.png",
        HAND_SKIN62D: "img/day-hand-skin62.png",
        HAND_SKIN62N: "img/night-hand-skin62.png",
        HAND_SKIN63D: "img/day-hand-skin63.png",
        HAND_SKIN63N: "img/night-hand-skin63.png",
        HAND_SKIN64D: "img/day-hand-skin64.png",
        HAND_SKIN64N: "img/night-hand-skin64.png",
        HAND_SKIN65D: "img/day-hand-skin65.png",
        HAND_SKIN65N: "img/night-hand-skin65.png",
        HAND_SKIN66D: "img/day-hand-skin66.png",
        HAND_SKIN66N: "img/night-hand-skin66.png",
        HAND_SKIN67D: "img/day-hand-skin67.png",
        HAND_SKIN67N: "img/night-hand-skin67.png",
        HAND_SKIN68D: "img/day-hand-skin68.png",
        HAND_SKIN68N: "img/night-hand-skin68.png",
        HAND_SKIN69D: "img/day-hand-skin69.png",
        HAND_SKIN69N: "img/night-hand-skin69.png",
        HAND_SKIN70D: "img/day-hand-skin70.png",
        HAND_SKIN70N: "img/night-hand-skin70.png",
        HAND_SKIN71D: "img/day-hand-skin71.png",
        HAND_SKIN71N: "img/night-hand-skin71.png",
        HAND_SKIN72D: "img/day-hand-skin72.png",
        HAND_SKIN72N: "img/night-hand-skin72.png",
        HAND_SKIN73D: "img/day-hand-skin73.png",
        HAND_SKIN73N: "img/night-hand-skin73.png",
        HAND_SKIN74D: "img/day-hand-skin74.png",
        HAND_SKIN74N: "img/night-hand-skin74.png",
        HAND_SKIN75D: "img/day-hand-skin75.png",
        HAND_SKIN75N: "img/night-hand-skin75.png",
        HAND_SKIN76D: "img/day-hand-skin76.png",
        HAND_SKIN76N: "img/night-hand-skin76.png",
        HAND_SKIN77D: "img/day-hand-skin77.png",
        HAND_SKIN77N: "img/night-hand-skin77.png",
        HAND_SKIN78D: "img/day-hand-skin78.png",
        HAND_SKIN78N: "img/night-hand-skin78.png",
        HAND_SKIN79D: "img/day-hand-skin79.png",
        HAND_SKIN79N: "img/night-hand-skin79.png",
        HAND_SKIN80D: "img/day-hand-skin80.png",
        HAND_SKIN80N: "img/night-hand-skin80.png",
        HAND_SKIN81D: "img/day-hand-skin81.png",
        HAND_SKIN81N: "img/night-hand-skin81.png",
        HAND_SKIN82D: "img/day-hand-skin82.png",
        HAND_SKIN82N: "img/night-hand-skin82.png",
        HAND_SKIN83D: "img/day-hand-skin83.png",
        HAND_SKIN83N: "img/night-hand-skin83.png",
        HAND_SKIN84D: "img/day-hand-skin84.png",
        HAND_SKIN84N: "img/night-hand-skin84.png",
        HAND_SKIN85D: "img/day-hand-skin85.png",
        HAND_SKIN85N: "img/night-hand-skin85.png",
        HAND_SKIN86D: "img/day-hand-skin86.png",
        HAND_SKIN86N: "img/night-hand-skin86.png",
        HAND_SKIN87D: "img/day-hand-skin87.png",
        HAND_SKIN87N: "img/night-hand-skin87.png",
        HAND_SKIN88D: "img/day-hand-skin88.png",
        HAND_SKIN88N: "img/night-hand-skin88.png",
        HAND_SKIN89D: "img/day-hand-skin89.png",
        HAND_SKIN89N: "img/night-hand-skin89.png",
        HAND_SKIN90D: "img/day-hand-skin90.png",
        HAND_SKIN90N: "img/night-hand-skin90.png",
        HAND_SKIN91D: "img/day-hand-skin91.png",
        HAND_SKIN91N: "img/night-hand-skin91.png",
        HAND_SKIN92D: "img/day-hand-skin92.png",
        HAND_SKIN92N: "img/night-hand-skin92.png",
        HAND_SKIN93D: "img/day-hand-skin93.png",
        HAND_SKIN93N: "img/night-hand-skin93.png",
        HAND_SKIN94D: "img/day-hand-skin94.png",
        HAND_SKIN94N: "img/night-hand-skin94.png",
        HAND_SKIN95D: "img/day-hand-skin95.png",
        HAND_SKIN95N: "img/night-hand-skin95.png",
        HAND_SKIN96D: "img/day-hand-skin96.png",
        HAND_SKIN96N: "img/night-hand-skin96.png",
        HAND_SKIN97D: "img/day-hand-skin97.png",
        HAND_SKIN97N: "img/night-hand-skin97.png",
        HAND_SKIN98D: "img/day-hand-skin98.png",
        HAND_SKIN98N: "img/night-hand-skin98.png",
        HAND_SKIN99D: "img/day-hand-skin99.png",
        HAND_SKIN99N: "img/night-hand-skin99.png",
        HAND_SKIN100D: "img/day-hand-skin100.png",
        HAND_SKIN100N: "img/night-hand-skin100.png",
        HAND_SKIN101D: "img/day-hand-skin101.png",
        HAND_SKIN101N: "img/night-hand-skin101.png",
        HAND_SKIN102D: "img/day-hand-skin102.png",
        HAND_SKIN102N: "img/night-hand-skin102.png",
        HAND_SKIN103D: "img/day-hand-skin103.png",
        HAND_SKIN103N: "img/night-hand-skin103.png",
        HAND_SKIN104D: "img/day-hand-skin104.png",
        HAND_SKIN104N: "img/night-hand-skin104.png",
        HAND_SKIN105D: "img/day-hand-skin105.png",
        HAND_SKIN105N: "img/night-hand-skin105.png",
        HAND_SKIN106D: "img/day-hand-skin106.png",
        HAND_SKIN106N: "img/night-hand-skin106.png",
        HAND_SKIN107D: "img/day-hand-skin107.png",
        HAND_SKIN107N: "img/night-hand-skin107.png",
        HAND_SKIN108D: "img/day-hand-skin108.png",
        HAND_SKIN108N: "img/night-hand-skin108.png",
        HAND_SKIN109D: "img/day-hand-skin109.png",
        HAND_SKIN109N: "img/night-hand-skin109.png",
        HAND_SKIN110D: "img/day-hand-skin110.png",
        HAND_SKIN110N: "img/night-hand-skin110.png",
        HAND_SKIN111D: "img/day-hand-skin111.png",
        HAND_SKIN111N: "img/night-hand-skin111.png",
        HAND_SKIN112D: "img/day-hand-skin112.png",
        HAND_SKIN112N: "img/night-hand-skin112.png",
        HAND_SKIN113D: "img/day-hand-skin113.png",
        HAND_SKIN113N: "img/night-hand-skin113.png",
        HAND_SKIN114D: "img/day-hand-skin114.png",
        HAND_SKIN114N: "img/night-hand-skin114.png",
        HAND_SKIN115D: "img/day-hand-skin115.png",
        HAND_SKIN115N: "img/night-hand-skin115.png",
        HAND_SKIN116D: "img/day-hand-skin116.png",
        HAND_SKIN116N: "img/night-hand-skin116.png",
        HAND_SKIN117D: "img/day-hand-skin117.png",
        HAND_SKIN117N: "img/night-hand-skin117.png",
        HAND_SKIN118D: "img/day-hand-skin118.png",
        HAND_SKIN118N: "img/night-hand-skin118.png",
        HAND_SKIN119D: "img/day-hand-skin119.png",
        HAND_SKIN119N: "img/night-hand-skin119.png",
        HAND_SKIN120D: "img/day-hand-skin120.png",
        HAND_SKIN120N: "img/night-hand-skin120.png",
        HAND_SKIN121D: "img/day-hand-skin122.png",
        HAND_SKIN121N: "img/night-hand-skin122.png",
        HAND_SKIN122D: "img/day-hand-skin122.png",
        HAND_SKIN122N: "img/night-hand-skin122.png",
        HAND_SKIN123D: "img/day-hand-skin122.png",
        HAND_SKIN123N: "img/night-hand-skin122.png",
        HAND_SKIN124D: "img/day-hand-skin124.png",
        HAND_SKIN124N: "img/night-hand-skin124.png",
        HAND_SKIN125D: "img/day-hand-skin125.png",
        HAND_SKIN125N: "img/night-hand-skin125.png",
        HAND_SKIN126D: "img/day-hand-skin126.png",
        HAND_SKIN126N: "img/night-hand-skin126.png",
        HAND_SKIN127D: "img/day-hand-skin127.png",
        HAND_SKIN127N: "img/night-hand-skin127.png",
        HAND_SKIN128D: "img/day-hand-skin128.png",
        HAND_SKIN128N: "img/night-hand-skin128.png",
        HAND_SKIN129D: "img/day-hand-skin129.png",
        HAND_SKIN129N: "img/night-hand-skin129.png",
        HAND_SKIN130D: "img/day-hand-skin130.png",
        HAND_SKIN130N: "img/night-hand-skin130.png",
        HAND_SKIN131D: "img/day-hand-skin131.png",
        HAND_SKIN131N: "img/night-hand-skin131.png",
        HAND_SKIN132D: "img/day-hand-skin130.png",
        HAND_SKIN132N: "img/night-hand-skin130.png",
        HAND_SKIN133D: "img/day-hand-skin133.png",
        HAND_SKIN133N: "img/night-hand-skin133.png",
        HAND_SKIN134D: "img/day-hand-skin134.png",
        HAND_SKIN134N: "img/night-hand-skin134.png",
        HAND_SKIN135D: "img/day-hand-skin135.png",
        HAND_SKIN135N: "img/night-hand-skin135.png",
        HAND_SKIN136D: "img/day-hand-skin136.png",
        HAND_SKIN136N: "img/night-hand-skin136.png",
        HAND_SKIN137D: "img/day-hand-skin137.png",
        HAND_SKIN137N: "img/night-hand-skin137.png",
        HAND_SKIN138D: "img/day-hand-skin138.png",
        HAND_SKIN138N: "img/night-hand-skin138.png",
        HAND_SKIN139D: "img/day-hand-skin139.png",
        HAND_SKIN139N: "img/night-hand-skin139.png",
        HAND_SKIN140D: "img/day-hand-skin140.png",
        HAND_SKIN140N: "img/night-hand-skin140.png",
        HAND_SKIN141D: "img/day-hand-skin141.png",
        HAND_SKIN141N: "img/night-hand-skin141.png",
        HAND_SKIN142D: "img/day-hand-skin142.png",
        HAND_SKIN142N: "img/night-hand-skin142.png",
        HAND_SKIN143D: "img/day-hand-skin143.png",
        HAND_SKIN143N: "img/night-hand-skin143.png",
        HAND_SKIN144D: "img/day-hand-skin144.png",
        HAND_SKIN144N: "img/night-hand-skin144.png",
        HAND_SKIN145D: "img/day-hand-skin145.png",
        HAND_SKIN145N: "img/night-hand-skin145.png",
        HAND_SKIN146D: "img/day-hand-skin146.png",
        HAND_SKIN146N: "img/night-hand-skin146.png",
        HAND_SKIN147D: "img/day-hand-skin147.png",
        HAND_SKIN147N: "img/night-hand-skin147.png",
        HAND_SKIN148D: "img/day-hand-skin148.png",
        HAND_SKIN148N: "img/night-hand-skin148.png",
        HAND_SKIN149D: "img/day-hand-skin149.png",
        HAND_SKIN149N: "img/night-hand-skin149.png",
        HAND_SKIN150D: "img/day-hand-skin150.png",
        HAND_SKIN150N: "img/night-hand-skin150.png",
        BAG_STARD: "img/day-bag-star0.png",
        BAG_STARN: "img/night-bag-star0.png",
        BAG0D: "img/day-bag0.png",
        BAG0N: "img/night-bag0.png",
        BAG1D: "img/day-bag1.png",
        BAG1N: "img/night-bag1.png",
        BAG2D: "img/day-bag2.png",
        BAG2N: "img/night-bag2.png",
        BAG3D: "img/day-bag3.png",
        BAG3N: "img/night-bag3.png",
        BAG4D: "img/day-bag4.png",
        BAG4N: "img/night-bag4.png",
        BAG5D: "img/day-bag5.png",
        BAG5N: "img/night-bag5.png",
        BAG6D: "img/day-bag6.png",
        BAG6N: "img/night-bag6.png",
        BAG7D: "img/day-bag7.png",
        BAG7N: "img/night-bag7.png",
        BAG8D: "img/day-bag8.png",
        BAG8N: "img/night-bag8.png",
        BAG9D: "img/day-bag9.png",
        BAG9N: "img/night-bag9.png",
        BAG10D: "img/day-bag10.png",
        BAG10N: "img/night-bag10.png",
        BAG11D: "img/day-bag11.png",
        BAG11N: "img/night-bag11.png",
        BAG13D: "img/day-bag13.png",
        BAG13N: "img/night-bag13.png",
        BAG14D: "img/day-bag14.png",
        BAG14N: "img/night-bag14.png",
        BAG16D: "img/day-bag16.png",
        BAG16N: "img/night-bag16.png",
        BAG17D: "img/day-bag17.png",
        BAG17N: "img/night-bag17.png",
        BAG18D: "img/day-bag18.png",
        BAG18N: "img/night-bag18.png",
        BAG19D: "img/day-bag19.png",
        BAG19N: "img/night-bag19.png",
        BAG20D: "img/day-bag20.png",
        BAG20N: "img/night-bag20.png",
        BAG21D: "img/day-bag21.png",
        BAG21N: "img/night-bag21.png",
        BAG22D: "img/day-bag22.png",
        BAG22N: "img/night-bag22.png",
        BAG23D: "img/day-bag23.png",
        BAG23N: "img/night-bag23.png",
        BAG24D: "img/day-bag24.png",
        BAG24N: "img/night-bag24.png",
        BAG25D: "img/day-bag25.png",
        BAG25N: "img/night-bag25.png",
        BAG26D: "img/day-bag26.png",
        BAG26N: "img/night-bag26.png",
        BAG27D: "img/day-bag27.png",
        BAG27N: "img/night-bag27.png",
        BAG28D: "img/day-bag28.png",
        BAG28N: "img/night-bag28.png",
        BAG29D: "img/day-bag29.png",
        BAG29N: "img/night-bag29.png",
        BAG30D: "img/day-bag30.png",
        BAG30N: "img/night-bag30.png",
        BAG31D: "img/day-bag31.png",
        BAG31N: "img/night-bag31.png",
        BAG32D: "img/day-bag32.png",
        BAG32N: "img/night-bag32.png",
        BAG33D: "img/day-bag33.png",
        BAG33N: "img/night-bag33.png",
        BAG34D: "img/day-bag34.png",
        BAG34N: "img/night-bag34.png",
        BAG35D: "img/day-bag35.png",
        BAG35N: "img/night-bag35.png",
        BAG36D: "img/day-bag36.png",
        BAG36N: "img/night-bag36.png",
        BAG37D: "img/day-bag37.png",
        BAG37N: "img/night-bag37.png",
        BAG38D: "img/day-bag38.png",
        BAG38N: "img/night-bag38.png",
        BAG39D: "img/day-bag39.png",
        BAG39N: "img/night-bag39.png",
        BAG40D: "img/day-bag40.png",
        BAG40N: "img/night-bag40.png",
        BAG41D: "img/day-bag41.png",
        BAG41N: "img/night-bag41.png",
        BAG42D: "img/day-bag42.png",
        BAG42N: "img/night-bag42.png",
        BAG43D: "img/day-bag43.png",
        BAG43N: "img/night-bag43.png",
        BAG44D: "img/day-bag44.png",
        BAG44N: "img/night-bag44.png",
        BAG45D: "img/day-bag45.png",
        BAG45N: "img/night-bag45.png",
        BAG46D: "img/day-bag46.png",
        BAG46N: "img/night-bag46.png",
        BAG47D: "img/day-bag47.png",
        BAG47N: "img/night-bag47.png",
        BAG48D: "img/day-bag48.png",
        BAG48N: "img/night-bag48.png",
        BAG49D: "img/day-bag49.png",
        BAG49N: "img/night-bag49.png",
        BAG50D: "img/day-bag50.png",
        BAG50N: "img/night-bag50.png",
        BAG51D: "img/day-bag51.png",
        BAG51N: "img/night-bag51.png",
        BAG52D: "img/day-bag52.png",
        BAG52N: "img/night-bag52.png",
        BAG53D: "img/day-bag53.png",
        BAG53N: "img/night-bag53.png",
        BAG54D: "img/day-bag54.png",
        BAG54N: "img/night-bag54.png",
        BAG55D: "img/day-bag55.png",
        BAG55N: "img/night-bag55.png",
        BAG56D: "img/day-bag56.png",
        BAG56N: "img/night-bag56.png",
        BAG57D: "img/day-bag57.png",
        BAG57N: "img/night-bag57.png",
        BAG58D: "img/day-bag58.png",
        BAG58N: "img/night-bag58.png",
        BAG59D: "img/day-bag59.png",
        BAG59N: "img/night-bag59.png",
        BAG60D: "img/day-bag60.png",
        BAG60N: "img/night-bag60.png",
        BAG61D: "img/day-bag61.png",
        BAG61N: "img/night-bag61.png",
        BAG62D: "img/day-bag62.png",
        BAG62N: "img/night-bag62.png",
        BAG63D: "img/day-bag63.png",
        BAG63N: "img/night-bag63.png",
        BAG64D: "img/day-bag64.png",
        BAG64N: "img/night-bag64.png",
        BAG65D: "img/day-bag65.png",
        BAG65N: "img/night-bag65.png",
        BAG66D: "img/day-bag66.png",
        BAG66N: "img/night-bag66.png",
        BAG67D: "img/day-bag67.png",
        BAG67N: "img/night-bag67.png",
        BAG68D: "img/day-bag68.png",
        BAG68N: "img/night-bag68.png",
        ACCESSORY0D: "img/day-accessory0.png",
        ACCESSORY17D: "img/day-accessory0-pacques.png",
        ACCESSORY17N: "img/night-accessory0-pacques.png",
        ACCESSORY13D: "img/day-accessory13.png",
        ACCESSORY13N: "img/night-accessory13.png",
        ACCESSORY14D: "img/day-accessory14.png",
        ACCESSORY14N: "img/night-accessory14.png",
        ACCESSORY15D: "img/day-accessory15.png",
        ACCESSORY15N: "img/night-accessory15.png",
        ACCESSORY16D: "img/day-accessory16.png",
        ACCESSORY16N: "img/night-accessory16.png",
        ACCESSORY18D: "img/day-accessory17.png",
        ACCESSORY18N: "img/day-accessory17.png",
        ACCESSORY19D: "img/day-accessory19.png",
        ACCESSORY19N: "img/night-accessory19.png",
        ACCESSORY20D: "img/day-accessory20.png",
        ACCESSORY20N: "img/night-accessory20.png",
        ACCESSORY21D: "img/day-accessory21.png",
        ACCESSORY21N: "img/night-accessory21.png",
        ACCESSORY22D: "img/day-accessory22.png",
        ACCESSORY22N: "img/night-accessory22.png",
        ACCESSORY23D: "img/day-accessory23.png",
        ACCESSORY23N: "img/night-accessory23.png",
        ACCESSORY24D: "img/day-accessory24.png",
        ACCESSORY24N: "img/night-accessory24.png",
        ACCESSORY25D: "img/day-accessory25.png",
        ACCESSORY25N: "img/night-accessory25.png",
        ACCESSORY26D: "img/day-accessory26.png",
        ACCESSORY26N: "img/night-accessory26.png",
        ACCESSORY27D: "img/day-accessory27.png",
        ACCESSORY27N: "img/night-accessory27.png",
        ACCESSORY28D: "img/day-accessory18.png",
        ACCESSORY28N: "img/night-accessory18.png",
        ACCESSORY29D: "img/day-accessory29.png",
        ACCESSORY29N: "img/night-accessory29.png",
        ACCESSORY30D: "img/day-accessory30.png",
        ACCESSORY30N: "img/night-accessory30.png",
        ACCESSORY31D: "img/day-accessory31.png",
        ACCESSORY31N: "img/night-accessory31.png",
        ACCESSORY32D: "img/day-accessory32.png",
        ACCESSORY32N: "img/night-accessory32.png",
        ACCESSORY33D: "img/day-accessory33.png",
        ACCESSORY33N: "img/night-accessory33.png",
        ACCESSORY34D: "img/day-accessory34.png",
        ACCESSORY34N: "img/night-accessory34.png",
        ACCESSORY35D: "img/day-accessory35.png",
        ACCESSORY35N: "img/night-accessory35.png",
        ACCESSORY36D: "img/day-accessory28.png",
        ACCESSORY36N: "img/night-accessory28.png",
        ACCESSORY37D: "img/day-accessory36.png",
        ACCESSORY37N: "img/night-accessory36.png",
        ACCESSORY38D: "img/day-accessory37.png",
        ACCESSORY38N: "img/night-accessory37.png",
        ACCESSORY39D: "img/day-accessory39.png",
        ACCESSORY39N: "img/night-accessory39.png",
        ACCESSORY40D: "img/day-accessory40.png",
        ACCESSORY40N: "img/night-accessory40.png",
        ACCESSORY41D: "img/day-accessory41.png",
        ACCESSORY41N: "img/night-accessory41.png",
        ACCESSORY42D: "img/day-accessory42.png",
        ACCESSORY42N: "img/night-accessory42.png",
        ACCESSORY43D: "img/day-accessory43.png",
        ACCESSORY43N: "img/night-accessory43.png",
        ACCESSORY44D: "img/day-accessory44.png",
        ACCESSORY44N: "img/night-accessory44.png",
        ACCESSORY45D: "img/day-accessory38.png",
        ACCESSORY45N: "img/night-accessory38.png",
        ACCESSORY46D: "img/day-accessory46.png",
        ACCESSORY46N: "img/night-accessory46.png",
        ACCESSORY47D: "img/day-accessory47.png",
        ACCESSORY47N: "img/night-accessory47.png",
        ACCESSORY48D: "img/day-accessory48.png",
        ACCESSORY48N: "img/night-accessory48.png",
        ACCESSORY49D: "img/day-accessory49.png",
        ACCESSORY49N: "img/night-accessory49.png",
        ACCESSORY50D: "img/day-accessory45.png",
        ACCESSORY50N: "img/night-accessory45.png",
        ACCESSORY51D: "img/day-accessory50.png",
        ACCESSORY51N: "img/night-accessory50.png",
        ACCESSORY52D: "img/day-accessory51.png",
        ACCESSORY52N: "img/night-accessory51.png",
        ACCESSORY53D: "img/day-accessory52.png",
        ACCESSORY53N: "img/night-accessory52.png",
        ACCESSORY54D: "img/day-accessory53.png",
        ACCESSORY54N: "img/night-accessory53.png",
        ACCESSORY55D: "img/day-accessory54.png",
        ACCESSORY55N: "img/night-accessory54.png",
        ACCESSORY56D: "img/day-accessory55.png",
        ACCESSORY56N: "img/night-accessory55.png",
        ACCESSORY57D: "img/day-accessory56.png",
        ACCESSORY57N: "img/night-accessory56.png",
        ACCESSORY58D: "img/day-accessory57.png",
        ACCESSORY58N: "img/night-accessory57.png",
        ACCESSORY59D: "img/day-accessory58.png",
        ACCESSORY59N: "img/night-accessory58.png",
        ACCESSORY60D: "img/day-accessory59.png",
        ACCESSORY60N: "img/night-accessory59.png",
        ACCESSORY61D: "img/day-accessory60.png",
        ACCESSORY61N: "img/night-accessory60.png",
        ACCESSORY62D: "img/day-accessory61.png",
        ACCESSORY62N: "img/night-accessory61.png",
        ACCESSORY63D: "img/day-accessory62.png",
        ACCESSORY63N: "img/night-accessory62.png",
        ACCESSORY64D: "img/day-accessory63.png",
        ACCESSORY64N: "img/night-accessory63.png",
        ACCESSORY65D: "img/day-accessory64.png",
        ACCESSORY65N: "img/night-accessory64.png",
        ACCESSORY66D: "img/day-accessory65.png",
        ACCESSORY66N: "img/night-accessory65.png",
        ACCESSORY67D: "img/day-accessory66.png",
        ACCESSORY67N: "img/night-accessory66.png",
        ACCESSORY68D: "img/day-accessory67.png",
        ACCESSORY68N: "img/night-accessory67.png",
        ACCESSORY69D: "img/day-accessory68.png",
        ACCESSORY69N: "img/night-accessory68.png",
        ACCESSORY70D: "img/day-accessory69.png",
        ACCESSORY70N: "img/night-accessory69.png",
        ACCESSORY71D: "img/day-accessory70.png",
        ACCESSORY71N: "img/night-accessory70.png",
        ACCESSORY72D: "img/day-accessory71.png",
        ACCESSORY72N: "img/night-accessory71.png",
        ACCESSORY73D: "img/day-accessory72.png",
        ACCESSORY73N: "img/night-accessory72.png",
        ACCESSORY74D: "img/day-accessory73.png",
        ACCESSORY74N: "img/night-accessory73.png",
        ACCESSORY75D: "img/day-accessory74.png",
        ACCESSORY75N: "img/night-accessory74.png",
        ACCESSORY76D: "img/day-accessory75.png",
        ACCESSORY76N: "img/night-accessory75.png",
        ACCESSORY77D: "img/day-accessory76.png",
        ACCESSORY77N: "img/night-accessory76.png",
        ACCESSORY78D: "img/day-accessory77.png",
        ACCESSORY78N: "img/night-accessory77.png",
        ACCESSORY79D: "img/day-accessory78.png",
        ACCESSORY79N: "img/night-accessory78.png",
        ACCESSORY80D: "img/day-accessory79.png",
        ACCESSORY80N: "img/night-accessory79.png",
        ACCESSORY81D: "img/day-accessory80.png",
        ACCESSORY81N: "img/night-accessory80.png",
        ACCESSORY82D: "img/day-accessory81.png",
        ACCESSORY82N: "img/night-accessory81.png",
        BOOK0D: "img/day-book0.png",
        BOOK0N: "img/night-book0.png",
        BOOK1D: "img/day-book1.png",
        BOOK1N: "img/night-book1.png",
        BOOK2D: "img/day-book2.png",
        BOOK2N: "img/night-book2.png",
        BOOK3D: "img/day-book3.png",
        BOOK3N: "img/night-book3.png",
        BOOK4D: "img/day-book4.png",
        BOOK4N: "img/night-book4.png",
        BOOK5D: "img/day-book5.png",
        BOOK5N: "img/night-book5.png",
        BOOK6D: "img/day-book6.png",
        BOOK6N: "img/night-book6.png",
        BOOK7D: "img/day-book7.png",
        BOOK7N: "img/night-book7.png",
        BOOK8D: "img/day-book8.png",
        BOOK8N: "img/night-book8.png",
        BOOK9D: "img/day-book9.png",
        BOOK9N: "img/night-book9.png",
        BOOK10D: "img/day-book10.png",
        BOOK10N: "img/night-book10.png",
        BOOK11D: "img/day-book11.png",
        BOOK11N: "img/night-book11.png",
        BOOK12D: "img/day-book12.png",
        BOOK12N: "img/night-book12.png",
        BOOK13D: "img/day-book13.png",
        BOOK13N: "img/night-book13.png",
        BOOK14D: "img/day-book14.png",
        BOOK14N: "img/night-book14.png",
        BOOK15D: "img/day-book15.png",
        BOOK15N: "img/night-book15.png",
        BOOK16D: "img/day-book16.png",
        BOOK16N: "img/night-book16.png",
        BOOK17D: "img/day-book17.png",
        BOOK17N: "img/night-book17.png",
        BOOK18D: "img/day-book18.png",
        BOOK18N: "img/night-book18.png",
        BOOK19D: "img/day-book19.png",
        BOOK19N: "img/night-book19.png",
        BOOK20D: "img/day-book20.png",
        BOOK20N: "img/night-book20.png",
        BOOK21D: "img/day-book21.png",
        BOOK21N: "img/night-book21.png",
        BOOK22D: "img/day-book22.png",
        BOOK22N: "img/night-book22.png",
        BOOK23D: "img/day-book23.png",
        BOOK23N: "img/night-book23.png",
        BOOK24D: "img/day-book24.png",
        BOOK24N: "img/night-book24.png",
        BOOK25D: "img/day-book25.png",
        BOOK25N: "img/night-book25.png",
        BOOK26D: "img/day-book26.png",
        BOOK26N: "img/night-book26.png",
        BOOK27D: "img/day-book27.png",
        BOOK27N: "img/night-book27.png",
        BOOK28D: "img/day-book28.png",
        BOOK28N: "img/night-book28.png",
        BOOK29D: "img/day-book29.png",
        BOOK29N: "img/night-book29.png",
        BOOK30D: "img/day-book30.png",
        BOOK30N: "img/night-book30.png",
        BOOK31D: "img/day-book31.png",
        BOOK31N: "img/night-book31.png",
        BOOK32D: "img/day-book32.png",
        BOOK32N: "img/night-book32.png",
        BOOK33D: "img/day-book33.png",
        BOOK33N: "img/night-book33.png",
        BOOK34D: "img/day-book34.png",
        BOOK34N: "img/night-book34.png",
        BOOK35D: "img/day-book35.png",
        BOOK35N: "img/night-book35.png",
        BOOK36D: "img/day-book36.png",
        BOOK36N: "img/night-book36.png",
        BOOK37D: "img/day-book37.png",
        BOOK37N: "img/night-book37.png",
        BOOK38D: "img/day-book38.png",
        BOOK38N: "img/night-book38.png",
        BOOK39D: "img/day-book39.png",
        BOOK39N: "img/night-book39.png",
        BOOK40D: "img/day-book40.png",
        BOOK40N: "img/night-book40.png",
        BOOK41D: "img/day-book41.png",
        BOOK41N: "img/night-book41.png",
        BOOK42D: "img/day-book42.png",
        BOOK42N: "img/night-book42.png",
        BOOK43D: "img/day-book43.png",
        BOOK43N: "img/night-book43.png",
        BOOK44D: "img/day-book44.png",
        BOOK44N: "img/night-book44.png",
        BOOK45D: "img/day-book45.png",
        BOOK45N: "img/night-book45.png",
        CRATE1D: "img/day-crate1.png",
        CRATE1N: "img/night-crate1.png",
        CRATE2D: "img/day-crate2.png",
        CRATE2N: "img/night-crate2.png",
        CRATE3D: "img/day-crate3.png",
        CRATE3N: "img/night-crate3.png",
        CRATE4D: "img/day-crate4.png",
        CRATE4N: "img/night-crate4.png",
        CRATE5D: "img/day-crate5.png",
        CRATE5N: "img/night-crate5.png",
        CRATE6D: "img/day-crate6.png",
        CRATE6N: "img/night-crate6.png",
        CRATE7D: "img/day-crate7.png",
        CRATE7N: "img/night-crate7.png",
        CRATE8D: "img/day-crate8.png",
        CRATE8N: "img/night-crate8.png",
        CRATE9D: "img/day-crate9.png",
        CRATE9N: "img/night-crate9.png",
        CRATE10D: "img/day-crate10.png",
        CRATE10N: "img/night-crate10.png",
        CRATE11D: "img/day-crate11.png",
        CRATE11N: "img/night-crate11.png",
        CRATE12D: "img/day-crate12.png",
        CRATE12N: "img/night-crate12.png",
        CRATE13D: "img/day-crate13.png",
        CRATE13N: "img/night-crate13.png",
        CRATE14D: "img/day-crate14.png",
        CRATE14N: "img/night-crate14.png",
        CRATE15D: "img/day-crate15.png",
        CRATE15N: "img/night-crate15.png",
        CRATE16D: "img/day-crate16.png",
        CRATE16N: "img/night-crate16.png",
        CRATE17D: "img/day-crate17.png",
        CRATE17N: "img/night-crate17.png",
        CRATE18D: "img/day-crate18.png",
        CRATE18N: "img/night-crate18.png",
        CRATE19D: "img/day-crate19.png",
        CRATE19N: "img/night-crate19.png",
        CRATE20D: "img/day-crate20.png",
        CRATE20N: "img/night-crate20.png",
        CRATE21D: "img/day-crate21.png",
        CRATE21N: "img/night-crate21.png",
        CRATE22D: "img/day-crate22.png",
        CRATE22N: "img/night-crate22.png",
        CRATE23D: "img/day-crate23.png",
        CRATE23N: "img/night-crate23.png",
        CRATE24D: "img/day-crate24.png",
        CRATE24N: "img/night-crate24.png",
        CRATE25D: "img/day-crate25.png",
        CRATE25N: "img/night-crate25.png",
        CRATE26D: "img/day-crate26.png",
        CRATE26N: "img/night-crate26.png",
        CRATE27D: "img/day-crate27.png",
        CRATE27N: "img/night-crate27.png",
        CRATE28D: "img/day-crate28.png",
        CRATE28N: "img/night-crate28.png",
        CRATE29D: "img/day-crate29.png",
        CRATE29N: "img/night-crate29.png",
        CRATE30D: "img/day-crate30.png",
        CRATE30N: "img/night-crate30.png",
        CRATE31D: "img/day-crate31.png",
        CRATE31N: "img/night-crate31.png",
        CRATE32D: "img/day-crate32.png",
        CRATE32N: "img/night-crate32.png",
        CRATE33D: "img/day-crate33.png",
        CRATE33N: "img/night-crate33.png",
        CRATE34D: "img/day-crate34.png",
        CRATE34N: "img/night-crate34.png",
        CRATE35D: "img/day-crate35.png",
        CRATE35N: "img/night-crate35.png",
        CRATE36D: "img/day-crate36.png",
        CRATE36N: "img/night-crate36.png",
        CRATE37D: "img/day-crate37.png",
        CRATE37N: "img/night-crate37.png",
        CRATE38D: "img/day-crate38.png",
        CRATE38N: "img/night-crate38.png",
        CRATE39D: "img/day-crate39.png",
        CRATE39N: "img/night-crate39.png",
        CRATE40D: "img/day-crate40.png",
        CRATE40N: "img/night-crate40.png",
        CRATE41D: "img/day-crate41.png",
        CRATE41N: "img/night-crate41.png",
        CRATE42D: "img/day-crate42.png",
        CRATE42N: "img/night-crate42.png",
        CRATE43D: "img/day-crate43.png",
        CRATE43N: "img/night-crate43.png",
        CRATE44D: "img/day-crate44.png",
        CRATE44N: "img/night-crate44.png",
        CRATE45D: "img/day-crate45.png",
        CRATE45N: "img/night-crate45.png",
        CRATE46D: "img/day-crate46.png",
        CRATE46N: "img/night-crate46.png",
        CRATE47D: "img/day-crate47.png",
        CRATE47N: "img/night-crate47.png",
        CRATE48D: "img/day-crate48.png",
        CRATE48N: "img/night-crate48.png",
        CRATE49D: "img/day-crate49.png",
        CRATE49N: "img/night-crate49.png",
        CRATE50D: "img/day-crate50.png",
        CRATE50N: "img/night-crate50.png",
        CRATE51D: "img/day-crate51.png",
        CRATE51N: "img/night-crate51.png",
        CRATE52D: "img/day-crate52.png",
        CRATE52N: "img/night-crate52.png",
        CRATE53D: "img/day-crate53.png",
        CRATE53N: "img/night-crate53.png",
        CRATE54D: "img/day-crate54.png",
        CRATE54N: "img/night-crate54.png",
        CRATE55D: "img/day-crate55.png",
        CRATE55N: "img/night-crate55.png",
        CRATE56D: "img/day-crate56.png",
        CRATE56N: "img/night-crate56.png",
        CRATE57D: "img/day-crate57.png",
        CRATE57N: "img/night-crate57.png",
        CRATE58D: "img/day-crate58.png",
        CRATE58N: "img/night-crate58.png",
        CRATE59D: "img/day-crate59.png",
        CRATE59N: "img/night-crate59.png",
        CRATE60D: "img/day-crate60.png",
        CRATE60N: "img/night-crate60.png",
        CRATE61D: "img/day-crate61.png",
        CRATE61N: "img/night-crate61.png",
        CRATE62D: "img/day-crate62.png",
        CRATE62N: "img/night-crate62.png",
        CRATE63D: "img/day-crate63.png",
        CRATE63N: "img/night-crate63.png",
        CRATE64D: "img/day-crate64.png",
        CRATE64N: "img/night-crate64.png",
        CRATE65D: "img/day-crate65.png",
        CRATE65N: "img/night-crate65.png",
        CRATE66D: "img/day-crate66.png",
        CRATE66N: "img/night-crate66.png",
        CRATE67D: "img/day-crate67.png",
        CRATE67N: "img/night-crate67.png",
        CRATE68D: "img/day-crate68.png",
        CRATE68N: "img/night-crate68.png",
        CRATE69D: "img/day-crate69.png",
        CRATE69N: "img/night-crate69.png",
        CRATE70D: "img/day-crate70.png",
        CRATE70N: "img/night-crate70.png",
        CRATE71D: "img/day-crate71.png",
        CRATE71N: "img/night-crate71.png",
        CRATE72D: "img/day-crate72.png",
        CRATE72N: "img/night-crate72.png",
        DECORATION_0D: "img/day-herb0.png",
        DECORATION_1D: "img/day-herb1.png",
        DECORATION_2D: "img/day-herb2.png",
        DECORATION_3D: "img/day-herb3.png",
        DECORATION_4D: "img/day-herb4.png",
        DECORATION_5D: "img/day-herb5.png",
        DECORATION_6D: "img/day-herb6.png",
        DECORATION_7D: "img/day-herb7.png",
        DECORATION_8D: "img/day-herb8.png",
        DECORATION_9D: "img/day-herb9.png",
        DECORATION_10D: "img/day-herb10.png",
        DECORATION_11D: "img/day-herb11.png",
        DECORATION_12D: "img/day-herb12.png",
        DECORATION_13D: "img/day-herb13.png",
        DECORATION_14D: "img/day-herb14.png",
        DECORATION_15D: "img/day-herb15.png",
        DECORATION_16D: "img/day-shell0.png",
        DECORATION_17D: "img/day-shell1.png",
        DECORATION_18D: "img/day-shell2.png",
        DECORATION_19D: "img/day-leaf1.png",
        DECORATION_20D: "img/day-leaf2.png",
        DECORATION_21D: "img/day-leaf3.png",
        DECORATION_22D: "img/day-leaf4.png",
        DECORATION_23D: "img/day-leaf5.png",
        DECORATION_24D: "img/day-leaf6.png",
        DECORATION_25D: "img/day-leaf7.png",
        DECORATION_26D: "img/day-leaf8.png",
        DECORATION_27D: "img/day-rock0.png",
        DECORATION_28D: "img/day-rock1.png",
        DECORATION_29D: "img/day-rock2.png",
        DECORATION_30D: "img/day-rock3.png",
        DECORATION_31D: "img/day-rock4.png",
        DECORATION_32D: "img/day-rock5.png",
        DECORATION_33D: "img/day-rock6.png",
        DECORATION_34D: "img/day-rock7.png",
        DECORATION_35D: "img/day-rock8.png",
        DECORATION_36D: "img/day-rock9.png",
        DECORATION_37D: "img/day-rock10.png",
        DECORATION_38D: "img/day-rock11.png",
        DECORATION_39D: "img/day-rock12.png",
        DECORATION_40D: "img/day-rock13.png",
        DECORATION_41D: "img/day-flower1.png",
        DECORATION_42D: "img/day-flower2.png",
        DECORATION_43D: "img/day-flower3.png",
        DECORATION_44D: "img/day-flower4.png",
        DECORATION_45D: "img/day-flower5.png",
        DECORATION_46D: "img/day-flower6.png",
        DECORATION_47D: "img/day-flower7.png",
        DECORATION_48D: "img/day-flower8.png",
        DECORATION_49D: "img/day-flower9.png",
        DECORATION_50D: "img/day-herb16.png",
        DECORATION_51D: "img/day-herb17.png",
        DECORATION_52D: "img/day-herb18.png",
        DECORATION_53D: "img/day-herb19.png",
        DECORATION_54D: "img/day-herb20.png",
        DECORATION_55D: "img/day-herb21.png",
        DECORATION_0N: "img/night-herb0.png",
        DECORATION_1N: "img/night-herb1.png",
        DECORATION_2N: "img/night-herb2.png",
        DECORATION_3N: "img/night-herb3.png",
        DECORATION_4N: "img/night-herb4.png",
        DECORATION_5N: "img/night-herb5.png",
        DECORATION_6N: "img/night-herb6.png",
        DECORATION_7N: "img/night-herb7.png",
        DECORATION_8N: "img/night-herb8.png",
        DECORATION_9N: "img/night-herb9.png",
        DECORATION_10N: "img/night-herb10.png",
        DECORATION_11N: "img/night-herb11.png",
        DECORATION_12N: "img/night-herb12.png",
        DECORATION_13N: "img/night-herb13.png",
        DECORATION_14N: "img/night-herb14.png",
        DECORATION_15N: "img/night-herb15.png",
        DECORATION_16N: "img/night-shell0.png",
        DECORATION_17N: "img/night-shell1.png",
        DECORATION_18N: "img/night-shell2.png",
        DECORATION_19N: "img/night-leaf1.png",
        DECORATION_20N: "img/night-leaf2.png",
        DECORATION_21N: "img/night-leaf3.png",
        DECORATION_22N: "img/night-leaf4.png",
        DECORATION_23N: "img/night-leaf5.png",
        DECORATION_24N: "img/night-leaf6.png",
        DECORATION_25N: "img/night-leaf7.png",
        DECORATION_26N: "img/night-leaf8.png",
        DECORATION_27N: "img/night-rock0.png",
        DECORATION_28N: "img/night-rock1.png",
        DECORATION_29N: "img/night-rock2.png",
        DECORATION_30N: "img/night-rock3.png",
        DECORATION_31N: "img/night-rock4.png",
        DECORATION_32N: "img/night-rock5.png",
        DECORATION_33N: "img/night-rock6.png",
        DECORATION_34N: "img/night-rock7.png",
        DECORATION_35N: "img/night-rock8.png",
        DECORATION_36N: "img/night-rock9.png",
        DECORATION_37N: "img/night-rock10.png",
        DECORATION_38N: "img/night-rock11.png",
        DECORATION_39N: "img/night-rock12.png",
        DECORATION_40N: "img/night-rock13.png",
        DECORATION_41N: "img/night-flower1.png",
        DECORATION_42N: "img/night-flower2.png",
        DECORATION_43N: "img/night-flower3.png",
        DECORATION_44N: "img/night-flower4.png",
        DECORATION_45N: "img/night-flower5.png",
        DECORATION_46N: "img/night-flower6.png",
        DECORATION_47N: "img/night-flower7.png",
        DECORATION_48N: "img/night-flower8.png",
        DECORATION_49N: "img/night-flower9.png",
        DECORATION_50N: "img/night-herb16.png",
        DECORATION_51N: "img/night-herb17.png",
        DECORATION_52N: "img/night-herb18.png",
        DECORATION_53N: "img/night-herb19.png",
        DECORATION_54N: "img/night-herb20.png",
        DECORATION_55N: "img/night-herb21.png",
        DAY_RIVER_000_010_000: "img/day-river000-010-000.png",
        DAY_RIVER_000_010_010: "img/day-river000-010-010.png",
        DAY_RIVER_000_011_000: "img/day-river000-011-000.png",
        DAY_RIVER_000_011_010: "img/day-river000-011-010.png",
        DAY_RIVER_000_011_011: "img/day-river000-011-011.png",
        DAY_RIVER_000_110_000: "img/day-river000-110-000.png",
        DAY_RIVER_000_110_010: "img/day-river000-110-010.png",
        DAY_RIVER_000_110_110: "img/day-river000-110-110.png",
        DAY_RIVER_000_111_000: "img/day-river000-111-000.png",
        DAY_RIVER_000_111_010: "img/day-river000-111-010.png",
        DAY_RIVER_000_111_011: "img/day-river000-111-011.png",
        DAY_RIVER_000_111_110: "img/day-river000-111-110.png",
        DAY_RIVER_000_111_111: "img/day-river000-111-111.png",
        DAY_RIVER_010_010_000: "img/day-river010-010-000.png",
        DAY_RIVER_010_010_010: "img/day-river010-010-010.png",
        DAY_RIVER_010_011_000: "img/day-river010-011-000.png",
        DAY_RIVER_010_011_010: "img/day-river010-011-010.png",
        DAY_RIVER_010_011_011: "img/day-river010-011-011.png",
        DAY_RIVER_010_110_000: "img/day-river010-110-000.png",
        DAY_RIVER_010_110_010: "img/day-river010-110-010.png",
        DAY_RIVER_010_110_110: "img/day-river010-110-110.png",
        DAY_RIVER_010_111_000: "img/day-river010-111-000.png",
        DAY_RIVER_010_111_010: "img/day-river010-111-010.png",
        DAY_RIVER_010_111_011: "img/day-river010-111-011.png",
        DAY_RIVER_010_111_110: "img/day-river010-111-110.png",
        DAY_RIVER_010_111_111: "img/day-river010-111-111.png",
        DAY_RIVER_011_011_000: "img/day-river011-011-000.png",
        DAY_RIVER_011_011_010: "img/day-river011-011-010.png",
        DAY_RIVER_011_011_011: "img/day-river011-011-011.png",
        DAY_RIVER_011_111_000: "img/day-river011-111-000.png",
        DAY_RIVER_011_111_010: "img/day-river011-111-010.png",
        DAY_RIVER_011_111_011: "img/day-river011-111-011.png",
        DAY_RIVER_011_111_110: "img/day-river011-111-110.png",
        DAY_RIVER_011_111_111: "img/day-river011-111-111.png",
        DAY_RIVER_110_110_000: "img/day-river110-110-000.png",
        DAY_RIVER_110_110_010: "img/day-river110-110-010.png",
        DAY_RIVER_110_110_110: "img/day-river110-110-110.png",
        DAY_RIVER_110_111_000: "img/day-river110-111-000.png",
        DAY_RIVER_110_111_010: "img/day-river110-111-010.png",
        DAY_RIVER_110_111_011: "img/day-river110-111-011.png",
        DAY_RIVER_110_111_110: "img/day-river110-111-110.png",
        DAY_RIVER_110_111_111: "img/day-river110-111-111.png",
        DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
        DAY_RIVER_111_111_110: "img/day-river111-111-110.png",
        DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
        DAY_RIVER_111_111_000: "img/day-river111-111-000.png",
        DAY_RIVER_111_111_111: "img/day-river111-111-111.png",
        DAY_RIVER_111_111_010: "img/day-river111-111-010.png",
        NIGHT_RIVER_000_010_000: "img/night-river000-010-000.png",
        NIGHT_RIVER_000_010_010: "img/night-river000-010-010.png",
        NIGHT_RIVER_000_011_000: "img/night-river000-011-000.png",
        NIGHT_RIVER_000_011_010: "img/night-river000-011-010.png",
        NIGHT_RIVER_000_011_011: "img/night-river000-011-011.png",
        NIGHT_RIVER_000_110_000: "img/night-river000-110-000.png",
        NIGHT_RIVER_000_110_010: "img/night-river000-110-010.png",
        NIGHT_RIVER_000_110_110: "img/night-river000-110-110.png",
        NIGHT_RIVER_000_111_000: "img/night-river000-111-000.png",
        NIGHT_RIVER_000_111_010: "img/night-river000-111-010.png",
        NIGHT_RIVER_000_111_011: "img/night-river000-111-011.png",
        NIGHT_RIVER_000_111_110: "img/night-river000-111-110.png",
        NIGHT_RIVER_000_111_111: "img/night-river000-111-111.png",
        NIGHT_RIVER_010_010_000: "img/night-river010-010-000.png",
        NIGHT_RIVER_010_010_010: "img/night-river010-010-010.png",
        NIGHT_RIVER_010_011_000: "img/night-river010-011-000.png",
        NIGHT_RIVER_010_011_010: "img/night-river010-011-010.png",
        NIGHT_RIVER_010_011_011: "img/night-river010-011-011.png",
        NIGHT_RIVER_010_110_000: "img/night-river010-110-000.png",
        NIGHT_RIVER_010_110_010: "img/night-river010-110-010.png",
        NIGHT_RIVER_010_110_110: "img/night-river010-110-110.png",
        NIGHT_RIVER_010_111_000: "img/night-river010-111-000.png",
        NIGHT_RIVER_010_111_010: "img/night-river010-111-010.png",
        NIGHT_RIVER_010_111_011: "img/night-river010-111-011.png",
        NIGHT_RIVER_010_111_110: "img/night-river010-111-110.png",
        NIGHT_RIVER_010_111_111: "img/night-river010-111-111.png",
        NIGHT_RIVER_011_011_000: "img/night-river011-011-000.png",
        NIGHT_RIVER_011_011_010: "img/night-river011-011-010.png",
        NIGHT_RIVER_011_011_011: "img/night-river011-011-011.png",
        NIGHT_RIVER_011_111_000: "img/night-river011-111-000.png",
        NIGHT_RIVER_011_111_010: "img/night-river011-111-010.png",
        NIGHT_RIVER_011_111_011: "img/night-river011-111-011.png",
        NIGHT_RIVER_011_111_110: "img/night-river011-111-110.png",
        NIGHT_RIVER_011_111_111: "img/night-river011-111-111.png",
        NIGHT_RIVER_110_110_000: "img/night-river110-110-000.png",
        NIGHT_RIVER_110_110_010: "img/night-river110-110-010.png",
        NIGHT_RIVER_110_110_110: "img/night-river110-110-110.png",
        NIGHT_RIVER_110_111_000: "img/night-river110-111-000.png",
        NIGHT_RIVER_110_111_010: "img/night-river110-111-010.png",
        NIGHT_RIVER_110_111_011: "img/night-river110-111-011.png",
        NIGHT_RIVER_110_111_110: "img/night-river110-111-110.png",
        NIGHT_RIVER_110_111_111: "img/night-river110-111-111.png",
        NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
        NIGHT_RIVER_111_111_110: "img/night-river111-111-110.png",
        NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
        NIGHT_RIVER_111_111_000: "img/night-river111-111-000.png",
        NIGHT_RIVER_111_111_111: "img/night-river111-111-111.png",
        NIGHT_RIVER_111_111_010: "img/night-river111-111-010.png",
        DAY_RIVER_COMPO1: "img/day-pebblecompo1.png",
        DAY_RIVER_COMPO2: "img/day-pebblecompo2.png",
        DAY_RIVER_COMPO3: "img/day-pebblecompo3.png",
        DAY_RIVER_COMPO4: "img/day-pebblecompo4.png",
        DAY_RIVER_COMPO5: "img/day-pebblecompo5.png",
        DAY_RIVER_COMPO6: "img/day-pebblecompo6.png",
        DAY_RIVER_COMPO7: "img/day-pebblecompo7.png",
        DAY_RIVER_COMPO8: "img/day-pebblecompo8.png",
        DAY_RIVER_COMPO9: "img/day-pebblecompo9.png",
        DAY_RIVER_COMPO10: "img/day-pebblecompo10.png",
        DAY_RIVER_COMPO11: "img/day-pebblecompo11.png",
        DAY_RIVER_COMPO12: "img/day-pebblecompo12.png",
        DAY_RIVER_COMPO13: "img/day-pebblecompo13.png",
        DAY_RIVER_COMPO14: "img/day-pebblecompo14.png",
        DAY_RIVER_COMPO15: "img/day-pebblecompo15.png",
        DAY_RIVER_COMPO16: "img/day-pebblecompo16.png",
        DAY_RIVER_COMPO17: "img/day-pebblecompo17.png",
        DAY_RIVER_COMPO18: "img/day-pebblecompo18.png",
        DAY_RIVER_COMPO19: "img/day-pebblecompo19.png",
        DAY_RIVER_COMPO20: "img/day-pebblecompo20.png",
        DAY_RIVER_COMPO21: "img/day-pebblecompo21.png",
        DAY_RIVER_COMPO22: "img/day-pebblecompo22.png",
        DAY_RIVER_COMPO23: "img/day-pebblecompo23.png",
        DAY_RIVER_COMPO24: "img/day-pebblecompo24.png",
        DAY_RIVER_COMPO25: "img/day-pebblecompo25.png",
        DAY_RIVER_COMPO26: "img/day-pebblecompo26.png",
        DAY_RIVER_COMPO27: "img/day-pebblecompo27.png",
        DAY_RIVER_COMPO28: "img/day-pebblecompo28.png",
        NIGHT_RIVER_COMPO1: "img/night-pebblecompo1.png",
        NIGHT_RIVER_COMPO2: "img/night-pebblecompo2.png",
        NIGHT_RIVER_COMPO3: "img/night-pebblecompo3.png",
        NIGHT_RIVER_COMPO4: "img/night-pebblecompo4.png",
        NIGHT_RIVER_COMPO5: "img/night-pebblecompo5.png",
        NIGHT_RIVER_COMPO6: "img/night-pebblecompo6.png",
        NIGHT_RIVER_COMPO7: "img/night-pebblecompo7.png",
        NIGHT_RIVER_COMPO8: "img/night-pebblecompo8.png",
        NIGHT_RIVER_COMPO9: "img/night-pebblecompo9.png",
        NIGHT_RIVER_COMPO10: "img/night-pebblecompo10.png",
        NIGHT_RIVER_COMPO11: "img/night-pebblecompo11.png",
        NIGHT_RIVER_COMPO12: "img/night-pebblecompo12.png",
        NIGHT_RIVER_COMPO13: "img/night-pebblecompo13.png",
        NIGHT_RIVER_COMPO14: "img/night-pebblecompo14.png",
        NIGHT_RIVER_COMPO15: "img/night-pebblecompo15.png",
        NIGHT_RIVER_COMPO16: "img/night-pebblecompo16.png",
        NIGHT_RIVER_COMPO17: "img/night-pebblecompo17.png",
        NIGHT_RIVER_COMPO18: "img/night-pebblecompo18.png",
        NIGHT_RIVER_COMPO19: "img/night-pebblecompo19.png",
        NIGHT_RIVER_COMPO20: "img/night-pebblecompo20.png",
        NIGHT_RIVER_COMPO21: "img/night-pebblecompo21.png",
        NIGHT_RIVER_COMPO22: "img/night-pebblecompo22.png",
        NIGHT_RIVER_COMPO23: "img/night-pebblecompo23.png",
        NIGHT_RIVER_COMPO24: "img/night-pebblecompo24.png",
        NIGHT_RIVER_COMPO25: "img/night-pebblecompo25.png",
        NIGHT_RIVER_COMPO26: "img/night-pebblecompo26.png",
        NIGHT_RIVER_COMPO27: "img/night-pebblecompo27.png",
        NIGHT_RIVER_COMPO28: "img/night-pebblecompo28.png",
        BABY_MAMMOTHD: "img/day-baby-mammoth.png",
        BABY_MAMMOTH_TAMEDD: "img/day-baby-mammoth-tamed.png",
        BABY_MAMMOTH_ATTACKD: "img/day-baby-mammoth-angry.png",
        BABY_MAMMOTHN: "img/night-baby-mammoth.png",
        BABY_MAMMOTH_TAMEDN: "img/night-baby-mammoth-tamed.png",
        BABY_MAMMOTH_ATTACKN: "img/night-baby-mammoth-angry.png",
        INV_BABY_MAMMOTH_OUT: "img/inv-mammoth-out.png",
        INV_BABY_MAMMOTH_IN: "img/inv-mammoth-in.png",
        INV_BABY_MAMMOTH_CLICK: "img/inv-mammoth-click.png",
        HURT_BABY_MAMMOTH: "img/hurt-baby-mammoth.png",
        BABY_MAMMOTH_STEP: "img/baby-mammoth-step.png",
        FLOWER_HATD: "img/day-flower-hat.png",
        FLOWER_HATN: "img/night-flower-hat.png",
        INV_FLOWER_HAT_OUT: "img/inv-flower-hat-out.png",
        INV_FLOWER_HAT_IN: "img/inv-flower-hat-in.png",
        INV_FLOWER_HAT_CLICK: "img/inv-flower-hat-click.png",
        FUR_HATD: "img/day-fur-hat.png",
        FUR_HATN: "img/night-fur-hat.png",
        INV_FUR_HAT_OUT: "img/inv-fur-hat-out.png",
        INV_FUR_HAT_IN: "img/inv-fur-hat-in.png",
        INV_FUR_HAT_CLICK: "img/inv-fur-hat-click.png",
        MAMMOTHD: "img/day-mammoth.png",
        MAMMOTHN: "img/night-mammoth.png",
        HURT_MAMMOTH: "img/hurt-mammoth.png",
        INV_FUR_MAMMOTH_OUT: "img/inv-mammoth-fur-out.png",
        INV_FUR_MAMMOTH_IN: "img/inv-mammoth-fur-in.png",
        INV_FUR_MAMMOTH_CLICK: "img/inv-mammoth-fur-click.png",
        INV_WOOD_BOW_OUT: "img/inv-wood-bow-out.png",
        INV_WOOD_BOW_IN: "img/inv-wood-bow-in.png",
        INV_WOOD_BOW_CLICK: "img/inv-wood-bow-click.png",
        INV_WOOD_ARROW_OUT: "img/inv-wood-arrow-out.png",
        INV_WOOD_ARROW_IN: "img/inv-wood-arrow-in.png",
        INV_WOOD_ARROW_CLICK: "img/inv-wood-arrow-click.png",
        WOOD_BOWD: "img/day-wood-bow2.png",
        WOOD_BOWN: "img/night-wood-bow2.png",
        WOOD_ARROWD: "img/day-wood-arrow.png",
        WOOD_ARROWN: "img/night-wood-arrow.png",
        INV_STONE_BOW_OUT: "img/inv-stone-bow-out.png",
        INV_STONE_BOW_IN: "img/inv-stone-bow-in.png",
        INV_STONE_BOW_CLICK: "img/inv-stone-bow-click.png",
        INV_STONE_ARROW_OUT: "img/inv-stone-arrow-out.png",
        INV_STONE_ARROW_IN: "img/inv-stone-arrow-in.png",
        INV_STONE_ARROW_CLICK: "img/inv-stone-arrow-click.png",
        STONE_BOWD: "img/day-stone-bow.png",
        STONE_BOWN: "img/night-stone-bow.png",
        STONE_ARROWD: "img/day-stone-arrow.png",
        STONE_ARROWN: "img/night-stone-arrow.png",
        INV_GOLD_BOW_OUT: "img/inv-gold-bow-out.png",
        INV_GOLD_BOW_IN: "img/inv-gold-bow-in.png",
        INV_GOLD_BOW_CLICK: "img/inv-gold-bow-click.png",
        INV_GOLD_ARROW_OUT: "img/inv-gold-arrow-out.png",
        INV_GOLD_ARROW_IN: "img/inv-gold-arrow-in.png",
        INV_GOLD_ARROW_CLICK: "img/inv-gold-arrow-click.png",
        GOLD_BOWD: "img/day-gold-bow.png",
        GOLD_BOWN: "img/night-gold-bow.png",
        GOLD_ARROWD: "img/day-gold-arrow.png",
        GOLD_ARROWN: "img/night-gold-arrow.png",
        INV_DIAMOND_BOW_OUT: "img/inv-diamond-bow-out.png",
        INV_DIAMOND_BOW_IN: "img/inv-diamond-bow-in.png",
        INV_DIAMOND_BOW_CLICK: "img/inv-diamond-bow-click.png",
        INV_DIAMOND_ARROW_OUT: "img/inv-diamond-arrow-out.png",
        INV_DIAMOND_ARROW_IN: "img/inv-diamond-arrow-in.png",
        INV_DIAMOND_ARROW_CLICK: "img/inv-diamond-arrow-click.png",
        DIAMOND_BOWD: "img/day-diamond-bow.png",
        DIAMOND_BOWN: "img/night-diamond-bow.png",
        DIAMOND_ARROWD: "img/day-diamond-arrow.png",
        DIAMOND_ARROWN: "img/night-diamond-arrow.png",
        INV_AMETHYST_BOW_OUT: "img/inv-amethyst-bow-out.png",
        INV_AMETHYST_BOW_IN: "img/inv-amethyst-bow-in.png",
        INV_AMETHYST_BOW_CLICK: "img/inv-amethyst-bow-click.png",
        INV_AMETHYST_ARROW_OUT: "img/inv-amethyst-arrow-out.png",
        INV_AMETHYST_ARROW_IN: "img/inv-amethyst-arrow-in.png",
        INV_AMETHYST_ARROW_CLICK: "img/inv-amethyst-arrow-click.png",
        AMETHYST_BOWD: "img/day-amethyst-bow.png",
        AMETHYST_BOWN: "img/night-amethyst-bow.png",
        AMETHYST_ARROWD: "img/day-amethyst-arrow.png",
        AMETHYST_ARROWN: "img/night-amethyst-arrow.png",
        INV_DRAGON_BOW_OUT: "img/inv-dragon-bow-out.png",
        INV_DRAGON_BOW_IN: "img/inv-dragon-bow-in.png",
        INV_DRAGON_BOW_CLICK: "img/inv-dragon-bow-click.png",
        INV_DRAGON_ARROW_OUT: "img/inv-dragon-arrow-out.png",
        INV_DRAGON_ARROW_IN: "img/inv-dragon-arrow-in.png",
        INV_DRAGON_ARROW_CLICK: "img/inv-dragon-arrow-click.png",
        DRAGON_BOWD: "img/day-dragon-bow.png",
        DRAGON_BOWN: "img/night-dragon-bow.png",
        DRAGON_ARROWD: "img/day-dragon-arrow.png",
        DRAGON_ARROWN: "img/night-dragon-arrow.png",
        INV_REIDITE_BOW_OUT: "img/inv-reidite-bow-out.png",
        INV_REIDITE_BOW_IN: "img/inv-reidite-bow-in.png",
        INV_REIDITE_BOW_CLICK: "img/inv-reidite-bow-click.png",
        INV_REIDITE_ARROW_OUT: "img/inv-reidite-arrow-out.png",
        INV_REIDITE_ARROW_IN: "img/inv-reidite-arrow-in.png",
        INV_REIDITE_ARROW_CLICK: "img/inv-reidite-arrow-click.png",
        REIDITE_BOWD: "img/day-reidite-bow.png",
        REIDITE_BOWN: "img/night-reidite-bow.png",
        REIDITE_ARROWD: "img/day-reidite-arrow.png",
        REIDITE_ARROWN: "img/night-reidite-arrow.png",
        BANDAGE_ACTIVATED: "img/bandage-activated.png",
        AUTO_FEED: "img/auto-feed.png",
        STOP_REGENERATION_BLIZZARD: "img/stop-regeneration.png",
        STOP_REGENERATION: "img/stop-regeneration2.png",
        WOOD_TOWERD: "img/day-wood-platform.png",
        WOOD_TOWERN: "img/night-wood-platform.png",
        INV_WOOD_TOWER_IN: "img/inv-wood-platform-in.png",
        INV_WOOD_TOWER_OUT: "img/inv-wood-platform-out.png",
        INV_WOOD_TOWER_CLICK: "img/inv-wood-platform-click.png",
        WOOD_SHIELDD: "img/day-wood-shield.png",
        WOOD_SHIELDN: "img/night-wood-shield.png",
        STONE_SHIELDD: "img/day-stone-shield.png",
        STONE_SHIELDN: "img/night-stone-shield.png",
        GOLD_SHIELDD: "img/day-gold-shield.png",
        GOLD_SHIELDN: "img/night-gold-shield.png",
        DIAMOND_SHIELDD: "img/day-diamond-shield.png",
        DIAMOND_SHIELDN: "img/night-diamond-shield.png",
        AMETHYST_SHIELDD: "img/day-amethyst-shield.png",
        AMETHYST_SHIELDN: "img/night-amethyst-shield.png",
        REIDITE_SHIELDD: "img/day-reidite-shield.png",
        REIDITE_SHIELDN: "img/night-reidite-shield.png",
        INV_WOOD_SHIELD_IN: "img/inv-wood-shield-in.png",
        INV_WOOD_SHIELD_OUT: "img/inv-wood-shield-out.png",
        INV_WOOD_SHIELD_CLICK: "img/inv-wood-shield-click.png",
        INV_STONE_SHIELD_IN: "img/inv-stone-shield-in.png",
        INV_STONE_SHIELD_OUT: "img/inv-stone-shield-out.png",
        INV_STONE_SHIELD_CLICK: "img/inv-stone-shield-click.png",
        INV_GOLD_SHIELD_IN: "img/inv-gold-shield-in.png",
        INV_GOLD_SHIELD_OUT: "img/inv-gold-shield-out.png",
        INV_GOLD_SHIELD_CLICK: "img/inv-gold-shield-click.png",
        INV_DIAMOND_SHIELD_IN: "img/inv-diamond-shield-in.png",
        INV_DIAMOND_SHIELD_OUT: "img/inv-diamond-shield-out.png",
        INV_DIAMOND_SHIELD_CLICK: "img/inv-diamond-shield-click.png",
        INV_AMETHYST_SHIELD_IN: "img/inv-amethyst-shield-in.png",
        INV_AMETHYST_SHIELD_OUT: "img/inv-amethyst-shield-out.png",
        INV_AMETHYST_SHIELD_CLICK: "img/inv-amethyst-shield-click.png",
        INV_REIDITE_SHIELD_IN: "img/inv-reidite-shield-in.png",
        INV_REIDITE_SHIELD_OUT: "img/inv-reidite-shield-out.png",
        INV_REIDITE_SHIELD_CLICK: "img/inv-reidite-shield-click.png",
        MACHETED: "img/day-machete.png",
        MACHETEN: "img/night-machete.png",
        INV_MACHETE_IN: "img/inv-machete-in.png",
        INV_MACHETE_OUT: "img/inv-machete-out.png",
        INV_MACHETE_CLICK: "img/inv-machete-click.png"
    }, WINDOW12 = [{}], WINDOW12[0].stringify = function(e) {
        for (var t = new Uint8Array(new ArrayBuffer(e.length)), i = 0; i < e.length; i++) t[i] = e[i];
        return t
    }, DUMP_IMAGES = {}, PREPROC_IMAGES = {}, IMAGES) DUMP_IMAGES[i] = IMAGES[i];
sprite = [];
let ReiditeSpikeAlly = new Image;
ReiditeSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-ally.png";
let AmethystSpikeAlly = new Image;
AmethystSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-ally.png";
let DiamondSpikeAlly = new Image;
DiamondSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-ally.png";
let GoldSpikeAlly = new Image;
GoldSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-ally.png";
let StoneSpikeAlly = new Image;
StoneSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-ally.png";
let WoodSpikeAlly = new Image;
WoodSpikeAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-ally.png";
let ReiditeSpikeEnemy = new Image;
ReiditeSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-enemy.png";
let AmethystSpikeEnemy = new Image;
AmethystSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-enemy.png";
let DiamondSpikeEnemy = new Image;
DiamondSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-enemy.png";
let GoldSpikeEnemy = new Image;
GoldSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-enemy.png";
let StoneSpikeEnemy = new Image;
StoneSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-enemy.png";
let WoodSpikeEnemy = new Image;
WoodSpikeEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-enemy.png";
let ReiditeSpikeDoorAlly = new Image;
ReiditeSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-door-ally.png";
let AmethystSpikeDoorAlly = new Image;
AmethystSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-door-ally.png";
let DiamondSpikeDoorAlly = new Image;
DiamondSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-door-ally.png";
let GoldSpikeDoorAlly = new Image;
GoldSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-door-ally.png";
let StoneSpikeDoorAlly = new Image;
StoneSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-door-ally.png";
let WoodSpikeDoorAlly = new Image;
WoodSpikeDoorAlly.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-door-ally.png";
let ReiditeSpikeDoorEnemy = new Image;
ReiditeSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-reidite-spike-door-enemy.png";
let AmethystSpikeDoorEnemy = new Image;
AmethystSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-amethyst-spike-door-enemy.png";
let DiamondSpikeDoorEnemy = new Image;
DiamondSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-diamond-spike-door-enemy.png";
let GoldSpikeDoorEnemy = new Image;
GoldSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-gold-spike-door-enemy.png";
let StoneSpikeDoorEnemy = new Image;
StoneSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-stone-spike-door-enemy.png";
let WoodSpikeDoorEnemy = new Image;
WoodSpikeDoorEnemy.src = "https://raw.githubusercontent.com/sfagasdzdgfhs/spikes/main/day-wood-spike-door-enemy.png";
let ReiditeDoorAlly = new Image;
ReiditeDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_reidite2.png";
let AmethystDoorAlly = new Image;
AmethystDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_amethyst1.png";
let DiamondDoorAlly = new Image;
DiamondDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_diamond2.png";
let GoldDoorAlly = new Image;
GoldDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_gold2.png";
let StoneDoorAlly = new Image;
StoneDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_stone1.png";
let WoodDoorAlly = new Image;
WoodDoorAlly.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_wood2.png";
let ReiditeDoorEnemy = new Image;
ReiditeDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_reidite1.png";
let AmethystDoorEnemy = new Image;
AmethystDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_amethyst2.png";
let DiamondDoorEnemy = new Image;
DiamondDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_diamond1.png";
let GoldDoorEnemy = new Image;
GoldDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_gold1.png";
let StoneDoorEnemy = new Image;
StoneDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_stone2.png";
let WoodDoorEnemy = new Image;
WoodDoorEnemy.src = "https://raw.githubusercontent.com/XmreLoux/images/main/door_wood1.png", sprite[1e4] = [WoodSpikeAlly, WoodSpikeAlly], sprite[10001] = [WoodSpikeEnemy, WoodSpikeEnemy], sprite[10002] = [StoneSpikeAlly, StoneSpikeAlly], sprite[10003] = [StoneSpikeEnemy, StoneSpikeEnemy], sprite[10004] = [GoldSpikeAlly, GoldSpikeAlly], sprite[10005] = [GoldSpikeEnemy, GoldSpikeEnemy], sprite[10006] = [DiamondSpikeAlly, DiamondSpikeAlly], sprite[10007] = [DiamondSpikeEnemy, DiamondSpikeEnemy], sprite[10008] = [AmethystSpikeAlly, AmethystSpikeAlly], sprite[10009] = [AmethystSpikeEnemy, AmethystSpikeEnemy], sprite[10010] = [ReiditeSpikeAlly, ReiditeSpikeAlly], sprite[10011] = [ReiditeSpikeEnemy, ReiditeSpikeEnemy], sprite[10012] = [WoodSpikeDoorAlly, WoodSpikeDoorAlly], sprite[10013] = [WoodSpikeDoorEnemy, WoodSpikeDoorEnemy], sprite[10014] = [StoneSpikeDoorAlly, StoneSpikeDoorAlly], sprite[10015] = [StoneSpikeDoorEnemy, StoneSpikeDoorEnemy], sprite[10016] = [GoldSpikeDoorAlly, GoldSpikeDoorAlly], sprite[10017] = [GoldSpikeDoorEnemy, GoldSpikeDoorEnemy], sprite[10018] = [DiamondSpikeDoorAlly, DiamondSpikeDoorAlly], sprite[10019] = [DiamondSpikeDoorEnemy, DiamondSpikeDoorEnemy], sprite[10020] = [AmethystSpikeDoorAlly, AmethystSpikeDoorAlly], sprite[10021] = [AmethystSpikeDoorEnemy, AmethystSpikeDoorEnemy], sprite[10022] = [ReiditeSpikeDoorAlly, ReiditeSpikeDoorAlly], sprite[10023] = [ReiditeSpikeDoorEnemy, ReiditeSpikeDoorEnemy], sprite[10024] = [WoodDoorAlly, WoodDoorAlly], sprite[10025] = [WoodDoorEnemy, WoodDoorEnemy], sprite[10026] = [StoneDoorAlly, StoneDoorAlly], sprite[10027] = [StoneDoorEnemy, StoneDoorEnemy], sprite[10028] = [GoldDoorAlly, GoldDoorAlly], sprite[10029] = [GoldDoorEnemy, GoldDoorEnemy], sprite[10030] = [DiamondDoorAlly, DiamondDoorAlly], sprite[10031] = [DiamondDoorEnemy, DiamondDoorEnemy], sprite[10032] = [AmethystDoorAlly, AmethystDoorAlly], sprite[10033] = [AmethystDoorEnemy, AmethystDoorEnemy], sprite[10034] = [ReiditeDoorAlly, ReiditeDoorAlly], sprite[10035] = [ReiditeDoorEnemy, ReiditeDoorEnemy], RARITY = {}, RARITY.FREE = 0, RARITY.WOOD = 1, RARITY.STONE = 2, RARITY.GOLD = 3, RARITY.DIAMOND = 4, RARITY.AMETHYST = 5, RARITY.REIDITE = 6, RARITY.SPECIAL = 7, RARITY.LEVEL = 8, COSMETICS = {}, MINIMAP_UTILS = [], find_cosmetics_per_id = function(e, t) {
    for (var i = 0; i < e.length; i++)
        if (e[i].id === t) return i;
    return -1
};
var MINIMAP_LIST = [];

function render_type_resources_minimap(e, t) {
    for (var i = 0; i < MINIMAP_LIST.length; i += t) {
        var r = MINIMAP_LIST[i];
        r[0] === e && render_resource_minimap(r[0], r[1], r[2], r[3])
    }
}

function render_all_resources_minimap() {
    render_type_resources_minimap("isl", 1), render_type_resources_minimap("wtb", 20), render_type_resources_minimap("la", 1), render_type_resources_minimap("c", 1), render_type_resources_minimap("s", 1), render_type_resources_minimap("f", 1), render_type_resources_minimap("p", 1), render_type_resources_minimap("g", 1), render_type_resources_minimap("d", 1), render_type_resources_minimap("a", 1), render_type_resources_minimap("re", 1), render_type_resources_minimap("m", 1), MINIMAP_LIST = []
}

function add_resource_minimap(e, t, i, r) {
    MINIMAP_LIST.push([e, t, i, r])
}

function render_resource_minimap(e, t, i, r) {
    var a = MINIMAP_UTILS[e];
    if (void 0 !== a)
        for (var n = 0; n < 2; n++) {
            var o = a[t][n],
                s = 193 * r / world.nw,
                _ = 193 * i / world.nh,
                T = o.width / 3.5,
                E = o.height / 3.5;
            sprite[SPRITE.MINIMAP_CTX][n].drawImage(o, s - T / 2, _ - E / 2, T, E), s = 600 * r / world.nw, _ = 600 * i / world.nh, T = o.width / 1.5, E = o.height / 1.5, sprite[SPRITE.BIGMAP_CTX][n].drawImage(o, s - T / 2, _ - E / 2, T, E)
        }
}

function fill_path(e, t, i, r) {
    t && (e.fillStyle = t, e.fill()), i && (e.lineWidth = r, e.strokeStyle = i, e.stroke())
}

function round_rect(e, t, i, r, a, n) {
    r < 2 * n && (n = r / 2), a < 2 * n && (n = a / 2), 0 > n && (n = 0), e.beginPath(), e.moveTo(t + n, i), e.arcTo(t + r, i, t + r, i + a, n), e.arcTo(t + r, i + a, t, i + a, n), e.arcTo(t, i + a, t, i, n), e.arcTo(t, i, t + r, i, n), e.closePath()
}

function semi_round_rect(e, t, i, r, a, n) {
    r < 2 * n && (n = r / 2), a < 2 * n && (n = a / 2), 0 > n && (n = 0), e.beginPath(), e.moveTo(t + n, i), e.arcTo(t + r, i, t + r, i + a, 0), e.arcTo(t + r, i + a, t, i + a, n), e.arcTo(t, i + a, t, i, 0), e.arcTo(t, i, t + r, i, n), e.closePath()
}

function circle(e, t, i, r) {
    e.beginPath(), e.arc(t, i, r, 0, 2 * Math.PI)
}

function circle_angle(e, t, i, r, a) {
    e.beginPath(), e.lineCap = "round", e.arc(t, i, r, 0, 2 * Math.PI * a)
}

function round_regular_polygon(e, t, i, r) {
    var a = 2 * Math.PI / t;
    e.beginPath();
    for (var n = [{
            x: i,
            y: 0
        }], o = [], s = 1; s < t; s++) {
        n.push({
            x: Math.cos(s * a) * i,
            y: Math.sin(s * a) * i
        });
        var _ = n.length;
        o.push(Utils.middle_point(n[_ - 2], n[_ - 1]))
    }
    o.push(Utils.middle_point(n[n.length - 1], n[0]));
    var T = o[o.length - 1];
    e.moveTo(T.x, T.y);
    for (s = 0; s < t; s++) e.arcTo(n[s].x, n[s].y, o[s].x, o[s].y, r);
    e.closePath()
}

function create_rotated_img(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = Math.sqrt(t.width * t.width + t.height * t.height);
    return d2 = a / 2, i.width = a, i.height = a, r.translate(d2, d2), r.rotate(e), r.drawImage(t, -t.width / 2, -t.height / 2), i
}

function create_message(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = Math.floor(28 * e),
        n = Math.floor(20 * e);
    r.font = n + "px Baloo Paaji";
    var o = 8 * e,
        s = r.measureText(t).width + 2 * o;
    return i.width = s, i.height = a, round_rect(r, 0, 0, s, a, 10 * e), r.globalAlpha = .5, fill_path(r, "#000"), r.globalAlpha = 1, r.textBaseline = "middle", r.font = n + "px Baloo Paaji", r.beginPath(), r.fillStyle = "#FFF", r.fillText(t, o, a / 2), i
}

function create_accessory(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 120 * e, r.height = 110 * e, 1 == i ? (circle(a, 35 * e, 75 * e, 19.72308292331602 * e), fill_path(a, t[1], t[0], 4 * e), a.save(), a.translate(11 * e, 77 * e), round_rect(a, -4 * e, -4 * e, 8 * e, 8 * e, 10 * e), a.restore(), fill_path(a, void 0, t[0], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(11 * e, 81 * e), a.bezierCurveTo(13 * e, 105 * e, 9 * e, 106 * e, 8 * e, 91 * e), fill_path(a, void 0, t[0], 4 * e)) : 2 == i ? (circle(a, 85 * e, 75 * e, 16 * e), fill_path(a, t[0], t[0], 4 * e), a.scale(-1.7 * e, 1.7 * e), a.translate(-120 * e, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(20 * e, 95 * e), a.bezierCurveTo(56.5 * e, 54 * e, 56.5 * e, 54 * e, 93 * e, 13 * e), a.bezierCurveTo(89 * e, 13 * e, 89 * e, 13 * e, 85 * e, 13 * e), a.bezierCurveTo(49.5 * e, 53 * e, 49.5 * e, 53 * e, 14 * e, 93 * e), a.bezierCurveTo(15 * e, 94 * e, 15 * e, 94 * e, 19 * e, 95 * e), a.closePath(), fill_path(a, t[0], t[0], 4 * e)) : 3 == i ? (a.translate(-52 * e, 0), a.save(), a.translate(84.5 * e, 36.5 * e), a.rotate(-.96), round_rect(a, -5.5 * e, -15.5 * e, 11 * e, 31 * e, 4 * e), a.restore(), fill_path(a, t[0], t[1], 4 * e), a.save(), a.translate(84 * e, 36 * e), a.rotate(.64), round_rect(a, -5 * e, -16 * e, 10 * e, 32 * e, 4 * e), a.restore(), fill_path(a, t[0], t[1], 4 * e), a.save(), a.translate(83.5 * e, 36.5 * e), a.rotate(.68), round_rect(a, -2.5 * e, -6.5 * e, 5 * e, 13 * e, 4 * e), a.restore(), fill_path(a, t[1])) : 4 == i ? (circle(a, 35 * e, 85 * e, 17 * e), fill_path(a, t[1], t[0], 3 * e), circle(a, 85 * e, 85 * e, 17 * e), fill_path(a, t[1], t[0], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(53 * e, 86 * e), a.bezierCurveTo(59 * e, 83 * e, 63 * e, 83 * e, 67 * e, 86 * e), fill_path(a, void 0, t[0], 4 * e)) : 5 == i ? (a.scale(1.2, 1.2), a.translate(-27 * e, -8 * e), a.scale(1.2, 1.2), a.translate(-10 * e, 0), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(97 * e, 23 * e), a.bezierCurveTo(105 * e, 24 * e, 107 * e, 37 * e, 97 * e, 39 * e), a.bezierCurveTo(85 * e, 40 * e, 84 * e, 22 * e, 97 * e, 23 * e), a.closePath(), fill_path(a, void 0, t[0], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(96 * e, 24 * e), a.bezierCurveTo(96 * e, 30.5 * e, 96 * e, 30.5 * e, 96 * e, 37 * e), a.closePath(), fill_path(a, void 0, t[0], 3 * e), a.translate(0, -2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(88 * e, 37 * e), a.bezierCurveTo(93 * e, 33 * e, 91.5 * e, 34.5 * e, 95 * e, 32 * e), a.bezierCurveTo(98.5 * e, 34 * e, 98.5 * e, 34 * e, 102 * e, 36 * e), fill_path(a, void 0, t[0], 3 * e)) : 6 == i ? (circle(a, 13 * e, 79 * e, 5 * e), fill_path(a, t[0]), circle(a, 106 * e, 79 * e, 5 * e), fill_path(a, t[0])) : 7 == i ? (a.translate(0 * e, 5 * e), a.globalAlpha = .5, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(27 * e, 14.399993896484375 * e), a.bezierCurveTo(29 * e, 4.399993896484375 * e, 44 * e, 16.399993896484375 * e, 37 * e, 21.399993896484375 * e), a.bezierCurveTo(47 * e, 17.399993896484375 * e, 45 * e, 36.399993896484375 * e, 37 * e, 32.399993896484375 * e), a.bezierCurveTo(44 * e, 40.399993896484375 * e, 28 * e, 47.399993896484375 * e, 26 * e, 37.399993896484375 * e), a.bezierCurveTo(22 * e, 46.399993896484375 * e, 9 * e, 37.399993896484375 * e, 16 * e, 30.399993896484375 * e), a.bezierCurveTo(6 * e, 34.399993896484375 * e, 9 * e, 15.399993896484375 * e, 18 * e, 19.399993896484375 * e), a.bezierCurveTo(10 * e, 12.399993896484375 * e, 26 * e, 7.399993896484375 * e, 26 * e, 14.399993896484375 * e), a.closePath(), fill_path(a, t[3]), a.globalAlpha = 1, a.translate(0 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(27 * e, 14.399993896484375 * e), a.bezierCurveTo(29 * e, 4.399993896484375 * e, 44 * e, 16.399993896484375 * e, 37 * e, 21.399993896484375 * e), a.bezierCurveTo(47 * e, 17.399993896484375 * e, 45 * e, 36.399993896484375 * e, 37 * e, 32.399993896484375 * e), a.bezierCurveTo(44 * e, 40.399993896484375 * e, 28 * e, 47.399993896484375 * e, 26 * e, 37.399993896484375 * e), a.bezierCurveTo(22 * e, 46.399993896484375 * e, 9 * e, 37.399993896484375 * e, 16 * e, 30.399993896484375 * e), a.bezierCurveTo(6 * e, 34.399993896484375 * e, 9 * e, 15.399993896484375 * e, 18 * e, 19.399993896484375 * e), a.bezierCurveTo(10 * e, 12.399993896484375 * e, 26 * e, 7.399993896484375 * e, 26 * e, 14.399993896484375 * e), a.closePath(), fill_path(a, t[1], t[2], 2 * e), circle(a, 27 * e, 26.800003051757812 * e, 5 * e), fill_path(a, t[0])) : 8 == i && (a.translate(-32 * e, -19 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(123 * e, 46 * e), a.bezierCurveTo(132 * e, 46 * e, 135 * e, 39 * e, 134 * e, 33 * e), a.bezierCurveTo(145 * e, 43 * e, 142 * e, 65 * e, 127 * e, 66 * e), a.bezierCurveTo(118 * e, 61 * e, 119 * e, 51 * e, 123 * e, 46 * e), a.closePath(), fill_path(a, t[0], t[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(49 * e, 32 * e), a.bezierCurveTo(49 * e, 44 * e, 56 * e, 44 * e, 61 * e, 46 * e), a.bezierCurveTo(67 * e, 52 * e, 65 * e, 65 * e, 55 * e, 66 * e), a.bezierCurveTo(37 * e, 60 * e, 42 * e, 38 * e, 49 * e, 32 * e), a.closePath(), fill_path(a, t[0], t[1], 4 * e)), r
}

function create_hurt_player(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 120 * e,
        n = 110 * e,
        o = a / 2,
        s = n / 2,
        _ = 20 * e,
        T = 112 * e,
        E = 82 * e,
        I = T / 2,
        l = E / 2,
        u = 4 * e;
    return i.width = a, i.height = n, r.globalAlpha = 1, r.translate(o, s), round_rect(r, -I, -l, T, E, _), fill_path(r, t, t, u), i
}

function create_player(e, t, i) {
    var r = (a = document.createElement("canvas")).getContext("2d");
    if (a.width = 176 * e, a.height = 127 * e, 8 == i) r.globalAlpha = .3, r.save(), r.translate(87 * e, 64.5 * e), round_rect(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e), r.restore(), fill_path(r, t[0], t[1], 4 * e), r.save(), r.translate(82 * e, 69.5 * e), round_rect(r, -51 * e, -36.5 * e, 102 * e, 73 * e, 18 * e), r.restore(), fill_path(r, t[2], t[1], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(55 * e, 41 * e), r.bezierCurveTo(38 * e, 41 * e, 37 * e, 50 * e, 38 * e, 61 * e), r.bezierCurveTo(42 * e, 50 * e, 46 * e, 46 * e, 55 * e, 42 * e), r.closePath(), fill_path(r, t[3]), r.globalAlpha = 1, r.translate(26 * e, 10 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[4]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[4]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[5]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[5]);
    else if (9 == i) {
        var a;
        r = (a = document.createElement("canvas")).getContext("2d");
        a.width = 332 * e, a.height = 127 * e, r.globalAlpha = .5, r.translate(0, -36 * e), r.save(), r.translate(165.25 * e, 106.84375 * e), round_rect(r, -56.5 * e, -41.5 * e, 113 * e, 83 * e, 18 * e), r.restore(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(0, 20 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(210.75 * e, 72.84375 * e), r.bezierCurveTo(238.75 * e, 74.84375 * e, 270.75 * e, 85.84375 * e, 269.75 * e, 90.84375 * e), r.bezierCurveTo(268.75 * e, 94.84375 * e, 221.75 * e, 81.84375 * e, 206.75 * e, 85.84375 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(208.75 * e, 69.84375 * e), r.bezierCurveTo(241.75 * e, 61.84375 * e, 265.75 * e, 65.84375 * e, 286.75 * e, 69.84375 * e), r.bezierCurveTo(290.75 * e, 75.84375 * e, 225.75 * e, 69.84375 * e, 215.75 * e, 80.84375 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(209.75 * e, 69.84375 * e), r.bezierCurveTo(228.75 * e, 51.84375 * e, 265.75 * e, 46.84375 * e, 294.75 * e, 51.84375 * e), r.bezierCurveTo(301.75 * e, 55.84375 * e, 224.75 * e, 60.84375 * e, 216.75 * e, 80.84375 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(193.75 * e, 72.84375 * e), r.bezierCurveTo(206.75 * e, 47.84375 * e, 221.75 * e, 37.84375 * e, 249.75 * e, 35.84375 * e), r.bezierCurveTo(264.75 * e, 34.84375 * e, 305.75 * e, 16.84375 * e, 300.75 * e, 24.84375 * e), r.bezierCurveTo(273.75 * e, 45.84375 * e, 245.75 * e, 46.84375 * e, 235.75 * e, 62.84375 * e), r.bezierCurveTo(218.75 * e, 82.84375 * e, 215.75 * e, 87.84375 * e, 199.75 * e, 84.84375 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(126.75 * e, 80.34375 * e), r.bezierCurveTo(94.75 * e, 88.34375 * e, 83.75 * e, 88.34375 * e, 65.75 * e, 90.34375 * e), r.bezierCurveTo(61.75 * e, 87.34375 * e, 86.75 * e, 77.34375 * e, 129.75 * e, 70.34375 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(120.75 * e, 72.34375 * e), r.bezierCurveTo(128.75 * e, 62.34375 * e, 98.75 * e, 64.34375 * e, 49.75 * e, 68.34375 * e), r.bezierCurveTo(34.75 * e, 75.34375 * e, 101.75 * e, 72.34375 * e, 124.75 * e, 78.34375 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(128.75 * e, 76.34375 * e), r.bezierCurveTo(111.75 * e, 54.34375 * e, 69.75 * e, 48.34375 * e, 39.75 * e, 50.34375 * e), r.bezierCurveTo(26.75 * e, 53.34375 * e, 86.75 * e, 59.34375 * e, 123.75 * e, 78.34375 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143.75 * e, 74.34375 * e), r.bezierCurveTo(128.75 * e, 48.34375 * e, 108.75 * e, 35.34375 * e, 81.75 * e, 35.34375 * e), r.bezierCurveTo(63.75 * e, 33.34375 * e, 26.75 * e, 15.34375 * e, 29.75 * e, 25.34375 * e), r.bezierCurveTo(33.75 * e, 30.34375 * e, 49.75 * e, 40.34375 * e, 70.75 * e, 49.34375 * e), r.bezierCurveTo(94.75 * e, 54.34375 * e, 104.75 * e, 72.34375 * e, 128.75 * e, 88.34375 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.translate(0, -28 * e), r.save(), r.translate(165.25 * e, 106.84375 * e), round_rect(r, -56.5 * e, -41.5 * e, 113 * e, 83 * e, 18 * e), r.restore(), fill_path(r, t[1], t[2], 4 * e), r.translate(28 * e, 15 * e), r.translate(0, 8 * e), r.globalAlpha = .5, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(83 * e, 52 * e), r.bezierCurveTo(78 * e, 65 * e, 110 * e, 72 * e, 139 * e, 71 * e), r.bezierCurveTo(176 * e, 71 * e, 193 * e, 61 * e, 191 * e, 54 * e), r.bezierCurveTo(202 * e, 58 * e, 198 * e, 72 * e, 187 * e, 75 * e), r.bezierCurveTo(143 * e, 87 * e, 107 * e, 79 * e, 89 * e, 75 * e), r.bezierCurveTo(72 * e, 69 * e, 74 * e, 58 * e, 83 * e, 52 * e), r.closePath(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(0 * e, -8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(83 * e, 52 * e), r.bezierCurveTo(78 * e, 65 * e, 110 * e, 72 * e, 139 * e, 71 * e), r.bezierCurveTo(176 * e, 71 * e, 193 * e, 61 * e, 191 * e, 54 * e), r.bezierCurveTo(202 * e, 58 * e, 198 * e, 72 * e, 187 * e, 75 * e), r.bezierCurveTo(143 * e, 87 * e, 107 * e, 79 * e, 89 * e, 75 * e), r.bezierCurveTo(72 * e, 69 * e, 74 * e, 58 * e, 83 * e, 52 * e), r.closePath(), fill_path(r, t[5], t[6], 4 * e), r.translate(-28 * e, -15 * e), circle(r, 141.75 * e, 127.34375 * e, 15 * e), fill_path(r, t[3]), circle(r, 191.75 * e, 127.09375 * e, 15 * e), fill_path(r, t[3]), circle(r, 138.75 * e, 119.34375 * e, 5 * e), fill_path(r, t[4]), circle(r, 188.75 * e, 119.34375 * e, 5 * e), fill_path(r, t[4]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125.75 * e, 139.34375 * e), r.bezierCurveTo(134.75 * e, 134.34375 * e, 143.75 * e, 134.34375 * e, 156.75 * e, 139.34375 * e), r.bezierCurveTo(153.25 * e, 141.84375 * e, 153.25 * e, 141.84375 * e, 149.75 * e, 144.34375 * e), r.bezierCurveTo(140.25 * e, 144.34375 * e, 140.25 * e, 144.34375 * e, 130.75 * e, 144.34375 * e), r.closePath(), fill_path(r, t[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(176.75 * e, 139.34375 * e), r.bezierCurveTo(183.75 * e, 135.34375 * e, 199.75 * e, 135.34375 * e, 205.75 * e, 139.34375 * e), r.bezierCurveTo(203.25 * e, 141.34375 * e, 203.25 * e, 141.34375 * e, 200.75 * e, 143.34375 * e), r.bezierCurveTo(190.75 * e, 143.84375 * e, 190.75 * e, 143.84375 * e, 180.75 * e, 144.34375 * e), r.closePath(), fill_path(r, t[1])
    } else r.globalAlpha = .75, r.translate(0, 8 * e), r.save(), r.translate(87 * e, 64.5 * e), round_rect(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e), r.restore(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(0, -8 * e), r.save(), r.translate(87 * e, 64.5 * e), round_rect(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e), r.restore(), fill_path(r, t[1], t[2], 4 * e), 0 == i ? (r.translate(27 * e, 10 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[3]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[3]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[4]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[4])) : 1 == i ? (r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(35 * e, 73 * e), r.bezierCurveTo(40 * e, 72 * e, 38 * e, 68 * e, 35 * e, 67 * e), r.bezierCurveTo(25 * e, 67 * e, 21 * e, 65 * e, 16 * e, 61 * e), r.bezierCurveTo(10 * e, 60 * e, 16 * e, 64 * e, 20 * e, 67 * e), r.bezierCurveTo(3 * e, 70 * e, 12 * e, 68.5 * e, 4 * e, 70 * e), r.bezierCurveTo(2 * e, 71 * e, 6 * e, 72 * e, 13 * e, 73 * e), r.bezierCurveTo(12.5 * e, 76.5 * e, 12.5 * e, 76.5 * e, 12 * e, 80 * e), r.bezierCurveTo(12 * e, 83 * e, 15 * e, 80 * e, 18 * e, 73 * e), r.bezierCurveTo(26.5 * e, 73.5 * e, 26.5 * e, 73.5 * e, 35 * e, 74 * e), r.closePath(), fill_path(r, t[5], t[6], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(134 * e, 64 * e), r.bezierCurveTo(141.5 * e, 64 * e, 141.5 * e, 64 * e, 149 * e, 64 * e), r.bezierCurveTo(153 * e, 59 * e, 156 * e, 56 * e, 159 * e, 56 * e), r.bezierCurveTo(161 * e, 57 * e, 160 * e, 60 * e, 155 * e, 65 * e), r.bezierCurveTo(165 * e, 71 * e, 168 * e, 72 * e, 169 * e, 74 * e), r.bezierCurveTo(169 * e, 76 * e, 159 * e, 71 * e, 156 * e, 72 * e), r.bezierCurveTo(154 * e, 72 * e, 155 * e, 75 * e, 156 * e, 79 * e), r.bezierCurveTo(155 * e, 81 * e, 153 * e, 78 * e, 150 * e, 72 * e), r.bezierCurveTo(142 * e, 71.5 * e, 142 * e, 71.5 * e, 134 * e, 71 * e), r.bezierCurveTo(130 * e, 69 * e, 131 * e, 65 * e, 135 * e, 64 * e), r.closePath(), fill_path(r, t[5], t[6], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(80 * e, 95 * e), r.bezierCurveTo(83 * e, 88 * e, 89 * e, 88 * e, 92 * e, 95 * e), r.bezierCurveTo(92 * e, 105 * e, 88 * e, 110 * e, 86 * e, 110 * e), r.bezierCurveTo(83 * e, 107 * e, 82 * e, 104 * e, 80 * e, 96 * e), r.closePath(), fill_path(r, t[7], t[8], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(81 * e, 100 * e), r.bezierCurveTo(82 * e, 97 * e, 83 * e, 96 * e, 85 * e, 96 * e), r.bezierCurveTo(82 * e, 100 * e, 82 * e, 101 * e, 83 * e, 103 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(83 * e, 103 * e), r.bezierCurveTo(83 * e, 102 * e, 84 * e, 100 * e, 86 * e, 100 * e), r.bezierCurveTo(84 * e, 103 * e, 84 * e, 105 * e, 84 * e, 106 * e), r.closePath(), fill_path(r, t[8]), r.translate(27 * e, 10 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[3]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[3]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[4]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[4])) : 2 == i ? (r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(48 * e, 22 * e), r.bezierCurveTo(85.5 * e, 22 * e, 85.5 * e, 22 * e, 123 * e, 22 * e), r.bezierCurveTo(138 * e, 23 * e, 147 * e, 34 * e, 143 * e, 62 * e), r.bezierCurveTo(142 * e, 67 * e, 144 * e, 70 * e, 149 * e, 73 * e), r.bezierCurveTo(147 * e, 77 * e, 145 * e, 77 * e, 143 * e, 77 * e), r.bezierCurveTo(141 * e, 85 * e, 145 * e, 92 * e, 148 * e, 97 * e), r.bezierCurveTo(142 * e, 103 * e, 134 * e, 105 * e, 121 * e, 106 * e), r.bezierCurveTo(85 * e, 106 * e, 85 * e, 106 * e, 49 * e, 106 * e), r.bezierCurveTo(32 * e, 104 * e, 29 * e, 101 * e, 24 * e, 95 * e), r.bezierCurveTo(30 * e, 86 * e, 31 * e, 85 * e, 30 * e, 78 * e), r.bezierCurveTo(27.5 * e, 76 * e, 27.5 * e, 76 * e, 25 * e, 74 * e), r.bezierCurveTo(31 * e, 68 * e, 31 * e, 60 * e, 30 * e, 46 * e), r.bezierCurveTo(31 * e, 31 * e, 37 * e, 23 * e, 47 * e, 22 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(30 * e, 44 * e), r.bezierCurveTo(66 * e, 48 * e, 99 * e, 45 * e, 141 * e, 39 * e), fill_path(r, void 0, t[3], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(30 * e, 67 * e), r.bezierCurveTo(80 * e, 44 * e, 118 * e, 43 * e, 141 * e, 60 * e), fill_path(r, void 0, t[3], 4 * e), r.globalAlpha = .4, circle(r, 31 * e, 44 * e, 9 * e), fill_path(r, t[4]), circle(r, 42 * e, 47 * e, 9 * e), fill_path(r, t[5]), circle(r, 70 * e, 42 * e, 9 * e), fill_path(r, t[6]), circle(r, 53 * e, 45 * e, 9 * e), fill_path(r, t[7]), circle(r, 103 * e, 40 * e, 9 * e), fill_path(r, t[8]), circle(r, 116 * e, 41 * e, 9 * e), fill_path(r, t[5]), circle(r, 131 * e, 41 * e, 9 * e), fill_path(r, t[4]), circle(r, 39 * e, 64 * e, 9 * e), fill_path(r, t[7]), circle(r, 51 * e, 60 * e, 9 * e), fill_path(r, t[6]), circle(r, 74 * e, 53 * e, 9 * e), fill_path(r, t[4]), circle(r, 83 * e, 51 * e, 9 * e), fill_path(r, t[8]), circle(r, 95 * e, 51 * e, 9 * e), fill_path(r, t[6]), circle(r, 107 * e, 49 * e, 9 * e), fill_path(r, t[7]), circle(r, 120 * e, 50 * e, 9 * e), fill_path(r, t[4]), circle(r, 137 * e, 57 * e, 9 * e), fill_path(r, t[5]), r.globalAlpha = 1, circle(r, 31 * e, 44 * e, 4 * e), fill_path(r, t[4]), circle(r, 42 * e, 47 * e, 4 * e), fill_path(r, t[5]), circle(r, 53 * e, 45 * e, 4 * e), fill_path(r, t[7]), circle(r, 70 * e, 43 * e, 4 * e), fill_path(r, t[6]), circle(r, 50 * e, 59 * e, 4 * e), fill_path(r, t[6]), circle(r, 39 * e, 64 * e, 4 * e), fill_path(r, t[7]), circle(r, 83 * e, 51 * e, 4 * e), fill_path(r, t[4]), circle(r, 74 * e, 53 * e, 4 * e), fill_path(r, t[8]), circle(r, 95 * e, 51 * e, 4 * e), fill_path(r, t[6]), circle(r, 103 * e, 41 * e, 4 * e), fill_path(r, t[8]), circle(r, 107 * e, 49 * e, 4 * e), fill_path(r, t[7]), circle(r, 116 * e, 41 * e, 4 * e), fill_path(r, t[5]), circle(r, 131 * e, 41 * e, 4 * e), fill_path(r, t[4]), circle(r, 137 * e, 57 * e, 4 * e), fill_path(r, t[5]), circle(r, 120 * e, 50 * e, 4 * e), fill_path(r, t[4]), r.translate(27 * e, 10 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[9]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[9]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[10]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[10])) : 3 == i ? (r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(23 * e, 95 * e), r.bezierCurveTo(30 * e, 85 * e, 30 * e, 83 * e, 30 * e, 72 * e), r.bezierCurveTo(30 * e, 61.5 * e, 30 * e, 61.5 * e, 30 * e, 51 * e), r.bezierCurveTo(29 * e, 33 * e, 42 * e, 23 * e, 54 * e, 24 * e), r.bezierCurveTo(86.5 * e, 24 * e, 86.5 * e, 24 * e, 119 * e, 24 * e), r.bezierCurveTo(135 * e, 24 * e, 143 * e, 33 * e, 143 * e, 47 * e), r.bezierCurveTo(143 * e, 63.5 * e, 143 * e, 63.5 * e, 143 * e, 80 * e), r.bezierCurveTo(142 * e, 86 * e, 147 * e, 93 * e, 150 * e, 96 * e), r.bezierCurveTo(144 * e, 107 * e, 113 * e, 112 * e, 84 * e, 111 * e), r.bezierCurveTo(52 * e, 112 * e, 34 * e, 106 * e, 23 * e, 96 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(30 * e, 81 * e), r.bezierCurveTo(56 * e, 99 * e, 104 * e, 98 * e, 142 * e, 84 * e), r.bezierCurveTo(145.5 * e, 89.5 * e, 145.5 * e, 89.5 * e, 149 * e, 95 * e), r.bezierCurveTo(142 * e, 106 * e, 127 * e, 110 * e, 81 * e, 110 * e), r.bezierCurveTo(36 * e, 112 * e, 28 * e, 99 * e, 23 * e, 95 * e), r.bezierCurveTo(31 * e, 87 * e, 31 * e, 82 * e, 30 * e, 81 * e), r.closePath(), fill_path(r, t[3], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(23 * e, 95 * e), r.bezierCurveTo(30 * e, 85 * e, 30 * e, 83 * e, 30 * e, 72 * e), r.bezierCurveTo(30 * e, 61.5 * e, 30 * e, 61.5 * e, 30 * e, 51 * e), r.bezierCurveTo(29 * e, 33 * e, 42 * e, 23 * e, 54 * e, 24 * e), r.bezierCurveTo(86.5 * e, 24 * e, 86.5 * e, 24 * e, 119 * e, 24 * e), r.bezierCurveTo(135 * e, 24 * e, 143 * e, 33 * e, 143 * e, 47 * e), r.bezierCurveTo(143 * e, 63.5 * e, 143 * e, 63.5 * e, 143 * e, 80 * e), r.bezierCurveTo(142 * e, 86 * e, 147 * e, 93 * e, 150 * e, 96 * e), r.bezierCurveTo(144 * e, 107 * e, 113 * e, 112 * e, 84 * e, 111 * e), r.bezierCurveTo(52 * e, 112 * e, 34 * e, 106 * e, 23 * e, 96 * e), r.closePath(), fill_path(r, void 0, t[2], 4 * e), r.translate(27 * e, 10 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[6]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[6]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[7]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[7]), r.translate(-96 * e, -25 * e), r.scale(1.8, 1.8), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(85 * e, 21 * e), r.bezierCurveTo(73 * e, 16 * e, 70 * e, 16 * e, 70 * e, 26 * e), r.bezierCurveTo(72 * e, 34 * e, 75 * e, 37 * e, 85 * e, 26 * e), r.closePath(), fill_path(r, t[4], t[5], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(89 * e, 21 * e), r.bezierCurveTo(104 * e, 16 * e, 105 * e, 19 * e, 106 * e, 24 * e), r.bezierCurveTo(105 * e, 36 * e, 97 * e, 36 * e, 90 * e, 28 * e), r.closePath(), fill_path(r, t[4], t[5], 3 * e), circle(r, 87 * e, 23 * e, 6.324555320336759 * e), fill_path(r, t[4], t[5], 3 * e)) : 4 == i ? (r.translate(27 * e, 8 * e), circle(r, 15 * e, 76 * e, 9.219544457292887 * e), fill_path(r, t[3]), circle(r, 106 * e, 76 * e, 9.219544457292887 * e), fill_path(r, t[3]), r.translate(-27 * e, -8 * e), r.translate(27 * e, 10 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[5]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[5]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[6]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[6]), r.translate(-27 * e, -10 * e), r.translate(27 * e, 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(52 * e, 86 * e), r.bezierCurveTo(54 * e, 78 * e, 65 * e, 80 * e, 67 * e, 85 * e), r.bezierCurveTo(69 * e, 89 * e, 64 * e, 99 * e, 71 * e, 106 * e), r.bezierCurveTo(75 * e, 109 * e, 61 * e, 108 * e, 58 * e, 102 * e), r.bezierCurveTo(53 * e, 97 * e, 52 * e, 91 * e, 52 * e, 86 * e), r.closePath(), fill_path(r, t[4])) : 6 == i ? (r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.translate(2 * e, 0), r.moveTo(28 * e, 69 * e), r.bezierCurveTo(26 * e, 39 * e, 31 * e, 25 * e, 52 * e, 24 * e), r.bezierCurveTo(86 * e, 23.5 * e, 86 * e, 23.5 * e, 120 * e, 23 * e), r.bezierCurveTo(137 * e, 23 * e, 145 * e, 33 * e, 144 * e, 53 * e), r.bezierCurveTo(144.5 * e, 63 * e, 144.5 * e, 63 * e, 145 * e, 73 * e), r.bezierCurveTo(141 * e, 41 * e, 106 * e, 41 * e, 98 * e, 59 * e), r.bezierCurveTo(92 * e, 69 * e, 94 * e, 98 * e, 90 * e, 95 * e), r.bezierCurveTo(86 * e, 95 * e, 86 * e, 95 * e, 82 * e, 95 * e), r.bezierCurveTo(79 * e, 94 * e, 87 * e, 33 * e, 48 * e, 47 * e), r.bezierCurveTo(31 * e, 57 * e, 30 * e, 65 * e, 28 * e, 72 * e), r.closePath(), fill_path(r, t[3]), r.save(), r.translate(87 * e, 64.5 * e), round_rect(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e), r.restore(), fill_path(r, void 0, t[2], 4 * e), r.translate(27 * e, 10 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[3]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[3]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[4]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[4]), r.scale(1.4, 1.4), r.translate(-43.5 * e, -32 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(86 * e, 105 * e), r.bezierCurveTo(89 * e, 103 * e, 90 * e, 100 * e, 92 * e, 97 * e), r.bezierCurveTo(93 * e, 91 * e, 85 * e, 90 * e, 81 * e, 95 * e), r.bezierCurveTo(80 * e, 97 * e, 83 * e, 101 * e, 85 * e, 105 * e), r.closePath(), fill_path(r, t[5], t[6], 3 * e)) : 7 == i ? (r.save(), r.translate(86 * e, 64.5 * e), round_rect(r, -16 * e, -43.5 * e, 32 * e, 87 * e, 5 * e), r.restore(), fill_path(r, t[3], t[4], 4 * e), r.translate(0, 6 * e), r.globalAlpha = .5, r.save(), r.translate(85.5 * e, 47 * e), round_rect(r, -58.5 * e, -8 * e, 117 * e, 16 * e, 5 * e), r.restore(), fill_path(r, t[0]), r.translate(0, -6 * e), r.globalAlpha = 1, r.save(), r.translate(85.5 * e, 47 * e), round_rect(r, -58.5 * e, -8 * e, 117 * e, 16 * e, 5 * e), r.restore(), fill_path(r, t[3], t[4], 4 * e), r.translate(0, 7 * e), r.globalAlpha = .5, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 44 * e), r.bezierCurveTo(85 * e, 26 * e, 96 * e, 23 * e, 103 * e, 30 * e), r.bezierCurveTo(110 * e, 36 * e, 110 * e, 47 * e, 92 * e, 50 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(87 * e, 44 * e), r.bezierCurveTo(108 * e, 47 * e, 109 * e, 54 * e, 102 * e, 63 * e), r.bezierCurveTo(92 * e, 77 * e, 80 * e, 61 * e, 84 * e, 49 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 43 * e), r.bezierCurveTo(86 * e, 24 * e, 72 * e, 23 * e, 68 * e, 31 * e), r.bezierCurveTo(56 * e, 42 * e, 70 * e, 49 * e, 81 * e, 47 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(78 * e, 45 * e), r.bezierCurveTo(61 * e, 49 * e, 60 * e, 58 * e, 68 * e, 64 * e), r.bezierCurveTo(78 * e, 75 * e, 84 * e, 65 * e, 89 * e, 54 * e), r.closePath(), fill_path(r, t[0]), r.translate(0, -7 * e), r.globalAlpha = 1, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 44 * e), r.bezierCurveTo(85 * e, 26 * e, 96 * e, 23 * e, 103 * e, 30 * e), r.bezierCurveTo(110 * e, 36 * e, 110 * e, 47 * e, 92 * e, 50 * e), r.closePath(), fill_path(r, t[3], t[4], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(87 * e, 44 * e), r.bezierCurveTo(108 * e, 47 * e, 109 * e, 54 * e, 102 * e, 63 * e), r.bezierCurveTo(92 * e, 77 * e, 80 * e, 61 * e, 84 * e, 49 * e), r.closePath(), fill_path(r, t[3], t[4], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 43 * e), r.bezierCurveTo(86 * e, 24 * e, 72 * e, 23 * e, 68 * e, 31 * e), r.bezierCurveTo(56 * e, 42 * e, 70 * e, 49 * e, 81 * e, 47 * e), r.closePath(), fill_path(r, t[3], t[4], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(78 * e, 45 * e), r.bezierCurveTo(61 * e, 49 * e, 60 * e, 58 * e, 68 * e, 64 * e), r.bezierCurveTo(78 * e, 75 * e, 84 * e, 65 * e, 89 * e, 54 * e), r.closePath(), fill_path(r, t[3], t[4], 4 * e), r.translate(0, 6 * e), r.globalAlpha = .5, r.save(), r.translate(85 * e, 47.5 * e), r.rotate(0), round_rect(r, -10 * e, -10.5 * e, 20 * e, 21 * e, 5 * e), r.restore(), fill_path(r, t[0]), r.translate(0, -6 * e), r.globalAlpha = 1, r.save(), r.translate(85 * e, 47.5 * e), r.rotate(0), round_rect(r, -10 * e, -10.5 * e, 20 * e, 21 * e, 5 * e), r.restore(), fill_path(r, t[3], t[4], 4 * e), r.translate(27 * e, 10 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[5]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[5]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[6]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[6])) : 5 == i ? (a.width = 211 * e, a.height = 152 * e, r.globalAlpha = .5, r.translate(0, 8 * e), r.save(), r.translate(105.5 * e, 76.5 * e), round_rect(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e), r.restore(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(0, -8 * e), r.save(), r.translate(105.5 * e, 76.5 * e), round_rect(r, -56 * e, -41.5 * e, 112 * e, 83 * e, 18 * e), r.restore(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(68 * e, 39 * e), r.bezierCurveTo(48 * e, 37 * e, 43 * e, 27 * e, 40 * e, 12 * e), r.bezierCurveTo(31 * e, 25 * e, 20 * e, 17 * e, 11 * e, 9 * e), r.bezierCurveTo(9 * e, 41 * e, 40 * e, 44 * e, 62 * e, 45 * e), r.closePath(), fill_path(r, t[3], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143 * e, 38 * e), r.bezierCurveTo(161 * e, 40 * e, 169 * e, 24 * e, 171 * e, 13 * e), r.bezierCurveTo(181 * e, 23 * e, 188 * e, 20 * e, 199 * e, 9 * e), r.bezierCurveTo(204 * e, 35 * e, 182 * e, 44 * e, 152 * e, 45 * e), r.closePath(), fill_path(r, t[3], t[2], 4 * e), r.save(), r.translate(105.5 * e, 76.5 * e), round_rect(r, -55 * e, -40.5 * e, 106 * e, 77 * e, 18 * e), r.restore(), fill_path(r, t[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149 * e, 45 * e), r.bezierCurveTo(155 * e, 37 * e, 158 * e, 37 * e, 161 * e, 52 * e), r.bezierCurveTo(164 * e, 60 * e, 161 * e, 65 * e, 152 * e, 58 * e), r.bezierCurveTo(145 * e, 51 * e, 143 * e, 49 * e, 149 * e, 45 * e), r.closePath(), fill_path(r, t[4], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(60 * e, 43 * e), r.bezierCurveTo(67 * e, 47 * e, 67 * e, 51 * e, 57 * e, 59 * e), r.bezierCurveTo(50 * e, 64 * e, 47 * e, 64 * e, 49 * e, 55 * e), r.bezierCurveTo(49 * e, 42 * e, 51 * e, 38 * e, 59 * e, 42 * e), r.closePath(), fill_path(r, t[4], t[2], 4 * e), circle(r, 105 * e, 107 * e, 10.63014581273465 * e), fill_path(r, t[5], t[6], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105 * e, 100 * e), r.bezierCurveTo(111 * e, 101 * e, 113 * e, 104 * e, 112 * e, 109 * e), r.closePath(), fill_path(r, t[7]), r.translate(44.5 * e, 22 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[8]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[8]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[9]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[9])) : 9 == i && (r.save(), r.translate(110 * e, 22 * e), round_rect(r, -16 * e, -5 * e, 32 * e, 10 * e, 10 * e), r.restore(), fill_path(r, t[1], t[2], 3 * e), r.save(), r.translate(109.5 * e, 17 * e), round_rect(r, -18.5 * e, -3 * e, 37 * e, 6 * e, 10 * e), r.restore(), fill_path(r, t[3], t[4], 3 * e), r.globalAlpha = .5, r.translate(0, 5 * e), r.save(), r.translate(86 * e, 40 * e), round_rect(r, -58 * e, -9 * e, 116 * e, 18 * e, 6 * e), r.restore(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(0, -5 * e), r.save(), r.translate(86 * e, 40 * e), round_rect(r, -58 * e, -9 * e, 116 * e, 18 * e, 6 * e), r.restore(), fill_path(r, t[3], t[4], 3 * e), r.globalAlpha = .75, r.translate(0, 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(109 * e, 47 * e), r.bezierCurveTo(110.5 * e, 45 * e, 110.5 * e, 45 * e, 112 * e, 43 * e), r.bezierCurveTo(114 * e, 44 * e, 114 * e, 44 * e, 116 * e, 45 * e), r.bezierCurveTo(117.5 * e, 43 * e, 117.5 * e, 43 * e, 119 * e, 41 * e), r.bezierCurveTo(121 * e, 41.5 * e, 121 * e, 41.5 * e, 123 * e, 42 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.translate(0, 5 * e), r.lineCap = "round", r.lineJoin = "round", r.moveTo(54 * e, 35 * e), r.bezierCurveTo(61.5 * e, 35 * e, 61.5 * e, 35 * e, 69 * e, 35 * e), r.bezierCurveTo(70 * e, 48 * e, 70 * e, 60 * e, 60 * e, 59 * e), r.bezierCurveTo(45 * e, 61 * e, 44 * e, 60 * e, 43 * e, 53 * e), r.bezierCurveTo(42 * e, 49 * e, 55 * e, 51 * e, 55 * e, 44 * e), r.closePath(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(0, -5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105 * e, 38 * e), r.bezierCurveTo(110 * e, 48 * e, 110 * e, 50 * e, 105 * e, 53 * e), r.bezierCurveTo(98 * e, 62 * e, 107 * e, 66 * e, 117 * e, 60 * e), r.bezierCurveTo(128 * e, 56 * e, 130 * e, 56 * e, 126 * e, 49 * e), r.bezierCurveTo(123.5 * e, 41.5 * e, 123.5 * e, 41.5 * e, 121 * e, 34 * e), r.closePath(), fill_path(r, t[7], t[8], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(109 * e, 47 * e), r.bezierCurveTo(110.5 * e, 45 * e, 110.5 * e, 45 * e, 112 * e, 43 * e), r.bezierCurveTo(114 * e, 44 * e, 114 * e, 44 * e, 116 * e, 45 * e), r.bezierCurveTo(117.5 * e, 43 * e, 117.5 * e, 43 * e, 119 * e, 41 * e), r.bezierCurveTo(121 * e, 41.5 * e, 121 * e, 41.5 * e, 123 * e, 42 * e), r.closePath(), fill_path(r, void 0, t[6], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 33 * e), r.bezierCurveTo(88.5 * e, 34.5 * e, 88.5 * e, 34.5 * e, 93 * e, 36 * e), r.bezierCurveTo(87 * e, 43 * e, 88 * e, 45 * e, 91 * e, 46 * e), r.bezierCurveTo(98 * e, 56 * e, 91 * e, 57 * e, 85 * e, 53 * e), r.bezierCurveTo(80 * e, 50 * e, 78 * e, 49 * e, 82 * e, 43 * e), r.bezierCurveTo(83.5 * e, 38 * e, 83.5 * e, 38 * e, 85 * e, 33 * e), r.closePath(), fill_path(r, t[5], t[6], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(54 * e, 35 * e), r.bezierCurveTo(61.5 * e, 35 * e, 61.5 * e, 35 * e, 69 * e, 35 * e), r.bezierCurveTo(70 * e, 48 * e, 70 * e, 60 * e, 60 * e, 59 * e), r.bezierCurveTo(45 * e, 61 * e, 44 * e, 60 * e, 43 * e, 53 * e), r.bezierCurveTo(42 * e, 49 * e, 55 * e, 51 * e, 55 * e, 44 * e), r.closePath(), fill_path(r, t[7], t[8], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(48 * e, 49 * e), r.bezierCurveTo(50 * e, 50 * e, 50 * e, 50 * e, 52 * e, 51 * e), r.bezierCurveTo(50.5 * e, 52 * e, 50.5 * e, 52 * e, 49 * e, 53 * e), r.bezierCurveTo(51 * e, 54.5 * e, 51 * e, 54.5 * e, 53 * e, 56 * e), r.bezierCurveTo(51 * e, 57.5 * e, 51 * e, 57.5 * e, 49 * e, 59 * e), r.closePath(), fill_path(r, void 0, t[6], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(54 * e, 39 * e), r.bezierCurveTo(61.5 * e, 39.5 * e, 61.5 * e, 39.5 * e, 69 * e, 40 * e), r.closePath(), fill_path(r, void 0, t[6], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(55 * e, 43 * e), r.bezierCurveTo(61.5 * e, 43.5 * e, 61.5 * e, 43.5 * e, 68 * e, 44 * e), r.closePath(), fill_path(r, void 0, t[6], 3 * e), r.translate(27 * e, 5 * e), circle(r, 35 * e, 75 * e, 15 * e), fill_path(r, t[9]), circle(r, 85 * e, 75 * e, 15 * e), fill_path(r, t[9]), circle(r, 32 * e, 67 * e, 5 * e), fill_path(r, t[10]), circle(r, 82 * e, 67 * e, 5 * e), fill_path(r, t[10]));
    return a
}

function create_robotskin(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 350 * e, i.height = 350 * e, r.translate(0, 15 * e), r.globalAlpha = .5, r.save(), r.translate(174 * e, 172 * e), round_rect(r, -81 * e, -60 * e, 162 * e, 120 * e, 26 * e), r.restore(), fill_path(r, t[0]), r.translate(0, -15 * e), r.globalAlpha = 1, r.save(), r.translate(174 * e, 172 * e), round_rect(r, -81 * e, -60 * e, 162 * e, 120 * e, 26 * e), r.restore(), fill_path(r, t[1], t[2], 7 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(179 * e, 211 * e), r.bezierCurveTo(183 * e, 204.5 * e, 183 * e, 204.5 * e, 187 * e, 198 * e), r.bezierCurveTo(198.5 * e, 191.5 * e, 198.5 * e, 191.5 * e, 210 * e, 185 * e), r.bezierCurveTo(215 * e, 176.5 * e, 215 * e, 176.5 * e, 220 * e, 168 * e), r.bezierCurveTo(213 * e, 173.5 * e, 213 * e, 173.5 * e, 206 * e, 179 * e), r.bezierCurveTo(195 * e, 184 * e, 195 * e, 184 * e, 184 * e, 189 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(167 * e, 233 * e), r.bezierCurveTo(167 * e, 207 * e, 167 * e, 207 * e, 167 * e, 181 * e), r.bezierCurveTo(167 * e, 166 * e, 157 * e, 164 * e, 148 * e, 165 * e), r.bezierCurveTo(120 * e, 165 * e, 120 * e, 165 * e, 92 * e, 165 * e), r.bezierCurveTo(92 * e, 186.5 * e, 92 * e, 186.5 * e, 92 * e, 208 * e), r.bezierCurveTo(93 * e, 222 * e, 102 * e, 234 * e, 119 * e, 233 * e), r.closePath(), fill_path(r, t[1], t[2], 7 * e), circle(r, 152 * e, 179 * e, 6 * e), fill_path(r, t[4]), circle(r, 107 * e, 179 * e, 6 * e), fill_path(r, t[4]), r.save(), r.translate(210 * e, 200 * e), r.rotate(.2), round_regular_polygon(r, 6, 32 * e, 10 * e), r.restore(), fill_path(r, t[5], t[2], 7 * e), r.save(), r.translate(210 * e, 200 * e), r.rotate(1.0471975511965976), round_regular_polygon(r, 6, 19 * e, 6 * e), r.restore(), fill_path(r, t[6], t[7], 7 * e), r.save(), r.translate(205 * e, 193 * e), r.rotate(0), round_regular_polygon(r, 6, 10 * e, 3 * e), r.restore(), fill_path(r, t[8]), r.save(), r.translate(137 * e, 200 * e), r.rotate(-.5235987755982988), round_regular_polygon(r, 6, 20 * e, 5 * e), r.restore(), fill_path(r, t[6], t[7], 7 * e), r.save(), r.translate(131 * e, 194 * e), round_regular_polygon(r, 6, 10 * e, 3 * e), r.restore(), fill_path(r, t[8]), r.save(), r.translate(150.5 * e, 120 * e), r.rotate(0), round_rect(r, -19.5 * e, -8 * e, 39 * e, 16 * e, 0 * e), r.restore(), fill_path(r, void 0, t[2], 7 * e), i
}

function create_skins(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 175 * e, r.height = 150 * e, 0 == i ? (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.20360331117452 * e), fill_path(a, t[3]), circle(a, 131 * e, 194 * e, 7 * e), fill_path(a, t[4]), circle(a, 206 * e, 194 * e, 7 * e), fill_path(a, t[4]), a.translate(0, 1 * e), a.save(), a.translate(138.5 * e, 180.5 * e), round_rect(a, -22.5 * e, -11.5 * e, 45 * e, 23 * e, 0 * e), a.restore(), fill_path(a, t[1]), a.save(), a.translate(207 * e, 177.5 * e), round_rect(a, -31 * e, -9.5 * e, 62 * e, 19 * e, 0 * e), a.restore(), fill_path(a, t[1]), a.save(), a.translate(171.5 * e, 220 * e), round_rect(a, -52.5 * e, -2 * e, 105 * e, 4 * e, 0 * e), a.restore(), fill_path(a, t[1])) : 1 == i ? (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(183 * e, 223 * e), a.bezierCurveTo(193 * e, 187 * e, 215 * e, 193 * e, 227 * e, 159 * e), a.bezierCurveTo(227 * e, 194 * e, 209 * e, 187 * e, 183 * e, 223 * e), a.closePath(), fill_path(a, t[5]), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.20360331117452 * e), fill_path(a, t[3]), circle(a, 131 * e, 190 * e, 7 * e), fill_path(a, t[4]), circle(a, 204 * e, 190 * e, 7 * e), fill_path(a, t[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(120 * e, 154 * e), a.bezierCurveTo(125 * e, 146 * e, 131 * e, 143 * e, 147 * e, 137 * e), a.bezierCurveTo(139 * e, 147 * e, 129 * e, 152 * e, 121 * e, 154 * e), a.closePath(), fill_path(a, t[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(120 * e, 162 * e), a.bezierCurveTo(134 * e, 153 * e, 139 * e, 149 * e, 150 * e, 144 * e), a.bezierCurveTo(143 * e, 155 * e, 128 * e, 163 * e, 121 * e, 161 * e), a.closePath(), fill_path(a, t[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(127 * e, 142 * e), a.bezierCurveTo(129 * e, 151 * e, 132 * e, 157 * e, 137 * e, 162 * e), a.bezierCurveTo(134 * e, 152 * e, 132 * e, 146 * e, 127 * e, 142 * e), a.closePath(), fill_path(a, t[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(135 * e, 140 * e), a.bezierCurveTo(141 * e, 144 * e, 143 * e, 150 * e, 143 * e, 157 * e), a.bezierCurveTo(138 * e, 150 * e, 136 * e, 145 * e, 135 * e, 140 * e), a.closePath(), fill_path(a, t[5])) : 2 == i ? (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.20360331117452 * e), fill_path(a, t[3]), circle(a, 130 * e, 192 * e, 7 * e), fill_path(a, t[4]), circle(a, 203 * e, 192 * e, 7 * e), fill_path(a, t[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115 * e, 224 * e), a.bezierCurveTo(173 * e, 223.5 * e, 173 * e, 223.5 * e, 231 * e, 223 * e), a.bezierCurveTo(230 * e, 222 * e, 198 * e, 223 * e, 186 * e, 209 * e), a.bezierCurveTo(173.5 * e, 209 * e, 173.5 * e, 209 * e, 161 * e, 209 * e), a.bezierCurveTo(146 * e, 224 * e, 114 * e, 223 * e, 116 * e, 224 * e), a.closePath(), fill_path(a, t[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(112 * e, 193 * e), a.bezierCurveTo(154 * e, 182 * e, 194 * e, 183 * e, 234 * e, 192 * e), a.bezierCurveTo(217 * e, 154 * e, 148 * e, 127 * e, 112 * e, 192 * e), a.closePath(), fill_path(a, t[1])) : 3 == i ? (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.20360331117452 * e), fill_path(a, t[3]), circle(a, 130 * e, 192 * e, 7 * e), fill_path(a, t[4]), circle(a, 203 * e, 192 * e, 7 * e), fill_path(a, t[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(120 * e, 176 * e), a.bezierCurveTo(175 * e, 193 * e, 147.5 * e, 184.5 * e, 175 * e, 193 * e), a.bezierCurveTo(200 * e, 184.5 * e, 200 * e, 184.5 * e, 225 * e, 176 * e), a.closePath(), fill_path(a, t[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(226 * e, 223 * e), a.bezierCurveTo(173.5 * e, 223 * e, 173.5 * e, 223 * e, 121 * e, 223 * e), a.bezierCurveTo(148 * e, 218 * e, 148 * e, 218 * e, 175 * e, 213 * e), a.closePath(), fill_path(a, t[1])) : 4 == i ? (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), a.rotate(0), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.20360331117452 * e), fill_path(a, t[3]), circle(a, 137 * e, 203 * e, 8 * e), fill_path(a, t[4]), circle(a, 209 * e, 203 * e, 8 * e), fill_path(a, t[4]), a.save(), a.translate(174.5 * e, 218 * e), a.rotate(0), round_rect(a, -60.5 * e, -5 * e, 121 * e, 10 * e, 28 * e), a.restore(), fill_path(a, t[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(113 * e, 190 * e), a.bezierCurveTo(144 * e, 181.5 * e, 144 * e, 181.5 * e, 175 * e, 173 * e), a.bezierCurveTo(205 * e, 182 * e, 205 * e, 182 * e, 235 * e, 191 * e), a.bezierCurveTo(242 * e, 141 * e, 106 * e, 119 * e, 112 * e, 189 * e), a.closePath(), fill_path(a, t[1])) : 5 == i ? (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), a.rotate(0), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.20360331117452 * e), fill_path(a, t[3]), circle(a, 140 * e, 196 * e, 7 * e), fill_path(a, t[4]), circle(a, 213 * e, 196 * e, 7 * e), fill_path(a, t[4]), circle(a, 131 * e, 206 * e, 3 * e), fill_path(a, t[4]), circle(a, 204 * e, 206 * e, 3 * e), fill_path(a, t[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(113 * e, 181 * e), a.bezierCurveTo(159 * e, 204 * e, 190 * e, 202 * e, 235 * e, 181 * e), a.bezierCurveTo(241 * e, 137 * e, 109 * e, 130 * e, 112 * e, 180 * e), a.closePath(), fill_path(a, t[1]), a.save(), a.translate(174 * e, 220 * e), a.rotate(0), round_rect(a, -56 * e, -5 * e, 112 * e, 10 * e, 1 * e), a.restore(), fill_path(a, t[1])) : 6 == i ? (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.20360331117452 * e), fill_path(a, t[3]), circle(a, 133 * e, 188 * e, 7 * e), fill_path(a, t[4]), circle(a, 206 * e, 188 * e, 7 * e), fill_path(a, t[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(110 * e, 193 * e), a.bezierCurveTo(130 * e, 182 * e, 142 * e, 183 * e, 162 * e, 193 * e), a.bezierCurveTo(164 * e, 176.5 * e, 164 * e, 176.5 * e, 166 * e, 160 * e), a.bezierCurveTo(137 * e, 159 * e, 137 * e, 159 * e, 108 * e, 158 * e), a.closePath(), fill_path(a, t[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(184 * e, 192 * e), a.bezierCurveTo(205 * e, 183 * e, 216 * e, 183 * e, 234 * e, 192 * e), a.bezierCurveTo(233.5 * e, 177 * e, 233.5 * e, 177 * e, 233 * e, 162 * e), a.bezierCurveTo(209 * e, 161.5 * e, 186 * e, 162 * e, 185 * e, 161 * e), a.closePath(), fill_path(a, t[1])) : 7 == i ? (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.20360331117452 * e), fill_path(a, t[3]), circle(a, 130 * e, 206 * e, 7 * e), fill_path(a, t[4]), circle(a, 203 * e, 206 * e, 7 * e), fill_path(a, t[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(108 * e, 191 * e), a.bezierCurveTo(141 * e, 184 * e, 141 * e, 184 * e, 174 * e, 177 * e), a.bezierCurveTo(207 * e, 184 * e, 207 * e, 184 * e, 240 * e, 191 * e), a.bezierCurveTo(244 * e, 140 * e, 113 * e, 121 * e, 108 * e, 191 * e), a.closePath(), fill_path(a, t[1])) : 8 == i ? (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.20360331117452 * e), fill_path(a, t[3]), circle(a, 127 * e, 198 * e, 7 * e), fill_path(a, t[4]), circle(a, 200 * e, 198 * e, 7 * e), fill_path(a, t[4]), a.save(), a.translate(175 * e, 175.5 * e), round_rect(a, -67 * e, -13.5 * e, 134 * e, 27 * e, 0 * e), a.restore(), fill_path(a, t[1]), a.save(), a.translate(172 * e, 219 * e), round_rect(a, -60 * e, -4 * e, 120 * e, 8 * e, 0 * e), a.restore(), fill_path(a, t[1])) : 9 == i && (a.globalAlpha = .5, a.translate(-88 * e, -95 * e), a.save(), a.translate(174 * e, 195.5 * e), round_rect(a, -82 * e, -46.5 * e, 164 * e, 93 * e, 30 * e), a.restore(), fill_path(a, t[0]), a.globalAlpha = 1, a.save(), a.translate(174 * e, 170.5 * e), round_rect(a, -81 * e, -59.5 * e, 162 * e, 119 * e, 28 * e), a.restore(), fill_path(a, t[1], t[2], 6.5 * e), circle(a, 137 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 210 * e, 200 * e, 22.090722034374522 * e), fill_path(a, t[3]), circle(a, 143 * e, 200 * e, 7 * e), fill_path(a, t[4]), circle(a, 204 * e, 200 * e, 7 * e), fill_path(a, t[4])), r
}

function create_garlic(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 264 * e, r.height = 246 * e, a.translate(0, 10 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(75 * e, 54 * e), a.bezierCurveTo(79 * e, 21 * e, 131 * e, 13 * e, 153 * e, 36 * e), a.bezierCurveTo(204 * e, 27 * e, 221 * e, 52 * e, 216 * e, 83 * e), a.bezierCurveTo(241 * e, 103 * e, 232 * e, 138 * e, 214 * e, 147 * e), a.bezierCurveTo(223 * e, 184 * e, 201 * e, 200 * e, 175 * e, 199 * e), a.bezierCurveTo(156 * e, 218 * e, 135 * e, 222 * e, 114 * e, 203 * e), a.bezierCurveTo(62 * e, 213 * e, 66 * e, 189 * e, 59 * e, 170 * e), a.bezierCurveTo(27 * e, 164 * e, 31 * e, 134 * e, 38 * e, 123 * e), a.bezierCurveTo(11 * e, 80 * e, 51 * e, 52 * e, 75 * e, 54 * e), a.closePath(), fill_path(a, i[0]), a.translate(0, -10 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(75 * e, 54 * e), a.bezierCurveTo(79 * e, 21 * e, 131 * e, 13 * e, 153 * e, 36 * e), a.bezierCurveTo(204 * e, 27 * e, 221 * e, 52 * e, 216 * e, 83 * e), a.bezierCurveTo(241 * e, 103 * e, 232 * e, 138 * e, 214 * e, 147 * e), a.bezierCurveTo(223 * e, 184 * e, 201 * e, 200 * e, 175 * e, 199 * e), a.bezierCurveTo(156 * e, 218 * e, 135 * e, 222 * e, 114 * e, 203 * e), a.bezierCurveTo(62 * e, 213 * e, 66 * e, 189 * e, 59 * e, 170 * e), a.bezierCurveTo(27 * e, 164 * e, 31 * e, 134 * e, 38 * e, 123 * e), a.bezierCurveTo(11 * e, 80 * e, 51 * e, 52 * e, 75 * e, 54 * e), a.closePath(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(121 * e, 102 * e), a.bezierCurveTo(111 * e, 80 * e, 110 * e, 66 * e, 108 * e, 51 * e), a.bezierCurveTo(119 * e, 65 * e, 129 * e, 85 * e, 135 * e, 99 * e), a.bezierCurveTo(142 * e, 67 * e, 146 * e, 60 * e, 152 * e, 50 * e), a.bezierCurveTo(154 * e, 71 * e, 152 * e, 85 * e, 149 * e, 104 * e), a.bezierCurveTo(166 * e, 88 * e, 175 * e, 83 * e, 188 * e, 78 * e), a.bezierCurveTo(179 * e, 91 * e, 170 * e, 103 * e, 160 * e, 112 * e), a.bezierCurveTo(186 * e, 107 * e, 191 * e, 107 * e, 204 * e, 108 * e), a.bezierCurveTo(195 * e, 114 * e, 179 * e, 120 * e, 163 * e, 123 * e), a.bezierCurveTo(183 * e, 130 * e, 186 * e, 135 * e, 192 * e, 140 * e), a.bezierCurveTo(179 * e, 141 * e, 164 * e, 139 * e, 153 * e, 135 * e), a.bezierCurveTo(158 * e, 145 * e, 163 * e, 159 * e, 165 * e, 177 * e), a.bezierCurveTo(154 * e, 166 * e, 145 * e, 153 * e, 138 * e, 139 * e), a.bezierCurveTo(133 * e, 155 * e, 125 * e, 170 * e, 117 * e, 182 * e), a.bezierCurveTo(116 * e, 160 * e, 119 * e, 151 * e, 124 * e, 138 * e), a.bezierCurveTo(107 * e, 150 * e, 95 * e, 156 * e, 82 * e, 159 * e), a.bezierCurveTo(94 * e, 140 * e, 101 * e, 136 * e, 113 * e, 128 * e), a.bezierCurveTo(78 * e, 123 * e, 75 * e, 121 * e, 67 * e, 118 * e), a.bezierCurveTo(85 * e, 112 * e, 94 * e, 112 * e, 111 * e, 113 * e), a.bezierCurveTo(89 * e, 97 * e, 85 * e, 93 * e, 78 * e, 82 * e), a.bezierCurveTo(92 * e, 85 * e, 101 * e, 90 * e, 121 * e, 102 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(128 * e, 103 * e), a.bezierCurveTo(111 * e, 112 * e, 117 * e, 136 * e, 140 * e, 130 * e), a.bezierCurveTo(151 * e, 126 * e, 156 * e, 115 * e, 155 * e, 107 * e), a.bezierCurveTo(155 * e, 96 * e, 154 * e, 94 * e, 148 * e, 94 * e), a.bezierCurveTo(141 * e, 94 * e, 146 * e, 104 * e, 136 * e, 104 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), r
}

function create_garland_inv(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 70 * e, r.height = 70 * e, a.globalAlpha = .5, circle(a, 26 * e, 26 * e, 9 * e), fill_path(a, i[0]), circle(a, 56 * e, 36 * e, 9 * e), fill_path(a, i[1]), circle(a, 40 * e, 50 * e, 9 * e), fill_path(a, i[2]), a.globalAlpha = 1, circle(a, 26 * e, 26 * e, 5 * e), fill_path(a, i[0]), circle(a, 56 * e, 36 * e, 5 * e), fill_path(a, i[1]), circle(a, 40 * e, 50 * e, 5 * e), fill_path(a, i[2]), r
}

function create_garland(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 22 * e, r.height = 22 * e, a.globalAlpha = .4, circle(a, 11 * e, 11 * e, 10 * e), fill_path(a, i[0]), a.globalAlpha = .7, circle(a, 11 * e, 11 * e, 7 * e), fill_path(a, i[0]), a.globalAlpha = 1, circle(a, 11 * e, 11 * e, 4 * e), fill_path(a, i[0]), r
}

function create_garland_light(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 20 * e, r.height = 20 * e, a.globalAlpha = .5, circle(a, 10 * e, 10 * e, 9 * e), fill_path(a, i[0]), r
}

function create_roof(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 248 * e, r.height = 247 * e, a.save(), a.translate(69.5 * e, 145 * e), round_rect(a, -8.5 * e, -63 * e, 17 * e, 127 * e, 1 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(183 * e, 145 * e), round_rect(a, -8 * e, -63 * e, 16 * e, 126 * e, 1 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(123.5 * e, 62.5 * e), a.rotate(6.28), round_rect(a, -84.5 * e, -25.5 * e, 169 * e, 51 * e, 5 * e), a.restore(), fill_path(a, i[2], i[1], 6 * e), a.save(), a.translate(123.5 * e, 118 * e), a.rotate(6.24), round_rect(a, -85.5 * e, -24 * e, 169 * e, 48 * e, 5 * e), a.restore(), fill_path(a, i[3], i[1], 6 * e), a.save(), a.translate(122 * e, 177.5 * e), a.rotate(6.32), round_rect(a, -84 * e, -23.5 * e, 169 * e, 47 * e, 5 * e), a.restore(), fill_path(a, i[2], i[1], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(37 * e, 157 * e), a.bezierCurveTo(49 * e, 160 * e, 49 * e, 160 * e, 61 * e, 163 * e), a.bezierCurveTo(49.5 * e, 165.5 * e, 49.5 * e, 165.5 * e, 38 * e, 168 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(205 * e, 175 * e), a.bezierCurveTo(192.5 * e, 180 * e, 192.5 * e, 180 * e, 180 * e, 185 * e), a.bezierCurveTo(193 * e, 188 * e, 193 * e, 188 * e, 206 * e, 191 * e), a.closePath(), fill_path(a, i[1]), r
}

function create_roof1(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 248 * e, r.height = 247 * e, a.save(), a.translate(182 * e, 120 * e), round_rect(a, -8 * e, -67 * e, 16 * e, 134 * e, 1 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(68.5 * e, 127.5 * e), round_rect(a, -8.5 * e, -70.5 * e, 17 * e, 141 * e, 1 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(123.5 * e, 68 * e), round_rect(a, -82.5 * e, -24 * e, 165 * e, 48 * e, 4 * e), a.restore(), fill_path(a, i[2], i[1], 6 * e), a.save(), a.translate(123 * e, 179.5 * e), round_rect(a, -83 * e, -24.5 * e, 166 * e, 49 * e, 4 * e), a.restore(), fill_path(a, i[2], i[1], 6 * e), a.save(), a.translate(123.5 * e, 123.5 * e), a.rotate(6.24), round_rect(a, -82.5 * e, -24.5 * e, 165 * e, 49 * e, 4 * e), a.restore(), fill_path(a, i[3], i[1], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(204 * e, 112 * e), a.bezierCurveTo(149 * e, 121.5 * e, 96 * e, 130 * e, 94 * e, 131 * e), a.bezierCurveTo(149.5 * e, 127.5 * e, 149.5 * e, 127.5 * e, 205 * e, 124 * e), a.closePath(), fill_path(a, i[1]), r
}

function create_roof2(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 248 * e, r.height = 247 * e, a.save(), a.translate(183 * e, 107 * e), round_rect(a, -8 * e, -70.5 * e, 16 * e, 141 * e, 1 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(69.5 * e, 110 * e), round_rect(a, -8.5 * e, -71 * e, 17 * e, 143 * e, 1 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(123.5 * e, 181 * e), round_rect(a, -84.5 * e, -26 * e, 169 * e, 52 * e, 5 * e), a.restore(), fill_path(a, i[2], i[1], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41 * e, 95 * e), a.bezierCurveTo(105 * e, 96 * e, 113 * e, 99 * e, 134 * e, 102 * e), a.bezierCurveTo(147 * e, 106 * e, 173 * e, 100 * e, 207 * e, 105 * e), a.bezierCurveTo(210 * e, 105 * e, 207 * e, 140 * e, 207 * e, 154 * e), a.bezierCurveTo(123.5 * e, 151.5 * e, 123.5 * e, 151.5 * e, 40 * e, 149 * e), a.bezierCurveTo(37 * e, 145 * e, 39 * e, 95 * e, 41 * e, 96 * e), a.closePath(), fill_path(a, i[2], i[1], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(68 * e, 75 * e), a.bezierCurveTo(54 * e, 72.5 * e, 54 * e, 72.5 * e, 40 * e, 70 * e), a.bezierCurveTo(38 * e, 46 * e, 40 * e, 46 * e, 53 * e, 46 * e), a.bezierCurveTo(201 * e, 41 * e, 201 * e, 41 * e, 201 * e, 42 * e), a.bezierCurveTo(211 * e, 40 * e, 208 * e, 53 * e, 208 * e, 72 * e), a.bezierCurveTo(209 * e, 91 * e, 210 * e, 96 * e, 194 * e, 94 * e), a.bezierCurveTo(119 * e, 97 * e, 119 * e, 97 * e, 44 * e, 100 * e), a.bezierCurveTo(39 * e, 99 * e, 40 * e, 96 * e, 40 * e, 80 * e), a.bezierCurveTo(54 * e, 77.5 * e, 54 * e, 77.5 * e, 68 * e, 75 * e), a.closePath(), fill_path(a, i[3], i[1], 6 * e), r
}

function create_zombie_head(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 191 * e, r.height = 153 * e, a.globalAlpha = .5, a.translate(0, 10 * e), a.save(), a.translate(97.49996948242188 * e, 95.12844848632812 * e), round_rect(a, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e), a.restore(), fill_path(a, i[0], i[0], 4 * e), a.globalAlpha = 1, a.translate(0, -10 * e), a.save(), a.translate(97.49996948242188 * e, 95.12844848632812 * e), round_rect(a, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e), a.restore(), fill_path(a, i[1], i[2], 4 * e), a.globalCompositeOperation = "destination-out", a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(26.999969482421875 * e, 50.850677490234375 * e), a.bezierCurveTo(46.499969482421875 * e, 64.85067749023438 * e, 46.499969482421875 * e, 64.85067749023438 * e, 65.99996948242188 * e, 78.85067749023438 * e), a.bezierCurveTo(80.99996948242188 * e, 87.85067749023438 * e, 105.99996948242188 * e, 82.85067749023438 * e, 114.99996948242188 * e, 80.85067749023438 * e), a.bezierCurveTo(130.99996948242188 * e, 69.85067749023438 * e, 152.99996948242188 * e, 70.85067749023438 * e, 166.99996948242188 * e, 67.85067749023438 * e), a.bezierCurveTo(156.99996948242188 * e, 52.850677490234375 * e, 156.99996948242188 * e, 52.850677490234375 * e, 146.99996948242188 * e, 37.850677490234375 * e), a.bezierCurveTo(101.49996948242188 * e, 37.350677490234375 * e, 101.49996948242188 * e, 37.350677490234375 * e, 55.999969482421875 * e, 36.850677490234375 * e), a.closePath(), fill_path(a, i[2], i[3], 4 * e), a.globalCompositeOperation = "source-over", a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(40.999969482421875 * e, 59.850677490234375 * e), a.bezierCurveTo(41.999969482421875 * e, 50.850677490234375 * e, 47.999969482421875 * e, 47.850677490234375 * e, 56.999969482421875 * e, 49.850677490234375 * e), a.bezierCurveTo(65.99996948242188 * e, 41.850677490234375 * e, 76.99996948242188 * e, 42.850677490234375 * e, 90.99996948242188 * e, 47.850677490234375 * e), a.bezierCurveTo(94.99996948242188 * e, 42.850677490234375 * e, 104.99996948242188 * e, 42.850677490234375 * e, 114.99996948242188 * e, 47.850677490234375 * e), a.bezierCurveTo(131.99996948242188 * e, 42.850677490234375 * e, 142.99996948242188 * e, 48.850677490234375 * e, 145.99996948242188 * e, 56.850677490234375 * e), a.bezierCurveTo(160.99996948242188 * e, 63.850677490234375 * e, 154.99996948242188 * e, 69.85067749023438 * e, 155.99996948242188 * e, 70.85067749023438 * e), a.bezierCurveTo(141.99996948242188 * e, 71.85067749023438 * e, 141.99996948242188 * e, 71.85067749023438 * e, 127.99996948242188 * e, 72.85067749023438 * e), a.bezierCurveTo(110.99996948242188 * e, 83.85067749023438 * e, 107.99996948242188 * e, 82.85067749023438 * e, 90.99996948242188 * e, 85.85067749023438 * e), a.bezierCurveTo(70.99996948242188 * e, 83.85067749023438 * e, 64.99996948242188 * e, 79.85067749023438 * e, 53.999969482421875 * e, 70.85067749023438 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(33.999969482421875 * e, 65.85067749023438 * e), a.bezierCurveTo(36.999969482421875 * e, 59.850677490234375 * e, 34.999969482421875 * e, 60.850677490234375 * e, 39.999969482421875 * e, 59.850677490234375 * e), a.bezierCurveTo(47.999969482421875 * e, 61.850677490234375 * e, 62.999969482421875 * e, 76.85067749023438 * e, 74.99996948242188 * e, 79.85067749023438 * e), a.bezierCurveTo(93.99996948242188 * e, 85.85067749023438 * e, 111.99996948242188 * e, 83.85067749023438 * e, 124.99996948242188 * e, 70.85067749023438 * e), a.bezierCurveTo(129.99996948242188 * e, 67.85067749023438 * e, 145.99996948242188 * e, 65.85067749023438 * e, 159.99996948242188 * e, 67.85067749023438 * e), a.bezierCurveTo(159.99996948242188 * e, 71.85067749023438 * e, 159.99996948242188 * e, 71.85067749023438 * e, 159.99996948242188 * e, 75.85067749023438 * e), a.bezierCurveTo(146.99996948242188 * e, 72.85067749023438 * e, 144.99996948242188 * e, 75.85067749023438 * e, 143.99996948242188 * e, 82.85067749023438 * e), a.bezierCurveTo(144.99996948242188 * e, 86.85067749023438 * e, 140.99996948242188 * e, 90.85067749023438 * e, 137.99996948242188 * e, 86.85067749023438 * e), a.bezierCurveTo(139.99996948242188 * e, 72.85067749023438 * e, 135.99996948242188 * e, 72.85067749023438 * e, 133.99996948242188 * e, 82.85067749023438 * e), a.bezierCurveTo(127.99996948242188 * e, 88.85067749023438 * e, 124.99996948242188 * e, 70.85067749023438 * e, 116.99996948242188 * e, 86.85067749023438 * e), a.bezierCurveTo(110.99996948242188 * e, 91.85067749023438 * e, 96.99996948242188 * e, 81.85067749023438 * e, 89.99996948242188 * e, 90.85067749023438 * e), a.bezierCurveTo(85.99996948242188 * e, 92.85067749023438 * e, 81.99996948242188 * e, 95.85067749023438 * e, 76.99996948242188 * e, 86.85067749023438 * e), a.bezierCurveTo(67.99996948242188 * e, 93.85067749023438 * e, 67.99996948242188 * e, 91.85067749023438 * e, 60.999969482421875 * e, 79.85067749023438 * e), a.bezierCurveTo(53.999969482421875 * e, 71.85067749023438 * e, 52.999969482421875 * e, 72.85067749023438 * e, 46.999969482421875 * e, 77.85067749023438 * e), a.bezierCurveTo(41.999969482421875 * e, 78.85067749023438 * e, 42.999969482421875 * e, 69.85067749023438 * e, 33.999969482421875 * e, 65.85067749023438 * e), a.closePath(), fill_path(a, i[5], i[6], 4 * e), circle(a, 68 * e, 111.29513549804688 * e, 15 * e), fill_path(a, i[7], i[8], 4 * e), circle(a, 123 * e, 111.29510498046875 * e, 15 * e), fill_path(a, i[7], i[8], 4 * e), circle(a, 63 * e, 106 * e, 5 * e), fill_path(a, i[9]), circle(a, 118 * e, 106 * e, 5 * e), fill_path(a, i[9]), r
}

function create_zombie_boss(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 191 * e, r.height = 153 * e, a.globalAlpha = .5, a.translate(0, 10 * e), a.save(), a.translate(96.49996948242188 * e, 66.79510498046875 * e), a.rotate(0), round_rect(a, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e), a.restore(), fill_path(a, i[0], i[0], 4 * e), a.globalAlpha = 1, a.translate(0, -10 * e), a.save(), a.translate(96.49996948242188 * e, 66.79510498046875 * e), a.rotate(0), round_rect(a, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e), a.restore(), fill_path(a, i[1], i[2], 4 * e), a.translate(2 * e, 0), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(119 * e, 28 * e), a.bezierCurveTo(119 * e, 22 * e, 119 * e, 20 * e, 122 * e, 16 * e), a.bezierCurveTo(149 * e, 39 * e, 149 * e, 39 * e, 176 * e, 63 * e), a.bezierCurveTo(176 * e, 75 * e, 176 * e, 75 * e, 175 * e, 88 * e), a.bezierCurveTo(174 * e, 90 * e, 174 * e, 90 * e, 172 * e, 93 * e), a.bezierCurveTo(171 * e, 101 * e, 169 * e, 109 * e, 164 * e, 113 * e), a.bezierCurveTo(163 * e, 104 * e, 163 * e, 104 * e, 162 * e, 95 * e), a.bezierCurveTo(155 * e, 105 * e, 155 * e, 105 * e, 147 * e, 116 * e), a.bezierCurveTo(87 * e, 114 * e, 87 * e, 114 * e, 26 * e, 112 * e), a.bezierCurveTo(27 * e, 106 * e, 27 * e, 106 * e, 27 * e, 101 * e), a.bezierCurveTo(24 * e, 104 * e, 24 * e, 104 * e, 20 * e, 108 * e), a.bezierCurveTo(17 * e, 103 * e, 20 * e, 86 * e, 23 * e, 72 * e), a.bezierCurveTo(15 * e, 74 * e, 14 * e, 78 * e, 12 * e, 83 * e), a.bezierCurveTo(12 * e, 65 * e, 12 * e, 54 * e, 16 * e, 42 * e), a.bezierCurveTo(14 * e, 39 * e, 14 * e, 39 * e, 12 * e, 36 * e), a.bezierCurveTo(16 * e, 33 * e, 16 * e, 33 * e, 19 * e, 30 * e), a.bezierCurveTo(18 * e, 27 * e, 18 * e, 27 * e, 17 * e, 25 * e), a.bezierCurveTo(24 * e, 24 * e, 31 * e, 21 * e, 29 * e, 19 * e), a.bezierCurveTo(37 * e, 25 * e, 37 * e, 25 * e, 45 * e, 31 * e), a.bezierCurveTo(40 * e, 23 * e, 40 * e, 21 * e, 42 * e, 16 * e), a.bezierCurveTo(74 * e, 16 * e, 74 * e, 16 * e, 106 * e, 16 * e), a.bezierCurveTo(113 * e, 21 * e, 113 * e, 21 * e, 119 * e, 26 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), r
}

function create_zombie_hurt(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 191 * e, i.height = 153 * e, r.save(), r.translate(96.49996948242188 * e, 66.79510498046875 * e), round_rect(r, -79.5 * e, -48.5 * e, 159 * e, 97 * e, 22 * e), r.restore(), fill_path(r, t[0], t[0], 4 * e), r.translate(2 * e, 0), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(119 * e, 28 * e), r.bezierCurveTo(119 * e, 22 * e, 119 * e, 20 * e, 122 * e, 16 * e), r.bezierCurveTo(149 * e, 39 * e, 149 * e, 39 * e, 176 * e, 63 * e), r.bezierCurveTo(176 * e, 75 * e, 176 * e, 75 * e, 175 * e, 88 * e), r.bezierCurveTo(174 * e, 90 * e, 174 * e, 90 * e, 172 * e, 93 * e), r.bezierCurveTo(171 * e, 101 * e, 169 * e, 109 * e, 164 * e, 113 * e), r.bezierCurveTo(163 * e, 104 * e, 163 * e, 104 * e, 162 * e, 95 * e), r.bezierCurveTo(155 * e, 105 * e, 155 * e, 105 * e, 147 * e, 116 * e), r.bezierCurveTo(87 * e, 114 * e, 87 * e, 114 * e, 26 * e, 112 * e), r.bezierCurveTo(27 * e, 106 * e, 27 * e, 106 * e, 27 * e, 101 * e), r.bezierCurveTo(24 * e, 104 * e, 24 * e, 104 * e, 20 * e, 108 * e), r.bezierCurveTo(17 * e, 103 * e, 20 * e, 86 * e, 23 * e, 72 * e), r.bezierCurveTo(15 * e, 74 * e, 14 * e, 78 * e, 12 * e, 83 * e), r.bezierCurveTo(12 * e, 65 * e, 12 * e, 54 * e, 16 * e, 42 * e), r.bezierCurveTo(14 * e, 39 * e, 14 * e, 39 * e, 12 * e, 36 * e), r.bezierCurveTo(16 * e, 33 * e, 16 * e, 33 * e, 19 * e, 30 * e), r.bezierCurveTo(18 * e, 27 * e, 18 * e, 27 * e, 17 * e, 25 * e), r.bezierCurveTo(24 * e, 24 * e, 31 * e, 21 * e, 29 * e, 19 * e), r.bezierCurveTo(37 * e, 25 * e, 37 * e, 25 * e, 45 * e, 31 * e), r.bezierCurveTo(40 * e, 23 * e, 40 * e, 21 * e, 42 * e, 16 * e), r.bezierCurveTo(74 * e, 16 * e, 74 * e, 16 * e, 106 * e, 16 * e), r.bezierCurveTo(113 * e, 21 * e, 113 * e, 21 * e, 119 * e, 26 * e), r.closePath(), fill_path(r, t[0], t[0], 4 * e), r.save(), r.translate(97.49996948242188 * e, 95.12844848632812 * e), round_rect(r, -62.5 * e, -41.5 * e, 125 * e, 83 * e, 20 * e), r.restore(), fill_path(r, t[0], t[0], 4 * e), i
}

function create_plant_seed(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 40 * e,
        o = 40 * e;
    r.width = n, r.height = o;
    var s = e * n / 2,
        _ = e * o / 2,
        T = 15 * e;
    a.save(), a.translate(s, _), a.globalAlpha = 1, circle(a, 0, 0, T), fill_path(a, i[0]);
    T = 5 * e, s = 2 * e, _ = 1 * e;
    return a.translate(s, _), a.globalAlpha = 1, circle(a, 0, 0, T), fill_path(a, i[1]), a.restore(), r
}

function create_fish1(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 185 * e, a.height = 240 * e, n.globalAlpha = .5, n.translate(0, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(44 * e, 137 * e), n.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e), n.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e), n.closePath(), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(53 * e, 181 * e), n.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e), n.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e), n.closePath(), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(63 * e, 208 * e), n.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e), n.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e), n.closePath(), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(130 * e, 170 * e), n.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e), n.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e), n.closePath(), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39 * e, 140 * e), n.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e), n.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e), n.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e), n.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e), n.closePath(), fill_path(n, i[0]), n.globalAlpha = 1, n.translate(0, -10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(44 * e, 137 * e), n.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e), n.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e), n.closePath(), fill_path(n, i[1], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(53 * e, 181 * e), n.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e), n.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e), n.closePath(), fill_path(n, i[1], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(63 * e, 208 * e), n.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e), n.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e), n.closePath(), fill_path(n, i[1], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(130 * e, 170 * e), n.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e), n.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e), n.closePath(), fill_path(n, i[1], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(39 * e, 140 * e), n.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e), n.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e), n.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e), n.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e), n.closePath(), fill_path(n, i[1], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(59 * e, 99 * e), n.bezierCurveTo(71 * e, 68 * e, 81 * e, 68 * e, 94 * e, 67 * e), n.bezierCurveTo(105 * e, 66 * e, 119 * e, 75 * e, 123 * e, 96 * e), n.bezierCurveTo(104 * e, 91 * e, 101 * e, 94 * e, 94 * e, 97 * e), n.bezierCurveTo(76 * e, 92 * e, 73 * e, 93 * e, 60 * e, 99 * e), n.closePath(), fill_path(n, i[3], i[2], 4 * e), 0 === r ? (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(47 * e, 149 * e), n.bezierCurveTo(43 * e, 140 * e, 48 * e, 130 * e, 59 * e, 127 * e), n.bezierCurveTo(77 * e, 126 * e, 90 * e, 131 * e, 131 * e, 127 * e), n.bezierCurveTo(143 * e, 130 * e, 144 * e, 143 * e, 132 * e, 154 * e), n.bezierCurveTo(90 * e, 152 * e, 90 * e, 152 * e, 48 * e, 150 * e), n.closePath(), fill_path(n, i[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(40 * e, 139 * e), n.bezierCurveTo(48 * e, 113 * e, 76 * e, 119 * e, 91 * e, 126 * e), n.bezierCurveTo(117 * e, 113 * e, 135 * e, 117 * e, 144 * e, 134 * e), n.bezierCurveTo(144 * e, 138 * e, 144 * e, 138 * e, 144 * e, 142 * e), n.bezierCurveTo(128 * e, 124 * e, 108 * e, 124 * e, 91 * e, 136 * e), n.bezierCurveTo(59 * e, 124 * e, 50 * e, 137 * e, 42 * e, 148 * e), n.closePath(), fill_path(n, i[3], i[2], 4 * e)) : (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(41 * e, 139 * e), n.bezierCurveTo(53 * e, 117 * e, 69 * e, 118 * e, 92 * e, 127 * e), n.bezierCurveTo(124 * e, 111 * e, 136 * e, 121 * e, 143 * e, 136 * e), n.bezierCurveTo(142 * e, 144 * e, 142 * e, 144 * e, 141 * e, 152 * e), n.bezierCurveTo(128 * e, 131 * e, 113 * e, 138 * e, 92 * e, 145 * e), n.bezierCurveTo(57 * e, 133 * e, 57 * e, 147 * e, 44 * e, 154 * e), n.closePath(), fill_path(n, i[3], i[2], 4 * e)), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(90 * e, 95 * e), n.bezierCurveTo(99 * e, 82 * e, 98 * e, 58 * e, 99 * e, 40 * e), n.bezierCurveTo(90 * e, 38 * e, 89 * e, 34 * e, 92 * e, 17 * e), n.bezierCurveTo(92 * e, 5 * e, 83 * e, 16 * e, 78 * e, 29 * e), n.bezierCurveTo(72 * e, 59 * e, 87 * e, 81 * e, 89 * e, 87 * e), n.closePath(), fill_path(n, i[1], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(90 * e, 86 * e), n.bezierCurveTo(95 * e, 74 * e, 95 * e, 62 * e, 95 * e, 43 * e), n.bezierCurveTo(84 * e, 37 * e, 86 * e, 34 * e, 89 * e, 16 * e), n.bezierCurveTo(75 * e, 29 * e, 80 * e, 58 * e, 90 * e, 85 * e), n.closePath(), fill_path(n, i[1], i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(92 * e, 117 * e), n.bezierCurveTo(98 * e, 87 * e, 93 * e, 78 * e, 85 * e, 76 * e), n.bezierCurveTo(85.5 * e, 79.5 * e, 85.5 * e, 79.5 * e, 86 * e, 83 * e), n.bezierCurveTo(84 * e, 85.5 * e, 84 * e, 85.5 * e, 82 * e, 88 * e), n.bezierCurveTo(90 * e, 93 * e, 89 * e, 100 * e, 92 * e, 117 * e), n.closePath(), fill_path(n, i[1], i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(92 * e, 175 * e), n.bezierCurveTo(95 * e, 135 * e, 98 * e, 125 * e, 109 * e, 121 * e), n.bezierCurveTo(106 * e, 114 * e, 104 * e, 114 * e, 102 * e, 113 * e), n.bezierCurveTo(103 * e, 106 * e, 104 * e, 103 * e, 107 * e, 96 * e), n.bezierCurveTo(74 * e, 108 * e, 86 * e, 157 * e, 92 * e, 174 * e), n.closePath(), fill_path(n, i[1], i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(48 * e, 169 * e), n.bezierCurveTo(42 * e, 187 * e, 50 * e, 193 * e, 59 * e, 198 * e), n.closePath(), fill_path(n, void 0, i[2], 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(136 * e, 171 * e), n.bezierCurveTo(139 * e, 186 * e, 138 * e, 191 * e, 124 * e, 199 * e), n.closePath(), fill_path(n, void 0, i[2], 4 * e), circle(n, 63 * e, 180 * e, 15.231546211727817 * e), fill_path(n, i[4]), circle(n, 121 * e, 181 * e, 15.652475842498529 * e), fill_path(n, i[4]), circle(n, 58 * e, 175 * e, 5.656854249492381 * e), fill_path(n, i[2]), circle(n, 116 * e, 175 * e, 5.656854249492381 * e), fill_path(n, i[2]), a
}

function create_hurt_fish1(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 185 * e, i.height = 240 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(44 * e, 137 * e), r.bezierCurveTo(60 * e, 87 * e, 68 * e, 66 * e, 92 * e, 67 * e), r.bezierCurveTo(115 * e, 64 * e, 129 * e, 97 * e, 137 * e, 136 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(53 * e, 181 * e), r.bezierCurveTo(30 * e, 164 * e, 19 * e, 150 * e, 11 * e, 136 * e), r.bezierCurveTo(28 * e, 121 * e, 38 * e, 132 * e, 48 * e, 150 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(63 * e, 208 * e), r.bezierCurveTo(75 * e, 224 * e, 86 * e, 228 * e, 93 * e, 228 * e), r.bezierCurveTo(104 * e, 229 * e, 116 * e, 219 * e, 122 * e, 205 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130 * e, 170 * e), r.bezierCurveTo(146 * e, 125 * e, 156 * e, 126 * e, 173 * e, 137 * e), r.bezierCurveTo(167 * e, 151 * e, 143 * e, 174 * e, 131 * e, 183 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(39 * e, 140 * e), r.bezierCurveTo(75 * e, 126 * e, 113 * e, 127 * e, 143 * e, 137 * e), r.bezierCurveTo(141 * e, 186 * e, 130 * e, 202 * e, 113 * e, 214 * e), r.bezierCurveTo(85 * e, 228 * e, 56 * e, 219 * e, 48 * e, 173 * e), r.bezierCurveTo(40 * e, 148 * e, 43 * e, 145 * e, 39 * e, 140 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(90 * e, 95 * e), r.bezierCurveTo(99 * e, 82 * e, 98 * e, 58 * e, 99 * e, 40 * e), r.bezierCurveTo(90 * e, 38 * e, 89 * e, 34 * e, 92 * e, 17 * e), r.bezierCurveTo(92 * e, 5 * e, 83 * e, 16 * e, 78 * e, 29 * e), r.bezierCurveTo(72 * e, 59 * e, 87 * e, 81 * e, 89 * e, 87 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(90 * e, 86 * e), r.bezierCurveTo(95 * e, 74 * e, 95 * e, 62 * e, 95 * e, 43 * e), r.bezierCurveTo(84 * e, 37 * e, 86 * e, 34 * e, 89 * e, 16 * e), r.bezierCurveTo(75 * e, 29 * e, 80 * e, 58 * e, 90 * e, 85 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(92 * e, 117 * e), r.bezierCurveTo(98 * e, 87 * e, 93 * e, 78 * e, 85 * e, 76 * e), r.bezierCurveTo(85.5 * e, 79.5 * e, 85.5 * e, 79.5 * e, 86 * e, 83 * e), r.bezierCurveTo(84 * e, 85.5 * e, 84 * e, 85.5 * e, 82 * e, 88 * e), r.bezierCurveTo(90 * e, 93 * e, 89 * e, 100 * e, 92 * e, 117 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(92 * e, 175 * e), r.bezierCurveTo(95 * e, 135 * e, 98 * e, 125 * e, 109 * e, 121 * e), r.bezierCurveTo(106 * e, 114 * e, 104 * e, 114 * e, 102 * e, 113 * e), r.bezierCurveTo(103 * e, 106 * e, 104 * e, 103 * e, 107 * e, 96 * e), r.bezierCurveTo(74 * e, 108 * e, 86 * e, 157 * e, 92 * e, 174 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_fish2(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 185 * e, a.height = 240 * e, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58 * e, 205 * e), n.bezierCurveTo(74 * e, 227 * e, 83 * e, 230 * e, 92 * e, 230 * e), n.bezierCurveTo(101 * e, 232 * e, 119 * e, 219 * e, 122 * e, 205 * e), n.closePath(), fill_path(n, i[1], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(46 * e, 151 * e), n.bezierCurveTo(34 * e, 126 * e, 21 * e, 130 * e, 10 * e, 139 * e), n.bezierCurveTo(27 * e, 168 * e, 48 * e, 180 * e, 53 * e, 184 * e), n.closePath(), fill_path(n, i[3], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(122 * e, 165 * e), n.bezierCurveTo(143 * e, 140 * e, 154 * e, 123 * e, 172 * e, 139 * e), n.bezierCurveTo(169 * e, 149 * e, 147 * e, 173 * e, 126 * e, 192 * e), n.closePath(), fill_path(n, i[3], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(47 * e, 129 * e), n.bezierCurveTo(55 * e, 90 * e, 71 * e, 66 * e, 93 * e, 69 * e), n.bezierCurveTo(116 * e, 70 * e, 122 * e, 88 * e, 136 * e, 127 * e), n.bezierCurveTo(143 * e, 137 * e, 144 * e, 137 * e, 144 * e, 142 * e), n.bezierCurveTo(138 * e, 199 * e, 128 * e, 206 * e, 108 * e, 219 * e), n.bezierCurveTo(84 * e, 228 * e, 65 * e, 224 * e, 50 * e, 191 * e), n.bezierCurveTo(41 * e, 161 * e, 41 * e, 157 * e, 39 * e, 144 * e), n.bezierCurveTo(40 * e, 140 * e, 42 * e, 137 * e, 47 * e, 129 * e), n.closePath(), fill_path(n, i[1], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(47 * e, 133 * e), n.bezierCurveTo(65 * e, 143 * e, 74 * e, 162 * e, 70 * e, 186 * e), n.bezierCurveTo(71 * e, 188.5 * e, 71 * e, 188.5 * e, 72 * e, 191 * e), n.bezierCurveTo(81 * e, 185.5 * e, 81 * e, 185.5 * e, 90 * e, 180 * e), n.bezierCurveTo(99 * e, 185 * e, 99 * e, 185 * e, 108 * e, 190 * e), n.bezierCurveTo(110.5 * e, 184.5 * e, 110.5 * e, 184.5 * e, 113 * e, 179 * e), n.bezierCurveTo(110 * e, 156 * e, 121 * e, 156 * e, 142 * e, 141 * e), n.bezierCurveTo(137.5 * e, 133 * e, 137.5 * e, 133 * e, 133 * e, 125 * e), n.bezierCurveTo(116 * e, 78 * e, 112 * e, 70 * e, 91 * e, 71 * e), n.bezierCurveTo(62 * e, 69 * e, 59 * e, 107 * e, 48 * e, 132 * e), n.closePath(), fill_path(n, i[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(93 * e, 86 * e), n.bezierCurveTo(101 * e, 79 * e, 99 * e, 56 * e, 100 * e, 37 * e), n.bezierCurveTo(90 * e, 34 * e, 90 * e, 27 * e, 93 * e, 13 * e), n.bezierCurveTo(96 * e, 0 * e, 85 * e, 13 * e, 82 * e, 26 * e), n.bezierCurveTo(78 * e, 43 * e, 89 * e, 74 * e, 93 * e, 85 * e), n.closePath(), fill_path(n, i[3], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(94 * e, 86 * e), n.bezierCurveTo(120 * e, 88 * e, 132 * e, 109 * e, 122 * e, 128 * e), n.bezierCurveTo(118 * e, 139 * e, 101 * e, 146 * e, 90 * e, 143 * e), n.bezierCurveTo(57 * e, 141 * e, 49 * e, 109 * e, 68 * e, 94 * e), n.bezierCurveTo(78 * e, 85 * e, 90 * e, 86 * e, 95 * e, 86 * e), n.closePath(), fill_path(n, i[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(91 * e, 178 * e), n.bezierCurveTo(78 * e, 136 * e, 81 * e, 88 * e, 93 * e, 87 * e), n.bezierCurveTo(101 * e, 84 * e, 94 * e, 97 * e, 94 * e, 107 * e), n.bezierCurveTo(91 * e, 112 * e, 92 * e, 117 * e, 94 * e, 121 * e), n.bezierCurveTo(98 * e, 126 * e, 102 * e, 128 * e, 97 * e, 135 * e), n.bezierCurveTo(92 * e, 140 * e, 93 * e, 160 * e, 91 * e, 179 * e), n.closePath(), fill_path(n, i[5], i[1], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(20 * e, 151 * e), n.bezierCurveTo(22 * e, 147 * e, 22 * e, 147 * e, 24 * e, 143 * e), n.bezierCurveTo(27 * e, 144.5 * e, 27 * e, 144.5 * e, 30 * e, 146 * e), n.bezierCurveTo(31 * e, 143 * e, 31 * e, 143 * e, 32 * e, 140 * e), n.bezierCurveTo(35 * e, 140.5 * e, 35 * e, 140.5 * e, 38 * e, 141 * e), n.bezierCurveTo(31 * e, 132 * e, 29 * e, 131 * e, 22 * e, 132 * e), n.bezierCurveTo(14 * e, 135 * e, 13 * e, 135 * e, 11 * e, 138 * e), n.bezierCurveTo(15.5 * e, 144.5 * e, 15.5 * e, 144.5 * e, 20 * e, 151 * e), n.closePath(), fill_path(n, i[6]), circle(n, 61 * e, 183 * e, 16.15549442140351 * e), fill_path(n, i[7]), circle(n, 121 * e, 184 * e, 14.866068747318506 * e), fill_path(n, i[7]), circle(n, 57 * e, 178 * e, 5.656854249492381 * e), fill_path(n, i[2]), circle(n, 116 * e, 177 * e, 5.830951894845301 * e), fill_path(n, i[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(162 * e, 152 * e), n.bezierCurveTo(161.5 * e, 148 * e, 161.5 * e, 148 * e, 161 * e, 144 * e), n.bezierCurveTo(157.5 * e, 145 * e, 157.5 * e, 145 * e, 154 * e, 146 * e), n.bezierCurveTo(153.5 * e, 143 * e, 153.5 * e, 143 * e, 153 * e, 140 * e), n.bezierCurveTo(149 * e, 140.5 * e, 149 * e, 140.5 * e, 145 * e, 141 * e), n.bezierCurveTo(150 * e, 132 * e, 161 * e, 131 * e, 170 * e, 138 * e), n.bezierCurveTo(173 * e, 141 * e, 165 * e, 150 * e, 162 * e, 150 * e), n.closePath(), fill_path(n, i[6]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(106 * e, 110 * e), n.bezierCurveTo(104 * e, 98 * e, 112 * e, 91 * e, 118 * e, 101 * e), n.bezierCurveTo(122 * e, 115 * e, 121 * e, 119 * e, 117 * e, 124 * e), n.bezierCurveTo(112 * e, 129 * e, 107 * e, 124 * e, 106 * e, 112 * e), n.closePath(), fill_path(n, i[1]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(64 * e, 106 * e), n.bezierCurveTo(66 * e, 97 * e, 72 * e, 89 * e, 76 * e, 98 * e), n.bezierCurveTo(78 * e, 106 * e, 79 * e, 118 * e, 72 * e, 126 * e), n.bezierCurveTo(65 * e, 130 * e, 63 * e, 117 * e, 64 * e, 108 * e), n.closePath(), fill_path(n, i[1]), a
}

function create_food_plant(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d"),
        r = 200 * e,
        a = 200 * e;
    t.width = r, t.height = a;
    var n = create_plant(.35, !1, ["#0e3022", "#0b8052", "#077b49"]);
    i.drawImage(n, 10, 10);
    n = create_fruit(.9, !1, ["#3d2a6e", "#8255b5"]);
    i.drawImage(n, 21, 20);
    n = create_fruit(.9, !1, ["#3d2a6e", "#8255b5"]);
    i.drawImage(n, 38, 28);
    n = create_fruit(.9, !1, ["#3d2a6e", "#8255b5"]);
    i.drawImage(n, 15, 37);
    n = create_fruit(.9, !1, ["#3d2a6e", "#8255b5"]);
    return i.drawImage(n, 32, 45), t
}

function create_gear(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 100 * e,
        n = 100 * e,
        o = a / 2,
        s = n / 2;
    i.width = a, i.height = n;
    var _ = 5 * e,
        T = 28 * e,
        E = _ / 2,
        I = T / 2;
    r.translate(o, s);
    for (var l = 0; l < 4; l++) round_rect(r, -E, -I, _, T, 2 * e), r.rotate(Math.PI / 4), fill_path(r, t);
    return r.arc(0, 0, 10 * e, 0, 2 * Math.PI), fill_path(r, t), r.globalCompositeOperation = "destination-out", circle(r, 0, 0, 4 * e), r.fill(), i
}

function create_gear_option(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 32 * e,
        o = 32 * e,
        s = n / 2,
        _ = o / 2;
    r.width = n, r.height = o;
    var T = 5 * e,
        E = 28 * e,
        I = T / 2,
        l = E / 2;
    if (a.translate(0 * e, 0 * e), a.translate(s, _), 1 == i) {
        circle(a, 0, 0, 10 * e, 0), fill_path(a, t[2], t[2], 3 * e);
        for (var u = 0; u < 4; u++) round_rect(a, -I, -l, T, E, 2 * e), a.rotate(Math.PI / 4), fill_path(a, t[2], t[2], 4 * e)
    }
    circle(a, 0, 0, 10 * e, 0), fill_path(a, t[0], t[1], 1.5 * e);
    for (u = 0; u < 4; u++) round_rect(a, -I, -l, T, E, 2 * e), a.rotate(Math.PI / 4), fill_path(a, t[0], t[1], 1.5 * e);
    return circle(a, 0, 0, 10 * e, 0), fill_path(a, t[0]), circle(a, 0, 0, 4 * e, 0), fill_path(a, t[2], t[1], 1.5 * e), a.globalCompositeOperation = "destination-out", circle(a, 0, 0, 4 * e, 0), fill_path(a, t[0], t[1], 2 * e), a.globalCompositeOperation = "source-over", circle(a, 0, 0, 4 * e, 0), fill_path(a, void 0, t[1], 2 * e), r
}

function create_minimap_object(e, t, i, r, a, n, o) {
    void 0 === o && (o = 0);
    for (var s = -1 == n ? 0 : n; s >= o; s--)
        for (var _ = 0; _ < 200; _++)
            for (var T = 0; T < 200; T++) {
                var E = MAP.tiles[T][_];
                if (E && E[r]) {
                    if (-1 == n) var I = E[r];
                    else I = E[r][s];
                    for (var l = 0; I && l < I.length; l++) {
                        var u = I[l];
                        e.fillStyle = i, circle(e, u.x * t * .0095, u.y * t * .0095, a * t), e.fill()
                    }
                }
            }
}

function create_minimap(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 200 * e, i.height = 200 * e, r.translate(9 * e, 12 * e), r.fillStyle = t[0], r.fillRect(-2, -3, i.width, i.height), r.fillStyle = t[9], r.fillRect(0, 0, i.width, i.height), r.fillStyle = t[17], r.fillRect(0, 0, i.width, i.height / 2.1), r.fillStyle = t[26], r.fillRect(i.width / 1.77, i.height / 2.1, i.width / 2.1, i.height / 2.1), r.fillStyle = t[28], r.fillRect(i.width / 1.77, i.height / 2.1, 5, i.height / 2.1), create_minimap_object(r, e, t[17], "so", 3, 6, 0), create_minimap_object(r, e, t[28], "isl", 6, 2, 2), create_minimap_object(r, e, t[28], "isl", 6, 1, 1), create_minimap_object(r, e, t[28], "isl", 6, 0, 0), create_minimap_object(r, e, t[5], "plm", 2, 2, 2), create_minimap_object(r, e, t[5], "plm", 2, 1, 1), create_minimap_object(r, e, t[5], "plm", 2, 0, 0), create_minimap_object(r, e, t[5], "t", 2, 5, 4), create_minimap_object(r, e, t[6], "t", 3, 3, 2), create_minimap_object(r, e, t[7], "t", 4, 1, 0), create_minimap_object(r, e, t[8], "b", 3, 3, 2), create_minimap_object(r, e, t[9], "b", 4, 1, 0), create_minimap_object(r, e, t[2], "s", 2, 2, 2), create_minimap_object(r, e, t[3], "s", 3, 1, 1), create_minimap_object(r, e, t[4], "s", 4, 0, 0), create_minimap_object(r, e, t[10], "g", 2, 2, 2), create_minimap_object(r, e, t[11], "g", 3, 1, 1), create_minimap_object(r, e, t[12], "g", 4, 0, 0), create_minimap_object(r, e, t[1], "p", 4, -1), create_minimap_object(r, e, t[25], "dg", 3, 6, 0), create_minimap_object(r, e, t[27], "cs", 2, 2, 2), create_minimap_object(r, e, t[27], "cs", 2, 1, 1), create_minimap_object(r, e, t[27], "cs", 2, 0, 0), create_minimap_object(r, e, t[19], "f", 2, 2, 2), create_minimap_object(r, e, t[20], "f", 3, 1, 1), create_minimap_object(r, e, t[21], "f", 4, 0, 0), create_minimap_object(r, e, t[22], "gw", 2, 2, 2), create_minimap_object(r, e, t[22], "gw", 3, 1, 1), create_minimap_object(r, e, t[22], "gw", 4, 0, 0), create_minimap_object(r, e, t[23], "dw", 3, 1, 1), create_minimap_object(r, e, t[23], "dw", 4, 0, 0), create_minimap_object(r, e, t[23], "dw", 2, 2, 2), create_minimap_object(r, e, t[23], "d", 3, 1, 1), create_minimap_object(r, e, t[23], "d", 4, 0, 0), create_minimap_object(r, e, t[23], "d", 2, 2, 2), create_minimap_object(r, e, t[24], "a", 2, 2, 2), create_minimap_object(r, e, t[24], "a", 3, 1, 1), create_minimap_object(r, e, t[24], "a", 4, 0, 0), create_minimap_object(r, e, t[30], "l", 4, 2, 2), create_minimap_object(r, e, t[30], "l", 4, 1, 1), create_minimap_object(r, e, t[30], "l", 4, 0, 0), circle(r, 0, 0, 0), r.globalCompositeOperation = "destination-out", r.translate(-9 * e, -4 * e), r.rect(5 * e, 0, i.width * e, i.height * e, 10 * e), r.lineWidth = 7 * e, r.strokeStyle = t[16], r.stroke(), i
}

function create_workbench(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = (d = 125 * e) / 2,
        o = (c = 95 * e) / 2,
        s = 10 * e,
        _ = 8 * e,
        T = 112 * e,
        E = 82 * e,
        I = T / 2,
        l = E / 2,
        u = 4 * e;
    r.width = d, r.height = c, a.translate(n - 4 * e, o + 4 * e), a.globalAlpha = t ? .5 : 1, round_rect(a, -I, -l, T, E, s), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -_), round_rect(a, -I, -l, T, E, s), fill_path(a, i[1], i[2], u);
    var d = 55 * e,
        c = 45 * e;
    s = 5;
    a.translate(-40 * e, -30 * e), round_rect(a, 0, 0, d, c, s), fill_path(a, i[3]);
    var R = create_gear(.7 * e, i[3]);
    a.drawImage(R, 45 * e, -25 * e);
    R = create_gear(.7 * e, i[3]);
    a.drawImage(R, 45 * e, 15 * e);
    R = create_gear(1.2 * e, i[3]);
    a.drawImage(R, 28 * e, -30 * e);
    d = 15 * e, c = 70 * e, s = 5 * e;
    a.translate(78 * e, -5 * e), round_rect(a, 0, 0, d, c, s), fill_path(a, i[4]);
    d = 9 * e, c = 50 * e, s = 3 * e;
    return a.translate(-20 * e, 20 * e), a.rotate(Math.PI / 5), a.globalAlpha = .6, round_rect(a, 0, 0, d, c, s), fill_path(a, i[5]), a.translate(-20 * e, 29 * e), a.rotate(Math.PI / 5), a.globalAlpha = .6, a.beginPath(), a.lineJoin = "round", a.moveTo(0, 0), a.lineTo(0, 30 * e), a.lineTo(30 * e, 30 * e), a.closePath(), fill_path(a, null, i[5], 8 * e), r
}

function create_rabbit(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 85 * e,
        n = 115 * e,
        o = 6 * e;
    i.width = a, i.height = n, r.translate(-130 * e, -60 * e + o), r.globalAlpha = .5, r.beginPath(), r.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e), r.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e), r.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e), r.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e), r.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e), r.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e), r.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e), r.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e), r.closePath(), fill_path(r, t[0]), r.translate(0, -o), r.globalAlpha = 1, r.beginPath(), r.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e), r.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e), r.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e), r.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e), r.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e), r.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e), r.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e), r.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e), r.closePath(), fill_path(r, t[1], t[2], 4);
    var s = 155 * e,
        _ = 133 * e,
        T = 10 * e,
        E = 3 * e,
        I = s + -3 * e,
        l = _ + -5 * e;
    return r.save(), r.translate(s, _), r.globalAlpha = 1, circle(r, 0, 0, T), fill_path(r, t[3]), r.restore(), r.save(), r.translate(I, l), r.globalAlpha = 1, circle(r, 0, 0, E), fill_path(r, t[4]), r.restore(), r.save(), r.translate(s + 27 * e, _), r.globalAlpha = 1, circle(r, 0, 0, T), fill_path(r, t[3]), r.restore(), r.save(), r.translate(27 * e + I, l), r.globalAlpha = 1, circle(r, 0, 0, E), fill_path(r, t[4]), i
}

function create_hurt_rabbit(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 85 * e,
        n = 115 * e,
        o = 4 * e;
    return i.width = a, i.height = n, r.translate(-130 * e, -60 * e), r.globalAlpha = 1, r.beginPath(), r.bezierCurveTo(190 * e, 87 * e, 201 * e, 59 * e, 208 * e, 64 * e), r.bezierCurveTo(213 * e, 68 * e, 204 * e, 93 * e, 195 * e, 109 * e), r.bezierCurveTo(195 * e, 109 * e, 202 * e, 124 * e, 191 * e, 141 * e), r.bezierCurveTo(182 * e, 151 * e, 164 * e, 155 * e, 148 * e, 144 * e), r.bezierCurveTo(136 * e, 135 * e, 138 * e, 111 * e, 145 * e, 104 * e), r.bezierCurveTo(140 * e, 92 * e, 131 * e, 67 * e, 138 * e, 63 * e), r.bezierCurveTo(145 * e, 61 * e, 153 * e, 82 * e, 155 * e, 96 * e), r.bezierCurveTo(167 * e, 91 * e, 178 * e, 92 * e, 187 * e, 98 * e), r.closePath(), fill_path(r, t, t, o), i
}

function create_hurt_wolf(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 188 * e, i.height = 190 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(33.00567626953125 * e, 95.44320678710938 * e), r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e), r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e), r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e), r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e), r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e), r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e), r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e), r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e), r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e), r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e), r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e), r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e), r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e), r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e), r.closePath(), fill_path(r, t[0], t[0], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(51.00567626953125 * e, 72.53409576416016 * e), r.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e), r.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e), r.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e), r.bezierCurveTo(77.00567626953125 * e, 71.53409576416016 * e, 64.00567626953125 * e, 75.53409576416016 * e, 51.00567626953125 * e, 72.53409576416016 * e), r.closePath(), fill_path(r, t[0], t[0], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105.00567626953125 * e, 50.53410339355469 * e), r.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e), r.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e), r.closePath(), fill_path(r, t[0], t[0], 2 * e), i
}

function create_wolf(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 188 * e, i.height = 190 * e, r.globalAlpha = .5, r.translate(0, 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(33.00567626953125 * e, 95.44320678710938 * e), r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e), r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e), r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e), r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e), r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e), r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e), r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e), r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e), r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e), r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e), r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e), r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e), r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e), r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e), r.closePath(), fill_path(r, t[0], t[0], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(60.00567626953125 * e, 99.35227966308594 * e), r.bezierCurveTo(70.00567626953125 * e, 82.35227966308594 * e, 85.00567626953125 * e, 86.35227966308594 * e, 87.00567626953125 * e, 97.35227966308594 * e), r.bezierCurveTo(89.00567626953125 * e, 101.35227966308594 * e, 88.00567626953125 * e, 105.35227966308594 * e, 87.00567626953125 * e, 110.35227966308594 * e), r.bezierCurveTo(89.00567626953125 * e, 111.35227966308594 * e, 91.00567626953125 * e, 112.35227966308594 * e, 93.00567626953125 * e, 115.35227966308594 * e), r.bezierCurveTo(96.00567626953125 * e, 111.35227966308594 * e, 99.00567626953125 * e, 111.35227966308594 * e, 100.00567626953125 * e, 110.35227966308594 * e), r.bezierCurveTo(98.00567626953125 * e, 92.35227966308594 * e, 103.00567626953125 * e, 86.35227966308594 * e, 113.00567626953125 * e, 89.35227966308594 * e), r.bezierCurveTo(122.00567626953125 * e, 92.35227966308594 * e, 123.00567626953125 * e, 94.35227966308594 * e, 126.00567626953125 * e, 98.35227966308594 * e), r.bezierCurveTo(124.00567626953125 * e, 102.35227966308594 * e, 123.00567626953125 * e, 103.35227966308594 * e, 121.00567626953125 * e, 104.35227966308594 * e), r.bezierCurveTo(124.00567626953125 * e, 105.35227966308594 * e, 126.00567626953125 * e, 107.35227966308594 * e, 129.00567626953125 * e, 111.35227966308594 * e), r.bezierCurveTo(115.00567626953125 * e, 122.35227966308594 * e, 113.00567626953125 * e, 145.35227966308594 * e, 100.00567626953125 * e, 152.35227966308594 * e), r.bezierCurveTo(91.00567626953125 * e, 158.35227966308594 * e, 83.00567626953125 * e, 149.35227966308594 * e, 76.00567626953125 * e, 138.35227966308594 * e), r.bezierCurveTo(67.00567626953125 * e, 114.35227966308594 * e, 63.00567626953125 * e, 113.35227966308594 * e, 59.00567626953125 * e, 111.35227966308594 * e), r.bezierCurveTo(62.00567626953125 * e, 107.35227966308594 * e, 64.00567626953125 * e, 105.35227966308594 * e, 66.00567626953125 * e, 104.35227966308594 * e), r.bezierCurveTo(63.00567626953125 * e, 100.35227966308594 * e, 62.00567626953125 * e, 100.35227966308594 * e, 60.00567626953125 * e, 99.35227966308594 * e), r.closePath(), fill_path(r, t[0], t[0], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(51.00567626953125 * e, 72.53409576416016 * e), r.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e), r.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e), r.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e), r.bezierCurveTo(77.00567626953125 * e, 71.53409576416016 * e, 64.00567626953125 * e, 75.53409576416016 * e, 51.00567626953125 * e, 72.53409576416016 * e), r.closePath(), fill_path(r, t[0], t[0], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105.00567626953125 * e, 50.53410339355469 * e), r.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e), r.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e), r.closePath(), fill_path(r, t[0], t[0], 2 * e), r.globalAlpha = 1, r.translate(0, -5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(33.00567626953125 * e, 95.44320678710938 * e), r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e), r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e), r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e), r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e), r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e), r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e), r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e), r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e), r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e), r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e), r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e), r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e), r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e), r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e), r.closePath(), fill_path(r, t[1], t[2], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(60.00567626953125 * e, 99.35227966308594 * e), r.bezierCurveTo(70.00567626953125 * e, 82.35227966308594 * e, 85.00567626953125 * e, 86.35227966308594 * e, 87.00567626953125 * e, 97.35227966308594 * e), r.bezierCurveTo(89.00567626953125 * e, 101.35227966308594 * e, 88.00567626953125 * e, 105.35227966308594 * e, 87.00567626953125 * e, 110.35227966308594 * e), r.bezierCurveTo(89.00567626953125 * e, 111.35227966308594 * e, 91.00567626953125 * e, 112.35227966308594 * e, 93.00567626953125 * e, 115.35227966308594 * e), r.bezierCurveTo(96.00567626953125 * e, 111.35227966308594 * e, 99.00567626953125 * e, 111.35227966308594 * e, 100.00567626953125 * e, 110.35227966308594 * e), r.bezierCurveTo(98.00567626953125 * e, 92.35227966308594 * e, 103.00567626953125 * e, 86.35227966308594 * e, 113.00567626953125 * e, 89.35227966308594 * e), r.bezierCurveTo(122.00567626953125 * e, 92.35227966308594 * e, 123.00567626953125 * e, 94.35227966308594 * e, 126.00567626953125 * e, 98.35227966308594 * e), r.bezierCurveTo(124.00567626953125 * e, 102.35227966308594 * e, 123.00567626953125 * e, 103.35227966308594 * e, 121.00567626953125 * e, 104.35227966308594 * e), r.bezierCurveTo(124.00567626953125 * e, 105.35227966308594 * e, 126.00567626953125 * e, 107.35227966308594 * e, 129.00567626953125 * e, 111.35227966308594 * e), r.bezierCurveTo(115.00567626953125 * e, 122.35227966308594 * e, 113.00567626953125 * e, 145.35227966308594 * e, 100.00567626953125 * e, 152.35227966308594 * e), r.bezierCurveTo(91.00567626953125 * e, 158.35227966308594 * e, 83.00567626953125 * e, 149.35227966308594 * e, 76.00567626953125 * e, 138.35227966308594 * e), r.bezierCurveTo(67.00567626953125 * e, 114.35227966308594 * e, 63.00567626953125 * e, 113.35227966308594 * e, 59.00567626953125 * e, 111.35227966308594 * e), r.bezierCurveTo(62.00567626953125 * e, 107.35227966308594 * e, 64.00567626953125 * e, 105.35227966308594 * e, 66.00567626953125 * e, 104.35227966308594 * e), r.bezierCurveTo(63.00567626953125 * e, 100.35227966308594 * e, 62.00567626953125 * e, 100.35227966308594 * e, 60.00567626953125 * e, 99.35227966308594 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(33.00567626953125 * e, 95.44320678710938 * e), r.bezierCurveTo(42.00567626953125 * e, 87.44320678710938 * e, 48.00567626953125 * e, 51.443206787109375 * e, 74.00567626953125 * e, 47.443206787109375 * e), r.bezierCurveTo(100.00567626953125 * e, 42.443206787109375 * e, 118.00567626953125 * e, 49.443206787109375 * e, 131.00567626953125 * e, 55.443206787109375 * e), r.bezierCurveTo(140.00567626953125 * e, 70.44320678710938 * e, 145.00567626953125 * e, 87.44320678710938 * e, 152.00567626953125 * e, 94.44320678710938 * e), r.bezierCurveTo(149.00567626953125 * e, 99.44320678710938 * e, 147.00567626953125 * e, 98.44320678710938 * e, 141.00567626953125 * e, 101.44320678710938 * e), r.bezierCurveTo(147.00567626953125 * e, 108.44320678710938 * e, 147.00567626953125 * e, 111.44320678710938 * e, 147.00567626953125 * e, 112.44320678710938 * e), r.bezierCurveTo(143.00567626953125 * e, 112.44320678710938 * e, 141.00567626953125 * e, 112.44320678710938 * e, 137.00567626953125 * e, 111.44320678710938 * e), r.bezierCurveTo(138.00567626953125 * e, 117.44320678710938 * e, 138.00567626953125 * e, 120.44320678710938 * e, 138.00567626953125 * e, 124.44320678710938 * e), r.bezierCurveTo(125.00567626953125 * e, 107.44320678710938 * e, 121.00567626953125 * e, 124.44320678710938 * e, 110.00567626953125 * e, 141.44320678710938 * e), r.bezierCurveTo(102.00567626953125 * e, 158.44320678710938 * e, 89.00567626953125 * e, 158.44320678710938 * e, 80.00567626953125 * e, 144.44320678710938 * e), r.bezierCurveTo(61.00567626953125 * e, 111.44320678710938 * e, 56.00567626953125 * e, 117.44320678710938 * e, 48.00567626953125 * e, 120.44320678710938 * e), r.bezierCurveTo(46.00567626953125 * e, 118.44320678710938 * e, 47.00567626953125 * e, 112.44320678710938 * e, 48.00567626953125 * e, 107.44320678710938 * e), r.bezierCurveTo(43.00567626953125 * e, 111.44320678710938 * e, 40.00567626953125 * e, 111.44320678710938 * e, 37.00567626953125 * e, 110.44320678710938 * e), r.bezierCurveTo(39.50567626953125 * e, 104.94320678710938 * e, 39.50567626953125 * e, 104.94320678710938 * e, 42.00567626953125 * e, 99.44320678710938 * e), r.bezierCurveTo(33.00567626953125 * e, 99.44320678710938 * e, 33.00567626953125 * e, 98.44320678710938 * e, 33.00567626953125 * e, 96.44320678710938 * e), r.closePath(), fill_path(r, void 0, t[2], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(51.00567626953125 * e, 72.53409576416016 * e), r.bezierCurveTo(48.00567626953125 * e, 56.534095764160156 * e, 48.00567626953125 * e, 49.534095764160156 * e, 54.00567626953125 * e, 35.534095764160156 * e), r.bezierCurveTo(58.00567626953125 * e, 26.534095764160156 * e, 65.00567626953125 * e, 27.534095764160156 * e, 73.00567626953125 * e, 40.534095764160156 * e), r.bezierCurveTo(81.00567626953125 * e, 49.534095764160156 * e, 82.00567626953125 * e, 50.534095764160156 * e, 83.00567626953125 * e, 51.534095764160156 * e), fill_path(r, t[1], t[2], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105.00567626953125 * e, 50.53410339355469 * e), r.bezierCurveTo(112.00567626953125 * e, 48.53410339355469 * e, 125.00567626953125 * e, 21.534103393554688 * e, 132.00567626953125 * e, 33.53410339355469 * e), r.bezierCurveTo(138.00567626953125 * e, 42.53410339355469 * e, 140.00567626953125 * e, 64.53410339355469 * e, 136.00567626953125 * e, 75.53410339355469 * e), fill_path(r, t[1], t[2], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(57.00567626953125 * e, 68.53410339355469 * e), r.bezierCurveTo(63.00567626953125 * e, 69.53410339355469 * e, 69.00567626953125 * e, 66.53410339355469 * e, 73.00567626953125 * e, 60.53410339355469 * e), r.bezierCurveTo(66.00567626953125 * e, 47.53410339355469 * e, 61.00567626953125 * e, 42.53410339355469 * e, 58.00567626953125 * e, 49.53410339355469 * e), r.bezierCurveTo(56.00567626953125 * e, 59.53410339355469 * e, 56.00567626953125 * e, 64.53410339355469 * e, 57.00567626953125 * e, 67.53410339355469 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115.00567626953125 * e, 59.715911865234375 * e), r.bezierCurveTo(119.00567626953125 * e, 48.715911865234375 * e, 126.00567626953125 * e, 41.715911865234375 * e, 129.00567626953125 * e, 48.715911865234375 * e), r.bezierCurveTo(131.00567626953125 * e, 56.715911865234375 * e, 133.00567626953125 * e, 71.71591186523438 * e, 127.00567626953125 * e, 68.71591186523438 * e), r.bezierCurveTo(120.00567626953125 * e, 67.71591186523438 * e, 114.00567626953125 * e, 59.715911865234375 * e, 116.00567626953125 * e, 58.715911865234375 * e), r.closePath(), fill_path(r, t[3]), circle(r, 77 * e, 107 * e, 6 * e), fill_path(r, t[2]), circle(r, 110 * e, 107 * e, 6 * e), fill_path(r, t[2]), circle(r, 75 * e, 105 * e, 3 * e), fill_path(r, t[4]), circle(r, 108 * e, 105 * e, 3 * e), fill_path(r, t[4]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(88.00567626953125 * e, 141.4431915283203 * e), r.bezierCurveTo(93.00567626953125 * e, 137.4431915283203 * e, 96.00567626953125 * e, 138.4431915283203 * e, 100.00567626953125 * e, 141.4431915283203 * e), r.bezierCurveTo(103.00567626953125 * e, 143.4431915283203 * e, 101.00567626953125 * e, 149.4431915283203 * e, 95.00567626953125 * e, 148.4431915283203 * e), r.bezierCurveTo(85.00567626953125 * e, 148.4431915283203 * e, 86.00567626953125 * e, 145.4431915283203 * e, 88.00567626953125 * e, 142.4431915283203 * e), r.closePath(), fill_path(r, t[1]), i
}

function create_meat(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 55 * e,
        o = 55 * e,
        s = 8 * e;
    return r.width = n, r.height = o, a.translate(-65 * e, -55 * e + s), a.globalAlpha = 1, a.beginPath(), a.moveTo(95 * e, 60 * e), a.bezierCurveTo(107 * e, 62 * e, 110 * e, 73 * e, 107 * e, 79 * e), a.bezierCurveTo(104 * e, 85 * e, 85 * e, 93 * e, 81 * e, 88 * e), a.bezierCurveTo(74 * e, 80 * e, 85 * e, 60 * e, 95 * e, 60 * e), a.closePath(), fill_path(a, i[0], i[1], 3), a.globalAlpha = 1, a.beginPath(), a.moveTo(91 * e, 70 * e), a.bezierCurveTo(91 * e, 75 * e, 100 * e, 76 * e, 100 * e, 73 * e), a.bezierCurveTo(100 * e, 69 * e, 89 * e, 65 * e, 91 * e, 70 * e), a.closePath(), fill_path(a, i[2], i[3], 3), r
}

function create_hurt_spider(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 238 * e, i.height = 230 * e, r.translate(-93 * e, -110 * e), circle(r, 213.5 * e, 256.75 * e, 75 * e), fill_path(r, t), circle(r, 213.5 * e, 175.75 * e, 25 * e), fill_path(r, t), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(156.5 * e, 137.75 * e), r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.5 * e, 178.75 * e), r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130.5 * e, 124.75 * e), r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 183.75 * e), r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107.5 * e, 213.75 * e), r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(212.5 * e, 187.75 * e), r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(102.5 * e, 258.75 * e), r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 192.75 * e), r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(219.5 * e, 158.75 * e), r.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e), r.closePath(), r.lineWidth = 10 * e, r.strokeStyle = t, r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(210.5 * e, 160.75 * e), r.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e), r.closePath(), r.lineWidth = 10 * e, r.strokeStyle = t, r.stroke(), i
}

function create_spider(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 238 * e, i.height = 230 * e, r.translate(-93 * e, -110 * e + 5 * e), r.globalAlpha = .3, circle(r, 213.5 * e, 256.75 * e, 75 * e), fill_path(r, t[5]), circle(r, 213.5 * e, 175.75 * e, 25 * e), fill_path(r, t[5]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(156.5 * e, 137.75 * e), r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.5 * e, 178.75 * e), r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130.5 * e, 124.75 * e), r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 183.75 * e), r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107.5 * e, 213.75 * e), r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(212.5 * e, 187.75 * e), r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(102.5 * e, 258.75 * e), r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[5], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 192.75 * e), r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[5], r.stroke(), r.translate(0, -5), r.globalAlpha = 1, circle(r, 213.5 * e, 256.75 * e, 75 * e), fill_path(r, t[3]), circle(r, 213.5 * e, 175.75 * e, 25 * e), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(219.5 * e, 158.75 * e), r.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e), r.closePath(), r.lineWidth = 10 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(210.5 * e, 160.75 * e), r.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e), r.closePath(), r.lineWidth = 10 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(219.5 * e, 158.75 * e), r.bezierCurveTo(226.5 * e, 159.75 * e, 227.5 * e, 147.75 * e, 219.5 * e, 145.75 * e), r.closePath(), r.fillStyle = t[0], r.fill(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(210.5 * e, 160.75 * e), r.bezierCurveTo(203.5 * e, 159.75 * e, 199.5 * e, 146.75 * e, 210.5 * e, 145.75 * e), r.closePath(), r.fillStyle = t[0], r.fill(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(156.5 * e, 137.75 * e), r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.5 * e, 178.75 * e), r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130.5 * e, 124.75 * e), r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 183.75 * e), r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107.5 * e, 213.75 * e), r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(212.5 * e, 187.75 * e), r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(102.5 * e, 258.75 * e), r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 192.75 * e), r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e), r.lineWidth = 17 * e, r.strokeStyle = t[3], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(156.5 * e, 137.75 * e), r.bezierCurveTo(170.5 * e, 173.75 * e, 195.5 * e, 177.75 * e, 209.5 * e, 177.75 * e), r.lineWidth = 8 * e, r.strokeStyle = t[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.5 * e, 178.75 * e), r.bezierCurveTo(251.5 * e, 177.75 * e, 263.5 * e, 153.75 * e, 270.5 * e, 140.75 * e), r.lineWidth = 8 * e, r.strokeStyle = t[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130.5 * e, 124.75 * e), r.bezierCurveTo(153.5 * e, 185.75 * e, 198.5 * e, 185.75 * e, 213.5 * e, 185.75 * e), r.lineWidth = 8 * e, r.strokeStyle = t[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 183.75 * e), r.bezierCurveTo(265.5 * e, 192.75 * e, 293.5 * e, 141.75 * e, 297.5 * e, 124.75 * e), r.lineWidth = 8 * e, r.strokeStyle = t[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107.5 * e, 213.75 * e), r.bezierCurveTo(151.5 * e, 190.75 * e, 198.5 * e, 184.75 * e, 210.5 * e, 184.75 * e), r.lineWidth = 8 * e, r.strokeStyle = t[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(212.5 * e, 187.75 * e), r.bezierCurveTo(258.5 * e, 182.75 * e, 286.5 * e, 194.75 * e, 314.5 * e, 206.75 * e), r.lineWidth = 8 * e, r.strokeStyle = t[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(102.5 * e, 258.75 * e), r.bezierCurveTo(142.5 * e, 200.75 * e, 193.5 * e, 194.75 * e, 211.5 * e, 185.75 * e), r.lineWidth = 8 * e, r.strokeStyle = t[0], r.stroke(), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.5 * e, 192.75 * e), r.bezierCurveTo(276.5 * e, 194.75 * e, 306.5 * e, 233.75 * e, 316.5 * e, 246.75 * e), r.lineWidth = 8 * e, r.strokeStyle = t[0], r.stroke(), circle(r, 213.5 * e, 256.75 * e, 70 * e), fill_path(r, t[0]), circle(r, 213.5 * e, 175.75 * e, 20 * e), fill_path(r, t[0]), circle(r, 222 * e, 166 * e, 5 * e), r.fillStyle = t[2], r.fill(), circle(r, 205 * e, 166 * e, 5 * e), r.fillStyle = t[2], r.fill(), circle(r, 206.2 * e, 167 * e, 2.5 * e), r.fillStyle = t[4], r.fill(), circle(r, 223.2 * e, 167 * e, 2.5 * e), r.fillStyle = t[4], r.fill(), r.save(), r.translate(213.5 * e, 293.75 * e), r.rotate(.76), round_rect(r, -22 * e, -21 * e, 44 * e, 42 * e, 6 * e), r.restore(), r.fillStyle = t[1], r.fill(), r.save(), r.translate(212.5 * e, 258.25 * e), r.rotate(.8), round_rect(r, -15 * e, -14.5 * e, 30 * e, 29 * e, 6 * e), r.restore(), r.fillStyle = t[1], r.fill(), i
}

function create_web(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 450 * e, i.height = 470 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(226.5 * e, 91.546875 * e), r.bezierCurveTo(254.5 * e, 115.546875 * e, 261.5 * e, 115.546875 * e, 294.5 * e, 109.546875 * e), r.bezierCurveTo(299.5 * e, 141.546875 * e, 315.5 * e, 151.546875 * e, 344.5 * e, 158.546875 * e), r.bezierCurveTo(330.5 * e, 195.546875 * e, 341.5 * e, 207.546875 * e, 361.5 * e, 226.546875 * e), r.bezierCurveTo(331.5 * e, 251.546875 * e, 335.5 * e, 270.546875 * e, 342.5 * e, 295.546875 * e), r.bezierCurveTo(300.5 * e, 296.546875 * e, 293.5 * e, 325.546875 * e, 292.5 * e, 344.546875 * e), r.bezierCurveTo(257.5 * e, 326.546875 * e, 242.5 * e, 338.546875 * e, 224.5 * e, 361.546875 * e), r.bezierCurveTo(200.5 * e, 329.546875 * e, 180.5 * e, 334.546875 * e, 155.5 * e, 341.546875 * e), r.bezierCurveTo(146.5 * e, 307.546875 * e, 140.5 * e, 302.546875 * e, 107.5 * e, 292.546875 * e), r.bezierCurveTo(117.5 * e, 253.546875 * e, 109.5 * e, 244.546875 * e, 89.5 * e, 224.546875 * e), r.bezierCurveTo(118.5 * e, 191.546875 * e, 114.5 * e, 182.546875 * e, 108.5 * e, 156.546875 * e), r.bezierCurveTo(143.5 * e, 149.546875 * e, 150.5 * e, 136.546875 * e, 157.5 * e, 106.546875 * e), r.bezierCurveTo(202.5 * e, 120.546875 * e, 211.5 * e, 103.546875 * e, 228.5 * e, 91.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(224.5 * e, 129.546875 * e), r.bezierCurveTo(247.5 * e, 147.546875 * e, 252.5 * e, 143.546875 * e, 274.5 * e, 141.546875 * e), r.bezierCurveTo(279.5 * e, 163.546875 * e, 289.5 * e, 168.546875 * e, 311.5 * e, 178.546875 * e), r.bezierCurveTo(301.5 * e, 199.546875 * e, 307.5 * e, 213.546875 * e, 323.5 * e, 226.546875 * e), r.bezierCurveTo(303.5 * e, 240.546875 * e, 303.5 * e, 255.546875 * e, 312.5 * e, 275.546875 * e), r.bezierCurveTo(281.5 * e, 278.546875 * e, 276.5 * e, 291.546875 * e, 272.5 * e, 313.546875 * e), r.bezierCurveTo(248.5 * e, 301.546875 * e, 239.5 * e, 310.546875 * e, 224.5 * e, 324.546875 * e), r.bezierCurveTo(211.5 * e, 304.546875 * e, 199.5 * e, 301.546875 * e, 176.5 * e, 309.546875 * e), r.bezierCurveTo(165.5 * e, 276.546875 * e, 159.5 * e, 275.546875 * e, 138.5 * e, 274.546875 * e), r.bezierCurveTo(148.5 * e, 248.546875 * e, 140.5 * e, 237.546875 * e, 125.5 * e, 225.546875 * e), r.bezierCurveTo(145.5 * e, 205.546875 * e, 146.5 * e, 195.546875 * e, 142.5 * e, 176.546875 * e), r.bezierCurveTo(173.5 * e, 164.546875 * e, 173.5 * e, 155.546875 * e, 178.5 * e, 140.546875 * e), r.bezierCurveTo(214.5 * e, 143.546875 * e, 214.5 * e, 135.546875 * e, 226.5 * e, 129.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(224.5 * e, 160.546875 * e), r.bezierCurveTo(236.5 * e, 168.546875 * e, 239.5 * e, 168.546875 * e, 258.5 * e, 168.546875 * e), r.bezierCurveTo(261.5 * e, 185.546875 * e, 268.5 * e, 187.546875 * e, 282.5 * e, 192.546875 * e), r.bezierCurveTo(277.5 * e, 208.546875 * e, 283.5 * e, 216.546875 * e, 289.5 * e, 228.546875 * e), r.bezierCurveTo(277.5 * e, 243.546875 * e, 280.5 * e, 253.546875 * e, 281.5 * e, 260.546875 * e), r.bezierCurveTo(264.5 * e, 260.546875 * e, 259.5 * e, 269.546875 * e, 256.5 * e, 283.546875 * e), r.bezierCurveTo(244.5 * e, 276.546875 * e, 232.5 * e, 283.546875 * e, 223.5 * e, 291.546875 * e), r.bezierCurveTo(213.5 * e, 276.546875 * e, 205.5 * e, 278.546875 * e, 190.5 * e, 281.546875 * e), r.bezierCurveTo(181.5 * e, 262.546875 * e, 173.5 * e, 259.546875 * e, 165.5 * e, 258.546875 * e), r.bezierCurveTo(169.5 * e, 239.546875 * e, 167.5 * e, 233.546875 * e, 157.5 * e, 225.546875 * e), r.bezierCurveTo(169.5 * e, 208.546875 * e, 170.5 * e, 203.546875 * e, 168.5 * e, 192.546875 * e), r.bezierCurveTo(181.5 * e, 187.546875 * e, 188.5 * e, 179.546875 * e, 192.5 * e, 168.546875 * e), r.bezierCurveTo(216.5 * e, 170.546875 * e, 218.5 * e, 163.546875 * e, 225.5 * e, 160.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(205.5 * e, 194.546875 * e), r.bezierCurveTo(216.5 * e, 192.546875 * e, 219.5 * e, 191.546875 * e, 225.5 * e, 185.546875 * e), r.bezierCurveTo(232.5 * e, 193.546875 * e, 237.5 * e, 191.546875 * e, 246.5 * e, 192.546875 * e), r.bezierCurveTo(249.5 * e, 202.546875 * e, 253.5 * e, 205.546875 * e, 258.5 * e, 207.546875 * e), r.bezierCurveTo(259.5 * e, 222.546875 * e, 256.5 * e, 223.546875 * e, 265.5 * e, 226.546875 * e), r.bezierCurveTo(256.5 * e, 231.546875 * e, 255.5 * e, 241.546875 * e, 259.5 * e, 248.546875 * e), r.bezierCurveTo(250.5 * e, 245.546875 * e, 245.5 * e, 252.546875 * e, 243.5 * e, 260.546875 * e), r.bezierCurveTo(234.5 * e, 256.546875 * e, 229.5 * e, 258.546875 * e, 223.5 * e, 265.546875 * e), r.bezierCurveTo(218.5 * e, 255.546875 * e, 213.5 * e, 257.546875 * e, 204.5 * e, 261.546875 * e), r.bezierCurveTo(203.5 * e, 251.546875 * e, 198.5 * e, 248.546875 * e, 189.5 * e, 244.546875 * e), r.bezierCurveTo(194.5 * e, 237.546875 * e, 192.5 * e, 231.546875 * e, 184.5 * e, 225.546875 * e), r.bezierCurveTo(191.5 * e, 211.546875 * e, 192.5 * e, 209.546875 * e, 190.5 * e, 204.546875 * e), r.bezierCurveTo(200.5 * e, 204.546875 * e, 204.5 * e, 198.546875 * e, 207.5 * e, 194.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149.5 * e, 93.546875 * e), r.bezierCurveTo(287.5 * e, 332.546875 * e, 226 * e, 225.546875 * e, 302.5 * e, 357.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(224.5 * e, 66.546875 * e), r.bezierCurveTo(224.5 * e, 223.546875 * e, 224.5 * e, 223.546875 * e, 224.5 * e, 380.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(302.5 * e, 88.546875 * e), r.bezierCurveTo(222.5 * e, 227.546875 * e, 222.5 * e, 227.546875 * e, 142.5 * e, 366.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(361.5 * e, 147.546875 * e), r.bezierCurveTo(223 * e, 226.546875 * e, 223 * e, 226.546875 * e, 84.5 * e, 305.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(379.5 * e, 225.546875 * e), r.bezierCurveTo(221 * e, 225.546875 * e, 221 * e, 225.546875 * e, 62.5 * e, 225.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(90.5 * e, 147.546875 * e), r.bezierCurveTo(226.5 * e, 226.546875 * e, 226.5 * e, 226.546875 * e, 362.5 * e, 305.546875 * e), r.closePath(), fill_path(r, void 0, t[0], 4), i
}

function create_dead_box(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 400 * e, a.save(), a.translate(202.5 * e, 147.5 * e), round_rect(a, -96.5 * e, -21.5 * e, 193 * e, 193 * e, 0 * e), a.restore(), fill_path(a, t[0], t[1], 12 * e), a.save(), a.translate(202.5 * e, 190.5 * e), round_rect(a, 96.5 * e, -21.5 * e, -193 * e, 43 * e, 0 * e), a.restore(), fill_path(a, t[2], t[1], 12 * e), a.save(), a.save(), a.translate(202.5 * e, 233.5 * e), round_rect(a, -96.5 * e, -20.5 * e, 193 * e, 41 * e, 0 * e), a.restore(), fill_path(a, t[3], t[1], 12 * e), a.save(), a.translate(202.5 * e, 275 * e), round_rect(a, 96.5 * e, -21 * e, -193 * e, 42 * e, 0 * e), a.restore(), fill_path(a, t[0], t[1], 12 * e), a.save(), a.translate(201 * e, 212 * e), a.rotate(8.64), round_rect(a, -116 * e, -22 * e, 232 * e, 44 * e, 10 * e), a.restore(), fill_path(a, t[3], t[1], 12 * e), a.save(), a.translate(203.5 * e, 121.5 * e), round_rect(a, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e), a.restore(), fill_path(a, t[3], t[1], 12 * e), a.save(), a.translate(203.5 * e, 299 * e), round_rect(a, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e), a.restore(), fill_path(a, t[3], t[1], 12 * e), a.save(), a.translate(298.5 * e, 210 * e), round_rect(a, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), a.restore(), fill_path(a, t[3], t[1], 12 * e), a.save(), a.translate(108.5 * e, 210 * e), round_rect(a, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), a.restore(), fill_path(a, t[3], t[1], 12 * e), a.save(), a.translate(204 * e, 121.5 * e), round_rect(a, -92 * e, -9.5 * e, 184 * e, 19 * e, 10 * e), a.restore(), fill_path(a, t[3], t[3], 10 * e), a.save(), a.translate(197 * e, 299 * e), round_rect(a, 85 * e, -9 * e, -170 * e, 18 * e, 10 * e), a.restore(), fill_path(a, t[3], t[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(94 * e, 317 * e), a.bezierCurveTo(110.5 * e, 299.5 * e, 110.5 * e, 299.5 * e, 127 * e, 282 * e), a.closePath(), fill_path(a, void 0, t[1], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(279 * e, 142 * e), a.bezierCurveTo(296.5 * e, 125.5 * e, 296.5 * e, 125.5 * e, 314 * e, 109 * e), a.closePath(), fill_path(a, void 0, t[1], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(93 * e, 106 * e), a.bezierCurveTo(110.5 * e, 124 * e, 110.5 * e, 124 * e, 128 * e, 142 * e), a.closePath(), fill_path(a, void 0, t[1], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(281 * e, 282 * e), a.bezierCurveTo(296 * e, 297.5 * e, 296 * e, 297.5 * e, 311 * e, 313 * e), a.closePath(), fill_path(a, void 0, t[1], 12 * e), 0 == i ? (a.scale(2, 2), a.translate(-7 * e, 55 * e), a.rotate(-.5), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(60 * e, 47 * e), a.bezierCurveTo(81 * e, 46 * e, 85 * e, 47 * e, 83 * e, 63 * e), a.bezierCurveTo(83 * e, 72 * e, 83 * e, 75 * e, 72 * e, 73 * e), a.bezierCurveTo(68 * e, 80 * e, 69 * e, 82 * e, 66 * e, 73 * e), a.bezierCurveTo(62 * e, 81 * e, 61 * e, 82 * e, 59 * e, 73 * e), a.bezierCurveTo(54 * e, 81 * e, 55 * e, 81 * e, 52 * e, 74 * e), a.bezierCurveTo(38 * e, 76 * e, 41 * e, 74 * e, 40 * e, 66 * e), a.bezierCurveTo(38 * e, 45 * e, 39 * e, 49 * e, 59 * e, 47 * e), a.closePath(), fill_path(a, t[4], t[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(68 * e, 54 * e), a.bezierCurveTo(75 * e, 54 * e, 77 * e, 62 * e, 71 * e, 64 * e), a.bezierCurveTo(62 * e, 65 * e, 63 * e, 54 * e, 68 * e, 54 * e), a.closePath(), fill_path(a, t[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(50 * e, 55 * e), a.bezierCurveTo(57 * e, 55 * e, 58 * e, 65 * e, 52 * e, 65 * e), a.bezierCurveTo(44 * e, 66 * e, 44 * e, 54 * e, 50 * e, 55 * e), a.closePath(), fill_path(a, t[3])) : 1 == i && (a.scale(.6, .6), a.translate(185 * e, 165 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(108 * e, 56 * e), a.bezierCurveTo(136 * e, 58 * e, 203 * e, 69 * e, 234 * e, 75 * e), a.bezierCurveTo(246 * e, 77 * e, 247 * e, 78 * e, 245 * e, 90 * e), a.bezierCurveTo(238 * e, 143 * e, 228 * e, 197 * e, 214 * e, 259 * e), a.bezierCurveTo(212 * e, 267 * e, 209 * e, 270 * e, 189 * e, 268 * e), a.bezierCurveTo(142 * e, 264 * e, 106 * e, 260 * e, 75 * e, 253 * e), a.bezierCurveTo(60 * e, 250 * e, 64 * e, 250 * e, 66 * e, 221 * e), a.bezierCurveTo(71 * e, 168 * e, 87 * e, 95 * e, 98 * e, 67 * e), a.bezierCurveTo(101 * e, 57 * e, 103 * e, 56 * e, 106 * e, 56 * e), a.closePath(), fill_path(a, t[4], t[4], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(112 * e, 72 * e), a.bezierCurveTo(132 * e, 73 * e, 227 * e, 85 * e, 226 * e, 91 * e), a.bezierCurveTo(231 * e, 89 * e, 217 * e, 196 * e, 200 * e, 250 * e), a.bezierCurveTo(196 * e, 254 * e, 175 * e, 249 * e, 166 * e, 249 * e), a.bezierCurveTo(91 * e, 241 * e, 82 * e, 236 * e, 83 * e, 232 * e), a.bezierCurveTo(90 * e, 144 * e, 108 * e, 71 * e, 111 * e, 72 * e), a.closePath(), fill_path(a, void 0, t[0], 13 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(132 * e, 117 * e), a.bezierCurveTo(171 * e, 86 * e, 191 * e, 101 * e, 188 * e, 134 * e), a.bezierCurveTo(185 * e, 154 * e, 170 * e, 158 * e, 153 * e, 158 * e), a.bezierCurveTo(143 * e, 172 * e, 146 * e, 180 * e, 147 * e, 193 * e), fill_path(a, void 0, t[0], 20 * e), circle(a, 142 * e, 221 * e, 16.1245154965971 * e), fill_path(a, t[0])), r
}

function create_hurt_dead_box(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 400 * e, i.height = 400 * e, r.save(), r.translate(202.5 * e, 147.5 * e), round_rect(r, -96.5 * e, -21.5 * e, 193 * e, 43 * e, 0 * e), r.restore(), fill_path(r, t[0], t[0], 12 * e), r.save(), r.translate(202.5 * e, 190.5 * e), round_rect(r, 96.5 * e, -21.5 * e, -193 * e, 43 * e, 0 * e), r.restore(), fill_path(r, t[0], t[0], 12 * e), r.save(), r.translate(202.5 * e, 233.5 * e), round_rect(r, -96.5 * e, -20.5 * e, 193 * e, 41 * e, 0 * e), r.restore(), fill_path(r, t[0], t[0], 12 * e), r.save(), r.translate(202.5 * e, 275 * e), round_rect(r, 96.5 * e, -21 * e, -193 * e, 42 * e, 0 * e), r.restore(), fill_path(r, t[0], t[0], 12 * e), r.save(), r.translate(203.5 * e, 121.5 * e), round_rect(r, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e), r.restore(), fill_path(r, t[0], t[0], 12 * e), r.save(), r.translate(203.5 * e, 299 * e), round_rect(r, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e), r.restore(), fill_path(r, t[0], t[0], 12 * e), r.save(), r.translate(298.5 * e, 210 * e), round_rect(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), r.restore(), fill_path(r, t[0], t[0], 12 * e), r.save(), r.translate(108.5 * e, 210 * e), round_rect(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), r.restore(), fill_path(r, t[0], t[0], 12 * e), i
}

function create_dead_box_ui(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 650 * e, i.height = 650 * e, r.scale(1.9, 1.9), r.save(), r.translate(202.5 * e, 147.5 * e), round_rect(r, -96.5 * e, -21.5 * e, 193 * e, 193 * e, 0 * e), r.restore(), fill_path(r, t[4], t[1], 12 * e), r.save(), r.translate(203.5 * e, 121.5 * e), round_rect(r, -115.5 * e, -20.5 * e, 231 * e, 41 * e, 10 * e), r.restore(), fill_path(r, t[3], t[1], 12 * e), r.save(), r.translate(203.5 * e, 299 * e), round_rect(r, -115.5 * e, -20 * e, 231 * e, 40 * e, 10 * e), r.restore(), fill_path(r, t[3], t[1], 12 * e), r.save(), r.translate(298.5 * e, 210 * e), round_rect(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), r.restore(), fill_path(r, t[3], t[1], 12 * e), r.save(), r.translate(108.5 * e, 210 * e), round_rect(r, -20.5 * e, -109 * e, 41 * e, 218 * e, 10 * e), r.restore(), fill_path(r, t[3], t[1], 12 * e), r.save(), r.translate(204 * e, 121.5 * e), round_rect(r, -92 * e, -9.5 * e, 184 * e, 19 * e, 10 * e), r.restore(), fill_path(r, t[3], t[3], 10 * e), r.save(), r.translate(197 * e, 299 * e), round_rect(r, 85 * e, -9 * e, -170 * e, 18 * e, 10 * e), r.restore(), fill_path(r, t[3], t[3], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(94 * e, 317 * e), r.bezierCurveTo(110.5 * e, 299.5 * e, 110.5 * e, 299.5 * e, 127 * e, 282 * e), r.closePath(), fill_path(r, void 0, t[1], 12 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(279 * e, 142 * e), r.bezierCurveTo(296.5 * e, 125.5 * e, 296.5 * e, 125.5 * e, 314 * e, 109 * e), r.closePath(), fill_path(r, void 0, t[1], 12 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(93 * e, 106 * e), r.bezierCurveTo(110.5 * e, 124 * e, 110.5 * e, 124 * e, 128 * e, 142 * e), r.closePath(), fill_path(r, void 0, t[1], 12 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(281 * e, 282 * e), r.bezierCurveTo(296 * e, 297.5 * e, 296 * e, 297.5 * e, 311 * e, 313 * e), r.closePath(), fill_path(r, void 0, t[1], 12 * e), i
}

function create_SANDWICH(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 400 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(101 * e, 255 * e), a.bezierCurveTo(113 * e, 243 * e, 179 * e, 210 * e, 219 * e, 196 * e), a.bezierCurveTo(252 * e, 203 * e, 288 * e, 215 * e, 318 * e, 233 * e), a.bezierCurveTo(304 * e, 254 * e, 258 * e, 273 * e, 215 * e, 296 * e), a.bezierCurveTo(161 * e, 287 * e, 119 * e, 270 * e, 102 * e, 257 * e), a.closePath(), fill_path(a, i[0], i[1], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(99 * e, 258 * e), a.bezierCurveTo(99 * e, 272.5 * e, 99 * e, 272.5 * e, 99 * e, 287 * e), a.bezierCurveTo(166 * e, 319 * e, 193 * e, 320 * e, 212 * e, 324 * e), a.bezierCurveTo(292 * e, 286 * e, 312 * e, 271 * e, 319 * e, 263 * e), a.bezierCurveTo(320 * e, 249 * e, 320 * e, 241 * e, 318 * e, 234 * e), a.bezierCurveTo(300 * e, 254 * e, 254 * e, 277 * e, 216 * e, 294 * e), a.bezierCurveTo(190 * e, 296 * e, 135 * e, 276 * e, 102 * e, 258 * e), a.closePath(), fill_path(a, i[2], i[1], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(212 * e, 323 * e), a.bezierCurveTo(211.5 * e, 310.5 * e, 211.5 * e, 310.5 * e, 211 * e, 298 * e), a.closePath(), fill_path(a, void 0, i[1], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(212 * e, 210 * e), a.bezierCurveTo(286 * e, 210 * e, 331 * e, 254 * e, 212 * e, 276 * e), a.bezierCurveTo(108 * e, 276 * e, 112 * e, 222 * e, 213 * e, 208 * e), a.closePath(), fill_path(a, i[3], i[4], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(98 * e, 200 * e), a.bezierCurveTo(126 * e, 216 * e, 177 * e, 232 * e, 213 * e, 237 * e), a.bezierCurveTo(266 * e, 218 * e, 288 * e, 209 * e, 318 * e, 190 * e), a.bezierCurveTo(269 * e, 164 * e, 239 * e, 158 * e, 214 * e, 153 * e), a.bezierCurveTo(148 * e, 172 * e, 131 * e, 182 * e, 98 * e, 200 * e), a.closePath(), fill_path(a, i[0], i[1], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(97 * e, 204 * e), a.bezierCurveTo(97 * e, 215.5 * e, 97 * e, 215.5 * e, 97 * e, 227 * e), a.bezierCurveTo(148 * e, 250 * e, 179 * e, 256 * e, 212 * e, 262 * e), a.bezierCurveTo(268 * e, 244 * e, 281 * e, 233 * e, 318 * e, 214 * e), a.bezierCurveTo(318 * e, 203 * e, 318 * e, 203 * e, 318 * e, 192 * e), a.bezierCurveTo(250 * e, 225 * e, 236 * e, 231 * e, 214 * e, 239 * e), a.bezierCurveTo(158 * e, 228 * e, 126 * e, 215 * e, 99 * e, 201 * e), a.closePath(), fill_path(a, i[2], i[1], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(212 * e, 260 * e), a.bezierCurveTo(212 * e, 251.5 * e, 212 * e, 251.5 * e, 212 * e, 243 * e), a.closePath(), fill_path(a, void 0, i[1], 14 * e), circle(a, 161 * e, 201 * e, 13 * e), fill_path(a, i[5]), circle(a, 216 * e, 205 * e, 8.06225774829855 * e), fill_path(a, i[5]), circle(a, 216 * e, 175 * e, 6.708203932499369 * e), fill_path(a, i[5]), circle(a, 271 * e, 191 * e, 5.0990195135927845 * e), fill_path(a, i[5]), circle(a, 206 * e, 180 * e, 11.180339887498949 * e), fill_path(a, i[5]), r
}

function create_scales(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 400 * e, a.save(), a.translate(85 * e, 237 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 54.585977194239184 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(178 * e, 238 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 52.53573932334064 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(270 * e, 239 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 53.58058329516393 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(222 * e, 312 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 52.53573932334064 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(317 * e, 159 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 57.63465889766331 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(223.5 * e, 139.0625 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 51.66236541235796 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(132.5 * e, 137.0625 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 52.009614495783374 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(178.5 * e, 58.0625 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 53.16013544000805 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(177.5 * e, 216.0625 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 50 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(84.5 * e, 215.0625 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 54 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(319.5 * e, 138.0625 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 55.08175741568164 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(269.5 * e, 216.0625 * e), a.rotate(1.5707963267948966), round_regular_polygon(a, 6, 54.589376255824725 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.save(), a.translate(221.5 * e, 293.0625 * e), a.rotate(.5235987755982988), round_regular_polygon(a, 6, 49.49747468305833 * e, 1 * e), a.restore(), fill_path(a, i[1], i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(221.5 * e, 342.0625 * e), a.bezierCurveTo(221.5 * e, 350.5625 * e, 221.5 * e, 350.5625 * e, 221.5 * e, 359.0625 * e), a.closePath(), fill_path(a, void 0, i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(84.5 * e, 270.0625 * e), a.bezierCurveTo(84.5 * e, 277.0625 * e, 84.5 * e, 277.0625 * e, 84.5 * e, 284.0625 * e), a.closePath(), fill_path(a, void 0, i[2], 12 * e), a.save(), a.translate(84.5 * e, 215.0625 * e), a.rotate(.5235987755982988), round_regular_polygon(a, 6, 30 * e, 15 * e), a.restore(), fill_path(a, i[3]), a.save(), a.translate(177.5 * e, 215.0625 * e), a.rotate(.5235987755982988), round_regular_polygon(a, 6, 30 * e, 15 * e), a.restore(), fill_path(a, i[3]), a.save(), a.translate(222.5 * e, 294.0625 * e), a.rotate(.5235987755982988), round_regular_polygon(a, 6, 30 * e, 15 * e), a.restore(), fill_path(a, i[3]), a.save(), a.translate(270.5 * e, 216.0625 * e), a.rotate(.5235987755982988), round_regular_polygon(a, 6, 30 * e, 15 * e), a.restore(), fill_path(a, i[3]), a.save(), a.translate(320.5 * e, 134.0625 * e), a.rotate(.5235987755982988), round_regular_polygon(a, 6, 30 * e, 15 * e), a.restore(), fill_path(a, i[3]), a.save(), a.translate(224.5 * e, 138.0625 * e), a.rotate(.5235987755982988), round_regular_polygon(a, 6, 30 * e, 15 * e), a.restore(), fill_path(a, i[3]), a.save(), a.translate(133.5 * e, 137.0625 * e), a.rotate(.5235987755982988), round_regular_polygon(a, 6, 30 * e, 15 * e), a.restore(), fill_path(a, i[3]), a.save(), a.translate(178.5 * e, 56.0625 * e), a.rotate(.5235987755982988), round_regular_polygon(a, 6, 30 * e, 15 * e), a.restore(), fill_path(a, i[3]), r
}

function create_wheat(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 52 * e, r.height = 65 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(9.833328247070312 * e, 12.078125 * e), a.bezierCurveTo(15.333328247070312 * e, 28.078125 * e, 15.333328247070312 * e, 28.078125 * e, 20.833328247070312 * e, 44.078125 * e), a.closePath(), fill_path(a, void 0, i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(7.8333282470703125 * e, 20.078125 * e), a.bezierCurveTo(16.833328247070312 * e, 32.578125 * e, 16.833328247070312 * e, 32.578125 * e, 25.833328247070312 * e, 45.078125 * e), a.closePath(), fill_path(a, void 0, i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(23.833328247070312 * e, 26.078125 * e), a.bezierCurveTo(25.833328247070312 * e, 11.078125 * e, 16.833328247070312 * e, 8.078125 * e, 14.833328247070312 * e, 7.078125 * e), a.bezierCurveTo(11.833328247070312 * e, 17.078125 * e, 13.833328247070312 * e, 22.078125 * e, 23.833328247070312 * e, 27.078125 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35.83332824707031 * e, 8.078125 * e), a.bezierCurveTo(34.83332824707031 * e, 27.078125 * e, 28.833328247070312 * e, 27.078125 * e, 23.833328247070312 * e, 28.078125 * e), a.bezierCurveTo(21.833328247070312 * e, 14.078125 * e, 26.833328247070312 * e, 11.078125 * e, 35.83332824707031 * e, 8.078125 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(25.833328247070312 * e, 39.078125 * e), a.bezierCurveTo(20.833328247070312 * e, 29.078125 * e, 14.833328247070312 * e, 27.078125 * e, 5.8333282470703125 * e, 29.078125 * e), a.bezierCurveTo(9.833328247070312 * e, 39.078125 * e, 16.833328247070312 * e, 42.078125 * e, 25.833328247070312 * e, 40.078125 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42.83332824707031 * e, 23.078125 * e), a.bezierCurveTo(35.83332824707031 * e, 35.078125 * e, 31.833328247070312 * e, 37.078125 * e, 25.833328247070312 * e, 36.078125 * e), a.bezierCurveTo(25.833328247070312 * e, 24.078125 * e, 33.83332824707031 * e, 21.078125 * e, 42.83332824707031 * e, 23.078125 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(23.833328247070312 * e, 24.078125 * e), a.bezierCurveTo(20.833328247070312 * e, 34.078125 * e, 23.833328247070312 * e, 40.078125 * e, 27.833328247070312 * e, 43.078125 * e), a.bezierCurveTo(37.33332824707031 * e, 28.078125 * e, 37.33332824707031 * e, 28.078125 * e, 46.83332824707031 * e, 13.078125 * e), fill_path(a, void 0, i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(38.83332824707031 * e, 14.078125 * e), a.bezierCurveTo(34.83332824707031 * e, 24.078125 * e, 34.83332824707031 * e, 24.078125 * e, 30.833328247070312 * e, 34.078125 * e), fill_path(a, void 0, i[1], 2 * e), r
}

function create_windmill(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 170 * e, r.height = 173 * e, a.translate(5 * e, 5 * e), a.globalAlpha = t ? .5 : 1, a.save(), a.translate(86.25 * e, 84.953125 * e), a.rotate(.32), round_regular_polygon(a, 7, 42.15447781671598 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(86.25 * e, 84.953125 * e), a.rotate(.32), round_regular_polygon(a, 7, 42.15447781671598 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 4 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(86.25 * e, 84.953125 * e), a.rotate(.28), round_regular_polygon(a, 7, 30.463092423455635 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(86.25 * e, 84.953125 * e), a.rotate(.28), round_regular_polygon(a, 7, 30.463092423455635 * e, 10 * e), a.restore(), fill_path(a, i[3], i[4], 4 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), circle(a, 86.25 * e, 84.953125 * e, 18.867962264113206 * e), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), circle(a, 86.25 * e, 84.953125 * e, 18.867962264113206 * e), fill_path(a, i[5], i[6], 4 * e), r
}

function create_windmill_wing(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 170 * e, r.height = 173 * e, a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(85.25 * e, 82.953125 * e), a.bezierCurveTo(98.25 * e, 46.453125 * e, 98.25 * e, 46.453125 * e, 111.25 * e, 9.953125 * e), a.closePath(), fill_path(a, void 0, i[0], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(111.25 * e, 8.953125 * e), a.bezierCurveTo(117.75 * e, 12.453125 * e, 117.75 * e, 12.453125 * e, 124.25 * e, 15.953125 * e), a.bezierCurveTo(113.75 * e, 39.953125 * e, 113.75 * e, 39.953125 * e, 103.25 * e, 63.953125 * e), a.bezierCurveTo(97.75 * e, 64.953125 * e, 97.75 * e, 64.953125 * e, 92.25 * e, 65.953125 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(111.25 * e, 8.953125 * e), a.bezierCurveTo(117.75 * e, 12.453125 * e, 117.75 * e, 12.453125 * e, 124.25 * e, 15.953125 * e), a.bezierCurveTo(113.75 * e, 39.953125 * e, 113.75 * e, 39.953125 * e, 103.25 * e, 63.953125 * e), a.bezierCurveTo(97.75 * e, 64.953125 * e, 97.75 * e, 64.953125 * e, 92.25 * e, 65.953125 * e), a.closePath(), fill_path(a, i[7]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(85.25 * e, 82.953125 * e), a.bezierCurveTo(98.25 * e, 46.453125 * e, 98.25 * e, 46.453125 * e, 111.25 * e, 9.953125 * e), a.closePath(), fill_path(a, void 0, i[6], 4 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87.25 * e, 84.953125 * e), a.bezierCurveTo(123.75 * e, 100.453125 * e, 123.75 * e, 100.453125 * e, 160.25 * e, 115.953125 * e), a.closePath(), fill_path(a, void 0, i[0], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(160.25 * e, 114.953125 * e), a.bezierCurveTo(156.25 * e, 122.453125 * e, 156.25 * e, 122.453125 * e, 152.25 * e, 129.953125 * e), a.bezierCurveTo(130.25 * e, 117.953125 * e, 130.25 * e, 117.953125 * e, 108.25 * e, 105.953125 * e), a.bezierCurveTo(107.25 * e, 98.953125 * e, 107.25 * e, 98.953125 * e, 106.25 * e, 91.953125 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(160.25 * e, 114.953125 * e), a.bezierCurveTo(156.25 * e, 122.453125 * e, 156.25 * e, 122.453125 * e, 152.25 * e, 129.953125 * e), a.bezierCurveTo(130.25 * e, 117.953125 * e, 130.25 * e, 117.953125 * e, 108.25 * e, 105.953125 * e), a.bezierCurveTo(107.25 * e, 98.953125 * e, 107.25 * e, 98.953125 * e, 106.25 * e, 91.953125 * e), a.closePath(), fill_path(a, i[7]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87.25 * e, 84.953125 * e), a.bezierCurveTo(123.75 * e, 100.453125 * e, 123.75 * e, 100.453125 * e, 160.25 * e, 115.953125 * e), a.closePath(), fill_path(a, void 0, i[6], 4 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(83.25 * e, 83.953125 * e), a.bezierCurveTo(47.75 * e, 68.453125 * e, 47.75 * e, 68.453125 * e, 12.25 * e, 52.953125 * e), a.closePath(), fill_path(a, void 0, i[0], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(13.25 * e, 53.953125 * e), a.bezierCurveTo(17.25 * e, 46.953125 * e, 17.25 * e, 46.953125 * e, 21.25 * e, 39.953125 * e), a.bezierCurveTo(42.75 * e, 52.453125 * e, 42.75 * e, 52.453125 * e, 64.25 * e, 64.953125 * e), a.bezierCurveTo(64.25 * e, 70.953125 * e, 64.25 * e, 70.953125 * e, 64.25 * e, 76.953125 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(13.25 * e, 53.953125 * e), a.bezierCurveTo(17.25 * e, 46.953125 * e, 17.25 * e, 46.953125 * e, 21.25 * e, 39.953125 * e), a.bezierCurveTo(42.75 * e, 52.453125 * e, 42.75 * e, 52.453125 * e, 64.25 * e, 64.953125 * e), a.bezierCurveTo(64.25 * e, 70.953125 * e, 64.25 * e, 70.953125 * e, 64.25 * e, 76.953125 * e), a.closePath(), fill_path(a, i[7]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(83.25 * e, 83.953125 * e), a.bezierCurveTo(47.75 * e, 68.453125 * e, 47.75 * e, 68.453125 * e, 12.25 * e, 52.953125 * e), a.closePath(), fill_path(a, void 0, i[6], 4 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(84.25 * e, 86.953125 * e), a.bezierCurveTo(70.25 * e, 123.953125 * e, 70.25 * e, 123.953125 * e, 56.25 * e, 160.953125 * e), a.closePath(), fill_path(a, void 0, i[0], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56.25 * e, 159.953125 * e), a.bezierCurveTo(49.25 * e, 155.453125 * e, 49.25 * e, 155.453125 * e, 42.25 * e, 150.953125 * e), a.bezierCurveTo(54.25 * e, 127.953125 * e, 54.25 * e, 127.953125 * e, 66.25 * e, 104.953125 * e), a.bezierCurveTo(71.25 * e, 104.953125 * e, 71.25 * e, 104.953125 * e, 76.25 * e, 104.953125 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56.25 * e, 159.953125 * e), a.bezierCurveTo(49.25 * e, 155.453125 * e, 49.25 * e, 155.453125 * e, 42.25 * e, 150.953125 * e), a.bezierCurveTo(54.25 * e, 127.953125 * e, 54.25 * e, 127.953125 * e, 66.25 * e, 104.953125 * e), a.bezierCurveTo(71.25 * e, 104.953125 * e, 71.25 * e, 104.953125 * e, 76.25 * e, 104.953125 * e), a.closePath(), fill_path(a, i[7]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(84.25 * e, 86.953125 * e), a.bezierCurveTo(70.25 * e, 123.953125 * e, 70.25 * e, 123.953125 * e, 56.25 * e, 160.953125 * e), a.closePath(), fill_path(a, void 0, i[6], 4 * e), r
}

function create_windmill_head(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 170 * e, r.height = 173 * e, a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(86.25 * e, 84.953125 * e), round_regular_polygon(a, 7, 9.848857801796104 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(86.25 * e, 84.953125 * e), round_regular_polygon(a, 7, 9.848857801796104 * e, 5 * e), a.restore(), fill_path(a, i[8], i[9], 4 * e), r
}

function create_cord(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 75 * e,
        o = 55 * e;
    return r.width = n, r.height = o, a.translate(-30 * e, -40 * e), a.globalAlpha = 1, a.beginPath(), a.bezierCurveTo(67 * e, 56 * e, 72 * e, 71 * e, 72 * e, 71 * e), a.bezierCurveTo(72 * e, 71 * e, 84 * e, 70 * e, 75 * e, 82 * e), a.bezierCurveTo(70 * e, 88 * e, 61 * e, 89 * e, 58 * e, 89 * e), a.bezierCurveTo(55 * e, 89 * e, 40 * e, 89 * e, 46 * e, 77 * e), a.bezierCurveTo(46 * e, 77 * e, 43 * e, 63 * e, 43 * e, 63 * e), a.bezierCurveTo(35 * e, 61 * e, 35 * e, 53 * e, 42 * e, 47 * e), a.bezierCurveTo(48 * e, 42 * e, 62 * e, 41 * e, 66 * e, 43 * e), a.bezierCurveTo(70 * e, 45 * e, 72 * e, 48 * e, 67 * e, 56 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.bezierCurveTo(68 * e, 61 * e, 72 * e, 76 * e, 72 * e, 76 * e), a.bezierCurveTo(65 * e, 85 * e, 61 * e, 85 * e, 49 * e, 83 * e), a.bezierCurveTo(49 * e, 83 * e, 44 * e, 63 * e, 44 * e, 63 * e), a.bezierCurveTo(54 * e, 63 * e, 60 * e, 63 * e, 67 * e, 55 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.moveTo(69 * e, 65 * e), a.bezierCurveTo(70 * e, 61 * e, 81 * e, 66 * e, 86 * e, 66 * e), a.bezierCurveTo(90 * e, 66 * e, 97 * e, 63 * e, 97 * e, 56 * e), a.bezierCurveTo(97 * e, 50 * e, 93 * e, 47 * e, 88 * e, 44 * e), fill_path(a, !1, i[1], 2), a.beginPath(), a.moveTo(50 * e, 48 * e), a.bezierCurveTo(43 * e, 52 * e, 50 * e, 54 * e, 51 * e, 54 * e), a.bezierCurveTo(54 * e, 54 * e, 59 * e, 52 * e, 59 * e, 49 * e), a.bezierCurveTo(59 * e, 48 * e, 55 * e, 46 * e, 50 * e, 48 * e), fill_path(a, i[2]), r
}

function create_bandage(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 195 * e,
        o = 190 * e,
        s = n / 2,
        _ = o / 2;
    r.width = n, r.height = o;
    var T = 10 * e,
        E = 35 * e,
        I = 150 * e,
        l = E / 2,
        u = I / 2,
        d = 4 * e;
    return a.translate(s - 5 * e, _ - 5 * e), a.rotate(-Math.PI / 1.25), a.globalAlpha = 1, round_rect(a, -l, -u, E, I, T), fill_path(a, i[0], i[1], d), a.translate(0, 0), a.rotate(Math.PI / 3), a.globalAlpha = 1, round_rect(a, -l, -u, E, I, T), fill_path(a, i[0], i[1], d), a.translate(0, 5), round_rect(a, -l / 2, -u / 2, E / 2, I / 3, T - 2), fill_path(a, i[1]), r
}

function create_craft_button(e, t, i, r, a) {
    var n = document.createElement("canvas"),
        o = n.getContext("2d"),
        s = 70 * e,
        _ = 70 * e,
        T = 10 * e,
        E = 5 * e;
    n.width = s, n.height = _ + E;
    for (var I = 0; I < t.length; I++) {
        var l = t[I];
        o.globalAlpha = l.a;
        var u = l.f(i, !1, l.c);
        o.save(), o.translate(s / 2 + l.x * e, _ / 2 + l.y * e), o.rotate(l.r), o.drawImage(u, -u.width / 2, -u.height / 2), o.restore()
    }
    var d = [];
    for (I = 0; I < r.length; I++) {
        var c = document.createElement("canvas"),
            R = c.getContext("2d");
        c.width = s, c.height = _ + E, R.globalAlpha = a / 2, 2 == I ? round_rect(R, 0, E, s, _, T) : round_rect(R, 0, 0, s, _ + E, T), fill_path(R, "#081a19"), R.globalAlpha = a, round_rect(R, 0, 2 == I ? E : 0, s, _, T), fill_path(R, r[I]), R.globalAlpha = 1, 2 == I ? R.drawImage(n, 0, E) : R.drawImage(n, 0, 0), d.push(CTI(c))
    }
    return d
}

function create_bread_oven_ui(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 149 * e, i.height = 356 * e, r.save(), r.translate(74.5 * e, 177.5 * e), round_rect(r, -57.5 * e, -161.5 * e, 100 * e, 323 * e, 10 * e), r.restore(), fill_path(r, t[0], t[1], 4 * e), r.save(), r.translate(74.5 * e, 177.5 * e), round_rect(r, -57.5 * e, 50.5 * e, 100 * e, 105 * e, 10 * e), r.restore(), fill_path(r, t[6], t[1], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 125 * e), r.bezierCurveTo(74.5 * e, 125 * e, 118 * e, 125 * e, 118 * e, 125 * e), r.closePath(), fill_path(r, t[2], t[2], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 120 * e), r.bezierCurveTo(74.5 * e, 120 * e, 74.5 * e, 120 * e, 118 * e, 120 * e), r.closePath(), fill_path(r, t[3], t[3], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 228 * e), r.bezierCurveTo(75 * e, 228.5 * e, 118 * e, 228.5 * e, 118 * e, 229 * e), r.closePath(), fill_path(r, t[2], t[2], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 224 * e), r.bezierCurveTo(75 * e, 224 * e, 118 * e, 224 * e, 118 * e, 224 * e), r.closePath(), fill_path(r, t[3], t[3], 10 * e), r.save(), r.translate(72 * e, 68.5 * e), round_rect(r, -41.5 * e, -36.5 * e, 73 * e, 73 * e, 13 * e), r.restore(), fill_path(r, t[4]), r.save(), r.translate(72 * e, 175.5 * e), round_rect(r, -41.5 * e, -38.5 * e, 73 * e, 73 * e, 13 * e), r.restore(), fill_path(r, t[4]), r.save(), r.translate(72 * e, 279.5 * e), round_rect(r, -41.5 * e, -40.5 * e, 73 * e, 73 * e, 13 * e), r.restore(), fill_path(r, t[4]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 338 * e), r.bezierCurveTo(75 * e, 338 * e, 118 * e, 338 * e, 118 * e, 338 * e), r.closePath(), fill_path(r, t[2], t[2], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(16 * e, 333 * e), r.bezierCurveTo(75 * e, 333 * e, 118 * e, 333 * e, 118 * e, 333 * e), r.closePath(), fill_path(r, t[3], t[3], 10 * e), i
}

function create_big_fire_wood(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 193 * e,
        o = 198 * e,
        s = 140 * e,
        _ = 90 * e;
    r.width = n, r.height = o;
    var T = 10 * e,
        E = 25 * e,
        I = 180 * e,
        l = E / 2,
        u = I / 2,
        d = 4 * e;
    return a.translate(-25 * e, 1 * e), a.translate(s, _), a.rotate(-Math.PI / 5), round_rect(a, -l, -u, E, I, T), fill_path(a, i[0], i[1], d), a.translate(-30 * e, -25 * e), a.rotate(Math.PI / 3), round_rect(a, -l, -u, E, I, T), fill_path(a, i[0], i[1], d), a.translate(35 * e, 30 * e), a.rotate(Math.PI / 3), round_rect(a, -l, -u, E, I, T), fill_path(a, i[0], i[1], d), r
}

function create_fire(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 145 * e,
        o = 145 * e,
        s = n / 2,
        _ = o / 2;
    r.width = n, r.height = o;
    var T = 70 * e;
    a.translate(s, _), a.globalAlpha = .4, circle(a, 0, 0, T), fill_path(a, i[0]);
    T = 50 * e;
    a.translate(0, 0), a.globalAlpha = .8, circle(a, 0, 0, T), fill_path(a, i[0]);
    T = 35 * e;
    a.translate(0, 0), a.globalAlpha = .8, circle(a, 0, 0, T), fill_path(a, i[1]);
    T = 20 * e;
    return a.translate(0, 0), a.globalAlpha = .8, circle(a, 0, 0, T), fill_path(a, i[2]), r
}

function create_wood_fire(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 135 * e,
        o = 190 * e,
        s = n / 2,
        _ = o / 2;
    r.width = n, r.height = o;
    var T = 10 * e,
        E = 25 * e,
        I = 180 * e,
        l = E / 2,
        u = I / 2,
        d = 4 * e;
    return a.translate(s, _), a.rotate(-Math.PI / 5), a.globalAlpha = 1, round_rect(a, -l, -u, E, I, T), fill_path(a, i[0], i[1], d), a.translate(0, 0), a.rotate(Math.PI / 5), a.globalAlpha = 1, round_rect(a, -l, -u, E, I, T), fill_path(a, i[0], i[1], d), r
}

function create_ground_fire(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 205 * e,
        o = 205 * e,
        s = n / 2,
        _ = o / 2;
    r.width = n, r.height = o;
    var T = 100 * e;
    return a.translate(s, _), a.globalAlpha = 1, circle(a, 0, 0, T), fill_path(a, i[0]), r
}

function create_halo_fire(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 370 * e,
        o = 370 * e,
        s = n / 2,
        _ = o / 2;
    r.width = n, r.height = o;
    var T = 180 * e;
    return a.globalAlpha = .2, circle(a, s, _, T), fill_path(a, i[0]), r
}

function create_elf_hat(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 155 * e, r.height = 127 * e, a.globalAlpha = .5, a.translate(0, 8 * e), a.translate(-7 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 68 * e), a.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e), a.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e), a.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e), a.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e), a.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -8 * e), a.translate(7 * e, 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(24 * e, 28 * e), a.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e), a.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e), a.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e), a.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e), a.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e), a.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 41 * e), a.bezierCurveTo(49 * e, 31 * e, 53 * e, 29 * e, 62 * e, 27 * e), a.bezierCurveTo(59 * e, 24 * e, 56 * e, 25 * e, 53 * e, 24 * e), a.bezierCurveTo(67 * e, 15 * e, 84 * e, 12 * e, 120 * e, 16 * e), a.bezierCurveTo(107 * e, 11 * e, 96 * e, 6 * e, 85 * e, 2 * e), a.bezierCurveTo(59 * e, 3 * e, 54 * e, 7 * e, 40 * e, 17 * e), a.bezierCurveTo(32.5 * e, 22.5 * e, 32.5 * e, 22.5 * e, 25 * e, 28 * e), a.bezierCurveTo(32 * e, 30 * e, 32 * e, 30 * e, 39 * e, 32 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(24 * e, 28 * e), a.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e), a.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e), a.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e), a.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e), a.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e), a.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e), a.closePath(), fill_path(a, void 0, i[2], 4 * e), circle(a, 18 * e, 38 * e, 14.866068747318506 * e), fill_path(a, i[4], i[5], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39 * e, 30 * e), a.bezierCurveTo(27 * e, 38 * e, 25 * e, 50 * e, 26 * e, 60 * e), a.bezierCurveTo(36.5 * e, 58.5 * e, 36.5 * e, 58.5 * e, 47 * e, 57 * e), fill_path(a, i[1], i[2], 4 * e), a.translate(-7 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(27 * e, 74 * e), a.bezierCurveTo(38 * e, 77.5 * e, 38 * e, 77.5 * e, 49 * e, 81 * e), a.bezierCurveTo(54.5 * e, 75.5 * e, 54.5 * e, 75.5 * e, 60 * e, 70 * e), a.bezierCurveTo(64 * e, 72 * e, 64 * e, 72 * e, 68 * e, 74 * e), a.bezierCurveTo(80.5 * e, 67.5 * e, 80.5 * e, 67.5 * e, 93 * e, 61 * e), a.bezierCurveTo(104.5 * e, 68 * e, 104.5 * e, 68 * e, 116 * e, 75 * e), a.bezierCurveTo(120.5 * e, 72.5 * e, 120.5 * e, 72.5 * e, 125 * e, 70 * e), a.bezierCurveTo(129 * e, 75 * e, 129 * e, 75 * e, 133 * e, 80 * e), a.bezierCurveTo(145.5 * e, 76.5 * e, 145.5 * e, 76.5 * e, 158 * e, 73 * e), a.bezierCurveTo(158 * e, 87 * e, 158 * e, 93 * e, 155 * e, 95 * e), a.bezierCurveTo(152.5 * e, 96 * e, 152.5 * e, 96 * e, 150 * e, 97 * e), a.bezierCurveTo(121 * e, 85 * e, 108 * e, 86 * e, 93 * e, 85 * e), a.bezierCurveTo(64 * e, 85 * e, 52 * e, 95 * e, 38 * e, 99 * e), a.bezierCurveTo(36 * e, 98.5 * e, 36 * e, 98.5 * e, 34 * e, 98 * e), a.bezierCurveTo(25 * e, 98 * e, 27 * e, 91 * e, 27 * e, 76 * e), a.closePath(), fill_path(a, i[6], i[7], 6 * e), r
}

function create_christmas_hat(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 155 * e, r.height = 127 * e, a.globalAlpha = .5, a.translate(0, 8 * e), a.translate(-7 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 68 * e), a.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e), a.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e), a.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e), a.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e), a.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -8 * e), a.translate(7 * e, 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(24 * e, 28 * e), a.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e), a.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e), a.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e), a.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e), a.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e), a.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 41 * e), a.bezierCurveTo(49 * e, 31 * e, 53 * e, 29 * e, 62 * e, 27 * e), a.bezierCurveTo(59 * e, 24 * e, 56 * e, 25 * e, 53 * e, 24 * e), a.bezierCurveTo(67 * e, 15 * e, 84 * e, 12 * e, 120 * e, 16 * e), a.bezierCurveTo(107 * e, 11 * e, 96 * e, 6 * e, 85 * e, 2 * e), a.bezierCurveTo(59 * e, 3 * e, 54 * e, 7 * e, 40 * e, 17 * e), a.bezierCurveTo(32.5 * e, 22.5 * e, 32.5 * e, 22.5 * e, 25 * e, 28 * e), a.bezierCurveTo(32 * e, 30 * e, 32 * e, 30 * e, 39 * e, 32 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(24 * e, 28 * e), a.bezierCurveTo(39 * e, 30 * e, 37 * e, 31 * e, 40 * e, 32 * e), a.bezierCurveTo(22 * e, 45 * e, 26 * e, 58 * e, 29 * e, 66 * e), a.bezierCurveTo(86.5 * e, 65 * e, 86.5 * e, 65 * e, 144 * e, 64 * e), a.bezierCurveTo(151 * e, 42 * e, 132 * e, 20 * e, 120 * e, 16 * e), a.bezierCurveTo(106 * e, 12 * e, 89 * e, 0 * e, 73 * e, 3 * e), a.bezierCurveTo(51 * e, 5 * e, 36 * e, 20 * e, 25 * e, 28 * e), a.closePath(), fill_path(a, void 0, i[2], 4 * e), circle(a, 18 * e, 38 * e, 14.866068747318506 * e), fill_path(a, i[4], i[5], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39 * e, 30 * e), a.bezierCurveTo(27 * e, 38 * e, 25 * e, 50 * e, 26 * e, 60 * e), a.bezierCurveTo(36.5 * e, 58.5 * e, 36.5 * e, 58.5 * e, 47 * e, 57 * e), fill_path(a, i[1], i[2], 4 * e), a.translate(-7 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 68 * e), a.bezierCurveTo(86 * e, 64 * e, 117 * e, 66 * e, 134 * e, 68 * e), a.bezierCurveTo(152 * e, 69 * e, 165 * e, 86 * e, 152 * e, 104 * e), a.bezierCurveTo(146 * e, 87 * e, 122 * e, 89 * e, 98 * e, 90 * e), a.bezierCurveTo(64 * e, 89 * e, 41 * e, 91 * e, 36 * e, 106 * e), a.bezierCurveTo(19 * e, 92 * e, 31 * e, 71 * e, 54 * e, 69 * e), a.closePath(), fill_path(a, i[4], i[5], 4 * e), r
}

function create_zombie_hand(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 220 * e,
        n = 220 * e,
        o = 32 * e,
        s = 4 * e;
    return i.width = a, i.height = n, r.translate(a / 2, n / 2 + 10 * e), r.globalAlpha = .5, circle(r, 0, 0, o), fill_path(r, t[0], t[0]), r.translate(0, -8 * e), r.globalAlpha = 1, circle(r, 0, 0, o), fill_path(r, t[1], t[2], s), i
}

function create_hand(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 40 * e,
        n = 40 * e,
        o = 16 * e,
        s = 4 * e;
    return i.width = a, i.height = n, r.translate(a / 2, n / 2), r.globalAlpha = 1, circle(r, 0, 0, o), fill_path(r, t[0], t[1], s), i
}

function create_hand_shadow(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 220 * e,
        n = 220 * e,
        o = 16 * e;
    return i.width = a, i.height = n, r.translate(a / 2, n / 2), r.globalAlpha = .5, circle(r, 0, 0, o), fill_path(r, t[0]), r.globalAlpha = 1, i
}

function create_apricot_tree(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d"),
        o = 210 * e,
        s = 205 * e,
        _ = 30 * e,
        T = 20 * e,
        E = 200 * e,
        I = 180 * e,
        l = E / 2,
        u = I / 2;
    return a.width = o, a.height = s, a.width = 419 * e, a.height = 412 * e, 1 == r ? (n.save(), n.translate(10 * e, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(117.99996948242188 * e, 216.40621948242188 * e), n.bezierCurveTo(86.99996948242188 * e, 221.40621948242188 * e, 74.99996948242188 * e, 217.40621948242188 * e, 60.999969482421875 * e, 205.40621948242188 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(114.99996948242188 * e, 227.40621948242188 * e), n.bezierCurveTo(90.99996948242188 * e, 233.40621948242188 * e, 66.99996948242188 * e, 228.40621948242188 * e, 43.999969482421875 * e, 225.40621948242188 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(110.99996948242188 * e, 236.40621948242188 * e), n.bezierCurveTo(94.99996948242188 * e, 244.40621948242188 * e, 79.99996948242188 * e, 249.40621948242188 * e, 60.999969482421875 * e, 249.40621948242188 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(111.99996948242188 * e, 206.29513549804688 * e), n.bezierCurveTo(91.99996948242188 * e, 206.29513549804688 * e, 87.99996948242188 * e, 201.29513549804688 * e, 79.99996948242188 * e, 192.29513549804688 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(109.99996948242188 * e, 249.18402099609375 * e), n.bezierCurveTo(97.99996948242188 * e, 263.18402099609375 * e, 85.99996948242188 * e, 271.18402099609375 * e, 65.99996948242188 * e, 277.18402099609375 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(105.99996948242188 * e, 192.18402099609375 * e), n.bezierCurveTo(99.49996948242188 * e, 197.68402099609375 * e, 99.49996948242188 * e, 197.68402099609375 * e, 92.99996948242188 * e, 203.18402099609375 * e), n.bezierCurveTo(95.99996948242188 * e, 213.18402099609375 * e, 95.99996948242188 * e, 215.18402099609375 * e, 89.99996948242188 * e, 219.18402099609375 * e), n.bezierCurveTo(91.99996948242188 * e, 223.18402099609375 * e, 91.99996948242188 * e, 226.18402099609375 * e, 87.99996948242188 * e, 230.18402099609375 * e), n.bezierCurveTo(89.99996948242188 * e, 234.18402099609375 * e, 91.99996948242188 * e, 237.18402099609375 * e, 90.99996948242188 * e, 244.18402099609375 * e), n.bezierCurveTo(96.99996948242188 * e, 252.18402099609375 * e, 96.99996948242188 * e, 256.18402099609375 * e, 95.99996948242188 * e, 262.18402099609375 * e), n.bezierCurveTo(106.49996948242188 * e, 264.18402099609375 * e, 106.49996948242188 * e, 264.18402099609375 * e, 116.99996948242188 * e, 266.18402099609375 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(104.99996948242188 * e, 183.29513549804688 * e), n.bezierCurveTo(99.99996948242188 * e, 193.29513549804688 * e, 93.99996948242188 * e, 195.29513549804688 * e, 89.99996948242188 * e, 201.29513549804688 * e), n.bezierCurveTo(86.99996948242188 * e, 212.29513549804688 * e, 85.99996948242188 * e, 214.29513549804688 * e, 81.99996948242188 * e, 215.29513549804688 * e), n.bezierCurveTo(83.99996948242188 * e, 223.29513549804688 * e, 83.99996948242188 * e, 227.29513549804688 * e, 79.99996948242188 * e, 230.29513549804688 * e), n.bezierCurveTo(83.99996948242188 * e, 235.29513549804688 * e, 84.99996948242188 * e, 240.29513549804688 * e, 79.99996948242188 * e, 246.29513549804688 * e), n.bezierCurveTo(86.99996948242188 * e, 251.29513549804688 * e, 91.99996948242188 * e, 256.2951354980469 * e, 89.99996948242188 * e, 266.2951354980469 * e), n.bezierCurveTo(102.99996948242188 * e, 269.2951354980469 * e, 102.99996948242188 * e, 269.2951354980469 * e, 115.99996948242188 * e, 272.2951354980469 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(107.99996948242188 * e, 177.85067749023438 * e), n.bezierCurveTo(95.99996948242188 * e, 187.35067749023438 * e, 95.99996948242188 * e, 187.35067749023438 * e, 83.99996948242188 * e, 196.85067749023438 * e), n.bezierCurveTo(82.99996948242188 * e, 203.85067749023438 * e, 80.99996948242188 * e, 209.85067749023438 * e, 72.99996948242188 * e, 210.85067749023438 * e), n.bezierCurveTo(73.99996948242188 * e, 220.85067749023438 * e, 73.99996948242188 * e, 221.85067749023438 * e, 66.99996948242188 * e, 227.85067749023438 * e), n.bezierCurveTo(71.99996948242188 * e, 235.85067749023438 * e, 73.99996948242188 * e, 239.85067749023438 * e, 71.99996948242188 * e, 247.85067749023438 * e), n.bezierCurveTo(80.99996948242188 * e, 257.8506774902344 * e, 81.99996948242188 * e, 263.8506774902344 * e, 77.99996948242188 * e, 271.8506774902344 * e), n.bezierCurveTo(95.49996948242188 * e, 272.8506774902344 * e, 95.49996948242188 * e, 272.8506774902344 * e, 112.99996948242188 * e, 273.8506774902344 * e), fill_path(n, void 0, t[4], 3 * e), n.restore()) : 2 == r && (n.save(), n.translate(130 * e, 35 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(170.99996948242188 * e, 133.85067749023438 * e), n.bezierCurveTo(195.99996948242188 * e, 129.85067749023438 * e, 196.99996948242188 * e, 111.85067749023438 * e, 200.99996948242188 * e, 88.85067749023438 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(169.99996948242188 * e, 143.85067749023438 * e), n.bezierCurveTo(189.99996948242188 * e, 145.85067749023438 * e, 207.99996948242188 * e, 126.85067749023438 * e, 222.99996948242188 * e, 100.85067749023438 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(170.99996948242188 * e, 157.85067749023438 * e), n.bezierCurveTo(193.99996948242188 * e, 160.85067749023438 * e, 210.99996948242188 * e, 151.85067749023438 * e, 232.99996948242188 * e, 139.85067749023438 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(169.99996948242188 * e, 168.85067749023438 * e), n.bezierCurveTo(192.99996948242188 * e, 175.85067749023438 * e, 203.99996948242188 * e, 177.85067749023438 * e, 245.99996948242188 * e, 168.85067749023438 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(167.99996948242188 * e, 168.85067749023438 * e), n.bezierCurveTo(183.99996948242188 * e, 189.85067749023438 * e, 191.99996948242188 * e, 193.85067749023438 * e, 220.99996948242188 * e, 196.85067749023438 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(176.99996948242188 * e, 117.85067749023438 * e), n.bezierCurveTo(181.99996948242188 * e, 120.85067749023438 * e, 181.99996948242188 * e, 120.85067749023438 * e, 186.99996948242188 * e, 123.85067749023438 * e), n.bezierCurveTo(183.99996948242188 * e, 137.85067749023438 * e, 185.99996948242188 * e, 136.85067749023438 * e, 190.99996948242188 * e, 136.85067749023438 * e), n.bezierCurveTo(186.99996948242188 * e, 147.85067749023438 * e, 189.99996948242188 * e, 152.85067749023438 * e, 193.99996948242188 * e, 155.85067749023438 * e), n.bezierCurveTo(187.99996948242188 * e, 165.85067749023438 * e, 190.99996948242188 * e, 169.85067749023438 * e, 190.99996948242188 * e, 172.85067749023438 * e), n.bezierCurveTo(186.99996948242188 * e, 183.85067749023438 * e, 186.99996948242188 * e, 185.85067749023438 * e, 189.99996948242188 * e, 188.85067749023438 * e), n.bezierCurveTo(182.49996948242188 * e, 195.35067749023438 * e, 182.49996948242188 * e, 195.35067749023438 * e, 174.99996948242188 * e, 201.85067749023438 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(176.99996948242188 * e, 112.18402099609375 * e), n.bezierCurveTo(183.99996948242188 * e, 119.18402099609375 * e, 186.99996948242188 * e, 117.18402099609375 * e, 192.99996948242188 * e, 116.18402099609375 * e), n.bezierCurveTo(191.99996948242188 * e, 126.18402099609375 * e, 193.99996948242188 * e, 130.18402099609375 * e, 199.99996948242188 * e, 130.18402099609375 * e), n.bezierCurveTo(194.99996948242188 * e, 145.18402099609375 * e, 197.99996948242188 * e, 147.18402099609375 * e, 201.99996948242188 * e, 153.18402099609375 * e), n.bezierCurveTo(196.99996948242188 * e, 164.18402099609375 * e, 197.99996948242188 * e, 169.18402099609375 * e, 201.99996948242188 * e, 174.18402099609375 * e), n.bezierCurveTo(194.99996948242188 * e, 184.18402099609375 * e, 196.99996948242188 * e, 187.18402099609375 * e, 200.99996948242188 * e, 193.18402099609375 * e), n.bezierCurveTo(185.99996948242188 * e, 195.18402099609375 * e, 181.99996948242188 * e, 201.18402099609375 * e, 174.99996948242188 * e, 210.18402099609375 * e), fill_path(n, void 0, t[4], 3 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(176.99996948242188 * e, 101.29513549804688 * e), n.bezierCurveTo(181.99996948242188 * e, 108.29513549804688 * e, 189.99996948242188 * e, 110.29513549804688 * e, 195.99996948242188 * e, 107.29513549804688 * e), n.bezierCurveTo(197.99996948242188 * e, 121.29513549804688 * e, 200.99996948242188 * e, 122.29513549804688 * e, 206.99996948242188 * e, 122.29513549804688 * e), n.bezierCurveTo(201.99996948242188 * e, 138.29513549804688 * e, 204.99996948242188 * e, 142.29513549804688 * e, 211.99996948242188 * e, 148.29513549804688 * e), n.bezierCurveTo(201.99996948242188 * e, 156.29513549804688 * e, 205.99996948242188 * e, 167.29513549804688 * e, 213.99996948242188 * e, 173.29513549804688 * e), n.bezierCurveTo(204.99996948242188 * e, 181.29513549804688 * e, 204.99996948242188 * e, 187.29513549804688 * e, 205.99996948242188 * e, 193.29513549804688 * e), n.bezierCurveTo(190.99996948242188 * e, 198.29513549804688 * e, 181.99996948242188 * e, 205.29513549804688 * e, 174.99996948242188 * e, 214.29513549804688 * e), fill_path(n, void 0, t[4], 3 * e), n.restore()), n.translate(a.width / 2, a.height / 2), r || (n.globalAlpha = .5, round_rect(n, -l, -u, E, I + T, _), fill_path(n, t[0]), i && n.rotate(Math.PI), n.globalAlpha = 1, round_rect(n, -l, -u, E, I, _), fill_path(n, t[1], t[2], 4), n.globalAlpha = 1, round_rect(n, 35 * e - l, 20 * e - u, E - 50 * e, I - 50 * e, _ - 10 * e), fill_path(n, t[3])), 3 == r ? (n.translate(-a.width / 2, -a.height / 2), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(121 * e, 190 * e), n.bezierCurveTo(129 * e, 186 * e, 137 * e, 183 * e, 135 * e, 163 * e), n.bezierCurveTo(131 * e, 135 * e, 153 * e, 127 * e, 177 * e, 124 * e), n.bezierCurveTo(198 * e, 120 * e, 208 * e, 122 * e, 226 * e, 128 * e), n.bezierCurveTo(261 * e, 112 * e, 271 * e, 126 * e, 287 * e, 147 * e), n.bezierCurveTo(310 * e, 163 * e, 304 * e, 183 * e, 283 * e, 196 * e), n.bezierCurveTo(296 * e, 249 * e, 278 * e, 262 * e, 253 * e, 263 * e), n.bezierCurveTo(210 * e, 264 * e, 188 * e, 252 * e, 177 * e, 234 * e), n.bezierCurveTo(133 * e, 242 * e, 123 * e, 241 * e, 115 * e, 225 * e), n.bezierCurveTo(109 * e, 206 * e, 115 * e, 193 * e, 121 * e, 190 * e), n.closePath(), fill_path(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(219 * e, 144 * e), n.bezierCurveTo(251 * e, 121 * e, 277 * e, 136 * e, 276 * e, 159 * e), n.bezierCurveTo(276 * e, 176 * e, 273 * e, 191 * e, 242 * e, 193 * e), n.bezierCurveTo(226 * e, 228 * e, 155 * e, 219 * e, 150 * e, 183 * e), n.bezierCurveTo(142 * e, 144 * e, 174 * e, 127 * e, 219 * e, 144 * e), n.closePath(), fill_path(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(123 * e, 214 * e), n.bezierCurveTo(119 * e, 198 * e, 129 * e, 189 * e, 146 * e, 194 * e), n.bezierCurveTo(158 * e, 201 * e, 165 * e, 218 * e, 147 * e, 226 * e), n.bezierCurveTo(135 * e, 230 * e, 125 * e, 222 * e, 123 * e, 214 * e), n.closePath(), fill_path(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(257 * e, 199 * e), n.bezierCurveTo(264 * e, 199 * e, 275 * e, 213 * e, 261 * e, 220 * e), n.bezierCurveTo(246 * e, 225 * e, 235 * e, 200 * e, 257 * e, 199 * e), n.closePath(), fill_path(n, t[5]), n.translate(-5 * e, 55 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(186 * e, 123 * e), n.bezierCurveTo(198 * e, 115 * e, 219 * e, 110 * e, 219 * e, 123 * e), n.bezierCurveTo(216 * e, 135 * e, 171 * e, 143 * e, 186 * e, 123 * e), n.closePath(), fill_path(n, t[5]), n.translate(5 * e, -55 * e), n.translate(-5 * e, 15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(171 * e, 241 * e), n.bezierCurveTo(189 * e, 234 * e, 200 * e, 248 * e, 189 * e, 254 * e), n.bezierCurveTo(179 * e, 260 * e, 158 * e, 246 * e, 171 * e, 241 * e), n.closePath(), fill_path(n, t[5])) : 4 == r && (n.translate(-a.width / 2, -a.height / 2), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(30 * e, 167 * e), n.bezierCurveTo(47 * e, 144 * e, 64 * e, 140 * e, 80 * e, 147 * e), n.bezierCurveTo(95 * e, 154 * e, 95 * e, 159 * e, 100 * e, 179 * e), n.bezierCurveTo(105 * e, 202 * e, 95 * e, 218 * e, 69 * e, 218 * e), n.bezierCurveTo(48 * e, 236 * e, 26 * e, 223 * e, 28 * e, 213 * e), n.bezierCurveTo(28 * e, 205 * e, 29 * e, 199 * e, 32 * e, 195 * e), n.bezierCurveTo(21 * e, 183 * e, 27 * e, 173 * e, 30 * e, 167 * e), n.closePath(), fill_path(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(26 * e, 145 * e), n.bezierCurveTo(32 * e, 138 * e, 37 * e, 137 * e, 40 * e, 139 * e), n.bezierCurveTo(43 * e, 140 * e, 41 * e, 150 * e, 31 * e, 159 * e), n.bezierCurveTo(23 * e, 166 * e, 17 * e, 158 * e, 26 * e, 145 * e), n.closePath(), fill_path(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(13 * e, 193 * e), n.bezierCurveTo(21 * e, 187 * e, 30 * e, 190 * e, 20 * e, 202 * e), n.bezierCurveTo(13 * e, 208 * e, 7 * e, 202 * e, 13 * e, 193 * e), n.closePath(), fill_path(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(121 * e, 190 * e), n.bezierCurveTo(129 * e, 186 * e, 137 * e, 183 * e, 135 * e, 163 * e), n.bezierCurveTo(131 * e, 135 * e, 153 * e, 127 * e, 177 * e, 124 * e), n.bezierCurveTo(198 * e, 120 * e, 208 * e, 122 * e, 226 * e, 128 * e), n.bezierCurveTo(261 * e, 112 * e, 271 * e, 126 * e, 287 * e, 147 * e), n.bezierCurveTo(310 * e, 163 * e, 304 * e, 183 * e, 283 * e, 196 * e), n.bezierCurveTo(296 * e, 249 * e, 278 * e, 262 * e, 253 * e, 263 * e), n.bezierCurveTo(210 * e, 264 * e, 188 * e, 252 * e, 177 * e, 234 * e), n.bezierCurveTo(133 * e, 242 * e, 123 * e, 241 * e, 115 * e, 225 * e), n.bezierCurveTo(109 * e, 206 * e, 115 * e, 193 * e, 121 * e, 190 * e), n.closePath(), fill_path(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(335 * e, 196 * e), n.bezierCurveTo(312 * e, 208 * e, 300 * e, 185 * e, 309 * e, 167 * e), n.bezierCurveTo(314 * e, 141 * e, 339 * e, 127 * e, 359 * e, 144 * e), n.bezierCurveTo(363 * e, 148 * e, 364 * e, 150 * e, 364 * e, 150 * e), n.bezierCurveTo(392 * e, 143 * e, 396 * e, 183 * e, 378 * e, 204 * e), n.bezierCurveTo(367 * e, 215 * e, 339 * e, 208 * e, 335 * e, 196 * e), n.closePath(), fill_path(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(349 * e, 212 * e), n.bezierCurveTo(339 * e, 216 * e, 334 * e, 208 * e, 341 * e, 203 * e), n.bezierCurveTo(353 * e, 198 * e, 361 * e, 205 * e, 349 * e, 212 * e), n.closePath(), fill_path(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(46 * e, 165 * e), n.bezierCurveTo(55 * e, 148 * e, 85 * e, 157 * e, 83 * e, 175 * e), n.bezierCurveTo(99 * e, 185 * e, 89 * e, 212 * e, 66 * e, 204 * e), n.bezierCurveTo(55 * e, 212 * e, 43 * e, 212 * e, 41 * e, 202 * e), n.bezierCurveTo(39 * e, 194 * e, 42 * e, 187 * e, 49 * e, 185 * e), n.bezierCurveTo(44 * e, 175 * e, 45 * e, 172 * e, 46 * e, 165 * e), n.closePath(), fill_path(n, t[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(219 * e, 144 * e), n.bezierCurveTo(251 * e, 121 * e, 277 * e, 136 * e, 276 * e, 159 * e), n.bezierCurveTo(276 * e, 176 * e, 273 * e, 191 * e, 242 * e, 193 * e), n.bezierCurveTo(226 * e, 228 * e, 155 * e, 219 * e, 150 * e, 183 * e), n.bezierCurveTo(142 * e, 144 * e, 174 * e, 127 * e, 219 * e, 144 * e), n.closePath(), fill_path(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(123 * e, 214 * e), n.bezierCurveTo(119 * e, 198 * e, 129 * e, 189 * e, 146 * e, 194 * e), n.bezierCurveTo(158 * e, 201 * e, 165 * e, 218 * e, 147 * e, 226 * e), n.bezierCurveTo(135 * e, 230 * e, 125 * e, 222 * e, 123 * e, 214 * e), n.closePath(), fill_path(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(257 * e, 199 * e), n.bezierCurveTo(264 * e, 199 * e, 275 * e, 213 * e, 261 * e, 220 * e), n.bezierCurveTo(246 * e, 225 * e, 235 * e, 200 * e, 257 * e, 199 * e), n.closePath(), fill_path(n, t[5]), n.translate(-5 * e, 55 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(186 * e, 123 * e), n.bezierCurveTo(198 * e, 115 * e, 219 * e, 110 * e, 219 * e, 123 * e), n.bezierCurveTo(216 * e, 135 * e, 171 * e, 143 * e, 186 * e, 123 * e), n.closePath(), fill_path(n, t[5]), n.translate(5 * e, -55 * e), n.translate(-5 * e, 15 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(171 * e, 241 * e), n.bezierCurveTo(189 * e, 234 * e, 200 * e, 248 * e, 189 * e, 254 * e), n.bezierCurveTo(179 * e, 260 * e, 158 * e, 246 * e, 171 * e, 241 * e), n.closePath(), fill_path(n, t[5]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(367 * e, 164 * e), n.bezierCurveTo(380 * e, 160 * e, 391 * e, 185 * e, 371 * e, 189 * e), n.bezierCurveTo(362 * e, 192 * e, 354 * e, 191 * e, 350 * e, 185 * e), n.bezierCurveTo(326 * e, 205 * e, 314 * e, 182 * e, 316 * e, 171 * e), n.bezierCurveTo(317 * e, 150 * e, 332 * e, 143 * e, 347 * e, 147 * e), n.bezierCurveTo(361 * e, 151 * e, 366 * e, 158 * e, 367 * e, 164 * e), n.closePath(), fill_path(n, t[4])), a
}

function create_music_button(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 121 * e, a.height = 130 * e, n.translate(0, 20 * e), 1 == i && (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(6 * e, 23 * e), n.bezierCurveTo(6 * e, 46 * e, 6 * e, 46 * e, 6 * e, 69 * e), n.bezierCurveTo(21 * e, 69 * e, 21 * e, 69 * e, 36 * e, 69 * e), n.bezierCurveTo(45.5 * e, 78.5 * e, 45.5 * e, 78.5 * e, 55 * e, 88 * e), n.bezierCurveTo(55.5 * e, 45.5 * e, 55.5 * e, 45.5 * e, 56 * e, 3 * e), n.bezierCurveTo(47 * e, 14 * e, 47 * e, 14 * e, 38 * e, 25 * e), n.bezierCurveTo(23 * e, 25 * e, 23 * e, 25 * e, 6 * e, 23 * e), n.closePath(), fill_path(n, void 0, t[3], 13 * e)), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(6 * e, 23 * e), n.bezierCurveTo(6 * e, 46 * e, 6 * e, 46 * e, 6 * e, 69 * e), n.bezierCurveTo(21 * e, 69 * e, 21 * e, 69 * e, 36 * e, 69 * e), n.bezierCurveTo(45.5 * e, 78.5 * e, 45.5 * e, 78.5 * e, 55 * e, 88 * e), n.bezierCurveTo(55.5 * e, 45.5 * e, 55.5 * e, 45.5 * e, 56 * e, 3 * e), n.bezierCurveTo(47 * e, 14 * e, 47 * e, 14 * e, 38 * e, 25 * e), n.bezierCurveTo(23 * e, 25 * e, 23 * e, 25 * e, 6 * e, 23 * e), n.closePath(), fill_path(n, t[1], t[2], 4 * e), 1 == r ? (n.translate(0, 5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(67 * e, 30 * e), n.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e), fill_path(n, void 0, t[0], 10 * e), n.translate(3, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(70 * e, 17 * e), n.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e), fill_path(n, void 0, t[0], 10 * e), n.translate(3, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(76 * e, 8 * e), n.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e), fill_path(n, void 0, t[0], 10 * e), 1 == i ? (n.translate(-6 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(67 * e, 30 * e), n.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e), fill_path(n, void 0, t[3], 18 * e), n.translate(3, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(70 * e, 17 * e), n.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e), fill_path(n, void 0, t[3], 18 * e), n.translate(3, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(76 * e, 8 * e), n.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e), fill_path(n, void 0, t[3], 18 * e), n.translate(-6, 0 * e)) : n.translate(-6 * e, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(67 * e, 30 * e), n.bezierCurveTo(73 * e, 47 * e, 69 * e, 45 * e, 67 * e, 58 * e), fill_path(n, void 0, t[2], 10 * e), n.translate(3, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(70 * e, 17 * e), n.bezierCurveTo(83 * e, 45 * e, 76 * e, 55 * e, 70 * e, 69 * e), fill_path(n, void 0, t[2], 10 * e), n.translate(3, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(76 * e, 8 * e), n.bezierCurveTo(88 * e, 31 * e, 89 * e, 55 * e, 76 * e, 79 * e), fill_path(n, void 0, t[2], 10 * e)) : (1 == i ? (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(108 * e, 27 * e), n.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e), n.closePath(), fill_path(n, void 0, t[3], 18 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79 * e, 30 * e), n.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e), n.closePath(), fill_path(n, void 0, t[3], 18 * e)) : (n.translate(0, -5 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(108 * e, 27 * e), n.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e), n.closePath(), fill_path(n, void 0, t[0], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79 * e, 30 * e), n.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e), n.closePath(), fill_path(n, void 0, t[0], 7 * e), n.translate(0, 5 * e)), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(108 * e, 27 * e), n.bezierCurveTo(94 * e, 45.5 * e, 94 * e, 45.5 * e, 80 * e, 64 * e), n.closePath(), fill_path(n, void 0, t[2], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(79 * e, 30 * e), n.bezierCurveTo(93 * e, 47 * e, 93 * e, 47 * e, 107 * e, 64 * e), n.closePath(), fill_path(n, void 0, t[2], 7 * e)), a
}

function create_tree_snow(e, t, i) {
    document.createElement("canvas").getContext("2d").rotate(Math.PI / 2)
}

function create_tree_branch(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = (l = 450 * e) / 2,
        o = (u = 145 * e) / 2,
        s = 10 * e,
        _ = 300 * e,
        T = 30 * e,
        E = _ / 2,
        I = T / 2;
    if (i) {
        var l = 145 * e,
            u = 450 * e;
        r.width = l, r.height = u, a.rotate(Math.PI / 2), a.save(), a.globalAlpha = .5, round_rect(a, 100 * e, -110 * e, _, T, s), fill_path(a, t[0]), a.translate(178 * e, -98 * e), round_rect(a, -E, -I - 6 * e, 100 * e, 100 * e, s), fill_path(a, t[0]), a.translate(-50 * e, 5 * e), round_rect(a, 220 * e, -15 * e, 90 * e, 90 * e, s), fill_path(a, t[0]), a.restore(), a.save(), a.globalAlpha = 1, a.translate(250 * e, -63 * e), round_rect(a, -E - 20 * e, -I, _, T, s), fill_path(a, t[1], t[2], 4), a.translate(-70 * e, -40 * e), round_rect(a, -E - 20 * e, -I, 100 * e, 100 * e, s), fill_path(a, t[3], t[4], 4), a.translate(-70 * e, 15 * e), round_rect(a, 220 * e, -22 * e, 90 * e, 90 * e, s), fill_path(a, t[3], t[4], 4), round_rect(a, 230 * e, -12 * e, 55 * e, 55 * e, s), fill_path(a, t[5]), a.translate(-70 * e, 0), round_rect(a, -15 * e, -2 * e, 60 * e, 60 * e, s), fill_path(a, t[5]), a.restore()
    } else r.width = l, r.height = u, a.save(), a.globalAlpha = .5, a.translate(n, o + 10 * e), round_rect(a, -E, -I, _, T, s), fill_path(a, t[0]), a.translate(-65 * e, -25 * e), round_rect(a, -E, -I - 6 * e, 100 * e, 100 * e, 15 * e), fill_path(a, t[0]), a.translate(-35 * e, -5 * e), round_rect(a, 220 * e, -15 * e, 90 * e, 90 * e, 15 * e), fill_path(a, t[0]), a.restore(), a.save(), a.globalAlpha = 1, a.translate(240 * e, 70 * e), round_rect(a, -E, -I, _, T, s), fill_path(a, t[1], t[2], 4), a.translate(-60 * e, -40 * e), round_rect(a, -E - 20 * e, -I, 100 * e, 100 * e, 15 * e), fill_path(a, t[3], t[4], 4), a.translate(-55 * e, 10 * e), round_rect(a, 220 * e, -22 * e, 90 * e, 90 * e, 15 * e), fill_path(a, t[3], t[4], 4), round_rect(a, 240 * e, -12 * e, 55 * e, 55 * e, 12 * e), fill_path(a, t[5]), a.translate(45 * e, 0 * e), round_rect(a, -145 * e, -2 * e, 60 * e, 60 * e, 12 * e), fill_path(a, t[5]), a.restore();
    return r
}

function create_apricot_forest(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = Math.max(t.width, e.width),
        n = Math.max(t.height, e.height);
    return i.width = a, i.height = n, r.drawImage(e, (a - e.width) / 2, (n - e.height) / 2), r.drawImage(t, (a - t.width) / 2, (n - t.height) / 2), i
}

function create_pickaxe(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 105 * e,
        o = 125 * e,
        s = 4 * e,
        _ = 10 * e,
        T = 5 * e,
        E = 10 * e,
        I = 110 * e,
        l = E / 2,
        u = I / 2;
    return r.width = n, r.height = o, a.save(), a.globalAlpha = t ? .5 : 1, a.translate(n / 2 + 8 * e, o / 2 + T), round_rect(a, -l, -u, E, I, _), fill_path(a, t ? i[0] : i[1]), a.translate(-130 * e + T, -128 * e + T), a.beginPath(), a.bezierCurveTo(159 * e, 93 * e, 156 * e, 99 * e, 154 * e, 102 * e), a.bezierCurveTo(128 * e, 92 * e, 90 * e, 93 * e, 72 * e, 96 * e), a.bezierCurveTo(68 * e, 84 * e, 143 * e, 73 * e, 162 * e, 86 * e), a.closePath(), fill_path(a, i[2]), a.restore(), a.translate(n / 2 + 8, o / 2), a.globalAlpha = 1, round_rect(a, -l, -u, E, I, _), fill_path(a, i[3], i[4], s), a.translate(-130 * e, -125 * e), a.beginPath(), a.bezierCurveTo(159 * e, 93 * e, 156 * e, 99 * e, 154 * e, 102 * e), a.bezierCurveTo(128 * e, 92 * e, 90 * e, 93 * e, 72 * e, 96 * e), a.bezierCurveTo(68 * e, 84 * e, 143 * e, 73 * e, 162 * e, 86 * e), a.closePath(), fill_path(a, i[5], i[6], s), r
}

function create_sword_wood(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 170 * e, r.height = 469 * e, a.globalAlpha = t ? .5 : 1, a.translate(20 * e, 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(88 * e, 30 * e), a.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e), a.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e), a.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e), a.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e), a.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e), a.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e), a.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(118 * e, 31 * e), a.bezierCurveTo(125 * e, 43 * e, 125 * e, 43 * e, 132 * e, 55 * e), a.bezierCurveTo(109.5 * e, 185.5 * e, 109.5 * e, 185.5 * e, 87 * e, 316 * e), a.bezierCurveTo(72 * e, 313.5 * e, 72 * e, 313.5 * e, 57 * e, 311 * e), a.bezierCurveTo(76.5 * e, 181 * e, 76.5 * e, 181 * e, 96 * e, 51 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56 * e, 328 * e), a.bezierCurveTo(47 * e, 385.5 * e, 47 * e, 385.5 * e, 38 * e, 443 * e), a.bezierCurveTo(52 * e, 446 * e, 52 * e, 446 * e, 66 * e, 449 * e), a.bezierCurveTo(76.5 * e, 388.5 * e, 76.5 * e, 388.5 * e, 87 * e, 328 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(74 * e, 302 * e), a.bezierCurveTo(104 * e, 316.5 * e, 104 * e, 316.5 * e, 134 * e, 331 * e), a.bezierCurveTo(133 * e, 341 * e, 133 * e, 341 * e, 132 * e, 351 * e), a.bezierCurveTo(69.5 * e, 342 * e, 69.5 * e, 342 * e, 7 * e, 333 * e), a.bezierCurveTo(8 * e, 323 * e, 8 * e, 323 * e, 9 * e, 313 * e), a.closePath(), fill_path(a, i[0]), a.save(), a.translate(51.5 * e, 440.5 * e), a.rotate(.2), round_rect(a, -20.5 * e, -18.5 * e, 41 * e, 37 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(73 * e, 316 * e), a.bezierCurveTo(90 * e, 324.5 * e, 90 * e, 324.5 * e, 107 * e, 333 * e), a.bezierCurveTo(70 * e, 327.5 * e, 70 * e, 327.5 * e, 33 * e, 322 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-20 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(88 * e, 30 * e), a.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e), a.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e), a.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e), a.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e), a.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e), a.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e), a.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e), a.closePath(), fill_path(a, i[1], i[2], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(118 * e, 31 * e), a.bezierCurveTo(125 * e, 43 * e, 125 * e, 43 * e, 132 * e, 55 * e), a.bezierCurveTo(109.5 * e, 185.5 * e, 109.5 * e, 185.5 * e, 87 * e, 316 * e), a.bezierCurveTo(72 * e, 313.5 * e, 72 * e, 313.5 * e, 57 * e, 311 * e), a.bezierCurveTo(76.5 * e, 181 * e, 76.5 * e, 181 * e, 96 * e, 51 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(88 * e, 30 * e), a.bezierCurveTo(96 * e, 49.5 * e, 96 * e, 49.5 * e, 104 * e, 69 * e), a.bezierCurveTo(105.5 * e, 41.5 * e, 105.5 * e, 41.5 * e, 107 * e, 14 * e), a.bezierCurveTo(114 * e, 9.5 * e, 114 * e, 9.5 * e, 121 * e, 5 * e), a.bezierCurveTo(135.5 * e, 27.5 * e, 135.5 * e, 27.5 * e, 150 * e, 50 * e), a.bezierCurveTo(110.5 * e, 286 * e, 110.5 * e, 286 * e, 103 * e, 331 * e), a.bezierCurveTo(69.5 * e, 325 * e, 69.5 * e, 325 * e, 36 * e, 319 * e), a.bezierCurveTo(56.5 * e, 180 * e, 56.5 * e, 180 * e, 77 * e, 41 * e), a.closePath(), fill_path(a, void 0, i[2], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56 * e, 328 * e), a.bezierCurveTo(47 * e, 385.5 * e, 47 * e, 385.5 * e, 38 * e, 443 * e), a.bezierCurveTo(52 * e, 446 * e, 52 * e, 446 * e, 66 * e, 449 * e), a.bezierCurveTo(76.5 * e, 388.5 * e, 76.5 * e, 388.5 * e, 87 * e, 328 * e), a.closePath(), fill_path(a, i[4], i[5], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(74 * e, 302 * e), a.bezierCurveTo(104 * e, 316.5 * e, 104 * e, 316.5 * e, 134 * e, 331 * e), a.bezierCurveTo(133 * e, 341 * e, 133 * e, 341 * e, 132 * e, 351 * e), a.bezierCurveTo(69.5 * e, 342 * e, 69.5 * e, 342 * e, 7 * e, 333 * e), a.bezierCurveTo(8 * e, 323 * e, 8 * e, 323 * e, 9 * e, 313 * e), a.closePath(), fill_path(a, i[4], i[5], 7 * e), a.save(), a.translate(51.5 * e, 440.5 * e), a.rotate(.2), round_rect(a, -20.5 * e, -18.5 * e, 41 * e, 37 * e, 10 * e), a.restore(), fill_path(a, i[4], i[5], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(73 * e, 316 * e), a.bezierCurveTo(90 * e, 324.5 * e, 90 * e, 324.5 * e, 107 * e, 333 * e), a.bezierCurveTo(70 * e, 327.5 * e, 70 * e, 327.5 * e, 33 * e, 322 * e), a.closePath(), fill_path(a, i[6]), r
}

function create_pirate_sword(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 424 * e, r.height = 788 * e, a.translate(25 * e, 25 * e), a.globalAlpha = t ? .5 : 1, a.save(), a.translate(193.5 * e, 602.5 * e), a.rotate(-.12), round_rect(a, -26.5 * e, -97.5 * e, 53 * e, 195 * e, 25 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(137 * e, 519 * e), a.bezierCurveTo(182 * e, 513 * e, 182 * e, 513 * e, 227 * e, 507 * e), a.bezierCurveTo(214 * e, 417 * e, 189 * e, 304 * e, 221 * e, 180 * e), a.bezierCurveTo(191 * e, 126 * e, 192 * e, 105 * e, 198 * e, 64 * e), a.bezierCurveTo(123 * e, 102 * e, 99 * e, 285 * e, 137 * e, 517 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(175 * e, 119 * e), a.bezierCurveTo(176 * e, 142 * e, 184 * e, 165 * e, 197 * e, 183 * e), a.bezierCurveTo(167 * e, 325 * e, 191 * e, 405 * e, 202 * e, 502 * e), a.bezierCurveTo(180 * e, 503 * e, 180 * e, 503 * e, 158 * e, 504 * e), a.bezierCurveTo(135 * e, 396 * e, 134 * e, 185 * e, 175 * e, 119 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(110 * e, 518 * e), a.bezierCurveTo(111.5 * e, 533 * e, 111.5 * e, 533 * e, 113 * e, 548 * e), a.bezierCurveTo(162.5 * e, 544 * e, 162.5 * e, 544 * e, 212 * e, 540 * e), a.bezierCurveTo(312 * e, 535 * e, 281 * e, 665 * e, 225 * e, 665 * e), a.bezierCurveTo(227 * e, 686.5 * e, 227 * e, 686.5 * e, 229 * e, 708 * e), a.bezierCurveTo(343 * e, 684 * e, 354 * e, 496 * e, 222 * e, 498 * e), a.bezierCurveTo(165.5 * e, 503 * e, 165.5 * e, 503 * e, 109 * e, 508 * e), a.closePath(), fill_path(a, i[0]), circle(a, 204 * e, 693 * e, 36.013886210738214 * e), fill_path(a, i[0]), circle(a, 105 * e, 518 * e, 30 * e), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(171 * e, 535 * e), a.bezierCurveTo(139.5 * e, 537.5 * e, 139.5 * e, 537.5 * e, 108 * e, 540 * e), a.bezierCurveTo(110 * e, 527.5 * e, 110 * e, 527.5 * e, 112 * e, 515 * e), a.bezierCurveTo(148 * e, 513 * e, 148 * e, 513 * e, 184 * e, 511 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(244 * e, 669 * e), a.bezierCurveTo(248.5 * e, 680 * e, 248.5 * e, 680 * e, 253 * e, 691 * e), a.bezierCurveTo(239.5 * e, 697 * e, 239.5 * e, 697 * e, 226 * e, 703 * e), a.bezierCurveTo(223 * e, 691.5 * e, 223 * e, 691.5 * e, 220 * e, 680 * e), a.closePath(), fill_path(a, i[0]), a.translate(-25 * e, -25 * e), a.globalAlpha = 1, a.save(), a.translate(193.5 * e, 602.5 * e), a.rotate(-.12), round_rect(a, -26.5 * e, -97.5 * e, 53 * e, 195 * e, 25 * e), a.restore(), fill_path(a, i[1], i[2], 16 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(137 * e, 519 * e), a.bezierCurveTo(182 * e, 513 * e, 182 * e, 513 * e, 227 * e, 507 * e), a.bezierCurveTo(214 * e, 417 * e, 189 * e, 304 * e, 221 * e, 180 * e), a.bezierCurveTo(191 * e, 126 * e, 192 * e, 105 * e, 198 * e, 64 * e), a.bezierCurveTo(123 * e, 102 * e, 99 * e, 285 * e, 137 * e, 517 * e), a.closePath(), fill_path(a, i[3], i[4], 16 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(175 * e, 119 * e), a.bezierCurveTo(176 * e, 142 * e, 184 * e, 165 * e, 197 * e, 183 * e), a.bezierCurveTo(167 * e, 325 * e, 191 * e, 405 * e, 202 * e, 502 * e), a.bezierCurveTo(180 * e, 503 * e, 180 * e, 503 * e, 158 * e, 504 * e), a.bezierCurveTo(135 * e, 396 * e, 134 * e, 185 * e, 175 * e, 119 * e), a.closePath(), fill_path(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(110 * e, 518 * e), a.bezierCurveTo(111.5 * e, 533 * e, 111.5 * e, 533 * e, 113 * e, 548 * e), a.bezierCurveTo(162.5 * e, 544 * e, 162.5 * e, 544 * e, 212 * e, 540 * e), a.bezierCurveTo(312 * e, 535 * e, 281 * e, 665 * e, 225 * e, 665 * e), a.bezierCurveTo(227 * e, 686.5 * e, 227 * e, 686.5 * e, 229 * e, 708 * e), a.bezierCurveTo(343 * e, 684 * e, 354 * e, 496 * e, 222 * e, 498 * e), a.bezierCurveTo(165.5 * e, 503 * e, 165.5 * e, 503 * e, 109 * e, 508 * e), a.closePath(), fill_path(a, i[6], i[4], 16 * e), circle(a, 204 * e, 693 * e, 36.013886210738214 * e), fill_path(a, i[6], i[4], 16 * e), circle(a, 105 * e, 518 * e, 30 * e), fill_path(a, i[6], i[4], 16 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(171 * e, 535 * e), a.bezierCurveTo(139.5 * e, 537.5 * e, 139.5 * e, 537.5 * e, 108 * e, 540 * e), a.bezierCurveTo(110 * e, 527.5 * e, 110 * e, 527.5 * e, 112 * e, 515 * e), a.bezierCurveTo(148 * e, 513 * e, 148 * e, 513 * e, 184 * e, 511 * e), a.closePath(), fill_path(a, i[6]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(244 * e, 669 * e), a.bezierCurveTo(248.5 * e, 680 * e, 248.5 * e, 680 * e, 253 * e, 691 * e), a.bezierCurveTo(239.5 * e, 697 * e, 239.5 * e, 697 * e, 226 * e, 703 * e), a.bezierCurveTo(223 * e, 691.5 * e, 223 * e, 691.5 * e, 220 * e, 680 * e), a.closePath(), fill_path(a, i[6]), circle(a, 204 * e, 693 * e, 17.029386365926403 * e), fill_path(a, i[7]), circle(a, 106 * e, 518 * e, 12 * e), fill_path(a, i[7]), r
}

function create_sword(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 100 * e, r.height = 250 * e, a.translate(-135 * e, -75 * e), a.globalAlpha = t ? .8 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(178.5 * e, 238.03125 * e), a.bezierCurveTo(177 * e, 175.03125 * e, 177 * e, 175.03125 * e, 175.5 * e, 112.03125 * e), a.bezierCurveTo(184.5 * e, 100.53125 * e, 184.5 * e, 100.53125 * e, 193.5 * e, 89.03125 * e), a.bezierCurveTo(202 * e, 100.03125 * e, 202 * e, 100.03125 * e, 210.5 * e, 111.03125 * e), a.bezierCurveTo(209.5 * e, 174.03125 * e, 209.5 * e, 174.03125 * e, 208.5 * e, 237.03125 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(155.5 * e, 239.03125 * e), a.bezierCurveTo(194 * e, 238.53125 * e, 194 * e, 238.53125 * e, 232.5 * e, 238.03125 * e), a.bezierCurveTo(232.5 * e, 243.03125 * e, 232.5 * e, 243.03125 * e, 232.5 * e, 248.03125 * e), a.bezierCurveTo(194 * e, 248.53125 * e, 194 * e, 248.53125 * e, 155.5 * e, 249.03125 * e), a.closePath(), fill_path(a, i[0]), circle(a, 160.5 * e, 243.03125 * e, 7 * e), fill_path(a, i[0]), circle(a, 227.5 * e, 242.03125 * e, 7 * e), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(185.5 * e, 253.03125 * e), a.bezierCurveTo(193.5 * e, 253.03125 * e, 193.5 * e, 253.03125 * e, 201.5 * e, 253.03125 * e), a.bezierCurveTo(201.5 * e, 276.03125 * e, 201.5 * e, 276.03125 * e, 201.5 * e, 299.03125 * e), a.bezierCurveTo(194.5 * e, 299.03125 * e, 194.5 * e, 299.03125 * e, 187.5 * e, 299.03125 * e), a.closePath(), fill_path(a, i[0], i[0], 5 * e), circle(a, 194 * e, 298 * e, 9 * e), fill_path(a, i[0], i[0], 5 * e), a.globalAlpha = 1, a.translate(-10 * e, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(178.5 * e, 238.03125 * e), a.bezierCurveTo(177 * e, 175.03125 * e, 177 * e, 175.03125 * e, 175.5 * e, 112.03125 * e), a.bezierCurveTo(184.5 * e, 100.53125 * e, 184.5 * e, 100.53125 * e, 193.5 * e, 89.03125 * e), a.bezierCurveTo(202 * e, 100.03125 * e, 202 * e, 100.03125 * e, 210.5 * e, 111.03125 * e), a.bezierCurveTo(209.5 * e, 174.03125 * e, 209.5 * e, 174.03125 * e, 208.5 * e, 237.03125 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(155.5 * e, 239.03125 * e), a.bezierCurveTo(194 * e, 238.53125 * e, 194 * e, 238.53125 * e, 232.5 * e, 238.03125 * e), a.bezierCurveTo(232.5 * e, 243.03125 * e, 232.5 * e, 243.03125 * e, 232.5 * e, 248.03125 * e), a.bezierCurveTo(194 * e, 248.53125 * e, 194 * e, 248.53125 * e, 155.5 * e, 249.03125 * e), a.closePath(), fill_path(a, i[1], i[2], 5 * e), circle(a, 160.5 * e, 243.03125 * e, 7 * e), fill_path(a, i[1], i[2], 5 * e), circle(a, 227.5 * e, 242.03125 * e, 7 * e), fill_path(a, i[1], i[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(185.5 * e, 253.03125 * e), a.bezierCurveTo(193.5 * e, 253.03125 * e, 193.5 * e, 253.03125 * e, 201.5 * e, 253.03125 * e), a.bezierCurveTo(201.5 * e, 276.03125 * e, 201.5 * e, 276.03125 * e, 201.5 * e, 299.03125 * e), a.bezierCurveTo(194.5 * e, 299.03125 * e, 194.5 * e, 299.03125 * e, 187.5 * e, 299.03125 * e), a.closePath(), fill_path(a, i[1], i[2], 7 * e), circle(a, 194 * e, 298 * e, 9 * e), fill_path(a, i[1], i[2], 7 * e), r
}

function create_stonesword(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 290 * e, r.height = 525 * e, a.globalAlpha = t ? .5 : 1, a.translate(20 * e, 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(111 * e, 351 * e), a.bezierCurveTo(129 * e, 218 * e, 129 * e, 218 * e, 147 * e, 85 * e), a.bezierCurveTo(167 * e, 65.5 * e, 167 * e, 65.5 * e, 187 * e, 46 * e), a.bezierCurveTo(201.5 * e, 70.5 * e, 201.5 * e, 70.5 * e, 216 * e, 95 * e), a.bezierCurveTo(194.5 * e, 227.5 * e, 194.5 * e, 227.5 * e, 173 * e, 360 * e), a.closePath(), fill_path(a, i[0]), a.save(), a.translate(131 * e, 425.5 * e), a.rotate(.16), round_rect(a, -14 * e, -56.5 * e, 28 * e, 113 * e, 8 * e), a.restore(), fill_path(a, i[0]), circle(a, 122 * e, 480 * e, 18.439088914585774 * e), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79 * e, 371 * e), a.bezierCurveTo(131 * e, 373 * e, 145 * e, 378 * e, 197 * e, 388 * e), a.bezierCurveTo(205 * e, 382.5 * e, 205 * e, 382.5 * e, 213 * e, 377 * e), a.bezierCurveTo(167 * e, 352 * e, 117 * e, 345 * e, 69 * e, 355 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-20 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(111 * e, 351 * e), a.bezierCurveTo(129 * e, 218 * e, 129 * e, 218 * e, 147 * e, 85 * e), a.bezierCurveTo(167 * e, 65.5 * e, 167 * e, 65.5 * e, 187 * e, 46 * e), a.bezierCurveTo(201.5 * e, 70.5 * e, 201.5 * e, 70.5 * e, 216 * e, 95 * e), a.bezierCurveTo(194.5 * e, 227.5 * e, 194.5 * e, 227.5 * e, 173 * e, 360 * e), a.closePath(), fill_path(a, i[1], i[2], 12.5 * e), a.save(), a.translate(131 * e, 425.5 * e), a.rotate(.16), round_rect(a, -14 * e, -56.5 * e, 28 * e, 113 * e, 8 * e), a.restore(), fill_path(a, i[4], i[5], 12.5 * e), circle(a, 122 * e, 480 * e, 18.439088914585774 * e), fill_path(a, i[4], i[5], 12.5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79 * e, 371 * e), a.bezierCurveTo(131 * e, 373 * e, 145 * e, 378 * e, 197 * e, 388 * e), a.bezierCurveTo(205 * e, 382.5 * e, 205 * e, 382.5 * e, 213 * e, 377 * e), a.bezierCurveTo(167 * e, 352 * e, 117 * e, 345 * e, 69 * e, 355 * e), a.closePath(), fill_path(a, i[4], i[5], 12.5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(128 * e, 345 * e), a.bezierCurveTo(142 * e, 345 * e, 147 * e, 346 * e, 158 * e, 349 * e), a.bezierCurveTo(177.5 * e, 224.5 * e, 177.5 * e, 224.5 * e, 197 * e, 100 * e), a.bezierCurveTo(190.5 * e, 84.5 * e, 190.5 * e, 84.5 * e, 184 * e, 69 * e), a.bezierCurveTo(173.5 * e, 82 * e, 173.5 * e, 82 * e, 163 * e, 95 * e), a.closePath(), fill_path(a, i[3]), r
}

function create_crab(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 283 * e, a.height = 224 * e, n.translate(0, 15 * e), n.globalAlpha = .5, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(93 * e, 55 * e), n.bezierCurveTo(127 * e, 27 * e, 195 * e, 42 * e, 213 * e, 78 * e), n.bezierCurveTo(254 * e, 134 * e, 226 * e, 198 * e, 153 * e, 197 * e), n.bezierCurveTo(59 * e, 204 * e, 56 * e, 158 * e, 51 * e, 115 * e), n.bezierCurveTo(50 * e, 93 * e, 81 * e, 62 * e, 90 * e, 57 * e), n.closePath(), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(100 * e, 33 * e), n.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e), n.closePath(), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(181 * e, 32 * e), n.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(225 * e, 52 * e), n.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(34 * e, 134 * e), n.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(249 * e, 135 * e), n.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56 * e, 50 * e), n.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e), fill_path(n, i[0]), n.translate(0, -15 * e), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(100 * e, 33 * e), n.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e), fill_path(n, void 0, i[2], 40 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(181 * e, 32 * e), n.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e), fill_path(n, void 0, i[2], 40 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(225 * e, 52 * e), n.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e), fill_path(n, void 0, i[2], 40 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(34 * e, 134 * e), n.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e), fill_path(n, void 0, i[2], 40 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(249 * e, 135 * e), n.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e), fill_path(n, void 0, i[2], 40 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56 * e, 50 * e), n.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e), fill_path(n, void 0, i[2], 40 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(93 * e, 55 * e), n.bezierCurveTo(127 * e, 27 * e, 195 * e, 42 * e, 213 * e, 78 * e), n.bezierCurveTo(254 * e, 134 * e, 226 * e, 198 * e, 153 * e, 197 * e), n.bezierCurveTo(59 * e, 204 * e, 56 * e, 158 * e, 51 * e, 115 * e), n.bezierCurveTo(50 * e, 93 * e, 81 * e, 62 * e, 90 * e, 57 * e), n.closePath(), fill_path(n, i[1], i[2], 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(100 * e, 33 * e), n.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e), fill_path(n, void 0, i[1], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(181 * e, 32 * e), n.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e), fill_path(n, void 0, i[1], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(225 * e, 52 * e), n.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e), fill_path(n, void 0, i[1], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(34 * e, 134 * e), n.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e), fill_path(n, void 0, i[1], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(249 * e, 135 * e), n.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e), fill_path(n, void 0, i[1], 20 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(56 * e, 50 * e), n.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e), fill_path(n, void 0, i[1], 20 * e), circle(n, 101 * e, 155 * e, 20.591260281974 * e), fill_path(n, i[3]), circle(n, 180 * e, 155 * e, 20.591260281974 * e), fill_path(n, i[3]), circle(n, 95 * e, 148 * e, 7.211102550927978 * e), fill_path(n, i[4]), circle(n, 173 * e, 148 * e, 7.211102550927978 * e), fill_path(n, i[4]), 1 === r && (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(191 * e, 107 * e), n.bezierCurveTo(180 * e, 104 * e, 175 * e, 101 * e, 180 * e, 95 * e), n.bezierCurveTo(180 * e, 95 * e, 181 * e, 99 * e, 188 * e, 103 * e), n.bezierCurveTo(191 * e, 101 * e, 191 * e, 95 * e, 190 * e, 91 * e), n.bezierCurveTo(190 * e, 91 * e, 196 * e, 89 * e, 195 * e, 99 * e), n.closePath(), fill_path(n, i[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(206 * e, 98 * e), n.bezierCurveTo(203 * e, 95 * e, 200 * e, 93 * e, 198 * e, 101 * e), n.bezierCurveTo(194 * e, 109 * e, 193 * e, 109 * e, 196 * e, 110 * e), n.bezierCurveTo(206 * e, 115 * e, 209 * e, 114 * e, 211 * e, 111 * e), n.bezierCurveTo(211 * e, 106 * e, 208 * e, 108 * e, 203 * e, 108 * e), n.bezierCurveTo(193 * e, 107 * e, 204 * e, 101 * e, 206 * e, 99 * e), n.closePath(), fill_path(n, i[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(172 * e, 111 * e), n.bezierCurveTo(172 * e, 106 * e, 174 * e, 105 * e, 185 * e, 109 * e), n.bezierCurveTo(190 * e, 109 * e, 189 * e, 114 * e, 185 * e, 120 * e), n.bezierCurveTo(181 * e, 125 * e, 180 * e, 126 * e, 176 * e, 122 * e), n.bezierCurveTo(182 * e, 119 * e, 187 * e, 110 * e, 182 * e, 112 * e), n.closePath(), fill_path(n, i[2]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(202 * e, 125 * e), n.bezierCurveTo(197 * e, 117 * e, 193 * e, 116 * e, 193 * e, 120 * e), n.bezierCurveTo(192.5 * e, 124.5 * e, 192.5 * e, 124.5 * e, 192 * e, 129 * e), n.bezierCurveTo(188 * e, 129 * e, 187 * e, 124 * e, 189 * e, 120 * e), n.bezierCurveTo(191 * e, 110 * e, 192 * e, 110 * e, 200 * e, 116 * e), n.bezierCurveTo(208 * e, 120 * e, 207 * e, 123 * e, 202 * e, 125 * e), n.closePath(), fill_path(n, i[2])), a
}

function create_hurt_crab(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 283 * e, i.height = 224 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(100 * e, 33 * e), r.bezierCurveTo(85 * e, 62 * e, 102 * e, 66 * e, 110 * e, 83 * e), fill_path(r, void 0, t[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(181 * e, 32 * e), r.bezierCurveTo(196 * e, 62 * e, 181 * e, 68 * e, 178 * e, 69 * e), fill_path(r, void 0, t[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(225 * e, 52 * e), r.bezierCurveTo(228 * e, 78 * e, 207 * e, 77 * e, 192 * e, 88 * e), fill_path(r, void 0, t[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(34 * e, 134 * e), r.bezierCurveTo(46 * e, 111 * e, 57 * e, 111 * e, 79 * e, 109 * e), fill_path(r, void 0, t[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(249 * e, 135 * e), r.bezierCurveTo(233 * e, 107 * e, 212 * e, 112 * e, 202 * e, 115 * e), fill_path(r, void 0, t[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(56 * e, 50 * e), r.bezierCurveTo(56 * e, 82 * e, 73 * e, 82 * e, 93 * e, 89 * e), fill_path(r, void 0, t[0], 40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(93 * e, 55 * e), r.bezierCurveTo(124 * e, 29 * e, 179 * e, 44 * e, 188 * e, 52 * e), r.bezierCurveTo(207 * e, 64 * e, 226 * e, 94 * e, 231 * e, 118 * e), r.bezierCurveTo(236 * e, 145 * e, 222 * e, 184 * e, 193 * e, 192 * e), r.bezierCurveTo(147 * e, 201 * e, 116 * e, 200 * e, 93 * e, 193 * e), r.bezierCurveTo(61 * e, 180 * e, 48 * e, 147 * e, 50 * e, 123 * e), r.bezierCurveTo(50 * e, 93 * e, 76 * e, 66 * e, 92 * e, 56 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_crab_claw_left(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 131 * e, r.height = 121 * e, a.translate(0, 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(110 * e, 59 * e), a.bezierCurveTo(93 * e, 61.5 * e, 93 * e, 61.5 * e, 76 * e, 64 * e), a.bezierCurveTo(84.5 * e, 78.5 * e, 84.5 * e, 78.5 * e, 93 * e, 93 * e), a.bezierCurveTo(70 * e, 111 * e, 43 * e, 103 * e, 30 * e, 82 * e), a.bezierCurveTo(17 * e, 61 * e, 25 * e, 30 * e, 51 * e, 21 * e), a.bezierCurveTo(66 * e, 15 * e, 83 * e, 18 * e, 96 * e, 29 * e), a.bezierCurveTo(104 * e, 35 * e, 109 * e, 47 * e, 110 * e, 58 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(110 * e, 59 * e), a.bezierCurveTo(93 * e, 61.5 * e, 93 * e, 61.5 * e, 76 * e, 64 * e), a.bezierCurveTo(84.5 * e, 78.5 * e, 84.5 * e, 78.5 * e, 93 * e, 93 * e), a.bezierCurveTo(70 * e, 111 * e, 43 * e, 103 * e, 30 * e, 82 * e), a.bezierCurveTo(17 * e, 61 * e, 25 * e, 30 * e, 51 * e, 21 * e), a.bezierCurveTo(66 * e, 15 * e, 83 * e, 18 * e, 96 * e, 29 * e), a.bezierCurveTo(104 * e, 35 * e, 109 * e, 47 * e, 110 * e, 58 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), r
}

function create_crab_claw_right(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 104 * e, r.height = 112 * e, a.translate(0, 15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(16 * e, 44 * e), a.bezierCurveTo(30.5 * e, 48 * e, 30.5 * e, 48 * e, 45 * e, 52 * e), a.bezierCurveTo(36.5 * e, 63 * e, 36.5 * e, 63 * e, 28 * e, 74 * e), a.bezierCurveTo(32 * e, 86 * e, 61 * e, 92 * e, 78 * e, 76 * e), a.bezierCurveTo(93 * e, 62 * e, 92 * e, 40 * e, 80 * e, 26 * e), a.bezierCurveTo(65 * e, 11 * e, 42 * e, 16 * e, 34 * e, 21 * e), a.bezierCurveTo(22 * e, 27 * e, 16 * e, 39 * e, 16 * e, 44 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(16 * e, 44 * e), a.bezierCurveTo(30.5 * e, 48 * e, 30.5 * e, 48 * e, 45 * e, 52 * e), a.bezierCurveTo(36.5 * e, 63 * e, 36.5 * e, 63 * e, 28 * e, 74 * e), a.bezierCurveTo(32 * e, 86 * e, 61 * e, 92 * e, 78 * e, 76 * e), a.bezierCurveTo(93 * e, 62 * e, 92 * e, 40 * e, 80 * e, 26 * e), a.bezierCurveTo(65 * e, 11 * e, 42 * e, 16 * e, 34 * e, 21 * e), a.bezierCurveTo(22 * e, 27 * e, 16 * e, 39 * e, 16 * e, 44 * e), a.closePath(), fill_path(a, i[1], i[2], 8 * e), r
}

function create_crab_stick(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 321 * e, r.height = 284 * e, a.translate(100 * e, 30 * e), a.translate(5 * e, 10 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(58 * e, 33 * e), a.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), a.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), a.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), a.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), a.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), a.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(58 * e, 33 * e), a.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), a.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), a.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), a.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), a.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), a.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(167 * e, 120 * e), a.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e), a.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e), a.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(25 * e, 64 * e), a.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e), a.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e), a.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e), a.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(161 * e, 141 * e), a.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e), a.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e), a.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e), a.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e), a.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e), a.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e), fill_path(a, void 0, i[4], 4 * e), a.translate(-100 * e, -30 * e), a.translate(10 * e, 70 * e), a.translate(5 * e, 10 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(58 * e, 33 * e), a.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), a.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), a.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), a.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), a.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), a.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(58 * e, 33 * e), a.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), a.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), a.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), a.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), a.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), a.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(167 * e, 120 * e), a.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e), a.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e), a.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(25 * e, 64 * e), a.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e), a.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e), a.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e), a.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(161 * e, 141 * e), a.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e), a.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e), a.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e), a.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e), a.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e), a.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e), fill_path(a, void 0, i[4], 4 * e), a.translate(20 * e, -80 * e), a.translate(5 * e, 10 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(58 * e, 33 * e), a.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), a.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), a.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), a.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), a.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), a.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(58 * e, 33 * e), a.bezierCurveTo(81 * e, 22 * e, 93 * e, 26 * e, 123 * e, 47 * e), a.bezierCurveTo(160 * e, 73 * e, 169 * e, 80 * e, 191 * e, 99 * e), a.bezierCurveTo(202 * e, 107 * e, 211 * e, 118 * e, 195 * e, 151 * e), a.bezierCurveTo(181 * e, 183 * e, 157 * e, 192 * e, 129 * e, 174 * e), a.bezierCurveTo(78 * e, 140 * e, 68 * e, 129 * e, 37 * e, 94 * e), a.bezierCurveTo(15 * e, 68 * e, 25 * e, 52 * e, 56 * e, 34 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(167 * e, 120 * e), a.bezierCurveTo(196 * e, 106 * e, 207 * e, 111 * e, 199 * e, 135 * e), a.bezierCurveTo(185 * e, 172 * e, 166 * e, 187 * e, 145 * e, 179 * e), a.bezierCurveTo(118 * e, 166 * e, 127 * e, 139 * e, 166 * e, 121 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(25 * e, 64 * e), a.bezierCurveTo(59 * e, 96 * e, 97 * e, 128 * e, 129 * e, 151 * e), a.bezierCurveTo(126 * e, 163 * e, 134 * e, 174 * e, 142 * e, 180 * e), a.bezierCurveTo(114 * e, 170 * e, 68 * e, 134 * e, 31 * e, 85 * e), a.bezierCurveTo(24 * e, 71 * e, 24 * e, 70 * e, 25 * e, 65 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(161 * e, 141 * e), a.bezierCurveTo(181 * e, 131 * e, 186 * e, 135 * e, 173 * e, 152 * e), a.bezierCurveTo(163 * e, 163 * e, 155 * e, 161 * e, 151 * e, 150 * e), a.bezierCurveTo(147 * e, 140 * e, 155 * e, 131 * e, 175 * e, 125 * e), a.bezierCurveTo(190 * e, 120 * e, 196 * e, 121 * e, 189 * e, 143 * e), a.bezierCurveTo(182 * e, 167 * e, 169 * e, 174 * e, 157 * e, 174 * e), a.bezierCurveTo(138 * e, 172 * e, 139 * e, 162 * e, 140 * e, 156 * e), fill_path(a, void 0, i[4], 4 * e), r
}

function create_goldsword(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 290 * e, r.height = 525 * e, a.globalAlpha = t ? .5 : 1, a.translate(20 * e, 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(111 * e, 351 * e), a.bezierCurveTo(128.5 * e, 218.5 * e, 128.5 * e, 218.5 * e, 146 * e, 86 * e), a.bezierCurveTo(166.5 * e, 66.5 * e, 166.5 * e, 66.5 * e, 187 * e, 47 * e), a.bezierCurveTo(201 * e, 71.5 * e, 201 * e, 71.5 * e, 215 * e, 96 * e), a.bezierCurveTo(193 * e, 228.5 * e, 193 * e, 228.5 * e, 171 * e, 361 * e), a.closePath(), fill_path(a, i[0]), a.save(), a.translate(129.5 * e, 424 * e), a.rotate(.16), round_rect(a, -15.5 * e, -63 * e, 31 * e, 126 * e, 10 * e), a.restore(), fill_path(a, i[0]), circle(a, 121 * e, 480 * e, 20.396078054371138 * e), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(90 * e, 311 * e), a.bezierCurveTo(95 * e, 324 * e, 95 * e, 324 * e, 100 * e, 337 * e), a.bezierCurveTo(141.5 * e, 345.5 * e, 141.5 * e, 345.5 * e, 183 * e, 354 * e), a.bezierCurveTo(193.5 * e, 342.5 * e, 193.5 * e, 342.5 * e, 204 * e, 331 * e), a.bezierCurveTo(202 * e, 354 * e, 202 * e, 354 * e, 200 * e, 377 * e), a.bezierCurveTo(147 * e, 388 * e, 106 * e, 371 * e, 79 * e, 356 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-20 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(111 * e, 351 * e), a.bezierCurveTo(128.5 * e, 218.5 * e, 128.5 * e, 218.5 * e, 146 * e, 86 * e), a.bezierCurveTo(166.5 * e, 66.5 * e, 166.5 * e, 66.5 * e, 187 * e, 47 * e), a.bezierCurveTo(201 * e, 71.5 * e, 201 * e, 71.5 * e, 215 * e, 96 * e), a.bezierCurveTo(193 * e, 228.5 * e, 193 * e, 228.5 * e, 171 * e, 361 * e), a.closePath(), fill_path(a, i[1], i[2], 12.5 * e), a.save(), a.translate(129.5 * e, 424 * e), a.rotate(.16), round_rect(a, -15.5 * e, -63 * e, 31 * e, 126 * e, 10 * e), a.restore(), fill_path(a, i[4], i[5], 12.5 * e), circle(a, 121 * e, 480 * e, 20.396078054371138 * e), fill_path(a, i[4], i[5], 12.5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(90 * e, 311 * e), a.bezierCurveTo(95 * e, 324 * e, 95 * e, 324 * e, 100 * e, 337 * e), a.bezierCurveTo(141.5 * e, 345.5 * e, 141.5 * e, 345.5 * e, 183 * e, 354 * e), a.bezierCurveTo(193.5 * e, 342.5 * e, 193.5 * e, 342.5 * e, 204 * e, 331 * e), a.bezierCurveTo(202 * e, 354 * e, 202 * e, 354 * e, 200 * e, 377 * e), a.bezierCurveTo(147 * e, 388 * e, 106 * e, 371 * e, 79 * e, 356 * e), a.closePath(), fill_path(a, i[1], i[2], 12.5 * e), r
}

function create_diamondsword(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 290 * e, r.height = 525 * e, a.globalAlpha = t ? .5 : 1, a.translate(20 * e, 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(112 * e, 356 * e), a.bezierCurveTo(124 * e, 220.5 * e, 124 * e, 220.5 * e, 136 * e, 85 * e), a.bezierCurveTo(162.5 * e, 65.5 * e, 162.5 * e, 65.5 * e, 189 * e, 46 * e), a.bezierCurveTo(208.5 * e, 72.5 * e, 208.5 * e, 72.5 * e, 228 * e, 99 * e), a.bezierCurveTo(200 * e, 232 * e, 200 * e, 232 * e, 172 * e, 365 * e), a.closePath(), fill_path(a, i[0]), a.save(), a.translate(131 * e, 423 * e), a.rotate(.16), round_rect(a, -14 * e, -53 * e, 28 * e, 106 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(122 * e, 480 * e), a.rotate(1.72), round_regular_polygon(a, 4, 26.476404589747453 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(210 * e, 387 * e), a.bezierCurveTo(138 * e, 376 * e, 138 * e, 376 * e, 66 * e, 365 * e), a.bezierCurveTo(76 * e, 355 * e, 76 * e, 355 * e, 86 * e, 345 * e), a.bezierCurveTo(99 * e, 346.5 * e, 99 * e, 346.5 * e, 112 * e, 348 * e), a.bezierCurveTo(128.5 * e, 344 * e, 128.5 * e, 344 * e, 145 * e, 340 * e), a.bezierCurveTo(158 * e, 348 * e, 158 * e, 348 * e, 171 * e, 356 * e), a.bezierCurveTo(184 * e, 358 * e, 184 * e, 358 * e, 197 * e, 360 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(129 * e, 338 * e), a.bezierCurveTo(137 * e, 336 * e, 137 * e, 336 * e, 145 * e, 334 * e), a.bezierCurveTo(152.5 * e, 338 * e, 152.5 * e, 338 * e, 160 * e, 342 * e), a.bezierCurveTo(184 * e, 224 * e, 184 * e, 224 * e, 208 * e, 106 * e), a.bezierCurveTo(197 * e, 88 * e, 187 * e, 70 * e, 186 * e, 70 * e), a.bezierCurveTo(169.5 * e, 83 * e, 169.5 * e, 83 * e, 153 * e, 96 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-20 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(112 * e, 356 * e), a.bezierCurveTo(124 * e, 220.5 * e, 124 * e, 220.5 * e, 136 * e, 85 * e), a.bezierCurveTo(162.5 * e, 65.5 * e, 162.5 * e, 65.5 * e, 189 * e, 46 * e), a.bezierCurveTo(208.5 * e, 72.5 * e, 208.5 * e, 72.5 * e, 228 * e, 99 * e), a.bezierCurveTo(200 * e, 232 * e, 200 * e, 232 * e, 172 * e, 365 * e), a.closePath(), fill_path(a, i[1], i[2], 12.5 * e), a.save(), a.translate(131 * e, 423 * e), a.rotate(.16), round_rect(a, -14 * e, -53 * e, 28 * e, 106 * e, 10 * e), a.restore(), fill_path(a, i[4], i[5], 12.5 * e), a.save(), a.translate(122 * e, 480 * e), a.rotate(1.72), round_regular_polygon(a, 4, 26.476404589747453 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 12.5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(210 * e, 387 * e), a.bezierCurveTo(138 * e, 376 * e, 138 * e, 376 * e, 66 * e, 365 * e), a.bezierCurveTo(76 * e, 355 * e, 76 * e, 355 * e, 86 * e, 345 * e), a.bezierCurveTo(99 * e, 346.5 * e, 99 * e, 346.5 * e, 112 * e, 348 * e), a.bezierCurveTo(128.5 * e, 344 * e, 128.5 * e, 344 * e, 145 * e, 340 * e), a.bezierCurveTo(158 * e, 348 * e, 158 * e, 348 * e, 171 * e, 356 * e), a.bezierCurveTo(184 * e, 358 * e, 184 * e, 358 * e, 197 * e, 360 * e), a.closePath(), fill_path(a, i[1], i[2], 12.5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(129 * e, 338 * e), a.bezierCurveTo(137 * e, 336 * e, 137 * e, 336 * e, 145 * e, 334 * e), a.bezierCurveTo(152.5 * e, 338 * e, 152.5 * e, 338 * e, 160 * e, 342 * e), a.bezierCurveTo(184 * e, 224 * e, 184 * e, 224 * e, 208 * e, 106 * e), a.bezierCurveTo(197 * e, 88 * e, 187 * e, 70 * e, 186 * e, 70 * e), a.bezierCurveTo(169.5 * e, 83 * e, 169.5 * e, 83 * e, 153 * e, 96 * e), a.closePath(), fill_path(a, i[3]), r
}

function create_amesword(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 290 * e, r.height = 525 * e, a.globalAlpha = t ? .5 : 1, a.translate(20 * e, 20 * e), a.translate(-20 * e, -20 * e), a.save(), a.translate(132 * e, 423 * e), a.rotate(.16), round_rect(a, -14 * e, -61 * e, 28 * e, 122 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(100 * e, 344 * e), a.bezierCurveTo(123 * e, 214 * e, 123 * e, 214 * e, 146 * e, 84 * e), a.bezierCurveTo(166.5 * e, 65 * e, 166.5 * e, 65 * e, 187 * e, 46 * e), a.bezierCurveTo(201 * e, 71 * e, 201 * e, 71 * e, 215 * e, 96 * e), a.bezierCurveTo(199.5 * e, 226.5 * e, 199.5 * e, 226.5 * e, 184 * e, 357 * e), a.bezierCurveTo(162.5 * e, 362.5 * e, 162.5 * e, 362.5 * e, 141 * e, 368 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(75 * e, 328 * e), a.bezierCurveTo(88 * e, 336.5 * e, 88 * e, 336.5 * e, 101 * e, 345 * e), a.bezierCurveTo(123.5 * e, 337.5 * e, 123.5 * e, 337.5 * e, 146 * e, 330 * e), a.bezierCurveTo(165 * e, 343.5 * e, 165 * e, 343.5 * e, 184 * e, 357 * e), a.bezierCurveTo(198.5 * e, 353 * e, 198.5 * e, 353 * e, 213 * e, 349 * e), a.bezierCurveTo(200.5 * e, 364.5 * e, 200.5 * e, 364.5 * e, 188 * e, 380 * e), a.bezierCurveTo(163 * e, 380.5 * e, 163 * e, 380.5 * e, 138 * e, 381 * e), a.bezierCurveTo(112 * e, 373.5 * e, 112 * e, 373.5 * e, 86 * e, 366 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(121 * e, 332 * e), a.bezierCurveTo(133.5 * e, 327.5 * e, 133.5 * e, 327.5 * e, 146 * e, 323 * e), a.bezierCurveTo(157 * e, 330.5 * e, 157 * e, 330.5 * e, 168 * e, 338 * e), a.bezierCurveTo(182.5 * e, 219.5 * e, 182.5 * e, 219.5 * e, 197 * e, 101 * e), a.bezierCurveTo(190 * e, 84.5 * e, 190 * e, 84.5 * e, 183 * e, 68 * e), a.bezierCurveTo(172.5 * e, 81 * e, 172.5 * e, 81 * e, 162 * e, 94 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105 * e, 463 * e), a.bezierCurveTo(124.5 * e, 466 * e, 124.5 * e, 466 * e, 144 * e, 469 * e), a.bezierCurveTo(145.5 * e, 478.5 * e, 145.5 * e, 478.5 * e, 147 * e, 488 * e), a.bezierCurveTo(133.5 * e, 495.5 * e, 133.5 * e, 495.5 * e, 120 * e, 503 * e), a.bezierCurveTo(108.5 * e, 492 * e, 108.5 * e, 492 * e, 97 * e, 481 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-20 * e, -20 * e), a.save(), a.translate(132 * e, 423 * e), a.rotate(.16), round_rect(a, -14 * e, -61 * e, 28 * e, 122 * e, 10 * e), a.restore(), fill_path(a, i[4], i[5], 12.5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(100 * e, 344 * e), a.bezierCurveTo(123 * e, 214 * e, 123 * e, 214 * e, 146 * e, 84 * e), a.bezierCurveTo(166.5 * e, 65 * e, 166.5 * e, 65 * e, 187 * e, 46 * e), a.bezierCurveTo(201 * e, 71 * e, 201 * e, 71 * e, 215 * e, 96 * e), a.bezierCurveTo(199.5 * e, 226.5 * e, 199.5 * e, 226.5 * e, 184 * e, 357 * e), a.bezierCurveTo(162.5 * e, 362.5 * e, 162.5 * e, 362.5 * e, 141 * e, 368 * e), a.closePath(), fill_path(a, i[1], i[2], 12.5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(75 * e, 328 * e), a.bezierCurveTo(88 * e, 336.5 * e, 88 * e, 336.5 * e, 101 * e, 345 * e), a.bezierCurveTo(123.5 * e, 337.5 * e, 123.5 * e, 337.5 * e, 146 * e, 330 * e), a.bezierCurveTo(165 * e, 343.5 * e, 165 * e, 343.5 * e, 184 * e, 357 * e), a.bezierCurveTo(198.5 * e, 353 * e, 198.5 * e, 353 * e, 213 * e, 349 * e), a.bezierCurveTo(200.5 * e, 364.5 * e, 200.5 * e, 364.5 * e, 188 * e, 380 * e), a.bezierCurveTo(163 * e, 380.5 * e, 163 * e, 380.5 * e, 138 * e, 381 * e), a.bezierCurveTo(112 * e, 373.5 * e, 112 * e, 373.5 * e, 86 * e, 366 * e), a.closePath(), fill_path(a, i[1], i[2], 12.5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(121 * e, 332 * e), a.bezierCurveTo(133.5 * e, 327.5 * e, 133.5 * e, 327.5 * e, 146 * e, 323 * e), a.bezierCurveTo(157 * e, 330.5 * e, 157 * e, 330.5 * e, 168 * e, 338 * e), a.bezierCurveTo(182.5 * e, 219.5 * e, 182.5 * e, 219.5 * e, 197 * e, 101 * e), a.bezierCurveTo(190 * e, 84.5 * e, 190 * e, 84.5 * e, 183 * e, 68 * e), a.bezierCurveTo(172.5 * e, 81 * e, 172.5 * e, 81 * e, 162 * e, 94 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105 * e, 463 * e), a.bezierCurveTo(124.5 * e, 466 * e, 124.5 * e, 466 * e, 144 * e, 469 * e), a.bezierCurveTo(145.5 * e, 478.5 * e, 145.5 * e, 478.5 * e, 147 * e, 488 * e), a.bezierCurveTo(133.5 * e, 495.5 * e, 133.5 * e, 495.5 * e, 120 * e, 503 * e), a.bezierCurveTo(108.5 * e, 492 * e, 108.5 * e, 492 * e, 97 * e, 481 * e), a.closePath(), fill_path(a, i[1], i[2], 12.5 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(143 * e, 346 * e), a.bezierCurveTo(125 * e, 352 * e, 125 * e, 352 * e, 107 * e, 358 * e), a.bezierCurveTo(124 * e, 363 * e, 140 * e, 368 * e, 141 * e, 368 * e), a.bezierCurveTo(156.5 * e, 367 * e, 156.5 * e, 367 * e, 172 * e, 366 * e), a.closePath(), fill_path(a, i[3]), r
}

function create_sugar_can(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 154 * e, r.height = 261 * e, a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(125 * e, 69 * e), a.bezierCurveTo(123.5 * e, 141.5 * e, 123.5 * e, 141.5 * e, 122 * e, 214 * e), a.bezierCurveTo(123 * e, 228 * e, 119 * e, 239 * e, 102 * e, 239 * e), a.bezierCurveTo(90 * e, 238 * e, 86 * e, 225 * e, 89 * e, 197 * e), a.bezierCurveTo(92 * e, 159 * e, 92 * e, 141 * e, 94 * e, 84 * e), a.bezierCurveTo(94 * e, 58 * e, 87 * e, 50 * e, 73 * e, 52 * e), a.bezierCurveTo(53 * e, 54 * e, 54 * e, 92 * e, 34 * e, 87 * e), a.bezierCurveTo(13 * e, 85 * e, 22 * e, 58 * e, 34 * e, 40 * e), a.bezierCurveTo(44 * e, 24 * e, 68 * e, 17 * e, 86 * e, 21 * e), a.bezierCurveTo(111 * e, 23 * e, 123 * e, 39 * e, 125 * e, 67 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(125 * e, 69 * e), a.bezierCurveTo(123.5 * e, 141.5 * e, 123.5 * e, 141.5 * e, 122 * e, 214 * e), a.bezierCurveTo(123 * e, 228 * e, 119 * e, 239 * e, 102 * e, 239 * e), a.bezierCurveTo(90 * e, 238 * e, 86 * e, 225 * e, 89 * e, 197 * e), a.bezierCurveTo(92 * e, 159 * e, 92 * e, 141 * e, 94 * e, 84 * e), a.bezierCurveTo(94 * e, 58 * e, 87 * e, 50 * e, 73 * e, 52 * e), a.bezierCurveTo(53 * e, 54 * e, 54 * e, 92 * e, 34 * e, 87 * e), a.bezierCurveTo(13 * e, 85 * e, 22 * e, 58 * e, 34 * e, 40 * e), a.bezierCurveTo(44 * e, 24 * e, 68 * e, 17 * e, 86 * e, 21 * e), a.bezierCurveTo(111 * e, 23 * e, 123 * e, 39 * e, 125 * e, 67 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(31 * e, 43 * e), a.bezierCurveTo(31 * e, 61 * e, 43 * e, 70 * e, 51 * e, 75 * e), a.bezierCurveTo(48 * e, 84 * e, 41 * e, 89 * e, 33 * e, 86 * e), a.bezierCurveTo(23 * e, 88 * e, 20 * e, 76 * e, 23 * e, 62 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(45 * e, 29 * e), a.bezierCurveTo(49 * e, 45 * e, 61 * e, 54 * e, 64 * e, 55 * e), a.bezierCurveTo(67.5 * e, 53 * e, 67.5 * e, 53 * e, 71 * e, 51 * e), a.bezierCurveTo(80 * e, 44 * e, 83 * e, 33 * e, 82 * e, 20 * e), a.bezierCurveTo(59 * e, 17 * e, 51 * e, 23 * e, 45 * e, 30 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(86 * e, 56 * e), a.bezierCurveTo(90 * e, 33 * e, 103 * e, 25 * e, 105 * e, 27 * e), a.bezierCurveTo(116 * e, 31 * e, 121 * e, 45 * e, 122 * e, 50 * e), a.bezierCurveTo(112 * e, 62 * e, 103 * e, 63 * e, 91 * e, 62 * e), a.bezierCurveTo(89 * e, 59.5 * e, 89 * e, 59.5 * e, 87 * e, 57 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(93 * e, 81 * e), a.bezierCurveTo(109 * e, 82 * e, 123 * e, 70 * e, 124 * e, 63 * e), a.bezierCurveTo(124 * e, 75.5 * e, 124 * e, 75.5 * e, 124 * e, 88 * e), a.bezierCurveTo(119 * e, 99 * e, 103 * e, 103 * e, 94 * e, 103 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(93 * e, 124 * e), a.bezierCurveTo(108 * e, 125 * e, 122 * e, 113 * e, 124 * e, 106 * e), a.bezierCurveTo(124 * e, 119 * e, 124 * e, 129 * e, 124 * e, 132 * e), a.bezierCurveTo(110 * e, 147 * e, 94 * e, 148 * e, 90 * e, 147 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(90 * e, 170 * e), a.bezierCurveTo(104 * e, 166 * e, 122 * e, 158 * e, 122 * e, 151 * e), a.bezierCurveTo(122 * e, 162.5 * e, 122 * e, 162.5 * e, 122 * e, 174 * e), a.bezierCurveTo(111 * e, 191 * e, 97 * e, 191 * e, 89 * e, 191 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(88 * e, 208 * e), a.bezierCurveTo(100 * e, 209 * e, 115 * e, 205 * e, 122 * e, 193 * e), a.bezierCurveTo(122 * e, 205.5 * e, 122 * e, 205.5 * e, 122 * e, 218 * e), a.bezierCurveTo(115 * e, 229 * e, 103 * e, 235 * e, 90 * e, 228 * e), a.bezierCurveTo(88 * e, 224 * e, 88 * e, 217 * e, 88 * e, 211 * e), a.closePath(), fill_path(a, i[3]), a.globalAlpha = .4, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(22 * e, 81 * e), a.bezierCurveTo(32 * e, 84 * e, 41 * e, 81 * e, 45 * e, 68 * e), a.bezierCurveTo(50 * e, 50 * e, 62 * e, 40 * e, 79 * e, 43 * e), a.bezierCurveTo(95 * e, 45 * e, 102 * e, 58 * e, 101 * e, 81 * e), a.bezierCurveTo(99.5 * e, 120.5 * e, 99.5 * e, 120.5 * e, 98 * e, 160 * e), a.bezierCurveTo(96.5 * e, 191.5 * e, 96.5 * e, 191.5 * e, 95 * e, 223 * e), a.bezierCurveTo(93 * e, 232 * e, 101 * e, 235 * e, 108 * e, 238 * e), a.bezierCurveTo(100 * e, 240 * e, 90 * e, 233 * e, 90 * e, 224 * e), a.bezierCurveTo(92 * e, 157 * e, 92 * e, 157 * e, 94 * e, 90 * e), a.bezierCurveTo(94 * e, 56 * e, 89 * e, 53 * e, 77 * e, 51 * e), a.bezierCurveTo(58 * e, 50 * e, 54 * e, 59 * e, 49 * e, 75 * e), a.bezierCurveTo(44 * e, 91 * e, 28 * e, 90 * e, 23 * e, 81 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(82 * e, 123 * e), a.bezierCurveTo(88 * e, 130 * e, 88 * e, 127 * e, 94 * e, 128 * e), a.bezierCurveTo(91 * e, 136 * e, 94 * e, 137 * e, 99 * e, 142 * e), a.bezierCurveTo(97 * e, 149 * e, 99 * e, 152 * e, 105 * e, 155 * e), a.bezierCurveTo(107 * e, 159 * e, 113 * e, 159 * e, 120 * e, 158 * e), a.bezierCurveTo(121 * e, 160 * e, 125 * e, 163 * e, 132 * e, 163 * e), a.bezierCurveTo(133 * e, 166 * e, 136 * e, 169 * e, 138 * e, 170 * e), a.bezierCurveTo(133 * e, 171 * e, 132 * e, 172 * e, 129 * e, 174 * e), a.bezierCurveTo(122 * e, 170 * e, 120 * e, 170 * e, 116 * e, 174 * e), a.bezierCurveTo(108 * e, 170.5 * e, 108 * e, 170.5 * e, 100 * e, 167 * e), a.bezierCurveTo(95 * e, 172 * e, 94 * e, 179 * e, 95 * e, 184 * e), a.bezierCurveTo(87 * e, 185 * e, 87 * e, 189 * e, 88 * e, 194 * e), a.bezierCurveTo(82 * e, 194 * e, 81 * e, 195 * e, 79 * e, 197 * e), a.bezierCurveTo(78 * e, 192 * e, 78 * e, 191 * e, 77 * e, 189 * e), a.bezierCurveTo(81 * e, 185 * e, 82 * e, 183 * e, 80 * e, 176 * e), a.bezierCurveTo(89 * e, 170 * e, 92 * e, 168 * e, 95 * e, 163 * e), a.bezierCurveTo(91 * e, 151 * e, 88 * e, 151 * e, 82 * e, 147 * e), a.bezierCurveTo(85 * e, 142 * e, 85 * e, 137 * e, 81 * e, 133 * e), a.bezierCurveTo(84 * e, 127 * e, 84 * e, 125 * e, 82 * e, 124 * e), a.closePath(), fill_path(a, i[4], i[5], 4 * e), circle(a, 107 * e, 152 * e, 9 * e), fill_path(a, i[6]), circle(a, 105 * e, 173 * e, 9 * e), fill_path(a, i[6]), circle(a, 87 * e, 161 * e, 9 * e), fill_path(a, i[6]), circle(a, 106 * e, 147 * e, 4 * e), fill_path(a, i[7]), circle(a, 104 * e, 167 * e, 4 * e), fill_path(a, i[7]), circle(a, 86 * e, 154 * e, 4 * e), fill_path(a, i[7]), r
}

function create_cookie(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 350 * e, r.height = 140 * e, a.translate(-50 * e, -150 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(184.5 * e, 222.0625 * e), a.bezierCurveTo(185.5 * e, 184.0625 * e, 302.5 * e, 171.0625 * e, 313.5 * e, 222.0625 * e), a.bezierCurveTo(330.5 * e, 263.0625 * e, 181.5 * e, 274.0625 * e, 184.5 * e, 223.0625 * e), a.closePath(), fill_path(a, i[0], i[1], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(131.5 * e, 241.0625 * e), a.bezierCurveTo(144.5 * e, 278.0625 * e, 270.5 * e, 209.0625 * e, 228.5 * e, 174.0625 * e), a.bezierCurveTo(196.5 * e, 147.0625 * e, 117.5 * e, 196.0625 * e, 131.5 * e, 240.0625 * e), a.closePath(), fill_path(a, i[0], i[1], 8 * e), circle(a, 270.5 * e, 225.0625 * e, 15.811388300841896 * e), fill_path(a, i[2]), circle(a, 243.5 * e, 225.0625 * e, 6.082762530298219 * e), fill_path(a, i[2]), circle(a, 255.5 * e, 210.0625 * e, 10.816653826391969 * e), fill_path(a, i[2]), circle(a, 167.5 * e, 215.0625 * e, 15.297058540778355 * e), fill_path(a, i[2]), circle(a, 176.5 * e, 204.0625 * e, 7.280109889280518 * e), fill_path(a, i[2]), circle(a, 206.5 * e, 189.0625 * e, 7.280109889280518 * e), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(151.5 * e, 212.0625 * e), a.bezierCurveTo(161.5 * e, 204.0625 * e, 173.5 * e, 214.0625 * e, 158.5 * e, 221.0625 * e), a.bezierCurveTo(145.5 * e, 228.0625 * e, 144.5 * e, 216.0625 * e, 151.5 * e, 212.0625 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(194.5 * e, 209.0625 * e), a.bezierCurveTo(205.5 * e, 202.0625 * e, 215.5 * e, 207.0625 * e, 199.5 * e, 217.0625 * e), a.bezierCurveTo(187.5 * e, 224.0625 * e, 182.5 * e, 217.0625 * e, 194.5 * e, 209.0625 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(188.5 * e, 183.0625 * e), a.bezierCurveTo(201.5 * e, 176.0625 * e, 213.5 * e, 187.0625 * e, 193.5 * e, 193.0625 * e), a.bezierCurveTo(185.5 * e, 194.0625 * e, 175.5 * e, 189.0625 * e, 188.5 * e, 183.0625 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(261.5 * e, 202.0625 * e), a.bezierCurveTo(274.5 * e, 201.0625 * e, 282.5 * e, 214.0625 * e, 261.5 * e, 215.0625 * e), a.bezierCurveTo(246.5 * e, 214.0625 * e, 248.5 * e, 203.0625 * e, 261.5 * e, 202.0625 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(240.5 * e, 231.0625 * e), a.bezierCurveTo(255.5 * e, 231.0625 * e, 254.5 * e, 243.0625 * e, 240.5 * e, 242.0625 * e), a.bezierCurveTo(225.5 * e, 239.0625 * e, 225.5 * e, 232.0625 * e, 240.5 * e, 231.0625 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), r
}

function create_candy(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 217 * e, r.height = 215 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79 * e, 113 * e), a.bezierCurveTo(135 * e, 98 * e, 136 * e, 96 * e, 142 * e, 97 * e), a.bezierCurveTo(167 * e, 106 * e, 167 * e, 106 * e, 171 * e, 109 * e), a.bezierCurveTo(173 * e, 120 * e, 173 * e, 134 * e, 169 * e, 141 * e), a.bezierCurveTo(140 * e, 149.5 * e, 140 * e, 149.5 * e, 111 * e, 158 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(154 * e, 103 * e), a.bezierCurveTo(167 * e, 91 * e, 175 * e, 87 * e, 176 * e, 94 * e), a.bezierCurveTo(175 * e, 102 * e, 176 * e, 102 * e, 186 * e, 103 * e), a.bezierCurveTo(191 * e, 104 * e, 192 * e, 105 * e, 185 * e, 116 * e), a.bezierCurveTo(183 * e, 120 * e, 191 * e, 124 * e, 189 * e, 129 * e), a.bezierCurveTo(185 * e, 139 * e, 178 * e, 134 * e, 166 * e, 131 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(60 * e, 46 * e), a.bezierCurveTo(60 * e, 34 * e, 60 * e, 29 * e, 56 * e, 19 * e), a.bezierCurveTo(52 * e, 12 * e, 52 * e, 16 * e, 49 * e, 24 * e), a.bezierCurveTo(48 * e, 27 * e, 46 * e, 28 * e, 39 * e, 27 * e), a.bezierCurveTo(33 * e, 26 * e, 34 * e, 31 * e, 35 * e, 37 * e), a.bezierCurveTo(36 * e, 41 * e, 27 * e, 46 * e, 29 * e, 52 * e), a.bezierCurveTo(36 * e, 55 * e, 35 * e, 56 * e, 31 * e, 59 * e), a.bezierCurveTo(27 * e, 65 * e, 32 * e, 64 * e, 35 * e, 62 * e), a.closePath(), fill_path(a, i[4], i[5], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(46 * e, 50 * e), a.bezierCurveTo(51 * e, 35 * e, 70 * e, 32 * e, 78 * e, 29 * e), a.bezierCurveTo(84 * e, 27 * e, 113 * e, 36 * e, 127 * e, 41 * e), a.bezierCurveTo(140 * e, 47 * e, 147 * e, 69 * e, 137 * e, 73 * e), a.bezierCurveTo(124 * e, 92 * e, 117 * e, 92 * e, 109 * e, 94 * e), a.bezierCurveTo(101 * e, 96 * e, 89 * e, 92 * e, 65 * e, 83 * e), a.bezierCurveTo(54 * e, 80 * e, 46 * e, 58 * e, 46 * e, 51 * e), a.closePath(), fill_path(a, i[4], i[5], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(51 * e, 40 * e), a.bezierCurveTo(49 * e, 34 * e, 49 * e, 34 * e, 47 * e, 28 * e), a.bezierCurveTo(38 * e, 28 * e, 34 * e, 27 * e, 37 * e, 37 * e), a.bezierCurveTo(43 * e, 40.5 * e, 43 * e, 40.5 * e, 49 * e, 44 * e), a.closePath(), fill_path(a, i[7]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(29 * e, 48 * e), a.bezierCurveTo(38 * e, 49 * e, 38 * e, 49 * e, 47 * e, 50 * e), a.bezierCurveTo(46.5 * e, 51.5 * e, 46.5 * e, 51.5 * e, 46 * e, 53 * e), a.bezierCurveTo(40 * e, 53.5 * e, 40 * e, 53.5 * e, 34 * e, 54 * e), a.bezierCurveTo(29 * e, 51 * e, 32 * e, 51.5 * e, 30 * e, 49 * e), a.closePath(), fill_path(a, i[7]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(89 * e, 61 * e), a.bezierCurveTo(101 * e, 70 * e, 109 * e, 90 * e, 102 * e, 90 * e), a.bezierCurveTo(97 * e, 91 * e, 87 * e, 91 * e, 60 * e, 80 * e), a.bezierCurveTo(48 * e, 65 * e, 46 * e, 56 * e, 48 * e, 53 * e), a.bezierCurveTo(50 * e, 52 * e, 66 * e, 56 * e, 89 * e, 61 * e), a.closePath(), fill_path(a, i[7]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(99 * e, 59 * e), a.bezierCurveTo(115 * e, 45 * e, 125 * e, 42 * e, 129 * e, 47 * e), a.bezierCurveTo(138 * e, 56 * e, 140 * e, 63 * e, 138 * e, 67 * e), a.bezierCurveTo(131 * e, 80 * e, 122 * e, 87 * e, 114 * e, 90 * e), a.bezierCurveTo(105 * e, 80 * e, 95 * e, 62 * e, 98 * e, 61 * e), a.closePath(), fill_path(a, i[7]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(118 * e, 62 * e), a.bezierCurveTo(139 * e, 45 * e, 153 * e, 40 * e, 150 * e, 48 * e), a.bezierCurveTo(145 * e, 57 * e, 157 * e, 63 * e, 157 * e, 70 * e), a.bezierCurveTo(157 * e, 74 * e, 142 * e, 77 * e, 142 * e, 85 * e), a.bezierCurveTo(143 * e, 91 * e, 141 * e, 92 * e, 135 * e, 90 * e), a.bezierCurveTo(132 * e, 90 * e, 132 * e, 96 * e, 124 * e, 99 * e), a.bezierCurveTo(118 * e, 93 * e, 116 * e, 77 * e, 116 * e, 64 * e), a.closePath(), fill_path(a, i[4], i[5], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(90 * e, 130 * e), a.bezierCurveTo(157 * e, 115 * e, 165 * e, 111 * e, 167 * e, 115 * e), a.bezierCurveTo(170 * e, 117 * e, 171 * e, 135 * e, 167 * e, 141 * e), a.bezierCurveTo(135.5 * e, 149.5 * e, 135.5 * e, 149.5 * e, 104 * e, 158 * e), a.closePath(), fill_path(a, i[8]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(53 * e, 119 * e), a.bezierCurveTo(46 * e, 120 * e, 40 * e, 118 * e, 34 * e, 116 * e), a.bezierCurveTo(28 * e, 111 * e, 41 * e, 112 * e, 39 * e, 108 * e), a.bezierCurveTo(36 * e, 100 * e, 49 * e, 102 * e, 53 * e, 95 * e), a.bezierCurveTo(57 * e, 84 * e, 58 * e, 85 * e, 63 * e, 93 * e), a.bezierCurveTo(68 * e, 96 * e, 72 * e, 94 * e, 80 * e, 88 * e), a.bezierCurveTo(80 * e, 96 * e, 78 * e, 107 * e, 66 * e, 115 * e), a.closePath(), fill_path(a, i[9], i[10], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(118 * e, 64 * e), a.bezierCurveTo(133.5 * e, 57 * e, 133.5 * e, 57 * e, 149 * e, 50 * e), a.bezierCurveTo(145 * e, 54 * e, 154 * e, 65 * e, 157 * e, 68 * e), a.bezierCurveTo(138.5 * e, 66.5 * e, 138.5 * e, 66.5 * e, 120 * e, 65 * e), a.closePath(), fill_path(a, i[8]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(118 * e, 65 * e), a.bezierCurveTo(129 * e, 77 * e, 129 * e, 77 * e, 140 * e, 89 * e), a.bezierCurveTo(131 * e, 89 * e, 130 * e, 92 * e, 128 * e, 96 * e), a.bezierCurveTo(123.5 * e, 82 * e, 123.5 * e, 82 * e, 119 * e, 68 * e), a.closePath(), fill_path(a, i[8]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(51 * e, 112 * e), a.bezierCurveTo(63 * e, 108 * e, 78 * e, 111 * e, 88 * e, 112 * e), a.bezierCurveTo(98 * e, 122 * e, 117 * e, 136 * e, 125 * e, 157 * e), a.bezierCurveTo(123 * e, 180 * e, 123 * e, 185 * e, 118 * e, 186 * e), a.bezierCurveTo(101 * e, 190 * e, 89 * e, 191 * e, 79 * e, 187 * e), a.bezierCurveTo(53 * e, 165 * e, 50 * e, 153 * e, 47 * e, 144 * e), a.bezierCurveTo(46 * e, 128 * e, 46 * e, 124 * e, 50 * e, 112 * e), a.closePath(), fill_path(a, i[9], i[10], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(50 * e, 114 * e), a.bezierCurveTo(81 * e, 149 * e, 80 * e, 147 * e, 80 * e, 149 * e), a.bezierCurveTo(82 * e, 155 * e, 80 * e, 182 * e, 74 * e, 182 * e), a.bezierCurveTo(60 * e, 172 * e, 52 * e, 157 * e, 47 * e, 144 * e), a.closePath(), fill_path(a, i[11], i[11], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(85 * e, 152 * e), a.bezierCurveTo(99 * e, 150 * e, 109 * e, 152 * e, 119 * e, 156 * e), a.bezierCurveTo(122 * e, 163 * e, 122 * e, 174 * e, 117 * e, 182 * e), a.closePath(), a.bezierCurveTo(93 * e, 188 * e, 82 * e, 187 * e, 83 * e, 179 * e), fill_path(a, i[11], i[11], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(104 * e, 166 * e), a.bezierCurveTo(133 * e, 165 * e, 142 * e, 168 * e, 137 * e, 173 * e), a.bezierCurveTo(127 * e, 177 * e, 137 * e, 195 * e, 126 * e, 196 * e), a.bezierCurveTo(112 * e, 195 * e, 112 * e, 194 * e, 109 * e, 199 * e), a.bezierCurveTo(105 * e, 205 * e, 102 * e, 195 * e, 96 * e, 197 * e), a.bezierCurveTo(84 * e, 201 * e, 88 * e, 198 * e, 90 * e, 187 * e), a.bezierCurveTo(96 * e, 171 * e, 97 * e, 170 * e, 103 * e, 167 * e), a.closePath(), fill_path(a, i[9], i[10], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105 * e, 168 * e), a.bezierCurveTo(118 * e, 172.5 * e, 118 * e, 172.5 * e, 131 * e, 177 * e), a.bezierCurveTo(133 * e, 190 * e, 132 * e, 199 * e, 116 * e, 194 * e), a.bezierCurveTo(110 * e, 182 * e, 110 * e, 182 * e, 104 * e, 170 * e), a.closePath(), fill_path(a, i[10]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(102 * e, 169 * e), a.bezierCurveTo(100.5 * e, 182 * e, 100.5 * e, 182 * e, 99 * e, 195 * e), a.bezierCurveTo(93.5 * e, 196.5 * e, 93.5 * e, 196.5 * e, 88 * e, 198 * e), a.bezierCurveTo(94 * e, 176 * e, 96 * e, 174 * e, 101 * e, 168 * e), a.closePath(), fill_path(a, i[9], i[9], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(64 * e, 107 * e), a.bezierCurveTo(64 * e, 101 * e, 64 * e, 101 * e, 64 * e, 95 * e), a.bezierCurveTo(57 * e, 86 * e, 57 * e, 84 * e, 53 * e, 97 * e), a.bezierCurveTo(55 * e, 103.5 * e, 55 * e, 103.5 * e, 57 * e, 110 * e), a.closePath(), fill_path(a, i[11], i[11], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(40 * e, 108 * e), a.bezierCurveTo(46.5 * e, 111 * e, 46.5 * e, 111 * e, 53 * e, 114 * e), a.bezierCurveTo(50.5 * e, 117 * e, 50.5 * e, 117 * e, 48 * e, 120 * e), a.bezierCurveTo(40.5 * e, 117.5 * e, 40.5 * e, 117.5 * e, 33 * e, 115 * e), a.bezierCurveTo(36 * e, 112 * e, 36 * e, 112 * e, 39 * e, 109 * e), a.closePath(), fill_path(a, i[11], i[11], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(189 * e, 106 * e), a.bezierCurveTo(178.5 * e, 110.5 * e, 178.5 * e, 110.5 * e, 168 * e, 115 * e), a.bezierCurveTo(168.5 * e, 119 * e, 168.5 * e, 119 * e, 169 * e, 123 * e), a.bezierCurveTo(179 * e, 124.5 * e, 179 * e, 124.5 * e, 189 * e, 126 * e), a.bezierCurveTo(182 * e, 118 * e, 183 * e, 115 * e, 188 * e, 106 * e), a.closePath(), fill_path(a, i[8]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(69 * e, 178 * e), a.bezierCurveTo(69 * e, 141 * e, 70 * e, 136 * e, 77 * e, 137 * e), a.bezierCurveTo(88 * e, 133 * e, 101 * e, 134 * e, 108 * e, 137 * e), fill_path(a, void 0, i[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 161 * e), a.bezierCurveTo(54 * e, 124 * e, 55 * e, 119 * e, 62 * e, 119 * e), a.bezierCurveTo(74 * e, 117 * e, 85 * e, 117 * e, 93 * e, 119 * e), fill_path(a, void 0, i[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(91 * e, 29 * e), a.bezierCurveTo(74 * e, 33 * e, 62 * e, 46 * e, 57 * e, 54 * e), a.bezierCurveTo(57 * e, 63 * e, 68 * e, 76 * e, 77 * e, 87 * e), fill_path(a, void 0, i[6], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(107 * e, 33 * e), a.bezierCurveTo(82 * e, 51 * e, 80 * e, 52 * e, 79 * e, 59 * e), a.bezierCurveTo(78 * e, 65 * e, 93 * e, 86 * e, 101 * e, 93 * e), fill_path(a, void 0, i[6], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(130 * e, 98 * e), a.bezierCurveTo(126.5 * e, 103 * e, 126.5 * e, 103 * e, 123 * e, 108 * e), a.bezierCurveTo(133.5 * e, 107 * e, 133.5 * e, 107 * e, 144 * e, 106 * e), a.bezierCurveTo(138.5 * e, 110 * e, 138.5 * e, 110 * e, 133 * e, 114 * e), a.bezierCurveTo(142 * e, 114 * e, 142 * e, 114 * e, 151 * e, 114 * e), a.bezierCurveTo(146.5 * e, 119.5 * e, 146.5 * e, 119.5 * e, 142 * e, 125 * e), a.bezierCurveTo(146.5 * e, 127 * e, 146.5 * e, 127 * e, 151 * e, 129 * e), a.bezierCurveTo(147.5 * e, 132 * e, 147.5 * e, 132 * e, 144 * e, 135 * e), a.bezierCurveTo(148 * e, 137 * e, 148 * e, 137 * e, 152 * e, 139 * e), a.bezierCurveTo(149 * e, 142.5 * e, 149 * e, 142.5 * e, 146 * e, 146 * e), fill_path(a, void 0, i[3], 4 * e), r
}

function create_ferrero_rocher(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 118 * e, r.height = 114 * e, a.translate(0, 10 * e), circle(a, 42 * e, 43 * e, 24.758836806279895 * e), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(65 * e, 90 * e), a.bezierCurveTo(72 * e, 91 * e, 75 * e, 92 * e, 71 * e, 96 * e), a.bezierCurveTo(65 * e, 98 * e, 65 * e, 94 * e, 65 * e, 91 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87 * e, 45 * e), a.bezierCurveTo(108 * e, 59 * e, 100 * e, 86 * e, 85 * e, 91 * e), a.bezierCurveTo(80 * e, 96 * e, 68 * e, 95 * e, 58 * e, 87 * e), a.bezierCurveTo(53 * e, 80 * e, 61 * e, 64 * e, 66 * e, 58 * e), a.bezierCurveTo(73 * e, 48 * e, 78 * e, 44 * e, 87 * e, 45 * e), a.closePath(), fill_path(a, i[0]), a.translate(0, -10 * e), circle(a, 42 * e, 43 * e, 24.758836806279895 * e), fill_path(a, i[1], i[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(65 * e, 90 * e), a.bezierCurveTo(72 * e, 91 * e, 75 * e, 92 * e, 71 * e, 96 * e), a.bezierCurveTo(65 * e, 98 * e, 65 * e, 94 * e, 65 * e, 91 * e), a.closePath(), fill_path(a, i[1], i[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87 * e, 45 * e), a.bezierCurveTo(108 * e, 59 * e, 100 * e, 86 * e, 85 * e, 91 * e), a.bezierCurveTo(80 * e, 96 * e, 68 * e, 95 * e, 58 * e, 87 * e), a.bezierCurveTo(53 * e, 80 * e, 61 * e, 64 * e, 66 * e, 58 * e), a.bezierCurveTo(73 * e, 48 * e, 78 * e, 44 * e, 87 * e, 45 * e), a.closePath(), fill_path(a, i[1], i[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 16 * e), a.bezierCurveTo(55 * e, 19 * e, 54 * e, 20 * e, 55 * e, 22 * e), a.bezierCurveTo(52 * e, 24.5 * e, 52 * e, 24.5 * e, 49 * e, 27 * e), a.bezierCurveTo(45 * e, 25 * e, 45 * e, 25 * e, 41 * e, 23 * e), a.bezierCurveTo(45 * e, 19 * e, 48 * e, 16 * e, 52 * e, 16 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(62 * e, 30 * e), a.bezierCurveTo(66 * e, 29 * e, 64 * e, 30 * e, 66 * e, 30 * e), a.bezierCurveTo(67 * e, 31 * e, 67 * e, 31 * e, 68 * e, 32 * e), a.bezierCurveTo(66.5 * e, 33.5 * e, 66.5 * e, 33.5 * e, 65 * e, 35 * e), a.bezierCurveTo(63.5 * e, 32.5 * e, 63.5 * e, 32.5 * e, 62 * e, 30 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(29 * e, 21 * e), a.bezierCurveTo(31 * e, 22 * e, 31 * e, 26 * e, 29 * e, 29 * e), a.bezierCurveTo(26 * e, 28.5 * e, 26 * e, 28.5 * e, 23 * e, 28 * e), a.bezierCurveTo(23 * e, 26.5 * e, 23 * e, 26.5 * e, 23 * e, 25 * e), a.bezierCurveTo(25 * e, 23 * e, 25 * e, 23 * e, 27 * e, 21 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(18 * e, 36 * e), a.bezierCurveTo(23 * e, 36 * e, 24 * e, 42 * e, 19 * e, 46 * e), a.bezierCurveTo(12 * e, 39 * e, 15 * e, 38 * e, 18 * e, 37 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 34 * e), a.bezierCurveTo(35 * e, 36 * e, 36 * e, 39 * e, 32 * e, 45 * e), a.bezierCurveTo(25 * e, 46 * e, 25 * e, 44 * e, 30 * e, 34 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(59 * e, 35 * e), a.bezierCurveTo(58 * e, 27 * e, 57 * e, 27 * e, 52 * e, 31 * e), a.bezierCurveTo(50 * e, 36 * e, 53 * e, 38 * e, 58 * e, 36 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(63 * e, 46 * e), a.bezierCurveTo(64.5 * e, 46.5 * e, 64.5 * e, 46.5 * e, 66 * e, 47 * e), a.bezierCurveTo(70 * e, 50 * e, 70 * e, 53 * e, 61 * e, 55 * e), a.bezierCurveTo(62 * e, 50.5 * e, 62 * e, 50.5 * e, 63 * e, 46 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41 * e, 42 * e), a.bezierCurveTo(47 * e, 41 * e, 53 * e, 47 * e, 46 * e, 51 * e), a.bezierCurveTo(38 * e, 49 * e, 39 * e, 46 * e, 41 * e, 43 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(44 * e, 57 * e), a.bezierCurveTo(54 * e, 57 * e, 54 * e, 58 * e, 55 * e, 61 * e), a.bezierCurveTo(54 * e, 63 * e, 52 * e, 64 * e, 48 * e, 65 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(20 * e, 52 * e), a.bezierCurveTo(25 * e, 51 * e, 27 * e, 50 * e, 28 * e, 54 * e), a.bezierCurveTo(27 * e, 58 * e, 24 * e, 58 * e, 22 * e, 58 * e), a.bezierCurveTo(21 * e, 55.5 * e, 21 * e, 55.5 * e, 20 * e, 53 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 61 * e), a.bezierCurveTo(37 * e, 61 * e, 39 * e, 63 * e, 39 * e, 68 * e), a.bezierCurveTo(36 * e, 68.5 * e, 36 * e, 68.5 * e, 33 * e, 69 * e), a.bezierCurveTo(30.5 * e, 67.5 * e, 30.5 * e, 67.5 * e, 28 * e, 66 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(88 * e, 45 * e), a.bezierCurveTo(90 * e, 46.5 * e, 90 * e, 46.5 * e, 92 * e, 48 * e), a.bezierCurveTo(92 * e, 50 * e, 92 * e, 50 * e, 92 * e, 52 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(96 * e, 53 * e), a.bezierCurveTo(97.5 * e, 55 * e, 97.5 * e, 55 * e, 99 * e, 57 * e), a.bezierCurveTo(97.5 * e, 59.5 * e, 97.5 * e, 59.5 * e, 96 * e, 62 * e), a.bezierCurveTo(93.5 * e, 60.5 * e, 93.5 * e, 60.5 * e, 91 * e, 59 * e), a.bezierCurveTo(91.5 * e, 57 * e, 91.5 * e, 57 * e, 92 * e, 55 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(92 * e, 71 * e), a.bezierCurveTo(94.5 * e, 70.5 * e, 94.5 * e, 70.5 * e, 97 * e, 70 * e), a.bezierCurveTo(98.5 * e, 72.5 * e, 98.5 * e, 72.5 * e, 100 * e, 75 * e), a.bezierCurveTo(97 * e, 76.5 * e, 97 * e, 76.5 * e, 94 * e, 78 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(95 * e, 82 * e), a.bezierCurveTo(96 * e, 83 * e, 96 * e, 83 * e, 97 * e, 84 * e), a.bezierCurveTo(97 * e, 85.5 * e, 97 * e, 85.5 * e, 97 * e, 87 * e), a.bezierCurveTo(93.5 * e, 87.5 * e, 93.5 * e, 87.5 * e, 90 * e, 88 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(86 * e, 72 * e), a.bezierCurveTo(89 * e, 76 * e, 88 * e, 81 * e, 85 * e, 82 * e), a.bezierCurveTo(80 * e, 80 * e, 82 * e, 78 * e, 85 * e, 72 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80 * e, 86 * e), a.bezierCurveTo(84 * e, 88 * e, 86 * e, 88 * e, 85 * e, 93 * e), a.bezierCurveTo(80 * e, 96 * e, 79 * e, 96 * e, 76 * e, 91 * e), a.closePath(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(84 * e, 46 * e), a.bezierCurveTo(93 * e, 51 * e, 91 * e, 62 * e, 80 * e, 78 * e), a.bezierCurveTo(74 * e, 86 * e, 66 * e, 90 * e, 60 * e, 86 * e), a.bezierCurveTo(55 * e, 79 * e, 57 * e, 73 * e, 67 * e, 57 * e), a.bezierCurveTo(71 * e, 51 * e, 79 * e, 44 * e, 84 * e, 46 * e), a.closePath(), fill_path(a, i[5], i[6], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(76 * e, 60 * e), a.bezierCurveTo(80 * e, 66 * e, 75 * e, 74 * e, 68 * e, 74 * e), a.bezierCurveTo(60 * e, 64 * e, 68 * e, 59 * e, 76 * e, 59 * e), a.closePath(), fill_path(a, i[7], i[8], 5 * e), r
}

function create_seed(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 70 * e,
        o = 90 * e,
        s = 4 * e,
        _ = 5 * e;
    return r.width = n, r.height = o, a.save(), a.translate(-80 * e, -70 * e + _), a.globalAlpha = .5, a.beginPath(), a.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e), a.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e), a.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e), a.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e), a.closePath(), fill_path(a, "#0d1b1c"), a.restore(), a.save(), a.translate(-80 * e, -70 * e + _), a.globalAlpha = .5, a.beginPath(), a.bezierCurveTo(112 * e, 109 * e, 111 * e, 100 * e, 106 * e, 93 * e), a.bezierCurveTo(104 * e, 90 * e, 91 * e, 87 * e, 91 * e, 87 * e), a.bezierCurveTo(91 * e, 88 * e, 91 * e, 96 * e, 94 * e, 102 * e), a.bezierCurveTo(97 * e, 108 * e, 106 * e, 112 * e, 113 * e, 112 * e), a.closePath(), fill_path(a, "#0d1b1c"), a.restore(), a.save(), a.translate(-80 * e, -70 * e + _), a.globalAlpha = .5, a.beginPath(), a.bezierCurveTo(108 * e, 120 * e, 100 * e, 119 * e, 91 * e, 127 * e), a.bezierCurveTo(83 * e, 134 * e, 82 * e, 146 * e, 83 * e, 146 * e), a.bezierCurveTo(84 * e, 146 * e, 98 * e, 142 * e, 103 * e, 138 * e), a.bezierCurveTo(107 * e, 135 * e, 110 * e, 130 * e, 112 * e, 121 * e), a.closePath(), fill_path(a, "#0d1b1c"), a.restore(), a.save(), a.translate(3 * e, -93 * e + _), a.rotate(Math.PI / 5), a.globalAlpha = .5, a.beginPath(), a.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e), a.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e), a.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e), a.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e), a.closePath(), fill_path(a, "#0d1b1c"), a.restore(), a.save(), a.translate(-80 * e, -70 * e), a.globalAlpha = 1, a.beginPath(), a.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e), a.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e), a.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e), a.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e), a.closePath(), fill_path(a, i[0], i[1], s), a.restore(), a.save(), a.translate(-80 * e, -70 * e), a.globalAlpha = 1, a.beginPath(), a.bezierCurveTo(112 * e, 109 * e, 111 * e, 100 * e, 106 * e, 93 * e), a.bezierCurveTo(104 * e, 90 * e, 91 * e, 87 * e, 91 * e, 87 * e), a.bezierCurveTo(91 * e, 88 * e, 91 * e, 96 * e, 94 * e, 102 * e), a.bezierCurveTo(97 * e, 108 * e, 106 * e, 112 * e, 113 * e, 112 * e), a.closePath(), fill_path(a, i[0], i[1], s), a.restore(), a.save(), a.translate(-80 * e, -70 * e), a.globalAlpha = 1, a.beginPath(), a.bezierCurveTo(108 * e, 120 * e, 100 * e, 119 * e, 91 * e, 127 * e), a.bezierCurveTo(83 * e, 134 * e, 82 * e, 146 * e, 83 * e, 146 * e), a.bezierCurveTo(84 * e, 146 * e, 98 * e, 142 * e, 103 * e, 138 * e), a.bezierCurveTo(107 * e, 135 * e, 110 * e, 130 * e, 112 * e, 121 * e), a.closePath(), fill_path(a, i[0], i[1], s), a.restore(), a.save(), a.translate(3 * e, -93 * e), a.rotate(Math.PI / 5), a.globalAlpha = 1, a.beginPath(), a.bezierCurveTo(130 * e, 79 * e, 132 * e, 86 * e, 130 * e, 93 * e), a.bezierCurveTo(128 * e, 100 * e, 121 * e, 107 * e, 120 * e, 107 * e), a.bezierCurveTo(120 * e, 107 * e, 115 * e, 98 * e, 115 * e, 92 * e), a.bezierCurveTo(115 * e, 86 * e, 119 * e, 76 * e, 127 * e, 73 * e), a.closePath(), fill_path(a, i[0], i[1], s), a.restore(), r
}

function create_info_box(e) {
    var t = document.createElement("canvas"),
        r = t.getContext("2d"),
        a = LANG[e];
    r.font = "20px Baloo Paaji";
    var n = 0;
    for (a.length >= 1 && (n = Math.max(0, r.measureText(a[0]).width)), r.font = "17px Baloo Paaji", a.length >= 2 && (n = Math.max(n, r.measureText(a[1]).width)), r.font = "14px Baloo Paaji", i = 2; i < a.length; i++) n = Math.max(n, r.measureText(a[i]).width);
    var o = n + 35,
        s = 0;
    if (s = 1 === a.length ? 55 : 2 === a.length ? 85 : 26 * (a.length - 2) + 85, t.width = o, t.height = s, round_rect(r, 0, 0, o, s, 10), r.fillStyle = "#000000", r.globalAlpha = .5, r.fill(), a.length >= 1 && (r.textBaseline = "middle", r.font = "20px Baloo Paaji", r.globalAlpha = 1, r.fillStyle = "#e2c340", r.fillText(a[0], 15, 28)), a.length >= 2 && (r.font = "17px Baloo Paaji", r.fillStyle = "#ffffff", r.fillText(a[1], 15, 55), s = 55), a.length >= 3)
        for (r.font = "14px Baloo Paaji", r.globalAlpha = .7, i = 2; i < a.length; i++) r.fillText(a[i], 15, s + 28), s += 26;
    return t
}

function create_welcome_text(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d");
    for (i.lineJoin = "round"; - 1 !== e.indexOf("\\n");) e = e.replace("\\n", "\n");
    e = e.split("\n"), color = [];
    var r = 18 * e.length + 10,
        a = 0;
    i.font = "14px Baloo Paaji";
    for (var n = 0; n < e.length; n++) "#" === e[n].charAt(0) ? (color[n] = e[n].substring(0, 7), e[n] = e[n].substring(8)) : color[n] = "#FFFFFF", a = Math.max(i.measureText(e[n]).width + 16, a);
    t.height = r, t.width = a;
    for (n = 0; n < e.length; n++) {
        var o = create_text(1, e[n], 14, color[n], null, null, null, null, null, "#000", 6);
        i.drawImage(o, 8, 18 * n + 5)
    }
    return t
}

function create_text(e, t, i, r, a, n, o, s, _, T, E) {
    void 0 === E && (E = 0);
    var I = document.createElement("canvas"),
        l = I.getContext("2d");
    n = n ? n * e : 0;
    var u = Math.floor(e * i);
    l.font = u + "px Baloo Paaji", l.lineJoin = "round", s *= e;
    var d = o ? 2 * s : 0;
    if (_) var c = Math.min(l.measureText(t).width + 2 * e + d, _);
    else c = l.measureText(t).width + 2 * e + d + E * e * 2;
    u = (u + n + E) * e + d;
    return I.width = c, I.height = u, o && (l.fillStyle = o, round_rect(l, 0, 0, c, u, 2 * s), l.fill(), l.translate(s, s)), l.textBaseline = "middle", l.font = i + "px Baloo Paaji", l.lineJoin = "round", a && (l.beginPath(), l.fillStyle = a, l.fillText(t, 0, u / 2 + n - d / 2, c)), l.beginPath(), T && (l.strokeStyle = T, l.lineWidth = E, l.strokeText(t, E, (u - d) / 2, c)), l.fillStyle = r, l.fillText(t, E, (u - d) / 2, c), I
}

function create_stone(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 220 * e,
        o = 230 * e,
        s = 100 * e,
        _ = s / 4,
        T = 20 * e;
    return r.width = n, r.height = o, a.translate(n / 2, o / 2 + T), a.globalAlpha = .5, round_regular_polygon(a, 7, s, _), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -T), round_regular_polygon(a, 7, s, _), fill_path(a, i[1]), round_regular_polygon(a, 6, .65 * s, .65 * _), fill_path(a, i[2]), r
}

function create_cave_stone(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d"),
        o = 220 * e,
        s = 220 * e,
        _ = 100 * e,
        T = _ / 4;
    return a.width = o, a.height = s, n.translate(o / 2, s / 2), n.globalAlpha = t ? .5 : 1, t || n.translate(0 * e, -8 * e), round_regular_polygon(n, 7, _, T), fill_path(n, t ? i[0] : i[1]), n.globalAlpha = 1, 0 == r ? (round_regular_polygon(n, 6, .65 * _, .65 * T), fill_path(n, i[2])) : 1 == r && (n.translate(20 * e, 20 * e), round_regular_polygon(n, 6, .45 * _, .4 * T), fill_path(n, i[2])), a
}

function create_gold(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 120 * e,
        o = 150 * e,
        s = 60 * e,
        _ = s / 4,
        T = 15 * e;
    return r.width = n, r.height = o, a.save(), a.translate(n / 2 + 0 * e, o / 2 + 0 * e + T), a.rotate(Math.PI / 3), a.globalAlpha = .5, round_regular_polygon(a, 8, s, _), fill_path(a, i[0]), a.restore(), a.save(), a.translate(n / 2 - 11 * e, o / 2 + 12 * e), a.globalAlpha = 1, a.rotate(Math.PI / 3), a.translate(0, -T), round_regular_polygon(a, 8, s, _), fill_path(a, i[1]), a.restore(), a.save(), a.translate(n / 2 - 9 * e, o / 2 - 12 * e), a.rotate(Math.PI / 2.8), round_regular_polygon(a, 5, .5 * s, .4 * _), fill_path(a, i[2]), a.restore(), a.save(), a.translate(n / 2 + 19 * e, o / 2 + 5 * e), a.rotate(Math.PI / 1), round_regular_polygon(a, 5, .5 * s, .4 * _), fill_path(a, i[2]), a.restore(), a.save(), a.translate(n / 2 - 8 * e, o / 2 + 20 * e), a.rotate(Math.PI / 2.25), round_regular_polygon(a, 5, .5 * s, .4 * _), fill_path(a, i[2]), a.restore(), r
}

function create_diamond(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 180 * e,
        o = 210 * e,
        s = (T = 60 * e) / 4,
        _ = 20 * e;
    r.width = n, r.height = o, a.save(), a.translate(n / 2 - 0 * e, o / 2 - 35 * e + _), a.rotate(Math.PI / -1.8), a.globalAlpha = .5, a.translate(0 * e, -20 * e), round_regular_polygon(a, 5, T, s), fill_path(a, i[0]), a.restore(), a.save(), a.translate(n / 2 + 10 * e, o / 2 + 15 * e + _), a.rotate(Math.PI / 2), a.globalAlpha = .5, a.translate(0 * e, -20 * e), round_regular_polygon(a, 5, T, s), fill_path(a, i[0]), a.restore(), a.save(), a.translate(n / 2 - 50 * e, o / 2 + 40 * e + _), a.rotate(Math.PI / 3), a.globalAlpha = .5, a.translate(0, -20 * e), round_regular_polygon(a, 5, T, s), fill_path(a, i[0]), a.restore(), a.save(), a.translate(n / 2 - 0 * e, o / 2 - 35 * e), a.rotate(Math.PI / -1.8), a.globalAlpha = 1, a.translate(0 * e, -20 * e), round_regular_polygon(a, 5, T, s), fill_path(a, i[1]), a.restore(), a.save(), a.translate(n / 2 + 10 * e, o / 2 + 15 * e), a.rotate(Math.PI / 2), a.globalAlpha = 1, a.translate(0, -20 * e), round_regular_polygon(a, 5, T, s), fill_path(a, i[1]), a.restore(), a.save(), a.translate(n / 2 - 50 * e, o / 2 + 40 * e), a.rotate(Math.PI / 3), a.globalAlpha = 1, a.translate(0, -20 * e), round_regular_polygon(a, 5, T, s), fill_path(a, i[1]), a.restore();
    var T;
    s = (T = 30 * e) / 4;
    return a.save(), a.translate(n / 2 + 5 * e, o / 2 - 20 * e), a.rotate(Math.PI / -1.8), a.globalAlpha = 1, a.translate(0, -20 * e), round_regular_polygon(a, 5, T, s), fill_path(a, i[2]), a.restore(), a.save(), a.translate(n / 2 + 0 * e, o / 2 + 10 * e), a.rotate(Math.PI / 2), a.globalAlpha = 1, a.translate(0, -20 * e), round_regular_polygon(a, 5, T, s), fill_path(a, i[2]), a.restore(), a.save(), a.translate(n / 2 - 45 * e, o / 2 + 35 * e), a.rotate(Math.PI / 3), a.globalAlpha = 1, a.translate(0, -20 * e), round_regular_polygon(a, 5, T, s), fill_path(a, i[2]), a.restore(), circle(a, n / 2 - 7 * e, o / 2 + 7 * e, 5), fill_path(a, i[2]), r
}

function create_plant(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 140 * e,
        o = 150 * e,
        s = 10 * e,
        _ = 4 * e;
    return r.width = n, r.height = o, a.translate(-50 * e, -38 * e + s), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.bezierCurveTo(160 * e, 65 * e, 160 * e, 85 * e, 152 * e, 95 * e), a.bezierCurveTo(152 * e, 95 * e, 173 * e, 94 * e, 187 * e, 102 * e), a.bezierCurveTo(187 * e, 102 * e, 180 * e, 120 * e, 155 * e, 126 * e), a.bezierCurveTo(154 * e, 126 * e, 166 * e, 138 * e, 169 * e, 148 * e), a.bezierCurveTo(169 * e, 148 * e, 148 * e, 152 * e, 133 * e, 140 * e), a.bezierCurveTo(133 * e, 140 * e, 134 * e, 160 * e, 122 * e, 175 * e), a.bezierCurveTo(122 * e, 175 * e, 107 * e, 162 * e, 107 * e, 144 * e), a.bezierCurveTo(107 * e, 144 * e, 98 * e, 164 * e, 73 * e, 167 * e), a.bezierCurveTo(73 * e, 167 * e, 72 * e, 134 * e, 90 * e, 127 * e), a.bezierCurveTo(90 * e, 127 * e, 70 * e, 134 * e, 55 * e, 123 * e), a.bezierCurveTo(55 * e, 123 * e, 58 * e, 115 * e, 75 * e, 104 * e), a.bezierCurveTo(75 * e, 104 * e, 66 * e, 96 * e, 61 * e, 77 * e), a.bezierCurveTo(61 * e, 77 * e, 83 * e, 74 * e, 102 * e, 89 * e), a.bezierCurveTo(102 * e, 89 * e, 92 * e, 66 * e, 110 * e, 41 * e), a.bezierCurveTo(111 * e, 40 * e, 130 * e, 54 * e, 130 * e, 82 * e), a.bezierCurveTo(130 * e, 82 * e, 143 * e, 67 * e, 159 * e, 65 * e), a.closePath(), fill_path(a, i[0]), a.translate(0, 0 - s), a.globalAlpha = 1, a.beginPath(), a.bezierCurveTo(160 * e, 65 * e, 160 * e, 85 * e, 152 * e, 95 * e), a.bezierCurveTo(152 * e, 95 * e, 173 * e, 94 * e, 187 * e, 102 * e), a.bezierCurveTo(187 * e, 102 * e, 180 * e, 120 * e, 155 * e, 126 * e), a.bezierCurveTo(154 * e, 126 * e, 166 * e, 138 * e, 169 * e, 148 * e), a.bezierCurveTo(169 * e, 148 * e, 148 * e, 152 * e, 133 * e, 140 * e), a.bezierCurveTo(133 * e, 140 * e, 134 * e, 160 * e, 122 * e, 175 * e), a.bezierCurveTo(122 * e, 175 * e, 107 * e, 162 * e, 107 * e, 144 * e), a.bezierCurveTo(107 * e, 144 * e, 98 * e, 164 * e, 73 * e, 167 * e), a.bezierCurveTo(73 * e, 167 * e, 72 * e, 134 * e, 90 * e, 127 * e), a.bezierCurveTo(90 * e, 127 * e, 70 * e, 134 * e, 55 * e, 123 * e), a.bezierCurveTo(55 * e, 123 * e, 58 * e, 115 * e, 75 * e, 104 * e), a.bezierCurveTo(75 * e, 104 * e, 66 * e, 96 * e, 61 * e, 77 * e), a.bezierCurveTo(61 * e, 77 * e, 83 * e, 74 * e, 102 * e, 89 * e), a.bezierCurveTo(102 * e, 89 * e, 92 * e, 66 * e, 110 * e, 41 * e), a.bezierCurveTo(111 * e, 40 * e, 130 * e, 54 * e, 130 * e, 82 * e), a.bezierCurveTo(130 * e, 82 * e, 143 * e, 67 * e, 159 * e, 65 * e), a.closePath(), fill_path(a, i[1], i[2], _), r
}

function create_fruit(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 18 * e,
        o = 18 * e;
    r.width = n, r.height = o;
    var s = 9 * e,
        _ = 9 * e,
        T = 8 * e;
    a.save(), a.translate(s, _), a.globalAlpha = 1, circle(a, 0, 0, T), fill_path(a, i[0]);
    T = 3 * e, s = 0, _ = -3 * e;
    return a.translate(s, _), a.globalAlpha = 1, circle(a, 0, 0, T), fill_path(a, i[1]), a.restore(), r
}

function create_leaf(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 80 * e, i.height = 100 * e, r.scale(.5, .5), r.translate(10, 15), r.globalAlpha = .5, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(47 * e, 5 * e), r.bezierCurveTo(19 * e, 30 * e, 12 * e, 42 * e, 10 * e, 55 * e), r.bezierCurveTo(11 * e, 75 * e, 27 * e, 76 * e, 36 * e, 72 * e), r.bezierCurveTo(52 * e, 60 * e, 53 * e, 46 * e, 54 * e, 31 * e), r.bezierCurveTo(53 * e, 14 * e, 50 * e, 9 * e, 48 * e, 6 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(17 * e, 70 * e), r.bezierCurveTo(18 * e, 77 * e, 10 * e, 83 * e, 4 * e, 87 * e), fill_path(r, void 0, t[0], 10 * e), r.translate(0, -10), r.globalAlpha = 1, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(47 * e, 5 * e), r.bezierCurveTo(19 * e, 30 * e, 12 * e, 42 * e, 10 * e, 55 * e), r.bezierCurveTo(11 * e, 75 * e, 27 * e, 76 * e, 36 * e, 72 * e), r.bezierCurveTo(52 * e, 60 * e, 53 * e, 46 * e, 54 * e, 31 * e), r.bezierCurveTo(53 * e, 14 * e, 50 * e, 9 * e, 48 * e, 6 * e), r.closePath(), fill_path(r, t[1], t[2], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(17 * e, 70 * e), r.bezierCurveTo(18 * e, 77 * e, 10 * e, 83 * e, 4 * e, 87 * e), fill_path(r, void 0, t[2], 8 * e), r.globalAlpha = .5, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(17 * e, 70 * e), r.bezierCurveTo(33 * e, 52 * e, 39 * e, 33 * e, 48 * e, 7 * e), fill_path(r, void 0, t[2], 8 * e), i
}

function create_leaf(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 234 * e, i.height = 183 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 25 * e), r.bezierCurveTo(150 * e, 3 * e, 181 * e, 22 * e, 203 * e, 41 * e), r.bezierCurveTo(225 * e, 63 * e, 225 * e, 105 * e, 198 * e, 133 * e), r.bezierCurveTo(179 * e, 157 * e, 134 * e, 178 * e, 81 * e, 164 * e), r.bezierCurveTo(19 * e, 148 * e, 6 * e, 95 * e, 21 * e, 66 * e), r.bezierCurveTo(34 * e, 39 * e, 52 * e, 33 * e, 75 * e, 25 * e), r.closePath(), fill_path(r, t[0], t[0], 4 * e), i
}

function create_herb(e, t, i, r, a) {
    var n = document.createElement("canvas"),
        o = n.getContext("2d");
    if (0 == r) {
        var s = 270 * e,
            _ = 250 * e;
        n.width = s, n.height = _, o.beginPath(), o.moveTo(140 * e, 3 * e), o.translate(-25 * e, -20 * e), o.bezierCurveTo(218 * e, 31 * e, 251 * e, 61 * e, 265 * e, 85 * e), o.bezierCurveTo(278 * e, 108 * e, 295 * e, 160 * e, 285 * e, 195 * e), o.bezierCurveTo(271 * e, 242 * e, 213 * e, 268 * e, 188 * e, 266 * e), o.bezierCurveTo(139 * e, 262 * e, 70 * e, 244 * e, 47 * e, 204 * e), o.bezierCurveTo(20 * e, 158 * e, 35 * e, 78 * e, 59 * e, 56 * e), o.bezierCurveTo(90 * e, 28 * e, 124 * e, 23 * e, 140 * e, 23 * e), o.closePath(), fill_path(o, i[0])
    } else if (1 == r) {
        s = 430 * e, _ = 350 * e;
        n.width = s, n.height = _, o.beginPath(), o.moveTo(180 * e, 5 * e), o.translate(-30 * e, -60 * e), o.bezierCurveTo(283 * e, 60 * e, 265 * e, 163 * e, 335 * e, 206 * e), o.bezierCurveTo(376 * e, 231 * e, 492 * e, 299 * e, 434 * e, 357 * e), o.bezierCurveTo(371 * e, 421 * e, 289 * e, 394 * e, 255 * e, 386 * e), o.bezierCurveTo(218 * e, 377 * e, 91 * e, 359 * e, 50 * e, 272 * e), o.bezierCurveTo(12 * e, 192 * e, 107 * e, 75 * e, 178 * e, 69 * e), o.closePath(), fill_path(o, i[0])
    } else if (2 == r) {
        s = 400 * e, _ = 300 * e;
        n.width = s, n.height = _, o.beginPath(), o.moveTo(80 * e, 52 * e), o.translate(-40 * e, -30 * e), o.bezierCurveTo(124 * e, 77 * e, 241 * e, 22 * e, 311 * e, 65 * e), o.bezierCurveTo(352 * e, 90 * e, 404 * e, 176 * e, 346 * e, 234 * e), o.bezierCurveTo(283 * e, 298 * e, 179 * e, 299 * e, 145 * e, 291 * e), o.bezierCurveTo(108 * e, 282 * e, 100 * e, 239 * e, 63 * e, 205 * e), o.bezierCurveTo(37 * e, 181 * e, 45 * e, 131 * e, 80 * e, 107 * e), o.closePath(), fill_path(o, i[0])
    }
    return n
}

function create_flake(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = e * t * 2,
        o = e * t * 2,
        s = n / 2,
        _ = o / 2;
    return r.width = n, r.height = o, a.translate(s, _), circle(a, 0, 0, t * e, 0), fill_path(a, i), r
}

function create_divingmask(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 373 * e, r.height = 314 * e, a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(184.048583984375 * e, 69.1805419921875 * e), round_rect(a, -40 * e, -28.5 * e, 80 * e, 57 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(185.048583984375 * e, 61.6805419921875 * e), a.bezierCurveTo(145.048583984375 * e, 59.6805419921875 * e, 138.048583984375 * e, 41.6805419921875 * e, 148.048583984375 * e, 33.6805419921875 * e), a.bezierCurveTo(169.048583984375 * e, 17.6805419921875 * e, 194.048583984375 * e, 20.6805419921875 * e, 210.048583984375 * e, 27.6805419921875 * e), a.bezierCurveTo(234.048583984375 * e, 40.6805419921875 * e, 225.048583984375 * e, 57.6805419921875 * e, 186.048583984375 * e, 61.6805419921875 * e), a.closePath(), fill_path(a, i[0], i[0], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(224.048583984375 * e, 56.6805419921875 * e), a.bezierCurveTo(326.048583984375 * e, 69.6805419921875 * e, 363.048583984375 * e, 148.6805419921875 * e, 349.048583984375 * e, 206.6805419921875 * e), a.bezierCurveTo(329.048583984375 * e, 278.6805419921875 * e, 252.048583984375 * e, 283.6805419921875 * e, 206.048583984375 * e, 275.6805419921875 * e), a.bezierCurveTo(206.548583984375 * e, 266.6805419921875 * e, 206.548583984375 * e, 266.6805419921875 * e, 207.048583984375 * e, 257.6805419921875 * e), a.bezierCurveTo(276.048583984375 * e, 268.6805419921875 * e, 308.048583984375 * e, 239.6805419921875 * e, 323.048583984375 * e, 208.6805419921875 * e), a.bezierCurveTo(352.048583984375 * e, 145.6805419921875 * e, 292.048583984375 * e, 86.6805419921875 * e, 223.048583984375 * e, 74.6805419921875 * e), a.closePath(), fill_path(a, i[0], i[0], 6 * e), a.save(), a.translate(183.548583984375 * e, 119.6805419921875 * e), round_rect(a, -121.5 * e, -45 * e, 243 * e, 90 * e, 40 * e), a.restore(), fill_path(a, i[0], i[0], 6 * e), a.save(), a.translate(183.048583984375 * e, 155.6805419921875 * e), round_rect(a, -121 * e, -52 * e, 242 * e, 104 * e, 40 * e), a.restore(), fill_path(a, i[0], i[0], 6 * e), a.save(), a.translate(183.048583984375 * e, 205.1805419921875 * e), round_rect(a, -121 * e, -50.5 * e, 242 * e, 101 * e, 40 * e), a.restore(), fill_path(a, i[0], i[0], 6 * e), a.save(), a.translate(185.048583984375 * e, 204.1805419921875 * e), round_rect(a, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e), a.restore(), fill_path(a, i[0], i[0], 6 * e), circle(a, 185.048583984375 * e, 257.6805419921875 * e, 27.018512172212592 * e), fill_path(a, i[0], i[0], 6 * e), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(224.048583984375 * e, 56.6805419921875 * e), a.bezierCurveTo(326.048583984375 * e, 69.6805419921875 * e, 363.048583984375 * e, 148.6805419921875 * e, 349.048583984375 * e, 206.6805419921875 * e), a.bezierCurveTo(329.048583984375 * e, 278.6805419921875 * e, 252.048583984375 * e, 283.6805419921875 * e, 206.048583984375 * e, 275.6805419921875 * e), a.bezierCurveTo(206.548583984375 * e, 266.6805419921875 * e, 206.548583984375 * e, 266.6805419921875 * e, 207.048583984375 * e, 257.6805419921875 * e), a.bezierCurveTo(276.048583984375 * e, 268.6805419921875 * e, 308.048583984375 * e, 239.6805419921875 * e, 323.048583984375 * e, 208.6805419921875 * e), a.bezierCurveTo(352.048583984375 * e, 145.6805419921875 * e, 292.048583984375 * e, 86.6805419921875 * e, 223.048583984375 * e, 74.6805419921875 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), a.save(), a.translate(184.048583984375 * e, 69.1805419921875 * e), round_rect(a, -40 * e, -28.5 * e, 80 * e, 57 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(185.048583984375 * e, 61.6805419921875 * e), a.bezierCurveTo(145.048583984375 * e, 59.6805419921875 * e, 138.048583984375 * e, 41.6805419921875 * e, 148.048583984375 * e, 33.6805419921875 * e), a.bezierCurveTo(169.048583984375 * e, 17.6805419921875 * e, 194.048583984375 * e, 20.6805419921875 * e, 210.048583984375 * e, 27.6805419921875 * e), a.bezierCurveTo(234.048583984375 * e, 40.6805419921875 * e, 225.048583984375 * e, 57.6805419921875 * e, 186.048583984375 * e, 61.6805419921875 * e), a.closePath(), fill_path(a, i[1], i[2], 6 * e), a.save(), a.translate(183.548583984375 * e, 119.6805419921875 * e), round_rect(a, -121.5 * e, -45 * e, 243 * e, 90 * e, 40 * e), a.restore(), fill_path(a, i[5], i[4], 6 * e), a.save(), a.translate(183.048583984375 * e, 155.6805419921875 * e), round_rect(a, -121 * e, -52 * e, 242 * e, 104 * e, 40 * e), a.restore(), fill_path(a, i[3], i[4], 6 * e), a.save(), a.translate(183.048583984375 * e, 205.1805419921875 * e), round_rect(a, -121 * e, -50.5 * e, 242 * e, 101 * e, 40 * e), a.restore(), fill_path(a, i[6], i[4], 6 * e), a.globalCompositeOperation = "destination-out", a.save(), a.translate(185.048583984375 * e, 204.1805419921875 * e), round_rect(a, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e), a.restore(), fill_path(a, i[7], i[8], 6 * e), a.globalCompositeOperation = "source-over", a.globalAlpha = .5, a.save(), a.translate(185.048583984375 * e, 204.1805419921875 * e), round_rect(a, -100 * e, -34.5 * e, 200 * e, 69 * e, 40 * e), a.restore(), fill_path(a, i[7], i[8], 6 * e), a.globalAlpha = 1, a.save(), circle(a, 185.048583984375 * e, 257.6805419921875 * e, 27.018512172212592 * e), fill_path(a, i[3], i[4], 6 * e), a.restore(), r
}

function create_superdivingsuit(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 220 * e, r.height = 180 * e, a.globalAlpha = t ? .5 : 1, a.translate(-90 * e, -150 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(104 * e, 237.8000030517578 * e), a.bezierCurveTo(110 * e, 237.8000030517578 * e, 110 * e, 237.8000030517578 * e, 116 * e, 237.8000030517578 * e), a.bezierCurveTo(116 * e, 241.8000030517578 * e, 116 * e, 241.8000030517578 * e, 116 * e, 245.8000030517578 * e), a.bezierCurveTo(115 * e, 245.3000030517578 * e, 115 * e, 245.3000030517578 * e, 114 * e, 244.8000030517578 * e), a.bezierCurveTo(109.5 * e, 244.8000030517578 * e, 109.5 * e, 244.8000030517578 * e, 105 * e, 244.8000030517578 * e), a.closePath(), fill_path(a, i[5], i[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115 * e, 211.20000457763672 * e), a.bezierCurveTo(106 * e, 216.20000457763672 * e, 101 * e, 234.20000457763672 * e, 102 * e, 241.20000457763672 * e), a.bezierCurveTo(102 * e, 260.2000045776367 * e, 115 * e, 269.2000045776367 * e, 115 * e, 269.2000045776367 * e), a.bezierCurveTo(116 * e, 265.2000045776367 * e, 115.5 * e, 265.2000045776367 * e, 116 * e, 261.2000045776367 * e), a.bezierCurveTo(112 * e, 264 * e, 108 * e, 254 * e, 106 * e, 242 * e), a.bezierCurveTo(105 * e, 232 * e, 110 * e, 222 * e, 115 * e, 218 * e), a.bezierCurveTo(116 * e, 216.75 * e, 115.5 * e, 217.375 * e, 116 * e, 216.75 * e), a.closePath(), fill_path(a, i[5], i[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(120 * e, 207 * e), a.bezierCurveTo(115 * e, 206 * e, 114 * e, 209 * e, 114 * e, 211 * e), a.bezierCurveTo(114 * e, 268 * e, 114 * e, 241 * e, 114 * e, 271 * e), a.bezierCurveTo(115 * e, 276 * e, 118 * e, 276 * e, 120 * e, 276 * e), a.bezierCurveTo(122 * e, 273 * e, 120.5 * e, 274.5 * e, 121 * e, 273 * e), a.bezierCurveTo(121 * e, 241 * e, 121 * e, 241 * e, 121 * e, 209 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(284 * e, 238 * e), a.bezierCurveTo(289.5 * e, 238 * e, 289.5 * e, 238 * e, 295 * e, 238 * e), a.bezierCurveTo(295 * e, 241.5 * e, 295 * e, 241.5 * e, 295 * e, 245 * e), a.bezierCurveTo(289.5 * e, 245 * e, 289.5 * e, 245 * e, 284 * e, 245 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(283 * e, 211 * e), a.bezierCurveTo(293 * e, 216 * e, 297 * e, 231 * e, 297 * e, 241 * e), a.bezierCurveTo(298 * e, 254 * e, 290 * e, 265 * e, 284 * e, 269 * e), a.bezierCurveTo(283 * e, 266 * e, 283.5 * e, 266 * e, 283 * e, 263 * e), a.bezierCurveTo(290 * e, 260 * e, 292 * e, 251 * e, 293 * e, 242 * e), a.bezierCurveTo(292 * e, 223 * e, 289 * e, 224 * e, 284 * e, 218 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(280 * e, 206 * e), a.bezierCurveTo(284 * e, 206 * e, 285 * e, 208 * e, 285 * e, 211 * e), a.bezierCurveTo(285 * e, 241.5 * e, 285 * e, 241.5 * e, 285 * e, 272 * e), a.bezierCurveTo(284 * e, 275 * e, 284 * e, 275 * e, 280 * e, 275 * e), a.bezierCurveTo(279 * e, 273.5 * e, 279 * e, 273.5 * e, 278 * e, 272 * e), a.bezierCurveTo(278 * e, 240.5 * e, 278 * e, 240.5 * e, 278 * e, 209 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(138 * e, 298.40000915527344 * e), a.bezierCurveTo(141 * e, 311.40000915527344 * e, 151 * e, 314.40000915527344 * e, 162 * e, 316.40000915527344 * e), a.bezierCurveTo(224 * e, 316.40000915527344 * e, 200 * e, 315.90000915527344 * e, 238 * e, 315.40000915527344 * e), a.bezierCurveTo(254 * e, 316.40000915527344 * e, 261 * e, 306.40000915527344 * e, 264 * e, 298.40000915527344 * e), a.bezierCurveTo(255 * e, 304.40000915527344 * e, 250 * e, 306.40000915527344 * e, 244 * e, 306.40000915527344 * e), a.bezierCurveTo(201 * e, 306.90000915527344 * e, 201 * e, 306.90000915527344 * e, 158 * e, 307.40000915527344 * e), a.bezierCurveTo(150 * e, 306.40000915527344 * e, 148 * e, 306.40000915527344 * e, 139 * e, 300.40000915527344 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(161 * e, 177.5999984741211 * e), a.bezierCurveTo(130 * e, 175.5999984741211 * e, 123 * e, 190.5999984741211 * e, 122 * e, 205.5999984741211 * e), a.bezierCurveTo(121 * e, 277.5999984741211 * e, 122 * e, 242.5999984741211 * e, 122 * e, 279.5999984741211 * e), a.bezierCurveTo(128 * e, 297.5999984741211 * e, 137 * e, 299.5999984741211 * e, 143 * e, 300.5999984741211 * e), a.bezierCurveTo(163 * e, 301.0999984741211 * e, 163 * e, 301.0999984741211 * e, 183 * e, 301.5999984741211 * e), a.bezierCurveTo(150 * e, 300.5999984741211 * e, 135 * e, 290.5999984741211 * e, 134 * e, 267.5999984741211 * e), a.bezierCurveTo(133 * e, 245.5999984741211 * e, 146 * e, 235.5999984741211 * e, 164 * e, 235.5999984741211 * e), a.bezierCurveTo(206 * e, 236.0999984741211 * e, 206 * e, 236.0999984741211 * e, 248 * e, 236.5999984741211 * e), a.bezierCurveTo(266 * e, 243.5999984741211 * e, 268 * e, 259.5999984741211 * e, 267 * e, 266.5999984741211 * e), a.bezierCurveTo(266 * e, 288.5999984741211 * e, 251 * e, 294.5999984741211 * e, 244 * e, 297.5999984741211 * e), a.bezierCurveTo(228.5 * e, 299.5999984741211 * e, 228.5 * e, 299.5999984741211 * e, 213 * e, 301.5999984741211 * e), a.bezierCurveTo(236 * e, 301.0999984741211 * e, 236 * e, 301.0999984741211 * e, 259 * e, 300.5999984741211 * e), a.bezierCurveTo(272 * e, 295.5999984741211 * e, 277 * e, 288.5999984741211 * e, 278 * e, 271.5999984741211 * e), a.bezierCurveTo(277.5 * e, 236.5999984741211 * e, 277.5 * e, 236.5999984741211 * e, 277 * e, 201.5999984741211 * e), a.bezierCurveTo(276 * e, 186.5999984741211 * e, 265 * e, 178.5999984741211 * e, 254 * e, 177.5999984741211 * e), a.bezierCurveTo(247.5 * e, 177.5999984741211 * e, 247.5 * e, 177.5999984741211 * e, 241 * e, 177.5999984741211 * e), a.bezierCurveTo(255 * e, 202.5999984741211 * e, 214 * e, 217.5999984741211 * e, 201 * e, 215.5999984741211 * e), a.bezierCurveTo(170 * e, 215.5999984741211 * e, 152 * e, 197.5999984741211 * e, 161 * e, 178.5999984741211 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(162 * e, 175.5999984741211 * e), a.bezierCurveTo(153 * e, 176.0999984741211 * e, 153 * e, 176.0999984741211 * e, 144 * e, 176.5999984741211 * e), a.bezierCurveTo(125 * e, 178.5999984741211 * e, 121 * e, 196.5999984741211 * e, 121 * e, 207.5999984741211 * e), a.bezierCurveTo(121 * e, 243.20000076293945 * e, 121 * e, 243.20000076293945 * e, 121 * e, 278.8000030517578 * e), a.bezierCurveTo(126 * e, 298.8000030517578 * e, 137 * e, 300.8000030517578 * e, 146 * e, 302.8000030517578 * e), a.bezierCurveTo(200.5 * e, 302.8000030517578 * e, 200.5 * e, 302.8000030517578 * e, 255 * e, 302.8000030517578 * e), a.bezierCurveTo(271 * e, 301.8000030517578 * e, 279 * e, 288.8000030517578 * e, 279 * e, 273.8000030517578 * e), a.bezierCurveTo(279 * e, 236.8000030517578 * e, 279 * e, 236.8000030517578 * e, 279 * e, 199.8000030517578 * e), a.bezierCurveTo(274 * e, 178.8000030517578 * e, 263 * e, 177.8000030517578 * e, 255 * e, 175.8000030517578 * e), a.bezierCurveTo(248 * e, 175.8000030517578 * e, 248 * e, 175.8000030517578 * e, 241 * e, 175.8000030517578 * e), a.bezierCurveTo(240 * e, 175.8000030517578 * e, 240 * e, 175.8000030517578 * e, 239 * e, 175.8000030517578 * e), a.bezierCurveTo(254 * e, 200.8000030517578 * e, 222 * e, 211.8000030517578 * e, 202 * e, 212.8000030517578 * e), a.bezierCurveTo(168 * e, 213.8000030517578 * e, 151 * e, 190.8000030517578 * e, 163 * e, 176.8000030517578 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(198 * e, 161.4000015258789 * e), a.bezierCurveTo(198 * e, 186.9000015258789 * e, 198 * e, 186.9000015258789 * e, 198 * e, 212.4000015258789 * e), a.bezierCurveTo(201 * e, 212.4000015258789 * e, 201 * e, 212.4000015258789 * e, 204 * e, 212.4000015258789 * e), a.bezierCurveTo(204 * e, 186.9000015258789 * e, 204 * e, 186.9000015258789 * e, 204 * e, 161.4000015258789 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(161 * e, 194 * e), a.bezierCurveTo(188 * e, 169 * e, 231 * e, 179 * e, 241 * e, 194 * e), a.bezierCurveTo(239.5 * e, 196 * e, 239.5 * e, 196 * e, 238 * e, 198 * e), a.bezierCurveTo(221 * e, 179 * e, 182 * e, 182 * e, 165 * e, 198 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(157 * e, 188.80000019073486 * e), a.bezierCurveTo(162 * e, 150.80000019073486 * e, 241 * e, 150.80000019073486 * e, 245 * e, 188.80000019073486 * e), a.bezierCurveTo(242 * e, 224.80000019073486 * e, 162 * e, 228.80000019073486 * e, 157 * e, 188.80000019073486 * e), a.bezierCurveTo(159 * e, 188.80000019073486 * e, 159 * e, 188.80000019073486 * e, 161 * e, 188.80000019073486 * e), a.bezierCurveTo(168 * e, 216.80000019073486 * e, 231 * e, 218.80000019073486 * e, 241 * e, 188.80000019073486 * e), a.bezierCurveTo(236 * e, 156.80000019073486 * e, 169 * e, 152.80000019073486 * e, 161 * e, 188.80000019073486 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(156 * e, 188 * e), a.bezierCurveTo(160 * e, 164 * e, 183 * e, 159 * e, 201 * e, 158 * e), a.bezierCurveTo(232 * e, 159 * e, 244 * e, 174 * e, 246 * e, 188 * e), a.bezierCurveTo(245 * e, 212 * e, 213 * e, 219 * e, 201 * e, 218 * e), a.bezierCurveTo(181 * e, 221 * e, 158 * e, 207 * e, 156 * e, 190 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(162 * e, 189 * e), a.bezierCurveTo(166 * e, 170 * e, 185 * e, 165 * e, 201 * e, 164 * e), a.bezierCurveTo(227 * e, 165 * e, 240 * e, 178 * e, 239 * e, 188 * e), a.bezierCurveTo(239 * e, 204 * e, 210 * e, 210 * e, 201 * e, 210 * e), a.bezierCurveTo(182 * e, 211 * e, 166 * e, 200 * e, 162 * e, 190 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(131 * e, 262 * e), a.bezierCurveTo(136 * e, 241 * e, 144 * e, 236 * e, 158 * e, 233 * e), a.bezierCurveTo(200.5 * e, 233 * e, 229 * e, 232 * e, 243 * e, 233 * e), a.bezierCurveTo(259 * e, 235 * e, 267 * e, 248 * e, 269 * e, 260 * e), a.bezierCurveTo(269 * e, 266.5 * e, 269 * e, 266.5 * e, 269 * e, 273 * e), a.bezierCurveTo(265 * e, 290 * e, 251 * e, 297 * e, 242 * e, 298 * e), a.bezierCurveTo(202 * e, 298 * e, 202 * e, 298 * e, 162 * e, 298 * e), a.bezierCurveTo(148 * e, 298 * e, 136 * e, 289 * e, 132 * e, 273 * e), a.bezierCurveTo(131.5 * e, 268 * e, 131.5 * e, 268 * e, 131 * e, 263 * e), a.bezierCurveTo(135 * e, 263 * e, 135 * e, 263 * e, 139 * e, 263 * e), a.bezierCurveTo(139 * e, 281 * e, 151 * e, 287 * e, 160 * e, 290 * e), a.bezierCurveTo(200.5 * e, 290 * e, 200.5 * e, 290 * e, 241 * e, 290 * e), a.bezierCurveTo(252 * e, 290 * e, 257 * e, 281 * e, 262 * e, 271 * e), a.bezierCurveTo(261.5 * e, 267 * e, 261.5 * e, 267 * e, 261 * e, 263 * e), a.bezierCurveTo(260 * e, 249 * e, 251 * e, 242 * e, 241 * e, 241 * e), a.bezierCurveTo(240.5 * e, 240.5 * e, 240.5 * e, 240.5 * e, 240 * e, 240 * e), a.bezierCurveTo(200 * e, 240 * e, 200 * e, 240 * e, 160 * e, 240 * e), a.bezierCurveTo(145 * e, 244 * e, 142 * e, 250 * e, 139 * e, 264 * e), a.closePath(), fill_path(a, i[4], i[4], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(130 * e, 264 * e), a.bezierCurveTo(132 * e, 244 * e, 144 * e, 235 * e, 157 * e, 232 * e), a.bezierCurveTo(245 * e, 232 * e, 201 * e, 232 * e, 245 * e, 232 * e), a.bezierCurveTo(264 * e, 235 * e, 269 * e, 251 * e, 270 * e, 264 * e), a.bezierCurveTo(272 * e, 291 * e, 248 * e, 299 * e, 242 * e, 299 * e), a.bezierCurveTo(200 * e, 299 * e, 200 * e, 299 * e, 158 * e, 299 * e), a.bezierCurveTo(139 * e, 298 * e, 130 * e, 276 * e, 130 * e, 265 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(140 * e, 265.33333587646484 * e), a.bezierCurveTo(141 * e, 250.33333587646484 * e, 148 * e, 244.33333587646484 * e, 160 * e, 241.33333587646484 * e), a.bezierCurveTo(200 * e, 241.33333587646484 * e, 200 * e, 241.33333587646484 * e, 240 * e, 241.33333587646484 * e), a.bezierCurveTo(256 * e, 243.33333587646484 * e, 260 * e, 255.33333587646484 * e, 260 * e, 265.33333587646484 * e), a.bezierCurveTo(261 * e, 281.33333587646484 * e, 247 * e, 289.33333587646484 * e, 240 * e, 289.33333587646484 * e), a.bezierCurveTo(161 * e, 289.33333587646484 * e, 200.5 * e, 289.33333587646484 * e, 161 * e, 289.33333587646484 * e), a.bezierCurveTo(149 * e, 288.33333587646484 * e, 142 * e, 278.33333587646484 * e, 140 * e, 266.33333587646484 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.globalAlpha = .5, a.scale(1, 1), a.translate(105 * e, 155 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(59.27557373046875 * e, 20.406280517578125 * e), a.bezierCurveTo(74.27557373046875 * e, 5.406280517578125 * e, 90.27557373046875 * e, 6.406280517578125 * e, 99.27557373046875 * e, 5.406280517578125 * e), a.bezierCurveTo(120.27557373046875 * e, 5.406280517578125 * e, 126.27557373046875 * e, 10.406280517578125 * e, 136.27557373046875 * e, 20.406280517578125 * e), a.bezierCurveTo(157.77557373046875 * e, 37.906280517578125 * e, 157.77557373046875 * e, 37.906280517578125 * e, 179.27557373046875 * e, 55.406280517578125 * e), a.bezierCurveTo(190.27557373046875 * e, 63.406280517578125 * e, 192.27557373046875 * e, 77.40628051757812 * e, 189.27557373046875 * e, 91.40628051757812 * e), a.bezierCurveTo(183.27557373046875 * e, 108.40628051757812 * e, 176.27557373046875 * e, 110.40628051757812 * e, 169.27557373046875 * e, 118.40628051757812 * e), a.bezierCurveTo(152.27557373046875 * e, 133.40628051757812 * e, 152.27557373046875 * e, 133.40628051757812 * e, 135.27557373046875 * e, 148.40628051757812 * e), a.bezierCurveTo(87.27557373046875 * e, 143.40628051757812 * e, 87.27557373046875 * e, 143.40628051757812 * e, 39.27557373046875 * e, 138.40628051757812 * e), a.bezierCurveTo(26.77557373046875 * e, 123.40628051757812 * e, 26.77557373046875 * e, 123.40628051757812 * e, 14.27557373046875 * e, 108.40628051757812 * e), a.bezierCurveTo(2.27557373046875 * e, 95.40628051757812 * e, 2.27557373046875 * e, 92.40628051757812 * e, 3.27557373046875 * e, 83.40628051757812 * e), a.bezierCurveTo(4.27557373046875 * e, 63.406280517578125 * e, 12.27557373046875 * e, 60.406280517578125 * e, 24.27557373046875 * e, 40.406280517578125 * e), a.closePath(), fill_path(a, i[5], i[5], 4 * e), a.globalAlpha = 1, a.translate(-110 * e, -155 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(104 * e, 237.8000030517578 * e), a.bezierCurveTo(110 * e, 237.8000030517578 * e, 110 * e, 237.8000030517578 * e, 116 * e, 237.8000030517578 * e), a.bezierCurveTo(116 * e, 241.8000030517578 * e, 116 * e, 241.8000030517578 * e, 116 * e, 245.8000030517578 * e), a.bezierCurveTo(115 * e, 245.3000030517578 * e, 115 * e, 245.3000030517578 * e, 114 * e, 244.8000030517578 * e), a.bezierCurveTo(109.5 * e, 244.8000030517578 * e, 109.5 * e, 244.8000030517578 * e, 105 * e, 244.8000030517578 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115 * e, 211.20000457763672 * e), a.bezierCurveTo(106 * e, 216.20000457763672 * e, 101 * e, 234.20000457763672 * e, 102 * e, 241.20000457763672 * e), a.bezierCurveTo(102 * e, 260.2000045776367 * e, 115 * e, 269.2000045776367 * e, 115 * e, 269.2000045776367 * e), a.bezierCurveTo(116 * e, 265.2000045776367 * e, 115.5 * e, 265.2000045776367 * e, 116 * e, 261.2000045776367 * e), a.bezierCurveTo(112 * e, 264 * e, 108 * e, 254 * e, 106 * e, 242 * e), a.bezierCurveTo(105 * e, 232 * e, 110 * e, 222 * e, 115 * e, 218 * e), a.bezierCurveTo(116 * e, 216.75 * e, 115.5 * e, 217.375 * e, 116 * e, 216.75 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(120 * e, 207 * e), a.bezierCurveTo(115 * e, 206 * e, 114 * e, 209 * e, 114 * e, 211 * e), a.bezierCurveTo(114 * e, 268 * e, 114 * e, 241 * e, 114 * e, 271 * e), a.bezierCurveTo(115 * e, 276 * e, 118 * e, 276 * e, 120 * e, 276 * e), a.bezierCurveTo(122 * e, 273 * e, 120.5 * e, 274.5 * e, 121 * e, 273 * e), a.bezierCurveTo(121 * e, 241 * e, 121 * e, 241 * e, 121 * e, 209 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(284 * e, 238 * e), a.bezierCurveTo(289.5 * e, 238 * e, 289.5 * e, 238 * e, 295 * e, 238 * e), a.bezierCurveTo(295 * e, 241.5 * e, 295 * e, 241.5 * e, 295 * e, 245 * e), a.bezierCurveTo(289.5 * e, 245 * e, 289.5 * e, 245 * e, 284 * e, 245 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(283 * e, 211 * e), a.bezierCurveTo(293 * e, 216 * e, 297 * e, 231 * e, 297 * e, 241 * e), a.bezierCurveTo(298 * e, 254 * e, 290 * e, 265 * e, 284 * e, 269 * e), a.bezierCurveTo(283 * e, 266 * e, 283.5 * e, 266 * e, 283 * e, 263 * e), a.bezierCurveTo(290 * e, 260 * e, 292 * e, 251 * e, 293 * e, 242 * e), a.bezierCurveTo(292 * e, 223 * e, 289 * e, 224 * e, 284 * e, 218 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(280 * e, 206 * e), a.bezierCurveTo(284 * e, 206 * e, 285 * e, 208 * e, 285 * e, 211 * e), a.bezierCurveTo(285 * e, 241.5 * e, 285 * e, 241.5 * e, 285 * e, 272 * e), a.bezierCurveTo(284 * e, 275 * e, 284 * e, 275 * e, 280 * e, 275 * e), a.bezierCurveTo(279 * e, 273.5 * e, 279 * e, 273.5 * e, 278 * e, 272 * e), a.bezierCurveTo(278 * e, 240.5 * e, 278 * e, 240.5 * e, 278 * e, 209 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(138 * e, 298.40000915527344 * e), a.bezierCurveTo(141 * e, 311.40000915527344 * e, 151 * e, 314.40000915527344 * e, 162 * e, 316.40000915527344 * e), a.bezierCurveTo(224 * e, 316.40000915527344 * e, 200 * e, 315.90000915527344 * e, 238 * e, 315.40000915527344 * e), a.bezierCurveTo(254 * e, 316.40000915527344 * e, 261 * e, 306.40000915527344 * e, 264 * e, 298.40000915527344 * e), a.bezierCurveTo(255 * e, 304.40000915527344 * e, 250 * e, 306.40000915527344 * e, 244 * e, 306.40000915527344 * e), a.bezierCurveTo(201 * e, 306.90000915527344 * e, 201 * e, 306.90000915527344 * e, 158 * e, 307.40000915527344 * e), a.bezierCurveTo(150 * e, 306.40000915527344 * e, 148 * e, 306.40000915527344 * e, 139 * e, 300.40000915527344 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(161 * e, 177.5999984741211 * e), a.bezierCurveTo(130 * e, 175.5999984741211 * e, 123 * e, 190.5999984741211 * e, 122 * e, 205.5999984741211 * e), a.bezierCurveTo(121 * e, 277.5999984741211 * e, 122 * e, 242.5999984741211 * e, 122 * e, 279.5999984741211 * e), a.bezierCurveTo(128 * e, 297.5999984741211 * e, 137 * e, 299.5999984741211 * e, 143 * e, 300.5999984741211 * e), a.bezierCurveTo(163 * e, 301.0999984741211 * e, 163 * e, 301.0999984741211 * e, 183 * e, 301.5999984741211 * e), a.bezierCurveTo(150 * e, 300.5999984741211 * e, 135 * e, 290.5999984741211 * e, 134 * e, 267.5999984741211 * e), a.bezierCurveTo(133 * e, 245.5999984741211 * e, 146 * e, 235.5999984741211 * e, 164 * e, 235.5999984741211 * e), a.bezierCurveTo(206 * e, 236.0999984741211 * e, 206 * e, 236.0999984741211 * e, 248 * e, 236.5999984741211 * e), a.bezierCurveTo(266 * e, 243.5999984741211 * e, 268 * e, 259.5999984741211 * e, 267 * e, 266.5999984741211 * e), a.bezierCurveTo(266 * e, 288.5999984741211 * e, 251 * e, 294.5999984741211 * e, 244 * e, 297.5999984741211 * e), a.bezierCurveTo(228.5 * e, 299.5999984741211 * e, 228.5 * e, 299.5999984741211 * e, 213 * e, 301.5999984741211 * e), a.bezierCurveTo(236 * e, 301.0999984741211 * e, 236 * e, 301.0999984741211 * e, 259 * e, 300.5999984741211 * e), a.bezierCurveTo(272 * e, 295.5999984741211 * e, 277 * e, 288.5999984741211 * e, 278 * e, 271.5999984741211 * e), a.bezierCurveTo(277.5 * e, 236.5999984741211 * e, 277.5 * e, 236.5999984741211 * e, 277 * e, 201.5999984741211 * e), a.bezierCurveTo(276 * e, 186.5999984741211 * e, 265 * e, 178.5999984741211 * e, 254 * e, 177.5999984741211 * e), a.bezierCurveTo(247.5 * e, 177.5999984741211 * e, 247.5 * e, 177.5999984741211 * e, 241 * e, 177.5999984741211 * e), a.bezierCurveTo(255 * e, 202.5999984741211 * e, 214 * e, 217.5999984741211 * e, 201 * e, 215.5999984741211 * e), a.bezierCurveTo(170 * e, 215.5999984741211 * e, 152 * e, 197.5999984741211 * e, 161 * e, 178.5999984741211 * e), a.closePath(), fill_path(a, i[2], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(162 * e, 175.5999984741211 * e), a.bezierCurveTo(153 * e, 176.0999984741211 * e, 153 * e, 176.0999984741211 * e, 144 * e, 176.5999984741211 * e), a.bezierCurveTo(125 * e, 178.5999984741211 * e, 121 * e, 196.5999984741211 * e, 121 * e, 207.5999984741211 * e), a.bezierCurveTo(121 * e, 243.20000076293945 * e, 121 * e, 243.20000076293945 * e, 121 * e, 278.8000030517578 * e), a.bezierCurveTo(126 * e, 298.8000030517578 * e, 137 * e, 300.8000030517578 * e, 146 * e, 302.8000030517578 * e), a.bezierCurveTo(200.5 * e, 302.8000030517578 * e, 200.5 * e, 302.8000030517578 * e, 255 * e, 302.8000030517578 * e), a.bezierCurveTo(271 * e, 301.8000030517578 * e, 279 * e, 288.8000030517578 * e, 279 * e, 273.8000030517578 * e), a.bezierCurveTo(279 * e, 236.8000030517578 * e, 279 * e, 236.8000030517578 * e, 279 * e, 199.8000030517578 * e), a.bezierCurveTo(274 * e, 178.8000030517578 * e, 263 * e, 177.8000030517578 * e, 255 * e, 175.8000030517578 * e), a.bezierCurveTo(248 * e, 175.8000030517578 * e, 248 * e, 175.8000030517578 * e, 241 * e, 175.8000030517578 * e), a.bezierCurveTo(240 * e, 175.8000030517578 * e, 240 * e, 175.8000030517578 * e, 239 * e, 175.8000030517578 * e), a.bezierCurveTo(254 * e, 200.8000030517578 * e, 222 * e, 211.8000030517578 * e, 202 * e, 212.8000030517578 * e), a.bezierCurveTo(168 * e, 213.8000030517578 * e, 151 * e, 190.8000030517578 * e, 163 * e, 176.8000030517578 * e), a.closePath(), fill_path(a, void 0, i[3], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(198 * e, 161.4000015258789 * e), a.bezierCurveTo(198 * e, 186.9000015258789 * e, 198 * e, 186.9000015258789 * e, 198 * e, 212.4000015258789 * e), a.bezierCurveTo(201 * e, 212.4000015258789 * e, 201 * e, 212.4000015258789 * e, 204 * e, 212.4000015258789 * e), a.bezierCurveTo(204 * e, 186.9000015258789 * e, 204 * e, 186.9000015258789 * e, 204 * e, 161.4000015258789 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(161 * e, 194 * e), a.bezierCurveTo(188 * e, 169 * e, 231 * e, 179 * e, 241 * e, 194 * e), a.bezierCurveTo(239.5 * e, 196 * e, 239.5 * e, 196 * e, 238 * e, 198 * e), a.bezierCurveTo(221 * e, 179 * e, 182 * e, 182 * e, 165 * e, 198 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(157 * e, 188.80000019073486 * e), a.bezierCurveTo(162 * e, 150.80000019073486 * e, 241 * e, 150.80000019073486 * e, 245 * e, 188.80000019073486 * e), a.bezierCurveTo(242 * e, 224.80000019073486 * e, 162 * e, 228.80000019073486 * e, 157 * e, 188.80000019073486 * e), a.bezierCurveTo(159 * e, 188.80000019073486 * e, 159 * e, 188.80000019073486 * e, 161 * e, 188.80000019073486 * e), a.bezierCurveTo(168 * e, 216.80000019073486 * e, 231 * e, 218.80000019073486 * e, 241 * e, 188.80000019073486 * e), a.bezierCurveTo(236 * e, 156.80000019073486 * e, 169 * e, 152.80000019073486 * e, 161 * e, 188.80000019073486 * e), a.closePath(), fill_path(a, i[0], i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(156 * e, 188 * e), a.bezierCurveTo(160 * e, 164 * e, 183 * e, 159 * e, 201 * e, 158 * e), a.bezierCurveTo(232 * e, 159 * e, 244 * e, 174 * e, 246 * e, 188 * e), a.bezierCurveTo(245 * e, 212 * e, 213 * e, 219 * e, 201 * e, 218 * e), a.bezierCurveTo(181 * e, 221 * e, 158 * e, 207 * e, 156 * e, 190 * e), a.closePath(), fill_path(a, void 0, i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(162 * e, 189 * e), a.bezierCurveTo(166 * e, 170 * e, 185 * e, 165 * e, 201 * e, 164 * e), a.bezierCurveTo(227 * e, 165 * e, 240 * e, 178 * e, 239 * e, 188 * e), a.bezierCurveTo(239 * e, 204 * e, 210 * e, 210 * e, 201 * e, 210 * e), a.bezierCurveTo(182 * e, 211 * e, 166 * e, 200 * e, 162 * e, 190 * e), a.closePath(), fill_path(a, void 0, i[1], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(131 * e, 262 * e), a.bezierCurveTo(136 * e, 241 * e, 144 * e, 236 * e, 158 * e, 233 * e), a.bezierCurveTo(200.5 * e, 233 * e, 229 * e, 232 * e, 243 * e, 233 * e), a.bezierCurveTo(259 * e, 235 * e, 267 * e, 248 * e, 269 * e, 260 * e), a.bezierCurveTo(269 * e, 266.5 * e, 269 * e, 266.5 * e, 269 * e, 273 * e), a.bezierCurveTo(265 * e, 290 * e, 251 * e, 297 * e, 242 * e, 298 * e), a.bezierCurveTo(202 * e, 298 * e, 202 * e, 298 * e, 162 * e, 298 * e), a.bezierCurveTo(148 * e, 298 * e, 136 * e, 289 * e, 132 * e, 273 * e), a.bezierCurveTo(131.5 * e, 268 * e, 131.5 * e, 268 * e, 131 * e, 263 * e), a.bezierCurveTo(135 * e, 263 * e, 135 * e, 263 * e, 139 * e, 263 * e), a.bezierCurveTo(139 * e, 281 * e, 151 * e, 287 * e, 160 * e, 290 * e), a.bezierCurveTo(200.5 * e, 290 * e, 200.5 * e, 290 * e, 241 * e, 290 * e), a.bezierCurveTo(252 * e, 290 * e, 257 * e, 281 * e, 262 * e, 271 * e), a.bezierCurveTo(261.5 * e, 267 * e, 261.5 * e, 267 * e, 261 * e, 263 * e), a.bezierCurveTo(260 * e, 249 * e, 251 * e, 242 * e, 241 * e, 241 * e), a.bezierCurveTo(240.5 * e, 240.5 * e, 240.5 * e, 240.5 * e, 240 * e, 240 * e), a.bezierCurveTo(200 * e, 240 * e, 200 * e, 240 * e, 160 * e, 240 * e), a.bezierCurveTo(145 * e, 244 * e, 142 * e, 250 * e, 139 * e, 264 * e), a.closePath(), fill_path(a, i[0], i[0], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(130 * e, 264 * e), a.bezierCurveTo(132 * e, 244 * e, 144 * e, 235 * e, 157 * e, 232 * e), a.bezierCurveTo(245 * e, 232 * e, 201 * e, 232 * e, 245 * e, 232 * e), a.bezierCurveTo(264 * e, 235 * e, 269 * e, 251 * e, 270 * e, 264 * e), a.bezierCurveTo(272 * e, 291 * e, 248 * e, 299 * e, 242 * e, 299 * e), a.bezierCurveTo(200 * e, 299 * e, 200 * e, 299 * e, 158 * e, 299 * e), a.bezierCurveTo(139 * e, 298 * e, 130 * e, 276 * e, 130 * e, 265 * e), a.closePath(), fill_path(a, void 0, i[1], 2 * e), r
}

function create_windmill_chest(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 243 * e, i.height = 172 * e, circle(r, 119.5 * e, 140.125 * e, 19 * e), fill_path(r, void 0, t[1], 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(36.5 * e, 20.125 * e), r.bezierCurveTo(119.5 * e, 20.625 * e, 119.5 * e, 20.625 * e, 202.5 * e, 21.125 * e), r.bezierCurveTo(214.5 * e, 22.125 * e, 216.5 * e, 26.125 * e, 217.5 * e, 35.125 * e), r.bezierCurveTo(221 * e, 76.125 * e, 221 * e, 76.125 * e, 224.5 * e, 117.125 * e), r.bezierCurveTo(225.5 * e, 127.125 * e, 221.5 * e, 131.125 * e, 210.5 * e, 132.125 * e), r.bezierCurveTo(117.5 * e, 132.125 * e, 117.5 * e, 132.125 * e, 24.5 * e, 132.125 * e), r.bezierCurveTo(14.5 * e, 131.125 * e, 13.5 * e, 126.125 * e, 16.5 * e, 111.125 * e), r.bezierCurveTo(19.5 * e, 73.125 * e, 19.5 * e, 73.125 * e, 22.5 * e, 35.125 * e), r.bezierCurveTo(23.5 * e, 23.125 * e, 29.5 * e, 21.125 * e, 36.5 * e, 20.125 * e), r.closePath(), fill_path(r, t[0], t[1], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(15.5 * e, 138.625 * e), r.bezierCurveTo(120 * e, 138.625 * e, 120 * e, 138.625 * e, 224.5 * e, 138.625 * e), r.closePath(), fill_path(r, void 0, t[2], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(13.5 * e, 131.625 * e), r.bezierCurveTo(119.5 * e, 131.625 * e, 119.5 * e, 131.625 * e, 225.5 * e, 131.625 * e), r.closePath(), fill_path(r, void 0, t[3], 10 * e), circle(r, 119.5 * e, 140.125 * e, 14.866068747318506 * e), fill_path(r, t[4], t[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(106.5 * e, 146.625 * e), r.bezierCurveTo(116.5 * e, 137.625 * e, 118.5 * e, 136.625 * e, 123.5 * e, 138.625 * e), r.bezierCurveTo(131.5 * e, 145.625 * e, 133.5 * e, 148.625 * e, 127.5 * e, 152.625 * e), r.bezierCurveTo(115.5 * e, 158.625 * e, 111.5 * e, 153.625 * e, 106.5 * e, 147.625 * e), r.closePath(), fill_path(r, t[6], t[7], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(105.5 * e, 146.625 * e), r.bezierCurveTo(116.5 * e, 159.625 * e, 124.5 * e, 156.625 * e, 132.5 * e, 146.625 * e), fill_path(r, void 0, t[8], 5 * e), r.save(), r.translate(75.5 * e, 80.125 * e), round_rect(r, -39 * e, -40 * e, 78 * e, 78 * e, 10 * e), r.restore(), fill_path(r, t[9]), r.save(), r.translate(167 * e, 80.125 * e), round_rect(r, -38.5 * e, -39 * e, 78 * e, 78 * e, 10 * e), r.restore(), fill_path(r, t[9]), i
}

function create_cake(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 400 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(96.5 * e, 277.34375 * e), a.bezierCurveTo(197.5 * e, 259.84375 * e, 197.5 * e, 259.84375 * e, 298.5 * e, 242.34375 * e), a.bezierCurveTo(311.5 * e, 231.34375 * e, 307.5 * e, 168.34375 * e, 298.5 * e, 150.34375 * e), a.bezierCurveTo(198 * e, 170.34375 * e, 198 * e, 170.34375 * e, 97.5 * e, 190.34375 * e), a.closePath(), fill_path(a, i[1], i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(98.5 * e, 214.34375 * e), a.bezierCurveTo(199 * e, 196.34375 * e, 199 * e, 196.34375 * e, 299.5 * e, 178.34375 * e), a.closePath(), fill_path(a, void 0, i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(98.5 * e, 247.34375 * e), a.bezierCurveTo(201.5 * e, 229.34375 * e, 201.5 * e, 229.34375 * e, 304.5 * e, 211.34375 * e), a.closePath(), fill_path(a, void 0, i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(97.5 * e, 189.34375 * e), a.bezierCurveTo(97 * e, 199.84375 * e, 97 * e, 199.84375 * e, 96.5 * e, 210.34375 * e), a.bezierCurveTo(110.5 * e, 204.34375 * e, 110.5 * e, 204.34375 * e, 124.5 * e, 198.34375 * e), a.bezierCurveTo(137.5 * e, 203.84375 * e, 137.5 * e, 203.84375 * e, 150.5 * e, 209.34375 * e), a.bezierCurveTo(172 * e, 197.84375 * e, 172 * e, 197.84375 * e, 193.5 * e, 186.34375 * e), a.bezierCurveTo(211.5 * e, 189.84375 * e, 211.5 * e, 189.84375 * e, 229.5 * e, 193.34375 * e), a.bezierCurveTo(240.5 * e, 193.34375 * e, 240.5 * e, 193.34375 * e, 251.5 * e, 193.34375 * e), a.bezierCurveTo(261 * e, 182.84375 * e, 261 * e, 182.84375 * e, 270.5 * e, 172.34375 * e), a.bezierCurveTo(287.5 * e, 169.34375 * e, 287.5 * e, 169.34375 * e, 304.5 * e, 166.34375 * e), a.bezierCurveTo(304.5 * e, 156.34375 * e, 300.5 * e, 145.34375 * e, 298.5 * e, 147.34375 * e), a.closePath(), fill_path(a, i[3], i[4], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(300.5 * e, 147.34375 * e), a.bezierCurveTo(293.5 * e, 121.34375 * e, 278.5 * e, 106.34375 * e, 256.5 * e, 101.34375 * e), a.bezierCurveTo(176.5 * e, 145.34375 * e, 176.5 * e, 145.34375 * e, 96.5 * e, 189.34375 * e), a.closePath(), fill_path(a, i[5], i[6], 12 * e), circle(a, 252.5 * e, 129.34375 * e, 18.027756377319946 * e), fill_path(a, i[7]), circle(a, 248.5 * e, 121.34375 * e, 8.246211251235321 * e), fill_path(a, i[8]), r
}

function create_fishfood(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 400 * e, a.globalAlpha = t ? .5 : 1, a.translate(10 * e, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(100.5 * e, 126.34375 * e), a.bezierCurveTo(151.5 * e, 104.34375 * e, 279.5 * e, 188.34375 * e, 297.5 * e, 292.34375 * e), a.bezierCurveTo(222.5 * e, 307.34375 * e, 106.5 * e, 196.34375 * e, 100.5 * e, 127.34375 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(106.5 * e, 131.34375 * e), a.bezierCurveTo(140.5 * e, 142.34375 * e, 225.5 * e, 184.34375 * e, 290.5 * e, 287.34375 * e), a.bezierCurveTo(270.5 * e, 188.34375 * e, 152.5 * e, 118.34375 * e, 107.5 * e, 131.34375 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(157.5 * e, 137.34375 * e), a.bezierCurveTo(161.5 * e, 138.34375 * e, 164.5 * e, 140.34375 * e, 168.5 * e, 142.34375 * e), a.bezierCurveTo(165.5 * e, 156.34375 * e, 141.5 * e, 176.34375 * e, 126.5 * e, 179.34375 * e), a.bezierCurveTo(123.5 * e, 173.34375 * e, 120.5 * e, 169.34375 * e, 120.5 * e, 169.34375 * e), a.bezierCurveTo(141.5 * e, 161.34375 * e, 156.5 * e, 145.34375 * e, 155.5 * e, 136.34375 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(196.5 * e, 151.34375 * e), a.bezierCurveTo(211.5 * e, 158.34375 * e, 224.5 * e, 171.34375 * e, 229.5 * e, 176.34375 * e), a.bezierCurveTo(246.5 * e, 163.34375 * e, 259.5 * e, 166.34375 * e, 272.5 * e, 168.34375 * e), a.bezierCurveTo(254.5 * e, 146.34375 * e, 214.5 * e, 145.34375 * e, 198.5 * e, 151.34375 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(154.5 * e, 222.34375 * e), a.bezierCurveTo(164.5 * e, 234.34375 * e, 173.5 * e, 242.34375 * e, 178.5 * e, 245.34375 * e), a.bezierCurveTo(174.5 * e, 265.34375 * e, 180.5 * e, 274.34375 * e, 186.5 * e, 283.34375 * e), a.bezierCurveTo(165.5 * e, 277.34375 * e, 151.5 * e, 245.34375 * e, 155.5 * e, 224.34375 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(279.5 * e, 294.34375 * e), a.bezierCurveTo(286.5 * e, 285.84375 * e, 286.5 * e, 285.84375 * e, 293.5 * e, 277.34375 * e), a.bezierCurveTo(315.5 * e, 280.34375 * e, 315.5 * e, 280.34375 * e, 337.5 * e, 283.34375 * e), a.bezierCurveTo(340.5 * e, 311.34375 * e, 317.5 * e, 326.34375 * e, 307.5 * e, 331.34375 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(-10 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(100.5 * e, 126.34375 * e), a.bezierCurveTo(151.5 * e, 104.34375 * e, 279.5 * e, 188.34375 * e, 297.5 * e, 292.34375 * e), a.bezierCurveTo(222.5 * e, 307.34375 * e, 106.5 * e, 196.34375 * e, 100.5 * e, 127.34375 * e), a.closePath(), fill_path(a, i[1], i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(106.5 * e, 131.34375 * e), a.bezierCurveTo(140.5 * e, 142.34375 * e, 225.5 * e, 184.34375 * e, 290.5 * e, 287.34375 * e), a.bezierCurveTo(270.5 * e, 188.34375 * e, 152.5 * e, 118.34375 * e, 107.5 * e, 131.34375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(157.5 * e, 137.34375 * e), a.bezierCurveTo(161.5 * e, 138.34375 * e, 164.5 * e, 140.34375 * e, 168.5 * e, 142.34375 * e), a.bezierCurveTo(165.5 * e, 156.34375 * e, 141.5 * e, 176.34375 * e, 126.5 * e, 179.34375 * e), a.bezierCurveTo(123.5 * e, 173.34375 * e, 120.5 * e, 169.34375 * e, 120.5 * e, 169.34375 * e), a.bezierCurveTo(141.5 * e, 161.34375 * e, 156.5 * e, 145.34375 * e, 155.5 * e, 136.34375 * e), a.closePath(), fill_path(a, i[4]), circle(a, 125.5 * e, 140.34375 * e, 11.180339887498949 * e), fill_path(a, i[5]), circle(a, 122.5 * e, 135.34375 * e, 5.0990195135927845 * e), fill_path(a, i[6]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(196.5 * e, 151.34375 * e), a.bezierCurveTo(211.5 * e, 158.34375 * e, 224.5 * e, 171.34375 * e, 229.5 * e, 176.34375 * e), a.bezierCurveTo(246.5 * e, 163.34375 * e, 259.5 * e, 166.34375 * e, 272.5 * e, 168.34375 * e), a.bezierCurveTo(254.5 * e, 146.34375 * e, 214.5 * e, 145.34375 * e, 198.5 * e, 151.34375 * e), a.closePath(), fill_path(a, i[7], i[8], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(154.5 * e, 222.34375 * e), a.bezierCurveTo(164.5 * e, 234.34375 * e, 173.5 * e, 242.34375 * e, 178.5 * e, 245.34375 * e), a.bezierCurveTo(174.5 * e, 265.34375 * e, 180.5 * e, 274.34375 * e, 186.5 * e, 283.34375 * e), a.bezierCurveTo(165.5 * e, 277.34375 * e, 151.5 * e, 245.34375 * e, 155.5 * e, 224.34375 * e), a.closePath(), fill_path(a, i[7], i[8], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(279.5 * e, 294.34375 * e), a.bezierCurveTo(286.5 * e, 285.84375 * e, 286.5 * e, 285.84375 * e, 293.5 * e, 277.34375 * e), a.bezierCurveTo(315.5 * e, 280.34375 * e, 315.5 * e, 280.34375 * e, 337.5 * e, 283.34375 * e), a.bezierCurveTo(340.5 * e, 311.34375 * e, 317.5 * e, 326.34375 * e, 307.5 * e, 331.34375 * e), a.closePath(), fill_path(a, i[7], i[8], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(296.5 * e, 287.34375 * e), a.bezierCurveTo(311.5 * e, 291.34375 * e, 311.5 * e, 291.34375 * e, 326.5 * e, 295.34375 * e), a.closePath(), fill_path(a, void 0, i[9], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(294.5 * e, 289.34375 * e), a.bezierCurveTo(308.5 * e, 297.34375 * e, 308.5 * e, 297.34375 * e, 322.5 * e, 305.34375 * e), a.closePath(), fill_path(a, void 0, i[9], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(294.5 * e, 291.34375 * e), a.bezierCurveTo(304 * e, 303.34375 * e, 304 * e, 303.34375 * e, 313.5 * e, 315.34375 * e), a.closePath(), fill_path(a, void 0, i[9], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(226.5 * e, 161.34375 * e), a.bezierCurveTo(230.5 * e, 160.34375 * e, 236.5 * e, 158.34375 * e, 238.5 * e, 161.34375 * e), a.bezierCurveTo(238.5 * e, 157.34375 * e, 228.5 * e, 159.34375 * e, 227.5 * e, 161.34375 * e), a.closePath(), fill_path(a, void 0, i[9], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(167.5 * e, 248.34375 * e), a.bezierCurveTo(165.5 * e, 251.34375 * e, 168.5 * e, 256.34375 * e, 168.5 * e, 253.34375 * e), a.bezierCurveTo(166.5 * e, 252.34375 * e, 168.5 * e, 246.34375 * e, 166.5 * e, 247.34375 * e), a.closePath(), fill_path(a, void 0, i[9], 3 * e), r
}

function create_fishfood_cooked(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 309 * e, r.height = 287 * e, a.globalAlpha = t ? .5 : 1, a.translate(10 * e, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(34.5 * e, 38.53125 * e), a.bezierCurveTo(91.5 * e, 30.53125 * e, 138.5 * e, 68.53125 * e, 169.5 * e, 93.53125 * e), a.bezierCurveTo(208.5 * e, 128.53125 * e, 226.5 * e, 157.53125 * e, 233.5 * e, 209.53125 * e), a.bezierCurveTo(195.5 * e, 218.53125 * e, 138.5 * e, 191.53125 * e, 105.5 * e, 157.53125 * e), a.bezierCurveTo(54.5 * e, 112.53125 * e, 41.5 * e, 80.53125 * e, 33.5 * e, 38.53125 * e), a.closePath(), fill_path(a, i[0], i[0], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(143.5 * e, 74.53125 * e), a.bezierCurveTo(164.5 * e, 73.53125 * e, 159 * e, 74.53125 * e, 174.5 * e, 74.53125 * e), a.bezierCurveTo(186 * e, 86.53125 * e, 186 * e, 86.53125 * e, 197.5 * e, 98.53125 * e), a.bezierCurveTo(186 * e, 97.03125 * e, 186 * e, 97.03125 * e, 174.5 * e, 95.53125 * e), a.closePath(), fill_path(a, i[0], i[0], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87.5 * e, 142.53125 * e), a.bezierCurveTo(92 * e, 160.03125 * e, 92 * e, 160.03125 * e, 96.5 * e, 177.53125 * e), a.bezierCurveTo(108 * e, 181.53125 * e, 108 * e, 181.53125 * e, 119.5 * e, 185.53125 * e), a.bezierCurveTo(116.5 * e, 175.53125 * e, 116.5 * e, 175.53125 * e, 113.5 * e, 165.53125 * e), a.closePath(), fill_path(a, i[0], i[0], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(236.5 * e, 189.53125 * e), a.bezierCurveTo(274.5 * e, 197.53125 * e, 255.5 * e, 194.03125 * e, 274.5 * e, 198.53125 * e), a.bezierCurveTo(272.5 * e, 236.53125 * e, 261.5 * e, 237.53125 * e, 242.5 * e, 248.53125 * e), a.bezierCurveTo(230.5 * e, 231.03125 * e, 230.5 * e, 231.03125 * e, 218.5 * e, 213.53125 * e), a.closePath(), fill_path(a, i[0], i[0], 10 * e), a.globalAlpha = 1, a.translate(-10 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(34.5 * e, 38.53125 * e), a.bezierCurveTo(91.5 * e, 30.53125 * e, 138.5 * e, 68.53125 * e, 169.5 * e, 93.53125 * e), a.bezierCurveTo(208.5 * e, 128.53125 * e, 226.5 * e, 157.53125 * e, 233.5 * e, 209.53125 * e), a.bezierCurveTo(195.5 * e, 218.53125 * e, 138.5 * e, 191.53125 * e, 105.5 * e, 157.53125 * e), a.bezierCurveTo(54.5 * e, 112.53125 * e, 41.5 * e, 80.53125 * e, 33.5 * e, 38.53125 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(143.5 * e, 74.53125 * e), a.bezierCurveTo(164.5 * e, 73.53125 * e, 159 * e, 74.53125 * e, 174.5 * e, 74.53125 * e), a.bezierCurveTo(186 * e, 86.53125 * e, 186 * e, 86.53125 * e, 197.5 * e, 98.53125 * e), a.bezierCurveTo(186 * e, 97.03125 * e, 186 * e, 97.03125 * e, 174.5 * e, 95.53125 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87.5 * e, 142.53125 * e), a.bezierCurveTo(92 * e, 160.03125 * e, 92 * e, 160.03125 * e, 96.5 * e, 177.53125 * e), a.bezierCurveTo(108 * e, 181.53125 * e, 108 * e, 181.53125 * e, 119.5 * e, 185.53125 * e), a.bezierCurveTo(116.5 * e, 175.53125 * e, 116.5 * e, 175.53125 * e, 113.5 * e, 165.53125 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(236.5 * e, 189.53125 * e), a.bezierCurveTo(274.5 * e, 197.53125 * e, 255.5 * e, 194.03125 * e, 274.5 * e, 198.53125 * e), a.bezierCurveTo(272.5 * e, 236.53125 * e, 261.5 * e, 237.53125 * e, 242.5 * e, 248.53125 * e), a.bezierCurveTo(230.5 * e, 231.03125 * e, 230.5 * e, 231.03125 * e, 218.5 * e, 213.53125 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(109.5 * e, 51.53125 * e), a.bezierCurveTo(107.5 * e, 92.53125 * e, 91.5 * e, 95.53125 * e, 59.5 * e, 101.53125 * e), fill_path(a, i[1], i[2], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72.5 * e, 51.53125 * e), a.bezierCurveTo(71 * e, 64.53125 * e, 69.5 * e, 76.53125 * e, 69.5 * e, 77.53125 * e), a.closePath(), fill_path(a, i[1], i[2], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(84.5 * e, 63.53125 * e), a.bezierCurveTo(70.5 * e, 65.03125 * e, 70.5 * e, 65.03125 * e, 56.5 * e, 66.53125 * e), a.closePath(), fill_path(a, i[1], i[2], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(125.5 * e, 84.53125 * e), a.bezierCurveTo(125.5 * e, 110.03125 * e, 125.5 * e, 110.03125 * e, 125.5 * e, 135.53125 * e), a.closePath(), fill_path(a, i[1], i[2], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(149.5 * e, 108.53125 * e), a.bezierCurveTo(150 * e, 137.03125 * e, 150 * e, 137.03125 * e, 150.5 * e, 165.53125 * e), a.closePath(), fill_path(a, i[1], i[2], 7 * e), r
}

function create_wall(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 130 * e,
        o = 142 * e,
        s = n / 2,
        _ = o / 2;
    return r.width = n, r.height = o, a.translate(s, _ + 7 * e), a.globalAlpha = t ? .5 : 1, circle(a, 0, 0, 60 * e), fill_path(a, i[0]), a.translate(0, -7 * e), a.globalAlpha = 1, circle(a, 0, 0, 60 * e, 0), fill_path(a, i[1], i[2], 4 * e), circle(a, 0, 0, 40 * e), fill_path(a, i[3]), circle(a, 0, 0, 25 * e), fill_path(a, i[4], i[5], 8 * e), r
}

function create_delay_wall(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 130 * e,
        n = 142 * e,
        o = a / 2,
        s = n / 2;
    return i.width = a, i.height = n, circle(r, o, s, 40 * e, 0), fill_path(r, void 0, t[0], 7 * e), circle(r, o, s, 30 * e, 0), fill_path(r, void 0, t[0], 7 * e), circle(r, o, s, 20 * e, 0), fill_path(r, t[0]), i
}

function create_wall_diamond(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 130 * e, r.height = 142 * e, a.globalAlpha = t ? .5 : 1, a.save(), a.translate(65 * e, 80 * e), a.rotate(.2), round_regular_polygon(a, 9, 60 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.save(), a.translate(65 * e, 71 * e), a.rotate(.2), round_regular_polygon(a, 9, 60 * e, 10 * e), fill_path(a, i[1], i[2], 4), a.rotate(-.32), round_regular_polygon(a, 9, 38 * e, 10 * e), fill_path(a, i[3], i[4], 4), a.rotate(.68), round_regular_polygon(a, 9, 20 * e, 8 * e), fill_path(a, i[5], i[6], 6), a.restore(), r
}

function create_palm(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 372 * e, i.height = 375 * e, r.globalAlpha = .5, r.translate(15 * e, 15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(313.0000305175781 * e, 76.58523559570312 * e), r.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e), r.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e), r.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e), r.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e), r.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e), r.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e), r.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e), r.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e), r.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e), r.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e), r.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e), r.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e), r.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e), r.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e), r.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e), r.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e), r.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e), r.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e), r.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e), r.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e), r.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e), r.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e), r.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e), r.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e), r.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e), r.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e), r.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e), r.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e), r.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e), r.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e), r.closePath(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(-15 * e, -15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(313.0000305175781 * e, 76.58523559570312 * e), r.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e), r.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e), r.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e), r.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e), r.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e), r.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e), r.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e), r.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e), r.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e), r.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e), r.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e), r.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e), r.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e), r.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e), r.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e), r.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e), r.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e), r.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e), r.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e), r.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e), r.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e), r.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e), r.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e), r.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e), r.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e), r.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e), r.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e), r.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e), r.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e), r.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(186.00003051757812 * e, 192.94886779785156 * e), r.bezierCurveTo(185.00003051757812 * e, 66.94886779785156 * e, 184.50003051757812 * e, 104.94886779785156 * e, 183.00003051757812 * e, 16.948867797851562 * e), r.bezierCurveTo(216.00003051757812 * e, 47.94886779785156 * e, 219.00003051757812 * e, 80.94886779785156 * e, 218.00003051757812 * e, 113.94886779785156 * e), r.bezierCurveTo(209.00003051757812 * e, 165.94886779785156 * e, 200.00003051757812 * e, 176.94886779785156 * e, 189.00003051757812 * e, 192.94886779785156 * e), r.closePath(), fill_path(r, t[3], t[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(190.00003051757812 * e, 191.94886779785156 * e), r.bezierCurveTo(207.00003051757812 * e, 348.94886779785156 * e, 205.00003051757812 * e, 323.94886779785156 * e, 209.00003051757812 * e, 358.94886779785156 * e), r.bezierCurveTo(171.00003051757812 * e, 334.94886779785156 * e, 167.00003051757812 * e, 302.94886779785156 * e, 161.00003051757812 * e, 268.94886779785156 * e), r.bezierCurveTo(160.00003051757812 * e, 218.94886779785156 * e, 181.00003051757812 * e, 191.94886779785156 * e, 189.00003051757812 * e, 186.94886779785156 * e), r.closePath(), fill_path(r, t[3], t[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(194.00003051757812 * e, 195.94886779785156 * e), r.bezierCurveTo(116.00003051757812 * e, 150.94886779785156 * e, 116.00003051757812 * e, 150.94886779785156 * e, 38.000030517578125 * e, 105.94886779785156 * e), r.bezierCurveTo(67.00003051757812 * e, 90.94886779785156 * e, 96.00003051757812 * e, 99.94886779785156 * e, 123.00003051757812 * e, 111.94886779785156 * e), r.bezierCurveTo(183.00003051757812 * e, 152.94886779785156 * e, 179.00003051757812 * e, 180.94886779785156 * e, 193.00003051757812 * e, 194.94886779785156 * e), r.closePath(), fill_path(r, t[3], t[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(189.00003051757812 * e, 190.94886779785156 * e), r.bezierCurveTo(250.00003051757812 * e, 133.94886779785156 * e, 311.0000305175781 * e, 78.94886779785156 * e, 311.0000305175781 * e, 76.94886779785156 * e), r.bezierCurveTo(306.0000305175781 * e, 127.94886779785156 * e, 283.0000305175781 * e, 148.94886779785156 * e, 261.0000305175781 * e, 166.94886779785156 * e), r.bezierCurveTo(220.00003051757812 * e, 197.94886779785156 * e, 191.00003051757812 * e, 194.94886779785156 * e, 189.00003051757812 * e, 195.94886779785156 * e), r.closePath(), fill_path(r, t[3], t[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(189.00003051757812 * e, 194.94886779785156 * e), r.bezierCurveTo(268.5000305175781 * e, 211.94886779785156 * e, 268.5000305175781 * e, 211.94886779785156 * e, 348.0000305175781 * e, 228.94886779785156 * e), r.bezierCurveTo(316.0000305175781 * e, 247.94886779785156 * e, 298.0000305175781 * e, 256.94886779785156 * e, 250.00003051757812 * e, 246.94886779785156 * e), r.bezierCurveTo(197.00003051757812 * e, 229.94886779785156 * e, 189.00003051757812 * e, 202.94886779785156 * e, 188.00003051757812 * e, 199.94886779785156 * e), r.closePath(), fill_path(r, t[3], t[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(192.00003051757812 * e, 191.94886779785156 * e), r.bezierCurveTo(116.50003051757812 * e, 238.44886779785156 * e, 116.50003051757812 * e, 238.44886779785156 * e, 41.000030517578125 * e, 284.94886779785156 * e), r.bezierCurveTo(49.000030517578125 * e, 252.94886779785156 * e, 56.000030517578125 * e, 242.94886779785156 * e, 80.00003051757812 * e, 215.94886779785156 * e), r.bezierCurveTo(125.00003051757812 * e, 181.94886779785156 * e, 174.00003051757812 * e, 183.94886779785156 * e, 192.00003051757812 * e, 191.94886779785156 * e), r.closePath(), fill_path(r, t[3], t[3], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(313.0000305175781 * e, 76.58523559570312 * e), r.bezierCurveTo(308.0000305175781 * e, 130.58523559570312 * e, 279.0000305175781 * e, 158.58523559570312 * e, 254.00003051757812 * e, 175.58523559570312 * e), r.bezierCurveTo(287.0000305175781 * e, 182.58523559570312 * e, 274.0000305175781 * e, 181.08523559570312 * e, 294.0000305175781 * e, 186.58523559570312 * e), r.bezierCurveTo(293.5000305175781 * e, 196.08523559570312 * e, 293.5000305175781 * e, 196.08523559570312 * e, 293.0000305175781 * e, 205.58523559570312 * e), r.bezierCurveTo(304.0000305175781 * e, 201.08523559570312 * e, 304.0000305175781 * e, 201.08523559570312 * e, 315.0000305175781 * e, 196.58523559570312 * e), r.bezierCurveTo(350.0000305175781 * e, 219.58523559570312 * e, 343.0000305175781 * e, 221.58523559570312 * e, 351.0000305175781 * e, 230.58523559570312 * e), r.bezierCurveTo(296.0000305175781 * e, 260.5852355957031 * e, 264.0000305175781 * e, 256.5852355957031 * e, 220.00003051757812 * e, 236.58523559570312 * e), r.bezierCurveTo(233.00003051757812 * e, 266.5852355957031 * e, 232.00003051757812 * e, 279.5852355957031 * e, 231.00003051757812 * e, 295.5852355957031 * e), r.bezierCurveTo(222.00003051757812 * e, 297.5852355957031 * e, 222.00003051757812 * e, 297.5852355957031 * e, 213.00003051757812 * e, 299.5852355957031 * e), r.bezierCurveTo(219.50003051757812 * e, 308.0852355957031 * e, 219.50003051757812 * e, 308.0852355957031 * e, 226.00003051757812 * e, 316.5852355957031 * e), r.bezierCurveTo(223.00003051757812 * e, 344.5852355957031 * e, 216.00003051757812 * e, 350.5852355957031 * e, 209.00003051757812 * e, 363.5852355957031 * e), r.bezierCurveTo(154.00003051757812 * e, 318.5852355957031 * e, 156.00003051757812 * e, 268.5852355957031 * e, 160.00003051757812 * e, 238.58523559570312 * e), r.bezierCurveTo(135.00003051757812 * e, 268.5852355957031 * e, 125.00003051757812 * e, 267.5852355957031 * e, 112.00003051757812 * e, 272.5852355957031 * e), r.bezierCurveTo(104.50003051757812 * e, 266.5852355957031 * e, 104.50003051757812 * e, 266.5852355957031 * e, 97.00003051757812 * e, 260.5852355957031 * e), r.bezierCurveTo(93.00003051757812 * e, 271.0852355957031 * e, 93.00003051757812 * e, 271.0852355957031 * e, 89.00003051757812 * e, 281.5852355957031 * e), r.bezierCurveTo(66.00003051757812 * e, 288.5852355957031 * e, 59.000030517578125 * e, 288.5852355957031 * e, 39.000030517578125 * e, 285.5852355957031 * e), r.bezierCurveTo(56.000030517578125 * e, 216.58523559570312 * e, 91.00003051757812 * e, 204.58523559570312 * e, 129.00003051757812 * e, 189.58523559570312 * e), r.bezierCurveTo(90.00003051757812 * e, 176.58523559570312 * e, 89.00003051757812 * e, 173.58523559570312 * e, 79.00003051757812 * e, 166.58523559570312 * e), r.bezierCurveTo(82.00003051757812 * e, 155.08523559570312 * e, 82.00003051757812 * e, 155.08523559570312 * e, 85.00003051757812 * e, 143.58523559570312 * e), r.bezierCurveTo(75.50003051757812 * e, 147.58523559570312 * e, 75.50003051757812 * e, 147.58523559570312 * e, 66.00003051757812 * e, 151.58523559570312 * e), r.bezierCurveTo(44.000030517578125 * e, 133.58523559570312 * e, 41.000030517578125 * e, 124.58523559570312 * e, 34.000030517578125 * e, 102.58523559570312 * e), r.bezierCurveTo(100.00003051757812 * e, 81.58523559570312 * e, 134.00003051757812 * e, 118.58523559570312 * e, 150.00003051757812 * e, 128.58523559570312 * e), r.bezierCurveTo(144.00003051757812 * e, 102.58523559570312 * e, 147.00003051757812 * e, 90.58523559570312 * e, 150.00003051757812 * e, 80.58523559570312 * e), r.bezierCurveTo(159.50003051757812 * e, 79.08523559570312 * e, 159.50003051757812 * e, 79.08523559570312 * e, 169.00003051757812 * e, 77.58523559570312 * e), r.bezierCurveTo(163.00003051757812 * e, 72.58523559570312 * e, 163.00003051757812 * e, 72.58523559570312 * e, 157.00003051757812 * e, 67.58523559570312 * e), r.bezierCurveTo(162.00003051757812 * e, 42.585235595703125 * e, 169.00003051757812 * e, 29.585235595703125 * e, 182.00003051757812 * e, 14.585235595703125 * e), r.bezierCurveTo(219.00003051757812 * e, 48.585235595703125 * e, 222.00003051757812 * e, 92.58523559570312 * e, 218.00003051757812 * e, 112.58523559570312 * e), r.bezierCurveTo(239.00003051757812 * e, 95.58523559570312 * e, 242.00003051757812 * e, 97.58523559570312 * e, 249.00003051757812 * e, 94.58523559570312 * e), r.bezierCurveTo(255.00003051757812 * e, 103.08523559570312 * e, 255.00003051757812 * e, 103.08523559570312 * e, 261.0000305175781 * e, 111.58523559570312 * e), r.bezierCurveTo(261.5000305175781 * e, 99.58523559570312 * e, 261.5000305175781 * e, 99.58523559570312 * e, 262.0000305175781 * e, 87.58523559570312 * e), r.bezierCurveTo(282.0000305175781 * e, 77.58523559570312 * e, 301.0000305175781 * e, 74.58523559570312 * e, 314.0000305175781 * e, 76.58523559570312 * e), r.closePath(), fill_path(r, void 0, t[2], 4 * e), i
}

function create_special_fur(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 248 * e, r.height = 128 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(137 * e, 7 * e), a.bezierCurveTo(169 * e, 14 * e, 212 * e, 9 * e, 241 * e, 5 * e), a.bezierCurveTo(211 * e, 63 * e, 158 * e, 92 * e, 103 * e, 109 * e), a.bezierCurveTo(73 * e, 126 * e, 54 * e, 124 * e, 6 * e, 99 * e), a.bezierCurveTo(82 * e, 63 * e, 113 * e, 35 * e, 137 * e, 8 * e), a.closePath(), fill_path(a, i[0], i[1], 14 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(73 * e, 124 * e), a.bezierCurveTo(111 * e, 126 * e, 162 * e, 97 * e, 203 * e, 61 * e), a.bezierCurveTo(156 * e, 98 * e, 131 * e, 106 * e, 105 * e, 109 * e), a.bezierCurveTo(99 * e, 121 * e, 87 * e, 124 * e, 72 * e, 124 * e), a.closePath(), fill_path(a, i[2], i[3], 1 * e), r
}

function create_wall_stone(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 130 * e, r.height = 148 * e, a.globalAlpha = t ? .5 : 1, a.save(), a.translate(65 * e, 85 * e), a.rotate(1.4), round_regular_polygon(a, 7, 60 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.save(), a.translate(65 * e, 74 * e), a.rotate(1.4), round_regular_polygon(a, 7, 60 * e, 10 * e), fill_path(a, i[1], i[2], 4), a.rotate(.64), round_regular_polygon(a, 7, 40 * e, 10 * e), fill_path(a, i[3], i[4], 4), a.rotate(.12), round_regular_polygon(a, 7, 23 * e, 5 * e), a.restore(), fill_path(a, i[5]), r
}

function create_wall_gold(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 125 * e, r.height = 139 * e, a.globalAlpha = t ? .5 : 1, a.save(), a.translate(63 * e, 79 * e), a.rotate(1), round_regular_polygon(a, 8, 60 * e, 10 * e), fill_path(a, i[0]), a.restore(), a.globalAlpha = 1, a.save(), a.translate(63 * e, 69 * e), a.rotate(1), round_regular_polygon(a, 8, 60 * e, 10 * e), fill_path(a, i[1], i[2], 4), a.rotate(.56), round_regular_polygon(a, 8, 40 * e, 10 * e), fill_path(a, i[3], i[4], 4), a.rotate(.28), round_regular_polygon(a, 8, 28 * e, 8 * e), fill_path(a, i[5]), a.restore(), r
}

function create_door_wood(e, t, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 90 * e, a.height = 101 * e, n.translate(0 * e, 5 * e), 0 === i && (n.globalAlpha = t ? .5 : 1, circle(n, 44 * e, 55 * e, 41 * e), fill_path(n, r[0])), n.globalAlpha = 1, circle(n, 44 * e, 45 * e, 41 * e), fill_path(n, r[1], r[2], 4 * e), circle(n, 44 * e, 45 * e, 31 * e), fill_path(n, r[3]), n.save(), n.translate(45 * e, 45 * e), round_rect(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e), n.restore(), fill_path(n, r[4], r[4], 2 * e), n.save(), n.translate(45 * e, 45 * e), round_rect(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e), n.restore(), fill_path(n, r[4], r[4], 2 * e), circle(n, 45 * e, 29 * e, 7 * e), fill_path(n, r[5]), circle(n, 45 * e, 61 * e, 7 * e), fill_path(n, r[5]), circle(n, 28 * e, 45 * e, 7 * e), fill_path(n, r[5]), circle(n, 62 * e, 45 * e, 7 * e), fill_path(n, r[5]), a
}

function create_door_stone(e, t, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 90 * e, a.height = 98 * e, n.translate(0, 4 * e), 0 === i && (n.globalAlpha = t ? .5 : 1, n.save(), n.translate(44 * e, 50 * e), n.rotate(1.4), round_regular_polygon(n, 7, 41 * e, 10 * e), n.restore(), fill_path(n, r[0])), n.globalAlpha = 1, n.save(), n.translate(44 * e, 44 * e), n.rotate(1.4), round_regular_polygon(n, 7, 41 * e, 10 * e), fill_path(n, r[1], r[2], 4 * e), round_regular_polygon(n, 7, 35 * e, 10 * e), fill_path(n, r[3], r[4], 4 * e), round_regular_polygon(n, 7, 23 * e, 5 * e), n.restore(), fill_path(n, r[5]), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), round_rect(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e), n.restore(), fill_path(n, r[4], r[4], 2 * e), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), round_rect(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e), n.restore(), fill_path(n, r[4], r[4], 2 * e), circle(n, 45 * e, 29 * e, 7 * e), fill_path(n, r[5]), circle(n, 45 * e, 61 * e, 7 * e), fill_path(n, r[5]), circle(n, 28 * e, 45 * e, 7 * e), fill_path(n, r[5]), circle(n, 62 * e, 45 * e, 7 * e), fill_path(n, r[5]), a
}

function create_door_gold(e, t, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 90 * e, a.height = 98 * e, n.translate(0, 4 * e), 0 === i && (n.globalAlpha = t ? .5 : 1, n.save(), n.translate(44 * e, 50 * e), n.rotate(1), round_regular_polygon(n, 8, 41 * e, 10 * e), fill_path(n, r[0]), n.restore()), n.globalAlpha = 1, n.save(), n.translate(44 * e, 44 * e), n.rotate(1), round_regular_polygon(n, 8, 41 * e, 10 * e), fill_path(n, r[1], r[2], 4 * e), n.rotate(.56), round_regular_polygon(n, 8, 33 * e, 10 * e), fill_path(n, r[3], r[4], 4 * e), n.rotate(.28), round_regular_polygon(n, 8, 24 * e, 8 * e), fill_path(n, r[5]), n.restore(), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), round_rect(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e), n.restore(), fill_path(n, r[4], r[4], 2 * e), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), round_rect(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e), n.restore(), fill_path(n, r[4], r[4], 2 * e), circle(n, 45 * e, 29 * e, 7 * e), fill_path(n, r[5]), circle(n, 45 * e, 61 * e, 7 * e), fill_path(n, r[5]), circle(n, 28 * e, 45 * e, 7 * e), fill_path(n, r[5]), circle(n, 62 * e, 45 * e, 7 * e), fill_path(n, r[5]), a
}

function create_furnace_on(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 300 * e, r.height = 300 * e, a.globalAlpha = t ? .5 : 1, a.save(), a.translate(150 * e, 160 * e), a.rotate(6.28), round_regular_polygon(a, 6, 146 * e, 30 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.save(), a.translate(150 * e, 150 * e), a.rotate(6.28), round_regular_polygon(a, 6, 146 * e, 30 * e), a.restore(), fill_path(a, i[1], i[2], 8 * e), a.save(), a.translate(150 * e, 150 * e), a.rotate(0), round_regular_polygon(a, 6, 105 * e, 30 * e), a.restore(), fill_path(a, i[3], i[3], 8 * e), a.save(), a.translate(150 * e, 150 * e), a.rotate(0), round_regular_polygon(a, 6, 66 * e, 30 * e), a.restore(), fill_path(a, i[4], i[2], 8 * e), a.save(), a.translate(150 * e, 150 * e), a.rotate(0), round_regular_polygon(a, 6, 31 * e, 30 * e), a.restore(), fill_path(a, i[5], i[6], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(150 * e, 207 * e), a.bezierCurveTo(150 * e, 151 * e, 150 * e, 101 * e, 150 * e, 94 * e), a.closePath(), fill_path(a, void 0, i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(118 * e, 100 * e), a.bezierCurveTo(118 * e, 205 * e, 118 * e, 207 * e, 118 * e, 200 * e), a.closePath(), fill_path(a, void 0, i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(183 * e, 100 * e), a.bezierCurveTo(183 * e, 203 * e, 183 * e, 203 * e, 183 * e, 200 * e), a.closePath(), fill_path(a, void 0, i[2], 8 * e), r
}

function create_furnace_off(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 300 * e, r.height = 300 * e, a.globalAlpha = t ? .5 : 1, a.save(), a.translate(150 * e, 160 * e), a.rotate(6.28), round_regular_polygon(a, 6, 146 * e, 30 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.save(), a.translate(150 * e, 150 * e), a.rotate(6.28), round_regular_polygon(a, 6, 146 * e, 30 * e), a.restore(), fill_path(a, i[1], i[2], 8 * e), a.save(), a.translate(150 * e, 150 * e), a.rotate(0), round_regular_polygon(a, 6, 105 * e, 30 * e), a.restore(), fill_path(a, i[3], i[3], 8 * e), a.save(), a.translate(150 * e, 150 * e), a.rotate(0), round_regular_polygon(a, 6, 66 * e, 30 * e), a.restore(), fill_path(a, i[4], i[2], 8 * e), a.save(), a.translate(131 * e, 116 * e), round_regular_polygon(a, 7, 17 * e, 8 * e), a.restore(), fill_path(a, i[6]), a.save(), a.translate(163 * e, 168 * e), round_regular_polygon(a, 7, 25 * e, 8 * e), a.restore(), fill_path(a, i[6]), a.save(), a.translate(117 * e, 151 * e), round_regular_polygon(a, 7, 11 * e, 8 * e), a.restore(), fill_path(a, i[6]), a.save(), a.translate(167 * e, 122 * e), round_regular_polygon(a, 7, 12 * e, 8 * e), a.restore(), fill_path(a, i[6]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(150 * e, 207 * e), a.bezierCurveTo(150 * e, 151 * e, 150 * e, 101 * e, 150 * e, 94 * e), a.closePath(), fill_path(a, void 0, i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(118 * e, 100 * e), a.bezierCurveTo(118 * e, 205 * e, 118 * e, 207 * e, 118 * e, 200 * e), a.closePath(), fill_path(a, void 0, i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(183 * e, 100 * e), a.bezierCurveTo(183 * e, 203 * e, 183 * e, 203 * e, 183 * e, 200 * e), a.closePath(), fill_path(a, void 0, i[2], 8 * e), r
}

function create_furnace_slot(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 118 * e, r.height = 129 * e, a.save(), a.translate(90 * e, 90 * e), round_rect(a, -86.5 * e, -86 * e, 110 * e, 110 * e, 15 * e), a.restore(), fill_path(a, i[0], i[1], 4), r
}

function create_door_diamond(e, t, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 90 * e, a.height = 98 * e, n.translate(0, 4 * e), 0 === i && (n.globalAlpha = t ? .5 : 1, n.save(), n.translate(44 * e, 50 * e), n.rotate(.2), round_regular_polygon(n, 9, 41 * e, 10 * e), n.restore(), fill_path(n, r[0])), n.globalAlpha = 1, n.save(), n.translate(44 * e, 44 * e), n.rotate(.2), round_regular_polygon(n, 9, 41 * e, 10 * e), fill_path(n, r[1], r[2], 4 * e), n.rotate(-.32), round_regular_polygon(n, 9, 32 * e, 10 * e), fill_path(n, r[3], r[4], 4 * e), n.rotate(.68), round_regular_polygon(n, 9, 23 * e, 8 * e), fill_path(n, r[5], r[6], 6 * e), n.restore(), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), round_rect(n, -9 * e, -25.5 * e, 18 * e, 51 * e, 30 * e), n.restore(), fill_path(n, r[4], r[4], 2 * e), n.save(), n.translate(45 * e, 45 * e), n.rotate(0), round_rect(n, -26 * e, -9 * e, 52 * e, 18 * e, 30 * e), n.restore(), fill_path(n, r[4], r[4], 2 * e), circle(n, 45 * e, 29 * e, 7 * e), fill_path(n, r[5]), circle(n, 45 * e, 61 * e, 7 * e), fill_path(n, r[5]), circle(n, 28 * e, 45 * e, 7 * e), fill_path(n, r[5]), circle(n, 62 * e, 45 * e, 7 * e), fill_path(n, r[5]), a
}

function create_coat(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 135 * e, r.height = 120 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(3.5 * e, 55.25 * e), a.bezierCurveTo(3.5 * e, 114.25 * e, 2.5 * e, 109.25 * e, 3.5 * e, 112.25 * e), a.bezierCurveTo(5.5 * e, 119.25 * e, 8.5 * e, 119.25 * e, 11.5 * e, 119.25 * e), a.bezierCurveTo(15.5 * e, 114.25 * e, 13.5 * e, 95.25 * e, 14.5 * e, 82.25 * e), a.closePath(), fill_path(a, i[0], i[1], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(6.5 * e, 43.25 * e), a.bezierCurveTo(3.5 * e, 27.25 * e, 7.5 * e, 20.25 * e, 25.5 * e, 11.25 * e), a.bezierCurveTo(45.5 * e, -.75 * e, 73.5 * e, 1.25 * e, 107.5 * e, 10.25 * e), a.bezierCurveTo(131.5 * e, 21.25 * e, 125.5 * e, 34.25 * e, 125.5 * e, 36.25 * e), a.closePath(), fill_path(a, i[0], i[1], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(120.5 * e, 62.25 * e), a.bezierCurveTo(121.5 * e, 95.25 * e, 120.5 * e, 80.25 * e, 120.5 * e, 100.25 * e), a.bezierCurveTo(118.5 * e, 119.25 * e, 123.5 * e, 118.25 * e, 129.5 * e, 113.25 * e), a.bezierCurveTo(133.5 * e, 107.25 * e, 130.5 * e, 97.25 * e, 130.5 * e, 87.25 * e), a.bezierCurveTo(129.5 * e, 56.25 * e, 130 * e, 70.75 * e, 129.5 * e, 54.25 * e), a.closePath(), fill_path(a, i[0], i[1], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(17.5 * e, 27 * e), a.bezierCurveTo(48.5 * e, 5 * e, 93.5 * e, 14 * e, 118.5 * e, 26 * e), a.bezierCurveTo(132.5 * e, 35 * e, 133.5 * e, 52 * e, 132.5 * e, 68 * e), a.bezierCurveTo(125.5 * e, 87 * e, 116.5 * e, 84 * e, 96.5 * e, 75 * e), a.bezierCurveTo(60.5 * e, 66 * e, 52.5 * e, 74 * e, 37.5 * e, 78 * e), a.bezierCurveTo(2.5 * e, 86 * e, 3.5 * e, 78 * e, 1.5 * e, 61 * e), a.bezierCurveTo(1.5 * e, 37 * e, 9.5 * e, 32 * e, 15.5 * e, 28 * e), a.closePath(), fill_path(a, i[2], i[3], 7 * e), r
}

function create_crab_crown(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 501 * e, r.height = 309 * e, a.translate(0, 6 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(126 * e, 184 * e), a.bezierCurveTo(169 * e, 196 * e, 194 * e, 198 * e, 227 * e, 198 * e), a.bezierCurveTo(235 * e, 222 * e, 236 * e, 223 * e, 241 * e, 226 * e), a.bezierCurveTo(245 * e, 228 * e, 257 * e, 228 * e, 263 * e, 226 * e), a.bezierCurveTo(267 * e, 225 * e, 270 * e, 211 * e, 275 * e, 198 * e), a.bezierCurveTo(332 * e, 194 * e, 347 * e, 192 * e, 372 * e, 188 * e), a.bezierCurveTo(366 * e, 174.5 * e, 366 * e, 174.5 * e, 360 * e, 161 * e), a.bezierCurveTo(253.5 * e, 162 * e, 253.5 * e, 162 * e, 147 * e, 163 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(100 * e, 116 * e), a.bezierCurveTo(90 * e, 101 * e, 96 * e, 89 * e, 106 * e, 83 * e), a.bezierCurveTo(86 * e, 79 * e, 86 * e, 52 * e, 93 * e, 38 * e), a.bezierCurveTo(99 * e, 51 * e, 107 * e, 57 * e, 122 * e, 63 * e), a.bezierCurveTo(130 * e, 53 * e, 141 * e, 46 * e, 161 * e, 46 * e), a.bezierCurveTo(157 * e, 31 * e, 158 * e, 20 * e, 169 * e, 6 * e), a.bezierCurveTo(171 * e, 24 * e, 186 * e, 33 * e, 198 * e, 45 * e), a.bezierCurveTo(252 * e, 45 * e, 252 * e, 45 * e, 306 * e, 45 * e), a.bezierCurveTo(323 * e, 33 * e, 332 * e, 21 * e, 335 * e, 7 * e), a.bezierCurveTo(349 * e, 21 * e, 347 * e, 36 * e, 345 * e, 46 * e), a.bezierCurveTo(364 * e, 46 * e, 369 * e, 48 * e, 377 * e, 63 * e), a.bezierCurveTo(398 * e, 58 * e, 403 * e, 49 * e, 409 * e, 40 * e), a.bezierCurveTo(419 * e, 57 * e, 411 * e, 79 * e, 398 * e, 85 * e), a.bezierCurveTo(405 * e, 100 * e, 405 * e, 106 * e, 401 * e, 118 * e), a.bezierCurveTo(332.5 * e, 128.5 * e, 332.5 * e, 128.5 * e, 264 * e, 139 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(122 * e, 191 * e), a.bezierCurveTo(123 * e, 237 * e, 135 * e, 245 * e, 153 * e, 259 * e), a.bezierCurveTo(167 * e, 269 * e, 158 * e, 281 * e, 118 * e, 276 * e), a.bezierCurveTo(104 * e, 273 * e, 98 * e, 268 * e, 93 * e, 242 * e), a.bezierCurveTo(89 * e, 220 * e, 92 * e, 201 * e, 102 * e, 179 * e), a.closePath(), fill_path(a, i[3], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(403 * e, 182 * e), a.bezierCurveTo(414 * e, 215 * e, 412 * e, 232 * e, 403 * e, 260 * e), a.bezierCurveTo(395 * e, 274 * e, 375 * e, 272 * e, 356 * e, 270 * e), a.bezierCurveTo(345 * e, 268 * e, 339 * e, 262 * e, 354 * e, 252 * e), a.bezierCurveTo(370 * e, 242 * e, 380 * e, 225 * e, 384 * e, 184 * e), a.closePath(), fill_path(a, i[3], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(155 * e, 157 * e), a.bezierCurveTo(146 * e, 189 * e, 137 * e, 198 * e, 114 * e, 219 * e), a.bezierCurveTo(104 * e, 212 * e, 98 * e, 203 * e, 89 * e, 189 * e), a.bezierCurveTo(82 * e, 178 * e, 91 * e, 164 * e, 93 * e, 136 * e), a.closePath(), fill_path(a, i[4], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(347 * e, 162 * e), a.bezierCurveTo(357 * e, 195 * e, 376 * e, 209 * e, 387 * e, 217 * e), a.bezierCurveTo(409 * e, 201 * e, 420 * e, 181 * e, 416 * e, 166 * e), a.bezierCurveTo(410 * e, 150 * e, 412 * e, 149 * e, 408 * e, 130 * e), a.closePath(), fill_path(a, i[4], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(86 * e, 134 * e), a.bezierCurveTo(79 * e, 102 * e, 92 * e, 84 * e, 108 * e, 92 * e), a.bezierCurveTo(149 * e, 108 * e, 184 * e, 111 * e, 242 * e, 111 * e), a.bezierCurveTo(294 * e, 108 * e, 341 * e, 105 * e, 386 * e, 98 * e), a.bezierCurveTo(412 * e, 91 * e, 417 * e, 86 * e, 415 * e, 133 * e), a.bezierCurveTo(413 * e, 160 * e, 413 * e, 160 * e, 368 * e, 174 * e), a.bezierCurveTo(308 * e, 184 * e, 291 * e, 185 * e, 270 * e, 186 * e), a.bezierCurveTo(264 * e, 206 * e, 262 * e, 215 * e, 253 * e, 215 * e), a.bezierCurveTo(239 * e, 217 * e, 239 * e, 211 * e, 231 * e, 186 * e), a.bezierCurveTo(178 * e, 184 * e, 156 * e, 179 * e, 112 * e, 162 * e), a.bezierCurveTo(87 * e, 151 * e, 90 * e, 144 * e, 87 * e, 137 * e), a.closePath(), fill_path(a, i[4], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(63 * e, 98 * e), a.bezierCurveTo(84 * e, 121 * e, 109 * e, 102 * e, 124 * e, 117 * e), a.bezierCurveTo(138 * e, 136 * e, 123 * e, 165 * e, 94 * e, 150 * e), a.bezierCurveTo(66 * e, 131 * e, 64 * e, 115 * e, 63 * e, 99 * e), a.closePath(), fill_path(a, i[3], i[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(449 * e, 97 * e), a.bezierCurveTo(446 * e, 143 * e, 415 * e, 151 * e, 402 * e, 155 * e), a.bezierCurveTo(386 * e, 157 * e, 373 * e, 133 * e, 391 * e, 116 * e), a.bezierCurveTo(402 * e, 106 * e, 432 * e, 124 * e, 449 * e, 97 * e), a.closePath(), fill_path(a, i[3], i[2], 10 * e), r
}

function create_crab_loot(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 304 * e, r.height = 278 * e, a.translate(10 * e, 25 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(128 * e, 137 * e), a.bezierCurveTo(155 * e, 144 * e, 223 * e, 143 * e, 256 * e, 122 * e), a.bezierCurveTo(249 * e, 180 * e, 210 * e, 227 * e, 164 * e, 242 * e), a.bezierCurveTo(74 * e, 213 * e, 99 * e, 166 * e, 127 * e, 138 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(284 * e, 52 * e), a.bezierCurveTo(126 * e, 112 * e, 89 * e, 177 * e, 170 * e, 241 * e), a.bezierCurveTo(103 * e, 275 * e, 20 * e, 239 * e, 12 * e, 159 * e), a.bezierCurveTo(5 * e, 76 * e, 75 * e, 4 * e, 165 * e, 13 * e), a.bezierCurveTo(233 * e, 15 * e, 260 * e, 33 * e, 284 * e, 52 * e), a.closePath(), fill_path(a, i[0]), a.translate(-10 * e, -25 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(128 * e, 137 * e), a.bezierCurveTo(155 * e, 144 * e, 223 * e, 143 * e, 256 * e, 122 * e), a.bezierCurveTo(249 * e, 180 * e, 210 * e, 227 * e, 164 * e, 242 * e), a.bezierCurveTo(74 * e, 213 * e, 99 * e, 166 * e, 127 * e, 138 * e), a.closePath(), fill_path(a, i[1], i[2], 15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(284 * e, 52 * e), a.bezierCurveTo(126 * e, 112 * e, 89 * e, 177 * e, 170 * e, 241 * e), a.bezierCurveTo(103 * e, 275 * e, 20 * e, 239 * e, 12 * e, 159 * e), a.bezierCurveTo(5 * e, 76 * e, 75 * e, 4 * e, 165 * e, 13 * e), a.bezierCurveTo(233 * e, 15 * e, 260 * e, 33 * e, 284 * e, 52 * e), a.closePath(), fill_path(a, i[3], i[4], 15 * e), r
}

function create_bed(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 175 * e, r.height = 169 * e, a.globalAlpha = .5, a.translate(0, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(19 * e, 139 * e), a.bezierCurveTo(18 * e, 163 * e, 22 * e, 156 * e, 53 * e, 157 * e), a.bezierCurveTo(97.5 * e, 157 * e, 97.5 * e, 157 * e, 142 * e, 157 * e), a.bezierCurveTo(150 * e, 157 * e, 153 * e, 156 * e, 154 * e, 142 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -3 * e), a.save(), a.translate(86.5 * e, 81.5 * e), round_rect(a, -66.5 * e, -65.5 * e, 133 * e, 131 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 5 * e), a.save(), a.translate(84.5 * e, 79 * e), round_rect(a, -50.5 * e, -49 * e, 101 * e, 98 * e, 10 * e), a.restore(), fill_path(a, i[3], i[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42 * e, 54 * e), a.bezierCurveTo(37 * e, 48 * e, 39 * e, 44 * e, 38 * e, 41 * e), a.bezierCurveTo(42 * e, 40 * e, 45 * e, 40 * e, 50 * e, 41 * e), a.bezierCurveTo(85 * e, 36 * e, 98 * e, 37 * e, 116 * e, 42 * e), a.bezierCurveTo(132 * e, 39 * e, 132 * e, 39 * e, 133 * e, 56 * e), a.bezierCurveTo(136 * e, 73 * e, 136 * e, 84 * e, 132 * e, 106 * e), a.bezierCurveTo(47 * e, 113 * e, 85.5 * e, 106 * e, 39 * e, 106 * e), a.bezierCurveTo(32 * e, 81 * e, 38 * e, 60 * e, 42 * e, 55 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.save(), a.translate(28 * e, 24 * e), a.rotate(0), round_rect(a, -14 * e, -14 * e, 28 * e, 28 * e, 4 * e), a.restore(), fill_path(a, i[1], i[2], 5 * e), a.save(), a.translate(143 * e, 23 * e), a.rotate(0), round_rect(a, -14 * e, -14 * e, 28 * e, 28 * e, 4 * e), a.restore(), fill_path(a, i[1], i[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 80 * e), a.bezierCurveTo(73 * e, 78 * e, 84 * e, 74 * e, 100 * e, 64 * e), a.bezierCurveTo(111 * e, 57 * e, 125 * e, 67 * e, 108 * e, 84 * e), a.bezierCurveTo(96 * e, 95 * e, 86 * e, 96 * e, 70 * e, 88 * e), a.bezierCurveTo(62.5 * e, 84 * e, 62.5 * e, 84 * e, 55 * e, 80 * e), a.closePath(), fill_path(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(17 * e, 112 * e), a.bezierCurveTo(14 * e, 146 * e, 27 * e, 152 * e, 37 * e, 149 * e), a.bezierCurveTo(78 * e, 155 * e, 128 * e, 150 * e, 146 * e, 150 * e), a.bezierCurveTo(158 * e, 144 * e, 158 * e, 121 * e, 153 * e, 114 * e), a.closePath(), fill_path(a, i[8], i[9], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(127 * e, 111 * e), a.bezierCurveTo(133 * e, 136 * e, 115 * e, 149 * e, 88 * e, 150 * e), a.bezierCurveTo(119.5 * e, 151 * e, 119.5 * e, 151 * e, 151 * e, 152 * e), a.bezierCurveTo(159 * e, 136 * e, 155 * e, 126 * e, 154 * e, 113 * e), a.closePath(), fill_path(a, i[9]), a.globalAlpha = .5, a.translate(0, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(15 * e, 117 * e), a.bezierCurveTo(34 * e, 109 * e, 61 * e, 106 * e, 94 * e, 109 * e), a.bezierCurveTo(126 * e, 110 * e, 142 * e, 113 * e, 154 * e, 119 * e), a.bezierCurveTo(154 * e, 123 * e, 154 * e, 123 * e, 154 * e, 127 * e), a.bezierCurveTo(127 * e, 118 * e, 15 * e, 122 * e, 18 * e, 129 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(14 * e, 127 * e), a.bezierCurveTo(13 * e, 117 * e, 12 * e, 109 * e, 15 * e, 103 * e), a.bezierCurveTo(16 * e, 95 * e, 21 * e, 92 * e, 60 * e, 93 * e), a.bezierCurveTo(91 * e, 93 * e, 118 * e, 93 * e, 143 * e, 96 * e), a.bezierCurveTo(151 * e, 96 * e, 155 * e, 99 * e, 156 * e, 112 * e), a.bezierCurveTo(157 * e, 124 * e, 157 * e, 127 * e, 156 * e, 128 * e), a.bezierCurveTo(138 * e, 112 * e, 100 * e, 118 * e, 84 * e, 118 * e), a.bezierCurveTo(28 * e, 118 * e, 20 * e, 120 * e, 16 * e, 127 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.save(), a.translate(27.5 * e, 138.5 * e), round_rect(a, -13.5 * e, -14.5 * e, 27 * e, 29 * e, 4 * e), a.restore(), fill_path(a, i[1], i[2], 5 * e), a.save(), a.translate(143.5 * e, 137 * e), round_rect(a, -13.5 * e, -14 * e, 27 * e, 28 * e, 4 * e), a.restore(), fill_path(a, i[1], i[2], 5 * e), r
}

function create_bed_top(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 175 * e, r.height = 169 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(17 * e, 112 * e), a.bezierCurveTo(14 * e, 146 * e, 27 * e, 152 * e, 37 * e, 149 * e), a.bezierCurveTo(78 * e, 155 * e, 128 * e, 150 * e, 146 * e, 150 * e), a.bezierCurveTo(158 * e, 144 * e, 158 * e, 121 * e, 153 * e, 114 * e), a.closePath(), fill_path(a, i[8], i[9], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(127 * e, 111 * e), a.bezierCurveTo(133 * e, 136 * e, 115 * e, 149 * e, 88 * e, 150 * e), a.bezierCurveTo(119.5 * e, 151 * e, 119.5 * e, 151 * e, 151 * e, 152 * e), a.bezierCurveTo(159 * e, 136 * e, 155 * e, 126 * e, 154 * e, 113 * e), a.closePath(), fill_path(a, i[9]), a.globalAlpha = .5, a.translate(0, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(15 * e, 117 * e), a.bezierCurveTo(34 * e, 109 * e, 61 * e, 106 * e, 94 * e, 109 * e), a.bezierCurveTo(126 * e, 110 * e, 142 * e, 113 * e, 154 * e, 119 * e), a.bezierCurveTo(154 * e, 123 * e, 154 * e, 123 * e, 154 * e, 127 * e), a.bezierCurveTo(127 * e, 118 * e, 15 * e, 122 * e, 18 * e, 129 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(14 * e, 127 * e), a.bezierCurveTo(13 * e, 117 * e, 12 * e, 109 * e, 15 * e, 103 * e), a.bezierCurveTo(16 * e, 95 * e, 21 * e, 92 * e, 60 * e, 93 * e), a.bezierCurveTo(91 * e, 93 * e, 118 * e, 93 * e, 143 * e, 96 * e), a.bezierCurveTo(151 * e, 96 * e, 155 * e, 99 * e, 156 * e, 112 * e), a.bezierCurveTo(157 * e, 124 * e, 157 * e, 127 * e, 156 * e, 128 * e), a.bezierCurveTo(138 * e, 112 * e, 100 * e, 118 * e, 84 * e, 118 * e), a.bezierCurveTo(28 * e, 118 * e, 20 * e, 120 * e, 16 * e, 127 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.save(), a.translate(27.5 * e, 138.5 * e), round_rect(a, -13.5 * e, -14.5 * e, 27 * e, 29 * e, 4 * e), a.restore(), fill_path(a, i[1], i[2], 5 * e), a.save(), a.translate(143.5 * e, 137 * e), round_rect(a, -13.5 * e, -14 * e, 27 * e, 28 * e, 4 * e), a.restore(), fill_path(a, i[1], i[2], 5 * e), r
}

function create_crab_spear(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 115 * e, r.height = 585 * e, a.scale(-1, 1), a.translate(-110 * e, 0), a.translate(10 * e, 10 * e), a.globalAlpha = t ? .5 : 1, a.save(), a.translate(51.5 * e, 342 * e), round_rect(a, -14.5 * e, -225 * e, 29 * e, 450 * e, 20 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(54 * e, 83 * e), a.bezierCurveTo(70 * e, 69 * e, 78 * e, 62 * e, 82 * e, 40 * e), a.bezierCurveTo(93 * e, 48 * e, 103 * e, 64 * e, 95 * e, 102 * e), a.bezierCurveTo(60 * e, 114 * e, 53 * e, 103 * e, 54 * e, 85 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(95 * e, 97 * e), a.bezierCurveTo(56 * e, 102 * e, 43 * e, 77 * e, 71 * e, 6 * e), a.bezierCurveTo(34 * e, 10 * e, 6 * e, 43 * e, 5 * e, 76 * e), a.bezierCurveTo(4 * e, 98 * e, 15 * e, 130 * e, 64 * e, 130 * e), a.bezierCurveTo(76 * e, 129 * e, 95 * e, 113 * e, 97 * e, 97 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 176 * e), a.bezierCurveTo(74 * e, 175 * e, 82 * e, 169 * e, 96 * e, 155 * e), a.bezierCurveTo(103 * e, 183 * e, 95 * e, 214 * e, 54 * e, 219 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(50 * e, 176 * e), a.bezierCurveTo(25 * e, 177 * e, 16 * e, 164 * e, 7 * e, 156 * e), a.bezierCurveTo(0 * e, 186 * e, 10 * e, 201 * e, 43 * e, 220 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 403 * e), a.bezierCurveTo(47 * e, 412 * e, 58 * e, 412 * e, 67 * e, 403 * e), a.bezierCurveTo(66.5 * e, 434 * e, 66.5 * e, 434 * e, 66 * e, 465 * e), a.bezierCurveTo(56 * e, 480 * e, 40 * e, 472 * e, 36 * e, 465 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(59 * e, 67 * e), a.bezierCurveTo(47 * e, 97 * e, 18 * e, 117 * e, 11 * e, 110 * e), a.bezierCurveTo(11 * e, 115 * e, 15 * e, 122 * e, 23 * e, 124 * e), a.bezierCurveTo(46 * e, 118 * e, 52 * e, 113 * e, 62 * e, 86 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 125 * e), a.bezierCurveTo(47 * e, 136 * e, 57 * e, 134 * e, 77 * e, 127 * e), a.bezierCurveTo(71 * e, 158 * e, 71 * e, 159 * e, 66 * e, 159 * e), a.bezierCurveTo(50.5 * e, 156.5 * e, 50.5 * e, 156.5 * e, 35 * e, 154 * e), a.bezierCurveTo(31 * e, 145 * e, 31 * e, 136 * e, 31 * e, 125 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 171 * e), a.bezierCurveTo(32 * e, 221 * e, 43 * e, 233 * e, 70 * e, 247 * e), a.bezierCurveTo(75 * e, 234 * e, 75 * e, 230 * e, 72 * e, 221 * e), a.bezierCurveTo(48 * e, 206 * e, 54 * e, 188 * e, 50 * e, 176 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(60 * e, 68 * e), a.bezierCurveTo(63 * e, 69 * e, 65 * e, 71 * e, 67 * e, 77 * e), a.bezierCurveTo(61 * e, 123 * e, 52 * e, 137 * e, 42 * e, 150 * e), a.bezierCurveTo(38 * e, 151 * e, 38 * e, 151 * e, 34 * e, 152 * e), a.bezierCurveTo(33 * e, 146.5 * e, 33 * e, 146.5 * e, 32 * e, 141 * e), a.bezierCurveTo(49 * e, 118 * e, 63 * e, 87 * e, 59 * e, 68 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(71 * e, 172 * e), a.bezierCurveTo(56 * e, 222 * e, 49 * e, 234 * e, 35 * e, 248 * e), a.bezierCurveTo(30 * e, 236 * e, 30 * e, 230 * e, 31 * e, 217 * e), a.bezierCurveTo(44 * e, 202 * e, 49 * e, 191 * e, 52 * e, 172 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 151 * e), a.bezierCurveTo(27 * e, 165 * e, 31 * e, 173 * e, 36 * e, 178 * e), a.bezierCurveTo(56 * e, 185 * e, 73 * e, 184 * e, 71 * e, 170 * e), a.bezierCurveTo(72 * e, 154 * e, 71 * e, 154 * e, 63 * e, 155 * e), a.closePath(), fill_path(a, i[0]), a.translate(-10 * e, -10 * e), a.globalAlpha = 1, a.save(), a.translate(51.5 * e, 342 * e), round_rect(a, -14.5 * e, -225 * e, 29 * e, 450 * e, 20 * e), a.restore(), fill_path(a, i[1], i[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(54 * e, 83 * e), a.bezierCurveTo(70 * e, 69 * e, 78 * e, 62 * e, 82 * e, 40 * e), a.bezierCurveTo(93 * e, 48 * e, 103 * e, 64 * e, 95 * e, 102 * e), a.bezierCurveTo(60 * e, 114 * e, 53 * e, 103 * e, 54 * e, 85 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(95 * e, 97 * e), a.bezierCurveTo(56 * e, 102 * e, 43 * e, 77 * e, 71 * e, 6 * e), a.bezierCurveTo(34 * e, 10 * e, 6 * e, 43 * e, 5 * e, 76 * e), a.bezierCurveTo(4 * e, 98 * e, 15 * e, 130 * e, 64 * e, 130 * e), a.bezierCurveTo(76 * e, 129 * e, 95 * e, 113 * e, 97 * e, 97 * e), a.closePath(), fill_path(a, i[5], i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 403 * e), a.bezierCurveTo(47 * e, 412 * e, 58 * e, 412 * e, 67 * e, 403 * e), a.bezierCurveTo(66.5 * e, 434 * e, 66.5 * e, 434 * e, 66 * e, 465 * e), a.bezierCurveTo(56 * e, 480 * e, 40 * e, 472 * e, 36 * e, 465 * e), a.closePath(), fill_path(a, i[7], i[8], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(37 * e, 427 * e), a.bezierCurveTo(47 * e, 435 * e, 55 * e, 435 * e, 67 * e, 427 * e), fill_path(a, void 0, i[8], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 448 * e), a.bezierCurveTo(46 * e, 454 * e, 54 * e, 457 * e, 65 * e, 449 * e), fill_path(a, void 0, i[8], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 176 * e), a.bezierCurveTo(74 * e, 175 * e, 82 * e, 169 * e, 96 * e, 155 * e), a.bezierCurveTo(103 * e, 183 * e, 95 * e, 214 * e, 54 * e, 219 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(50 * e, 176 * e), a.bezierCurveTo(25 * e, 177 * e, 16 * e, 164 * e, 7 * e, 156 * e), a.bezierCurveTo(0 * e, 186 * e, 10 * e, 201 * e, 43 * e, 220 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(59 * e, 67 * e), a.bezierCurveTo(47 * e, 97 * e, 18 * e, 117 * e, 11 * e, 110 * e), a.bezierCurveTo(11 * e, 115 * e, 15 * e, 122 * e, 23 * e, 124 * e), a.bezierCurveTo(46 * e, 118 * e, 52 * e, 113 * e, 62 * e, 86 * e), a.closePath(), fill_path(a, i[7], i[8], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 125 * e), a.bezierCurveTo(47 * e, 136 * e, 57 * e, 134 * e, 77 * e, 127 * e), a.bezierCurveTo(71 * e, 158 * e, 71 * e, 159 * e, 66 * e, 159 * e), a.bezierCurveTo(50.5 * e, 156.5 * e, 50.5 * e, 156.5 * e, 35 * e, 154 * e), a.bezierCurveTo(31 * e, 145 * e, 31 * e, 136 * e, 31 * e, 125 * e), a.closePath(), fill_path(a, i[7], i[8], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 171 * e), a.bezierCurveTo(32 * e, 221 * e, 43 * e, 233 * e, 70 * e, 247 * e), a.bezierCurveTo(75 * e, 234 * e, 75 * e, 230 * e, 72 * e, 221 * e), a.bezierCurveTo(48 * e, 206 * e, 54 * e, 188 * e, 50 * e, 176 * e), a.closePath(), fill_path(a, i[7], i[8], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(60 * e, 68 * e), a.bezierCurveTo(63 * e, 69 * e, 65 * e, 71 * e, 67 * e, 77 * e), a.bezierCurveTo(61 * e, 123 * e, 52 * e, 137 * e, 42 * e, 150 * e), a.bezierCurveTo(38 * e, 151 * e, 38 * e, 151 * e, 34 * e, 152 * e), a.bezierCurveTo(33 * e, 146.5 * e, 33 * e, 146.5 * e, 32 * e, 141 * e), a.bezierCurveTo(49 * e, 118 * e, 63 * e, 87 * e, 59 * e, 68 * e), a.closePath(), fill_path(a, i[7], i[8], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(71 * e, 172 * e), a.bezierCurveTo(56 * e, 222 * e, 49 * e, 234 * e, 35 * e, 248 * e), a.bezierCurveTo(30 * e, 236 * e, 30 * e, 230 * e, 31 * e, 217 * e), a.bezierCurveTo(44 * e, 202 * e, 49 * e, 191 * e, 52 * e, 172 * e), a.closePath(), fill_path(a, i[7], i[8], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 151 * e), a.bezierCurveTo(27 * e, 165 * e, 31 * e, 173 * e, 36 * e, 178 * e), a.bezierCurveTo(56 * e, 185 * e, 73 * e, 184 * e, 71 * e, 170 * e), a.bezierCurveTo(72 * e, 154 * e, 71 * e, 154 * e, 63 * e, 155 * e), a.closePath(), fill_path(a, i[7], i[8], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(53 * e, 113 * e), a.bezierCurveTo(65 * e, 140 * e, 75 * e, 166 * e, 52 * e, 169 * e), a.bezierCurveTo(29 * e, 168 * e, 41 * e, 143 * e, 53 * e, 112 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), r
}

function create_wood_spear(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 81 * e, r.height = 626 * e, a.translate(20 * e, 20 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 565 * e), a.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e), a.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e), a.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e), a.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e), a.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e), a.closePath(), fill_path(a, i[0]), a.translate(-20 * e, -20 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 565 * e), a.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e), a.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e), a.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e), a.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e), a.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e), a.closePath(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(27 * e, 129 * e), a.bezierCurveTo(32 * e, 135 * e, 48 * e, 136 * e, 53 * e, 129 * e), a.bezierCurveTo(56 * e, 97 * e, 53 * e, 82 * e, 52 * e, 64 * e), a.bezierCurveTo(49 * e, 33 * e, 44 * e, 27 * e, 41 * e, 21 * e), a.bezierCurveTo(31 * e, 40 * e, 28 * e, 84 * e, 27 * e, 127 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55 * e, 565 * e), a.bezierCurveTo(56 * e, 586 * e, 53 * e, 591 * e, 40 * e, 592 * e), a.bezierCurveTo(28 * e, 591 * e, 27 * e, 583 * e, 28 * e, 557 * e), a.bezierCurveTo(27.5 * e, 346 * e, 27.5 * e, 346 * e, 27 * e, 135 * e), a.bezierCurveTo(26 * e, 74 * e, 36 * e, 26 * e, 41 * e, 15 * e), a.bezierCurveTo(54 * e, 51 * e, 54 * e, 81 * e, 55 * e, 128 * e), a.closePath(), fill_path(a, void 0, i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(28 * e, 475 * e), a.bezierCurveTo(38 * e, 482 * e, 48 * e, 480 * e, 54 * e, 474 * e), a.bezierCurveTo(54 * e, 509.5 * e, 54 * e, 509.5 * e, 54 * e, 545 * e), a.bezierCurveTo(46 * e, 554 * e, 36 * e, 552 * e, 28 * e, 545 * e), a.closePath(), fill_path(a, i[4], i[5], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(28 * e, 496 * e), a.bezierCurveTo(39 * e, 506 * e, 49 * e, 503 * e, 54 * e, 496 * e), fill_path(a, void 0, i[5], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(28 * e, 521 * e), a.bezierCurveTo(41 * e, 529 * e, 49 * e, 524 * e, 54 * e, 520 * e), fill_path(a, void 0, i[5], 8 * e), r
}

function create_stonespear(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 100 * e, r.height = 648 * e, a.translate(20 * e, 20 * e), a.globalAlpha = t ? .5 : 1, a.save(), a.translate(50.5 * e, 349.5 * e), round_rect(a, -13.5 * e, -249.5 * e, 27 * e, 499 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 538 * e), a.bezierCurveTo(49.5 * e, 538 * e, 49.5 * e, 538 * e, 63 * e, 538 * e), a.bezierCurveTo(63.5 * e, 568 * e, 63.5 * e, 568 * e, 64 * e, 598 * e), a.bezierCurveTo(50 * e, 598 * e, 50 * e, 598 * e, 36 * e, 598 * e), a.bezierCurveTo(36 * e, 568.5 * e, 36 * e, 568.5 * e, 36 * e, 539 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 554 * e), a.bezierCurveTo(45 * e, 561 * e, 56 * e, 558 * e, 63 * e, 554 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(32 * e, 569 * e), a.bezierCurveTo(44 * e, 576 * e, 58 * e, 574 * e, 68 * e, 569 * e), a.bezierCurveTo(68 * e, 584 * e, 68 * e, 584 * e, 68 * e, 599 * e), a.bezierCurveTo(68 * e, 608 * e, 65 * e, 618 * e, 49 * e, 617 * e), a.bezierCurveTo(34 * e, 617 * e, 32 * e, 610 * e, 32 * e, 598 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41 * e, 581 * e), a.bezierCurveTo(48 * e, 584 * e, 55 * e, 583 * e, 60 * e, 581 * e), a.bezierCurveTo(60 * e, 589.5 * e, 60 * e, 589.5 * e, 60 * e, 598 * e), a.bezierCurveTo(60 * e, 604 * e, 59 * e, 609 * e, 48 * e, 608 * e), a.bezierCurveTo(40 * e, 607 * e, 40 * e, 606 * e, 41 * e, 581 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(31 * e, 106 * e), a.bezierCurveTo(31 * e, 124.5 * e, 31 * e, 124.5 * e, 31 * e, 143 * e), a.bezierCurveTo(31 * e, 163 * e, 38 * e, 169 * e, 48 * e, 168 * e), a.bezierCurveTo(57 * e, 168 * e, 67 * e, 165 * e, 67 * e, 148 * e), a.bezierCurveTo(67 * e, 123.5 * e, 67 * e, 123.5 * e, 67 * e, 99 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(49 * e, 27 * e), a.bezierCurveTo(64 * e, 62.5 * e, 64 * e, 62.5 * e, 79 * e, 98 * e), a.bezierCurveTo(74 * e, 113 * e, 63 * e, 121 * e, 50 * e, 122 * e), a.bezierCurveTo(35 * e, 123 * e, 22 * e, 109 * e, 20 * e, 98 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(49 * e, 43 * e), a.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 73 * e, 97 * e), a.bezierCurveTo(66 * e, 116 * e, 43 * e, 122 * e, 26 * e, 99 * e), a.closePath(), fill_path(a, i[0]), a.translate(-20 * e, -20 * e), a.globalAlpha = 1, a.save(), a.translate(50.5 * e, 349.5 * e), round_rect(a, -13.5 * e, -249.5 * e, 27 * e, 499 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 538 * e), a.bezierCurveTo(49.5 * e, 538 * e, 49.5 * e, 538 * e, 63 * e, 538 * e), a.bezierCurveTo(63.5 * e, 568 * e, 63.5 * e, 568 * e, 64 * e, 598 * e), a.bezierCurveTo(50 * e, 598 * e, 50 * e, 598 * e, 36 * e, 598 * e), a.bezierCurveTo(36 * e, 568.5 * e, 36 * e, 568.5 * e, 36 * e, 539 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 554 * e), a.bezierCurveTo(45 * e, 561 * e, 56 * e, 558 * e, 63 * e, 554 * e), a.closePath(), fill_path(a, void 0, i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(32 * e, 569 * e), a.bezierCurveTo(44 * e, 576 * e, 58 * e, 574 * e, 68 * e, 569 * e), a.bezierCurveTo(68 * e, 584 * e, 68 * e, 584 * e, 68 * e, 599 * e), a.bezierCurveTo(68 * e, 608 * e, 65 * e, 618 * e, 49 * e, 617 * e), a.bezierCurveTo(34 * e, 617 * e, 32 * e, 610 * e, 32 * e, 598 * e), a.closePath(), fill_path(a, i[5], i[6], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41 * e, 581 * e), a.bezierCurveTo(48 * e, 584 * e, 55 * e, 583 * e, 60 * e, 581 * e), a.bezierCurveTo(60 * e, 589.5 * e, 60 * e, 589.5 * e, 60 * e, 598 * e), a.bezierCurveTo(60 * e, 604 * e, 59 * e, 609 * e, 48 * e, 608 * e), a.bezierCurveTo(40 * e, 607 * e, 40 * e, 606 * e, 41 * e, 581 * e), a.closePath(), fill_path(a, i[7]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(31 * e, 106 * e), a.bezierCurveTo(31 * e, 124.5 * e, 31 * e, 124.5 * e, 31 * e, 143 * e), a.bezierCurveTo(31 * e, 163 * e, 38 * e, 169 * e, 48 * e, 168 * e), a.bezierCurveTo(57 * e, 168 * e, 67 * e, 165 * e, 67 * e, 148 * e), a.bezierCurveTo(67 * e, 123.5 * e, 67 * e, 123.5 * e, 67 * e, 99 * e), a.closePath(), fill_path(a, i[5], i[6], 8 * e), a.save(), a.translate(-46 * e, -50 * e), a.scale(2, 2), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(51 * e, 80 * e), a.bezierCurveTo(51 * e, 89.5 * e, 51 * e, 89.5 * e, 51 * e, 99 * e), a.bezierCurveTo(49 * e, 103 * e, 46 * e, 105 * e, 44 * e, 99 * e), a.bezierCurveTo(44 * e, 88.5 * e, 44 * e, 88.5 * e, 44 * e, 78 * e), a.closePath(), fill_path(a, i[8]), a.restore(), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(49 * e, 27 * e), a.bezierCurveTo(64 * e, 62.5 * e, 64 * e, 62.5 * e, 79 * e, 98 * e), a.bezierCurveTo(74 * e, 113 * e, 63 * e, 121 * e, 50 * e, 122 * e), a.bezierCurveTo(35 * e, 123 * e, 22 * e, 109 * e, 20 * e, 98 * e), a.closePath(), fill_path(a, i[8], i[9], 8 * e), a.scale(2, 2), a.translate(-23 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(57 * e, 69 * e), a.bezierCurveTo(50 * e, 76 * e, 43 * e, 75 * e, 38 * e, 69 * e), a.bezierCurveTo(43 * e, 57 * e, 43 * e, 57 * e, 48 * e, 45 * e), a.closePath(), fill_path(a, i[10]), r
}

function create_goldspear(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 88 * e, r.height = 647 * e, a.translate(20 * e, 20 * e), a.globalAlpha = t ? .5 : 1, a.save(), a.translate(45 * e, 384.5 * e), round_rect(a, -15 * e, -216.5 * e, 30 * e, 433 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(27 * e, 572 * e), a.bezierCurveTo(44 * e, 580 * e, 55 * e, 576 * e, 62 * e, 572 * e), a.bezierCurveTo(65 * e, 585.5 * e, 65 * e, 585.5 * e, 68 * e, 599 * e), a.bezierCurveTo(71 * e, 612 * e, 68 * e, 618 * e, 34 * e, 616 * e), a.bezierCurveTo(14 * e, 615 * e, 19 * e, 607 * e, 27 * e, 573 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(32 * e, 587 * e), a.bezierCurveTo(39 * e, 590 * e, 48 * e, 588 * e, 54 * e, 587 * e), a.bezierCurveTo(57 * e, 604 * e, 59 * e, 609 * e, 46 * e, 609 * e), a.bezierCurveTo(27 * e, 609 * e, 28 * e, 605 * e, 33 * e, 588 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(31 * e, 113 * e), a.bezierCurveTo(27 * e, 139 * e, 27 * e, 139 * e, 23 * e, 165 * e), a.bezierCurveTo(18 * e, 187 * e, 39 * e, 195 * e, 57 * e, 186 * e), a.bezierCurveTo(68 * e, 180 * e, 65 * e, 171 * e, 62 * e, 153 * e), a.bezierCurveTo(58.5 * e, 131 * e, 58.5 * e, 131 * e, 55 * e, 109 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39 * e, 139 * e), a.bezierCurveTo(43 * e, 139 * e, 43 * e, 139 * e, 47 * e, 139 * e), a.bezierCurveTo(51 * e, 158 * e, 56 * e, 176 * e, 44 * e, 175 * e), a.bezierCurveTo(33 * e, 177 * e, 34 * e, 167 * e, 39 * e, 140 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(44 * e, 29 * e), a.bezierCurveTo(57 * e, 63 * e, 57 * e, 63 * e, 70 * e, 97 * e), a.bezierCurveTo(60 * e, 111 * e, 60 * e, 111 * e, 50 * e, 125 * e), a.bezierCurveTo(45 * e, 128 * e, 41 * e, 128 * e, 35 * e, 124 * e), a.bezierCurveTo(26.5 * e, 110 * e, 26.5 * e, 110 * e, 18 * e, 96 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(44 * e, 54 * e), a.bezierCurveTo(50 * e, 72 * e, 50 * e, 72 * e, 56 * e, 90 * e), a.bezierCurveTo(58 * e, 94 * e, 59 * e, 98 * e, 53 * e, 105 * e), a.bezierCurveTo(47 * e, 113 * e, 43 * e, 113 * e, 36 * e, 103 * e), a.bezierCurveTo(29 * e, 96 * e, 31 * e, 94 * e, 35 * e, 83 * e), a.closePath(), fill_path(a, i[0]), a.translate(-20 * e, -20 * e), a.globalAlpha = 1, a.save(), a.translate(45 * e, 384.5 * e), round_rect(a, -15 * e, -216.5 * e, 30 * e, 433 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(27 * e, 572 * e), a.bezierCurveTo(44 * e, 580 * e, 55 * e, 576 * e, 62 * e, 572 * e), a.bezierCurveTo(65 * e, 585.5 * e, 65 * e, 585.5 * e, 68 * e, 599 * e), a.bezierCurveTo(71 * e, 612 * e, 68 * e, 618 * e, 34 * e, 616 * e), a.bezierCurveTo(14 * e, 615 * e, 19 * e, 607 * e, 27 * e, 573 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(32 * e, 587 * e), a.bezierCurveTo(39 * e, 590 * e, 48 * e, 588 * e, 54 * e, 587 * e), a.bezierCurveTo(57 * e, 604 * e, 59 * e, 609 * e, 46 * e, 609 * e), a.bezierCurveTo(27 * e, 609 * e, 28 * e, 605 * e, 33 * e, 588 * e), a.closePath(), fill_path(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(31 * e, 113 * e), a.bezierCurveTo(27 * e, 139 * e, 27 * e, 139 * e, 23 * e, 165 * e), a.bezierCurveTo(18 * e, 187 * e, 39 * e, 195 * e, 57 * e, 186 * e), a.bezierCurveTo(68 * e, 180 * e, 65 * e, 171 * e, 62 * e, 153 * e), a.bezierCurveTo(58.5 * e, 131 * e, 58.5 * e, 131 * e, 55 * e, 109 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39 * e, 139 * e), a.bezierCurveTo(43 * e, 139 * e, 43 * e, 139 * e, 47 * e, 139 * e), a.bezierCurveTo(51 * e, 158 * e, 56 * e, 176 * e, 44 * e, 175 * e), a.bezierCurveTo(33 * e, 177 * e, 34 * e, 167 * e, 39 * e, 140 * e), a.closePath(), fill_path(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(44 * e, 29 * e), a.bezierCurveTo(57 * e, 63 * e, 57 * e, 63 * e, 70 * e, 97 * e), a.bezierCurveTo(60 * e, 111 * e, 60 * e, 111 * e, 50 * e, 125 * e), a.bezierCurveTo(45 * e, 128 * e, 41 * e, 128 * e, 35 * e, 124 * e), a.bezierCurveTo(26.5 * e, 110 * e, 26.5 * e, 110 * e, 18 * e, 96 * e), a.closePath(), fill_path(a, i[6], i[7], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(44 * e, 54 * e), a.bezierCurveTo(50 * e, 72 * e, 50 * e, 72 * e, 56 * e, 90 * e), a.bezierCurveTo(58 * e, 94 * e, 59 * e, 98 * e, 53 * e, 105 * e), a.bezierCurveTo(47 * e, 113 * e, 43 * e, 113 * e, 36 * e, 103 * e), a.bezierCurveTo(29 * e, 96 * e, 31 * e, 94 * e, 35 * e, 83 * e), a.closePath(), fill_path(a, i[8]), r
}

function create_diamondspear(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 106 * e, r.height = 681 * e, a.translate(20 * e, 20 * e), a.globalAlpha = t ? .5 : 1, a.save(), a.translate(52.5 * e, 395 * e), a.rotate(0), round_rect(a, -11.5 * e, -226 * e, 23 * e, 452 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 588 * e), a.bezierCurveTo(47 * e, 596 * e, 61 * e, 594 * e, 69 * e, 588 * e), a.bezierCurveTo(79 * e, 615 * e, 78 * e, 632 * e, 59 * e, 643 * e), a.bezierCurveTo(41 * e, 650 * e, 27 * e, 632 * e, 30 * e, 610 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 135 * e), a.bezierCurveTo(61.5 * e, 142 * e, 61.5 * e, 142 * e, 71 * e, 149 * e), a.bezierCurveTo(69.5 * e, 166 * e, 69.5 * e, 166 * e, 68 * e, 183 * e), a.bezierCurveTo(60.5 * e, 187.5 * e, 60.5 * e, 187.5 * e, 53 * e, 192 * e), a.bezierCurveTo(45 * e, 187.5 * e, 45 * e, 187.5 * e, 37 * e, 183 * e), a.bezierCurveTo(35.5 * e, 167 * e, 35.5 * e, 167 * e, 34 * e, 151 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(64 * e, 150 * e), a.bezierCurveTo(63 * e, 164 * e, 63 * e, 164 * e, 62 * e, 178 * e), a.bezierCurveTo(58 * e, 181 * e, 58 * e, 181 * e, 54 * e, 184 * e), a.bezierCurveTo(48.5 * e, 181.5 * e, 48.5 * e, 181.5 * e, 43 * e, 179 * e), a.bezierCurveTo(42 * e, 164.5 * e, 42 * e, 164.5 * e, 41 * e, 150 * e), a.bezierCurveTo(46 * e, 152.5 * e, 46 * e, 152.5 * e, 51 * e, 155 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 39 * e), a.bezierCurveTo(65.5 * e, 82 * e, 65.5 * e, 82 * e, 79 * e, 125 * e), a.bezierCurveTo(66 * e, 137.5 * e, 66 * e, 137.5 * e, 53 * e, 150 * e), a.bezierCurveTo(39 * e, 138 * e, 39 * e, 138 * e, 25 * e, 126 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 64 * e), a.bezierCurveTo(60 * e, 92.5 * e, 60 * e, 92.5 * e, 68 * e, 121 * e), a.bezierCurveTo(61 * e, 127.5 * e, 61 * e, 127.5 * e, 54 * e, 134 * e), a.bezierCurveTo(46.5 * e, 127.5 * e, 46.5 * e, 127.5 * e, 39 * e, 121 * e), a.closePath(), fill_path(a, i[0]), a.translate(-20 * e, -20 * e), a.globalAlpha = 1, a.save(), a.translate(52.5 * e, 395 * e), a.rotate(0), round_rect(a, -11.5 * e, -226 * e, 23 * e, 452 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 588 * e), a.bezierCurveTo(47 * e, 596 * e, 61 * e, 594 * e, 69 * e, 588 * e), a.bezierCurveTo(79 * e, 615 * e, 78 * e, 632 * e, 59 * e, 643 * e), a.bezierCurveTo(41 * e, 650 * e, 27 * e, 632 * e, 30 * e, 610 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 135 * e), a.bezierCurveTo(61.5 * e, 142 * e, 61.5 * e, 142 * e, 71 * e, 149 * e), a.bezierCurveTo(69.5 * e, 166 * e, 69.5 * e, 166 * e, 68 * e, 183 * e), a.bezierCurveTo(60.5 * e, 187.5 * e, 60.5 * e, 187.5 * e, 53 * e, 192 * e), a.bezierCurveTo(45 * e, 187.5 * e, 45 * e, 187.5 * e, 37 * e, 183 * e), a.bezierCurveTo(35.5 * e, 167 * e, 35.5 * e, 167 * e, 34 * e, 151 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(64 * e, 150 * e), a.bezierCurveTo(63 * e, 164 * e, 63 * e, 164 * e, 62 * e, 178 * e), a.bezierCurveTo(58 * e, 181 * e, 58 * e, 181 * e, 54 * e, 184 * e), a.bezierCurveTo(48.5 * e, 181.5 * e, 48.5 * e, 181.5 * e, 43 * e, 179 * e), a.bezierCurveTo(42 * e, 164.5 * e, 42 * e, 164.5 * e, 41 * e, 150 * e), a.bezierCurveTo(46 * e, 152.5 * e, 46 * e, 152.5 * e, 51 * e, 155 * e), a.closePath(), fill_path(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 39 * e), a.bezierCurveTo(65.5 * e, 82 * e, 65.5 * e, 82 * e, 79 * e, 125 * e), a.bezierCurveTo(66 * e, 137.5 * e, 66 * e, 137.5 * e, 53 * e, 150 * e), a.bezierCurveTo(39 * e, 138 * e, 39 * e, 138 * e, 25 * e, 126 * e), a.closePath(), fill_path(a, i[6], i[7], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 64 * e), a.bezierCurveTo(60 * e, 92.5 * e, 60 * e, 92.5 * e, 68 * e, 121 * e), a.bezierCurveTo(61 * e, 127.5 * e, 61 * e, 127.5 * e, 54 * e, 134 * e), a.bezierCurveTo(46.5 * e, 127.5 * e, 46.5 * e, 127.5 * e, 39 * e, 121 * e), a.closePath(), fill_path(a, i[8]), r
}

function create_amespear(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 108 * e, r.height = 669 * e, a.translate(20 * e, 20 * e), a.globalAlpha = t ? .5 : 1, a.save(), a.translate(54 * e, 389.5 * e), round_rect(a, -15 * e, -228.5 * e, 30 * e, 457 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 579 * e), a.bezierCurveTo(47 * e, 587 * e, 61 * e, 584 * e, 71 * e, 579 * e), a.bezierCurveTo(75 * e, 597.5 * e, 75 * e, 597.5 * e, 79 * e, 616 * e), a.bezierCurveTo(66.5 * e, 628 * e, 66.5 * e, 628 * e, 54 * e, 640 * e), a.bezierCurveTo(41 * e, 628.5 * e, 41 * e, 628.5 * e, 28 * e, 617 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 141 * e), a.bezierCurveTo(40 * e, 136 * e, 40 * e, 136 * e, 50 * e, 131 * e), a.bezierCurveTo(63 * e, 136 * e, 63 * e, 136 * e, 76 * e, 141 * e), a.bezierCurveTo(72.5 * e, 161.5 * e, 72.5 * e, 161.5 * e, 69 * e, 182 * e), a.bezierCurveTo(61.5 * e, 186.5 * e, 61.5 * e, 186.5 * e, 54 * e, 191 * e), a.bezierCurveTo(45 * e, 186.5 * e, 45 * e, 186.5 * e, 36 * e, 182 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42 * e, 152 * e), a.bezierCurveTo(53 * e, 152 * e, 53 * e, 152 * e, 64 * e, 152 * e), a.bezierCurveTo(62 * e, 171 * e, 62 * e, 176 * e, 55 * e, 177 * e), a.bezierCurveTo(42 * e, 176 * e, 45 * e, 174 * e, 42 * e, 152 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 28 * e), a.bezierCurveTo(67.5 * e, 55 * e, 67.5 * e, 55 * e, 83 * e, 82 * e), a.bezierCurveTo(80 * e, 106.5 * e, 80 * e, 106.5 * e, 77 * e, 131 * e), a.bezierCurveTo(58 * e, 147 * e, 44 * e, 141 * e, 29 * e, 131 * e), a.bezierCurveTo(26.5 * e, 106.5 * e, 26.5 * e, 106.5 * e, 24 * e, 82 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(53 * e, 53 * e), a.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 69 * e, 87 * e), a.bezierCurveTo(67 * e, 106 * e, 67 * e, 106 * e, 65 * e, 125 * e), a.bezierCurveTo(54 * e, 130 * e, 51 * e, 130 * e, 41 * e, 125 * e), a.bezierCurveTo(39 * e, 105 * e, 39 * e, 105 * e, 37 * e, 85 * e), a.closePath(), fill_path(a, i[0]), a.translate(-20 * e, -20 * e), a.globalAlpha = 1, a.save(), a.translate(54 * e, 389.5 * e), a.rotate(0), round_rect(a, -15 * e, -228.5 * e, 30 * e, 457 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 579 * e), a.bezierCurveTo(47 * e, 587 * e, 61 * e, 584 * e, 71 * e, 579 * e), a.bezierCurveTo(75 * e, 597.5 * e, 75 * e, 597.5 * e, 79 * e, 616 * e), a.bezierCurveTo(66.5 * e, 628 * e, 66.5 * e, 628 * e, 54 * e, 640 * e), a.bezierCurveTo(41 * e, 628.5 * e, 41 * e, 628.5 * e, 28 * e, 617 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 141 * e), a.bezierCurveTo(40 * e, 136 * e, 40 * e, 136 * e, 50 * e, 131 * e), a.bezierCurveTo(63 * e, 136 * e, 63 * e, 136 * e, 76 * e, 141 * e), a.bezierCurveTo(72.5 * e, 161.5 * e, 72.5 * e, 161.5 * e, 69 * e, 182 * e), a.bezierCurveTo(61.5 * e, 186.5 * e, 61.5 * e, 186.5 * e, 54 * e, 191 * e), a.bezierCurveTo(45 * e, 186.5 * e, 45 * e, 186.5 * e, 36 * e, 182 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42 * e, 152 * e), a.bezierCurveTo(53 * e, 152 * e, 53 * e, 152 * e, 64 * e, 152 * e), a.bezierCurveTo(62 * e, 171 * e, 62 * e, 176 * e, 55 * e, 177 * e), a.bezierCurveTo(42 * e, 176 * e, 45 * e, 174 * e, 42 * e, 152 * e), a.closePath(), fill_path(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 28 * e), a.bezierCurveTo(67.5 * e, 55 * e, 67.5 * e, 55 * e, 83 * e, 82 * e), a.bezierCurveTo(80 * e, 106.5 * e, 80 * e, 106.5 * e, 77 * e, 131 * e), a.bezierCurveTo(58 * e, 147 * e, 44 * e, 141 * e, 29 * e, 131 * e), a.bezierCurveTo(26.5 * e, 106.5 * e, 26.5 * e, 106.5 * e, 24 * e, 82 * e), a.closePath(), fill_path(a, i[6], i[7], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(53 * e, 53 * e), a.bezierCurveTo(61 * e, 70 * e, 61 * e, 70 * e, 69 * e, 87 * e), a.bezierCurveTo(67 * e, 106 * e, 67 * e, 106 * e, 65 * e, 125 * e), a.bezierCurveTo(54 * e, 130 * e, 51 * e, 130 * e, 41 * e, 125 * e), a.bezierCurveTo(39 * e, 105 * e, 39 * e, 105 * e, 37 * e, 85 * e), a.closePath(), fill_path(a, i[8]), r
}

function create_spear(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 81 * e, r.height = 350 * e, a.globalAlpha = t ? .6 : 1, a.translate(0, 5 * e), a.save(), a.translate(35 * e, 160 * e), a.rotate(0), round_rect(a, -6 * e, -100.5 * e, 12 * e, 240 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.save(), a.translate(-6 * e, 11 * e), a.moveTo(26.0714111328125 * e, 50.9 * e), a.bezierCurveTo(32.0714111328125 * e, 35.892852783203125 * e, 39.0714111328125 * e, 18.892852783203125 * e, 45.0714111328125 * e, 7.892852783203125 * e), a.bezierCurveTo(51.0714111328125 * e, 13.892852783203125 * e, 56.0714111328125 * e, 36.892852783203125 * e, 60.0714111328125 * e, 50.892852783203125 * e), a.bezierCurveTo(52.5714111328125 * e, 58.892852783203125 * e, 52.5714111328125 * e, 58.892852783203125 * e, 45.0714111328125 * e, 66.89285278320312 * e), a.bezierCurveTo(37.0714111328125 * e, 58.892852783203125 * e, 37.0714111328125 * e, 58.892852783203125 * e, 29.0714111328125 * e, 50.892852783203125 * e), a.closePath(), fill_path(a, i[0]), a.restore(), a.globalAlpha = 1, a.save(), a.translate(0, -10 * e), a.translate(45.0714111328125 * e, 149.39285278320312 * e), a.rotate(0), round_rect(a, -6 * e, -94.5 * e, 12 * e, 250 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 6 * e), a.translate(0, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(29.0714111328125 * e, 50.9 * e), a.bezierCurveTo(32.0714111328125 * e, 35.892852783203125 * e, 39.0714111328125 * e, 18.892852783203125 * e, 45.0714111328125 * e, 7.892852783203125 * e), a.bezierCurveTo(51.0714111328125 * e, 13.892852783203125 * e, 56.0714111328125 * e, 36.892852783203125 * e, 60.0714111328125 * e, 50.892852783203125 * e), a.bezierCurveTo(52.5714111328125 * e, 58.892852783203125 * e, 52.5714111328125 * e, 58.892852783203125 * e, 45.0714111328125 * e, 66.89285278320312 * e), a.bezierCurveTo(37.0714111328125 * e, 58.892852783203125 * e, 37.0714111328125 * e, 58.892852783203125 * e, 29.0714111328125 * e, 50.892852783203125 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), r
}

function create_dragon_spear(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 43 * e, r.height = 209 * e, a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.translate(5 * e, 5 * e), a.save(), a.translate(21 * e, 102.5 * e), round_rect(a, -4 * e, -76.5 * e, 8 * e, 163 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.translate(0, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(20 * e, 10 * e), a.bezierCurveTo(25 * e, 25.5 * e, 25 * e, 25.5 * e, 30 * e, 41 * e), a.bezierCurveTo(25.5 * e, 38.5 * e, 25.5 * e, 38.5 * e, 21 * e, 36 * e), a.bezierCurveTo(16 * e, 38.5 * e, 16 * e, 38.5 * e, 11 * e, 41 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(21 * e, 1 * e), a.bezierCurveTo(28 * e, 18 * e, 28 * e, 18 * e, 35 * e, 35 * e), a.bezierCurveTo(28.5 * e, 32 * e, 28.5 * e, 32 * e, 22 * e, 29 * e), a.bezierCurveTo(14.5 * e, 32.5 * e, 14.5 * e, 32.5 * e, 7 * e, 36 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(14 * e, 146 * e), a.bezierCurveTo(21 * e, 146 * e, 21 * e, 146 * e, 28 * e, 146 * e), a.bezierCurveTo(27.5 * e, 147.5 * e, 27.5 * e, 147.5 * e, 27 * e, 149 * e), a.bezierCurveTo(27 * e, 160 * e, 27 * e, 160 * e, 27 * e, 171 * e), a.bezierCurveTo(27.5 * e, 171.5 * e, 27.5 * e, 171.5 * e, 28 * e, 172 * e), a.bezierCurveTo(21 * e, 172 * e, 21 * e, 172 * e, 14 * e, 172 * e), a.bezierCurveTo(14 * e, 171.5 * e, 14 * e, 171.5 * e, 14 * e, 171 * e), a.bezierCurveTo(14.5 * e, 171.5 * e, 14.5 * e, 171.5 * e, 15 * e, 172 * e), a.bezierCurveTo(15 * e, 160.5 * e, 15 * e, 160.5 * e, 15 * e, 149 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(21 * e, 6 * e), a.bezierCurveTo(26.5 * e, 18.5 * e, 26.5 * e, 18.5 * e, 32 * e, 31 * e), a.bezierCurveTo(27 * e, 29 * e, 27 * e, 29 * e, 22 * e, 27 * e), a.closePath(), fill_path(a, i[0]), a.translate(0, -20 * e), a.globalAlpha = 1, a.translate(0, 10 * e), a.translate(-5 * e, -5 * e), a.save(), a.translate(21 * e, 102.5 * e), round_rect(a, -4 * e, -76.5 * e, 8 * e, 163 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 4 * e), a.translate(0, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(20 * e, 10 * e), a.bezierCurveTo(25 * e, 25.5 * e, 25 * e, 25.5 * e, 30 * e, 41 * e), a.bezierCurveTo(25.5 * e, 38.5 * e, 25.5 * e, 38.5 * e, 21 * e, 36 * e), a.bezierCurveTo(16 * e, 38.5 * e, 16 * e, 38.5 * e, 11 * e, 41 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(21 * e, 1 * e), a.bezierCurveTo(28 * e, 18 * e, 28 * e, 18 * e, 35 * e, 35 * e), a.bezierCurveTo(28.5 * e, 32 * e, 28.5 * e, 32 * e, 22 * e, 29 * e), a.bezierCurveTo(14.5 * e, 32.5 * e, 14.5 * e, 32.5 * e, 7 * e, 36 * e), a.closePath(), fill_path(a, i[5], i[6], 4 * e), a.translate(0, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(14 * e, 146 * e), a.bezierCurveTo(21 * e, 146 * e, 21 * e, 146 * e, 28 * e, 146 * e), a.bezierCurveTo(27.5 * e, 147.5 * e, 27.5 * e, 147.5 * e, 27 * e, 149 * e), a.bezierCurveTo(27 * e, 160 * e, 27 * e, 160 * e, 27 * e, 171 * e), a.bezierCurveTo(27.5 * e, 171.5 * e, 27.5 * e, 171.5 * e, 28 * e, 172 * e), a.bezierCurveTo(21 * e, 172 * e, 21 * e, 172 * e, 14 * e, 172 * e), a.bezierCurveTo(14 * e, 171.5 * e, 14 * e, 171.5 * e, 14 * e, 171 * e), a.bezierCurveTo(14.5 * e, 171.5 * e, 14.5 * e, 171.5 * e, 15 * e, 172 * e), a.bezierCurveTo(15 * e, 160.5 * e, 15 * e, 160.5 * e, 15 * e, 149 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(21 * e, 6 * e), a.bezierCurveTo(26.5 * e, 18.5 * e, 26.5 * e, 18.5 * e, 32 * e, 31 * e), a.bezierCurveTo(27 * e, 29 * e, 27 * e, 29 * e, 22 * e, 27 * e), a.closePath(), fill_path(a, i[8]), r
}

function create_plus_chest(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 200 * e, r.height = 200 * e, a.save(), a.translate(112 * e, 158 * e), round_rect(a, -86.5 * e, -86 * e, 150 * e, 35 * e, 20 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(170 * e, 100 * e), round_rect(a, -86.5 * e, -86 * e, 35 * e, 150 * e, 20 * e), a.restore(), fill_path(a, i[0]), r
}

function create_chest_slot(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 118 * e, r.height = 129 * e, a.save(), a.translate(90 * e, 90 * e), round_rect(a, -86.5 * e, -86 * e, 110 * e, 110 * e, 15 * e), a.restore(), fill_path(a, i[0], i[1], 4), a.save(), round_rect(a, 30 * e, 115 * e, 60 * e, 5 * e, 15 * e), a.restore(), fill_path(a, i[2], i[3], 4), a.save(), round_rect(a, 50 * e, 117 * e, 20 * e, 10 * e, 15 * e), a.restore(), fill_path(a, i[2]), r
}

function create_chest(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 165 * e, r.height = 123 * e, a.save(), a.translate(81 * e, 65 * e), round_rect(a, -78 * e, -54.5 * e, 156 * e, 109 * e, 20 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(81 * e, 58 * e), round_rect(a, -78 * e, -54.5 * e, 156 * e, 109 * e, 20 * e), a.restore(), fill_path(a, i[1], i[2], 4), a.save(), a.translate(81 * e, 58 * e), round_rect(a, -69 * e, -47 * e, 138 * e, 93 * e, 15 * e), a.restore(), fill_path(a, i[3], i[4], 4), a.save(), a.translate(79 * e, 54 * e), round_rect(a, -34 * e, -40 * e, 68 * e, 88 * e, 13 * e), a.restore(), fill_path(a, void 0, i[5], 4), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(44 * e, 13 * e), a.bezierCurveTo(43.5 * e, 55 * e, 43.5 * e, 55 * e, 43 * e, 101 * e), a.closePath(), fill_path(a, void 0, i[6], 4), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115 * e, 13 * e), a.bezierCurveTo(115 * e, 56 * e, 115 * e, 56 * e, 115 * e, 101 * e), a.closePath(), fill_path(a, void 0, i[6], 4), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 6 * e), a.bezierCurveTo(35 * e, 56 * e, 36 * e, 109 * e, 35 * e, 110 * e), a.closePath(), fill_path(a, void 0, i[7], 4), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(123 * e, 6 * e), a.bezierCurveTo(123 * e, 56 * e, 123 * e, 56 * e, 123 * e, 110 * e), a.closePath(), fill_path(a, void 0, i[7], 4), a.save(), a.translate(79 * e, 113 * e), round_rect(a, -18 * e, -2 * e, 36 * e, 4 * e, 20 * e), a.restore(), fill_path(a, void 0, i[8], 4), a.save(), a.translate(75 * e, 118 * e), round_rect(a, -6 * e, -2.5 * e, 20 * e, 5 * e, 20 * e), a.restore(), fill_path(a, i[8]), r
}

function create_bag(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 86 * e, r.height = 45 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(15 * e, 15 * e), a.bezierCurveTo(16 * e, 15 * e, 19.5 * e, 9 * e, 24 * e, 2 * e), a.bezierCurveTo(41 * e, 2 * e, 41 * e, 2 * e, 58 * e, 2 * e), a.bezierCurveTo(64 * e, 13 * e, 61 * e, 8 * e, 65 * e, 13 * e), a.closePath(), fill_path(a, i[0], i[1], 4), a.save(), a.translate(43 * e, 27 * e), a.rotate(0), round_rect(a, -40 * e, -15 * e, 80 * e, 30 * e, 10 * e), a.restore(), fill_path(a, i[0], i[1], 4), a.save(), a.translate(43 * e, 33 * e), a.rotate(0), round_rect(a, -17 * e, -4.5 * e, 34 * e, 9 * e, 10 * e), a.restore(), fill_path(a, i[0], i[1], 4), r
}

function create_fur(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 92 * e, r.height = 108 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(31 * e, 10 * e), a.bezierCurveTo(37 * e, 2 * e, 49 * e, 0 * e, 61 * e, 15 * e), a.bezierCurveTo(81 * e, 31 * e, 78 * e, 25 * e, 79 * e, 37 * e), a.bezierCurveTo(76 * e, 44 * e, 81 * e, 56 * e, 85 * e, 63 * e), a.bezierCurveTo(91 * e, 71 * e, 90 * e, 78 * e, 83 * e, 84 * e), a.bezierCurveTo(60 * e, 98 * e, 67 * e, 95 * e, 57 * e, 102 * e), a.bezierCurveTo(47 * e, 106 * e, 43 * e, 106 * e, 31 * e, 98 * e), a.bezierCurveTo(22 * e, 91 * e, 17 * e, 89 * e, 7 * e, 84 * e), a.bezierCurveTo(1 * e, 77 * e, 4 * e, 73 * e, 7 * e, 60 * e), a.bezierCurveTo(11 * e, 50 * e, 5 * e, 32 * e, 15 * e, 27 * e), a.bezierCurveTo(26 * e, 18 * e, 26 * e, 24 * e, 31 * e, 10 * e), a.closePath(), fill_path(a, i[0], i[1], 4), r
}

function create_verified(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 60 * e, i.height = 60 * e, r.translate(-25 * e, -25 * e), r.translate(0, 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(24 * e, 50 * e), r.bezierCurveTo(32.5 * e, 54.5 * e, 32.5 * e, 54.5 * e, 41 * e, 59 * e), r.bezierCurveTo(57 * e, 47 * e, 57 * e, 47 * e, 73 * e, 35 * e), r.bezierCurveTo(57 * e, 53 * e, 57 * e, 53 * e, 41 * e, 71 * e), r.closePath(), fill_path(r, t[0]), r.translate(0, -5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(24 * e, 50 * e), r.bezierCurveTo(32.5 * e, 54.5 * e, 32.5 * e, 54.5 * e, 41 * e, 59 * e), r.bezierCurveTo(57 * e, 47 * e, 57 * e, 47 * e, 73 * e, 35 * e), r.bezierCurveTo(57 * e, 53 * e, 57 * e, 53 * e, 41 * e, 71 * e), r.closePath(), fill_path(r, t[1]), i
}

function create_earmuff(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 151 * e, r.height = 80 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(133 * e, 54 * e), a.bezierCurveTo(136 * e, 18 * e, 129 * e, 18 * e, 114 * e, 13 * e), a.bezierCurveTo(51 * e, 0 * e, 36 * e, 16 * e, 34 * e, 16 * e), a.bezierCurveTo(8 * e, 28 * e, 22 * e, 56 * e, 21 * e, 57 * e), a.closePath(), fill_path(a, i[2], i[3], 4), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(130 * e, 40 * e), a.bezierCurveTo(132 * e, 35 * e, 132 * e, 30 * e, 132 * e, 29 * e), a.bezierCurveTo(145 * e, 38 * e, 144 * e, 43 * e, 137 * e, 54 * e), a.closePath(), fill_path(a, i[0], i[1], 4), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(20 * e, 33 * e), a.bezierCurveTo(24 * e, 44 * e, 215 * e, 39 * e, 23 * e, 44 * e), a.bezierCurveTo(19 * e, 49 * e, 19 * e, 49 * e, 15 * e, 54 * e), a.bezierCurveTo(4 * e, 43 * e, 10 * e, 35 * e, 20 * e, 32 * e), a.closePath(), fill_path(a, i[0], i[1], 4), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(18 * e, 52 * e), a.bezierCurveTo(24 * e, 31 * e, 34 * e, 25 * e, 75 * e, 23 * e), a.bezierCurveTo(130 * e, 24 * e, 129 * e, 32 * e, 134 * e, 51 * e), a.bezierCurveTo(138 * e, 70 * e, 126 * e, 72 * e, 90 * e, 73 * e), a.bezierCurveTo(18 * e, 72 * e, 15 * e, 68 * e, 18 * e, 54 * e), a.closePath(), fill_path(a, i[0], i[1], 4), r
}

function create_cap_scarf(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 138 * e, r.height = 133 * e, a.globalAlpha = t ? .3 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(26 * e, 79.640625 * e), a.bezierCurveTo(13 * e, 84.640625 * e, 9 * e, 86.640625 * e, 7 * e, 78.640625 * e), a.bezierCurveTo(6 * e, 69.640625 * e, 15 * e, 67.640625 * e, 31 * e, 62.640625 * e), a.bezierCurveTo(63 * e, 55.640625 * e, 85 * e, 57.640625 * e, 104 * e, 63.640625 * e), a.bezierCurveTo(131 * e, 69.640625 * e, 132 * e, 71.640625 * e, 131 * e, 78.640625 * e), a.bezierCurveTo(131 * e, 91.640625 * e, 112 * e, 80.640625 * e, 91 * e, 75.640625 * e), a.bezierCurveTo(51 * e, 70.640625 * e, 45 * e, 74.640625 * e, 28 * e, 78.640625 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(8 * e, 82.640625 * e), a.bezierCurveTo(40 * e, 107.640625 * e, 53 * e, 104.640625 * e, 67 * e, 106.640625 * e), a.bezierCurveTo(101 * e, 103.640625 * e, 117 * e, 93.640625 * e, 127 * e, 84.640625 * e), a.bezierCurveTo(135 * e, 95.640625 * e, 131 * e, 107.640625 * e, 110 * e, 118.640625 * e), a.bezierCurveTo(78 * e, 129.640625 * e, 67 * e, 130.640625 * e, 27 * e, 119.640625 * e), a.bezierCurveTo(0 * e, 105.640625 * e, 8 * e, 83.640625 * e, 10 * e, 84.640625 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(8 * e, 73.640625 * e), a.bezierCurveTo(7 * e, 23.640625 * e, 33 * e, 19.640625 * e, 71 * e, 17.640625 * e), a.bezierCurveTo(129 * e, 19.640625 * e, 130 * e, 45.640625 * e, 130 * e, 76.640625 * e), a.bezierCurveTo(90 * e, 63.640625 * e, 85 * e, 63.640625 * e, 73 * e, 63.640625 * e), a.bezierCurveTo(38 * e, 63.640625 * e, 33 * e, 66.640625 * e, 8 * e, 73.640625 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72 * e, 28.640625 * e), a.bezierCurveTo(51 * e, 25.640625 * e, 56 * e, 7.640625 * e, 70 * e, 5.640625 * e), a.bezierCurveTo(94 * e, 7.640625 * e, 87 * e, 29.640625 * e, 72 * e, 28.640625 * e), a.closePath(), fill_path(a, i[3], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(51 * e, 26.640625 * e), a.bezierCurveTo(42 * e, 29.640625 * e, 43 * e, 31.640625 * e, 42 * e, 37.640625 * e), fill_path(a, void 0, i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(90 * e, 26.640625 * e), a.bezierCurveTo(100 * e, 28.640625 * e, 98 * e, 34.640625 * e, 99 * e, 38.640625 * e), fill_path(a, void 0, i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(26 * e, 79.640625 * e), a.bezierCurveTo(13 * e, 84.640625 * e, 9 * e, 86.640625 * e, 7 * e, 78.640625 * e), a.bezierCurveTo(6 * e, 69.640625 * e, 15 * e, 67.640625 * e, 31 * e, 62.640625 * e), a.bezierCurveTo(63 * e, 55.640625 * e, 85 * e, 57.640625 * e, 104 * e, 63.640625 * e), a.bezierCurveTo(131 * e, 69.640625 * e, 132 * e, 71.640625 * e, 131 * e, 78.640625 * e), a.bezierCurveTo(131 * e, 91.640625 * e, 112 * e, 80.640625 * e, 91 * e, 75.640625 * e), a.bezierCurveTo(51 * e, 70.640625 * e, 45 * e, 74.640625 * e, 28 * e, 78.640625 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(8 * e, 82.640625 * e), a.bezierCurveTo(40 * e, 107.640625 * e, 53 * e, 104.640625 * e, 67 * e, 106.640625 * e), a.bezierCurveTo(101 * e, 103.640625 * e, 117 * e, 93.640625 * e, 127 * e, 84.640625 * e), a.bezierCurveTo(135 * e, 95.640625 * e, 131 * e, 107.640625 * e, 110 * e, 118.640625 * e), a.bezierCurveTo(78 * e, 129.640625 * e, 67 * e, 130.640625 * e, 27 * e, 119.640625 * e), a.bezierCurveTo(0 * e, 105.640625 * e, 8 * e, 83.640625 * e, 10 * e, 84.640625 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), r
}

function create_spike(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d"),
        n = 170 * e,
        o = 172 * e,
        s = n / 2,
        _ = o / 2;
    r.width = n, r.height = o, a.translate(s, _ + 7 * e), a.globalAlpha = t ? .5 : 0, circle(a, 0, 0, 60 * e), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -7 * e), a.save();
    for (var T = 0; T < 10; T++) a.rotate(Math.PI / 5), a.save(), a.translate(65 * e, 0), round_regular_polygon(a, 3, 20 * e, 4 * e), fill_path(a, i[1], i[2], 4 * e), a.restore();
    return a.restore(), circle(a, 0, 0, 60 * e, 0), fill_path(a, i[3], i[4], 4 * e), circle(a, 0, 0, 40 * e), fill_path(a, i[5]), circle(a, 0, 0, 25 * e), fill_path(a, i[6], i[7], 8 * e), r
}

function create_spiketimer(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 170 * e,
        n = 172 * e,
        o = a / 2,
        s = n / 2;
    i.width = a, i.height = n, r.translate(o, s), r.save();
    for (var _ = 0; _ < 10; _++) r.rotate(Math.PI / 5), r.save(), r.translate(65 * e, 0), round_regular_polygon(r, 3, 18 * e, 4 * e), fill_path(r, t[0]), r.restore();
    return r.restore(), circle(r, 0, 0, 40 * e, 0), fill_path(r, void 0, t[0], 6 * e), circle(r, 0, 0, 20 * e, 0), fill_path(r, t[0]), i
}

function create_spike_stone(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    r.width = 170 * e, r.height = 170 * e, a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.save(), a.translate(85 * e, 88 * e), a.rotate(1.4), round_regular_polygon(a, 7, 60 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(85 * e, 80 * e);
    for (var n = 0; n < 10; n++) a.rotate(Math.PI / 5), a.save(), a.translate(65 * e, 0), round_regular_polygon(a, 3, 21 * e, 4 * e), fill_path(a, i[1], i[2], 4 * e), a.restore();
    return a.save(), a.translate(0 * e, 0 * e), a.rotate(1.4), round_regular_polygon(a, 7, 60 * e, 10 * e), fill_path(a, i[3], i[4], 4 * e), a.rotate(.64), round_regular_polygon(a, 7, 40 * e, 10 * e), fill_path(a, i[5], i[6], 4 * e), a.rotate(.12), round_regular_polygon(a, 7, 23 * e, 5 * e), a.restore(), fill_path(a, i[7]), r
}

function create_spike_gold(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    r.width = 170 * e, r.height = 170 * e, a.globalAlpha = t ? .5 : 1, a.translate(0, 3 * e), a.save(), a.translate(85 * e, 95 * e), a.rotate(1.4), round_regular_polygon(a, 7, 60 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(85 * e, 82 * e);
    for (var n = 0; n < 10; n++) a.rotate(Math.PI / 5), a.save(), a.translate(65 * e, 0), round_regular_polygon(a, 3, 21 * e, 4 * e), fill_path(a, i[1], i[2], 4 * e), a.restore();
    return a.save(), a.translate(0 * e, 0 * e), a.rotate(1), round_regular_polygon(a, 8, 60 * e, 10 * e), fill_path(a, i[3], i[4], 4 * e), a.rotate(.56), round_regular_polygon(a, 8, 40 * e, 10 * e), fill_path(a, i[5], i[6], 4 * e), a.rotate(.28), round_regular_polygon(a, 8, 28 * e, 8 * e), fill_path(a, i[7]), a.restore(), r
}

function create_spike_diamond(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    r.width = 170 * e, r.height = 170 * e, a.translate(0, 3 * e), a.globalAlpha = t ? .5 : 1, a.save(), a.translate(85 * e, 95 * e), a.rotate(1.4), round_regular_polygon(a, 7, 60 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(85 * e, 82 * e);
    for (var n = 0; n < 10; n++) a.rotate(Math.PI / 5), a.save(), a.translate(65 * e, 0), round_regular_polygon(a, 3, 21 * e, 4 * e), fill_path(a, i[1], i[2], 4 * e), a.restore();
    return a.save(), a.translate(0 * e, 0 * e), a.rotate(.2), round_regular_polygon(a, 9, 60 * e, 10 * e), fill_path(a, i[3], i[4], 4 * e), a.rotate(-.32), round_regular_polygon(a, 9, 38 * e, 10 * e), fill_path(a, i[5], i[6], 4 * e), a.rotate(.68), round_regular_polygon(a, 9, 20 * e, 8 * e), fill_path(a, i[7], i[8], 6 * e), a.restore(), r
}

function create_hammer(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 69 * e, r.height = 120 * e, a.globalAlpha = t ? .5 : 1, a.save(), a.translate(30 * e, 84 * e), round_rect(a, -6 * e, -66.5 * e, 8 * e, 100 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(30 * e, 45 * e), round_rect(a, -9.5 * e, -6.5 * e, 16 * e, 13 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(30 * e, 17 * e), round_rect(a, -7.5 * e, -5.5 * e, 12 * e, 11 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(30 * e, 31 * e), round_rect(a, -26 * e, -14.5 * e, 52 * e, 29 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.save(), a.translate(36 * e, 79.140625 * e), round_rect(a, -6 * e, -66.5 * e, 8 * e, 100 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 3 * e), a.save(), a.translate(35 * e, 40.140625 * e), round_rect(a, -9.5 * e, -6.5 * e, 16 * e, 13 * e, 10 * e), a.restore(), fill_path(a, i[3], i[4], 3 * e), a.save(), a.translate(35 * e, 12.140625 * e), round_rect(a, -7.5 * e, -5.5 * e, 12 * e, 11 * e, 10 * e), a.restore(), fill_path(a, i[3], i[4], 3 * e), a.save(), a.translate(34.5 * e, 26.140625 * e), round_rect(a, -26 * e, -14.5 * e, 52 * e, 29 * e, 5 * e), a.restore(), fill_path(a, i[3], i[4], 3 * e), r
}

function create_clock_day(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d");
    return t.width = 321 * e, t.height = 345 * e, i.translate(0, 5 * e), i.translate(0, 20 * e), circle(i, 160.5 * e, 159.5 * e, 156.39595138242822 * e), fill_path(i, "#322413", "#322413", 4 * e), i.translate(0, -20 * e), circle(i, 160.5 * e, 159.5 * e, 156.39595138242822 * e), fill_path(i, "#392C16", "#5E3E1A", 10 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(31.999969482421875 * e, 163.07290649414062 * e), i.bezierCurveTo(22.999969482421875 * e, 67.07290649414062 * e, 106 * e, 20.072906494140625 * e, 162 * e, 23.072906494140625 * e), i.bezierCurveTo(269.9999694824219 * e, 31.072906494140625 * e, 292.9999694824219 * e, 120.07290649414062 * e, 294.9999694824219 * e, 161.07290649414062 * e), i.bezierCurveTo(165.49996948242188 * e, 162.07290649414062 * e, 165.49996948242188 * e, 162.07290649414062 * e, 35.999969482421875 * e, 163.07290649414062 * e), i.closePath(), fill_path(i, "#12432D"), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(32.999969482421875 * e, 165.07290649414062 * e), i.bezierCurveTo(16.999969482421875 * e, 221.07290649414062 * e, 85 * e, 289.0729064941406 * e, 156 * e, 294.0729064941406 * e), i.bezierCurveTo(263.9999694824219 * e, 293.0729064941406 * e, 295.9999694824219 * e, 199.07290649414062 * e, 294.9999694824219 * e, 159.07290649414062 * e), i.closePath(), fill_path(i, "#3A2A0D"), circle(i, 161 * e, 158.07290649414062 * e, 133.4053971921676 * e), fill_path(i, void 0, "#5E3E1A", 10 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(31.999969482421875 * e, 161.62844848632812 * e), i.bezierCurveTo(162.49996948242188 * e, 161.62844848632812 * e, 162.49996948242188 * e, 161.62844848632812 * e, 292.9999694824219 * e, 161.62844848632812 * e), i.closePath(), fill_path(i, void 0, "#5E3E1A", 12 * e), i.translate(0, 8 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(66 * e, 158.29513549804688 * e), i.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#c7a726", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(57.999969482421875 * e, 117.29513549804688 * e), i.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#c7a726", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(95 * e, 90.29513549804688 * e), i.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#c7a726", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(116 * e, 52.850677490234375 * e), i.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e), i.closePath(), fill_path(i, void 0, "#c7a726", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(159 * e, 61.295135498046875 * e), i.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#c7a726", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(203 * e, 51.295135498046875 * e), i.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#c7a726", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(225 * e, 89.29513549804688 * e), i.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#c7a726", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(266.9999694824219 * e, 112.29513549804688 * e), i.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#c7a726", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(256.9999694824219 * e, 155.29513549804688 * e), i.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#c7a726", 12 * e), i.translate(0, -8 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(66 * e, 158.29513549804688 * e), i.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#EDCE4F", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(57.999969482421875 * e, 117.29513549804688 * e), i.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#EDCE4F", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(95 * e, 90.29513549804688 * e), i.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#EDCE4F", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(116 * e, 52.850677490234375 * e), i.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e), i.closePath(), fill_path(i, void 0, "#EDCE4F", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(159 * e, 61.295135498046875 * e), i.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#EDCE4F", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(203 * e, 51.295135498046875 * e), i.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#EDCE4F", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(225 * e, 89.29513549804688 * e), i.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#EDCE4F", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(266.9999694824219 * e, 112.29513549804688 * e), i.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#EDCE4F", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(256.9999694824219 * e, 155.29513549804688 * e), i.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#EDCE4F", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(94.00003051757812 * e, 164.40341186523438 * e), i.bezierCurveTo(162.50003051757812 * e, 164.40341186523438 * e, 230.00003051757812 * e, 165.40341186523438 * e, 231.00003051757812 * e, 164.40341186523438 * e), i.bezierCurveTo(214.00003051757812 * e, 267.4034118652344 * e, 92.00003051757812 * e, 243.40341186523438 * e, 93.00003051757812 * e, 165.40341186523438 * e), i.closePath(), fill_path(i, "#704618", "#5D3D1A", 8 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(96 * e, 166 * e), i.bezierCurveTo(88 * e, 117 * e, 129 * e, 92 * e, 161 * e, 91 * e), i.bezierCurveTo(201 * e, 90 * e, 223 * e, 121 * e, 230 * e, 161 * e), i.closePath(), fill_path(i, "#ECBE35", "#EDCE4F", 8 * e), circle(i, 160.00003051757812 * e, 166.49432373046875 * e, 28.30194339616981 * e), fill_path(i, "#392C16", "#5E3E1A", 10 * e), t
}

function create_clock_night(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d");
    return t.width = 321 * e, t.height = 345 * e, i.translate(0, 5 * e), i.translate(0, 20 * e), circle(i, 160.5 * e, 159.5 * e, 156.39595138242822 * e), fill_path(i, "#322413", "#322413", 4 * e), i.translate(0, -20 * e), circle(i, 160.5 * e, 159.5 * e, 156.39595138242822 * e), fill_path(i, "#392C16", "#5E3E1A", 10 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(31.999969482421875 * e, 163.07290649414062 * e), i.bezierCurveTo(22.999969482421875 * e, 67.07290649414062 * e, 106 * e, 20.072906494140625 * e, 162 * e, 23.072906494140625 * e), i.bezierCurveTo(269.9999694824219 * e, 31.072906494140625 * e, 292.9999694824219 * e, 120.07290649414062 * e, 294.9999694824219 * e, 161.07290649414062 * e), i.bezierCurveTo(165.49996948242188 * e, 162.07290649414062 * e, 165.49996948242188 * e, 162.07290649414062 * e, 35.999969482421875 * e, 163.07290649414062 * e), i.closePath(), fill_path(i, "#3A2A0D"), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(32.999969482421875 * e, 165.07290649414062 * e), i.bezierCurveTo(16.999969482421875 * e, 221.07290649414062 * e, 85 * e, 289.0729064941406 * e, 156 * e, 294.0729064941406 * e), i.bezierCurveTo(263.9999694824219 * e, 293.0729064941406 * e, 295.9999694824219 * e, 199.07290649414062 * e, 294.9999694824219 * e, 159.07290649414062 * e), i.closePath(), fill_path(i, "#071A1B"), circle(i, 161 * e, 158.07290649414062 * e, 133.4053971921676 * e), fill_path(i, void 0, "#5E3E1A", 10 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(31.999969482421875 * e, 161.62844848632812 * e), i.bezierCurveTo(162.49996948242188 * e, 161.62844848632812 * e, 162.49996948242188 * e, 161.62844848632812 * e, 292.9999694824219 * e, 161.62844848632812 * e), i.closePath(), fill_path(i, void 0, "#5E3E1A", 12 * e), i.translate(0, 8 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(66 * e, 158.29513549804688 * e), i.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#281C08", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(57.999969482421875 * e, 117.29513549804688 * e), i.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#281C08", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(95 * e, 90.29513549804688 * e), i.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#281C08", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(116 * e, 52.850677490234375 * e), i.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e), i.closePath(), fill_path(i, void 0, "#281C08", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(159 * e, 61.295135498046875 * e), i.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#281C08", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(203 * e, 51.295135498046875 * e), i.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#281C08", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(225 * e, 89.29513549804688 * e), i.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#281C08", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(266.9999694824219 * e, 112.29513549804688 * e), i.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#281C08", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(256.9999694824219 * e, 155.29513549804688 * e), i.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#281C08", 12 * e), i.translate(0, -8 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(66 * e, 158.29513549804688 * e), i.bezierCurveTo(86 * e, 158.29513549804688 * e, 86 * e, 158.29513549804688 * e, 106 * e, 158.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#5E3C10", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(57.999969482421875 * e, 117.29513549804688 * e), i.bezierCurveTo(85 * e, 128.29513549804688 * e, 85 * e, 128.29513549804688 * e, 113 * e, 139.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#5E3C10", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(95 * e, 90.29513549804688 * e), i.bezierCurveTo(112 * e, 105.79513549804688 * e, 112 * e, 105.79513549804688 * e, 129 * e, 121.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#5E3C10", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(116 * e, 52.850677490234375 * e), i.bezierCurveTo(130 * e, 83.85067749023438 * e, 130 * e, 83.85067749023438 * e, 144 * e, 114.85067749023438 * e), i.closePath(), fill_path(i, void 0, "#5E3C10", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(159 * e, 61.295135498046875 * e), i.bezierCurveTo(160.49996948242188 * e, 92.29513549804688 * e, 160.49996948242188 * e, 92.29513549804688 * e, 160 * e, 123.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#5E3C10", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(203 * e, 51.295135498046875 * e), i.bezierCurveTo(190.49996948242188 * e, 83.29513549804688 * e, 190.49996948242188 * e, 83.29513549804688 * e, 176 * e, 115.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#5E3C10", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(225 * e, 89.29513549804688 * e), i.bezierCurveTo(210.49996948242188 * e, 104.79513549804688 * e, 210.49996948242188 * e, 104.79513549804688 * e, 194 * e, 120.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#5E3C10", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(266.9999694824219 * e, 112.29513549804688 * e), i.bezierCurveTo(233.49996948242188 * e, 127.29513549804688 * e, 233.49996948242188 * e, 127.29513549804688 * e, 199 * e, 142.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#5E3C10", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(256.9999694824219 * e, 155.29513549804688 * e), i.bezierCurveTo(238.49996948242188 * e, 156.29513549804688 * e, 238.49996948242188 * e, 156.29513549804688 * e, 219 * e, 157.29513549804688 * e), i.closePath(), fill_path(i, void 0, "#5E3C10", 12 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(96 * e, 166 * e), i.bezierCurveTo(88 * e, 117 * e, 129 * e, 92 * e, 161 * e, 91 * e), i.bezierCurveTo(201 * e, 90 * e, 223 * e, 121 * e, 230 * e, 161 * e), i.closePath(), fill_path(i, "#704618", "#5D3D1A", 8 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(94.00003051757812 * e, 164.40341186523438 * e), i.bezierCurveTo(162.50003051757812 * e, 164.40341186523438 * e, 230.00003051757812 * e, 165.40341186523438 * e, 231.00003051757812 * e, 164.40341186523438 * e), i.bezierCurveTo(214.00003051757812 * e, 267.4034118652344 * e, 92.00003051757812 * e, 243.40341186523438 * e, 93.00003051757812 * e, 165.40341186523438 * e), i.closePath(), fill_path(i, "#E1DDD5", "#EAE7E4", 8 * e), circle(i, 160.00003051757812 * e, 166.49432373046875 * e, 28.30194339616981 * e), fill_path(i, "#392C16", "#5E3E1A", 10 * e), t
}

function create_arrow_clock(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d");
    return t.width = 321 * e, t.height = 345 * e, i.translate(0, 5 * e), circle(i, 161.00003051757812 * e, 165.40341186523438 * e, 20.808652046684813 * e), fill_path(i, "#C09D6F", "#A37943", 10 * e), i.beginPath(), i.lineCap = "round", i.lineJoin = "round", i.moveTo(162.00003051757812 * e, 48.403411865234375 * e), i.bezierCurveTo(172.50003051757812 * e, 67.40341186523438 * e, 172.50003051757812 * e, 67.40341186523438 * e, 183.00003051757812 * e, 86.40341186523438 * e), i.bezierCurveTo(160.50003051757812 * e, 86.40341186523438 * e, 160.50003051757812 * e, 86.40341186523438 * e, 138.00003051757812 * e, 86.40341186523438 * e), i.closePath(), fill_path(i, "#C09D6F", "#A37943", 10 * e), i.save(), i.translate(161.50003051757812 * e, 117.90341186523438 * e), round_rect(i, -5.5 * e, -37.5 * e, 11 * e, 75 * e, 10 * e), i.restore(), fill_path(i, "#C09D6F", "#A37943", 10 * e), i.save(), i.translate(162.00003051757812 * e, 78.90341186523438 * e), round_rect(i, -10 * e, -5.5 * e, 20 * e, 11 * e, 1 * e), i.restore(), fill_path(i, "#C09D6F"), circle(i, 161.00003051757812 * e, 163.6761474609375 * e, 17.08800749063506 * e), fill_path(i, "#C09D6F"), t
}

function create_island(e, t, i) {
    var r = (a = document.createElement("canvas")).getContext("2d");
    if (0 == i) a.width = 566 * e, a.height = 429 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(312.625 * e, 39.046875 * e), r.bezierCurveTo(456.625 * e, 60.046875 * e, 521.625 * e, 134.046875 * e, 528.625 * e, 199.046875 * e), r.bezierCurveTo(540.625 * e, 298.046875 * e, 491.625 * e, 364.046875 * e, 405.625 * e, 394.046875 * e), r.bezierCurveTo(270.625 * e, 429.046875 * e, 182.625 * e, 395.046875 * e, 100.625 * e, 344.046875 * e), r.bezierCurveTo(15.625 * e, 283.046875 * e, 20.625 * e, 195.046875 * e, 33.625 * e, 158.046875 * e), r.bezierCurveTo(56.625 * e, 80.046875 * e, 102.625 * e, 46.046875 * e, 183.625 * e, 33.046875 * e), r.bezierCurveTo(225.625 * e, 25.046875 * e, 270.625 * e, 30.046875 * e, 312.625 * e, 39.046875 * e), r.closePath(), fill_path(r, t[0]);
    else if (1 == i) {
        r = (a = document.createElement("canvas")).getContext("2d");
        a.width = 511 * e, a.height = 408 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(141.625 * e, 49.296875 * e), r.bezierCurveTo(225.625 * e, 10.296875 * e, 320.625 * e, 16.296875 * e, 390.625 * e, 39.296875 * e), r.bezierCurveTo(476.625 * e, 71.296875 * e, 483.625 * e, 142.296875 * e, 486.625 * e, 197.296875 * e), r.bezierCurveTo(491.625 * e, 289.296875 * e, 462.625 * e, 317.296875 * e, 417.625 * e, 351.296875 * e), r.bezierCurveTo(367.625 * e, 385.296875 * e, 313.625 * e, 404.296875 * e, 218.625 * e, 395.296875 * e), r.bezierCurveTo(108.625 * e, 381.296875 * e, 81.625 * e, 350.296875 * e, 52.625 * e, 305.296875 * e), r.bezierCurveTo(16.625 * e, 244.296875 * e, 23.625 * e, 171.296875 * e, 37.625 * e, 145.296875 * e), r.bezierCurveTo(65.625 * e, 84.296875 * e, 97.625 * e, 74.296875 * e, 141.625 * e, 49.296875 * e), r.closePath(), fill_path(r, t[0])
    } else if (2 == i) {
        var a;
        r = (a = document.createElement("canvas")).getContext("2d");
        a.width = 504 * e, a.height = 408 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(153.625 * e, 46.296875 * e), r.bezierCurveTo(271.625 * e, 17.296875 * e, 345.625 * e, 35.296875 * e, 410.625 * e, 71.296875 * e), r.bezierCurveTo(473.625 * e, 109.296875 * e, 478.625 * e, 167.296875 * e, 473.625 * e, 205.296875 * e), r.bezierCurveTo(462.625 * e, 295.296875 * e, 438.625 * e, 316.296875 * e, 388.625 * e, 345.296875 * e), r.bezierCurveTo(331.625 * e, 374.296875 * e, 273.625 * e, 392.296875 * e, 180.625 * e, 387.296875 * e), r.bezierCurveTo(111.625 * e, 380.296875 * e, 86.625 * e, 360.296875 * e, 51.625 * e, 309.296875 * e), r.bezierCurveTo(23.625 * e, 267.296875 * e, 25.625 * e, 226.296875 * e, 27.625 * e, 175.296875 * e), r.bezierCurveTo(37.625 * e, 99.296875 * e, 88.625 * e, 57.296875 * e, 153.625 * e, 46.296875 * e), r.closePath(), fill_path(r, t[0])
    }
    return a
}

function create_sign(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 450 * e, r.height = 260 * e, a.translate(10 * e, 10 * e), a.globalAlpha = t ? .5 : 1, a.translate(20 * e, 20 * e), round_rect(a, 0, 0, 400 * e, 220 * e, 30 * e), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-20 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(9 * e, 5 * e), a.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e), a.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e), a.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e), a.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e), a.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e), a.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e), a.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e), a.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e), a.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e), a.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e), a.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e), a.closePath(), fill_path(a, i[2], i[1], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(5 * e, 70 * e), a.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e), a.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e), a.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e), a.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e), a.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e), a.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e), a.bezierCurveTo(1 * e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e), a.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e), a.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e), a.closePath(), fill_path(a, i[3], i[1], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(19 * e, 158 * e), a.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e), a.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e), a.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e), a.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e), a.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e), a.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e), a.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e), a.closePath(), fill_path(a, i[2], i[1], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(4 * e, 183 * e), a.bezierCurveTo(1 * e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e), a.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e), a.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e), a.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e), a.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e), a.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e), a.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e), a.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e), a.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e), a.closePath(), fill_path(a, i[3], i[1], 12 * e), circle(a, 41 * e, 30 * e, 14.7648230602334 * e), fill_path(a, i[3], i[1], 12 * e), circle(a, 369 * e, 30 * e, 15.556349186104045 * e), fill_path(a, i[3], i[1], 12 * e), circle(a, 364 * e, 190 * e, 15.620499351813308 * e), fill_path(a, i[3], i[1], 12 * e), circle(a, 41 * e, 186 * e, 15.556349186104045 * e), fill_path(a, i[3], i[1], 12 * e), r
}

function create_sign_button(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 450 * e, r.height = 260 * e, a.translate(10 * e, 10 * e), (1 == i || 2 == i) && (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(9 * e, 5 * e), a.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e), a.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e), a.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e), a.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e), a.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e), a.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e), a.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e), a.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e), a.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e), a.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e), a.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e), a.closePath(), fill_path(a, t[3], t[3], 32 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(5 * e, 70 * e), a.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e), a.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e), a.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e), a.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e), a.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e), a.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e), a.bezierCurveTo(1 * e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e), a.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e), a.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e), a.closePath(), fill_path(a, t[3], t[3], 32 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(19 * e, 158 * e), a.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e), a.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e), a.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e), a.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e), a.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e), a.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e), a.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e), a.closePath(), fill_path(a, t[3], t[3], 32 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(4 * e, 183 * e), a.bezierCurveTo(1 * e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e), a.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e), a.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e), a.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e), a.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e), a.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e), a.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e), a.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e), a.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e), a.closePath(), fill_path(a, t[3], t[3], 32 * e), circle(a, 41 * e, 30 * e, 14.7648230602334 * e), fill_path(a, t[3], t[3], 32 * e), circle(a, 369 * e, 30 * e, 15.556349186104045 * e), fill_path(a, t[3], t[3], 32 * e), circle(a, 364 * e, 190 * e, 15.620499351813308 * e), fill_path(a, t[3], t[3], 32 * e), circle(a, 41 * e, 186 * e, 15.556349186104045 * e), fill_path(a, t[3], t[3], 32 * e)), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(9 * e, 5 * e), a.bezierCurveTo(381 * e, 2 * e, 197 * e, 4.5 * e, 385 * e, 4 * e), a.bezierCurveTo(397 * e, 4 * e, 401 * e, 4 * e, 399 * e, 23 * e), a.bezierCurveTo(367 * e, 27 * e, 367 * e, 27 * e, 335 * e, 31 * e), a.bezierCurveTo(366.5 * e, 33.5 * e, 366.5 * e, 33.5 * e, 398 * e, 36 * e), a.bezierCurveTo(398 * e, 41.5 * e, 398 * e, 41.5 * e, 398 * e, 47 * e), a.bezierCurveTo(398 * e, 56 * e, 399 * e, 56 * e, 386 * e, 56 * e), a.bezierCurveTo(200.5 * e, 56.5 * e, 200.5 * e, 56.5 * e, 15 * e, 57 * e), a.bezierCurveTo(2 * e, 55 * e, 4 * e, 52 * e, 4 * e, 43 * e), a.bezierCurveTo(4 * e, 30.5 * e, 4 * e, 30.5 * e, 4 * e, 18 * e), a.bezierCurveTo(16 * e, 18.5 * e, 16 * e, 18.5 * e, 28 * e, 19 * e), a.bezierCurveTo(18.5 * e, 12 * e, 18.5 * e, 12 * e, 9 * e, 5 * e), a.closePath(), fill_path(a, t[1], t[0], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(5 * e, 70 * e), a.bezierCurveTo(5 * e, 58 * e, 5 * e, 55 * e, 17 * e, 57 * e), a.bezierCurveTo(203 * e, 57 * e, 203 * e, 57 * e, 389 * e, 57 * e), a.bezierCurveTo(400 * e, 57 * e, 400 * e, 59 * e, 400 * e, 69 * e), a.bezierCurveTo(400.5 * e, 83.5 * e, 400.5 * e, 83.5 * e, 401 * e, 98 * e), a.bezierCurveTo(402 * e, 108 * e, 401 * e, 108 * e, 388 * e, 108 * e), a.bezierCurveTo(201.5 * e, 108 * e, 201.5 * e, 108 * e, 15 * e, 108 * e), a.bezierCurveTo(1 * e, 106 * e, 5 * e, 106 * e, 5 * e, 87 * e), a.bezierCurveTo(33 * e, 84.5 * e, 33 * e, 84.5 * e, 61 * e, 82 * e), a.bezierCurveTo(33.5 * e, 76.5 * e, 33.5 * e, 76.5 * e, 6 * e, 71 * e), a.closePath(), fill_path(a, t[2], t[0], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(19 * e, 158 * e), a.bezierCurveTo(2 * e, 159 * e, 4 * e, 156 * e, 5 * e, 118 * e), a.bezierCurveTo(4 * e, 110 * e, 6 * e, 107 * e, 26 * e, 109 * e), a.bezierCurveTo(206.5 * e, 109 * e, 206.5 * e, 109 * e, 387 * e, 109 * e), a.bezierCurveTo(400 * e, 108 * e, 400 * e, 108 * e, 398 * e, 127 * e), a.bezierCurveTo(384.5 * e, 130 * e, 384.5 * e, 130 * e, 371 * e, 133 * e), a.bezierCurveTo(385.5 * e, 138 * e, 385.5 * e, 138 * e, 400 * e, 143 * e), a.bezierCurveTo(402 * e, 156 * e, 402 * e, 162 * e, 385 * e, 160 * e), a.closePath(), fill_path(a, t[1], t[0], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(4 * e, 183 * e), a.bezierCurveTo(1 * e, 163 * e, 4 * e, 158 * e, 28 * e, 161 * e), a.bezierCurveTo(207.5 * e, 161 * e, 207.5 * e, 161 * e, 387 * e, 161 * e), a.bezierCurveTo(401 * e, 159 * e, 400 * e, 164 * e, 400 * e, 177 * e), a.bezierCurveTo(364.5 * e, 184 * e, 364.5 * e, 184 * e, 329 * e, 191 * e), a.bezierCurveTo(364.5 * e, 192.5 * e, 364.5 * e, 192.5 * e, 400 * e, 194 * e), a.bezierCurveTo(403 * e, 209 * e, 401 * e, 214 * e, 385 * e, 213 * e), a.bezierCurveTo(201.5 * e, 213 * e, 201.5 * e, 213 * e, 18 * e, 213 * e), a.bezierCurveTo(3 * e, 213 * e, 2 * e, 213 * e, 4 * e, 198 * e), a.bezierCurveTo(12.5 * e, 193 * e, 12.5 * e, 193 * e, 21 * e, 188 * e), a.closePath(), fill_path(a, t[2], t[0], 12 * e), circle(a, 41 * e, 30 * e, 14.7648230602334 * e), fill_path(a, t[2], t[0], 12 * e), circle(a, 369 * e, 30 * e, 15.556349186104045 * e), fill_path(a, t[2], t[0], 12 * e), circle(a, 364 * e, 190 * e, 15.620499351813308 * e), fill_path(a, t[2], t[0], 12 * e), circle(a, 41 * e, 186 * e, 15.556349186104045 * e), fill_path(a, t[2], t[0], 12 * e), r
}

function create_symbols(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    a.width = 450 * e, a.height = 260 * e;
    var o = create_sign(1 * e, !0, i);
    if (n.drawImage(o, 0 * e, 0 * e), 1 == r) {
        n.translate(100 * e, 0 * e), circle(n, 113 * e, 120 * e, 66 * e), fill_path(n, void 0, i[4], 13 * e);
        o = create_sword(.65 * e, !0, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
        n.rotate(.7), n.drawImage(o, 133 * e, -64 * e), n.rotate(-.7), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(70 * e, 70 * e), n.bezierCurveTo(113 * e, 120.5 * e, 113 * e, 120.5 * e, 156 * e, 171 * e), n.closePath(), fill_path(n, void 0, i[4], 13 * e)
    } else if (2 == r) {
        n.translate(100 * e, 0 * e), circle(n, 113 * e, 120 * e, 66 * e), fill_path(n, void 0, i[4], 13 * e), n.translate(30 * e, 40 * e), n.save(), n.translate(83.5 * e, 66.5 * e), round_rect(n, -40.5 * e, -29.5 * e, 81 * e, 59 * e, 15 * e), n.restore(), fill_path(n, "#dff2f7", "#187484", 7 * e), circle(n, 22 * e, 82 * e, 12 * e), fill_path(n, "#dff2f7", "#187484", 7 * e), circle(n, 145 * e, 82 * e, 12 * e), fill_path(n, "#dff2f7", "#187484", 7 * e);
        o = create_plant(.5 * e, !0, ["#80500b", "#7c4908"]);
        n.drawImage(o, 10 * e, 85 * e);
        o = create_plant(.5 * e, !0, ["#80500b", "#7c4908"]);
        n.drawImage(o, 50 * e, 85 * e);
        o = create_plant(.5 * e, !0, ["#80500b", "#7c4908"]);
        n.drawImage(o, 90 * e, 85 * e);
        o = create_fruit(1 * e, !0, ["#3d2a6e", "#8255b5"]);
        n.drawImage(o, 90 * e, 105 * e);
        o = create_fruit(1 * e, !0, ["#3d2a6e", "#8255b5"]);
        n.drawImage(o, 90 * e, 105 * e);
        o = create_fruit(1 * e, !0, ["#3d2a6e", "#8255b5"]);
        n.drawImage(o, 30 * e, 125 * e);
        o = create_fruit(1 * e, !0, ["#3d2a6e", "#8255b5"]);
        n.drawImage(o, 50 * e, 115 * e);
        o = create_fruit(1 * e, !0, ["#3d2a6e", "#8255b5"]);
        n.drawImage(o, 30 * e, 100 * e);
        o = create_fruit(1 * e, !0, ["#3d2a6e", "#8255b5"]);
        n.drawImage(o, 80 * e, 120 * e);
        o = create_fruit(1 * e, !0, ["#3d2a6e", "#8255b5"]);
        n.drawImage(o, 110 * e, 125 * e);
        o = create_fruit(1 * e, !0, ["#3d2a6e", "#8255b5"]);
        n.drawImage(o, 120 * e, 105 * e)
    } else 3 == r ? (n.translate(100 * e, 0 * e), circle(n, 113 * e, 120 * e, 66 * e), fill_path(n, void 0, i[4], 13 * e), n.translate(40 * e, 50 * e), n.save(), n.translate(71 * e, 69 * e), round_rect(n, -30 * e, -42 * e, 60 * e, 84 * e, 10 * e), n.restore(), fill_path(n, void 0, i[5], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(42 * e, 28 * e), n.bezierCurveTo(60 * e, 31 * e, 60 * e, 31 * e, 78 * e, 34 * e), n.bezierCurveTo(82 * e, 34 * e, 84 * e, 37 * e, 83 * e, 45 * e), n.bezierCurveTo(83 * e, 80 * e, 83 * e, 80 * e, 83 * e, 115 * e), n.bezierCurveTo(83 * e, 120 * e, 80 * e, 122 * e, 73 * e, 120 * e), n.bezierCurveTo(42 * e, 111 * e, 43 * e, 109 * e, 41 * e, 102 * e), n.bezierCurveTo(41 * e, 71 * e, 41 * e, 71 * e, 41 * e, 40 * e), n.closePath(), fill_path(n, i[5], i[5], 4 * e), n.translate(-40 * e, -50 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(70 * e, 70 * e), n.bezierCurveTo(113 * e, 120.5 * e, 113 * e, 120.5 * e, 156 * e, 171 * e), n.closePath(), fill_path(n, void 0, i[4], 13 * e)) : 4 == r && (n.scale(1, 1), n.translate(70 * e, 50 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(23 * e, 6 * e), n.bezierCurveTo(25.5 * e, 56 * e, 25.5 * e, 56 * e, 28 * e, 106 * e), fill_path(n, void 0, i[5], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(59 * e, 10 * e), n.bezierCurveTo(61 * e, 51.5 * e, 61 * e, 51.5 * e, 63 * e, 93 * e), fill_path(n, void 0, i[5], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(7 * e, 55 * e), n.bezierCurveTo(33.5 * e, 55 * e, 33.5 * e, 55 * e, 60 * e, 55 * e), fill_path(n, void 0, i[5], 14 * e), n.translate(10 * e, 0 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(123 * e, 16 * e), n.bezierCurveTo(103 * e, 16.5 * e, 103 * e, 16.5 * e, 83 * e, 17 * e), n.bezierCurveTo(83.5 * e, 61 * e, 83.5 * e, 61 * e, 84 * e, 105 * e), n.bezierCurveTo(106 * e, 105 * e, 106 * e, 105 * e, 128 * e, 105 * e), fill_path(n, void 0, i[5], 14 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(72 * e, 63 * e), n.bezierCurveTo(88.5 * e, 62.5 * e, 88.5 * e, 62.5 * e, 105 * e, 62 * e), fill_path(n, void 0, i[5], 14 * e), n.translate(10 * e, 10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(141 * e, 8 * e), n.bezierCurveTo(143 * e, 50 * e, 143 * e, 50 * e, 145 * e, 92 * e), n.bezierCurveTo(169 * e, 88.5 * e, 169 * e, 88.5 * e, 193 * e, 85 * e), fill_path(n, void 0, i[5], 14 * e), n.translate(10 * e, -10 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(205 * e, 124 * e), n.bezierCurveTo(205 * e, 69 * e, 205 * e, 69 * e, 205 * e, 14 * e), n.bezierCurveTo(239 * e, 15 * e, 250 * e, 37 * e, 249 * e, 49 * e), n.bezierCurveTo(251 * e, 65 * e, 242 * e, 76 * e, 206 * e, 75 * e), fill_path(n, void 0, i[5], 14 * e));
    return a
}

function create_dragon_helmet(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 345 * e, r.height = 250 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105 * e, 58 * e), a.bezierCurveTo(100.5 * e, 43 * e, 100.5 * e, 43 * e, 96 * e, 28 * e), a.bezierCurveTo(119.5 * e, 33.5 * e, 119.5 * e, 33.5 * e, 143 * e, 39 * e), a.bezierCurveTo(170 * e, 37 * e, 177 * e, 37 * e, 188 * e, 40 * e), a.bezierCurveTo(213 * e, 33.5 * e, 213 * e, 33.5 * e, 238 * e, 27 * e), a.bezierCurveTo(231 * e, 52 * e, 234 * e, 42.5 * e, 230 * e, 58 * e), a.closePath(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(108 * e, 51 * e), a.bezierCurveTo(91 * e, 55 * e, 85 * e, 44 * e, 86 * e, 29 * e), a.bezierCurveTo(62 * e, 50 * e, 78 * e, 69 * e, 92 * e, 75 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(249 * e, 27 * e), a.bezierCurveTo(273 * e, 49 * e, 262 * e, 68 * e, 246 * e, 77 * e), a.bezierCurveTo(231 * e, 59 * e, 236 * e, 66.5 * e, 226 * e, 56 * e), a.bezierCurveTo(243 * e, 53 * e, 252 * e, 43 * e, 249 * e, 28 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87 * e, 78 * e), a.bezierCurveTo(87 * e, 59 * e, 98 * e, 46 * e, 127 * e, 48 * e), a.bezierCurveTo(176 * e, 48.5 * e, 176 * e, 48.5 * e, 225 * e, 49 * e), a.bezierCurveTo(243 * e, 49 * e, 253 * e, 59 * e, 253 * e, 76 * e), a.bezierCurveTo(211 * e, 85.5 * e, 211 * e, 85.5 * e, 169 * e, 95 * e), a.closePath(), fill_path(a, i[5], i[6], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56 * e, 105 * e), a.bezierCurveTo(56 * e, 92 * e, 59 * e, 86 * e, 65 * e, 73 * e), a.bezierCurveTo(62.5 * e, 61.5 * e, 62.5 * e, 61.5 * e, 60 * e, 50 * e), a.bezierCurveTo(99.5 * e, 64.5 * e, 99.5 * e, 64.5 * e, 139 * e, 79 * e), a.bezierCurveTo(164 * e, 77 * e, 177 * e, 76 * e, 203 * e, 78 * e), a.bezierCurveTo(242 * e, 63.5 * e, 242 * e, 63.5 * e, 281 * e, 49 * e), a.bezierCurveTo(279 * e, 60.5 * e, 279 * e, 60.5 * e, 277 * e, 72 * e), a.bezierCurveTo(286 * e, 88 * e, 286 * e, 96 * e, 287 * e, 104 * e), a.bezierCurveTo(228.5 * e, 127 * e, 228.5 * e, 127 * e, 170 * e, 150 * e), a.closePath(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(48 * e, 130 * e), a.bezierCurveTo(61 * e, 155 * e, 63 * e, 165 * e, 56 * e, 171 * e), a.bezierCurveTo(48 * e, 177 * e, 40 * e, 171 * e, 38 * e, 178 * e), a.bezierCurveTo(33 * e, 180 * e, 37 * e, 188 * e, 47 * e, 208 * e), a.bezierCurveTo(52 * e, 221 * e, 55 * e, 222 * e, 75 * e, 229 * e), a.bezierCurveTo(91 * e, 213 * e, 98 * e, 212 * e, 112 * e, 219 * e), a.bezierCurveTo(167 * e, 225 * e, 187 * e, 224 * e, 222 * e, 220 * e), a.bezierCurveTo(244 * e, 214 * e, 247 * e, 213 * e, 263 * e, 229 * e), a.bezierCurveTo(295 * e, 220 * e, 291 * e, 215 * e, 301 * e, 194 * e), a.bezierCurveTo(308 * e, 178 * e, 309 * e, 176 * e, 302 * e, 173 * e), a.bezierCurveTo(290 * e, 177 * e, 289 * e, 177 * e, 283 * e, 169 * e), a.bezierCurveTo(279 * e, 163 * e, 279 * e, 161 * e, 290 * e, 130 * e), a.bezierCurveTo(270 * e, 127 * e, 270 * e, 127 * e, 250 * e, 124 * e), a.bezierCurveTo(209 * e, 137.5 * e, 209 * e, 137.5 * e, 168 * e, 151 * e), a.bezierCurveTo(121 * e, 135 * e, 121 * e, 135 * e, 74 * e, 119 * e), a.closePath(), fill_path(a, i[1], i[2], 8 * e), a.globalCompositeOperation = "destination-out", a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(133 * e, 158 * e), a.bezierCurveTo(152 * e, 193 * e, 158 * e, 205 * e, 140 * e, 203 * e), a.bezierCurveTo(99 * e, 195 * e, 96 * e, 189 * e, 86 * e, 173 * e), a.bezierCurveTo(80 * e, 159 * e, 88 * e, 145 * e, 104 * e, 141 * e), a.closePath(), fill_path(a, i[7], i[8], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(215 * e, 146 * e), a.bezierCurveTo(204 * e, 167 * e, 204 * e, 167 * e, 193 * e, 188 * e), a.bezierCurveTo(187 * e, 201 * e, 191 * e, 209 * e, 213 * e, 201 * e), a.bezierCurveTo(247 * e, 192 * e, 253 * e, 181 * e, 257 * e, 169 * e), a.bezierCurveTo(260 * e, 157 * e, 254 * e, 149 * e, 243 * e, 141 * e), a.closePath(), fill_path(a, i[7], i[8], 8 * e), a.globalCompositeOperation = "source-over", a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(133 * e, 158 * e), a.bezierCurveTo(152 * e, 193 * e, 158 * e, 205 * e, 140 * e, 203 * e), a.bezierCurveTo(99 * e, 195 * e, 96 * e, 189 * e, 86 * e, 173 * e), a.bezierCurveTo(80 * e, 159 * e, 88 * e, 145 * e, 104 * e, 141 * e), a.closePath(), fill_path(a, void 0, i[8], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(215 * e, 146 * e), a.bezierCurveTo(204 * e, 167 * e, 204 * e, 167 * e, 193 * e, 188 * e), a.bezierCurveTo(187 * e, 201 * e, 191 * e, 209 * e, 213 * e, 201 * e), a.bezierCurveTo(247 * e, 192 * e, 253 * e, 181 * e, 257 * e, 169 * e), a.bezierCurveTo(260 * e, 157 * e, 254 * e, 149 * e, 243 * e, 141 * e), a.closePath(), fill_path(a, void 0, i[8], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39 * e, 66 * e), a.bezierCurveTo(57 * e, 107 * e, 63 * e, 96 * e, 120 * e, 106 * e), a.bezierCurveTo(154 * e, 112 * e, 163 * e, 116 * e, 174 * e, 135 * e), a.bezierCurveTo(180 * e, 109 * e, 191 * e, 113 * e, 237 * e, 103 * e), a.bezierCurveTo(276 * e, 100 * e, 289 * e, 94 * e, 301 * e, 67 * e), a.bezierCurveTo(317 * e, 112 * e, 301 * e, 141 * e, 274 * e, 139 * e), a.bezierCurveTo(204 * e, 166 * e, 197 * e, 169 * e, 173 * e, 183 * e), a.bezierCurveTo(170 * e, 183 * e, 170 * e, 183 * e, 167 * e, 183 * e), a.bezierCurveTo(132 * e, 160 * e, 112 * e, 156 * e, 73 * e, 141 * e), a.bezierCurveTo(43 * e, 146 * e, 27 * e, 120 * e, 39 * e, 66 * e), a.closePath(), fill_path(a, i[7], i[8], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115 * e, 185 * e), a.bezierCurveTo(115 * e, 200 * e, 118 * e, 206 * e, 124 * e, 212 * e), a.bezierCurveTo(133 * e, 223 * e, 132 * e, 231 * e, 121 * e, 230 * e), a.bezierCurveTo(108 * e, 226 * e, 108 * e, 215 * e, 107 * e, 209 * e), a.bezierCurveTo(106 * e, 201 * e, 110 * e, 196 * e, 114 * e, 185 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(226 * e, 186 * e), a.bezierCurveTo(234 * e, 201 * e, 238 * e, 209 * e, 228 * e, 225 * e), a.bezierCurveTo(223 * e, 233 * e, 213 * e, 233 * e, 211 * e, 226 * e), a.bezierCurveTo(206 * e, 219 * e, 217 * e, 216 * e, 221 * e, 207 * e), a.bezierCurveTo(225 * e, 196 * e, 225 * e, 191 * e, 226 * e, 186 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(172 * e, 110 * e), a.bezierCurveTo(189 * e, 153 * e, 192 * e, 160 * e, 188 * e, 175 * e), a.bezierCurveTo(183 * e, 190 * e, 176 * e, 197 * e, 165 * e, 191 * e), a.bezierCurveTo(153 * e, 181 * e, 152 * e, 166 * e, 157 * e, 151 * e), a.bezierCurveTo(164.5 * e, 131 * e, 164.5 * e, 131 * e, 172 * e, 111 * e), a.closePath(), fill_path(a, i[3], i[4], 8 * e), r
}

function create_fir_one(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 149 * e, i.height = 153 * e, r.globalAlpha = .5, circle(r, 74.5 * e, 85 * e, 66 * e), fill_path(r, t[0]), r.globalAlpha = 1, circle(r, 75.5 * e, 72.5 * e, 67 * e), fill_path(r, t[1], t[2], 4 * e), circle(r, 75.5 * e, 73.5 * e, 54 * e), fill_path(r, t[3]), r.globalAlpha = .5, circle(r, 74.5 * e, 80.5 * e, 39 * e), fill_path(r, t[4]), r.globalAlpha = 1, circle(r, 74.5 * e, 74.5 * e, 37 * e), fill_path(r, t[5]), i
}

function create_fir_two(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 173 * e, i.height = 178 * e, r.globalAlpha = .5, circle(r, 86.5 * e, 98 * e, 80 * e), fill_path(r, t[0]), r.globalAlpha = 1, circle(r, 86.5 * e, 89 * e, 81 * e), fill_path(r, t[1], t[2], 4 * e), circle(r, 86.5 * e, 86 * e, 59 * e), fill_path(r, t[3], t[4], 4 * e), r.globalAlpha = .5, circle(r, 86.5 * e, 95 * e, 34 * e), fill_path(r, t[0]), r.globalAlpha = 1, circle(r, 86.5 * e, 89 * e, 34 * e), fill_path(r, t[5]), i
}

function create_fir_three(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 253 * e, i.height = 260 * e, r.globalAlpha = .5, circle(r, 126.5 * e, 134 * e, 119 * e), fill_path(r, t[0]), r.globalAlpha = 1, circle(r, 126.5 * e, 124 * e, 119 * e), fill_path(r, t[1], t[2], 4 * e), circle(r, 126.5 * e, 127 * e, 100 * e), fill_path(r, t[3]), r.globalAlpha = .5, circle(r, 126.5 * e, 135 * e, 81 * e), fill_path(r, t[0]), r.globalAlpha = 1, circle(r, 126.5 * e, 125 * e, 84 * e), fill_path(r, t[4], t[5], 4 * e), circle(r, 126.5 * e, 125 * e, 61 * e), fill_path(r, t[6], t[7], 4 * e), r.globalAlpha = .5, circle(r, 126.5 * e, 134 * e, 40 * e), fill_path(r, t[8]), r.globalAlpha = 1, circle(r, 126.5 * e, 125 * e, 40 * e), fill_path(r, t[9]), i
}

function create_amethyst(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 139 * e, r.height = 135 * e, a.translate(0, 10 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(32 * e, 77 * e), a.bezierCurveTo(6 * e, 41 * e, 6 * e, 33 * e, 12 * e, 27 * e), a.bezierCurveTo(27 * e, 6 * e, 28 * e, 6 * e, 37 * e, 6 * e), a.bezierCurveTo(62 * e, 3 * e, 64 * e, 5 * e, 67 * e, 13 * e), a.bezierCurveTo(80 * e, 36 * e, 73.5 * e, 25 * e, 80 * e, 37 * e), a.bezierCurveTo(73.5 * e, 54 * e, 65 * e, 74 * e, 67 * e, 71 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(65 * e, 37 * e), a.bezierCurveTo(105 * e, 40 * e, 113 * e, 39 * e, 117 * e, 48 * e), a.bezierCurveTo(126 * e, 70 * e, 128 * e, 72 * e, 124 * e, 80 * e), a.bezierCurveTo(112 * e, 101 * e, 110 * e, 104 * e, 99 * e, 104 * e), a.bezierCurveTo(59 * e, 100 * e, 55 * e, 99 * e, 56 * e, 99 * e), a.bezierCurveTo(47.5 * e, 79 * e, 45 * e, 66 * e, 39 * e, 59 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 63 * e), a.bezierCurveTo(5 * e, 99 * e, 5 * e, 101 * e, 8 * e, 103 * e), a.bezierCurveTo(19 * e, 123 * e, 22 * e, 125 * e, 28 * e, 126 * e), a.bezierCurveTo(57 * e, 127 * e, 55 * e, 127 * e, 58 * e, 120 * e), a.bezierCurveTo(82 * e, 86 * e, 83 * e, 78 * e, 82 * e, 87 * e), a.closePath(), fill_path(a, i[0]), a.translate(0, -10 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(32 * e, 77 * e), a.bezierCurveTo(6 * e, 41 * e, 6 * e, 33 * e, 12 * e, 27 * e), a.bezierCurveTo(27 * e, 6 * e, 28 * e, 6 * e, 37 * e, 6 * e), a.bezierCurveTo(62 * e, 3 * e, 64 * e, 5 * e, 67 * e, 13 * e), a.bezierCurveTo(80 * e, 36 * e, 73.5 * e, 25 * e, 80 * e, 37 * e), a.bezierCurveTo(73.5 * e, 54 * e, 65 * e, 74 * e, 67 * e, 71 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(65 * e, 37 * e), a.bezierCurveTo(105 * e, 40 * e, 113 * e, 39 * e, 117 * e, 48 * e), a.bezierCurveTo(126 * e, 70 * e, 128 * e, 72 * e, 124 * e, 80 * e), a.bezierCurveTo(112 * e, 101 * e, 110 * e, 104 * e, 99 * e, 104 * e), a.bezierCurveTo(59 * e, 100 * e, 55 * e, 99 * e, 56 * e, 99 * e), a.bezierCurveTo(47.5 * e, 79 * e, 45 * e, 66 * e, 39 * e, 59 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 63 * e), a.bezierCurveTo(5 * e, 99 * e, 5 * e, 101 * e, 8 * e, 103 * e), a.bezierCurveTo(19 * e, 123 * e, 22 * e, 125 * e, 28 * e, 126 * e), a.bezierCurveTo(57 * e, 127 * e, 55 * e, 127 * e, 58 * e, 120 * e), a.bezierCurveTo(82 * e, 86 * e, 83 * e, 78 * e, 82 * e, 87 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80 * e, 38 * e), a.bezierCurveTo(72.5 * e, 52 * e, 72.5 * e, 52 * e, 65 * e, 66 * e), a.bezierCurveTo(47.5 * e, 37 * e, 47.5 * e, 37 * e, 30 * e, 7 * e), a.bezierCurveTo(48 * e, 4 * e, 57 * e, 4 * e, 64 * e, 10 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(65 * e, 65 * e), a.bezierCurveTo(125 * e, 73 * e, 95.5 * e, 69 * e, 126 * e, 73 * e), a.bezierCurveTo(119 * e, 98 * e, 106 * e, 104 * e, 98 * e, 103 * e), a.bezierCurveTo(84.5 * e, 102 * e, 84.5 * e, 102 * e, 71 * e, 101 * e), a.bezierCurveTo(64 * e, 86 * e, 64 * e, 86 * e, 57 * e, 70 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(27 * e, 69 * e), a.bezierCurveTo(64 * e, 65 * e, 46 * e, 67 * e, 65 * e, 65 * e), a.bezierCurveTo(43.5 * e, 94 * e, 43.5 * e, 94 * e, 22 * e, 123 * e), a.bezierCurveTo(8 * e, 103 * e, 8 * e, 103 * e, 9 * e, 103 * e), a.bezierCurveTo(5 * e, 98 * e, 11 * e, 89 * e, 26 * e, 70 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(26 * e, 69 * e), a.bezierCurveTo(65 * e, 60 * e, 45 * e, 65 * e, 64 * e, 60 * e), a.bezierCurveTo(63 * e, 65 * e, 63 * e, 65 * e, 62 * e, 70 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80 * e, 38 * e), a.bezierCurveTo(68 * e, 70 * e, 75 * e, 53 * e, 70 * e, 68 * e), a.bezierCurveTo(65 * e, 67 * e, 65 * e, 67 * e, 60 * e, 65 * e), a.closePath(), fill_path(a, i[2]), r
}

function create_dragon_ground(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 100 * e, i.height = 100 * e, r.globalAlpha = .5, r.fillStyle = t[0], r.fillRect(0, 0, i.width, i.height), i
}

function create_snow_one(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 120 * e, i.height = 300 * e, r.translate(-80 * e, -20), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(200.5 * e, 14.953125 * e), r.bezierCurveTo(203 * e, 171.953125 * e, 203 * e, 171.953125 * e, 205.5 * e, 328.953125 * e), r.bezierCurveTo(188.5 * e, 257.953125 * e, 164.5 * e, 216.953125 * e, 166.5 * e, 176.953125 * e), r.bezierCurveTo(168.5 * e, 133.953125 * e, 198.5 * e, 98.953125 * e, 200.5 * e, 14.953125 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_snow_two(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 120 * e, i.height = 300 * e, r.translate(-200 * e, -40 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(344 * e, 18.40625 * e), r.bezierCurveTo(345 * e, 361.40625 * e, 344 * e, 191.40625 * e, 344 * e, 364.40625 * e), r.bezierCurveTo(261 * e, 275.40625 * e, 274 * e, 259.40625 * e, 229 * e, 213.40625 * e), r.bezierCurveTo(199 * e, 187.40625 * e, 222 * e, 133.40625 * e, 273 * e, 100.40625 * e), r.bezierCurveTo(321 * e, 71.40625 * e, 327 * e, 34.40625 * e, 344 * e, 18.40625 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(335 * e, 38.072906494140625 * e), r.bezierCurveTo(307 * e, 62.072906494140625 * e, 291 * e, 60.072906494140625 * e, 262 * e, 68.07290649414062 * e), r.bezierCurveTo(223 * e, 80.07290649414062 * e, 225 * e, 111.07290649414062 * e, 264 * e, 139.07290649414062 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_snow_three(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 120 * e, i.height = 320 * e, r.translate(-60 * e, -15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(188.5 * e, 3.953125 * e), r.bezierCurveTo(188.5 * e, 171.453125 * e, 188.5 * e, 171.453125 * e, 188.5 * e, 338.953125 * e), r.bezierCurveTo(162.5 * e, 268.953125 * e, 145.5 * e, 265.953125 * e, 116.5 * e, 244.953125 * e), r.bezierCurveTo(67.5 * e, 204.953125 * e, 87.5 * e, 160.953125 * e, 113.5 * e, 125.953125 * e), r.bezierCurveTo(141.5 * e, 90.953125 * e, 176.5 * e, 56.953125 * e, 188.5 * e, 3.953125 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_snow_four(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 120 * e, i.height = 330 * e, r.translate(-60 * e, -10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(188.5 * e, 7.953125 * e), r.bezierCurveTo(188.5 * e, 334.953125 * e, 188.5 * e, 332.953125 * e, 188.5 * e, 339.953125 * e), r.bezierCurveTo(166.5 * e, 295.953125 * e, 145.5 * e, 295.953125 * e, 139.5 * e, 282.953125 * e), r.bezierCurveTo(124.5 * e, 244.953125 * e, 139.5 * e, 243.953125 * e, 131.5 * e, 212.953125 * e), r.bezierCurveTo(118.5 * e, 161.953125 * e, 69.5 * e, 156.953125 * e, 74.5 * e, 92.953125 * e), r.bezierCurveTo(85.5 * e, 41.953125 * e, 158.5 * e, 49.953125 * e, 188.5 * e, 7.953125 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_snow_five(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 48 * e, i.height = 47 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(7.1875 * e, 25.434661865234375 * e), r.bezierCurveTo(11.1875 * e, 13.434661865234375 * e, 18.1875 * e, 8.434661865234375 * e, 32.1875 * e, 10.434661865234375 * e), r.bezierCurveTo(45.1875 * e, 14.434661865234375 * e, 41.1875 * e, 24.434661865234375 * e, 36.1875 * e, 30.434661865234375 * e), r.bezierCurveTo(22.1875 * e, 42.434661865234375 * e, 2.1875 * e, 41.434661865234375 * e, 7.1875 * e, 25.434661865234375 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_snow_six(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 120 * e, i.height = 280 * e, r.translate(-100 * e, -20 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(228.5 * e, 331.953125 * e), r.bezierCurveTo(228.5 * e, 12.953125 * e, 228.5 * e, 171.453125 * e, 228.5 * e, 10.953125 * e), r.bezierCurveTo(196.5 * e, 76.953125 * e, 206.5 * e, 78.953125 * e, 191.5 * e, 114.953125 * e), r.bezierCurveTo(162.5 * e, 170.953125 * e, 206.5 * e, 220.953125 * e, 210.5 * e, 251.953125 * e), r.bezierCurveTo(218.5 * e, 287.953125 * e, 220.5 * e, 291.953125 * e, 228.5 * e, 331.953125 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_snow_sept(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 33 * e, i.height = 35 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(12.75 * e, 7.1328125 * e), r.bezierCurveTo(26.75 * e, 8.1328125 * e, 27.75 * e, 14.1328125 * e, 24.75 * e, 23.1328125 * e), r.bezierCurveTo(19.75 * e, 31.1328125 * e, 15.75 * e, 33.1328125 * e, 6.75 * e, 26.1328125 * e), r.bezierCurveTo(.75 * e, 19.1328125 * e, 4.75 * e, 8.1328125 * e, 12.75 * e, 7.1328125 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_snow_step(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 20 * e, i.height = 35 * e, round_rect(r, 0, 0, 20, 35, 7), fill_path(r, t[0]), i
}

function create_winter_fox(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 161 * e, i.height = 190 * e, r.globalAlpha = .5, r.translate(0, 8), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(9 * e, 93 * e), r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e), r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e), r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e), r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e), r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e), r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e), r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e), r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e), r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e), r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e), r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e), r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e), r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e), r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e), r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e), r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e), r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e), r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e), r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e), r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e), r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e), r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e), r.closePath(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(0, -8), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(9 * e, 93 * e), r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e), r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e), r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e), r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e), r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e), r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e), r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e), r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e), r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e), r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e), r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e), r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e), r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e), r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e), r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e), r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e), r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e), r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e), r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e), r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e), r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e), r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e), r.closePath(), fill_path(r, t[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(28 * e, 63 * e), r.bezierCurveTo(23 * e, 54 * e, 24 * e, 47 * e, 26 * e, 37 * e), r.bezierCurveTo(28 * e, 29 * e, 31 * e, 31 * e, 41 * e, 35 * e), r.bezierCurveTo(52 * e, 45 * e, 55 * e, 51 * e, 57 * e, 53 * e), r.bezierCurveTo(50 * e, 50 * e, 44 * e, 47 * e, 43 * e, 48 * e), r.bezierCurveTo(43 * e, 52 * e, 43 * e, 52 * e, 42 * e, 57 * e), r.bezierCurveTo(38 * e, 54 * e, 38 * e, 54 * e, 33 * e, 51 * e), r.bezierCurveTo(34 * e, 56 * e, 34 * e, 56 * e, 34 * e, 61 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(99 * e, 55 * e), r.bezierCurveTo(107 * e, 43 * e, 113 * e, 39 * e, 121 * e, 34 * e), r.bezierCurveTo(130 * e, 29 * e, 130 * e, 34 * e, 130 * e, 42 * e), r.bezierCurveTo(131 * e, 57 * e, 128 * e, 61 * e, 129 * e, 63 * e), r.bezierCurveTo(124 * e, 62 * e, 124 * e, 62 * e, 119 * e, 61 * e), r.bezierCurveTo(119 * e, 56 * e, 120 * e, 61 * e, 118 * e, 52 * e), r.bezierCurveTo(115 * e, 55 * e, 111 * e, 59 * e, 111 * e, 58 * e), r.bezierCurveTo(110 * e, 54 * e, 109 * e, 57 * e, 109 * e, 51 * e), r.closePath(), fill_path(r, t[3]), circle(r, 103 * e, 110 * e, 11 * e), fill_path(r, t[4]), circle(r, 55 * e, 111 * e, 11 * e), fill_path(r, t[4]), circle(r, 99 * e, 107 * e, 5 * e), fill_path(r, t[1]), circle(r, 51 * e, 108 * e, 5 * e), fill_path(r, t[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(31 * e, 121 * e), r.bezierCurveTo(45 * e, 128 * e, 51 * e, 133 * e, 53 * e, 141 * e), r.bezierCurveTo(59 * e, 161 * e, 70 * e, 173 * e, 80 * e, 169 * e), r.bezierCurveTo(89 * e, 172 * e, 99 * e, 149 * e, 107 * e, 133 * e), r.bezierCurveTo(114 * e, 122 * e, 119 * e, 123 * e, 124 * e, 119 * e), r.bezierCurveTo(109 * e, 148 * e, 117 * e, 133 * e, 109 * e, 147 * e), r.bezierCurveTo(87 * e, 180 * e, 84 * e, 179 * e, 76 * e, 178 * e), r.bezierCurveTo(49 * e, 173 * e, 44 * e, 149 * e, 31 * e, 121 * e), r.closePath(), fill_path(r, t[5]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.translate(-2, 0), r.moveTo(71 * e, 162 * e), r.bezierCurveTo(80 * e, 155 * e, 85 * e, 159 * e, 89 * e, 164 * e), r.bezierCurveTo(90 * e, 171 * e, 86 * e, 173 * e, 79 * e, 173 * e), r.bezierCurveTo(67 * e, 172 * e, 67 * e, 168 * e, 71 * e, 162 * e), r.closePath(), fill_path(r, t[3]), r.translate(2, 0), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(9 * e, 93 * e), r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e), r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e), r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e), r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e), r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e), r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e), r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e), r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e), r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e), r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e), r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e), r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e), r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e), r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e), r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e), r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e), r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e), r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e), r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e), r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e), r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e), r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e), r.closePath(), fill_path(r, void 0, t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(25 * e, 63 * e), r.bezierCurveTo(16 * e, 58 * e, 17 * e, 51 * e, 17 * e, 33 * e), r.bezierCurveTo(19 * e, 12 * e, 21 * e, 12 * e, 32 * e, 17 * e), r.bezierCurveTo(63 * e, 31 * e, 66 * e, 45 * e, 66 * e, 54 * e), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(91 * e, 53 * e), r.bezierCurveTo(91 * e, 40 * e, 98 * e, 33 * e, 121 * e, 20 * e), r.bezierCurveTo(137 * e, 12 * e, 137 * e, 16 * e, 139 * e, 27 * e), r.bezierCurveTo(141 * e, 49 * e, 140 * e, 57 * e, 134 * e, 64 * e), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(31 * e, 63 * e), r.bezierCurveTo(23 * e, 54 * e, 24 * e, 47 * e, 26 * e, 37 * e), r.bezierCurveTo(28 * e, 29 * e, 31 * e, 31 * e, 41 * e, 35 * e), r.bezierCurveTo(52 * e, 45 * e, 55 * e, 51 * e, 57 * e, 53 * e), r.bezierCurveTo(50 * e, 50 * e, 44 * e, 47 * e, 43 * e, 48 * e), r.bezierCurveTo(43 * e, 52 * e, 43 * e, 52 * e, 42 * e, 57 * e), r.bezierCurveTo(38 * e, 54 * e, 38 * e, 54 * e, 33 * e, 51 * e), r.bezierCurveTo(34 * e, 56 * e, 34 * e, 56 * e, 34 * e, 61 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(99 * e, 55 * e), r.bezierCurveTo(107 * e, 43 * e, 113 * e, 39 * e, 121 * e, 34 * e), r.bezierCurveTo(130 * e, 29 * e, 130 * e, 34 * e, 130 * e, 42 * e), r.bezierCurveTo(131 * e, 57 * e, 128 * e, 61 * e, 129 * e, 63 * e), r.bezierCurveTo(124 * e, 62 * e, 124 * e, 62 * e, 119 * e, 61 * e), r.bezierCurveTo(119 * e, 56 * e, 120 * e, 61 * e, 118 * e, 52 * e), r.bezierCurveTo(115 * e, 55 * e, 111 * e, 59 * e, 111 * e, 58 * e), r.bezierCurveTo(110 * e, 54 * e, 109 * e, 57 * e, 109 * e, 51 * e), r.closePath(), fill_path(r, t[3]), i
}

function create_hurt_fox_winter(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 161 * e, i.height = 190 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(9 * e, 93 * e), r.bezierCurveTo(17 * e, 95 * e, 19 * e, 95 * e, 21 * e, 95 * e), r.bezierCurveTo(9 * e, 83 * e, 17 * e, 93 * e, 4 * e, 76 * e), r.bezierCurveTo(11 * e, 75 * e, 11 * e, 75 * e, 18 * e, 75 * e), r.bezierCurveTo(13 * e, 67 * e, 13 * e, 67 * e, 7 * e, 59 * e), r.bezierCurveTo(14 * e, 59 * e, 14 * e, 59 * e, 21 * e, 59 * e), r.bezierCurveTo(46 * e, 35 * e, 35 * e, 45 * e, 49 * e, 31 * e), r.bezierCurveTo(53 * e, 24 * e, 51 * e, 21 * e, 51 * e, 16 * e), r.bezierCurveTo(63 * e, 23 * e, 63 * e, 24 * e, 69 * e, 29 * e), r.bezierCurveTo(76 * e, 7 * e, 75 * e, 11 * e, 76 * e, 6 * e), r.bezierCurveTo(81 * e, 12 * e, 84 * e, 18 * e, 89 * e, 27 * e), r.bezierCurveTo(95 * e, 25 * e, 100 * e, 16 * e, 105 * e, 14 * e), r.bezierCurveTo(103 * e, 25 * e, 111 * e, 33 * e, 110 * e, 34 * e), r.bezierCurveTo(123 * e, 48 * e, 123 * e, 48 * e, 136 * e, 62 * e), r.bezierCurveTo(142 * e, 60 * e, 147 * e, 59 * e, 155 * e, 58 * e), r.bezierCurveTo(147 * e, 65 * e, 147 * e, 65 * e, 139 * e, 73 * e), r.bezierCurveTo(145 * e, 73 * e, 145 * e, 73 * e, 151 * e, 73 * e), r.bezierCurveTo(145 * e, 80 * e, 145 * e, 80 * e, 138 * e, 87 * e), r.bezierCurveTo(144 * e, 88 * e, 144 * e, 88 * e, 150 * e, 89 * e), r.bezierCurveTo(125 * e, 103 * e, 125 * e, 125 * e, 113 * e, 141 * e), r.bezierCurveTo(92 * e, 178 * e, 85 * e, 177 * e, 76 * e, 178 * e), r.bezierCurveTo(64 * e, 179 * e, 51 * e, 164 * e, 35 * e, 131 * e), r.bezierCurveTo(18 * e, 95 * e, 13 * e, 99 * e, 8 * e, 93 * e), r.closePath(), fill_path(r, t, t, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(25 * e, 63 * e), r.bezierCurveTo(16 * e, 58 * e, 17 * e, 51 * e, 17 * e, 33 * e), r.bezierCurveTo(19 * e, 12 * e, 21 * e, 12 * e, 32 * e, 17 * e), r.bezierCurveTo(63 * e, 31 * e, 66 * e, 45 * e, 66 * e, 54 * e), fill_path(r, t, t, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(91 * e, 53 * e), r.bezierCurveTo(91 * e, 40 * e, 98 * e, 33 * e, 121 * e, 20 * e), r.bezierCurveTo(137 * e, 12 * e, 137 * e, 16 * e, 139 * e, 27 * e), r.bezierCurveTo(141 * e, 49 * e, 140 * e, 57 * e, 134 * e, 64 * e), fill_path(r, t, t, 4 * e), i
}

function create_polar_bear(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 147 * e, i.height = 172 * e, r.globalAlpha = .5, r.translate(0, 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(8 * e, 50 * e), r.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e), r.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e), r.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e), r.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e), r.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e), r.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e), r.closePath(), fill_path(r, t[0]), r.translate(0, -8 * e), r.globalAlpha = 1, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(8 * e, 50 * e), r.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e), r.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e), r.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e), r.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e), r.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e), r.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e), r.closePath(), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(14 * e, 57 * e), r.bezierCurveTo(2 * e, 50 * e, 5 * e, 22 * e, 24 * e, 22 * e), r.bezierCurveTo(41 * e, 21 * e, 54 * e, 32 * e, 55 * e, 48 * e), fill_path(r, t[1], t[2], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(93 * e, 47 * e), r.bezierCurveTo(94 * e, 24 * e, 116 * e, 21 * e, 120 * e, 20 * e), r.bezierCurveTo(144 * e, 17 * e, 146 * e, 52 * e, 133 * e, 58 * e), fill_path(r, t[1], t[2], 4 * e), circle(r, 51 * e, 91 * e, 9 * e), fill_path(r, t[3]), circle(r, 95 * e, 91 * e, 9 * e), fill_path(r, t[3]), circle(r, 91 * e, 89 * e, 4 * e), fill_path(r, t[4]), circle(r, 47 * e, 89 * e, 4 * e), fill_path(r, t[4]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(54 * e, 133 * e), r.bezierCurveTo(56 * e, 108 * e, 64 * e, 99 * e, 73 * e, 98 * e), r.bezierCurveTo(86 * e, 97 * e, 91 * e, 119 * e, 93 * e, 133 * e), r.bezierCurveTo(94 * e, 155 * e, 90 * e, 150 * e, 74 * e, 155 * e), r.bezierCurveTo(50 * e, 152 * e, 55 * e, 145 * e, 54 * e, 134 * e), r.closePath(), fill_path(r, t[5]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(65.25 * e, 135 * e), r.bezierCurveTo(75.25 * e, 128 * e, 83.25 * e, 133 * e, 83.25 * e, 138 * e), r.bezierCurveTo(88.25 * e, 148 * e, 61.25 * e, 149 * e, 64.25 * e, 137 * e), r.closePath(), fill_path(r, t[6]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(74 * e, 145 * e), r.bezierCurveTo(74 * e, 148 * e, 74 * e, 148 * e, 74 * e, 151 * e), r.closePath(), fill_path(r, void 0, t[6], 2 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(19 * e, 58 * e), r.bezierCurveTo(10 * e, 38 * e, 18 * e, 33 * e, 28 * e, 34 * e), r.bezierCurveTo(41 * e, 39 * e, 45 * e, 45 * e, 50 * e, 51 * e), r.closePath(), fill_path(r, t[6]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(100 * e, 51 * e), r.bezierCurveTo(106 * e, 36 * e, 119 * e, 31 * e, 128 * e, 36 * e), r.bezierCurveTo(137 * e, 49 * e, 128 * e, 58 * e, 128 * e, 60 * e), r.closePath(), fill_path(r, t[6]), i
}

function create_hurt_polar_bear(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 147 * e, i.height = 172 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(8 * e, 50 * e), r.bezierCurveTo(15 * e, 16 * e, 49 * e, 6 * e, 67 * e, 6 * e), r.bezierCurveTo(121 * e, 3 * e, 128 * e, 32 * e, 135 * e, 48 * e), r.bezierCurveTo(146 * e, 96 * e, 124 * e, 131 * e, 96 * e, 135 * e), r.bezierCurveTo(96 * e, 158 * e, 79 * e, 156 * e, 75 * e, 156 * e), r.bezierCurveTo(50 * e, 154 * e, 53 * e, 150 * e, 52 * e, 135 * e), r.bezierCurveTo(2 * e, 127 * e, 3 * e, 87 * e, 8 * e, 50 * e), r.closePath(), fill_path(r, t, t, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(14 * e, 57 * e), r.bezierCurveTo(2 * e, 50 * e, 5 * e, 22 * e, 24 * e, 22 * e), r.bezierCurveTo(41 * e, 21 * e, 54 * e, 32 * e, 55 * e, 48 * e), fill_path(r, t, t, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(93 * e, 47 * e), r.bezierCurveTo(94 * e, 24 * e, 116 * e, 21 * e, 120 * e, 20 * e), r.bezierCurveTo(144 * e, 17 * e, 146 * e, 52 * e, 133 * e, 58 * e), fill_path(r, t, t, 4 * e), i
}

function create_dragon(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 271 * e, i.height = 366 * e, r.globalAlpha = .5, r.translate(0, 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 99 * e), r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e), r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e), r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e), r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e), r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(73 * e, 270 * e), r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e), r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e), r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e), r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e), r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e), r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e), r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e), r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e), r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e), r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e), r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e), r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 252 * e), r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e), r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e), r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e), r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 257 * e), r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e), r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e), r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e), r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125 * e, 65 * e), r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e), r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e), r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e), r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e), r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e), r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e), r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e), r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 37 * e), r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e), r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e), r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e), r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(146 * e, 34 * e), r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e), r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e), r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e), r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143 * e, 69 * e), r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e), r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e), r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149 * e, 92 * e), r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e), r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e), r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(111 * e, 61 * e), r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e), r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e), r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e), r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e), r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107 * e, 81 * e), r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e), r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e), r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e), r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e), r.closePath(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(0, -10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 99 * e), r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e), r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e), r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e), r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e), r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(73 * e, 270 * e), r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e), r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e), r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e), r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e), r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e), r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e), r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e), r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e), r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e), r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e), r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e), r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 252 * e), r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e), r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e), r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e), r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 257 * e), r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e), r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e), r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e), r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125 * e, 65 * e), r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e), r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e), r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e), r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e), r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e), r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e), r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e), r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 37 * e), r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e), r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e), r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e), r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(146 * e, 34 * e), r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e), r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e), r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e), r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143 * e, 69 * e), r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e), r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e), r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149 * e, 92 * e), r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e), r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e), r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(111 * e, 61 * e), r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e), r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e), r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e), r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e), r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107 * e, 81 * e), r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e), r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e), r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e), r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e), r.closePath(), fill_path(r, t[3], t[3], 8 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 99 * e), r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e), r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e), r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e), r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e), r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e), r.closePath(), fill_path(r, t[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(73 * e, 270 * e), r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e), r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e), r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e), r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e), r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e), r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e), r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e), r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e), r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e), r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e), r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e), r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e), r.closePath(), fill_path(r, t[5]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 252 * e), r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e), r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e), r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e), r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e), r.closePath(), fill_path(r, t[2]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 257 * e), r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e), r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e), r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e), r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e), r.closePath(), fill_path(r, t[1]), circle(r, 102 * e, 269 * e, 11 * e), fill_path(r, t[3]), circle(r, 98 * e, 266 * e, 5 * e), fill_path(r, t[6]), circle(r, 168 * e, 269 * e, 11 * e), fill_path(r, t[3]), circle(r, 164 * e, 266 * e, 5 * e), fill_path(r, t[6]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125 * e, 65 * e), r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e), r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e), r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e), r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e), r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e), r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e), r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e), r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e), r.closePath(), fill_path(r, t[2]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 235 * e), r.bezierCurveTo(118 * e, 258 * e, 137 * e, 268 * e, 148 * e, 246 * e), r.bezierCurveTo(156 * e, 228 * e, 152 * e, 169 * e, 150 * e, 140 * e), r.bezierCurveTo(147 * e, 87 * e, 143 * e, 69 * e, 142 * e, 60 * e), r.bezierCurveTo(136 * e, 44 * e, 132 * e, 43 * e, 127 * e, 62 * e), r.bezierCurveTo(119 * e, 116 * e, 119 * e, 140 * e, 116 * e, 166 * e), r.bezierCurveTo(113 * e, 202 * e, 113 * e, 223 * e, 115 * e, 233 * e), r.closePath(), fill_path(r, t[4]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(132 * e, 219 * e), r.bezierCurveTo(140 * e, 229 * e, 142 * e, 231 * e, 145 * e, 237 * e), r.bezierCurveTo(145 * e, 245 * e, 139 * e, 249 * e, 133 * e, 249 * e), r.bezierCurveTo(123 * e, 248 * e, 123 * e, 243 * e, 121 * e, 239 * e), r.bezierCurveTo(126 * e, 227 * e, 129 * e, 223 * e, 132 * e, 219 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 179 * e), r.bezierCurveTo(140 * e, 188.5 * e, 140 * e, 188.5 * e, 147 * e, 198 * e), r.bezierCurveTo(148 * e, 209 * e, 142 * e, 214 * e, 133 * e, 214 * e), r.bezierCurveTo(121 * e, 211 * e, 121 * e, 207 * e, 120 * e, 200 * e), r.bezierCurveTo(126.5 * e, 189.5 * e, 126.5 * e, 189.5 * e, 133 * e, 179 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 143 * e), r.bezierCurveTo(139 * e, 151.5 * e, 139 * e, 151.5 * e, 145 * e, 160 * e), r.bezierCurveTo(143 * e, 167 * e, 140 * e, 170 * e, 134 * e, 170 * e), r.bezierCurveTo(128 * e, 169 * e, 124 * e, 167 * e, 123 * e, 161 * e), r.bezierCurveTo(128 * e, 152 * e, 128 * e, 152 * e, 133 * e, 143 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 115 * e), r.bezierCurveTo(137.5 * e, 121.5 * e, 137.5 * e, 121.5 * e, 142 * e, 128 * e), r.bezierCurveTo(141 * e, 133 * e, 138 * e, 135 * e, 133 * e, 135 * e), r.bezierCurveTo(129 * e, 135 * e, 125 * e, 132 * e, 125 * e, 129 * e), r.bezierCurveTo(129 * e, 122 * e, 129 * e, 122 * e, 133 * e, 115 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 94 * e), r.bezierCurveTo(136.5 * e, 98.5 * e, 136.5 * e, 98.5 * e, 140 * e, 103 * e), r.bezierCurveTo(139 * e, 109 * e, 137 * e, 109 * e, 133 * e, 110 * e), r.bezierCurveTo(127 * e, 108 * e, 129 * e, 107 * e, 127 * e, 105 * e), r.bezierCurveTo(130 * e, 99.5 * e, 130 * e, 99.5 * e, 133 * e, 94 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(130 * e, 279 * e), r.bezierCurveTo(136.5 * e, 287.5 * e, 136.5 * e, 287.5 * e, 143 * e, 296 * e), r.bezierCurveTo(143 * e, 302 * e, 139 * e, 309 * e, 131 * e, 308 * e), r.bezierCurveTo(123 * e, 306 * e, 121 * e, 303 * e, 120 * e, 297 * e), r.bezierCurveTo(125.5 * e, 288.5 * e, 125.5 * e, 288.5 * e, 131 * e, 280 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(147 * e, 303 * e), r.bezierCurveTo(151 * e, 311 * e, 151 * e, 319 * e, 147 * e, 321 * e), r.bezierCurveTo(138 * e, 320 * e, 145 * e, 308 * e, 147 * e, 303 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 303 * e), r.bezierCurveTo(115 * e, 312 * e, 118 * e, 319 * e, 115 * e, 319 * e), r.bezierCurveTo(112 * e, 324 * e, 109 * e, 318 * e, 109 * e, 314 * e), r.bezierCurveTo(109 * e, 308 * e, 112 * e, 303 * e, 115 * e, 303 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(89 * e, 280 * e), r.bezierCurveTo(83 * e, 279 * e, 80 * e, 281 * e, 81 * e, 286 * e), r.bezierCurveTo(83 * e, 290 * e, 84 * e, 290 * e, 87 * e, 286 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(94 * e, 290 * e), r.bezierCurveTo(93 * e, 294 * e, 90 * e, 303 * e, 86 * e, 298 * e), r.bezierCurveTo(84 * e, 295 * e, 84 * e, 291 * e, 89 * e, 291 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(163 * e, 295 * e), r.bezierCurveTo(175 * e, 294 * e, 176 * e, 296 * e, 175 * e, 301 * e), r.bezierCurveTo(174 * e, 305 * e, 171 * e, 305 * e, 166 * e, 300 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(172 * e, 286 * e), r.bezierCurveTo(180 * e, 285 * e, 181 * e, 285 * e, 180 * e, 291 * e), r.bezierCurveTo(176 * e, 295 * e, 174 * e, 294 * e, 172 * e, 286 * e), r.closePath(), fill_path(r, t[8]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 37 * e), r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e), r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e), r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e), r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e), r.closePath(), fill_path(r, t[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(146 * e, 34 * e), r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e), r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e), r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e), r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e), r.closePath(), fill_path(r, t[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143 * e, 69 * e), r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e), r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e), r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e), r.closePath(), fill_path(r, t[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149 * e, 92 * e), r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e), r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e), r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e), r.closePath(), fill_path(r, t[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(111 * e, 61 * e), r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e), r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e), r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e), r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e), r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e), r.closePath(), fill_path(r, t[7]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107 * e, 81 * e), r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e), r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e), r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e), r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e), r.closePath(), fill_path(r, t[7]), i
}

function create_hurt_dragon(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 271 * e, i.height = 366 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(133 * e, 99 * e), r.bezierCurveTo(186 * e, 123 * e, 199 * e, 152 * e, 209 * e, 169 * e), r.bezierCurveTo(228 * e, 205 * e, 224 * e, 245 * e, 190 * e, 276 * e), r.bezierCurveTo(161 * e, 296 * e, 99 * e, 292 * e, 79 * e, 274 * e), r.bezierCurveTo(49 * e, 253 * e, 47 * e, 214 * e, 50 * e, 197 * e), r.bezierCurveTo(61 * e, 143 * e, 102 * e, 113 * e, 131 * e, 99 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(73 * e, 270 * e), r.bezierCurveTo(79 * e, 280 * e, 77 * e, 280 * e, 78 * e, 287 * e), r.bezierCurveTo(78 * e, 290 * e, 83 * e, 291 * e, 82 * e, 299 * e), r.bezierCurveTo(81 * e, 301 * e, 87 * e, 301 * e, 92 * e, 314 * e), r.bezierCurveTo(94 * e, 319 * e, 100 * e, 321 * e, 107 * e, 320 * e), r.bezierCurveTo(111 * e, 323 * e, 114 * e, 324 * e, 119 * e, 320 * e), r.bezierCurveTo(137 * e, 321 * e, 146 * e, 323 * e, 139 * e, 320 * e), r.bezierCurveTo(141 * e, 324 * e, 150 * e, 324 * e, 153 * e, 320 * e), r.bezierCurveTo(168 * e, 319 * e, 171 * e, 316 * e, 173 * e, 307 * e), r.bezierCurveTo(180 * e, 305 * e, 180 * e, 301 * e, 178 * e, 296 * e), r.bezierCurveTo(183 * e, 296 * e, 185 * e, 289 * e, 188 * e, 279 * e), r.bezierCurveTo(171 * e, 286 * e, 149 * e, 290 * e, 132 * e, 289 * e), r.bezierCurveTo(101 * e, 290 * e, 86 * e, 280 * e, 74 * e, 271 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(76 * e, 252 * e), r.bezierCurveTo(85 * e, 294 * e, 96 * e, 314 * e, 103 * e, 314 * e), r.bezierCurveTo(106 * e, 316 * e, 151 * e, 314 * e, 156 * e, 314 * e), r.bezierCurveTo(169 * e, 317 * e, 182 * e, 285 * e, 191 * e, 256 * e), r.bezierCurveTo(134.5 * e, 254 * e, 134.5 * e, 254 * e, 78 * e, 252 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(84 * e, 257 * e), r.bezierCurveTo(122 * e, 273 * e, 146 * e, 268 * e, 179 * e, 261 * e), r.bezierCurveTo(190 * e, 258 * e, 187 * e, 266 * e, 178 * e, 272 * e), r.bezierCurveTo(160 * e, 284 * e, 123 * e, 282 * e, 100 * e, 277 * e), r.bezierCurveTo(73 * e, 260 * e, 79 * e, 257 * e, 84 * e, 257 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125 * e, 65 * e), r.bezierCurveTo(133 * e, 45 * e, 136 * e, 42 * e, 141 * e, 55 * e), r.bezierCurveTo(151 * e, 96 * e, 164 * e, 117 * e, 175 * e, 134 * e), r.bezierCurveTo(203 * e, 181 * e, 207 * e, 182 * e, 208 * e, 215 * e), r.bezierCurveTo(206 * e, 240 * e, 205 * e, 246 * e, 184 * e, 258 * e), r.bezierCurveTo(161 * e, 267 * e, 131 * e, 272 * e, 86 * e, 258 * e), r.bezierCurveTo(67 * e, 252 * e, 68 * e, 239 * e, 64 * e, 216 * e), r.bezierCurveTo(62 * e, 194 * e, 72 * e, 169 * e, 92 * e, 142 * e), r.bezierCurveTo(106 * e, 121 * e, 114 * e, 101 * e, 125 * e, 65 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(115 * e, 37 * e), r.bezierCurveTo(116 * e, 28 * e, 119 * e, 27 * e, 126 * e, 37 * e), r.bezierCurveTo(134 * e, 48 * e, 134 * e, 49 * e, 132 * e, 59 * e), r.bezierCurveTo(131 * e, 67 * e, 127 * e, 65 * e, 120 * e, 56 * e), r.bezierCurveTo(114 * e, 49 * e, 113 * e, 43 * e, 115 * e, 38 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(146 * e, 34 * e), r.bezierCurveTo(152 * e, 28 * e, 155 * e, 27 * e, 157 * e, 39 * e), r.bezierCurveTo(157 * e, 45 * e, 157 * e, 49 * e, 150 * e, 56 * e), r.bezierCurveTo(141 * e, 66 * e, 138 * e, 66 * e, 138 * e, 57 * e), r.bezierCurveTo(137 * e, 50 * e, 137 * e, 47 * e, 141 * e, 42 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(143 * e, 69 * e), r.bezierCurveTo(148 * e, 56 * e, 156 * e, 50 * e, 158 * e, 58 * e), r.bezierCurveTo(159 * e, 64 * e, 160 * e, 67 * e, 153 * e, 77 * e), r.bezierCurveTo(148 * e, 83 * e, 145 * e, 84 * e, 143 * e, 77 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(149 * e, 92 * e), r.bezierCurveTo(149 * e, 89 * e, 151 * e, 84 * e, 156 * e, 79 * e), r.bezierCurveTo(161 * e, 73 * e, 163 * e, 78 * e, 162 * e, 86 * e), r.bezierCurveTo(161 * e, 91 * e, 155 * e, 99 * e, 152 * e, 98 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(111 * e, 61 * e), r.bezierCurveTo(114 * e, 51 * e, 117 * e, 51 * e, 124 * e, 64 * e), r.bezierCurveTo(128 * e, 68 * e, 128 * e, 76 * e, 126 * e, 79 * e), r.bezierCurveTo(123 * e, 84 * e, 122 * e, 82 * e, 115 * e, 74 * e), r.bezierCurveTo(112 * e, 67 * e, 115 * e, 74 * e, 115 * e, 74 * e), r.bezierCurveTo(111 * e, 68 * e, 111 * e, 66 * e, 111 * e, 62 * e), r.closePath(), fill_path(r, t[0]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(107 * e, 81 * e), r.bezierCurveTo(108 * e, 74 * e, 112 * e, 73 * e, 118 * e, 84 * e), r.bezierCurveTo(122 * e, 88 * e, 122 * e, 93 * e, 121 * e, 98 * e), r.bezierCurveTo(114 * e, 98 * e, 113 * e, 98 * e, 109 * e, 90 * e), r.bezierCurveTo(107 * e, 87 * e, 106 * e, 85 * e, 107 * e, 82 * e), r.closePath(), fill_path(r, t[0]), i
}

function create_wingleft(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 85 * e, i.height = 145 * e, r.translate(-20 * e, -95 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(50 * e, 105 * e), r.bezierCurveTo(52 * e, 119 * e, 64 * e, 137 * e, 71 * e, 146 * e), r.bezierCurveTo(71 * e, 161 * e, 74 * e, 169 * e, 79 * e, 179 * e), r.bezierCurveTo(68 * e, 192 * e, 70 * e, 204 * e, 69 * e, 216 * e), r.bezierCurveTo(50 * e, 189.5 * e, 50 * e, 189.5 * e, 31 * e, 163 * e), r.closePath(), fill_path(r, t[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(44 * e, 106 * e), r.bezierCurveTo(49 * e, 90 * e, 58 * e, 104 * e, 51 * e, 121 * e), r.bezierCurveTo(45 * e, 143 * e, 41 * e, 151 * e, 37 * e, 162 * e), r.bezierCurveTo(48 * e, 180 * e, 58 * e, 188 * e, 76 * e, 205 * e), r.bezierCurveTo(104 * e, 209 * e, 105 * e, 229 * e, 92 * e, 235 * e), r.bezierCurveTo(76 * e, 239 * e, 75 * e, 232 * e, 56 * e, 213 * e), r.bezierCurveTo(31 * e, 187 * e, 28 * e, 176 * e, 23 * e, 162 * e), r.bezierCurveTo(38 * e, 131 * e, 40 * e, 120 * e, 44 * e, 106 * e), r.closePath(), fill_path(r, t[2], t[3], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(30 * e, 159 * e), r.bezierCurveTo(46 * e, 157 * e, 59 * e, 152 * e, 68 * e, 148 * e), r.bezierCurveTo(63 * e, 155 * e, 52 * e, 160 * e, 44 * e, 164 * e), r.bezierCurveTo(59 * e, 169 * e, 66 * e, 174 * e, 75 * e, 178 * e), r.bezierCurveTo(58 * e, 178 * e, 49 * e, 175 * e, 37 * e, 174 * e), r.closePath(), fill_path(r, t[2]), i
}

function create_hurt_wingleft(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 85 * e, i.height = 145 * e, r.translate(-20 * e, -95 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(50 * e, 105 * e), r.bezierCurveTo(52 * e, 119 * e, 64 * e, 137 * e, 71 * e, 146 * e), r.bezierCurveTo(71 * e, 161 * e, 74 * e, 169 * e, 79 * e, 179 * e), r.bezierCurveTo(68 * e, 192 * e, 70 * e, 204 * e, 69 * e, 216 * e), r.bezierCurveTo(50 * e, 189.5 * e, 50 * e, 189.5 * e, 31 * e, 163 * e), r.closePath(), fill_path(r, t), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(44 * e, 106 * e), r.bezierCurveTo(49 * e, 90 * e, 58 * e, 104 * e, 51 * e, 121 * e), r.bezierCurveTo(45 * e, 143 * e, 41 * e, 151 * e, 37 * e, 162 * e), r.bezierCurveTo(48 * e, 180 * e, 58 * e, 188 * e, 76 * e, 205 * e), r.bezierCurveTo(104 * e, 209 * e, 105 * e, 229 * e, 92 * e, 235 * e), r.bezierCurveTo(76 * e, 239 * e, 75 * e, 232 * e, 56 * e, 213 * e), r.bezierCurveTo(31 * e, 187 * e, 28 * e, 176 * e, 23 * e, 162 * e), r.bezierCurveTo(38 * e, 131 * e, 40 * e, 120 * e, 44 * e, 106 * e), r.closePath(), fill_path(r, t, t, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(30 * e, 159 * e), r.bezierCurveTo(46 * e, 157 * e, 59 * e, 152 * e, 68 * e, 148 * e), r.bezierCurveTo(63 * e, 155 * e, 52 * e, 160 * e, 44 * e, 164 * e), r.bezierCurveTo(59 * e, 169 * e, 66 * e, 174 * e, 75 * e, 178 * e), r.bezierCurveTo(58 * e, 178 * e, 49 * e, 175 * e, 37 * e, 174 * e), r.closePath(), fill_path(r, t), i
}

function create_wingright(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 85 * e, i.height = 145 * e, r.translate(-165 * e, -95 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217 * e, 103 * e), r.bezierCurveTo(209 * e, 129 * e, 203 * e, 137 * e, 195 * e, 146 * e), r.bezierCurveTo(195 * e, 159 * e, 194 * e, 167 * e, 189 * e, 178 * e), r.bezierCurveTo(193 * e, 186 * e, 196 * e, 195 * e, 198 * e, 216 * e), r.bezierCurveTo(217.5 * e, 189.5 * e, 217.5 * e, 189.5 * e, 237 * e, 163 * e), r.closePath(), fill_path(r, t[1]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(231 * e, 163 * e), r.bezierCurveTo(221 * e, 139 * e, 218 * e, 128 * e, 215 * e, 114 * e), r.bezierCurveTo(213 * e, 102 * e, 220 * e, 92 * e, 222 * e, 107 * e), r.bezierCurveTo(224 * e, 118 * e, 233 * e, 138 * e, 244 * e, 161 * e), r.bezierCurveTo(235 * e, 188 * e, 224 * e, 198 * e, 204 * e, 221 * e), r.bezierCurveTo(190 * e, 233 * e, 190 * e, 235 * e, 180 * e, 235 * e), r.bezierCurveTo(167 * e, 235 * e, 164 * e, 216 * e, 175 * e, 211 * e), r.bezierCurveTo(176 * e, 208 * e, 181 * e, 207 * e, 191 * e, 205 * e), r.bezierCurveTo(213 * e, 186 * e, 218 * e, 180 * e, 230 * e, 163 * e), r.closePath(), fill_path(r, t[2], t[3], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(234 * e, 154 * e), r.bezierCurveTo(227 * e, 156 * e, 222 * e, 156 * e, 199 * e, 148 * e), r.bezierCurveTo(201 * e, 151 * e, 216 * e, 159 * e, 224 * e, 162 * e), r.bezierCurveTo(209 * e, 169.5 * e, 209 * e, 169.5 * e, 194 * e, 177 * e), r.bezierCurveTo(213.5 * e, 175 * e, 213.5 * e, 175 * e, 233 * e, 173 * e), r.closePath(), fill_path(r, t[2]), i
}

function create_hurt_wingright(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 85 * e, i.height = 145 * e, r.translate(-165 * e, -95 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217 * e, 103 * e), r.bezierCurveTo(209 * e, 129 * e, 203 * e, 137 * e, 195 * e, 146 * e), r.bezierCurveTo(195 * e, 159 * e, 194 * e, 167 * e, 189 * e, 178 * e), r.bezierCurveTo(193 * e, 186 * e, 196 * e, 195 * e, 198 * e, 216 * e), r.bezierCurveTo(217.5 * e, 189.5 * e, 217.5 * e, 189.5 * e, 237 * e, 163 * e), r.closePath(), fill_path(r, t), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(231 * e, 163 * e), r.bezierCurveTo(221 * e, 139 * e, 218 * e, 128 * e, 215 * e, 114 * e), r.bezierCurveTo(213 * e, 102 * e, 220 * e, 92 * e, 222 * e, 107 * e), r.bezierCurveTo(224 * e, 118 * e, 233 * e, 138 * e, 244 * e, 161 * e), r.bezierCurveTo(235 * e, 188 * e, 224 * e, 198 * e, 204 * e, 221 * e), r.bezierCurveTo(190 * e, 233 * e, 190 * e, 235 * e, 180 * e, 235 * e), r.bezierCurveTo(167 * e, 235 * e, 164 * e, 216 * e, 175 * e, 211 * e), r.bezierCurveTo(176 * e, 208 * e, 181 * e, 207 * e, 191 * e, 205 * e), r.bezierCurveTo(213 * e, 186 * e, 218 * e, 180 * e, 230 * e, 163 * e), r.closePath(), fill_path(r, t, t, 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(234 * e, 154 * e), r.bezierCurveTo(227 * e, 156 * e, 222 * e, 156 * e, 199 * e, 148 * e), r.bezierCurveTo(201 * e, 151 * e, 216 * e, 159 * e, 224 * e, 162 * e), r.bezierCurveTo(209 * e, 169.5 * e, 209 * e, 169.5 * e, 194 * e, 177 * e), r.bezierCurveTo(213.5 * e, 175 * e, 213.5 * e, 175 * e, 233 * e, 173 * e), r.closePath(), fill_path(r, t), i
}

function create_explorer_hat(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 187 * e, r.height = 119 * e, a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(0, 3), a.moveTo(53 * e, 45 * e), a.bezierCurveTo(3 * e, 60 * e, 11 * e, 72 * e, 19 * e, 81 * e), a.bezierCurveTo(28 * e, 82 * e, 24 * e, 81 * e, 29 * e, 82 * e), a.bezierCurveTo(26 * e, 87 * e, 28 * e, 84 * e, 28 * e, 87 * e), a.bezierCurveTo(63 * e, 101 * e, 92 * e, 100 * e, 138 * e, 93 * e), a.bezierCurveTo(172 * e, 87 * e, 180 * e, 72 * e, 168 * e, 62 * e), a.bezierCurveTo(154 * e, 51 * e, 150 * e, 50 * e, 148 * e, 49 * e), a.bezierCurveTo(132 * e, 42 * e, 90 * e, 40 * e, 55 * e, 45 * e), a.closePath(), fill_path(a, i[5]), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(0, -3), a.moveTo(53 * e, 45 * e), a.bezierCurveTo(3 * e, 60 * e, 11 * e, 72 * e, 19 * e, 81 * e), a.bezierCurveTo(28 * e, 82 * e, 24 * e, 81 * e, 29 * e, 82 * e), a.bezierCurveTo(26 * e, 87 * e, 28 * e, 84 * e, 28 * e, 87 * e), a.bezierCurveTo(63 * e, 101 * e, 92 * e, 100 * e, 138 * e, 93 * e), a.bezierCurveTo(172 * e, 87 * e, 180 * e, 72 * e, 168 * e, 62 * e), a.bezierCurveTo(154 * e, 51 * e, 150 * e, 50 * e, 148 * e, 49 * e), a.bezierCurveTo(132 * e, 42 * e, 90 * e, 40 * e, 55 * e, 45 * e), a.closePath(), fill_path(a, i[0], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(151 * e, 60 * e), a.bezierCurveTo(140 * e, 36 * e, 137 * e, 32 * e, 124 * e, 29 * e), a.bezierCurveTo(98 * e, 22 * e, 80 * e, 24 * e, 62 * e, 28 * e), a.bezierCurveTo(42 * e, 35 * e, 38 * e, 46 * e, 34 * e, 58 * e), a.bezierCurveTo(53 * e, 74 * e, 76 * e, 76 * e, 91 * e, 78 * e), a.closePath(), fill_path(a, i[0], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(37 * e, 53 * e), a.bezierCurveTo(30 * e, 56 * e, 29 * e, 67 * e, 30 * e, 68 * e), a.bezierCurveTo(94 * e, 108 * e, 150 * e, 76 * e, 155 * e, 70 * e), a.bezierCurveTo(154 * e, 60 * e, 151 * e, 54 * e, 149 * e, 53 * e), a.bezierCurveTo(101 * e, 74 * e, 66 * e, 66 * e, 37 * e, 53 * e), a.closePath(), fill_path(a, i[2], i[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(100 * e, 36 * e), a.bezierCurveTo(92 * e, 25 * e, 86 * e, 28 * e, 82 * e, 34 * e), a.bezierCurveTo(88 * e, 40 * e, 93 * e, 40 * e, 98 * e, 36 * e), a.closePath(), fill_path(a, i[0], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80 * e, 43 * e), a.bezierCurveTo(69 * e, 46 * e, 67 * e, 52 * e, 69 * e, 58 * e), fill_path(a, void 0, i[1], 4 * e), circle(a, 58 * e, 50 * e, 5 * e), fill_path(a, i[4]), circle(a, 43 * e, 65 * e, 5 * e), fill_path(a, i[4]), circle(a, 58 * e, 73 * e, 5 * e), fill_path(a, i[4]), circle(a, 58 * e, 50 * e, 2 * e), fill_path(a, i[5]), circle(a, 43 * e, 65 * e, 2 * e), fill_path(a, i[5]), circle(a, 58 * e, 73 * e, 2 * e), fill_path(a, i[5]), r
}

function create_wooden_helmet(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 180 * e, r.height = 120 * e, a.translate(-65 * e, -35 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.save(), a.translate(150.5 * e, 63.84375 * e), round_rect(a, -67 * e, -16.5 * e, 134 * e, 33 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80.5 * e, 75.34375 * e), a.bezierCurveTo(83 * e, 106.34375 * e, 83 * e, 106.34375 * e, 85.5 * e, 137.34375 * e), a.bezierCurveTo(93 * e, 135.84375 * e, 93 * e, 135.84375 * e, 100.5 * e, 134.34375 * e), a.bezierCurveTo(99.5 * e, 100.84375 * e, 99.5 * e, 100.84375 * e, 98.5 * e, 67.34375 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(206.5 * e, 71.34375 * e), a.bezierCurveTo(203.5 * e, 104.34375 * e, 203.5 * e, 104.34375 * e, 200.5 * e, 137.34375 * e), a.bezierCurveTo(208.5 * e, 137.34375 * e, 208.5 * e, 137.34375 * e, 216.5 * e, 137.34375 * e), a.bezierCurveTo(219 * e, 102.84375 * e, 219 * e, 102.84375 * e, 221.5 * e, 68.34375 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(136.5 * e, 75.34375 * e), a.bezierCurveTo(139 * e, 94.34375 * e, 139 * e, 94.34375 * e, 141.5 * e, 113.34375 * e), a.bezierCurveTo(149.5 * e, 115.34375 * e, 149.5 * e, 115.34375 * e, 157.5 * e, 117.34375 * e), a.bezierCurveTo(162 * e, 97.34375 * e, 162 * e, 97.34375 * e, 166.5 * e, 77.34375 * e), a.closePath(), fill_path(a, i[0]), a.save(), a.translate(152.5 * e, 80.84375 * e), a.rotate(3.12), round_rect(a, -73 * e, -20.5 * e, 146 * e, 41 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -10 * e), a.save(), a.translate(150.5 * e, 63.84375 * e), round_rect(a, -67 * e, -16.5 * e, 134 * e, 33 * e, 5 * e), a.restore(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80.5 * e, 75.34375 * e), a.bezierCurveTo(83 * e, 106.34375 * e, 83 * e, 106.34375 * e, 85.5 * e, 137.34375 * e), a.bezierCurveTo(93 * e, 135.84375 * e, 93 * e, 135.84375 * e, 100.5 * e, 134.34375 * e), a.bezierCurveTo(99.5 * e, 100.84375 * e, 99.5 * e, 100.84375 * e, 98.5 * e, 67.34375 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(206.5 * e, 71.34375 * e), a.bezierCurveTo(203.5 * e, 104.34375 * e, 203.5 * e, 104.34375 * e, 200.5 * e, 137.34375 * e), a.bezierCurveTo(208.5 * e, 137.34375 * e, 208.5 * e, 137.34375 * e, 216.5 * e, 137.34375 * e), a.bezierCurveTo(219 * e, 102.84375 * e, 219 * e, 102.84375 * e, 221.5 * e, 68.34375 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(136.5 * e, 75.34375 * e), a.bezierCurveTo(139 * e, 94.34375 * e, 139 * e, 94.34375 * e, 141.5 * e, 113.34375 * e), a.bezierCurveTo(149.5 * e, 115.34375 * e, 149.5 * e, 115.34375 * e, 157.5 * e, 117.34375 * e), a.bezierCurveTo(162 * e, 97.34375 * e, 162 * e, 97.34375 * e, 166.5 * e, 77.34375 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.save(), a.translate(152.5 * e, 80.84375 * e), a.rotate(3.12), round_rect(a, -73 * e, -20.5 * e, 146 * e, 41 * e, 5 * e), a.restore(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(83.5 * e, 73.34375 * e), a.bezierCurveTo(93.5 * e, 70.34375 * e, 105.5 * e, 70.34375 * e, 124.5 * e, 72.34375 * e), a.bezierCurveTo(132.5 * e, 78.34375 * e, 162.5 * e, 80.34375 * e, 176.5 * e, 76.34375 * e), a.bezierCurveTo(194.5 * e, 69.34375 * e, 192.5 * e, 68.34375 * e, 199.5 * e, 63.34375 * e), a.bezierCurveTo(204.5 * e, 63.34375 * e, 204.5 * e, 63.34375 * e, 209.5 * e, 63.34375 * e), a.bezierCurveTo(153.5 * e, 82.34375 * e, 157.5 * e, 85.34375 * e, 209.5 * e, 63.34375 * e), a.bezierCurveTo(194.5 * e, 88.34375 * e, 162.5 * e, 87.34375 * e, 149.5 * e, 88.34375 * e), a.bezierCurveTo(129.5 * e, 81.34375 * e, 103.5 * e, 75.34375 * e, 83.5 * e, 82.34375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(137.5 * e, 65.34375 * e), a.bezierCurveTo(150.5 * e, 76.34375 * e, 170.5 * e, 71.34375 * e, 174.5 * e, 65.34375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(221.5 * e, 85.34375 * e), a.bezierCurveTo(211.5 * e, 79.34375 * e, 191.5 * e, 88.34375 * e, 181.5 * e, 96.34375 * e), a.bezierCurveTo(201.5 * e, 96.34375 * e, 201.5 * e, 96.34375 * e, 221.5 * e, 96.34375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(84.5 * e, 89.34375 * e), a.bezierCurveTo(102.5 * e, 87.34375 * e, 112.5 * e, 88.34375 * e, 119.5 * e, 97.34375 * e), a.bezierCurveTo(102 * e, 98.34375 * e, 102 * e, 98.34375 * e, 84.5 * e, 99.34375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(208.5 * e, 104.34375 * e), a.bezierCurveTo(208.5 * e, 110.34375 * e, 208.5 * e, 110.34375 * e, 208.5 * e, 116.34375 * e), a.bezierCurveTo(211.5 * e, 110.34375 * e, 211.5 * e, 110.34375 * e, 214.5 * e, 104.34375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87.5 * e, 117.34375 * e), a.bezierCurveTo(92 * e, 118.84375 * e, 92 * e, 118.84375 * e, 96.5 * e, 120.34375 * e), a.bezierCurveTo(93 * e, 123.84375 * e, 93 * e, 123.84375 * e, 89.5 * e, 127.34375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(107.5 * e, 51.34375 * e), a.bezierCurveTo(122.5 * e, 54.34375 * e, 122.5 * e, 54.34375 * e, 137.5 * e, 57.34375 * e), a.bezierCurveTo(118 * e, 57.34375 * e, 118 * e, 57.34375 * e, 98.5 * e, 57.34375 * e), a.bezierCurveTo(94.5 * e, 54.84375 * e, 94.5 * e, 54.84375 * e, 90.5 * e, 52.34375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(170.5 * e, 52.34375 * e), a.bezierCurveTo(179.5 * e, 51.84375 * e, 179.5 * e, 51.84375 * e, 188.5 * e, 51.34375 * e), a.bezierCurveTo(187.5 * e, 53.84375 * e, 187.5 * e, 53.84375 * e, 186.5 * e, 56.34375 * e), a.bezierCurveTo(177 * e, 56.34375 * e, 177 * e, 56.34375 * e, 167.5 * e, 56.34375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80.5 * e, 69.34375 * e), a.bezierCurveTo(86.5 * e, 70.34375 * e, 86.5 * e, 70.34375 * e, 92.5 * e, 71.34375 * e), a.bezierCurveTo(86 * e, 73.34375 * e, 86 * e, 73.34375 * e, 79.5 * e, 75.34375 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(222.5 * e, 75.34375 * e), a.bezierCurveTo(214.5 * e, 76.34375 * e, 214.5 * e, 76.34375 * e, 206.5 * e, 77.34375 * e), a.bezierCurveTo(216.5 * e, 79.34375 * e, 216.5 * e, 79.34375 * e, 226.5 * e, 81.34375 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(116.5 * e, 100.34375 * e), a.bezierCurveTo(128 * e, 97.34375 * e, 128 * e, 97.34375 * e, 139.5 * e, 94.34375 * e), a.bezierCurveTo(140 * e, 96.84375 * e, 140 * e, 96.84375 * e, 140.5 * e, 99.34375 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(112.5 * e, 48.34375 * e), a.bezierCurveTo(115.5 * e, 50.84375 * e, 115.5 * e, 50.84375 * e, 118.5 * e, 53.34375 * e), a.bezierCurveTo(131 * e, 50.84375 * e, 131 * e, 50.84375 * e, 143.5 * e, 48.34375 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(216.5 * e, 109.34375 * e), a.bezierCurveTo(213 * e, 114.84375 * e, 213 * e, 114.84375 * e, 209.5 * e, 120.34375 * e), a.bezierCurveTo(212 * e, 118.84375 * e, 212 * e, 118.84375 * e, 214.5 * e, 117.34375 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(86.5 * e, 133.34375 * e), a.bezierCurveTo(89 * e, 127.34375 * e, 89 * e, 127.34375 * e, 91.5 * e, 121.34375 * e), a.bezierCurveTo(92.5 * e, 127.34375 * e, 92.5 * e, 127.34375 * e, 93.5 * e, 133.34375 * e), a.closePath(), fill_path(a, i[2]), r
}

function create_viking_hat(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 175 * e, r.height = 106 * e, a.globalAlpha = t ? .5 : 1, a.translate(0, 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(28 * e, 67 * e), a.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e), a.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e), a.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(145 * e, 75 * e), a.bezierCurveTo(143 * e, 51 * e, 133 * e, 29 * e, 100 * e, 27 * e), a.bezierCurveTo(52 * e, 21 * e, 37 * e, 37 * e, 31 * e, 54 * e), a.bezierCurveTo(23 * e, 78 * e, 28 * e, 77 * e, 36 * e, 79 * e), a.bezierCurveTo(80 * e, 87 * e, 120 * e, 81 * e, 145 * e, 76 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(38 * e, 46 * e), a.bezierCurveTo(52 * e, 37 * e, 69 * e, 36 * e, 85 * e, 36 * e), a.bezierCurveTo(118 * e, 38 * e, 129 * e, 42 * e, 137 * e, 48 * e), a.bezierCurveTo(135 * e, 45 * e, 135 * e, 45 * e, 133 * e, 42 * e), a.bezierCurveTo(124 * e, 32 * e, 116 * e, 28 * e, 88 * e, 25 * e), a.bezierCurveTo(47 * e, 28 * e, 40 * e, 32 * e, 36 * e, 44 * e), a.closePath(), fill_path(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(145 * e, 75 * e), a.bezierCurveTo(143 * e, 51 * e, 133 * e, 29 * e, 100 * e, 27 * e), a.bezierCurveTo(52 * e, 21 * e, 37 * e, 37 * e, 31 * e, 54 * e), a.bezierCurveTo(23 * e, 78 * e, 28 * e, 77 * e, 36 * e, 79 * e), a.bezierCurveTo(80 * e, 87 * e, 120 * e, 81 * e, 145 * e, 76 * e), a.closePath(), fill_path(a, void 0, i[2], 4 * e), a.translate(0, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(28 * e, 67 * e), a.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e), a.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e), a.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e), a.closePath(), fill_path(a, i[10], i[10], 4 * e), a.translate(0, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(131 * e, 43 * e), a.bezierCurveTo(145 * e, 40 * e, 148 * e, 32 * e, 147 * e, 17 * e), a.bezierCurveTo(166 * e, 39 * e, 155 * e, 62 * e, 140 * e, 67 * e), a.bezierCurveTo(128 * e, 65 * e, 128 * e, 52 * e, 131 * e, 45 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41 * e, 43 * e), a.bezierCurveTo(30 * e, 42 * e, 24 * e, 33 * e, 25 * e, 17 * e), a.bezierCurveTo(7 * e, 34 * e, 17 * e, 63 * e, 33 * e, 66 * e), a.bezierCurveTo(45 * e, 59 * e, 44 * e, 53 * e, 42 * e, 44 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(24 * e, 19 * e), a.bezierCurveTo(24 * e, 35 * e, 35 * e, 42 * e, 42 * e, 44 * e), a.bezierCurveTo(43 * e, 51 * e, 43 * e, 48 * e, 43 * e, 56 * e), a.bezierCurveTo(25 * e, 47 * e, 17 * e, 36 * e, 23 * e, 20 * e), a.closePath(), fill_path(a, i[6]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(148 * e, 18 * e), a.bezierCurveTo(159 * e, 44 * e, 139 * e, 52 * e, 130 * e, 55 * e), a.bezierCurveTo(129 * e, 48 * e, 129 * e, 46 * e, 131 * e, 43 * e), a.bezierCurveTo(144 * e, 37 * e, 148 * e, 35 * e, 147 * e, 18 * e), a.closePath(), fill_path(a, i[6]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(131 * e, 43 * e), a.bezierCurveTo(145 * e, 40 * e, 148 * e, 32 * e, 147 * e, 17 * e), a.bezierCurveTo(166 * e, 39 * e, 155 * e, 62 * e, 140 * e, 67 * e), a.bezierCurveTo(128 * e, 65 * e, 128 * e, 52 * e, 131 * e, 45 * e), a.closePath(), fill_path(a, void 0, i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41 * e, 43 * e), a.bezierCurveTo(30 * e, 42 * e, 24 * e, 33 * e, 25 * e, 17 * e), a.bezierCurveTo(7 * e, 34 * e, 17 * e, 63 * e, 33 * e, 66 * e), a.bezierCurveTo(45 * e, 59 * e, 44 * e, 53 * e, 42 * e, 44 * e), a.closePath(), fill_path(a, void 0, i[4], 4 * e), a.save(), a.translate(87 * e, 34.5 * e), a.rotate(0), round_rect(a, -8 * e, -10.5 * e, 16 * e, 21 * e, 10 * e), a.restore(), fill_path(a, i[7], i[2], 4 * e), a.save(), a.translate(87 * e, 57 * e), a.rotate(0), round_rect(a, -8 * e, -23 * e, 16 * e, 46 * e, 10 * e), a.restore(), fill_path(a, i[8], i[2], 4 * e), circle(a, 87 * e, 39 * e, 4.123105625617661 * e), fill_path(a, i[9], i[2], 4 * e), circle(a, 87 * e, 60 * e, 4.242640687119285 * e), fill_path(a, i[9], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(28 * e, 67 * e), a.bezierCurveTo(55 * e, 80 * e, 126 * e, 74 * e, 144 * e, 68 * e), a.bezierCurveTo(144.5 * e, 75 * e, 144.5 * e, 75 * e, 145 * e, 82 * e), a.bezierCurveTo(114 * e, 94 * e, 47 * e, 91 * e, 28 * e, 82 * e), a.closePath(), fill_path(a, i[8], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(27 * e, 69 * e), a.bezierCurveTo(13 * e, 77 * e, 16 * e, 74 * e, 27 * e, 80 * e), a.closePath(), fill_path(a, i[9], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(145 * e, 70 * e), a.bezierCurveTo(149.5 * e, 72 * e, 149.5 * e, 72 * e, 154 * e, 74 * e), a.bezierCurveTo(150 * e, 77 * e, 150 * e, 77 * e, 146 * e, 80 * e), a.closePath(), fill_path(a, i[9], i[2], 4 * e), circle(a, 50 * e, 80 * e, 5 * e), fill_path(a, i[9], i[2], 4 * e), circle(a, 86.01141357421875 * e, 81.76705932617188 * e, 5 * e), fill_path(a, i[9], i[2], 4 * e), circle(a, 119.01141357421875 * e, 80.13069152832031 * e, 5 * e), fill_path(a, i[9], i[2], 4 * e), r
}

function create_gold_helmet(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 142 * e, r.height = 118 * e, a.save(), a.translate(70.16665649414062 * e, 38.20831298828125 * e), round_rect(a, -58.5 * e, -27.5 * e, 117 * e, 55 * e, 20 * e), a.restore(), fill_path(a, i[0], i[1], 4 * e), a.save(), a.translate(70 * e, 42.70831298828125 * e), round_rect(a, -61 * e, -20 * e, 122 * e, 40 * e, 20 * e), a.restore(), fill_path(a, i[2], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(123 * e, 70.375 * e), a.bezierCurveTo(115 * e, 99.375 * e, 119 * e, 85.375 * e, 115 * e, 100.375 * e), a.bezierCurveTo(112 * e, 116.375 * e, 117 * e, 109.375 * e, 131 * e, 100.375 * e), a.bezierCurveTo(131 * e, 83.375 * e, 131 * e, 83.375 * e, 131 * e, 66.375 * e), a.closePath(), fill_path(a, i[2], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(11 * e, 68.375 * e), a.bezierCurveTo(11.166656494140625 * e, 84.375 * e, 9 * e, 99.375 * e, 10 * e, 100.375 * e), a.bezierCurveTo(35 * e, 113.375 * e, 27 * e, 110.375 * e, 25 * e, 95.375 * e), a.bezierCurveTo(16 * e, 68.375 * e, 17 * e, 69.375 * e, 17 * e, 68.375 * e), a.closePath(), fill_path(a, i[2], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(46 * e, 32.375 * e), a.bezierCurveTo(43 * e, 8.375 * e, 45 * e, 7.375 * e, 56 * e, 6.375 * e), a.bezierCurveTo(105 * e, 4.375 * e, 102 * e, 6.375 * e, 97 * e, 32.375 * e), a.bezierCurveTo(138 * e, 43.375 * e, 133 * e, 45.375 * e, 133 * e, 58.375 * e), a.bezierCurveTo(133 * e, 85.375 * e, 125 * e, 74.375 * e, 111 * e, 70.375 * e), a.bezierCurveTo(70 * e, 69.875 * e, 29 * e, 69.375 * e, 29 * e, 69.375 * e), a.bezierCurveTo(7 * e, 84.375 * e, 7 * e, 70.375 * e, 7 * e, 59.375 * e), a.bezierCurveTo(6 * e, 28.375 * e, 32 * e, 39.375 * e, 44 * e, 32.375 * e), a.closePath(), fill_path(a, i[2], i[1], 4 * e), circle(a, 71 * e, 44.375 * e, 16.55294535724685 * e), fill_path(a, i[2], i[1], 4 * e), circle(a, 71 * e, 43.70831298828125 * e, 8.94427190999916 * e), fill_path(a, i[2], i[1], 4 * e), r
}

function create_diamond_helmet(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 142 * e, r.height = 118 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(111 * e, 27.3671875 * e), a.bezierCurveTo(128 * e, 9.3671875 * e, 125 * e, 13.3671875 * e, 126 * e, 21.3671875 * e), a.bezierCurveTo(126 * e, 33.3671875 * e, 119 * e, 43.3671875 * e, 118 * e, 42.3671875 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(31 * e, 23.3671875 * e), a.bezierCurveTo(17 * e, 15.3671875 * e, 16 * e, 14.3671875 * e, 17 * e, 20.3671875 * e), a.bezierCurveTo(22 * e, 33.3671875 * e, 20 * e, 27.3671875 * e, 24 * e, 34.3671875 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.save(), a.translate(70.5 * e, 34.8671875 * e), a.rotate(0), round_rect(a, -49.5 * e, -21.5 * e, 99 * e, 43 * e, 15 * e), a.restore(), fill_path(a, i[0], i[1], 4 * e), a.save(), a.translate(71 * e, 40.8671875 * e), a.rotate(0), round_rect(a, -49 * e, -12.5 * e, 98 * e, 25 * e, 15 * e), a.restore(), fill_path(a, i[2], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(19.800003051757812 * e, 75.95625305175781 * e), a.bezierCurveTo(19.300003051757812 * e, 82.95625305175781 * e, 19.300003051757812 * e, 82.95625305175781 * e, 18.800003051757812 * e, 89.95625305175781 * e), a.bezierCurveTo(38.80000305175781 * e, 115.95625305175781 * e, 37.80000305175781 * e, 104.95625305175781 * e, 31.800003051757812 * e, 91.95625305175781 * e), a.closePath(), fill_path(a, i[2], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(119.80000305175781 * e, 75.95625305175781 * e), a.bezierCurveTo(120.80000305175781 * e, 82.95625305175781 * e, 120.80000305175781 * e, 82.95625305175781 * e, 121.80000305175781 * e, 89.95625305175781 * e), a.bezierCurveTo(101.80000305175781 * e, 111.95625305175781 * e, 99.80000305175781 * e, 111.95625305175781 * e, 112.80000305175781 * e, 81.95625305175781 * e), a.closePath(), fill_path(a, i[2], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(17.800003051757812 * e, 49.15625 * e), a.bezierCurveTo(17.800003051757812 * e, 64.15625 * e, 17.800003051757812 * e, 64.15625 * e, 17.800003051757812 * e, 79.15625 * e), a.bezierCurveTo(23.300003051757812 * e, 85.15625 * e, 23.300003051757812 * e, 85.15625 * e, 28.800003051757812 * e, 91.15625 * e), a.bezierCurveTo(36.80000305175781 * e, 96.15625 * e, 32.80000305175781 * e, 91.15625 * e, 28.800003051757812 * e, 77.15625 * e), a.bezierCurveTo(33.80000305175781 * e, 65.15625 * e, 33.80000305175781 * e, 65.15625 * e, 38.80000305175781 * e, 53.15625 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(123.80000305175781 * e, 53.95625305175781 * e), a.bezierCurveTo(121.80000305175781 * e, 77.95625305175781 * e, 121.80000305175781 * e, 74.95625305175781 * e, 121.80000305175781 * e, 78.95625305175781 * e), a.bezierCurveTo(115.80000305175781 * e, 84.95625305175781 * e, 115.80000305175781 * e, 84.95625305175781 * e, 109.80000305175781 * e, 90.95625305175781 * e), a.bezierCurveTo(102.80000305175781 * e, 93.95625305175781 * e, 105.80000305175781 * e, 86.95625305175781 * e, 110.80000305175781 * e, 76.95625305175781 * e), a.bezierCurveTo(107.30000305175781 * e, 65.45625305175781 * e, 103.80000305175781 * e, 53.95625305175781 * e, 103.80000305175781 * e, 53.95625305175781 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(18 * e, 56.3671875 * e), a.bezierCurveTo(70 * e, 56.8671875 * e, 70 * e, 56.8671875 * e, 122 * e, 57.3671875 * e), a.bezierCurveTo(137 * e, 20.3671875 * e, 137 * e, 16.3671875 * e, 126 * e, 22.3671875 * e), a.bezierCurveTo(115.5 * e, 34.3671875 * e, 115.5 * e, 34.3671875 * e, 105 * e, 46.3671875 * e), a.bezierCurveTo(70.5 * e, 46.3671875 * e, 70.5 * e, 46.3671875 * e, 36 * e, 46.3671875 * e), a.bezierCurveTo(4 * e, 14.3671875 * e, 7 * e, 18.3671875 * e, 8 * e, 27.3671875 * e), a.bezierCurveTo(12.5 * e, 41.8671875 * e, 12.5 * e, 41.8671875 * e, 17 * e, 56.3671875 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.save(), a.translate(68.30000305175781 * e, 41.45625305175781 * e), a.rotate(.76), round_rect(a, -20.5 * e, -20.5 * e, 41 * e, 41 * e, 10 * e), a.restore(), fill_path(a, void 0, i[5], 4 * e), a.save(), a.translate(68.80000305175781 * e, 44.45625305175781 * e), a.rotate(.76), round_rect(a, -21 * e, -20.5 * e, 42 * e, 41 * e, 10 * e), a.restore(), fill_path(a, i[3], i[4], 4 * e), a.save(), a.translate(69.80000305175781 * e, 44.556243896484375 * e), a.rotate(.76), round_rect(a, -10 * e, -10 * e, 20 * e, 20 * e, 5 * e), a.restore(), fill_path(a, i[6], i[7], 4 * e), r
}

function create_amethyst_helmet(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 145 * e, r.height = 120 * e, a.beginPath(), a.scale(.6, .6), a.lineCap = "round", a.lineJoin = "round", a.translate(18 * e, -8 * e), a.moveTo(101 * e, 72 * e), a.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e), a.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e), a.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e), a.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e), a.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e), a.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e), a.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e), a.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e), a.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e), a.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e), a.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e), a.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e), a.closePath(), fill_path(a, i[4], i[5], 4 * e), a.beginPath(), a.scale(1.1, 1.1), a.lineCap = "round", a.lineJoin = "round", a.translate(-9 * e, 4 * e), a.moveTo(101 * e, 72 * e), a.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e), a.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e), a.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e), a.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e), a.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e), a.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e), a.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e), a.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e), a.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e), a.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e), a.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e), a.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e), a.closePath(), fill_path(a, i[4], i[5], 4 * e), a.scale(1.1, 1.1), a.translate(-9 * e, 4 * e), a.save(), a.translate(100 * e, 73.06874084472656 * e), a.rotate(0), round_rect(a, -61 * e, -38.5 * e, 122 * e, 40 * e, 20 * e), a.restore(), fill_path(a, i[1], i[2], 4 * e), a.save(), a.translate(100 * e, 71.36874389648438 * e), a.rotate(0), round_rect(a, -60.5 * e, -18 * e, 121 * e, 30 * e, 20 * e), a.restore(), fill_path(a, i[3], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(144 * e, 80 * e), a.bezierCurveTo(152 * e, 100 * e, 152 * e, 101 * e, 153 * e, 102 * e), a.bezierCurveTo(159 * e, 100 * e, 159 * e, 100 * e, 160 * e, 100 * e), a.bezierCurveTo(161 * e, 84 * e, 161 * e, 84 * e, 162 * e, 68 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(57 * e, 75 * e), a.bezierCurveTo(48 * e, 101 * e, 53 * e, 89 * e, 48 * e, 102 * e), a.bezierCurveTo(44 * e, 100 * e, 44 * e, 100 * e, 39 * e, 97 * e), a.bezierCurveTo(39 * e, 83 * e, 39 * e, 83 * e, 39 * e, 69 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(101 * e, 72 * e), a.bezierCurveTo(144 * e, 69 * e, 149 * e, 58 * e, 162 * e, 49 * e), a.bezierCurveTo(174 * e, 31 * e, 173 * e, 38 * e, 172 * e, 45 * e), a.bezierCurveTo(168 * e, 73 * e, 158 * e, 75 * e, 152 * e, 78 * e), a.bezierCurveTo(106 * e, 89 * e, 107 * e, 91 * e, 107 * e, 94 * e), a.bezierCurveTo(107 * e, 100 * e, 107 * e, 107 * e, 107 * e, 107 * e), a.bezierCurveTo(99 * e, 112 * e, 98 * e, 110 * e, 93 * e, 107 * e), a.bezierCurveTo(94 * e, 107 * e, 93 * e, 107 * e, 93 * e, 107 * e), a.bezierCurveTo(93 * e, 100 * e, 93 * e, 100 * e, 92 * e, 94 * e), a.bezierCurveTo(92 * e, 89 * e, 90 * e, 90 * e, 73 * e, 86 * e), a.bezierCurveTo(45 * e, 81 * e, 40 * e, 77 * e, 35 * e, 68 * e), a.bezierCurveTo(23 * e, 36 * e, 28 * e, 34 * e, 36 * e, 46 * e), a.bezierCurveTo(45 * e, 58 * e, 83 * e, 72 * e, 98 * e, 72 * e), a.closePath(), fill_path(a, i[4], i[5], 4 * e), a.translate(0, 0), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115.5 * e, 116.07290649414062 * e), a.bezierCurveTo(159.5 * e, 99.07290649414062 * e, 159.5 * e, 98.07290649414062 * e, 159.5 * e, 98.07290649414062 * e), a.bezierCurveTo(155.5 * e, 116.07290649414062 * e, 159.5 * e, 116.07290649414062 * e, 159.5 * e, 118.07290649414062 * e), a.bezierCurveTo(147.5 * e, 130.07290649414062 * e, 136.5 * e, 132.07290649414062 * e, 115.5 * e, 138.07290649414062 * e), a.closePath(), fill_path(a, i[3], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39.5 * e, 96.07290649414062 * e), a.bezierCurveTo(85.5 * e, 114.07290649414062 * e, 62.5 * e, 105.57290649414062 * e, 85.5 * e, 115.07290649414062 * e), a.bezierCurveTo(85.5 * e, 125.57290649414062 * e, 85.5 * e, 125.57290649414062 * e, 85.5 * e, 136.07290649414062 * e), a.bezierCurveTo(51.5 * e, 129.07290649414062 * e, 51.5 * e, 125.07290649414062 * e, 41.5 * e, 118.07290649414062 * e), a.bezierCurveTo(44.5 * e, 106.07290649414062 * e, 42.5 * e, 103.07290649414062 * e, 40.5 * e, 96.07290649414062 * e), a.closePath(), fill_path(a, i[3], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(86 * e, 80 * e), a.bezierCurveTo(97 * e, 88 * e, 106 * e, 84 * e, 112 * e, 80 * e), a.bezierCurveTo(112 * e, 62 * e, 106 * e, 59 * e, 99 * e, 54 * e), a.bezierCurveTo(86 * e, 62 * e, 86 * e, 73 * e, 86 * e, 80 * e), a.closePath(), fill_path(a, i[3], i[2], 4 * e), a.scale(.5, .5), a.translate(100 * e, 71 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(86 * e, 80 * e), a.bezierCurveTo(97 * e, 88 * e, 106 * e, 84 * e, 112 * e, 80 * e), a.bezierCurveTo(112 * e, 62 * e, 106 * e, 59 * e, 99 * e, 54 * e), a.bezierCurveTo(86 * e, 62 * e, 86 * e, 73 * e, 86 * e, 80 * e), a.closePath(), fill_path(a, i[6], i[2], 4 * e), r
}

function create_book(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 400 * e, a.save(), a.translate(204 * e, 195.0833282470703 * e), a.rotate(10.16), round_rect(a, -97.5 * e, -134.5 * e, 195 * e, 269 * e, 10 * e), a.restore(), fill_path(a, i[0], i[1], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(58.5 * e, 226.5833282470703 * e), a.bezierCurveTo(120.5 * e, 281.5833282470703 * e, 120.5 * e, 281.5833282470703 * e, 182.5 * e, 336.5833282470703 * e), a.bezierCurveTo(263 * e, 248.5833282470703 * e, 263 * e, 248.5833282470703 * e, 343.5 * e, 160.5833282470703 * e), a.bezierCurveTo(280.5 * e, 104.58332824707031 * e, 280.5 * e, 104.58332824707031 * e, 217.5 * e, 48.58332824707031 * e), a.closePath(), fill_path(a, i[2], i[3], 4 * e), a.save(), a.translate(197 * e, 169.0833282470703 * e), a.rotate(10.16), round_rect(a, -93.5 * e, -126.5 * e, 187 * e, 253 * e, 10 * e), a.restore(), fill_path(a, i[4], i[1], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(226.5 * e, 24.583328247070312 * e), a.bezierCurveTo(58.5 * e, 207.5833282470703 * e, 143 * e, 116.58332824707031 * e, 59.5 * e, 208.5833282470703 * e), a.closePath(), fill_path(a, void 0, i[1], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(46.133331298828125 * e, 202.64999389648438 * e), a.bezierCurveTo(46.133331298828125 * e, 215.64999389648438 * e, 46.133331298828125 * e, 215.64999389648438 * e, 46.133331298828125 * e, 228.64999389648438 * e), a.closePath(), fill_path(a, i[4], i[1], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55.133331298828125 * e, 211.64999389648438 * e), a.bezierCurveTo(55.133331298828125 * e, 225.14999389648438 * e, 55.133331298828125 * e, 225.14999389648438 * e, 55.133331298828125 * e, 238.64999389648438 * e), a.bezierCurveTo(50.133331298828125 * e, 235.64999389648438 * e, 50.133331298828125 * e, 235.64999389648438 * e, 45.133331298828125 * e, 232.64999389648438 * e), a.bezierCurveTo(45.133331298828125 * e, 216.64999389648438 * e, 45.133331298828125 * e, 216.64999389648438 * e, 45.133331298828125 * e, 200.64999389648438 * e), a.closePath(), fill_path(a, i[4], i[1], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(46.133331298828125 * e, 198.39999389648438 * e), a.bezierCurveTo(46.133331298828125 * e, 199.89999389648438 * e, 46.133331298828125 * e, 199.89999389648438 * e, 46.133331298828125 * e, 201.39999389648438 * e), a.closePath(), fill_path(a, i[4], i[1], 8 * e), a.save(), a.translate(249.63333129882812 * e, 120.89999389648438 * e), a.rotate(7.04), round_rect(a, -58.5 * e, -32 * e, 117 * e, 64 * e, 10 * e), a.restore(), fill_path(a, i[5]), r
}

function create_paper(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 170 * e, r.height = 170 * e, a.globalAlpha = t ? .5 : 1, a.translate(-10 * e, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72.5 * e, 4.109375 * e), a.bezierCurveTo(117 * e, 9.609375 * e, 117 * e, 9.609375 * e, 161.5 * e, 15.109375 * e), a.bezierCurveTo(134.5 * e, 106.109375 * e, 110.5 * e, 130.109375 * e, 63.5 * e, 145.109375 * e), a.bezierCurveTo(33.5 * e, 120.609375 * e, 33.5 * e, 120.609375 * e, 3.5 * e, 96.109375 * e), a.bezierCurveTo(82.5 * e, 75.109375 * e, 69.5 * e, 29.109375 * e, 71.5 * e, 6.109375 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(10 * e, -10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72.5 * e, 4.109375 * e), a.bezierCurveTo(117 * e, 9.609375 * e, 117 * e, 9.609375 * e, 161.5 * e, 15.109375 * e), a.bezierCurveTo(134.5 * e, 106.109375 * e, 110.5 * e, 130.109375 * e, 63.5 * e, 145.109375 * e), a.bezierCurveTo(33.5 * e, 120.609375 * e, 33.5 * e, 120.609375 * e, 3.5 * e, 96.109375 * e), a.bezierCurveTo(82.5 * e, 75.109375 * e, 69.5 * e, 29.109375 * e, 71.5 * e, 6.109375 * e), a.closePath(), fill_path(a, i[1], i[2], 10 * e), r
}

function create_lock(e, t, i) {
    var r = (a = document.createElement("canvas")).getContext("2d");
    a.width = 47 * e, a.height = 60 * e;
    var a;
    r = (a = document.createElement("canvas")).getContext("2d");
    return a.width = 47 * e, a.height = 60 * e, circle(r, 23.5 * e, 20.734375 * e, 15.132745950421556 * e), fill_path(r, void 0, i[2], 4 * e), circle(r, 23.5 * e, 20.734375 * e, 18.601075237738275 * e), fill_path(r, void 0, i[1], 4 * e), circle(r, 23.5 * e, 20.734375 * e, 11.40175425099138 * e), fill_path(r, void 0, i[1], 4 * e), r.save(), r.translate(23 * e, 38.734375 * e), r.rotate(0), round_rect(r, -21.5 * e, -19 * e, 43 * e, 38 * e, 10 * e), r.restore(), fill_path(r, i[2], i[1], 4 * e), r.save(), r.translate(23.5 * e, 43.734375 * e), r.rotate(.5235987755982988), round_regular_polygon(r, 3, 8.06225774829855 * e, 0 * e), r.restore(), fill_path(r, i[3]), circle(r, 23.5 * e, 35.734375 * e, 7.0710678118654755 * e), fill_path(r, i[3]), a
}

function create_tronctotem(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 201 * e, r.height = 164 * e, a.translate(0, 5 * e), a.globalAlpha = t ? .5 : 1, circle(a, 100.5 * e, 82 * e, 74.92746655359852 * e), fill_path(a, i[0], i[0], 4 * e), circle(a, 100.5 * e, 82 * e, 65.9417374971317 * e), fill_path(a, i[0], i[0], 4 * e), a.translate(0, -5), a.globalAlpha = 1, circle(a, 100.5 * e, 82 * e, 74.92746655359852 * e), fill_path(a, i[1], i[3], 4 * e), circle(a, 100.5 * e, 82 * e, 65.9417374971317 * e), fill_path(a, i[1], i[2], 4 * e), circle(a, 100.5 * e, 82 * e, 35.9417374971317 * e), fill_path(a, i[1], i[2], 20 * e), circle(a, 100.5 * e, 82 * e, 15.9417374971317 * e), fill_path(a, i[1], i[2], 6 * e), r
}

function create_headtotem(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 501 * e, a.height = 564 * e, n.scale(.5, .5), n.translate(240 * e, 255 * e), n.rotate(r), n.globalAlpha = t ? .5 : .2, circle(n, 174 * e, 87.984375 * e, 20.8806130178211 * e), fill_path(n, i[0], i[0], 8 * e), circle(n, 174 * e, 87.984375 * e, 12.165525060596439 * e), fill_path(n, i[0], i[0], 8 * e), circle(n, 174 * e, 87.484375 * e, 6 * e), fill_path(n, i[0]), circle(n, 30 * e, 87.984375 * e, 20.8806130178211 * e), fill_path(n, i[0], i[0], 4 * e), circle(n, 30 * e, 87.984375 * e, 12.165525060596439 * e), fill_path(n, i[0], i[0], 4 * e), circle(n, 30 * e, 87.484375 * e, 6 * e), fill_path(n, i[0]), circle(n, 100 * e, 30 * e, 20.8806130178211 * e), fill_path(n, i[0], i[0], 4 * e), circle(n, 100 * e, 30 * e, 12.165525060596439 * e), fill_path(n, i[0], i[0], 4 * e), circle(n, 100 * e, 30 * e, 6 * e), fill_path(n, i[0]), circle(n, 100 * e, 130 * e, 20.8806130178211 * e), fill_path(n, i[0], i[0], 4 * e), circle(n, 100 * e, 130 * e, 12.165525060596439 * e), fill_path(n, i[0], i[0], 4 * e), circle(n, 100 * e, 130 * e, 6 * e), fill_path(n, i[0]), n.save(), n.translate(102 * e, 81.984375 * e), n.rotate(0), round_rect(n, -74 * e, -57 * e, 148 * e, 114 * e, 23 * e), n.restore(), fill_path(n, i[0], i[0], 4 * e), n.save(), n.translate(101 * e, 64.984375 * e), n.rotate(0), round_rect(n, -33 * e, -10 * e, 66 * e, 20 * e, 15 * e), n.restore(), fill_path(n, i[0], i[0], 4 * e), n.save(), n.translate(102 * e, 63.484375 * e), n.rotate(0), round_rect(n, -9 * e, -27.5 * e, 18 * e, 55 * e, 15 * e), n.restore(), n.translate(5, -5), n.globalAlpha = 1, circle(n, 174 * e, 87.984375 * e, 20.8806130178211 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 174 * e, 87.984375 * e, 12.165525060596439 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 174 * e, 87.484375 * e, 6 * e), fill_path(n, i[2]), circle(n, 30 * e, 87.984375 * e, 20.8806130178211 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 30 * e, 87.984375 * e, 12.165525060596439 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 30 * e, 87.484375 * e, 6 * e), fill_path(n, i[2]), circle(n, 102 * e, 30 * e, 20.8806130178211 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 102 * e, 30 * e, 12.165525060596439 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 102 * e, 30 * e, 6 * e), fill_path(n, i[1]), circle(n, 102 * e, 130 * e, 20.8806130178211 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 102 * e, 130 * e, 12.165525060596439 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 102 * e, 130 * e, 6 * e), fill_path(n, i[1]), n.save(), n.translate(102 * e, 81.984375 * e), round_rect(n, -74 * e, -57 * e, 148 * e, 114 * e, 23 * e), n.restore(), fill_path(n, i[1], i[3], 8 * e), n.save(), n.translate(101 * e, 64.984375 * e), round_rect(n, -33 * e, -10 * e, 66 * e, 20 * e, 15 * e), n.restore(), fill_path(n, i[2], i[1], 8 * e), n.save(), n.translate(102 * e, 63.484375 * e), round_rect(n, -9 * e, -27.5 * e, 18 * e, 55 * e, 15 * e), n.restore(), fill_path(n, i[2], i[1], 8 * e), circle(n, 135 * e, 107.36605834960938 * e, 21.095023109728988 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 135 * e, 107.36605834960938 * e, 13 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 135 * e, 107.36605834960938 * e, 6.082762530298219 * e), fill_path(n, i[2]), circle(n, 70 * e, 107.36605834960938 * e, 21.095023109728988 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 70 * e, 107.36605834960938 * e, 13 * e), fill_path(n, i[1], i[3], 8 * e), circle(n, 70 * e, 107.36605834960938 * e, 6.082762530298219 * e), fill_path(n, i[2]), a
}

function create_icon_team(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 95 * e, r.height = 85 * e, 0 == i ? (a.translate(7 * e, 15 * e), a.scale(.9, .9), a.save(), round_rect(a, 0 * e, 5 * e, 90 * e, 60 * e, 10), fill_path(a, t[0]), a.globalCompositeOperation = "destination-out", circle(a, 25 * e, 40 * e, 10 * e), a.fill(), circle(a, 65 * e, 40 * e, 10 * e), a.fill(), a.restore(), a.save(), round_rect(a, 0, 0, 90 * e, 60 * e, 10 * e), fill_path(a, t[1]), a.globalCompositeOperation = "destination-out", circle(a, 25 * e, 40 * e, 10 * e), a.fill(), circle(a, 65 * e, 40 * e, 10 * e), a.fill(), a.restore()) : 1 == i && (a.scale(.8, .8), a.translate(15 * e, 33 * e), a.save(), a.scale(.56, .56), a.translate(-39 * e, -60 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(32.5 * e, 50.642852783203125 * e), a.bezierCurveTo(83 * e, 69.64285278320312 * e, 83 * e, 69.64285278320312 * e, 133.5 * e, 88.64285278320312 * e), a.bezierCurveTo(93 * e, 92.64285278320312 * e, 93 * e, 92.64285278320312 * e, 52.5 * e, 96.64285278320312 * e), a.bezierCurveTo(30.5 * e, 100.64285278320312 * e, 36.5 * e, 94.64285278320312 * e, 32.5 * e, 84.64285278320312 * e), a.bezierCurveTo(21.5 * e, 45.642852783203125 * e, 24.5 * e, 48.642852783203125 * e, 31.5 * e, 50.642852783203125 * e), a.closePath(), fill_path(a, t[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(116.5 * e, 85.64285278320312 * e), a.bezierCurveTo(160.5 * e, 67.14285278320312 * e, 160.5 * e, 67.14285278320312 * e, 204.5 * e, 48.642852783203125 * e), a.bezierCurveTo(220.5 * e, 42.642852783203125 * e, 208.5 * e, 68.64285278320312 * e, 205.5 * e, 85.64285278320312 * e), a.bezierCurveTo(202.5 * e, 98.64285278320312 * e, 199.5 * e, 98.64285278320312 * e, 188.5 * e, 100.64285278320312 * e), a.closePath(), fill_path(a, t[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(166.5 * e, 68.64285278320312 * e), a.bezierCurveTo(147.5 * e, 72.64285278320312 * e, 145.5 * e, 73.64285278320312 * e, 142.5 * e, 62.642852783203125 * e), a.bezierCurveTo(121.5 * e, 12.642852783203125 * e, 122.5 * e, 5.642852783203125 * e, 117.5 * e, 15.642852783203125 * e), a.bezierCurveTo(105.5 * e, 40.642852783203125 * e, 105.5 * e, 40.642852783203125 * e, 93.5 * e, 65.64285278320312 * e), a.bezierCurveTo(89.5 * e, 74.64285278320312 * e, 84.5 * e, 72.64285278320312 * e, 73.5 * e, 74.64285278320312 * e), a.bezierCurveTo(98 * e, 87.64285278320312 * e, 98 * e, 87.64285278320312 * e, 122.5 * e, 100.64285278320312 * e), a.closePath(), fill_path(a, t[1]), a.restore(), a.save(), round_rect(a, 0, 15 * e, 90 * e, 50 * e, 10 * e), fill_path(a, t[0]), round_rect(a, 0, 10 * e, 90 * e, 50 * e, 10 * e), fill_path(a, t[1]), a.globalCompositeOperation = "destination-out", circle(a, 25 * e, 40 * e, 10 * e), a.fill(), circle(a, 65 * e, 40 * e, 10 * e), a.fill(), a.restore()), r
}

function create_team_button(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    if (r.width = 120 * e, r.height = 100 * e, round_rect(a, 10 * e, 10 * e, 95 * e, 80 * e, 10 * e), fill_path(a, t[2]), round_rect(a, 10 * e, 5 * e, 95 * e, 80 * e, 10 * e), fill_path(a, t[3], t[4], 4 * e), 0 == i) {
        var n = create_icon_team(.75 * e, t, 0);
        a.drawImage(n, 22 * e, 18 * e)
    } else if (1 == i) {
        n = create_icon_team(.75 * e, t, 1);
        a.drawImage(n, 22 * e, 18 * e)
    }
    return r
}

function create_totem(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    r.width = 185 * e, r.height = 164 * e, a.translate(0, 0);
    var n = create_tronctotem(e, t, i);
    a.drawImage(n, -10 * e, 0 * e);
    n = create_headtotem(e, t, i, 0);
    a.drawImage(n, -83 * e, -40 * e);
    n = create_headtotem(e, t, i, Math.PI / 1.4);
    a.drawImage(n, -15 * e, -88 * e);
    n = create_headtotem(e, t, i, Math.PI / -1.4);
    return a.drawImage(n, 15 * e, -8 * e), r
}

function create_lockpick(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 450 * e, r.height = 790 * e, a.translate(5 * e, 5 * e), a.globalAlpha = 0, circle(a, 178.5 * e, 172.828125 * e, 150 * e), fill_path(a, void 0, i[0], 65 * e), circle(a, 178.5 * e, 172.828125 * e, 150 * e), fill_path(a, void 0, i[0], 55 * e), a.closePath(), a.save(), a.translate(177 * e, 512.328125 * e), round_rect(a, -25 * e, -202.5 * e, 65 * e, 405 * e, 25 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(136 * e, 581.828125 * e), round_rect(a, -39 * e, -23 * e, 78 * e, 46 * e, 25 * e), a.restore(), fill_path(a, i[0]), a.save(), a.translate(135.5 * e, 663.828125 * e), round_rect(a, -39.5 * e, -22 * e, 79 * e, 44 * e, 25 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(114 * e, 594.828125 * e), a.bezierCurveTo(175 * e, 596.828125 * e, 163 * e, 596.828125 * e, 172 * e, 594.828125 * e), a.bezierCurveTo(171.5 * e, 633.828125 * e, 171.5 * e, 633.828125 * e, 171 * e, 672.828125 * e), a.bezierCurveTo(110 * e, 673.828125 * e, 140.5 * e, 673.328125 * e, 110 * e, 673.828125 * e), a.bezierCurveTo(110.5 * e, 661.828125 * e, 110.5 * e, 661.828125 * e, 111 * e, 649.828125 * e), a.bezierCurveTo(157 * e, 633.828125 * e, 134 * e, 607.828125 * e, 114 * e, 594.828125 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(0, 5 * e), a.moveTo(140 * e, 294.828125 * e), a.bezierCurveTo(212 * e, 295.828125 * e, 176.5 * e, 295.328125 * e, 213 * e, 295.828125 * e), a.bezierCurveTo(201.5 * e, 325.328125 * e, 201.5 * e, 325.328125 * e, 190 * e, 354.828125 * e), a.bezierCurveTo(175.5 * e, 355.828125 * e, 175.5 * e, 355.828125 * e, 161 * e, 356.828125 * e), a.bezierCurveTo(154.5 * e, 328.828125 * e, 154.5 * e, 328.828125 * e, 148 * e, 300.828125 * e), a.closePath(), fill_path(a, i[0]), a.translate(3, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(159 * e, 679.828125 * e), a.bezierCurveTo(180 * e, 665.828125 * e, 155 * e, 675.828125 * e, 151 * e, 671.828125 * e), a.bezierCurveTo(154.5 * e, 685.328125 * e, 154.5 * e, 685.328125 * e, 158 * e, 698.828125 * e), a.bezierCurveTo(171 * e, 699.828125 * e, 171 * e, 699.828125 * e, 184 * e, 700.828125 * e), a.closePath(), fill_path(a, i[0]), a.save(), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(157 * e, 548.828125 * e), a.bezierCurveTo(157 * e, 561.828125 * e, 157 * e, 561.828125 * e, 157 * e, 574.828125 * e), a.bezierCurveTo(132.5 * e, 580.828125 * e, 132.5 * e, 580.828125 * e, 108 * e, 586.828125 * e), a.bezierCurveTo(112 * e, 599.828125 * e, 111 * e, 593.828125 * e, 112 * e, 599.828125 * e), a.bezierCurveTo(159 * e, 603.828125 * e, 126.5 * e, 601.328125 * e, 141 * e, 602.828125 * e), a.bezierCurveTo(145 * e, 641.828125 * e, 143.5 * e, 623.828125 * e, 146 * e, 644.828125 * e), a.bezierCurveTo(129.5 * e, 645.328125 * e, 129.5 * e, 645.328125 * e, 113 * e, 645.828125 * e), a.bezierCurveTo(107.5 * e, 652.828125 * e, 107.5 * e, 652.828125 * e, 102 * e, 659.828125 * e), a.bezierCurveTo(104 * e, 669.328125 * e, 104 * e, 669.328125 * e, 106 * e, 678.828125 * e), a.bezierCurveTo(145 * e, 679.328125 * e, 145 * e, 679.328125 * e, 184 * e, 679.828125 * e), a.bezierCurveTo(185 * e, 615.828125 * e, 185 * e, 615.828125 * e, 186 * e, 551.828125 * e), a.bezierCurveTo(172.5 * e, 551.328125 * e, 172.5 * e, 551.328125 * e, 159 * e, 550.828125 * e), a.closePath(), fill_path(a, i[0], i[0], 7 * e), a.restore(), a.globalAlpha = 1, a.translate(15 * e, 35 * e), circle(a, 178.5 * e, 172.828125 * e, 150 * e), fill_path(a, void 0, i[2], 95 * e), circle(a, 178.5 * e, 172.828125 * e, 150 * e), fill_path(a, void 0, i[1], 55 * e), a.closePath(), a.save(), a.translate(177 * e, 512.328125 * e), round_rect(a, -25 * e, -202.5 * e, 65 * e, 405 * e, 25 * e), a.restore(), fill_path(a, i[1], i[2], 20 * e), a.save(), a.translate(136 * e, 581.828125 * e), round_rect(a, -39 * e, -23 * e, 78 * e, 46 * e, 25 * e), a.restore(), fill_path(a, i[1], i[2], 20 * e), a.save(), a.translate(135.5 * e, 663.828125 * e), round_rect(a, -39.5 * e, -22 * e, 79 * e, 44 * e, 25 * e), a.restore(), fill_path(a, i[1], i[2], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(114 * e, 594.828125 * e), a.bezierCurveTo(175 * e, 596.828125 * e, 163 * e, 596.828125 * e, 172 * e, 594.828125 * e), a.bezierCurveTo(171.5 * e, 633.828125 * e, 171.5 * e, 633.828125 * e, 171 * e, 672.828125 * e), a.bezierCurveTo(110 * e, 673.828125 * e, 140.5 * e, 673.328125 * e, 110 * e, 673.828125 * e), a.bezierCurveTo(110.5 * e, 661.828125 * e, 110.5 * e, 661.828125 * e, 111 * e, 649.828125 * e), a.bezierCurveTo(157 * e, 633.828125 * e, 134 * e, 607.828125 * e, 114 * e, 594.828125 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(0, 5 * e), a.moveTo(123 * e, 294.828125 * e), a.bezierCurveTo(212 * e, 295.828125 * e, 190.5 * e, 295.328125 * e, 250 * e, 295.828125 * e), a.bezierCurveTo(231.5 * e, 325.328125 * e, 231.5 * e, 325.328125 * e, 220 * e, 354.828125 * e), a.bezierCurveTo(175.5 * e, 355.828125 * e, 175.5 * e, 355.828125 * e, 140 * e, 356.828125 * e), a.bezierCurveTo(123.5 * e, 328.828125 * e, 123.5 * e, 328.828125 * e, 123 * e, 294.828125 * e), a.closePath(), fill_path(a, i[1]), a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(159 * e, 679.828125 * e), a.bezierCurveTo(180 * e, 665.828125 * e, 155 * e, 675.828125 * e, 151 * e, 671.828125 * e), a.bezierCurveTo(154.5 * e, 685.328125 * e, 154.5 * e, 685.328125 * e, 158 * e, 698.828125 * e), a.bezierCurveTo(171 * e, 699.828125 * e, 171 * e, 699.828125 * e, 184 * e, 700.828125 * e), a.closePath(), fill_path(a, i[1]), a.save(), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(157 * e, 548.828125 * e), a.bezierCurveTo(157 * e, 561.828125 * e, 157 * e, 561.828125 * e, 157 * e, 574.828125 * e), a.bezierCurveTo(132.5 * e, 580.828125 * e, 132.5 * e, 580.828125 * e, 108 * e, 586.828125 * e), a.bezierCurveTo(112 * e, 599.828125 * e, 111 * e, 593.828125 * e, 112 * e, 599.828125 * e), a.bezierCurveTo(159 * e, 603.828125 * e, 126.5 * e, 601.328125 * e, 141 * e, 602.828125 * e), a.bezierCurveTo(145 * e, 641.828125 * e, 143.5 * e, 623.828125 * e, 146 * e, 644.828125 * e), a.bezierCurveTo(129.5 * e, 645.328125 * e, 129.5 * e, 645.328125 * e, 113 * e, 645.828125 * e), a.bezierCurveTo(107.5 * e, 652.828125 * e, 107.5 * e, 652.828125 * e, 102 * e, 659.828125 * e), a.bezierCurveTo(104 * e, 669.328125 * e, 104 * e, 669.328125 * e, 106 * e, 678.828125 * e), a.bezierCurveTo(145 * e, 679.328125 * e, 145 * e, 679.328125 * e, 184 * e, 679.828125 * e), a.bezierCurveTo(185 * e, 615.828125 * e, 185 * e, 615.828125 * e, 186 * e, 551.828125 * e), a.bezierCurveTo(172.5 * e, 551.328125 * e, 172.5 * e, 551.328125 * e, 159 * e, 550.828125 * e), a.closePath(), fill_path(a, i[1], i[1], 7 * e), a.restore(), r
}

function create_resurrection_ground(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 202 * e, r.height = 202 * e, a.translate(2 * e, 1 * e), a.globalAlpha = .3, circle(a, 98 * e, 99 * e, 100 * e), fill_path(a, i[0]), a.globalAlpha = .5, circle(a, 98 * e, 99 * e, 90 * e), fill_path(a, i[1]), r
}

function create_resurrection_hole(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 89 * e, r.height = 89 * e, a.save(), a.translate(44.5 * e, 44.5 * e), round_regular_polygon(a, 6, 40 * e, 10 * e), a.restore(), fill_path(a, i[0], i[1], 5 * e), a.save(), a.translate(44.5 * e, 44.5 * e), round_regular_polygon(a, 6, 25.11521001172521 * e, 10 * e), a.restore(), fill_path(a, i[2], i[3], 5 * e), r
}

function create_resurrection_rotate(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 88 * e, r.height = 88 * e, a.save(), a.translate(44 * e, 44 * e), a.rotate(.52), round_regular_polygon(a, 6, 43 * e, 10 * e), a.restore(), fill_path(a, i[0], i[1], 3 * e), r
}

function create_resurrection(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 202 * e, r.height = 202 * e, a.translate(2 * e, 1 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.save(), a.translate(98 * e, 41.15177917480469 * e), a.rotate(.8), round_rect(a, -16 * e, -16.5 * e, 32 * e, 33 * e, 7 * e), a.restore(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(98 * e, 22.5089111328125 * e), a.bezierCurveTo(97.5 * e, 41.5089111328125 * e, 97.5 * e, 41.5089111328125 * e, 97 * e, 60.5089111328125 * e), fill_path(a, i[2]), a.save(), a.translate(147.5 * e, 69.5089111328125 * e), a.rotate(.2), round_rect(a, -15.5 * e, -16 * e, 31 * e, 32 * e, 7 * e), a.restore(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(163 * e, 59.50892639160156 * e), a.bezierCurveTo(147 * e, 69.50892639160156 * e, 127 * e, 82.50892639160156 * e, 131 * e, 79.50892639160156 * e), fill_path(a, i[2]), a.save(), a.translate(143.5 * e, 128.2946319580078 * e), a.rotate(1.24), round_rect(a, -16.5 * e, -17.5 * e, 33 * e, 35 * e, 7 * e), a.restore(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(162 * e, 135.93748474121094 * e), a.bezierCurveTo(143.5 * e, 128.43748474121094 * e, 129 * e, 120.93748474121094 * e, 125 * e, 120.93748474121094 * e), fill_path(a, i[2]), a.save(), a.translate(99 * e, 156.08035278320312 * e), a.rotate(.84), round_rect(a, -18 * e, -18 * e, 36 * e, 36 * e, 7 * e), a.restore(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(98 * e, 136.08035278320312 * e), a.bezierCurveTo(98 * e, 156.08035278320312 * e, 98 * e, 156.08035278320312 * e, 98 * e, 176.08035278320312 * e), fill_path(a, i[2]), a.save(), a.translate(54 * e, 72.22320556640625 * e), a.rotate(1.32), round_rect(a, -18 * e, -19 * e, 36 * e, 38 * e, 7 * e), a.restore(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(34 * e, 60.79463195800781 * e), a.bezierCurveTo(53.5 * e, 72.29463195800781 * e, 69 * e, 79.79463195800781 * e, 73 * e, 83.79463195800781 * e), fill_path(a, i[2]), a.save(), a.translate(49 * e, 127.29463195800781 * e), a.rotate(1.76), round_rect(a, -20 * e, -17.5 * e, 40 * e, 35 * e, 7 * e), a.restore(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 141.7946319580078 * e), a.bezierCurveTo(47 * e, 130.2946319580078 * e, 64 * e, 119.79463195800781 * e, 64 * e, 118.79463195800781 * e), fill_path(a, i[2]), a.globalAlpha = 1, a.translate(0, -10 * e), a.save(), a.translate(98 * e, 41.15177917480469 * e), a.rotate(.8), round_rect(a, -16 * e, -16.5 * e, 32 * e, 33 * e, 7 * e), a.restore(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(98 * e, 22.5089111328125 * e), a.bezierCurveTo(97.5 * e, 41.5089111328125 * e, 97.5 * e, 41.5089111328125 * e, 97 * e, 60.5089111328125 * e), fill_path(a, void 0, i[4], 5 * e), a.save(), a.translate(147.5 * e, 69.5089111328125 * e), a.rotate(.2), round_rect(a, -15.5 * e, -16 * e, 31 * e, 32 * e, 7 * e), a.restore(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(163 * e, 59.50892639160156 * e), a.bezierCurveTo(147 * e, 69.50892639160156 * e, 127 * e, 82.50892639160156 * e, 131 * e, 79.50892639160156 * e), fill_path(a, void 0, i[4], 5 * e), a.save(), a.translate(143.5 * e, 128.2946319580078 * e), a.rotate(1.24), round_rect(a, -16.5 * e, -17.5 * e, 33 * e, 35 * e, 7 * e), a.restore(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(162 * e, 135.93748474121094 * e), a.bezierCurveTo(143.5 * e, 128.43748474121094 * e, 129 * e, 120.93748474121094 * e, 125 * e, 120.93748474121094 * e), fill_path(a, void 0, i[4], 5 * e), a.save(), a.translate(99 * e, 156.08035278320312 * e), a.rotate(.84), round_rect(a, -18 * e, -18 * e, 36 * e, 36 * e, 7 * e), a.restore(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(98 * e, 136.08035278320312 * e), a.bezierCurveTo(98 * e, 156.08035278320312 * e, 98 * e, 156.08035278320312 * e, 98 * e, 176.08035278320312 * e), fill_path(a, void 0, i[4], 5 * e), a.save(), a.translate(54 * e, 72.22320556640625 * e), a.rotate(1.32), round_rect(a, -18 * e, -19 * e, 36 * e, 38 * e, 7 * e), a.restore(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(34 * e, 60.79463195800781 * e), a.bezierCurveTo(53.5 * e, 72.29463195800781 * e, 69 * e, 79.79463195800781 * e, 73 * e, 83.79463195800781 * e), fill_path(a, void 0, i[4], 5 * e), a.save(), a.translate(49 * e, 127.29463195800781 * e), a.rotate(1.76), round_rect(a, -20 * e, -17.5 * e, 40 * e, 35 * e, 7 * e), a.restore(), fill_path(a, i[3], i[4], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30 * e, 141.7946319580078 * e), a.bezierCurveTo(47 * e, 130.2946319580078 * e, 64 * e, 119.79463195800781 * e, 64 * e, 118.79463195800781 * e), fill_path(a, void 0, i[4], 5 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.save(), a.translate(98 * e, 99 * e), round_regular_polygon(a, 6, 70.28669492273468 * e, 10 * e), a.restore(), fill_path(a, i[2]), a.save(), a.translate(98 * e, 99 * e), round_regular_polygon(a, 6, 56.455940020351264 * e, 10 * e), a.restore(), fill_path(a, i[2]), a.globalAlpha = 1, a.translate(0, -10 * e), a.save(), a.translate(98 * e, 99 * e), round_regular_polygon(a, 6, 70.28669492273468 * e, 10 * e), a.restore(), fill_path(a, i[5], i[6], 5 * e), a.save(), a.translate(98 * e, 99 * e), round_regular_polygon(a, 6, 56.455940020351264 * e, 10 * e), a.restore(), fill_path(a, i[7], i[8], 7 * e), r
}

function create_dragon_heart(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 161 * e, r.height = 184 * e, a.translate(0, 10 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105.5 * e, 34.609375 * e), a.bezierCurveTo(48.5 * e, 7.609375 * e, 11.5 * e, 58.609375 * e, 20.5 * e, 97.609375 * e), a.bezierCurveTo(44.5 * e, 161.609375 * e, 70.5 * e, 171.609375 * e, 88.5 * e, 156.609375 * e), a.bezierCurveTo(120.5 * e, 129.609375 * e, 123.5 * e, 105.609375 * e, 128.5 * e, 83.609375 * e), a.bezierCurveTo(137.5 * e, 79.609375 * e, 141.5 * e, 79.609375 * e, 146.5 * e, 81.609375 * e), a.bezierCurveTo(153.5 * e, 70.609375 * e, 151.5 * e, 65.609375 * e, 148.5 * e, 61.609375 * e), a.bezierCurveTo(134.5 * e, 60.609375 * e, 131.5 * e, 63.609375 * e, 127.5 * e, 66.609375 * e), a.bezierCurveTo(127.5 * e, 55.609375 * e, 125.5 * e, 54.609375 * e, 120.5 * e, 51.609375 * e), a.bezierCurveTo(128.5 * e, 42.609375 * e, 136.5 * e, 38.609375 * e, 147.5 * e, 39.609375 * e), a.bezierCurveTo(152.5 * e, 23.609375 * e, 147.5 * e, 21.609375 * e, 140.5 * e, 17.609375 * e), a.bezierCurveTo(120.5 * e, 17.609375 * e, 114.5 * e, 27.609375 * e, 106.5 * e, 35.609375 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(45.5 * e, 144.609375 * e), a.bezierCurveTo(35.5 * e, 155.609375 * e, 37 * e, 152.109375 * e, 28.5 * e, 159.609375 * e), a.bezierCurveTo(16.5 * e, 154.609375 * e, 16.5 * e, 151.609375 * e, 17.5 * e, 141.609375 * e), a.bezierCurveTo(25.5 * e, 134.109375 * e, 25.5 * e, 134.109375 * e, 33.5 * e, 126.609375 * e), fill_path(a, i[0]), a.translate(0, -10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(45.5 * e, 144.609375 * e), a.bezierCurveTo(35.5 * e, 155.609375 * e, 37 * e, 152.109375 * e, 28.5 * e, 159.609375 * e), a.bezierCurveTo(16.5 * e, 154.609375 * e, 16.5 * e, 151.609375 * e, 17.5 * e, 141.609375 * e), a.bezierCurveTo(25.5 * e, 134.109375 * e, 25.5 * e, 134.109375 * e, 33.5 * e, 126.609375 * e), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105.5 * e, 34.609375 * e), a.bezierCurveTo(48.5 * e, 7.609375 * e, 11.5 * e, 58.609375 * e, 20.5 * e, 97.609375 * e), a.bezierCurveTo(44.5 * e, 161.609375 * e, 70.5 * e, 171.609375 * e, 88.5 * e, 156.609375 * e), a.bezierCurveTo(120.5 * e, 129.609375 * e, 123.5 * e, 105.609375 * e, 128.5 * e, 83.609375 * e), a.bezierCurveTo(137.5 * e, 79.609375 * e, 141.5 * e, 79.609375 * e, 146.5 * e, 81.609375 * e), a.bezierCurveTo(153.5 * e, 70.609375 * e, 151.5 * e, 65.609375 * e, 148.5 * e, 61.609375 * e), a.bezierCurveTo(134.5 * e, 60.609375 * e, 131.5 * e, 63.609375 * e, 127.5 * e, 66.609375 * e), a.bezierCurveTo(127.5 * e, 55.609375 * e, 125.5 * e, 54.609375 * e, 120.5 * e, 51.609375 * e), a.bezierCurveTo(128.5 * e, 42.609375 * e, 136.5 * e, 38.609375 * e, 147.5 * e, 39.609375 * e), a.bezierCurveTo(152.5 * e, 23.609375 * e, 147.5 * e, 21.609375 * e, 140.5 * e, 17.609375 * e), a.bezierCurveTo(120.5 * e, 17.609375 * e, 114.5 * e, 27.609375 * e, 106.5 * e, 35.609375 * e), a.closePath(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(104.5 * e, 35.609375 * e), a.bezierCurveTo(71.5 * e, 36.609375 * e, 57.5 * e, 52.609375 * e, 58.5 * e, 81.609375 * e), a.bezierCurveTo(59.5 * e, 103.609375 * e, 66.5 * e, 107.609375 * e, 66.5 * e, 116.609375 * e), a.bezierCurveTo(67.5 * e, 128.609375 * e, 65.5 * e, 131.609375 * e, 63.5 * e, 137.609375 * e), fill_path(a, void 0, i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(59.5 * e, 72.609375 * e), a.bezierCurveTo(38.5 * e, 80.609375 * e, 43.5 * e, 81.609375 * e, 37.5 * e, 89.609375 * e), fill_path(a, void 0, i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(60.5 * e, 85.609375 * e), a.bezierCurveTo(75.5 * e, 91.609375 * e, 76.5 * e, 96.609375 * e, 81.5 * e, 104.609375 * e), fill_path(a, void 0, i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(68.5 * e, 122.609375 * e), a.bezierCurveTo(79.5 * e, 130.609375 * e, 74.5 * e, 128.609375 * e, 80.5 * e, 134.609375 * e), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(142.5 * e, 18.609375 * e), a.bezierCurveTo(151.5 * e, 28.609375 * e, 151.5 * e, 32.609375 * e, 146.5 * e, 40.609375 * e), a.bezierCurveTo(137.5 * e, 26.609375 * e, 138.5 * e, 24.609375 * e, 142.5 * e, 19.609375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(146.5 * e, 61.50892639160156 * e), a.bezierCurveTo(157.5 * e, 69.50892639160156 * e, 150.5 * e, 79.50892639160156 * e, 145.5 * e, 81.50892639160156 * e), a.bezierCurveTo(140.5 * e, 65.50892639160156 * e, 144.5 * e, 64.50892639160156 * e, 146.5 * e, 62.50892639160156 * e), a.closePath(), fill_path(a, i[3]), r
}

function create_ghost(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 254 * e, r.height = 288 * e, a.translate(0, 5), a.globalAlpha = .5, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(218 * e, 84.640625 * e), a.bezierCurveTo(150 * e, 13.640625 * e, 186 * e, 92.640625 * e, 168 * e, 103.640625 * e), a.bezierCurveTo(151 * e, 107.640625 * e, 150 * e, 61.640625 * e, 144 * e, 39.640625 * e), a.bezierCurveTo(135 * e, 1.640625 * e, 113 * e, 2.640625 * e, 110 * e, 40.640625 * e), a.bezierCurveTo(106 * e, 97.640625 * e, 98 * e, 102.640625 * e, 83 * e, 100.640625 * e), a.bezierCurveTo(68 * e, 98.640625 * e, 67 * e, 77.640625 * e, 70 * e, 55.640625 * e), a.bezierCurveTo(75 * e, 16.640625 * e, 47 * e, 52.640625 * e, 38 * e, 67.640625 * e), a.bezierCurveTo(10 * e, 113.640625 * e, 10 * e, 181.640625 * e, 23 * e, 213.640625 * e), a.bezierCurveTo(45 * e, 266.640625 * e, 97 * e, 277.640625 * e, 147 * e, 269.640625 * e), a.bezierCurveTo(217 * e, 259.640625 * e, 236 * e, 221.640625 * e, 239 * e, 166.640625 * e), a.bezierCurveTo(239 * e, 113.640625 * e, 223 * e, 90.640625 * e, 219 * e, 86.640625 * e), a.closePath(), fill_path(a, i[0], i[0], 4 * e), circle(a, 175 * e, 220.640625 * e, 29.546573405388315 * e), fill_path(a, i[0]), circle(a, 79 * e, 222.640625 * e, 28.178005607210743 * e), fill_path(a, i[0]), circle(a, 175 * e, 214.640625 * e, 27.892651361962706 * e), fill_path(a, i[0], i[0], 4 * e), circle(a, 79 * e, 215.640625 * e, 26.570660511172846 * e), fill_path(a, i[0], i[0], 4 * e), a.translate(0, -5), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(218 * e, 84.640625 * e), a.bezierCurveTo(150 * e, 13.640625 * e, 186 * e, 92.640625 * e, 168 * e, 103.640625 * e), a.bezierCurveTo(151 * e, 107.640625 * e, 150 * e, 61.640625 * e, 144 * e, 39.640625 * e), a.bezierCurveTo(135 * e, 1.640625 * e, 113 * e, 2.640625 * e, 110 * e, 40.640625 * e), a.bezierCurveTo(106 * e, 97.640625 * e, 98 * e, 102.640625 * e, 83 * e, 100.640625 * e), a.bezierCurveTo(68 * e, 98.640625 * e, 67 * e, 77.640625 * e, 70 * e, 55.640625 * e), a.bezierCurveTo(75 * e, 16.640625 * e, 47 * e, 52.640625 * e, 38 * e, 67.640625 * e), a.bezierCurveTo(10 * e, 113.640625 * e, 10 * e, 181.640625 * e, 23 * e, 213.640625 * e), a.bezierCurveTo(45 * e, 266.640625 * e, 97 * e, 277.640625 * e, 147 * e, 269.640625 * e), a.bezierCurveTo(217 * e, 259.640625 * e, 236 * e, 221.640625 * e, 239 * e, 166.640625 * e), a.bezierCurveTo(239 * e, 113.640625 * e, 223 * e, 90.640625 * e, 219 * e, 86.640625 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), circle(a, 175 * e, 222.640625 * e, 26.546573405388315 * e), fill_path(a, i[3]), circle(a, 79 * e, 222.640625 * e, 26.178005607210743 * e), fill_path(a, i[3]), circle(a, 175 * e, 210.640625 * e, 26.892651361962706 * e), fill_path(a, i[4], i[5], 8 * e), circle(a, 79 * e, 210.640625 * e, 26.570660511172846 * e), fill_path(a, i[4], i[5], 8 * e), r
}

function create_gemme_green(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 104 * e, r.height = 117 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(4 * e, 90 * e), a.bezierCurveTo(20 * e, 99.5 * e, 20 * e, 99.5 * e, 36 * e, 109 * e), a.bezierCurveTo(67 * e, 92 * e, 67 * e, 92 * e, 98 * e, 75 * e), a.bezierCurveTo(91 * e, 27 * e, 91 * e, 27 * e, 91 * e, 28 * e), a.bezierCurveTo(72.5 * e, 16 * e, 72.5 * e, 16 * e, 54 * e, 4 * e), a.bezierCurveTo(33.5 * e, 10 * e, 33.5 * e, 10 * e, 13 * e, 16 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(6 * e, 76 * e), a.bezierCurveTo(13.5 * e, 51.5 * e, 13.5 * e, 51.5 * e, 21 * e, 27 * e), a.bezierCurveTo(37.5 * e, 17 * e, 37.5 * e, 17 * e, 54 * e, 7 * e), a.bezierCurveTo(33.5 * e, 12.5 * e, 33.5 * e, 12.5 * e, 13 * e, 18 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(24 * e, 62 * e), a.bezierCurveTo(28.5 * e, 53 * e, 28.5 * e, 53 * e, 33 * e, 44 * e), a.bezierCurveTo(41.5 * e, 41 * e, 41.5 * e, 41 * e, 50 * e, 38 * e), a.bezierCurveTo(52.5 * e, 35 * e, 52.5 * e, 35 * e, 55 * e, 32 * e), a.bezierCurveTo(52 * e, 30 * e, 52 * e, 30 * e, 49 * e, 28 * e), a.bezierCurveTo(38 * e, 31.5 * e, 38 * e, 31.5 * e, 27 * e, 35 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 107 * e), a.bezierCurveTo(66 * e, 90.5 * e, 66 * e, 90.5 * e, 96 * e, 74 * e), a.bezierCurveTo(93 * e, 52.5 * e, 93 * e, 52.5 * e, 90 * e, 31 * e), a.bezierCurveTo(87 * e, 48 * e, 87 * e, 48 * e, 84 * e, 65 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(1 * e, 89 * e), a.bezierCurveTo(18 * e, 100 * e, 34 * e, 110 * e, 35 * e, 111 * e), a.bezierCurveTo(67 * e, 93 * e, 67 * e, 93 * e, 99 * e, 75 * e), a.bezierCurveTo(100 * e, 78.5 * e, 100 * e, 78.5 * e, 101 * e, 82 * e), a.bezierCurveTo(68 * e, 99 * e, 68 * e, 99 * e, 35 * e, 116 * e), a.bezierCurveTo(18 * e, 106.5 * e, 18 * e, 106.5 * e, 1 * e, 97 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 107 * e), a.bezierCurveTo(66.5 * e, 91.5 * e, 66.5 * e, 91.5 * e, 97 * e, 76 * e), a.bezierCurveTo(94.5 * e, 52 * e, 94.5 * e, 52 * e, 92 * e, 28 * e), a.bezierCurveTo(73 * e, 15.5 * e, 73 * e, 15.5 * e, 54 * e, 3 * e), a.bezierCurveTo(33 * e, 9.5 * e, 33 * e, 9.5 * e, 12 * e, 16 * e), a.bezierCurveTo(8 * e, 53 * e, 8 * e, 53 * e, 4 * e, 90 * e), a.bezierCurveTo(18.5 * e, 99 * e, 18.5 * e, 99 * e, 33 * e, 108 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(22 * e, 71 * e), a.bezierCurveTo(30 * e, 76.5 * e, 30 * e, 76.5 * e, 38 * e, 82 * e), a.bezierCurveTo(53 * e, 72 * e, 53 * e, 72 * e, 68 * e, 62 * e), a.bezierCurveTo(68 * e, 52 * e, 68 * e, 52 * e, 68 * e, 42 * e), a.bezierCurveTo(59.5 * e, 35.5 * e, 59.5 * e, 35.5 * e, 51 * e, 29 * e), a.bezierCurveTo(39.5 * e, 32 * e, 39.5 * e, 32 * e, 28 * e, 35 * e), a.bezierCurveTo(25 * e, 52 * e, 25 * e, 52 * e, 22 * e, 69 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(5 * e, 89 * e), a.bezierCurveTo(20 * e, 73 * e, 12.5 * e, 80.5 * e, 20 * e, 72 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35 * e, 102 * e), a.bezierCurveTo(36 * e, 92.5 * e, 36 * e, 92.5 * e, 37 * e, 83 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(68 * e, 62 * e), a.bezierCurveTo(81 * e, 67.5 * e, 81 * e, 67.5 * e, 94 * e, 73 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(70 * e, 41 * e), a.bezierCurveTo(80 * e, 35.5 * e, 80 * e, 35.5 * e, 90 * e, 30 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(28 * e, 33 * e), a.bezierCurveTo(21.5 * e, 26.5 * e, 21.5 * e, 26.5 * e, 15 * e, 20 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(51 * e, 28 * e), a.bezierCurveTo(53 * e, 17 * e, 53 * e, 17 * e, 55 * e, 6 * e), a.closePath(), fill_path(a, void 0, i[4], 6 * e), r
}

function create_superhammer(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 105 * e, r.height = 144 * e, a.globalAlpha = t ? .5 : 1, a.translate(-5 * e, 0 * e), a.save(), a.translate(52.5 * e, 91.5 * e), round_rect(a, -4.5 * e, -39 * e, 9 * e, 78 * e, 5 * e), a.restore(), fill_path(a, i[0], i[0], 3 * e), a.save(), a.translate(53 * e, 36 * e), round_rect(a, -29 * e, -17.5 * e, 58 * e, 35 * e, 5 * e), a.restore(), fill_path(a, i[0], i[0], 4 * e), a.save(), a.translate(53.5 * e, 35.5 * e), round_rect(a, -26.5 * e, -15 * e, 53 * e, 30 * e, 5 * e), a.restore(), fill_path(a, i[0], i[0], 4 * e), a.translate(5 * e, 0 * e), a.globalAlpha = 1, a.save(), a.translate(52.5 * e, 91.5 * e), round_rect(a, -4.5 * e, -39 * e, 9 * e, 78 * e, 5 * e), a.restore(), fill_path(a, i[1], i[2], 3 * e), a.save(), a.translate(53 * e, 36 * e), round_rect(a, -29 * e, -17.5 * e, 58 * e, 35 * e, 5 * e), a.restore(), fill_path(a, i[3], i[4], 4 * e), a.save(), a.translate(53.5 * e, 35.5 * e), round_rect(a, -26.5 * e, -15 * e, 53 * e, 30 * e, 5 * e), a.restore(), fill_path(a, i[5], i[6], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(49 * e, 60.5 * e), a.bezierCurveTo(44 * e, 56.5 * e, 44 * e, 56.5 * e, 39 * e, 52.5 * e), a.bezierCurveTo(39 * e, 46.5 * e, 39 * e, 46.5 * e, 39 * e, 40.5 * e), a.bezierCurveTo(44 * e, 44 * e, 44 * e, 44 * e, 49 * e, 47.5 * e), a.bezierCurveTo(49 * e, 54 * e, 49 * e, 54 * e, 49 * e, 60.5 * e), a.closePath(), fill_path(a, i[7], i[6], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(66 * e, 40.5 * e), a.bezierCurveTo(66 * e, 46.5 * e, 66 * e, 46.5 * e, 66 * e, 52.5 * e), a.bezierCurveTo(60.5 * e, 56.5 * e, 60.5 * e, 56.5 * e, 55 * e, 60.5 * e), a.bezierCurveTo(56 * e, 53 * e, 56 * e, 53 * e, 57 * e, 45.5 * e), a.bezierCurveTo(61.5 * e, 43 * e, 61.5 * e, 43 * e, 66 * e, 40.5 * e), a.closePath(), fill_path(a, i[7], i[6], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 33.5 * e), a.bezierCurveTo(55.5 * e, 41 * e, 55.5 * e, 41 * e, 59 * e, 48.5 * e), a.bezierCurveTo(56 * e, 58 * e, 56 * e, 58 * e, 53 * e, 67.5 * e), a.bezierCurveTo(49 * e, 58 * e, 49 * e, 58 * e, 45 * e, 48.5 * e), a.bezierCurveTo(48.5 * e, 41 * e, 48.5 * e, 41 * e, 52 * e, 33.5 * e), a.closePath(), fill_path(a, i[9], i[8], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(52 * e, 47.5 * e), a.bezierCurveTo(54.5 * e, 50.5 * e, 54.5 * e, 50.5 * e, 57 * e, 53.5 * e), a.bezierCurveTo(55 * e, 60 * e, 55 * e, 60 * e, 53 * e, 66.5 * e), a.bezierCurveTo(50.5 * e, 61 * e, 50.5 * e, 61 * e, 48 * e, 55.5 * e), a.bezierCurveTo(50 * e, 52 * e, 50 * e, 52 * e, 52 * e, 48.5 * e), a.closePath(), fill_path(a, i[11], i[10], 3 * e), r
}

function create_dragon_sword(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 46 * e, r.height = 140 * e, a.scale(-1 * e, 1 * e), a.translate(-50 * e, 40 * e), a.translate(-20 * e, 0), a.globalAlpha = t ? .5 : 1, a.translate(10 * e, 0), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(22.599990844726562 * e, 85.94999694824219 * e), a.bezierCurveTo(17.599990844726562 * e, 83.94999694824219 * e, 17.599990844726562 * e, 83.94999694824219 * e, 12.599990844726562 * e, 81.94999694824219 * e), a.bezierCurveTo(19.599990844726562 * e, 73.94999694824219 * e, 2.5999908447265625 * e, 22.949996948242188 * e, 33.59999084472656 * e, 7.9499969482421875 * e), a.bezierCurveTo(27.599990844726562 * e, 28.949996948242188 * e, 33.59999084472656 * e, 26.949996948242188 * e, 35.59999084472656 * e, 32.94999694824219 * e), a.bezierCurveTo(25.599990844726562 * e, 59.94999694824219 * e, 26.599990844726562 * e, 69.94999694824219 * e, 29.599990844726562 * e, 82.94999694824219 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(-1 * e, 0), a.moveTo(17.599990844726562 * e, 89.75 * e), a.bezierCurveTo(24.599990844726562 * e, 99.75 * e, 24.599990844726562 * e, 101.75 * e, 20.599990844726562 * e, 111.75 * e), a.bezierCurveTo(28.599990844726562 * e, 110.75 * e, 26.599990844726562 * e, 112.75 * e, 28.599990844726562 * e, 111.75 * e), a.bezierCurveTo(30.599990844726562 * e, 96.75 * e, 32.59999084472656 * e, 96.75 * e, 30.599990844726562 * e, 87.75 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(1 * e, 0), a.moveTo(7.5999908447265625 * e, 86.34999084472656 * e), a.bezierCurveTo(12.599990844726562 * e, 85.34999084472656 * e, 14.599990844726562 * e, 84.34999084472656 * e, 13.599990844726562 * e, 84.34999084472656 * e), a.bezierCurveTo(21.599990844726562 * e, 83.34999084472656 * e, 21.599990844726562 * e, 83.34999084472656 * e, 29.599990844726562 * e, 82.34999084472656 * e), a.bezierCurveTo(33.59999084472656 * e, 85.84999084472656 * e, 33.59999084472656 * e, 85.84999084472656 * e, 37.59999084472656 * e, 89.34999084472656 * e), a.bezierCurveTo(34.09999084472656 * e, 91.84999084472656 * e, 34.09999084472656 * e, 91.84999084472656 * e, 30.599990844726562 * e, 94.34999084472656 * e), a.bezierCurveTo(21.099990844726562 * e, 93.34999084472656 * e, 21.099990844726562 * e, 93.34999084472656 * e, 11.599990844726562 * e, 92.34999084472656 * e), a.closePath(), fill_path(a, i[0]), a.save(), a.translate(23.599990844726562 * e, 110.94999694824219 * e), a.rotate(0), round_rect(a, -7 * e, -4 * e, 14 * e, 8 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.translate(0 * e, 0), a.globalAlpha = 1, a.translate(10 * e, 0), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(22.599990844726562 * e, 85.94999694824219 * e), a.bezierCurveTo(17.599990844726562 * e, 83.94999694824219 * e, 17.599990844726562 * e, 83.94999694824219 * e, 12.599990844726562 * e, 81.94999694824219 * e), a.bezierCurveTo(19.599990844726562 * e, 73.94999694824219 * e, 2.5999908447265625 * e, 22.949996948242188 * e, 33.59999084472656 * e, 7.9499969482421875 * e), a.bezierCurveTo(27.599990844726562 * e, 28.949996948242188 * e, 33.59999084472656 * e, 26.949996948242188 * e, 35.59999084472656 * e, 32.94999694824219 * e), a.bezierCurveTo(25.599990844726562 * e, 59.94999694824219 * e, 26.599990844726562 * e, 69.94999694824219 * e, 29.599990844726562 * e, 82.94999694824219 * e), a.closePath(), fill_path(a, i[3], i[4], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(-1 * e, 0), a.moveTo(17.599990844726562 * e, 89.75 * e), a.bezierCurveTo(24.599990844726562 * e, 99.75 * e, 24.599990844726562 * e, 101.75 * e, 20.599990844726562 * e, 111.75 * e), a.bezierCurveTo(28.599990844726562 * e, 110.75 * e, 26.599990844726562 * e, 112.75 * e, 28.599990844726562 * e, 111.75 * e), a.bezierCurveTo(30.599990844726562 * e, 96.75 * e, 32.59999084472656 * e, 96.75 * e, 30.599990844726562 * e, 87.75 * e), a.closePath(), fill_path(a, i[1], i[2], 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(1 * e, 0), a.moveTo(7.5999908447265625 * e, 86.34999084472656 * e), a.bezierCurveTo(12.599990844726562 * e, 85.34999084472656 * e, 14.599990844726562 * e, 84.34999084472656 * e, 13.599990844726562 * e, 84.34999084472656 * e), a.bezierCurveTo(21.599990844726562 * e, 83.34999084472656 * e, 21.599990844726562 * e, 83.34999084472656 * e, 29.599990844726562 * e, 82.34999084472656 * e), a.bezierCurveTo(33.59999084472656 * e, 85.84999084472656 * e, 33.59999084472656 * e, 85.84999084472656 * e, 37.59999084472656 * e, 89.34999084472656 * e), a.bezierCurveTo(34.09999084472656 * e, 91.84999084472656 * e, 34.09999084472656 * e, 91.84999084472656 * e, 30.599990844726562 * e, 94.34999084472656 * e), a.bezierCurveTo(21.099990844726562 * e, 93.34999084472656 * e, 21.099990844726562 * e, 93.34999084472656 * e, 11.599990844726562 * e, 92.34999084472656 * e), a.closePath(), fill_path(a, i[1], i[2], 3 * e), a.save(), a.translate(23.599990844726562 * e, 110.94999694824219 * e), a.rotate(0), round_rect(a, -7 * e, -4 * e, 14 * e, 8 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 3 * e), r
}

function create_cursed_sword(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 65 * e, r.height = 131 * e, a.globalAlpha = t ? .5 : 1, a.translate(3, 0), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(21.25 * e, 88.9375 * e), a.bezierCurveTo(19.25 * e, 57.9375 * e, 19.25 * e, 57.9375 * e, 17.25 * e, 26.9375 * e), a.bezierCurveTo(24.25 * e, 20.9375 * e, 24.25 * e, 20.9375 * e, 31.25 * e, 14.9375 * e), a.bezierCurveTo(32.75 * e, 54.4375 * e, 32.75 * e, 54.4375 * e, 34.25 * e, 93.9375 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30.25 * e, 5.9375 * e), a.bezierCurveTo(39.25 * e, 14.9375 * e, 39.25 * e, 14.9375 * e, 48.25 * e, 23.9375 * e), a.bezierCurveTo(44.75 * e, 56.4375 * e, 44.75 * e, 56.4375 * e, 41.25 * e, 88.9375 * e), a.bezierCurveTo(36.25 * e, 88.9375 * e, 36.25 * e, 88.9375 * e, 31.25 * e, 88.9375 * e), a.bezierCurveTo(30.75 * e, 47.9375 * e, 30.75 * e, 47.9375 * e, 30.25 * e, 6.9375 * e), a.closePath(), fill_path(a, i[0], i[0], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(7.25 * e, 85.4375 * e), a.bezierCurveTo(31.75 * e, 85.4375 * e, 31.75 * e, 85.4375 * e, 56.25 * e, 85.4375 * e), a.bezierCurveTo(51.25 * e, 91.9375 * e, 51.25 * e, 91.9375 * e, 46.25 * e, 98.4375 * e), a.bezierCurveTo(30.25 * e, 98.4375 * e, 30.25 * e, 98.4375 * e, 14.25 * e, 98.4375 * e), a.closePath(), fill_path(a, i[0], i[0], 4 * e), a.save(), a.translate(31.25 * e, 108.9375 * e), round_rect(a, -6 * e, -14.5 * e, 12 * e, 29 * e, 10 * e), a.restore(), a.globalAlpha = 1, a.translate(-3, 0), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(21.25 * e, 88.9375 * e), a.bezierCurveTo(19.25 * e, 57.9375 * e, 19.25 * e, 57.9375 * e, 17.25 * e, 26.9375 * e), a.bezierCurveTo(24.25 * e, 20.9375 * e, 24.25 * e, 20.9375 * e, 31.25 * e, 14.9375 * e), a.bezierCurveTo(32.75 * e, 54.4375 * e, 32.75 * e, 54.4375 * e, 34.25 * e, 93.9375 * e), a.closePath(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(30.25 * e, 5.9375 * e), a.bezierCurveTo(39.25 * e, 14.9375 * e, 39.25 * e, 14.9375 * e, 48.25 * e, 23.9375 * e), a.bezierCurveTo(44.75 * e, 56.4375 * e, 44.75 * e, 56.4375 * e, 41.25 * e, 88.9375 * e), a.bezierCurveTo(36.25 * e, 88.9375 * e, 36.25 * e, 88.9375 * e, 31.25 * e, 88.9375 * e), a.bezierCurveTo(30.75 * e, 47.9375 * e, 30.75 * e, 47.9375 * e, 30.25 * e, 6.9375 * e), a.closePath(), fill_path(a, i[2], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(7.25 * e, 85.4375 * e), a.bezierCurveTo(31.75 * e, 85.4375 * e, 31.75 * e, 85.4375 * e, 56.25 * e, 85.4375 * e), a.bezierCurveTo(51.25 * e, 91.9375 * e, 51.25 * e, 91.9375 * e, 46.25 * e, 98.4375 * e), a.bezierCurveTo(30.25 * e, 98.4375 * e, 30.25 * e, 98.4375 * e, 14.25 * e, 98.4375 * e), a.closePath(), fill_path(a, i[4], i[5], 4 * e), a.save(), a.translate(31.25 * e, 108.9375 * e), round_rect(a, -6 * e, -14.5 * e, 12 * e, 29 * e, 10 * e), a.restore(), fill_path(a, i[4], i[5], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(31.25 * e, 73.4375 * e), a.bezierCurveTo(33.25 * e, 77.9375 * e, 33.25 * e, 77.9375 * e, 35.25 * e, 82.4375 * e), a.bezierCurveTo(33.25 * e, 87.4375 * e, 33.25 * e, 87.4375 * e, 31.25 * e, 92.4375 * e), a.bezierCurveTo(29.25 * e, 87.9375 * e, 29.25 * e, 87.9375 * e, 27.25 * e, 83.4375 * e), a.closePath(), fill_path(a, i[3], i[1], 2 * e), r
}

function create_shop(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = 120 * e,
        n = 140 * e;
    i.width = a, i.height = n, i.width = 130 * e, i.height = 120 * e, round_rect(r, 10 * e, 12 * e, 110 * e, 90 * e, 10 * e), fill_path(r, t[0]), round_rect(r, 10 * e, 5 * e, 110 * e, 90 * e, 10 * e), fill_path(r, t[1], t[2], 4 * e);
    var o = create_rotated_img(-Math.PI / 5, create_pickaxe(.5 * e, !0, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    r.drawImage(o, 12 * e, 18 * e);
    o = create_rotated_img(Math.PI / 4, create_hammer(.55 * e, !0, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
    return r.drawImage(o, 36 * e, 16 * e), i
}

function create_blue_orb(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 137 * e, r.height = 129 * e, a.globalAlpha = .5, circle(a, 69 * e, 64 * e, 48.16637831516918 * e), fill_path(a, i[1]), a.globalAlpha = .7, circle(a, 69 * e, 64 * e, 38.23105625617661 * e), fill_path(a, i[2]), a.globalAlpha = .7, circle(a, 69 * e, 64 * e, 32.01562118716424 * e), fill_path(a, i[2], i[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72 * e, 41 * e), a.bezierCurveTo(52 * e, 41 * e, 48 * e, 50 * e, 45 * e, 58 * e), a.bezierCurveTo(43 * e, 67 * e, 45 * e, 68 * e, 46 * e, 72 * e), a.bezierCurveTo(52 * e, 53 * e, 60 * e, 48 * e, 72 * e, 42 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(93 * e, 62 * e), a.bezierCurveTo(95 * e, 72 * e, 90 * e, 81 * e, 81 * e, 87 * e), a.bezierCurveTo(74 * e, 91 * e, 69 * e, 89 * e, 64 * e, 88 * e), a.bezierCurveTo(77 * e, 83 * e, 84 * e, 82 * e, 92 * e, 62 * e), a.closePath(), fill_path(a, i[3]), r
}

function create_dragon_cube(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 137 * e, r.height = 129 * e, a.globalAlpha = .4, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42.000030517578125 * e, 41.17047119140625 * e), a.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e), a.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e), a.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e), a.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e), a.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e), a.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e), a.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e), a.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e), a.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e), a.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e), a.closePath(), fill_path(a, void 0, i[2], 40 * e), a.globalAlpha = .4, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42.000030517578125 * e, 41.17047119140625 * e), a.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e), a.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e), a.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e), a.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e), a.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e), a.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e), a.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e), a.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e), a.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e), a.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e), a.closePath(), fill_path(a, void 0, i[1], 20 * e), a.globalAlpha = .8, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42.000030517578125 * e, 41.17047119140625 * e), a.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e), a.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e), a.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e), a.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e), a.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e), a.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e), a.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e), a.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e), a.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e), a.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e), a.closePath(), fill_path(a, i[0], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(51.000030517578125 * e, 37.9886474609375 * e), a.bezierCurveTo(51.000030517578125 * e, 61.9886474609375 * e, 51.000030517578125 * e, 61.9886474609375 * e, 51.000030517578125 * e, 85.9886474609375 * e), a.bezierCurveTo(75.50003051757812 * e, 85.9886474609375 * e, 75.50003051757812 * e, 85.9886474609375 * e, 100.00003051757812 * e, 85.9886474609375 * e), a.bezierCurveTo(100.00003051757812 * e, 61.9886474609375 * e, 100.00003051757812 * e, 61.9886474609375 * e, 100.00003051757812 * e, 37.9886474609375 * e), a.bezierCurveTo(76.00003051757812 * e, 37.9886474609375 * e, 76.00003051757812 * e, 37.9886474609375 * e, 52.000030517578125 * e, 37.9886474609375 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(99.00003051757812 * e, 38.9886474609375 * e), a.bezierCurveTo(93.50003051757812 * e, 44.9886474609375 * e, 93.50003051757812 * e, 44.9886474609375 * e, 88.00003051757812 * e, 50.9886474609375 * e), a.bezierCurveTo(88.00003051757812 * e, 72.4886474609375 * e, 88.00003051757812 * e, 72.4886474609375 * e, 88.00003051757812 * e, 93.9886474609375 * e), a.bezierCurveTo(94.00003051757812 * e, 90.4886474609375 * e, 94.00003051757812 * e, 90.4886474609375 * e, 100.00003051757812 * e, 86.9886474609375 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87.00003051757812 * e, 49.625 * e), a.bezierCurveTo(61.000030517578125 * e, 49.625 * e, 61.000030517578125 * e, 49.625 * e, 35.000030517578125 * e, 49.625 * e), a.bezierCurveTo(35.000030517578125 * e, 70.625 * e, 35.000030517578125 * e, 70.625 * e, 35.000030517578125 * e, 91.625 * e), a.bezierCurveTo(60.500030517578125 * e, 91.625 * e, 60.500030517578125 * e, 91.625 * e, 86.00003051757812 * e, 91.625 * e), a.bezierCurveTo(86.50003051757812 * e, 70.625 * e, 86.50003051757812 * e, 70.625 * e, 87.00003051757812 * e, 49.625 * e), a.closePath(), fill_path(a, i[1], i[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(47.000030517578125 * e, 36.625 * e), a.bezierCurveTo(73.00003051757812 * e, 37.125 * e, 73.00003051757812 * e, 37.125 * e, 99.00003051757812 * e, 37.625 * e), a.bezierCurveTo(93.50003051757812 * e, 44.125 * e, 93.50003051757812 * e, 44.125 * e, 88.00003051757812 * e, 50.625 * e), a.bezierCurveTo(60.500030517578125 * e, 50.125 * e, 60.500030517578125 * e, 50.125 * e, 33.000030517578125 * e, 49.625 * e), a.closePath(), fill_path(a, i[1], i[3], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(53.000030517578125 * e, 52.625 * e), a.bezierCurveTo(40.000030517578125 * e, 54.625 * e, 39.000030517578125 * e, 59.625 * e, 40.000030517578125 * e, 67.625 * e), a.bezierCurveTo(45.000030517578125 * e, 59.625 * e, 48.000030517578125 * e, 58.625 * e, 54.000030517578125 * e, 53.625 * e), a.closePath(), fill_path(a, i[3]), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42.000030517578125 * e, 41.17047119140625 * e), a.bezierCurveTo(45.000030517578125 * e, 38.17047119140625 * e, 49.000030517578125 * e, 37.17047119140625 * e, 62.000030517578125 * e, 38.17047119140625 * e), a.bezierCurveTo(78.00003051757812 * e, 38.17047119140625 * e, 78.00003051757812 * e, 38.17047119140625 * e, 94.00003051757812 * e, 38.17047119140625 * e), a.bezierCurveTo(100.00003051757812 * e, 38.17047119140625 * e, 102.00003051757812 * e, 38.17047119140625 * e, 101.00003051757812 * e, 47.17047119140625 * e), a.bezierCurveTo(101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 63.67047119140625 * e, 101.00003051757812 * e, 80.17047119140625 * e), a.bezierCurveTo(102.00003051757812 * e, 84.17047119140625 * e, 100.00003051757812 * e, 86.17047119140625 * e, 95.00003051757812 * e, 88.17047119140625 * e), a.bezierCurveTo(84.00003051757812 * e, 94.17047119140625 * e, 89.00003051757812 * e, 94.17047119140625 * e, 79.00003051757812 * e, 94.17047119140625 * e), a.bezierCurveTo(59.500030517578125 * e, 94.17047119140625 * e, 59.500030517578125 * e, 94.17047119140625 * e, 40.000030517578125 * e, 94.17047119140625 * e), a.bezierCurveTo(33.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 94.17047119140625 * e, 34.000030517578125 * e, 86.17047119140625 * e), a.bezierCurveTo(34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 69.67047119140625 * e, 34.000030517578125 * e, 53.17047119140625 * e), a.bezierCurveTo(33.000030517578125 * e, 47.17047119140625 * e, 34.000030517578125 * e, 47.17047119140625 * e, 40.000030517578125 * e, 42.17047119140625 * e), a.closePath(), fill_path(a, void 0, i[3], 4 * e), r
}

function create_lake_edge(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return 0 == i ? (r.width = 543 * e, r.height = 393 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(164.23297119140625 * e, 72.80398559570312 * e), a.bezierCurveTo(289.23297119140625 * e, 41.803985595703125 * e, 413.23297119140625 * e, 86.80398559570312 * e, 441.23297119140625 * e, 105.80398559570312 * e), a.bezierCurveTo(513.2329711914062 * e, 149.80398559570312 * e, 475.23297119140625 * e, 224.80398559570312 * e, 451.23297119140625 * e, 258.8039855957031 * e), a.bezierCurveTo(410.23297119140625 * e, 315.8039855957031 * e, 380.23297119140625 * e, 314.8039855957031 * e, 289.23297119140625 * e, 320.8039855957031 * e), a.bezierCurveTo(160.23297119140625 * e, 329.8039855957031 * e, 102.23297119140625 * e, 312.8039855957031 * e, 72.23297119140625 * e, 258.8039855957031 * e), a.bezierCurveTo(32.23297119140625 * e, 156.80398559570312 * e, 93.23297119140625 * e, 92.80398559570312 * e, 164.23297119140625 * e, 72.80398559570312 * e), a.closePath(), fill_path(a, t[0])) : 1 == i ? (r.width = 543 * e, r.height = 470 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(238.23297119140625 * e, 34.622161865234375 * e), a.bezierCurveTo(423.23297119140625 * e, 21.622161865234375 * e, 474.23297119140625 * e, 96.62216186523438 * e, 499.23297119140625 * e, 167.62216186523438 * e), a.bezierCurveTo(536.2329711914062 * e, 288.6221618652344 * e, 487.23297119140625 * e, 367.6221618652344 * e, 403.23297119140625 * e, 412.6221618652344 * e), a.bezierCurveTo(287.23297119140625 * e, 466.6221618652344 * e, 127.23297119140625 * e, 424.6221618652344 * e, 50.23297119140625 * e, 318.6221618652344 * e), a.bezierCurveTo(-.76702880859375 * e, 239.62216186523438 * e, 30.23297119140625 * e, 110.62216186523438 * e, 73.23297119140625 * e, 77.62216186523438 * e), a.bezierCurveTo(128.23297119140625 * e, 29.622161865234375 * e, 202.23297119140625 * e, 40.622161865234375 * e, 238.23297119140625 * e, 34.622161865234375 * e), a.closePath(), fill_path(a, t[0])) : (r.width = 543 * e, r.height = 470 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(268.23297119140625 * e, 23.349441528320312 * e), a.bezierCurveTo(424.23297119140625 * e, -.6505584716796875 * e, 524.2329711914062 * e, 44.34944152832031 * e, 519.2329711914062 * e, 186.3494415283203 * e), a.bezierCurveTo(515.2329711914062 * e, 341.3494415283203 * e, 431.23297119140625 * e, 409.3494415283203 * e, 357.23297119140625 * e, 442.3494415283203 * e), a.bezierCurveTo(278.23297119140625 * e, 469.3494415283203 * e, 144.23297119140625 * e, 460.3494415283203 * e, 51.23297119140625 * e, 348.3494415283203 * e), a.bezierCurveTo(3.23297119140625 * e, 274.3494415283203 * e, 45.23297119140625 * e, 87.34944152832031 * e, 268.23297119140625 * e, 23.349441528320312 * e), a.closePath(), fill_path(a, t[0])), r
}

function create_lake_deep(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return 0 == i ? (r.width = 543 * e, r.height = 393 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(109.5 * e, 154.046875 * e), a.bezierCurveTo(143.5 * e, 96.046875 * e, 208.5 * e, 92.046875 * e, 288.5 * e, 97.046875 * e), a.bezierCurveTo(357.5 * e, 104.046875 * e, 414.5 * e, 132.046875 * e, 422.5 * e, 166.046875 * e), a.bezierCurveTo(431.5 * e, 192.046875 * e, 400.5 * e, 261.046875 * e, 332.5 * e, 271.046875 * e), a.bezierCurveTo(272.5 * e, 279.046875 * e, 159.5 * e, 285.046875 * e, 126.5 * e, 260.046875 * e), a.bezierCurveTo(99.5 * e, 238.046875 * e, 95.5 * e, 183.046875 * e, 109.5 * e, 154.046875 * e), a.closePath(), fill_path(a, t[0])) : 1 == i ? (r.width = 543 * e, r.height = 470 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(216.23297119140625 * e, 100.34944152832031 * e), a.bezierCurveTo(349.23297119140625 * e, 110.34944152832031 * e, 422.23297119140625 * e, 142.3494415283203 * e, 434.23297119140625 * e, 194.3494415283203 * e), a.bezierCurveTo(451.23297119140625 * e, 268.3494415283203 * e, 397.23297119140625 * e, 367.3494415283203 * e, 313.23297119140625 * e, 351.3494415283203 * e), a.bezierCurveTo(148.23297119140625 * e, 330.3494415283203 * e, 106.23297119140625 * e, 319.3494415283203 * e, 87.23297119140625 * e, 248.3494415283203 * e), a.bezierCurveTo(63.23297119140625 * e, 164.3494415283203 * e, 102.23297119140625 * e, 90.34944152832031 * e, 216.23297119140625 * e, 100.34944152832031 * e), a.closePath(), fill_path(a, t[0])) : (r.width = 543 * e, r.height = 470 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(155.23297119140625 * e, 126.71307373046875 * e), a.bezierCurveTo(232.23297119140625 * e, 76.71307373046875 * e, 340.23297119140625 * e, 67.71307373046875 * e, 411.23297119140625 * e, 106.71307373046875 * e), a.bezierCurveTo(458.23297119140625 * e, 131.71307373046875 * e, 465.23297119140625 * e, 280.71307373046875 * e, 353.23297119140625 * e, 363.71307373046875 * e), a.bezierCurveTo(299.23297119140625 * e, 404.71307373046875 * e, 143.23297119140625 * e, 415.71307373046875 * e, 88.23297119140625 * e, 327.71307373046875 * e), a.bezierCurveTo(48.23297119140625 * e, 256.71307373046875 * e, 93.23297119140625 * e, 171.71307373046875 * e, 155.23297119140625 * e, 126.71307373046875 * e), a.closePath(), fill_path(a, t[0])), r
}

function create_lake(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return 0 == i ? (r.width = 543 * e, r.height = 393 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(196.23297119140625 * e, 77.8948974609375 * e), a.bezierCurveTo(276.23297119140625 * e, 69.8948974609375 * e, 360.23297119140625 * e, 87.8948974609375 * e, 431.23297119140625 * e, 121.8948974609375 * e), a.bezierCurveTo(474.23297119140625 * e, 146.8948974609375 * e, 463.23297119140625 * e, 184.8948974609375 * e, 437.23297119140625 * e, 235.8948974609375 * e), a.bezierCurveTo(413.23297119140625 * e, 277.8948974609375 * e, 383.23297119140625 * e, 289.8948974609375 * e, 303.23297119140625 * e, 289.8948974609375 * e), a.bezierCurveTo(178.23297119140625 * e, 292.8948974609375 * e, 127.23297119140625 * e, 301.8948974609375 * e, 92.23297119140625 * e, 268.8948974609375 * e), a.bezierCurveTo(55.23297119140625 * e, 234.8948974609375 * e, 59.23297119140625 * e, 147.8948974609375 * e, 100.23297119140625 * e, 112.8948974609375 * e), a.bezierCurveTo(133.23297119140625 * e, 83.8948974609375 * e, 167.23297119140625 * e, 82.8948974609375 * e, 196.23297119140625 * e, 77.8948974609375 * e), a.closePath(), fill_path(a, t[0])) : 1 == i ? (r.width = 543 * e, r.height = 470 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(285.23297119140625 * e, 51.803985595703125 * e), a.bezierCurveTo(408.23297119140625 * e, 57.803985595703125 * e, 463.23297119140625 * e, 107.80398559570312 * e, 480.23297119140625 * e, 183.80398559570312 * e), a.bezierCurveTo(500.23297119140625 * e, 282.8039855957031 * e, 473.23297119140625 * e, 351.8039855957031 * e, 373.23297119140625 * e, 390.8039855957031 * e), a.bezierCurveTo(286.23297119140625 * e, 420.8039855957031 * e, 173.23297119140625 * e, 396.8039855957031 * e, 86.23297119140625 * e, 331.8039855957031 * e), a.bezierCurveTo(13.23297119140625 * e, 267.8039855957031 * e, 19.23297119140625 * e, 79.80398559570312 * e, 143.23297119140625 * e, 50.803985595703125 * e), a.bezierCurveTo(175.23297119140625 * e, 41.803985595703125 * e, 263.23297119140625 * e, 51.803985595703125 * e, 285.23297119140625 * e, 51.803985595703125 * e), a.closePath(), fill_path(a, t[0])) : (r.width = 543 * e, r.height = 470 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(492.23297119140625 * e, 170.0767059326172 * e), a.bezierCurveTo(493.23297119140625 * e, 300.16761779785156 * e, 411.23297119140625 * e, 382.16761779785156 * e, 321.23297119140625 * e, 419.16761779785156 * e), a.bezierCurveTo(251.23297119140625 * e, 444.16761779785156 * e, 125.23297119140625 * e, 422.16761779785156 * e, 63.23297119140625 * e, 347.16761779785156 * e), a.bezierCurveTo(22.23297119140625 * e, 282.16761779785156 * e, 53.23297119140625 * e, 152.16761779785156 * e, 179.23297119140625 * e, 79.16761779785156 * e), a.bezierCurveTo(237.23297119140625 * e, 46.16761779785156 * e, 326.23297119140625 * e, 27.167617797851562 * e, 409.23297119140625 * e, 50.16761779785156 * e), a.bezierCurveTo(470.23297119140625 * e, 66.16761779785156 * e, 493.23297119140625 * e, 104.16761779785156 * e, 492.23297119140625 * e, 170.0767059326172 * e), a.closePath(), fill_path(a, t[0])), r
}

function create_shingle(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return 0 == i ? (r.width = 543 * e, r.height = 393 * e, a.translate(40 * e, 60 * e), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(176 * e, 10.25 * e), a.bezierCurveTo(188 * e, 16.25 * e, 187 * e, 25.25 * e, 183 * e, 26.25 * e), a.bezierCurveTo(177 * e, 26.25 * e, 175 * e, 21.25 * e, 173 * e, 19.25 * e), a.bezierCurveTo(170 * e, 14.25 * e, 170 * e, 10.25 * e, 176 * e, 10.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(176 * e, 10.25 * e), a.bezierCurveTo(188 * e, 16.25 * e, 187 * e, 25.25 * e, 183 * e, 26.25 * e), a.bezierCurveTo(177 * e, 26.25 * e, 175 * e, 21.25 * e, 173 * e, 19.25 * e), a.bezierCurveTo(170 * e, 14.25 * e, 170 * e, 10.25 * e, 176 * e, 10.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(274 * e, 8 * e), a.bezierCurveTo(276 * e, 12 * e, 271 * e, 23 * e, 266 * e, 20 * e), a.bezierCurveTo(264 * e, 19 * e, 262 * e, 15 * e, 267 * e, 9 * e), a.bezierCurveTo(271 * e, 5 * e, 274 * e, 5 * e, 274 * e, 8 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(274 * e, 8 * e), a.bezierCurveTo(276 * e, 12 * e, 271 * e, 23 * e, 266 * e, 20 * e), a.bezierCurveTo(264 * e, 19 * e, 262 * e, 15 * e, 267 * e, 9 * e), a.bezierCurveTo(271 * e, 5 * e, 274 * e, 5 * e, 274 * e, 8 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(282 * e, 23.25 * e), a.bezierCurveTo(275 * e, 25.25 * e, 272 * e, 29.25 * e, 274 * e, 36.25 * e), a.bezierCurveTo(277 * e, 40.25 * e, 280 * e, 37.25 * e, 283 * e, 32.25 * e), a.bezierCurveTo(286 * e, 26.25 * e, 286 * e, 25.25 * e, 282 * e, 23.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(282 * e, 23.25 * e), a.bezierCurveTo(275 * e, 25.25 * e, 272 * e, 29.25 * e, 274 * e, 36.25 * e), a.bezierCurveTo(277 * e, 40.25 * e, 280 * e, 37.25 * e, 283 * e, 32.25 * e), a.bezierCurveTo(286 * e, 26.25 * e, 286 * e, 25.25 * e, 282 * e, 23.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(343.75 * e, 18.25 * e), a.bezierCurveTo(346.75 * e, 27.25 * e, 346.75 * e, 32.25 * e, 339.75 * e, 31.25 * e), a.bezierCurveTo(336.75 * e, 29.25 * e, 335.75 * e, 27.25 * e, 336.75 * e, 22.25 * e), a.bezierCurveTo(336.75 * e, 16.25 * e, 338.75 * e, 15.25 * e, 343.75 * e, 18.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(343.75 * e, 18.25 * e), a.bezierCurveTo(346.75 * e, 27.25 * e, 346.75 * e, 32.25 * e, 339.75 * e, 31.25 * e), a.bezierCurveTo(336.75 * e, 29.25 * e, 335.75 * e, 27.25 * e, 336.75 * e, 22.25 * e), a.bezierCurveTo(336.75 * e, 16.25 * e, 338.75 * e, 15.25 * e, 343.75 * e, 18.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(364.75 * e, 22.25 * e), a.bezierCurveTo(368.75 * e, 27.25 * e, 362.75 * e, 36.25 * e, 356.75 * e, 39.25 * e), a.bezierCurveTo(346.75 * e, 43.25 * e, 346.75 * e, 34.25 * e, 348.75 * e, 31.25 * e), a.bezierCurveTo(352.75 * e, 23.25 * e, 360.75 * e, 20.25 * e, 363.75 * e, 22.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(364.75 * e, 22.25 * e), a.bezierCurveTo(368.75 * e, 27.25 * e, 362.75 * e, 36.25 * e, 356.75 * e, 39.25 * e), a.bezierCurveTo(346.75 * e, 43.25 * e, 346.75 * e, 34.25 * e, 348.75 * e, 31.25 * e), a.bezierCurveTo(352.75 * e, 23.25 * e, 360.75 * e, 20.25 * e, 363.75 * e, 22.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(350.75 * e, 52.25 * e), a.bezierCurveTo(352.75 * e, 45.25 * e, 360.75 * e, 43.25 * e, 368.75 * e, 52.25 * e), a.bezierCurveTo(369.75 * e, 58.25 * e, 366.75 * e, 59.25 * e, 357.75 * e, 57.25 * e), a.bezierCurveTo(350.75 * e, 56.25 * e, 352.75 * e, 55.25 * e, 350.75 * e, 52.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(350.75 * e, 52.25 * e), a.bezierCurveTo(352.75 * e, 45.25 * e, 360.75 * e, 43.25 * e, 368.75 * e, 52.25 * e), a.bezierCurveTo(369.75 * e, 58.25 * e, 366.75 * e, 59.25 * e, 357.75 * e, 57.25 * e), a.bezierCurveTo(350.75 * e, 56.25 * e, 352.75 * e, 55.25 * e, 350.75 * e, 52.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(421.75 * e, 81.25 * e), a.bezierCurveTo(432.75 * e, 85.25 * e, 431.75 * e, 89.25 * e, 426.75 * e, 93.25 * e), a.bezierCurveTo(418.75 * e, 95.25 * e, 414.75 * e, 93.25 * e, 412.75 * e, 89.25 * e), a.bezierCurveTo(411.75 * e, 84.25 * e, 413.75 * e, 81.25 * e, 421.75 * e, 81.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(421.75 * e, 81.25 * e), a.bezierCurveTo(432.75 * e, 85.25 * e, 431.75 * e, 89.25 * e, 426.75 * e, 93.25 * e), a.bezierCurveTo(418.75 * e, 95.25 * e, 414.75 * e, 93.25 * e, 412.75 * e, 89.25 * e), a.bezierCurveTo(411.75 * e, 84.25 * e, 413.75 * e, 81.25 * e, 421.75 * e, 81.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(432.75 * e, 105.25 * e), a.bezierCurveTo(430.75 * e, 115.25 * e, 411.75 * e, 130.25 * e, 408.75 * e, 117.25 * e), a.bezierCurveTo(407.75 * e, 106.25 * e, 414.75 * e, 103.25 * e, 421.75 * e, 101.25 * e), a.bezierCurveTo(430.75 * e, 100.25 * e, 432.75 * e, 101.25 * e, 432.75 * e, 105.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(432.75 * e, 105.25 * e), a.bezierCurveTo(430.75 * e, 115.25 * e, 411.75 * e, 130.25 * e, 408.75 * e, 117.25 * e), a.bezierCurveTo(407.75 * e, 106.25 * e, 414.75 * e, 103.25 * e, 421.75 * e, 101.25 * e), a.bezierCurveTo(430.75 * e, 100.25 * e, 432.75 * e, 101.25 * e, 432.75 * e, 105.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(422.75 * e, 153.25 * e), a.bezierCurveTo(437.75 * e, 155.25 * e, 442.75 * e, 158.25 * e, 436.75 * e, 165.25 * e), a.bezierCurveTo(431.75 * e, 170.25 * e, 424.75 * e, 167.25 * e, 419.75 * e, 163.25 * e), a.bezierCurveTo(413.75 * e, 157.25 * e, 415.75 * e, 153.25 * e, 422.75 * e, 153.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(422.75 * e, 153.25 * e), a.bezierCurveTo(437.75 * e, 155.25 * e, 442.75 * e, 158.25 * e, 436.75 * e, 165.25 * e), a.bezierCurveTo(431.75 * e, 170.25 * e, 424.75 * e, 167.25 * e, 419.75 * e, 163.25 * e), a.bezierCurveTo(413.75 * e, 157.25 * e, 415.75 * e, 153.25 * e, 422.75 * e, 153.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(409.75 * e, 158.25 * e), a.bezierCurveTo(409.75 * e, 168.25 * e, 401.75 * e, 172.25 * e, 397.75 * e, 167.25 * e), a.bezierCurveTo(394.75 * e, 159.25 * e, 407.75 * e, 150.25 * e, 408.75 * e, 158.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(409.75 * e, 158.25 * e), a.bezierCurveTo(409.75 * e, 168.25 * e, 401.75 * e, 172.25 * e, 397.75 * e, 167.25 * e), a.bezierCurveTo(394.75 * e, 159.25 * e, 407.75 * e, 150.25 * e, 408.75 * e, 158.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(204 * e, 238.25 * e), a.bezierCurveTo(204 * e, 248.25 * e, 184 * e, 255.25 * e, 180 * e, 247.25 * e), a.bezierCurveTo(177 * e, 241.25 * e, 187 * e, 236.25 * e, 192 * e, 235.25 * e), a.bezierCurveTo(201 * e, 233.25 * e, 204 * e, 233.25 * e, 204 * e, 238.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(204 * e, 238.25 * e), a.bezierCurveTo(204 * e, 248.25 * e, 184 * e, 255.25 * e, 180 * e, 247.25 * e), a.bezierCurveTo(177 * e, 241.25 * e, 187 * e, 236.25 * e, 192 * e, 235.25 * e), a.bezierCurveTo(201 * e, 233.25 * e, 204 * e, 233.25 * e, 204 * e, 238.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(208 * e, 246.25 * e), a.bezierCurveTo(202 * e, 255.25 * e, 204 * e, 258.25 * e, 212 * e, 255.25 * e), a.bezierCurveTo(217 * e, 250.25 * e, 217 * e, 248.25 * e, 216 * e, 244.25 * e), a.bezierCurveTo(210 * e, 241.25 * e, 209 * e, 245.25 * e, 208 * e, 246.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(208 * e, 246.25 * e), a.bezierCurveTo(202 * e, 255.25 * e, 204 * e, 258.25 * e, 212 * e, 255.25 * e), a.bezierCurveTo(217 * e, 250.25 * e, 217 * e, 248.25 * e, 216 * e, 244.25 * e), a.bezierCurveTo(210 * e, 241.25 * e, 209 * e, 245.25 * e, 208 * e, 246.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(197 * e, 258.25 * e), a.bezierCurveTo(194 * e, 265.25 * e, 186 * e, 270.25 * e, 185 * e, 262.25 * e), a.bezierCurveTo(187 * e, 255.25 * e, 191 * e, 252.25 * e, 195 * e, 253.25 * e), a.bezierCurveTo(198 * e, 256.25 * e, 197 * e, 257.25 * e, 197 * e, 258.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(197 * e, 258.25 * e), a.bezierCurveTo(194 * e, 265.25 * e, 186 * e, 270.25 * e, 185 * e, 262.25 * e), a.bezierCurveTo(187 * e, 255.25 * e, 191 * e, 252.25 * e, 195 * e, 253.25 * e), a.bezierCurveTo(198 * e, 256.25 * e, 197 * e, 257.25 * e, 197 * e, 258.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(24 * e, 111.25 * e), a.bezierCurveTo(32 * e, 115.25 * e, 29 * e, 123.25 * e, 22 * e, 133.25 * e), a.bezierCurveTo(15 * e, 140.25 * e, 7 * e, 137.25 * e, 9 * e, 125.25 * e), a.bezierCurveTo(12 * e, 114.25 * e, 20 * e, 110.25 * e, 24 * e, 111.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(24 * e, 111.25 * e), a.bezierCurveTo(32 * e, 115.25 * e, 29 * e, 123.25 * e, 22 * e, 133.25 * e), a.bezierCurveTo(15 * e, 140.25 * e, 7 * e, 137.25 * e, 9 * e, 125.25 * e), a.bezierCurveTo(12 * e, 114.25 * e, 20 * e, 110.25 * e, 24 * e, 111.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(33 * e, 137.25 * e), a.bezierCurveTo(41 * e, 142.25 * e, 40 * e, 145.25 * e, 35 * e, 147.25 * e), a.bezierCurveTo(22 * e, 147.25 * e, 18 * e, 144.25 * e, 22 * e, 138.25 * e), a.bezierCurveTo(26 * e, 133.25 * e, 31 * e, 136.25 * e, 33 * e, 137.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(33 * e, 137.25 * e), a.bezierCurveTo(41 * e, 142.25 * e, 40 * e, 145.25 * e, 35 * e, 147.25 * e), a.bezierCurveTo(22 * e, 147.25 * e, 18 * e, 144.25 * e, 22 * e, 138.25 * e), a.bezierCurveTo(26 * e, 133.25 * e, 31 * e, 136.25 * e, 33 * e, 137.25 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 187.25 * e), a.bezierCurveTo(25 * e, 198.25 * e, 19 * e, 193.25 * e, 23 * e, 187.25 * e), a.bezierCurveTo(26 * e, 178.25 * e, 32 * e, 173.25 * e, 38 * e, 175.25 * e), a.bezierCurveTo(44 * e, 180.25 * e, 39 * e, 186.25 * e, 36 * e, 187.25 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36 * e, 187.25 * e), a.bezierCurveTo(25 * e, 198.25 * e, 19 * e, 193.25 * e, 23 * e, 187.25 * e), a.bezierCurveTo(26 * e, 178.25 * e, 32 * e, 173.25 * e, 38 * e, 175.25 * e), a.bezierCurveTo(44 * e, 180.25 * e, 39 * e, 186.25 * e, 36 * e, 187.25 * e), a.closePath(), fill_path(a, t[1])) : 1 == i ? (r.width = 543 * e, r.height = 470 * e, a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(377.1428527832031 * e, 56.87498474121094 * e), a.bezierCurveTo(384.1428527832031 * e, 44.87498474121094 * e, 403.1428527832031 * e, 39.87498474121094 * e, 403.1428527832031 * e, 51.87498474121094 * e), a.bezierCurveTo(402.1428527832031 * e, 59.87498474121094 * e, 396.1428527832031 * e, 61.87498474121094 * e, 389.1428527832031 * e, 64.87498474121094 * e), a.bezierCurveTo(376.1428527832031 * e, 67.87498474121094 * e, 375.1428527832031 * e, 62.87498474121094 * e, 377.1428527832031 * e, 56.87498474121094 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(377.1428527832031 * e, 56.87498474121094 * e), a.bezierCurveTo(384.1428527832031 * e, 44.87498474121094 * e, 403.1428527832031 * e, 39.87498474121094 * e, 403.1428527832031 * e, 51.87498474121094 * e), a.bezierCurveTo(402.1428527832031 * e, 59.87498474121094 * e, 396.1428527832031 * e, 61.87498474121094 * e, 389.1428527832031 * e, 64.87498474121094 * e), a.bezierCurveTo(376.1428527832031 * e, 67.87498474121094 * e, 375.1428527832031 * e, 62.87498474121094 * e, 377.1428527832031 * e, 56.87498474121094 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(349.1428527832031 * e, 44.303558349609375 * e), a.bezierCurveTo(358.1428527832031 * e, 37.303558349609375 * e, 370.1428527832031 * e, 47.303558349609375 * e, 364.1428527832031 * e, 51.303558349609375 * e), a.bezierCurveTo(356.1428527832031 * e, 55.303558349609375 * e, 345.1428527832031 * e, 48.303558349609375 * e, 349.1428527832031 * e, 45.303558349609375 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(349.1428527832031 * e, 44.303558349609375 * e), a.bezierCurveTo(358.1428527832031 * e, 37.303558349609375 * e, 370.1428527832031 * e, 47.303558349609375 * e, 364.1428527832031 * e, 51.303558349609375 * e), a.bezierCurveTo(356.1428527832031 * e, 55.303558349609375 * e, 345.1428527832031 * e, 48.303558349609375 * e, 349.1428527832031 * e, 45.303558349609375 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(480.1428527832031 * e, 152.30355834960938 * e), a.bezierCurveTo(477.1428527832031 * e, 145.30355834960938 * e, 480.1428527832031 * e, 140.30355834960938 * e, 489.1428527832031 * e, 135.30355834960938 * e), a.bezierCurveTo(497.1428527832031 * e, 133.30355834960938 * e, 498.1428527832031 * e, 140.30355834960938 * e, 491.1428527832031 * e, 147.30355834960938 * e), a.bezierCurveTo(485.1428527832031 * e, 155.30355834960938 * e, 482.1428527832031 * e, 156.30355834960938 * e, 480.1428527832031 * e, 152.30355834960938 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(480.1428527832031 * e, 152.30355834960938 * e), a.bezierCurveTo(477.1428527832031 * e, 145.30355834960938 * e, 480.1428527832031 * e, 140.30355834960938 * e, 489.1428527832031 * e, 135.30355834960938 * e), a.bezierCurveTo(497.1428527832031 * e, 133.30355834960938 * e, 498.1428527832031 * e, 140.30355834960938 * e, 491.1428527832031 * e, 147.30355834960938 * e), a.bezierCurveTo(485.1428527832031 * e, 155.30355834960938 * e, 482.1428527832031 * e, 156.30355834960938 * e, 480.1428527832031 * e, 152.30355834960938 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(211.14285278320312 * e, 27.303558349609375 * e), a.bezierCurveTo(223.14285278320312 * e, 21.303558349609375 * e, 234.14285278320312 * e, 34.303558349609375 * e, 232.14285278320312 * e, 42.303558349609375 * e), a.bezierCurveTo(228.14285278320312 * e, 49.303558349609375 * e, 223.14285278320312 * e, 45.303558349609375 * e, 213.14285278320312 * e, 38.303558349609375 * e), a.bezierCurveTo(205.14285278320312 * e, 31.303558349609375 * e, 208.14285278320312 * e, 29.303558349609375 * e, 211.14285278320312 * e, 27.303558349609375 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(211.14285278320312 * e, 27.303558349609375 * e), a.bezierCurveTo(223.14285278320312 * e, 21.303558349609375 * e, 234.14285278320312 * e, 34.303558349609375 * e, 232.14285278320312 * e, 42.303558349609375 * e), a.bezierCurveTo(228.14285278320312 * e, 49.303558349609375 * e, 223.14285278320312 * e, 45.303558349609375 * e, 213.14285278320312 * e, 38.303558349609375 * e), a.bezierCurveTo(205.14285278320312 * e, 31.303558349609375 * e, 208.14285278320312 * e, 29.303558349609375 * e, 211.14285278320312 * e, 27.303558349609375 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(364.1428527832031 * e, 73.30355834960938 * e), a.bezierCurveTo(354.1428527832031 * e, 72.30355834960938 * e, 356.1428527832031 * e, 64.30355834960938 * e, 359.1428527832031 * e, 59.303558349609375 * e), a.bezierCurveTo(365.1428527832031 * e, 55.303558349609375 * e, 366.1428527832031 * e, 61.303558349609375 * e, 366.1428527832031 * e, 69.30355834960938 * e), a.bezierCurveTo(365.1428527832031 * e, 73.30355834960938 * e, 365.1428527832031 * e, 73.30355834960938 * e, 364.1428527832031 * e, 73.30355834960938 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(364.1428527832031 * e, 73.30355834960938 * e), a.bezierCurveTo(354.1428527832031 * e, 72.30355834960938 * e, 356.1428527832031 * e, 64.30355834960938 * e, 359.1428527832031 * e, 59.303558349609375 * e), a.bezierCurveTo(365.1428527832031 * e, 55.303558349609375 * e, 366.1428527832031 * e, 61.303558349609375 * e, 366.1428527832031 * e, 69.30355834960938 * e), a.bezierCurveTo(365.1428527832031 * e, 73.30355834960938 * e, 365.1428527832031 * e, 73.30355834960938 * e, 364.1428527832031 * e, 73.30355834960938 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(182.14285278320312 * e, 57.303558349609375 * e), a.bezierCurveTo(173.14285278320312 * e, 52.303558349609375 * e, 177.14285278320312 * e, 39.303558349609375 * e, 198.14285278320312 * e, 36.303558349609375 * e), a.bezierCurveTo(209.14285278320312 * e, 37.303558349609375 * e, 206.14285278320312 * e, 49.303558349609375 * e, 193.14285278320312 * e, 53.303558349609375 * e), a.bezierCurveTo(187.14285278320312 * e, 56.303558349609375 * e, 185.14285278320312 * e, 57.303558349609375 * e, 182.14285278320312 * e, 57.303558349609375 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(182.14285278320312 * e, 57.303558349609375 * e), a.bezierCurveTo(173.14285278320312 * e, 52.303558349609375 * e, 177.14285278320312 * e, 39.303558349609375 * e, 198.14285278320312 * e, 36.303558349609375 * e), a.bezierCurveTo(209.14285278320312 * e, 37.303558349609375 * e, 206.14285278320312 * e, 49.303558349609375 * e, 193.14285278320312 * e, 53.303558349609375 * e), a.bezierCurveTo(187.14285278320312 * e, 56.303558349609375 * e, 185.14285278320312 * e, 57.303558349609375 * e, 182.14285278320312 * e, 57.303558349609375 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(489.1428527832031 * e, 267.0178527832031 * e), a.bezierCurveTo(500.1428527832031 * e, 257.0178527832031 * e, 511.1428527832031 * e, 269.0178527832031 * e, 514.1428527832031 * e, 275.0178527832031 * e), a.bezierCurveTo(519.1428527832031 * e, 285.0178527832031 * e, 509.1428527832031 * e, 288.0178527832031 * e, 501.1428527832031 * e, 282.0178527832031 * e), a.bezierCurveTo(488.1428527832031 * e, 277.0178527832031 * e, 485.1428527832031 * e, 271.0178527832031 * e, 489.1428527832031 * e, 267.0178527832031 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(489.1428527832031 * e, 267.0178527832031 * e), a.bezierCurveTo(500.1428527832031 * e, 257.0178527832031 * e, 511.1428527832031 * e, 269.0178527832031 * e, 514.1428527832031 * e, 275.0178527832031 * e), a.bezierCurveTo(519.1428527832031 * e, 285.0178527832031 * e, 509.1428527832031 * e, 288.0178527832031 * e, 501.1428527832031 * e, 282.0178527832031 * e), a.bezierCurveTo(488.1428527832031 * e, 277.0178527832031 * e, 485.1428527832031 * e, 271.0178527832031 * e, 489.1428527832031 * e, 267.0178527832031 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(480.1428527832031 * e, 122.73213958740234 * e), a.bezierCurveTo(469.1428527832031 * e, 119.73213958740234 * e, 473.1428527832031 * e, 108.73213958740234 * e, 476.1428527832031 * e, 107.73213958740234 * e), a.bezierCurveTo(483.1428527832031 * e, 102.73213958740234 * e, 485.1428527832031 * e, 118.73213958740234 * e, 480.1428527832031 * e, 122.73213958740234 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(480.1428527832031 * e, 122.73213958740234 * e), a.bezierCurveTo(469.1428527832031 * e, 119.73213958740234 * e, 473.1428527832031 * e, 108.73213958740234 * e, 476.1428527832031 * e, 107.73213958740234 * e), a.bezierCurveTo(483.1428527832031 * e, 102.73213958740234 * e, 485.1428527832031 * e, 118.73213958740234 * e, 480.1428527832031 * e, 122.73213958740234 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(470.1428527832031 * e, 286.3035697937012 * e), a.bezierCurveTo(472.1428527832031 * e, 277.3035697937012 * e, 480.1428527832031 * e, 277.3035697937012 * e, 489.1428527832031 * e, 286.3035697937012 * e), a.bezierCurveTo(490.1428527832031 * e, 292.3035697937012 * e, 482.1428527832031 * e, 294.3035697937012 * e, 470.1428527832031 * e, 286.3035697937012 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(470.1428527832031 * e, 286.3035697937012 * e), a.bezierCurveTo(472.1428527832031 * e, 277.3035697937012 * e, 480.1428527832031 * e, 277.3035697937012 * e, 489.1428527832031 * e, 286.3035697937012 * e), a.bezierCurveTo(490.1428527832031 * e, 292.3035697937012 * e, 482.1428527832031 * e, 294.3035697937012 * e, 470.1428527832031 * e, 286.3035697937012 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(518.1428527832031 * e, 265.0178565979004 * e), a.bezierCurveTo(524.1428527832031 * e, 262.0178565979004 * e, 521.1428527832031 * e, 247.0178565979004 * e, 514.1428527832031 * e, 250.0178565979004 * e), a.bezierCurveTo(510.1428527832031 * e, 252.0178565979004 * e, 509.1428527832031 * e, 266.0178565979004 * e, 518.1428527832031 * e, 266.0178565979004 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(518.1428527832031 * e, 265.0178565979004 * e), a.bezierCurveTo(524.1428527832031 * e, 262.0178565979004 * e, 521.1428527832031 * e, 247.0178565979004 * e, 514.1428527832031 * e, 250.0178565979004 * e), a.bezierCurveTo(510.1428527832031 * e, 252.0178565979004 * e, 509.1428527832031 * e, 266.0178565979004 * e, 518.1428527832031 * e, 266.0178565979004 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(179.14285278320312 * e, 399.5892858505249 * e), a.bezierCurveTo(174.14285278320312 * e, 385.5892858505249 * e, 186.14285278320312 * e, 379.5892858505249 * e, 198.14285278320312 * e, 379.5892858505249 * e), a.bezierCurveTo(208.14285278320312 * e, 379.5892858505249 * e, 206.14285278320312 * e, 391.5892858505249 * e, 194.14285278320312 * e, 396.5892858505249 * e), a.bezierCurveTo(184.14285278320312 * e, 401.5892858505249 * e, 182.14285278320312 * e, 402.5892858505249 * e, 179.14285278320312 * e, 399.5892858505249 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(179.14285278320312 * e, 399.5892858505249 * e), a.bezierCurveTo(174.14285278320312 * e, 385.5892858505249 * e, 186.14285278320312 * e, 379.5892858505249 * e, 198.14285278320312 * e, 379.5892858505249 * e), a.bezierCurveTo(208.14285278320312 * e, 379.5892858505249 * e, 206.14285278320312 * e, 391.5892858505249 * e, 194.14285278320312 * e, 396.5892858505249 * e), a.bezierCurveTo(184.14285278320312 * e, 401.5892858505249 * e, 182.14285278320312 * e, 402.5892858505249 * e, 179.14285278320312 * e, 399.5892858505249 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(163.14285278320312 * e, 407.875 * e), a.bezierCurveTo(152.14285278320312 * e, 405.875 * e, 156.14285278320312 * e, 391.875 * e, 163.14285278320312 * e, 385.875 * e), a.bezierCurveTo(170.14285278320312 * e, 381.875 * e, 173.14285278320312 * e, 385.875 * e, 170.14285278320312 * e, 398.875 * e), a.bezierCurveTo(169.14285278320312 * e, 403.875 * e, 165.14285278320312 * e, 408.875 * e, 164.14285278320312 * e, 407.875 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(163.14285278320312 * e, 407.875 * e), a.bezierCurveTo(152.14285278320312 * e, 405.875 * e, 156.14285278320312 * e, 391.875 * e, 163.14285278320312 * e, 385.875 * e), a.bezierCurveTo(170.14285278320312 * e, 381.875 * e, 173.14285278320312 * e, 385.875 * e, 170.14285278320312 * e, 398.875 * e), a.bezierCurveTo(169.14285278320312 * e, 403.875 * e, 165.14285278320312 * e, 408.875 * e, 164.14285278320312 * e, 407.875 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(78.14285278320312 * e, 71.73211669921875 * e), a.bezierCurveTo(82.14285278320312 * e, 62.73211669921875 * e, 88.14285278320312 * e, 69.73211669921875 * e, 91.14285278320312 * e, 79.73211669921875 * e), a.bezierCurveTo(90.14285278320312 * e, 86.73211669921875 * e, 79.14285278320312 * e, 83.73211669921875 * e, 78.14285278320312 * e, 71.73211669921875 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(78.14285278320312 * e, 71.73211669921875 * e), a.bezierCurveTo(82.14285278320312 * e, 62.73211669921875 * e, 88.14285278320312 * e, 69.73211669921875 * e, 91.14285278320312 * e, 79.73211669921875 * e), a.bezierCurveTo(90.14285278320312 * e, 86.73211669921875 * e, 79.14285278320312 * e, 83.73211669921875 * e, 78.14285278320312 * e, 71.73211669921875 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(385.1428527832031 * e, 405.017858505249 * e), a.bezierCurveTo(392.1428527832031 * e, 397.017858505249 * e, 406.1428527832031 * e, 401.017858505249 * e, 409.1428527832031 * e, 418.017858505249 * e), a.bezierCurveTo(410.1428527832031 * e, 426.017858505249 * e, 401.1428527832031 * e, 425.017858505249 * e, 388.1428527832031 * e, 418.017858505249 * e), a.bezierCurveTo(381.1428527832031 * e, 411.017858505249 * e, 383.1428527832031 * e, 407.017858505249 * e, 385.1428527832031 * e, 405.017858505249 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(385.1428527832031 * e, 405.017858505249 * e), a.bezierCurveTo(392.1428527832031 * e, 397.017858505249 * e, 406.1428527832031 * e, 401.017858505249 * e, 409.1428527832031 * e, 418.017858505249 * e), a.bezierCurveTo(410.1428527832031 * e, 426.017858505249 * e, 401.1428527832031 * e, 425.017858505249 * e, 388.1428527832031 * e, 418.017858505249 * e), a.bezierCurveTo(381.1428527832031 * e, 411.017858505249 * e, 383.1428527832031 * e, 407.017858505249 * e, 385.1428527832031 * e, 405.017858505249 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(414.1428527832031 * e, 361.4464282989502 * e), a.bezierCurveTo(418.1428527832031 * e, 352.4464282989502 * e, 426.1428527832031 * e, 353.4464282989502 * e, 437.1428527832031 * e, 362.4464282989502 * e), a.bezierCurveTo(441.1428527832031 * e, 366.4464282989502 * e, 439.1428527832031 * e, 373.4464282989502 * e, 428.1428527832031 * e, 372.4464282989502 * e), a.bezierCurveTo(416.1428527832031 * e, 370.4464282989502 * e, 412.1428527832031 * e, 367.4464282989502 * e, 415.1428527832031 * e, 361.4464282989502 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(414.1428527832031 * e, 361.4464282989502 * e), a.bezierCurveTo(418.1428527832031 * e, 352.4464282989502 * e, 426.1428527832031 * e, 353.4464282989502 * e, 437.1428527832031 * e, 362.4464282989502 * e), a.bezierCurveTo(441.1428527832031 * e, 366.4464282989502 * e, 439.1428527832031 * e, 373.4464282989502 * e, 428.1428527832031 * e, 372.4464282989502 * e), a.bezierCurveTo(416.1428527832031 * e, 370.4464282989502 * e, 412.1428527832031 * e, 367.4464282989502 * e, 415.1428527832031 * e, 361.4464282989502 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(453.1428527832031 * e, 356.875 * e), a.bezierCurveTo(458.1428527832031 * e, 363.875 * e, 447.1428527832031 * e, 373.875 * e, 444.1428527832031 * e, 369.875 * e), a.bezierCurveTo(441.1428527832031 * e, 361.875 * e, 448.1428527832031 * e, 352.875 * e, 453.1428527832031 * e, 356.875 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(453.1428527832031 * e, 356.875 * e), a.bezierCurveTo(458.1428527832031 * e, 363.875 * e, 447.1428527832031 * e, 373.875 * e, 444.1428527832031 * e, 369.875 * e), a.bezierCurveTo(441.1428527832031 * e, 361.875 * e, 448.1428527832031 * e, 352.875 * e, 453.1428527832031 * e, 356.875 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(40.142852783203125 * e, 225.1607151031494 * e), a.bezierCurveTo(52.142852783203125 * e, 224.1607151031494 * e, 44.142852783203125 * e, 251.1607151031494 * e, 36.142852783203125 * e, 248.1607151031494 * e), a.bezierCurveTo(25.142852783203125 * e, 245.1607151031494 * e, 34.142852783203125 * e, 225.1607151031494 * e, 41.142852783203125 * e, 225.1607151031494 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(40.142852783203125 * e, 225.1607151031494 * e), a.bezierCurveTo(52.142852783203125 * e, 224.1607151031494 * e, 44.142852783203125 * e, 251.1607151031494 * e, 36.142852783203125 * e, 248.1607151031494 * e), a.bezierCurveTo(25.142852783203125 * e, 245.1607151031494 * e, 34.142852783203125 * e, 225.1607151031494 * e, 41.142852783203125 * e, 225.1607151031494 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(114.14285278320312 * e, 52.4464111328125 * e), a.bezierCurveTo(123.14285278320312 * e, 57.4464111328125 * e, 111.14285278320312 * e, 71.4464111328125 * e, 106.14285278320312 * e, 65.4464111328125 * e), a.bezierCurveTo(101.14285278320312 * e, 58.4464111328125 * e, 111.14285278320312 * e, 51.4464111328125 * e, 114.14285278320312 * e, 52.4464111328125 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(114.14285278320312 * e, 52.4464111328125 * e), a.bezierCurveTo(123.14285278320312 * e, 57.4464111328125 * e, 111.14285278320312 * e, 71.4464111328125 * e, 106.14285278320312 * e, 65.4464111328125 * e), a.bezierCurveTo(101.14285278320312 * e, 58.4464111328125 * e, 111.14285278320312 * e, 51.4464111328125 * e, 114.14285278320312 * e, 52.4464111328125 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35.142852783203125 * e, 256.3035707473755 * e), a.bezierCurveTo(41.142852783203125 * e, 263.3035707473755 * e, 32.142852783203125 * e, 270.3035707473755 * e, 27.142852783203125 * e, 270.3035707473755 * e), a.bezierCurveTo(20.142852783203125 * e, 267.3035707473755 * e, 29.142852783203125 * e, 252.3035707473755 * e, 35.142852783203125 * e, 255.3035707473755 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35.142852783203125 * e, 256.3035707473755 * e), a.bezierCurveTo(41.142852783203125 * e, 263.3035707473755 * e, 32.142852783203125 * e, 270.3035707473755 * e, 27.142852783203125 * e, 270.3035707473755 * e), a.bezierCurveTo(20.142852783203125 * e, 267.3035707473755 * e, 29.142852783203125 * e, 252.3035707473755 * e, 35.142852783203125 * e, 255.3035707473755 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(48.142852783203125 * e, 266.4464282989502 * e), a.bezierCurveTo(59.142852783203125 * e, 273.4464282989502 * e, 41.142852783203125 * e, 290.4464282989502 * e, 33.142852783203125 * e, 285.4464282989502 * e), a.bezierCurveTo(25.142852783203125 * e, 277.4464282989502 * e, 44.142852783203125 * e, 261.4464282989502 * e, 48.142852783203125 * e, 266.4464282989502 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(48.142852783203125 * e, 266.4464282989502 * e), a.bezierCurveTo(59.142852783203125 * e, 273.4464282989502 * e, 41.142852783203125 * e, 290.4464282989502 * e, 33.142852783203125 * e, 285.4464282989502 * e), a.bezierCurveTo(25.142852783203125 * e, 277.4464282989502 * e, 44.142852783203125 * e, 261.4464282989502 * e, 48.142852783203125 * e, 266.4464282989502 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(138.14285278320312 * e, 385.5892868041992 * e), a.bezierCurveTo(150.14285278320312 * e, 387.5892868041992 * e, 140.14285278320312 * e, 405.5892868041992 * e, 131.14285278320312 * e, 402.5892868041992 * e), a.bezierCurveTo(125.14285278320312 * e, 397.5892868041992 * e, 134.14285278320312 * e, 385.5892868041992 * e, 138.14285278320312 * e, 385.5892868041992 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(138.14285278320312 * e, 385.5892868041992 * e), a.bezierCurveTo(150.14285278320312 * e, 387.5892868041992 * e, 140.14285278320312 * e, 405.5892868041992 * e, 131.14285278320312 * e, 402.5892868041992 * e), a.bezierCurveTo(125.14285278320312 * e, 397.5892868041992 * e, 134.14285278320312 * e, 385.5892868041992 * e, 138.14285278320312 * e, 385.5892868041992 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(218.14285278320312 * e, 394.16071701049805 * e), a.bezierCurveTo(224.14285278320312 * e, 398.16071701049805 * e, 222.14285278320312 * e, 403.16071701049805 * e, 214.14285278320312 * e, 407.16071701049805 * e), a.bezierCurveTo(204.14285278320312 * e, 407.16071701049805 * e, 213.14285278320312 * e, 392.16071701049805 * e, 218.14285278320312 * e, 394.16071701049805 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(218.14285278320312 * e, 394.16071701049805 * e), a.bezierCurveTo(224.14285278320312 * e, 398.16071701049805 * e, 222.14285278320312 * e, 403.16071701049805 * e, 214.14285278320312 * e, 407.16071701049805 * e), a.bezierCurveTo(204.14285278320312 * e, 407.16071701049805 * e, 213.14285278320312 * e, 392.16071701049805 * e, 218.14285278320312 * e, 394.16071701049805 * e), a.closePath(), fill_path(a, t[1]), a.translate(50 * e, 100 * e)) : (r.width = 543 * e, r.height = 470 * e, a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(97.14285278320312 * e, 113.875 * e), a.bezierCurveTo(104.14285278320312 * e, 106.875 * e, 113.14285278320312 * e, 109.875 * e, 118.14285278320312 * e, 118.875 * e), a.bezierCurveTo(119.14285278320312 * e, 121.875 * e, 118.14285278320312 * e, 129.875 * e, 103.14285278320312 * e, 124.875 * e), a.bezierCurveTo(94.14285278320312 * e, 120.875 * e, 95.14285278320312 * e, 117.875 * e, 97.14285278320312 * e, 113.875 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(97.14285278320312 * e, 113.875 * e), a.bezierCurveTo(104.14285278320312 * e, 106.875 * e, 113.14285278320312 * e, 109.875 * e, 118.14285278320312 * e, 118.875 * e), a.bezierCurveTo(119.14285278320312 * e, 121.875 * e, 118.14285278320312 * e, 129.875 * e, 103.14285278320312 * e, 124.875 * e), a.bezierCurveTo(94.14285278320312 * e, 120.875 * e, 95.14285278320312 * e, 117.875 * e, 97.14285278320312 * e, 113.875 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(88.14285278320312 * e, 138.87498474121094 * e), a.bezierCurveTo(90.14285278320312 * e, 128.87498474121094 * e, 104.14285278320312 * e, 130.87498474121094 * e, 107.14285278320312 * e, 138.87498474121094 * e), a.bezierCurveTo(109.14285278320312 * e, 147.87498474121094 * e, 89.14285278320312 * e, 145.87498474121094 * e, 88.14285278320312 * e, 138.87498474121094 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(88.14285278320312 * e, 138.87498474121094 * e), a.bezierCurveTo(90.14285278320312 * e, 128.87498474121094 * e, 104.14285278320312 * e, 130.87498474121094 * e, 107.14285278320312 * e, 138.87498474121094 * e), a.bezierCurveTo(109.14285278320312 * e, 147.87498474121094 * e, 89.14285278320312 * e, 145.87498474121094 * e, 88.14285278320312 * e, 138.87498474121094 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(194.14285278320312 * e, 44.87498474121094 * e), a.bezierCurveTo(202.14285278320312 * e, 49.87498474121094 * e, 195.14285278320312 * e, 62.87498474121094 * e, 187.14285278320312 * e, 60.87498474121094 * e), a.bezierCurveTo(180.14285278320312 * e, 57.87498474121094 * e, 190.14285278320312 * e, 40.87498474121094 * e, 194.14285278320312 * e, 44.87498474121094 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(194.14285278320312 * e, 44.87498474121094 * e), a.bezierCurveTo(202.14285278320312 * e, 49.87498474121094 * e, 195.14285278320312 * e, 62.87498474121094 * e, 187.14285278320312 * e, 60.87498474121094 * e), a.bezierCurveTo(180.14285278320312 * e, 57.87498474121094 * e, 190.14285278320312 * e, 40.87498474121094 * e, 194.14285278320312 * e, 44.87498474121094 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(22.142852783203125 * e, 218.44642639160156 * e), a.bezierCurveTo(31.142852783203125 * e, 205.44642639160156 * e, 49.142852783203125 * e, 221.44642639160156 * e, 49.142852783203125 * e, 230.44642639160156 * e), a.bezierCurveTo(44.142852783203125 * e, 243.44642639160156 * e, 14.142852783203125 * e, 228.44642639160156 * e, 22.142852783203125 * e, 218.44642639160156 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(22.142852783203125 * e, 218.44642639160156 * e), a.bezierCurveTo(31.142852783203125 * e, 205.44642639160156 * e, 49.142852783203125 * e, 221.44642639160156 * e, 49.142852783203125 * e, 230.44642639160156 * e), a.bezierCurveTo(44.142852783203125 * e, 243.44642639160156 * e, 14.142852783203125 * e, 228.44642639160156 * e, 22.142852783203125 * e, 218.44642639160156 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41.142852783203125 * e, 249.875 * e), a.bezierCurveTo(33.142852783203125 * e, 255.875 * e, 30.142852783203125 * e, 265.875 * e, 40.142852783203125 * e, 266.875 * e), a.bezierCurveTo(49.142852783203125 * e, 261.875 * e, 53.142852783203125 * e, 244.875 * e, 41.142852783203125 * e, 249.875 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41.142852783203125 * e, 249.875 * e), a.bezierCurveTo(33.142852783203125 * e, 255.875 * e, 30.142852783203125 * e, 265.875 * e, 40.142852783203125 * e, 266.875 * e), a.bezierCurveTo(49.142852783203125 * e, 261.875 * e, 53.142852783203125 * e, 244.875 * e, 41.142852783203125 * e, 249.875 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105.14285278320312 * e, 369.875 * e), a.bezierCurveTo(92.14285278320312 * e, 361.875 * e, 77.14285278320312 * e, 375.875 * e, 79.14285278320312 * e, 384.875 * e), a.bezierCurveTo(84.14285278320312 * e, 399.875 * e, 114.14285278320312 * e, 375.875 * e, 104.14285278320312 * e, 369.875 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105.14285278320312 * e, 369.875 * e), a.bezierCurveTo(92.14285278320312 * e, 361.875 * e, 77.14285278320312 * e, 375.875 * e, 79.14285278320312 * e, 384.875 * e), a.bezierCurveTo(84.14285278320312 * e, 399.875 * e, 114.14285278320312 * e, 375.875 * e, 104.14285278320312 * e, 369.875 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(233.14285278320312 * e, 43.4464111328125 * e), a.bezierCurveTo(238.14285278320312 * e, 47.4464111328125 * e, 222.14285278320312 * e, 73.4464111328125 * e, 214.14285278320312 * e, 58.4464111328125 * e), a.bezierCurveTo(211.14285278320312 * e, 48.4464111328125 * e, 230.14285278320312 * e, 35.4464111328125 * e, 233.14285278320312 * e, 42.4464111328125 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(233.14285278320312 * e, 43.4464111328125 * e), a.bezierCurveTo(238.14285278320312 * e, 47.4464111328125 * e, 222.14285278320312 * e, 73.4464111328125 * e, 214.14285278320312 * e, 58.4464111328125 * e), a.bezierCurveTo(211.14285278320312 * e, 48.4464111328125 * e, 230.14285278320312 * e, 35.4464111328125 * e, 233.14285278320312 * e, 42.4464111328125 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(371.1428527832031 * e, 34.73213195800781 * e), a.bezierCurveTo(378.1428527832031 * e, 20.732131958007812 * e, 395.1428527832031 * e, 32.73213195800781 * e, 396.1428527832031 * e, 42.73213195800781 * e), a.bezierCurveTo(399.1428527832031 * e, 59.73213195800781 * e, 369.1428527832031 * e, 43.73213195800781 * e, 372.1428527832031 * e, 34.73213195800781 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(371.1428527832031 * e, 34.73213195800781 * e), a.bezierCurveTo(378.1428527832031 * e, 20.732131958007812 * e, 395.1428527832031 * e, 32.73213195800781 * e, 396.1428527832031 * e, 42.73213195800781 * e), a.bezierCurveTo(399.1428527832031 * e, 59.73213195800781 * e, 369.1428527832031 * e, 43.73213195800781 * e, 372.1428527832031 * e, 34.73213195800781 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(117.14285278320312 * e, 392.5892868041992 * e), a.bezierCurveTo(115.14285278320312 * e, 384.5892868041992 * e, 109.14285278320312 * e, 383.5892868041992 * e, 103.14285278320312 * e, 384.5892868041992 * e), a.bezierCurveTo(95.14285278320312 * e, 389.5892868041992 * e, 97.14285278320312 * e, 393.5892868041992 * e, 107.14285278320312 * e, 396.5892868041992 * e), a.bezierCurveTo(114.14285278320312 * e, 396.5892868041992 * e, 118.14285278320312 * e, 393.5892868041992 * e, 116.14285278320312 * e, 391.5892868041992 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(117.14285278320312 * e, 392.5892868041992 * e), a.bezierCurveTo(115.14285278320312 * e, 384.5892868041992 * e, 109.14285278320312 * e, 383.5892868041992 * e, 103.14285278320312 * e, 384.5892868041992 * e), a.bezierCurveTo(95.14285278320312 * e, 389.5892868041992 * e, 97.14285278320312 * e, 393.5892868041992 * e, 107.14285278320312 * e, 396.5892868041992 * e), a.bezierCurveTo(114.14285278320312 * e, 396.5892868041992 * e, 118.14285278320312 * e, 393.5892868041992 * e, 116.14285278320312 * e, 391.5892868041992 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(122.14285278320312 * e, 403.7321472167969 * e), a.bezierCurveTo(132.14285278320312 * e, 399.7321472167969 * e, 133.14285278320312 * e, 418.7321472167969 * e, 129.14285278320312 * e, 419.7321472167969 * e), a.bezierCurveTo(119.14285278320312 * e, 420.7321472167969 * e, 118.14285278320312 * e, 402.7321472167969 * e, 123.14285278320312 * e, 403.7321472167969 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(122.14285278320312 * e, 403.7321472167969 * e), a.bezierCurveTo(132.14285278320312 * e, 399.7321472167969 * e, 133.14285278320312 * e, 418.7321472167969 * e, 129.14285278320312 * e, 419.7321472167969 * e), a.bezierCurveTo(119.14285278320312 * e, 420.7321472167969 * e, 118.14285278320312 * e, 402.7321472167969 * e, 123.14285278320312 * e, 403.7321472167969 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(317.1428527832031 * e, 417.5892868041992 * e), a.bezierCurveTo(333.1428527832031 * e, 421.5892868041992 * e, 299.1428527832031 * e, 455.5892868041992 * e, 294.1428527832031 * e, 438.5892868041992 * e), a.bezierCurveTo(289.1428527832031 * e, 423.5892868041992 * e, 307.1428527832031 * e, 414.5892868041992 * e, 317.1428527832031 * e, 417.5892868041992 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(317.1428527832031 * e, 417.5892868041992 * e), a.bezierCurveTo(333.1428527832031 * e, 421.5892868041992 * e, 299.1428527832031 * e, 455.5892868041992 * e, 294.1428527832031 * e, 438.5892868041992 * e), a.bezierCurveTo(289.1428527832031 * e, 423.5892868041992 * e, 307.1428527832031 * e, 414.5892868041992 * e, 317.1428527832031 * e, 417.5892868041992 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(322.1428527832031 * e, 437.30357360839844 * e), a.bezierCurveTo(330.1428527832031 * e, 431.30357360839844 * e, 336.1428527832031 * e, 440.30357360839844 * e, 336.1428527832031 * e, 448.30357360839844 * e), a.bezierCurveTo(334.1428527832031 * e, 454.30357360839844 * e, 316.1428527832031 * e, 447.30357360839844 * e, 323.1428527832031 * e, 437.30357360839844 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(322.1428527832031 * e, 437.30357360839844 * e), a.bezierCurveTo(330.1428527832031 * e, 431.30357360839844 * e, 336.1428527832031 * e, 440.30357360839844 * e, 336.1428527832031 * e, 448.30357360839844 * e), a.bezierCurveTo(334.1428527832031 * e, 454.30357360839844 * e, 316.1428527832031 * e, 447.30357360839844 * e, 323.1428527832031 * e, 437.30357360839844 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(438.1428527832031 * e, 358.5892868041992 * e), a.bezierCurveTo(455.1428527832031 * e, 351.5892868041992 * e, 467.1428527832031 * e, 371.5892868041992 * e, 455.1428527832031 * e, 374.5892868041992 * e), a.bezierCurveTo(442.1428527832031 * e, 377.5892868041992 * e, 429.1428527832031 * e, 361.5892868041992 * e, 438.1428527832031 * e, 358.5892868041992 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(438.1428527832031 * e, 358.5892868041992 * e), a.bezierCurveTo(455.1428527832031 * e, 351.5892868041992 * e, 467.1428527832031 * e, 371.5892868041992 * e, 455.1428527832031 * e, 374.5892868041992 * e), a.bezierCurveTo(442.1428527832031 * e, 377.5892868041992 * e, 429.1428527832031 * e, 361.5892868041992 * e, 438.1428527832031 * e, 358.5892868041992 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(423.1428527832031 * e, 363.16071701049805 * e), a.bezierCurveTo(433.1428527832031 * e, 362.16071701049805 * e, 433.1428527832031 * e, 374.16071701049805 * e, 421.1428527832031 * e, 382.16071701049805 * e), a.bezierCurveTo(413.1428527832031 * e, 383.16071701049805 * e, 413.1428527832031 * e, 368.16071701049805 * e, 423.1428527832031 * e, 363.16071701049805 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(423.1428527832031 * e, 363.16071701049805 * e), a.bezierCurveTo(433.1428527832031 * e, 362.16071701049805 * e, 433.1428527832031 * e, 374.16071701049805 * e, 421.1428527832031 * e, 382.16071701049805 * e), a.bezierCurveTo(413.1428527832031 * e, 383.16071701049805 * e, 413.1428527832031 * e, 368.16071701049805 * e, 423.1428527832031 * e, 363.16071701049805 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(431.1428527832031 * e, 333.0178565979004 * e), a.bezierCurveTo(447.1428527832031 * e, 330.0178565979004 * e, 448.1428527832031 * e, 340.0178565979004 * e, 447.1428527832031 * e, 343.0178565979004 * e), a.bezierCurveTo(445.1428527832031 * e, 351.0178565979004 * e, 415.1428527832031 * e, 343.0178565979004 * e, 431.1428527832031 * e, 333.0178565979004 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(431.1428527832031 * e, 333.0178565979004 * e), a.bezierCurveTo(447.1428527832031 * e, 330.0178565979004 * e, 448.1428527832031 * e, 340.0178565979004 * e, 447.1428527832031 * e, 343.0178565979004 * e), a.bezierCurveTo(445.1428527832031 * e, 351.0178565979004 * e, 415.1428527832031 * e, 343.0178565979004 * e, 431.1428527832031 * e, 333.0178565979004 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(486.1428527832031 * e, 272.44642639160156 * e), a.bezierCurveTo(493.1428527832031 * e, 260.44642639160156 * e, 519.1428527832031 * e, 277.44642639160156 * e, 511.1428527832031 * e, 289.44642639160156 * e), a.bezierCurveTo(503.1428527832031 * e, 297.44642639160156 * e, 483.1428527832031 * e, 277.44642639160156 * e, 486.1428527832031 * e, 273.44642639160156 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(486.1428527832031 * e, 272.44642639160156 * e), a.bezierCurveTo(493.1428527832031 * e, 260.44642639160156 * e, 519.1428527832031 * e, 277.44642639160156 * e, 511.1428527832031 * e, 289.44642639160156 * e), a.bezierCurveTo(503.1428527832031 * e, 297.44642639160156 * e, 483.1428527832031 * e, 277.44642639160156 * e, 486.1428527832031 * e, 273.44642639160156 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(503.1428527832031 * e, 245.01785278320312 * e), a.bezierCurveTo(516.1428527832031 * e, 247.01785278320312 * e, 513.1428527832031 * e, 264.0178527832031 * e, 509.1428527832031 * e, 265.0178527832031 * e), a.bezierCurveTo(499.1428527832031 * e, 268.0178527832031 * e, 494.1428527832031 * e, 244.01785278320312 * e, 504.1428527832031 * e, 245.01785278320312 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(503.1428527832031 * e, 245.01785278320312 * e), a.bezierCurveTo(516.1428527832031 * e, 247.01785278320312 * e, 513.1428527832031 * e, 264.0178527832031 * e, 509.1428527832031 * e, 265.0178527832031 * e), a.bezierCurveTo(499.1428527832031 * e, 268.0178527832031 * e, 494.1428527832031 * e, 244.01785278320312 * e, 504.1428527832031 * e, 245.01785278320312 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(518.1428527832031 * e, 179.73213958740234 * e), a.bezierCurveTo(529.1428527832031 * e, 181.73213958740234 * e, 514.1428527832031 * e, 212.73213958740234 * e, 505.1428527832031 * e, 200.73213958740234 * e), a.bezierCurveTo(499.1428527832031 * e, 186.73213958740234 * e, 515.1428527832031 * e, 177.73213958740234 * e, 518.1428527832031 * e, 179.73213958740234 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(518.1428527832031 * e, 179.73213958740234 * e), a.bezierCurveTo(529.1428527832031 * e, 181.73213958740234 * e, 514.1428527832031 * e, 212.73213958740234 * e, 505.1428527832031 * e, 200.73213958740234 * e), a.bezierCurveTo(499.1428527832031 * e, 186.73213958740234 * e, 515.1428527832031 * e, 177.73213958740234 * e, 518.1428527832031 * e, 179.73213958740234 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(438.1428527832031 * e, 22.16070556640625 * e), a.bezierCurveTo(446.1428527832031 * e, 27.16070556640625 * e, 422.1428527832031 * e, 54.16070556640625 * e, 414.1428527832031 * e, 40.16070556640625 * e), a.bezierCurveTo(409.1428527832031 * e, 27.16070556640625 * e, 430.1428527832031 * e, 15.16070556640625 * e, 438.1428527832031 * e, 22.16070556640625 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(438.1428527832031 * e, 22.16070556640625 * e), a.bezierCurveTo(446.1428527832031 * e, 27.16070556640625 * e, 422.1428527832031 * e, 54.16070556640625 * e, 414.1428527832031 * e, 40.16070556640625 * e), a.bezierCurveTo(409.1428527832031 * e, 27.16070556640625 * e, 430.1428527832031 * e, 15.16070556640625 * e, 438.1428527832031 * e, 22.16070556640625 * e), a.closePath(), fill_path(a, t[1]), a.globalAlpha = .5, a.translate(3 * e, 3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(406.1428527832031 * e, 11.16070556640625 * e), a.bezierCurveTo(418.1428527832031 * e, 14.16070556640625 * e, 411.1428527832031 * e, 27.16070556640625 * e, 403.1428527832031 * e, 30.16070556640625 * e), a.bezierCurveTo(395.1428527832031 * e, 31.16070556640625 * e, 391.1428527832031 * e, 16.16070556640625 * e, 406.1428527832031 * e, 10.16070556640625 * e), a.closePath(), fill_path(a, t[0]), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(406.1428527832031 * e, 11.16070556640625 * e), a.bezierCurveTo(418.1428527832031 * e, 14.16070556640625 * e, 411.1428527832031 * e, 27.16070556640625 * e, 403.1428527832031 * e, 30.16070556640625 * e), a.bezierCurveTo(395.1428527832031 * e, 31.16070556640625 * e, 391.1428527832031 * e, 16.16070556640625 * e, 406.1428527832031 * e, 10.16070556640625 * e), a.closePath(), fill_path(a, t[1]), a.translate(100 * e, 100 * e)), a.globalAlpha = 1, a.translate(-3 * e, -3 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(271 * e, 111 * e), a.bezierCurveTo(259 * e, 110 * e, 258 * e, 99 * e, 265 * e, 95 * e), a.bezierCurveTo(276 * e, 91 * e, 279 * e, 100 * e, 275 * e, 107 * e), a.bezierCurveTo(274 * e, 109 * e, 273 * e, 110 * e, 271 * e, 111 * e), a.closePath(), fill_path(a, t[2], t[3], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(169 * e, 121 * e), a.bezierCurveTo(159 * e, 129 * e, 149 * e, 126 * e, 144 * e, 114 * e), a.bezierCurveTo(142 * e, 102 * e, 149 * e, 98 * e, 163 * e, 96 * e), a.bezierCurveTo(175 * e, 98 * e, 176 * e, 115 * e, 169 * e, 121 * e), a.closePath(), fill_path(a, t[2], t[3], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(213 * e, 150 * e), a.bezierCurveTo(206 * e, 134 * e, 216 * e, 120 * e, 235 * e, 129 * e), a.bezierCurveTo(247 * e, 139 * e, 242 * e, 146 * e, 237 * e, 154 * e), a.bezierCurveTo(226 * e, 162 * e, 218 * e, 159 * e, 213 * e, 150 * e), a.closePath(), fill_path(a, t[2], t[3], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(236 * e, 169 * e), a.bezierCurveTo(247 * e, 166 * e, 250 * e, 172 * e, 247 * e, 181 * e), a.bezierCurveTo(242 * e, 186 * e, 241 * e, 181 * e, 242 * e, 182 * e), a.bezierCurveTo(241 * e, 178 * e, 240 * e, 179 * e, 239 * e, 181 * e), a.bezierCurveTo(240 * e, 184 * e, 237 * e, 186 * e, 233 * e, 181 * e), a.bezierCurveTo(230 * e, 173 * e, 233 * e, 169 * e, 236 * e, 169 * e), a.closePath(), fill_path(a, t[2], t[3], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(163 * e, 170 * e), a.bezierCurveTo(176 * e, 165 * e, 180 * e, 172 * e, 181 * e, 181 * e), a.bezierCurveTo(182 * e, 189 * e, 178 * e, 192 * e, 174 * e, 188 * e), a.bezierCurveTo(172 * e, 183 * e, 170 * e, 184 * e, 170 * e, 188 * e), a.bezierCurveTo(176 * e, 194 * e, 165 * e, 196 * e, 162 * e, 190 * e), a.bezierCurveTo(152 * e, 181 * e, 157 * e, 173 * e, 163 * e, 170 * e), a.closePath(), fill_path(a, t[2], t[3], 2 * e), a.scale(.05, .05), a.translate(5e3 * e, 1900 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(273 * e, 46.546875 * e), a.bezierCurveTo(353 * e, 131.546875 * e, 303 * e, 213.546875 * e, 272 * e, 236.546875 * e), a.bezierCurveTo(203 * e, 179.546875 * e, 236 * e, 84.546875 * e, 273 * e, 47.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(467 * e, 257.546875 * e), a.bezierCurveTo(369 * e, 194.546875 * e, 325 * e, 236.546875 * e, 291 * e, 271.546875 * e), a.bezierCurveTo(371 * e, 335.546875 * e, 427 * e, 313.546875 * e, 467 * e, 258.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(269 * e, 275.546875 * e), a.bezierCurveTo(343 * e, 356.546875 * e, 355 * e, 407.546875 * e, 323 * e, 472.546875 * e), a.bezierCurveTo(224 * e, 451.546875 * e, 238 * e, 326.546875 * e, 270 * e, 275.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(260 * e, 267.546875 * e), a.bezierCurveTo(134 * e, 221.546875 * e, 89 * e, 256.546875 * e, 60 * e, 295.546875 * e), a.bezierCurveTo(116 * e, 357.546875 * e, 242 * e, 344.546875 * e, 260 * e, 267.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(124 * e, 123.546875 * e), a.bezierCurveTo(255 * e, 140.546875 * e, 265 * e, 234.546875 * e, 267 * e, 269.546875 * e), a.bezierCurveTo(159 * e, 283.546875 * e, 127 * e, 192.546875 * e, 124 * e, 124.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(267 * e, 268.546875 * e), a.bezierCurveTo(265 * e, 170.546875 * e, 364 * e, 127.546875 * e, 407 * e, 132.546875 * e), a.bezierCurveTo(427 * e, 204.546875 * e, 341 * e, 277.546875 * e, 268 * e, 271.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(270 * e, 269.546875 * e), a.bezierCurveTo(370 * e, 251.546875 * e, 410 * e, 328.546875 * e, 420 * e, 399.546875 * e), a.bezierCurveTo(292 * e, 412.546875 * e, 275 * e, 313.546875 * e, 269 * e, 272.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(273 * e, 266.546875 * e), a.bezierCurveTo(291 * e, 370.546875 * e, 235 * e, 428.546875 * e, 173 * e, 451.546875 * e), a.bezierCurveTo(124 * e, 365.546875 * e, 217 * e, 274.546875 * e, 272 * e, 265.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), circle(a, 266 * e, 251.546875 * e, 19.1049731745428 * e), fill_path(a, t[8], t[9], 2 * e), circle(a, 292 * e, 274.546875 * e, 15.556349186104045 * e), fill_path(a, t[8], t[9], 2 * e), circle(a, 258 * e, 291.546875 * e, 17.029386365926403 * e), fill_path(a, t[8], t[9], 2 * e), a.scale(1.4, 1.4), a.translate(-700 * e, 280 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(273 * e, 46.546875 * e), a.bezierCurveTo(353 * e, 131.546875 * e, 303 * e, 213.546875 * e, 272 * e, 236.546875 * e), a.bezierCurveTo(203 * e, 179.546875 * e, 236 * e, 84.546875 * e, 273 * e, 47.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(467 * e, 257.546875 * e), a.bezierCurveTo(369 * e, 194.546875 * e, 325 * e, 236.546875 * e, 291 * e, 271.546875 * e), a.bezierCurveTo(371 * e, 335.546875 * e, 427 * e, 313.546875 * e, 467 * e, 258.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(269 * e, 275.546875 * e), a.bezierCurveTo(343 * e, 356.546875 * e, 355 * e, 407.546875 * e, 323 * e, 472.546875 * e), a.bezierCurveTo(224 * e, 451.546875 * e, 238 * e, 326.546875 * e, 270 * e, 275.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(260 * e, 267.546875 * e), a.bezierCurveTo(134 * e, 221.546875 * e, 89 * e, 256.546875 * e, 60 * e, 295.546875 * e), a.bezierCurveTo(116 * e, 357.546875 * e, 242 * e, 344.546875 * e, 260 * e, 267.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(124 * e, 123.546875 * e), a.bezierCurveTo(255 * e, 140.546875 * e, 265 * e, 234.546875 * e, 267 * e, 269.546875 * e), a.bezierCurveTo(159 * e, 283.546875 * e, 127 * e, 192.546875 * e, 124 * e, 124.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(267 * e, 268.546875 * e), a.bezierCurveTo(265 * e, 170.546875 * e, 364 * e, 127.546875 * e, 407 * e, 132.546875 * e), a.bezierCurveTo(427 * e, 204.546875 * e, 341 * e, 277.546875 * e, 268 * e, 271.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(270 * e, 269.546875 * e), a.bezierCurveTo(370 * e, 251.546875 * e, 410 * e, 328.546875 * e, 420 * e, 399.546875 * e), a.bezierCurveTo(292 * e, 412.546875 * e, 275 * e, 313.546875 * e, 269 * e, 272.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(273 * e, 266.546875 * e), a.bezierCurveTo(291 * e, 370.546875 * e, 235 * e, 428.546875 * e, 173 * e, 451.546875 * e), a.bezierCurveTo(124 * e, 365.546875 * e, 217 * e, 274.546875 * e, 272 * e, 265.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), circle(a, 266 * e, 251.546875 * e, 19.1049731745428 * e), fill_path(a, t[8], t[9], 2 * e), circle(a, 292 * e, 274.546875 * e, 15.556349186104045 * e), fill_path(a, t[8], t[9], 2 * e), circle(a, 258 * e, 291.546875 * e, 17.029386365926403 * e), fill_path(a, t[8], t[9], 2 * e), a.translate(-900 * e, -200 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(273 * e, 46.546875 * e), a.bezierCurveTo(353 * e, 131.546875 * e, 303 * e, 213.546875 * e, 272 * e, 236.546875 * e), a.bezierCurveTo(203 * e, 179.546875 * e, 236 * e, 84.546875 * e, 273 * e, 47.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(467 * e, 257.546875 * e), a.bezierCurveTo(369 * e, 194.546875 * e, 325 * e, 236.546875 * e, 291 * e, 271.546875 * e), a.bezierCurveTo(371 * e, 335.546875 * e, 427 * e, 313.546875 * e, 467 * e, 258.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(269 * e, 275.546875 * e), a.bezierCurveTo(343 * e, 356.546875 * e, 355 * e, 407.546875 * e, 323 * e, 472.546875 * e), a.bezierCurveTo(224 * e, 451.546875 * e, 238 * e, 326.546875 * e, 270 * e, 275.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(260 * e, 267.546875 * e), a.bezierCurveTo(134 * e, 221.546875 * e, 89 * e, 256.546875 * e, 60 * e, 295.546875 * e), a.bezierCurveTo(116 * e, 357.546875 * e, 242 * e, 344.546875 * e, 260 * e, 267.546875 * e), a.closePath(), fill_path(a, t[4], t[5], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(124 * e, 123.546875 * e), a.bezierCurveTo(255 * e, 140.546875 * e, 265 * e, 234.546875 * e, 267 * e, 269.546875 * e), a.bezierCurveTo(159 * e, 283.546875 * e, 127 * e, 192.546875 * e, 124 * e, 124.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(267 * e, 268.546875 * e), a.bezierCurveTo(265 * e, 170.546875 * e, 364 * e, 127.546875 * e, 407 * e, 132.546875 * e), a.bezierCurveTo(427 * e, 204.546875 * e, 341 * e, 277.546875 * e, 268 * e, 271.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(270 * e, 269.546875 * e), a.bezierCurveTo(370 * e, 251.546875 * e, 410 * e, 328.546875 * e, 420 * e, 399.546875 * e), a.bezierCurveTo(292 * e, 412.546875 * e, 275 * e, 313.546875 * e, 269 * e, 272.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(273 * e, 266.546875 * e), a.bezierCurveTo(291 * e, 370.546875 * e, 235 * e, 428.546875 * e, 173 * e, 451.546875 * e), a.bezierCurveTo(124 * e, 365.546875 * e, 217 * e, 274.546875 * e, 272 * e, 265.546875 * e), a.closePath(), fill_path(a, t[6], t[7], 2 * e), circle(a, 266 * e, 251.546875 * e, 19.1049731745428 * e), fill_path(a, t[8], t[9], 2 * e), circle(a, 292 * e, 274.546875 * e, 15.556349186104045 * e), fill_path(a, t[8], t[9], 2 * e), circle(a, 258 * e, 291.546875 * e, 17.029386365926403 * e), fill_path(a, t[8], t[9], 2 * e), r
}

function create_kraken(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 376 * e, i.height = 371 * e, r.globalAlpha = .5, r.translate(5 * e, 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(191.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e), r.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e), r.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e), r.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e), r.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e), r.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e), r.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e), r.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e), r.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e), r.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e), r.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e), r.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e), r.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e), r.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e), r.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e), r.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e), r.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e), r.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e), r.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e), r.closePath(), fill_path(r, t[0]), r.globalAlpha = 1, r.translate(-4 * e, -5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(191.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e), r.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e), r.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e), r.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e), r.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e), r.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e), r.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e), r.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e), r.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e), r.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e), r.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e), r.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e), r.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e), r.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e), r.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e), r.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e), r.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e), r.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e), r.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e), r.closePath(), fill_path(r, void 0, t[1], 12 * e), r.translate(-1 * e, 0 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(270.633544921875 * e, 88.98580932617188 * e), r.bezierCurveTo(296.633544921875 * e, 65.98580932617188 * e, 318.633544921875 * e, 62.985809326171875 * e, 348.633544921875 * e, 57.985809326171875 * e), r.bezierCurveTo(309.633544921875 * e, 76.98580932617188 * e, 291.633544921875 * e, 88.98580932617188 * e, 280.633544921875 * e, 99.98580932617188 * e), r.closePath(), fill_path(r, t[4], t[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(275.633544921875 * e, 281.9858093261719 * e), r.bezierCurveTo(303.633544921875 * e, 308.9858093261719 * e, 321.633544921875 * e, 308.9858093261719 * e, 335.633544921875 * e, 315.9858093261719 * e), r.bezierCurveTo(305.633544921875 * e, 320.9858093261719 * e, 278.633544921875 * e, 307.9858093261719 * e, 264.633544921875 * e, 293.9858093261719 * e), r.closePath(), fill_path(r, t[4], t[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(124.633544921875 * e, 291.9858093261719 * e), r.bezierCurveTo(106.633544921875 * e, 316.9858093261719 * e, 72.633544921875 * e, 325.9858093261719 * e, 53.633544921875 * e, 319.9858093261719 * e), r.bezierCurveTo(83.633544921875 * e, 308.9858093261719 * e, 97.633544921875 * e, 298.9858093261719 * e, 112.633544921875 * e, 284.9858093261719 * e), r.closePath(), fill_path(r, t[4], t[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(113.633544921875 * e, 80.98580932617188 * e), r.bezierCurveTo(91.633544921875 * e, 54.985809326171875 * e, 72.633544921875 * e, 56.985809326171875 * e, 36.633544921875 * e, 49.985809326171875 * e), r.bezierCurveTo(87.633544921875 * e, 72.98580932617188 * e, 95.633544921875 * e, 82.98580932617188 * e, 106.633544921875 * e, 96.98580932617188 * e), r.closePath(), fill_path(r, t[4], t[5], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(202.633544921875 * e, 20.985809326171875 * e), r.bezierCurveTo(219.633544921875 * e, 49.985809326171875 * e, 259.633544921875 * e, 80.98580932617188 * e, 255.633544921875 * e, 92.98580932617188 * e), r.bezierCurveTo(268.633544921875 * e, 86.98580932617188 * e, 265.633544921875 * e, 87.98580932617188 * e, 275.633544921875 * e, 82.98580932617188 * e), r.bezierCurveTo(283.633544921875 * e, 87.98580932617188 * e, 283.633544921875 * e, 87.98580932617188 * e, 291.633544921875 * e, 92.98580932617188 * e), r.bezierCurveTo(269.633544921875 * e, 116.98580932617188 * e, 270.633544921875 * e, 124.98580932617188 * e, 267.633544921875 * e, 130.98580932617188 * e), r.bezierCurveTo(307.633544921875 * e, 168.98580932617188 * e, 339.633544921875 * e, 132.98580932617188 * e, 352.633544921875 * e, 93.98580932617188 * e), r.bezierCurveTo(366.633544921875 * e, 145.98580932617188 * e, 345.633544921875 * e, 207.98580932617188 * e, 286.633544921875 * e, 208.98580932617188 * e), r.bezierCurveTo(315.633544921875 * e, 223.98580932617188 * e, 327.633544921875 * e, 287.9858093261719 * e, 355.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(293.633544921875 * e, 298.9858093261719 * e, 293.633544921875 * e, 275.9858093261719 * e, 276.633544921875 * e, 266.9858093261719 * e), r.bezierCurveTo(274.633544921875 * e, 282.9858093261719 * e, 287.633544921875 * e, 288.9858093261719 * e, 295.633544921875 * e, 296.9858093261719 * e), r.bezierCurveTo(287.133544921875 * e, 302.4858093261719 * e, 287.133544921875 * e, 302.4858093261719 * e, 278.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(261.633544921875 * e, 297.9858093261719 * e, 258.633544921875 * e, 293.9858093261719 * e, 255.633544921875 * e, 290.9858093261719 * e), r.bezierCurveTo(249.633544921875 * e, 301.9858093261719 * e, 225.633544921875 * e, 320.9858093261719 * e, 202.633544921875 * e, 354.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 318.9858093261719 * e, 196.633544921875 * e, 306.9858093261719 * e, 198.633544921875 * e, 300.9858093261719 * e), r.bezierCurveTo(209.633544921875 * e, 268.9858093261719 * e, 199.633544921875 * e, 266.9858093261719 * e, 195.633544921875 * e, 256.9858093261719 * e), r.bezierCurveTo(183.633544921875 * e, 274.9858093261719 * e, 182.633544921875 * e, 281.9858093261719 * e, 192.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(194.633544921875 * e, 317.9858093261719 * e, 191.633544921875 * e, 336.9858093261719 * e, 186.633544921875 * e, 351.9858093261719 * e), r.bezierCurveTo(166.633544921875 * e, 318.9858093261719 * e, 141.633544921875 * e, 303.9858093261719 * e, 136.633544921875 * e, 286.9858093261719 * e), r.bezierCurveTo(122.633544921875 * e, 303.9858093261719 * e, 115.633544921875 * e, 305.9858093261719 * e, 109.633544921875 * e, 306.9858093261719 * e), r.bezierCurveTo(101.133544921875 * e, 301.9858093261719 * e, 94.633544921875 * e, 297.9858093261719 * e, 92.633544921875 * e, 296.9858093261719 * e), r.bezierCurveTo(116.633544921875 * e, 277.9858093261719 * e, 116.633544921875 * e, 266.9858093261719 * e, 119.633544921875 * e, 257.9858093261719 * e), r.bezierCurveTo(107.633544921875 * e, 257.9858093261719 * e, 65.633544921875 * e, 308.9858093261719 * e, 24.633544921875 * e, 303.9858093261719 * e), r.bezierCurveTo(51.633544921875 * e, 275.9858093261719 * e, 64.633544921875 * e, 220.98580932617188 * e, 108.633544921875 * e, 205.98580932617188 * e), r.bezierCurveTo(14.633544921875 * e, 198.98580932617188 * e, 26.633544921875 * e, 142.98580932617188 * e, 25.633544921875 * e, 86.98580932617188 * e), r.bezierCurveTo(41.633544921875 * e, 155.98580932617188 * e, 81.633544921875 * e, 148.98580932617188 * e, 113.633544921875 * e, 124.98580932617188 * e), r.bezierCurveTo(102.633544921875 * e, 93.98580932617188 * e, 95.633544921875 * e, 88.98580932617188 * e, 89.633544921875 * e, 81.98580932617188 * e), r.bezierCurveTo(97.633544921875 * e, 76.48580932617188 * e, 97.633544921875 * e, 76.48580932617188 * e, 105.633544921875 * e, 70.98580932617188 * e), r.bezierCurveTo(120.633544921875 * e, 78.98580932617188 * e, 121.633544921875 * e, 81.98580932617188 * e, 124.633544921875 * e, 86.98580932617188 * e), r.bezierCurveTo(132.633544921875 * e, 71.98580932617188 * e, 160.633544921875 * e, 56.985809326171875 * e, 175.633544921875 * e, 23.985809326171875 * e), r.bezierCurveTo(182.633544921875 * e, 53.985809326171875 * e, 170.633544921875 * e, 102.98580932617188 * e, 191.633544921875 * e, 125.98580932617188 * e), r.bezierCurveTo(214.633544921875 * e, 89.98580932617188 * e, 192.633544921875 * e, 58.985809326171875 * e, 202.633544921875 * e, 20.985809326171875 * e), r.closePath(), fill_path(r, t[2], t[3], 5 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(203.633544921875 * e, 21.985809326171875 * e), r.bezierCurveTo(223.633544921875 * e, 63.985809326171875 * e, 227.633544921875 * e, 72.98580932617188 * e, 235.633544921875 * e, 98.98580932617188 * e), r.bezierCurveTo(241.633544921875 * e, 123.98580932617188 * e, 225.633544921875 * e, 138.98580932617188 * e, 196.633544921875 * e, 122.98580932617188 * e), r.bezierCurveTo(213.633544921875 * e, 93.98580932617188 * e, 199.633544921875 * e, 49.985809326171875 * e, 203.633544921875 * e, 26.985809326171875 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(175.633544921875 * e, 25.985809326171875 * e), r.bezierCurveTo(176.633544921875 * e, 51.985809326171875 * e, 171.633544921875 * e, 88.98580932617188 * e, 186.633544921875 * e, 121.98580932617188 * e), r.bezierCurveTo(156.633544921875 * e, 144.98580932617188 * e, 139.633544921875 * e, 120.98580932617188 * e, 147.633544921875 * e, 97.98580932617188 * e), r.bezierCurveTo(152.633544921875 * e, 77.98580932617188 * e, 162.633544921875 * e, 60.985809326171875 * e, 176.633544921875 * e, 25.985809326171875 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(26.633544921875 * e, 96.98580932617188 * e), r.bezierCurveTo(38.633544921875 * e, 151.98580932617188 * e, 61.633544921875 * e, 161.98580932617188 * e, 88.633544921875 * e, 168.98580932617188 * e), r.bezierCurveTo(117.633544921875 * e, 177.98580932617188 * e, 113.633544921875 * e, 185.98580932617188 * e, 106.633544921875 * e, 204.98580932617188 * e), r.bezierCurveTo(32.633544921875 * e, 204.98580932617188 * e, 25.633544921875 * e, 149.98580932617188 * e, 25.633544921875 * e, 97.98580932617188 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(351.633544921875 * e, 99.98580932617188 * e), r.bezierCurveTo(365.633544921875 * e, 161.98580932617188 * e, 333.633544921875 * e, 203.98580932617188 * e, 287.633544921875 * e, 207.98580932617188 * e), r.bezierCurveTo(255.633544921875 * e, 208.98580932617188 * e, 266.633544921875 * e, 174.98580932617188 * e, 285.633544921875 * e, 176.98580932617188 * e), r.bezierCurveTo(313.633544921875 * e, 178.98580932617188 * e, 348.633544921875 * e, 135.98580932617188 * e, 353.633544921875 * e, 99.98580932617188 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(350.633544921875 * e, 302.9858093261719 * e), r.bezierCurveTo(310.633544921875 * e, 280.9858093261719 * e, 314.633544921875 * e, 244.98580932617188 * e, 292.633544921875 * e, 230.98580932617188 * e), r.bezierCurveTo(272.633544921875 * e, 215.98580932617188 * e, 263.633544921875 * e, 222.98580932617188 * e, 256.633544921875 * e, 236.98580932617188 * e), r.bezierCurveTo(251.633544921875 * e, 249.98580932617188 * e, 264.633544921875 * e, 255.98580932617188 * e, 279.633544921875 * e, 268.9858093261719 * e), r.bezierCurveTo(306.633544921875 * e, 295.9858093261719 * e, 325.633544921875 * e, 299.9858093261719 * e, 349.633544921875 * e, 302.9858093261719 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(95.633544921875 * e, 224.98580932617188 * e), r.bezierCurveTo(64.633544921875 * e, 245.98580932617188 * e, 62.633544921875 * e, 280.9858093261719 * e, 32.633544921875 * e, 303.9858093261719 * e), r.bezierCurveTo(59.633544921875 * e, 301.9858093261719 * e, 102.633544921875 * e, 260.9858093261719 * e, 116.633544921875 * e, 255.98580932617188 * e), r.bezierCurveTo(139.633544921875 * e, 229.98580932617188 * e, 108.633544921875 * e, 209.98580932617188 * e, 97.633544921875 * e, 224.98580932617188 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(195.633544921875 * e, 253.98580932617188 * e), r.bezierCurveTo(209.633544921875 * e, 282.9858093261719 * e, 205.633544921875 * e, 278.9858093261719 * e, 199.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(198.633544921875 * e, 332.9858093261719 * e, 201.633544921875 * e, 340.9858093261719 * e, 202.633544921875 * e, 348.9858093261719 * e), r.bezierCurveTo(215.633544921875 * e, 313.9858093261719 * e, 226.633544921875 * e, 291.9858093261719 * e, 235.633544921875 * e, 270.9858093261719 * e), r.bezierCurveTo(243.633544921875 * e, 247.98580932617188 * e, 219.633544921875 * e, 235.98580932617188 * e, 196.633544921875 * e, 252.98580932617188 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(195.633544921875 * e, 251.98580932617188 * e), r.bezierCurveTo(176.633544921875 * e, 275.9858093261719 * e, 182.633544921875 * e, 285.9858093261719 * e, 191.633544921875 * e, 308.9858093261719 * e), r.bezierCurveTo(194.633544921875 * e, 318.9858093261719 * e, 190.633544921875 * e, 334.9858093261719 * e, 186.633544921875 * e, 348.9858093261719 * e), r.bezierCurveTo(175.633544921875 * e, 307.9858093261719 * e, 157.633544921875 * e, 291.9858093261719 * e, 155.633544921875 * e, 272.9858093261719 * e), r.bezierCurveTo(150.633544921875 * e, 243.98580932617188 * e, 170.633544921875 * e, 236.98580932617188 * e, 195.633544921875 * e, 251.98580932617188 * e), r.closePath(), fill_path(r, t[3]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(316 * e, 186.8020782470703 * e), r.bezierCurveTo(315 * e, 173.8020782470703 * e, 298 * e, 177.8020782470703 * e, 293 * e, 183.8020782470703 * e), r.bezierCurveTo(285 * e, 195.8020782470703 * e, 314 * e, 197.8020782470703 * e, 315 * e, 187.8020782470703 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(340 * e, 157.8020782470703 * e), r.bezierCurveTo(327 * e, 153.8020782470703 * e, 321 * e, 168.8020782470703 * e, 330 * e, 174.8020782470703 * e), r.bezierCurveTo(341 * e, 178.8020782470703 * e, 347 * e, 161.8020782470703 * e, 341 * e, 157.8020782470703 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(349 * e, 136.8020782470703 * e), r.bezierCurveTo(343 * e, 135.8020782470703 * e, 342 * e, 139.8020782470703 * e, 341 * e, 147.8020782470703 * e), r.bezierCurveTo(343 * e, 155.8020782470703 * e, 353 * e, 143.8020782470703 * e, 349 * e, 137.8020782470703 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(278.75 * e, 246.4375 * e), r.bezierCurveTo(288.75 * e, 242.4375 * e, 301.75 * e, 248.4375 * e, 298.75 * e, 262.4375 * e), r.bezierCurveTo(293.75 * e, 271.4375 * e, 287.75 * e, 271.4375 * e, 278.75 * e, 262.4375 * e), r.bezierCurveTo(271.75 * e, 255.4375 * e, 274.75 * e, 250.4375 * e, 277.75 * e, 247.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(310.75 * e, 277.4375 * e), r.bezierCurveTo(319.75 * e, 280.4375 * e, 322.75 * e, 283.4375 * e, 321.75 * e, 289.4375 * e), r.bezierCurveTo(319.75 * e, 295.4375 * e, 313.75 * e, 291.4375 * e, 308.75 * e, 288.4375 * e), r.bezierCurveTo(301.75 * e, 281.4375 * e, 306.75 * e, 277.4375 * e, 309.75 * e, 277.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(217.75 * e, 257.4375 * e), r.bezierCurveTo(227.75 * e, 269.4375 * e, 220.75 * e, 281.4375 * e, 212.75 * e, 280.4375 * e), r.bezierCurveTo(206.75 * e, 279.4375 * e, 206.75 * e, 269.4375 * e, 204.75 * e, 260.4375 * e), r.bezierCurveTo(204.75 * e, 254.4375 * e, 211.75 * e, 253.4375 * e, 216.75 * e, 256.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(211.75 * e, 289.4375 * e), r.bezierCurveTo(219.75 * e, 292.4375 * e, 213.75 * e, 306.4375 * e, 206.75 * e, 307.4375 * e), r.bezierCurveTo(199.75 * e, 303.4375 * e, 209.75 * e, 287.4375 * e, 210.75 * e, 289.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(171.75 * e, 256.4375 * e), r.bezierCurveTo(162.75 * e, 273.4375 * e, 166.75 * e, 278.4375 * e, 175.75 * e, 280.4375 * e), r.bezierCurveTo(183.75 * e, 278.4375 * e, 185.75 * e, 257.4375 * e, 182.75 * e, 255.4375 * e), r.bezierCurveTo(176.75 * e, 251.4375 * e, 172.75 * e, 253.4375 * e, 172.75 * e, 256.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(175.75 * e, 289.9375 * e), r.bezierCurveTo(183.75 * e, 287.9375 * e, 186.75 * e, 301.9375 * e, 182.75 * e, 305.9375 * e), r.bezierCurveTo(176.75 * e, 307.9375 * e, 171.75 * e, 292.9375 * e, 174.75 * e, 290.9375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(205.75 * e, 314.4375 * e), r.bezierCurveTo(209.75 * e, 316.4375 * e, 210.75 * e, 320.4375 * e, 206.75 * e, 323.4375 * e), r.bezierCurveTo(201.75 * e, 324.4375 * e, 201.75 * e, 314.4375 * e, 204.75 * e, 314.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(186.75 * e, 313.4375 * e), r.bezierCurveTo(181.75 * e, 315.4375 * e, 180.75 * e, 321.4375 * e, 185.75 * e, 326.4375 * e), r.bezierCurveTo(190.75 * e, 327.4375 * e, 190.75 * e, 313.4375 * e, 187.75 * e, 314.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(103.75 * e, 244.4375 * e), r.bezierCurveTo(96.75 * e, 239.4375 * e, 83.75 * e, 240.4375 * e, 81.75 * e, 255.4375 * e), r.bezierCurveTo(80.75 * e, 264.4375 * e, 89.75 * e, 269.4375 * e, 99.75 * e, 260.4375 * e), r.bezierCurveTo(106.75 * e, 254.4375 * e, 106.75 * e, 250.4375 * e, 104.75 * e, 245.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(86.75 * e, 182.4375 * e), r.bezierCurveTo(82.75 * e, 170.4375 * e, 66.75 * e, 169.4375 * e, 61.75 * e, 181.4375 * e), r.bezierCurveTo(58.75 * e, 187.4375 * e, 68.75 * e, 194.4375 * e, 75.75 * e, 192.4375 * e), r.bezierCurveTo(83.75 * e, 192.4375 * e, 86.75 * e, 187.4375 * e, 86.75 * e, 183.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(44.75 * e, 152.4375 * e), r.bezierCurveTo(55.75 * e, 159.4375 * e, 54.75 * e, 170.4375 * e, 46.75 * e, 171.4375 * e), r.bezierCurveTo(39.75 * e, 170.4375 * e, 34.75 * e, 151.4375 * e, 43.75 * e, 152.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(31.75 * e, 130.4375 * e), r.bezierCurveTo(35.75 * e, 132.4375 * e, 35.75 * e, 131.4375 * e, 37.75 * e, 137.4375 * e), r.bezierCurveTo(36.75 * e, 144.4375 * e, 36.75 * e, 145.4375 * e, 33.75 * e, 144.4375 * e), r.bezierCurveTo(26.75 * e, 137.4375 * e, 29.75 * e, 131.4375 * e, 31.75 * e, 130.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(69.75 * e, 274.4375 * e), r.bezierCurveTo(62.75 * e, 272.4375 * e, 59.75 * e, 277.4375 * e, 57.75 * e, 284.4375 * e), r.bezierCurveTo(56.75 * e, 290.4375 * e, 63.75 * e, 289.4375 * e, 71.75 * e, 282.4375 * e), r.bezierCurveTo(75.75 * e, 277.4375 * e, 72.75 * e, 275.4375 * e, 69.75 * e, 274.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(165.75 * e, 95.4375 * e), r.bezierCurveTo(177.75 * e, 97.4375 * e, 182.75 * e, 115.4375 * e, 173.75 * e, 121.4375 * e), r.bezierCurveTo(164.75 * e, 126.4375 * e, 149.75 * e, 102.4375 * e, 164.75 * e, 96.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(216.75 * e, 94.4375 * e), r.bezierCurveTo(227.75 * e, 99.4375 * e, 223.75 * e, 122.4375 * e, 210.75 * e, 119.4375 * e), r.bezierCurveTo(203.75 * e, 115.4375 * e, 207.75 * e, 93.4375 * e, 216.75 * e, 94.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(211.75 * e, 68.4375 * e), r.bezierCurveTo(218.75 * e, 69.4375 * e, 220.75 * e, 77.4375 * e, 216.75 * e, 83.4375 * e), r.bezierCurveTo(208.75 * e, 89.4375 * e, 205.75 * e, 68.4375 * e, 210.75 * e, 68.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(169.75 * e, 71.4375 * e), r.bezierCurveTo(162.75 * e, 72.4375 * e, 159.75 * e, 83.4375 * e, 167.75 * e, 88.4375 * e), r.bezierCurveTo(174.75 * e, 90.4375 * e, 174.75 * e, 72.4375 * e, 170.75 * e, 71.4375 * e), r.closePath(), fill_path(r, t[6], t[7], 4 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(193.75 * e, 160.4375 * e), r.bezierCurveTo(215.75 * e, 168.4375 * e, 224.75 * e, 180.4375 * e, 229.75 * e, 193.4375 * e), r.bezierCurveTo(223.75 * e, 211.4375 * e, 205.75 * e, 225.4375 * e, 193.75 * e, 229.4375 * e), r.bezierCurveTo(167.75 * e, 217.4375 * e, 161.75 * e, 205.4375 * e, 156.75 * e, 192.4375 * e), r.bezierCurveTo(164.75 * e, 175.4375 * e, 176.75 * e, 166.4375 * e, 192.75 * e, 160.4375 * e), r.closePath(), fill_path(r, t[8], t[9], 3 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(189.1999969482422 * e, 182.61249923706055 * e), r.bezierCurveTo(190.1999969482422 * e, 184.11249923706055 * e, 190.1999969482422 * e, 184.11249923706055 * e, 191.1999969482422 * e, 185.61249923706055 * e), r.bezierCurveTo(192.1999969482422 * e, 180.61249923706055 * e, 192.1999969482422 * e, 180.61249923706055 * e, 193.1999969482422 * e, 175.61249923706055 * e), r.bezierCurveTo(195.6999969482422 * e, 177.11249923706055 * e, 195.6999969482422 * e, 177.11249923706055 * e, 198.1999969482422 * e, 178.61249923706055 * e), r.bezierCurveTo(198.1999969482422 * e, 181.11249923706055 * e, 198.1999969482422 * e, 181.11249923706055 * e, 198.1999969482422 * e, 183.61249923706055 * e), r.bezierCurveTo(201.6999969482422 * e, 181.11249923706055 * e, 201.6999969482422 * e, 181.11249923706055 * e, 205.1999969482422 * e, 178.61249923706055 * e), r.bezierCurveTo(206.6999969482422 * e, 180.61249923706055 * e, 206.6999969482422 * e, 180.61249923706055 * e, 208.1999969482422 * e, 182.61249923706055 * e), r.bezierCurveTo(206.1999969482422 * e, 185.61249923706055 * e, 206.1999969482422 * e, 185.61249923706055 * e, 204.1999969482422 * e, 188.61249923706055 * e), r.bezierCurveTo(208.6999969482422 * e, 188.61249923706055 * e, 208.6999969482422 * e, 188.61249923706055 * e, 213.1999969482422 * e, 188.61249923706055 * e), r.bezierCurveTo(213.1999969482422 * e, 191.11249923706055 * e, 213.1999969482422 * e, 191.11249923706055 * e, 213.1999969482422 * e, 193.61249923706055 * e), r.bezierCurveTo(209.6999969482422 * e, 194.61249923706055 * e, 209.6999969482422 * e, 194.61249923706055 * e, 206.1999969482422 * e, 195.61249923706055 * e), r.bezierCurveTo(210.1999969482422 * e, 198.61249923706055 * e, 210.1999969482422 * e, 198.61249923706055 * e, 214.1999969482422 * e, 201.61249923706055 * e), r.bezierCurveTo(212.1999969482422 * e, 203.61249923706055 * e, 212.1999969482422 * e, 203.61249923706055 * e, 210.1999969482422 * e, 205.61249923706055 * e), r.bezierCurveTo(207.1999969482422 * e, 204.11249923706055 * e, 207.1999969482422 * e, 204.11249923706055 * e, 204.1999969482422 * e, 202.61249923706055 * e), r.bezierCurveTo(205.6999969482422 * e, 207.61249923706055 * e, 205.6999969482422 * e, 207.61249923706055 * e, 207.1999969482422 * e, 212.61249923706055 * e), r.bezierCurveTo(204.6999969482422 * e, 213.61249923706055 * e, 204.6999969482422 * e, 213.61249923706055 * e, 202.1999969482422 * e, 214.61249923706055 * e), r.bezierCurveTo(200.1999969482422 * e, 210.61249923706055 * e, 200.1999969482422 * e, 210.61249923706055 * e, 198.1999969482422 * e, 206.61249923706055 * e), r.bezierCurveTo(196.6999969482422 * e, 211.61249923706055 * e, 196.6999969482422 * e, 211.61249923706055 * e, 195.1999969482422 * e, 216.61249923706055 * e), r.bezierCurveTo(192.6999969482422 * e, 216.11249923706055 * e, 192.6999969482422 * e, 216.11249923706055 * e, 190.1999969482422 * e, 215.61249923706055 * e), r.bezierCurveTo(190.1999969482422 * e, 211.61249923706055 * e, 190.1999969482422 * e, 211.61249923706055 * e, 190.1999969482422 * e, 207.61249923706055 * e), r.bezierCurveTo(186.1999969482422 * e, 210.61249923706055 * e, 186.1999969482422 * e, 210.61249923706055 * e, 182.1999969482422 * e, 213.61249923706055 * e), r.bezierCurveTo(181.1999969482422 * e, 211.11249923706055 * e, 181.1999969482422 * e, 211.11249923706055 * e, 180.1999969482422 * e, 208.61249923706055 * e), r.bezierCurveTo(183.1999969482422 * e, 205.61249923706055 * e, 183.1999969482422 * e, 205.61249923706055 * e, 186.1999969482422 * e, 202.61249923706055 * e), r.bezierCurveTo(180.6999969482422 * e, 203.11249923706055 * e, 180.6999969482422 * e, 203.11249923706055 * e, 175.1999969482422 * e, 203.61249923706055 * e), r.bezierCurveTo(174.6999969482422 * e, 200.11249923706055 * e, 174.6999969482422 * e, 200.11249923706055 * e, 174.1999969482422 * e, 196.61249923706055 * e), r.bezierCurveTo(177.1999969482422 * e, 195.61249923706055 * e, 177.1999969482422 * e, 195.61249923706055 * e, 180.1999969482422 * e, 194.61249923706055 * e), r.bezierCurveTo(177.1999969482422 * e, 191.61249923706055 * e, 177.1999969482422 * e, 191.61249923706055 * e, 174.1999969482422 * e, 188.61249923706055 * e), r.bezierCurveTo(175.6999969482422 * e, 187.11249923706055 * e, 175.6999969482422 * e, 187.11249923706055 * e, 177.1999969482422 * e, 185.61249923706055 * e), r.bezierCurveTo(180.6999969482422 * e, 187.11249923706055 * e, 180.6999969482422 * e, 187.11249923706055 * e, 184.1999969482422 * e, 188.61249923706055 * e), r.bezierCurveTo(182.6999969482422 * e, 183.61249923706055 * e, 182.6999969482422 * e, 183.61249923706055 * e, 181.1999969482422 * e, 178.61249923706055 * e), r.bezierCurveTo(183.1999969482422 * e, 177.11249923706055 * e, 183.1999969482422 * e, 177.11249923706055 * e, 185.1999969482422 * e, 175.61249923706055 * e), r.closePath(), fill_path(r, t[10]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(185.1999969482422 * e, 173.8125 * e), r.bezierCurveTo(187.1999969482422 * e, 179.3125 * e, 187.1999969482422 * e, 179.3125 * e, 189.1999969482422 * e, 184.8125 * e), r.bezierCurveTo(184.1999969482422 * e, 181.8125 * e, 184.1999969482422 * e, 181.8125 * e, 179.1999969482422 * e, 178.8125 * e), r.bezierCurveTo(181.1999969482422 * e, 175.8125 * e, 182.1999969482422 * e, 174.8125 * e, 185.1999969482422 * e, 173.8125 * e), r.closePath(), fill_path(r, t[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(192.1999969482422 * e, 173.61249542236328 * e), r.bezierCurveTo(194.1999969482422 * e, 172.61249542236328 * e, 196.1999969482422 * e, 171.61249542236328 * e, 199.1999969482422 * e, 173.61249542236328 * e), r.bezierCurveTo(197.6999969482422 * e, 179.61249542236328 * e, 197.6999969482422 * e, 179.61249542236328 * e, 196.1999969482422 * e, 185.61249542236328 * e), r.bezierCurveTo(194.1999969482422 * e, 179.61249542236328 * e, 194.1999969482422 * e, 179.61249542236328 * e, 192.1999969482422 * e, 173.61249542236328 * e), r.closePath(), fill_path(r, t[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(205.1999969482422 * e, 176.2125015258789 * e), r.bezierCurveTo(210.1999969482422 * e, 178.2125015258789 * e, 211.1999969482422 * e, 179.2125015258789 * e, 211.1999969482422 * e, 181.2125015258789 * e), r.bezierCurveTo(206.6999969482422 * e, 184.7125015258789 * e, 206.6999969482422 * e, 184.7125015258789 * e, 202.1999969482422 * e, 188.2125015258789 * e), r.bezierCurveTo(203.6999969482422 * e, 182.2125015258789 * e, 203.6999969482422 * e, 182.2125015258789 * e, 205.1999969482422 * e, 176.2125015258789 * e), r.closePath(), fill_path(r, t[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(214.1999969482422 * e, 187.21249985694885 * e), r.bezierCurveTo(216.1999969482422 * e, 191.21249985694885 * e, 216.1999969482422 * e, 192.21249985694885 * e, 215.1999969482422 * e, 195.21249985694885 * e), r.bezierCurveTo(206.1999969482422 * e, 194.21249985694885 * e, 205.1999969482422 * e, 194.21249985694885 * e, 205.1999969482422 * e, 194.21249985694885 * e), r.bezierCurveTo(209.6999969482422 * e, 190.71249985694885 * e, 209.6999969482422 * e, 190.71249985694885 * e, 214.1999969482422 * e, 187.21249985694885 * e), r.closePath(), fill_path(r, t[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(204.1999969482422 * e, 201.8125 * e), r.bezierCurveTo(209.1999969482422 * e, 201.3125 * e, 209.1999969482422 * e, 201.3125 * e, 214.1999969482422 * e, 200.8125 * e), r.bezierCurveTo(215.1999969482422 * e, 204.8125 * e, 214.1999969482422 * e, 205.8125 * e, 213.1999969482422 * e, 208.8125 * e), r.bezierCurveTo(208.6999969482422 * e, 205.3125 * e, 208.6999969482422 * e, 205.3125 * e, 204.1999969482422 * e, 201.8125 * e), r.closePath(), fill_path(r, t[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(199.1999969482422 * e, 205.61249923706055 * e), r.bezierCurveTo(207.1999969482422 * e, 212.61249923706055 * e, 203.6999969482422 * e, 209.11249923706055 * e, 208.1999969482422 * e, 212.61249923706055 * e), r.bezierCurveTo(206.1999969482422 * e, 215.61249923706055 * e, 204.1999969482422 * e, 217.61249923706055 * e, 203.1999969482422 * e, 216.61249923706055 * e), r.bezierCurveTo(201.1999969482422 * e, 211.11249923706055 * e, 201.1999969482422 * e, 211.11249923706055 * e, 199.1999969482422 * e, 205.61249923706055 * e), r.closePath(), fill_path(r, t[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(191.1999969482422 * e, 207.01250076293945 * e), r.bezierCurveTo(194.1999969482422 * e, 213.01250076293945 * e, 194.1999969482422 * e, 216.01250076293945 * e, 196.1999969482422 * e, 218.01250076293945 * e), r.bezierCurveTo(193.1999969482422 * e, 220.01250076293945 * e, 190.1999969482422 * e, 220.01250076293945 * e, 188.1999969482422 * e, 218.01250076293945 * e), r.bezierCurveTo(189.6999969482422 * e, 213.01250076293945 * e, 189.6999969482422 * e, 213.01250076293945 * e, 191.1999969482422 * e, 208.01250076293945 * e), r.closePath(), fill_path(r, t[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(186.1999969482422 * e, 203.21249961853027 * e), r.bezierCurveTo(184.1999969482422 * e, 209.21249961853027 * e, 184.1999969482422 * e, 209.21249961853027 * e, 182.1999969482422 * e, 215.21249961853027 * e), r.bezierCurveTo(177.1999969482422 * e, 212.21249961853027 * e, 176.1999969482422 * e, 211.21249961853027 * e, 177.1999969482422 * e, 210.21249961853027 * e), r.bezierCurveTo(181.6999969482422 * e, 206.71249961853027 * e, 181.6999969482422 * e, 206.71249961853027 * e, 186.1999969482422 * e, 203.21249961853027 * e), r.closePath(), fill_path(r, t[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(183.1999969482422 * e, 196.8125 * e), r.bezierCurveTo(177.1999969482422 * e, 196.3125 * e, 177.1999969482422 * e, 196.3125 * e, 171.1999969482422 * e, 195.8125 * e), r.bezierCurveTo(171.1999969482422 * e, 199.8125 * e, 171.1999969482422 * e, 202.8125 * e, 174.1999969482422 * e, 204.8125 * e), r.bezierCurveTo(178.6999969482422 * e, 200.8125 * e, 178.6999969482422 * e, 200.8125 * e, 183.1999969482422 * e, 196.8125 * e), r.closePath(), fill_path(r, t[11]), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(185.1999969482422 * e, 190.21249771118164 * e), r.bezierCurveTo(179.6999969482422 * e, 186.71249771118164 * e, 179.6999969482422 * e, 186.71249771118164 * e, 174.1999969482422 * e, 183.21249771118164 * e), r.bezierCurveTo(172.1999969482422 * e, 186.21249771118164 * e, 172.1999969482422 * e, 187.21249771118164 * e, 172.1999969482422 * e, 190.21249771118164 * e), r.bezierCurveTo(178.1999969482422 * e, 190.21249771118164 * e, 178.1999969482422 * e, 190.21249771118164 * e, 184.1999969482422 * e, 190.21249771118164 * e), r.closePath(), fill_path(r, t[11]), circle(r, 126.19999694824219 * e, 169.8125 * e, 8.94427190999916 * e), fill_path(r, t[12]), circle(r, 123.19999694824219 * e, 164.8125 * e, 2.8284271247461903 * e), fill_path(r, t[13]), circle(r, 253.1999969482422 * e, 169.8125 * e, 8.94427190999916 * e), fill_path(r, t[12]), circle(r, 255.1999969482422 * e, 164.8125 * e, 2.23606797749979 * e), fill_path(r, t[13]), i
}

function create_bread(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 400 * e, a.globalAlpha = 1, a.translate(20 * e, 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36.5 * e, 278.0625 * e), a.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e), a.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e), a.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e), a.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e), a.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e), a.closePath(), fill_path(a, i[0]), a.translate(-20 * e, -20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36.5 * e, 278.0625 * e), a.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e), a.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e), a.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e), a.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e), a.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e), a.closePath(), fill_path(a, i[1], i[2], 19 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(214.5 * e, 124.0625 * e), a.bezierCurveTo(242.5 * e, 125.0625 * e, 272.5 * e, 159.0625 * e, 283.5 * e, 184.0625 * e), a.bezierCurveTo(277.5 * e, 161.0625 * e, 233.5 * e, 128.0625 * e, 219.5 * e, 122.0625 * e), a.closePath(), fill_path(a, void 0, i[2], 19 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(157.5 * e, 145.0625 * e), a.bezierCurveTo(176.5 * e, 148.0625 * e, 205.5 * e, 176.0625 * e, 212.5 * e, 197.0625 * e), a.bezierCurveTo(205.5 * e, 178.0625 * e, 177.5 * e, 152.0625 * e, 156.5 * e, 142.0625 * e), a.closePath(), fill_path(a, void 0, i[2], 19 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(103.5 * e, 169.0625 * e), a.bezierCurveTo(160.5 * e, 166.0625 * e, 228.5 * e, 312.0625 * e, 162.5 * e, 323.0625 * e), a.bezierCurveTo(128.5 * e, 330.0625 * e, 45.5 * e, 312.0625 * e, 34.5 * e, 268.0625 * e), a.bezierCurveTo(30.5 * e, 238.0625 * e, 44.5 * e, 222.0625 * e, 52.5 * e, 211.0625 * e), a.bezierCurveTo(82.5 * e, 174.0625 * e, 104.5 * e, 166.0625 * e, 119.5 * e, 172.0625 * e), a.closePath(), fill_path(a, i[3], i[2], 19 * e), circle(a, 92.5 * e, 216.0625 * e, 13.892443989449804 * e), fill_path(a, i[4]), circle(a, 68.5 * e, 227.0625 * e, 8.06225774829855 * e), fill_path(a, i[4]), circle(a, 85.5 * e, 240.0625 * e, 6.708203932499369 * e), fill_path(a, i[4]), circle(a, 147.5 * e, 294.0625 * e, 17.46424919657298 * e), fill_path(a, i[4]), circle(a, 166.5 * e, 273.0625 * e, 6.708203932499369 * e), fill_path(a, i[4]), circle(a, 114.5 * e, 294.0625 * e, 12.36931687685298 * e), fill_path(a, i[4]), circle(a, 123.5 * e, 220.0625 * e, 5.830951894845301 * e), fill_path(a, i[4]), circle(a, 114.5 * e, 259.0625 * e, 4.123105625617661 * e), fill_path(a, i[4]), circle(a, 63.5 * e, 265.0625 * e, 5.385164807134504 * e), fill_path(a, i[4]), circle(a, 148.5 * e, 235.0625 * e, 4.47213595499958 * e), fill_path(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(194.5 * e, 313.0625 * e), a.bezierCurveTo(222.5 * e, 306.0625 * e, 319.5 * e, 271.0625 * e, 337.5 * e, 241.0625 * e), a.bezierCurveTo(274.5 * e, 270.0625 * e, 216.5 * e, 288.0625 * e, 199.5 * e, 287.0625 * e), a.bezierCurveTo(198.5 * e, 302.0625 * e, 195.5 * e, 311.0625 * e, 193.5 * e, 312.0625 * e), a.closePath(), fill_path(a, i[5]), r
}

function create_hurt_kraken(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 376 * e, i.height = 371 * e, r.globalAlpha = 1, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(191.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(215.633544921875 * e, 85.98580932617188 * e, 187.633544921875 * e, 71.98580932617188 * e, 202.633544921875 * e, 19.985809326171875 * e), r.bezierCurveTo(231.633544921875 * e, 68.98580932617188 * e, 253.633544921875 * e, 71.98580932617188 * e, 256.633544921875 * e, 93.98580932617188 * e), r.bezierCurveTo(306.633544921875 * e, 64.98580932617188 * e, 319.633544921875 * e, 61.985809326171875 * e, 350.633544921875 * e, 58.985809326171875 * e), r.bezierCurveTo(280.633544921875 * e, 86.98580932617188 * e, 281.633544921875 * e, 106.98580932617188 * e, 268.633544921875 * e, 130.98580932617188 * e), r.bezierCurveTo(295.633544921875 * e, 158.98580932617188 * e, 328.633544921875 * e, 155.98580932617188 * e, 353.633544921875 * e, 90.98580932617188 * e), r.bezierCurveTo(371.633544921875 * e, 158.98580932617188 * e, 337.633544921875 * e, 210.98580932617188 * e, 286.633544921875 * e, 209.98580932617188 * e), r.bezierCurveTo(323.633544921875 * e, 230.98580932617188 * e, 317.633544921875 * e, 274.9858093261719 * e, 356.633544921875 * e, 305.9858093261719 * e), r.bezierCurveTo(288.633544921875 * e, 297.9858093261719 * e, 288.633544921875 * e, 265.9858093261719 * e, 275.633544921875 * e, 266.9858093261719 * e), r.bezierCurveTo(280.633544921875 * e, 294.9858093261719 * e, 315.633544921875 * e, 306.9858093261719 * e, 336.633544921875 * e, 316.9858093261719 * e), r.bezierCurveTo(295.633544921875 * e, 318.9858093261719 * e, 264.633544921875 * e, 302.9858093261719 * e, 254.633544921875 * e, 289.9858093261719 * e), r.bezierCurveTo(252.633544921875 * e, 301.9858093261719 * e, 224.633544921875 * e, 315.9858093261719 * e, 201.633544921875 * e, 356.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 313.9858093261719 * e, 195.633544921875 * e, 308.9858093261719 * e, 196.633544921875 * e, 307.9858093261719 * e), r.bezierCurveTo(197.633544921875 * e, 289.9858093261719 * e, 207.633544921875 * e, 283.9858093261719 * e, 195.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(182.633544921875 * e, 282.9858093261719 * e, 190.633544921875 * e, 287.9858093261719 * e, 193.633544921875 * e, 297.9858093261719 * e), r.bezierCurveTo(195.633544921875 * e, 306.9858093261719 * e, 191.633544921875 * e, 334.9858093261719 * e, 187.633544921875 * e, 354.9858093261719 * e), r.bezierCurveTo(165.633544921875 * e, 320.9858093261719 * e, 138.633544921875 * e, 307.9858093261719 * e, 135.633544921875 * e, 288.9858093261719 * e), r.bezierCurveTo(110.633544921875 * e, 318.9858093261719 * e, 68.633544921875 * e, 323.9858093261719 * e, 49.633544921875 * e, 320.9858093261719 * e), r.bezierCurveTo(88.633544921875 * e, 308.9858093261719 * e, 108.633544921875 * e, 284.9858093261719 * e, 118.633544921875 * e, 258.9858093261719 * e), r.bezierCurveTo(86.633544921875 * e, 264.9858093261719 * e, 75.633544921875 * e, 310.9858093261719 * e, 19.633544921875 * e, 304.9858093261719 * e), r.bezierCurveTo(54.633544921875 * e, 276.9858093261719 * e, 59.633544921875 * e, 214.98580932617188 * e, 105.633544921875 * e, 205.98580932617188 * e), r.bezierCurveTo(14.633544921875 * e, 201.98580932617188 * e, 24.633544921875 * e, 141.98580932617188 * e, 25.633544921875 * e, 82.98580932617188 * e), r.bezierCurveTo(49.633544921875 * e, 168.98580932617188 * e, 87.633544921875 * e, 141.98580932617188 * e, 112.633544921875 * e, 123.98580932617188 * e), r.bezierCurveTo(95.633544921875 * e, 75.98580932617188 * e, 70.633544921875 * e, 68.98580932617188 * e, 35.633544921875 * e, 50.985809326171875 * e), r.bezierCurveTo(70.633544921875 * e, 53.985809326171875 * e, 102.633544921875 * e, 65.98580932617188 * e, 125.633544921875 * e, 84.98580932617188 * e), r.bezierCurveTo(133.633544921875 * e, 69.98580932617188 * e, 166.633544921875 * e, 42.985809326171875 * e, 176.633544921875 * e, 21.985809326171875 * e), r.bezierCurveTo(185.633544921875 * e, 49.985809326171875 * e, 168.633544921875 * e, 95.98580932617188 * e, 191.633544921875 * e, 121.98580932617188 * e), r.closePath(), fill_path(r, t[0], t[0], 12 * e), i
}

function create_bread_oven_off(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 440 * e, r.height = 388 * e, a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), circle(a, 220 * e, 201 * e, 170.41713528867922 * e), fill_path(a, i[0], i[0], 6 * e), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), circle(a, 220 * e, 201 * e, 170.41713528867922 * e), fill_path(a, i[1], i[2], 6 * e), circle(a, 220 * e, 201 * e, 130 * e), fill_path(a, i[11], i[2], 6 * e), circle(a, 222 * e, 199 * e, 120.74767078498864 * e), fill_path(a, void 0, i[3], 40 * e), circle(a, 220 * e, 200 * e, 95.44108130150245 * e), fill_path(a, void 0, i[2], 15 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), circle(a, 63 * e, 136 * e, 49.193495504995376 * e), fill_path(a, i[0], i[0], 4 * e), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), circle(a, 63 * e, 136 * e, 49.193495504995376 * e), fill_path(a, i[8], i[2], 4 * e), circle(a, 63 * e, 137 * e, 25.632011235952593 * e), fill_path(a, i[7], i[2], 4 * e), r
}

function create_bread_oven(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 440 * e, r.height = 388 * e, a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), circle(a, 220 * e, 201 * e, 170.41713528867922 * e), fill_path(a, i[0], i[0], 6 * e), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), circle(a, 220 * e, 201 * e, 170.41713528867922 * e), fill_path(a, i[1], i[2], 6 * e), circle(a, 220 * e, 201 * e, 130 * e), fill_path(a, i[11], i[2], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(218 * e, 97 * e), a.bezierCurveTo(219 * e, 163 * e, 201 * e, 176 * e, 191 * e, 175 * e), a.bezierCurveTo(176 * e, 177 * e, 168 * e, 167 * e, 160 * e, 115 * e), a.closePath(), fill_path(a, i[5], i[6], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(224 * e, 181 * e), a.bezierCurveTo(225 * e, 138 * e, 246 * e, 115 * e, 263 * e, 137 * e), a.bezierCurveTo(282 * e, 174 * e, 279 * e, 217 * e, 265 * e, 243 * e), a.bezierCurveTo(253 * e, 264 * e, 240 * e, 256 * e, 233 * e, 238 * e), a.bezierCurveTo(221 * e, 212 * e, 225 * e, 198 * e, 224 * e, 184 * e), a.closePath(), fill_path(a, i[5], i[6], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(169 * e, 289 * e), a.bezierCurveTo(161 * e, 234 * e, 168 * e, 197 * e, 187 * e, 195 * e), a.bezierCurveTo(219 * e, 189 * e, 222 * e, 256 * e, 216 * e, 307 * e), a.closePath(), fill_path(a, i[5], i[6], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(143 * e, 146 * e), a.bezierCurveTo(161 * e, 199 * e, 151 * e, 245 * e, 138 * e, 266 * e), a.bezierCurveTo(120.5 * e, 239.5 * e, 120.5 * e, 239.5 * e, 103 * e, 213 * e), a.closePath(), fill_path(a, i[5], i[6], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(283 * e, 135 * e), a.bezierCurveTo(277 * e, 176 * e, 298 * e, 194 * e, 315 * e, 205 * e), a.bezierCurveTo(323.5 * e, 175 * e, 323.5 * e, 175 * e, 332 * e, 145 * e), a.closePath(), fill_path(a, i[5], i[6], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(318 * e, 223 * e), a.bezierCurveTo(290 * e, 195 * e, 271 * e, 256 * e, 283 * e, 281 * e), a.bezierCurveTo(303.5 * e, 267 * e, 303.5 * e, 267 * e, 324 * e, 253 * e), a.closePath(), fill_path(a, i[5], i[6], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(142 * e, 223 * e), a.bezierCurveTo(128 * e, 213 * e, 123 * e, 214 * e, 111 * e, 223 * e), a.closePath(), fill_path(a, i[10], i[10], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(251 * e, 133 * e), a.bezierCurveTo(269 * e, 188 * e, 262 * e, 229 * e, 251 * e, 253 * e), a.bezierCurveTo(288 * e, 224 * e, 273 * e, 139 * e, 252 * e, 133 * e), a.closePath(), fill_path(a, i[10], i[10], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(203 * e, 102 * e), a.bezierCurveTo(204 * e, 136 * e, 200 * e, 159 * e, 189 * e, 174 * e), a.bezierCurveTo(223 * e, 164 * e, 219 * e, 87 * e, 205 * e, 83 * e), a.closePath(), fill_path(a, i[10], i[10], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(196 * e, 324 * e), a.bezierCurveTo(209 * e, 239 * e, 200 * e, 219 * e, 192 * e, 196 * e), a.bezierCurveTo(229 * e, 216 * e, 219 * e, 316 * e, 198 * e, 325 * e), a.closePath(), fill_path(a, i[10], i[10], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(266 * e, 166 * e), a.bezierCurveTo(249 * e, 154 * e, 243 * e, 161 * e, 233 * e, 167 * e), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(269 * e, 192 * e), a.bezierCurveTo(256 * e, 183 * e, 241 * e, 186 * e, 233 * e, 192 * e), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(263 * e, 217 * e), a.bezierCurveTo(251 * e, 211 * e, 242 * e, 213 * e, 236 * e, 218 * e), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(204 * e, 141 * e), a.bezierCurveTo(191 * e, 131 * e, 187 * e, 133 * e, 176 * e, 141 * e), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(207 * e, 230 * e), a.bezierCurveTo(193 * e, 222 * e, 185 * e, 224 * e, 177 * e, 231 * e), fill_path(a, void 0, i[6], 6 * e), a.lineCap = "round", a.lineJoin = "round", a.moveTo(210 * e, 258 * e), a.bezierCurveTo(196 * e, 247 * e, 191 * e, 250 * e, 177 * e, 259 * e), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(145 * e, 196 * e), a.bezierCurveTo(130 * e, 186 * e, 124 * e, 187 * e, 114 * e, 195 * e), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(218 * e, 97 * e), a.bezierCurveTo(219 * e, 163 * e, 201 * e, 176 * e, 191 * e, 175 * e), a.bezierCurveTo(176 * e, 177 * e, 168 * e, 167 * e, 160 * e, 115 * e), a.closePath(), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(224 * e, 181 * e), a.bezierCurveTo(225 * e, 138 * e, 246 * e, 115 * e, 263 * e, 137 * e), a.bezierCurveTo(282 * e, 174 * e, 279 * e, 217 * e, 265 * e, 243 * e), a.bezierCurveTo(253 * e, 264 * e, 240 * e, 256 * e, 233 * e, 238 * e), a.bezierCurveTo(221 * e, 212 * e, 225 * e, 198 * e, 224 * e, 184 * e), a.closePath(), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(169 * e, 289 * e), a.bezierCurveTo(161 * e, 234 * e, 168 * e, 197 * e, 187 * e, 195 * e), a.bezierCurveTo(219 * e, 189 * e, 222 * e, 256 * e, 216 * e, 307 * e), a.closePath(), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(143 * e, 146 * e), a.bezierCurveTo(161 * e, 199 * e, 151 * e, 245 * e, 138 * e, 266 * e), a.bezierCurveTo(120.5 * e, 239.5 * e, 120.5 * e, 239.5 * e, 103 * e, 213 * e), a.closePath(), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(283 * e, 135 * e), a.bezierCurveTo(277 * e, 176 * e, 298 * e, 194 * e, 315 * e, 205 * e), a.bezierCurveTo(323.5 * e, 175 * e, 323.5 * e, 175 * e, 332 * e, 145 * e), a.closePath(), fill_path(a, void 0, i[6], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(318 * e, 223 * e), a.bezierCurveTo(290 * e, 195 * e, 271 * e, 256 * e, 283 * e, 281 * e), a.bezierCurveTo(303.5 * e, 267 * e, 303.5 * e, 267 * e, 324 * e, 253 * e), a.closePath(), fill_path(a, void 0, i[6], 6 * e), circle(a, 222 * e, 199 * e, 120.74767078498864 * e), fill_path(a, void 0, i[3], 40 * e), circle(a, 220 * e, 200 * e, 95.44108130150245 * e), fill_path(a, void 0, i[2], 15 * e), circle(a, 220 * e, 201 * e, 85 * e), fill_path(a, void 0, i[4], 10 * e), a.globalAlpha = .5, circle(a, 220 * e, 201 * e, 82 * e), fill_path(a, i[9]), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), circle(a, 63 * e, 136 * e, 49.193495504995376 * e), fill_path(a, i[0], i[0], 4 * e), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), circle(a, 63 * e, 136 * e, 49.193495504995376 * e), fill_path(a, i[8], i[2], 4 * e), circle(a, 63 * e, 137 * e, 25.632011235952593 * e), fill_path(a, i[7], i[2], 4 * e), r
}

function create_bread_light_down(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 110 * e, i.height = 110 * e, r.globalAlpha = .2, circle(r, 55 * e, 55 * e, 55 * e), fill_path(r, t[0]), i
}

function create_bread_light_up(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 110 * e, i.height = 110 * e, r.globalAlpha = .2, circle(r, 55 * e, 55 * e, 55 * e), fill_path(r, t[0]), i
}

function create_bridge(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 102 * e, r.height = 102 * e, a.globalAlpha = t ? .5 : 1, a.translate(3, 3), round_rect(a, 24 * e, 26 * e, 70 * e, 9 * e, 10 * e), fill_path(a, i[0]), round_rect(a, 26 * e, 70 * e, 70 * e, 9 * e, 10 * e), fill_path(a, i[0]), round_rect(a, 5 * e, 3 * e, 22 * e, 94 * e, 5 * e), fill_path(a, i[0]), round_rect(a, 40 * e, 3 * e, 22 * e, 94 * e, 5 * e), fill_path(a, i[0]), round_rect(a, 75 * e, 3 * e, 22 * e, 94 * e, 5 * e), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-3, -3), round_rect(a, 24 * e, 26 * e, 70 * e, 9 * e, 10 * e), fill_path(a, i[1]), round_rect(a, 26 * e, 70 * e, 70 * e, 9 * e, 10 * e), fill_path(a, i[1]), round_rect(a, 5 * e, 3 * e, 22 * e, 94 * e, 5 * e), fill_path(a, i[2], i[3], 4 * e), round_rect(a, 40 * e, 3 * e, 22 * e, 94 * e, 5 * e), fill_path(a, i[2], i[3], 4 * e), round_rect(a, 75 * e, 3 * e, 22 * e, 94 * e, 5 * e), fill_path(a, i[2], i[3], 4 * e), r
}

function create_well_border(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 496 * e, i.height = 520 * e, r.globalAlpha = 1, r.translate(0, -10 * e), circle(r, 247.01138305664062 * e, 250.13068389892578 * e, 232.81967270830015 * e), fill_path(r, t[1], t[2], 14 * e), r.globalCompositeOperation = "destination-out", circle(r, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e), fill_path(r, t[0], t[0], 14 * e), r.globalCompositeOperation = "source-over", i
}

function create_well(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    r.width = 496 * e, r.height = 520 * e, a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(19.000030517578125 * e, 256.67613983154297 * e), a.bezierCurveTo(1.000030517578125 * e, 332.67613983154297 * e, 23.000030517578125 * e, 404.67613983154297 * e, 95.00003051757812 * e, 463.67613983154297 * e), a.bezierCurveTo(128.00003051757812 * e, 491.67613983154297 * e, 165.00003051757812 * e, 507.67613983154297 * e, 194.00003051757812 * e, 512.676139831543 * e), a.bezierCurveTo(280.0000305175781 * e, 517.676139831543 * e, 291.0000305175781 * e, 516.676139831543 * e, 342.0000305175781 * e, 497.67613983154297 * e), a.bezierCurveTo(425.0000305175781 * e, 454.67613983154297 * e, 469.0000305175781 * e, 392.67613983154297 * e, 468.0000305175781 * e, 300.67613983154297 * e), a.bezierCurveTo(408.5000305175781 * e, 365.17613983154297 * e, 408.5000305175781 * e, 365.17613983154297 * e, 349.0000305175781 * e, 429.67613983154297 * e), a.bezierCurveTo(256.0000305175781 * e, 473.67613983154297 * e, 167.00003051757812 * e, 459.67613983154297 * e, 78.00003051757812 * e, 384.67613983154297 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -10 * e), circle(a, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e), fill_path(a, i[5], void 0, 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(65.00003051757812 * e, 263.4034118652344 * e), a.bezierCurveTo(109.00003051757812 * e, 160.40341186523438 * e, 185.00003051757812 * e, 128.40341186523438 * e, 222.00003051757812 * e, 124.40341186523438 * e), a.bezierCurveTo(277.0000305175781 * e, 116.40341186523438 * e, 339.0000305175781 * e, 134.40341186523438 * e, 379.0000305175781 * e, 195.40341186523438 * e), a.bezierCurveTo(409.0000305175781 * e, 242.40341186523438 * e, 416.0000305175781 * e, 256.4034118652344 * e, 428.0000305175781 * e, 304.4034118652344 * e), a.bezierCurveTo(457.0000305175781 * e, 203.40341186523438 * e, 449.0000305175781 * e, 183.40341186523438 * e, 438.0000305175781 * e, 162.40341186523438 * e), a.bezierCurveTo(381.0000305175781 * e, 73.40341186523438 * e, 360.0000305175781 * e, 66.40341186523438 * e, 257.0000305175781 * e, 46.403411865234375 * e), a.bezierCurveTo(191.00003051757812 * e, 45.403411865234375 * e, 142.00003051757812 * e, 65.40341186523438 * e, 101.00003051757812 * e, 115.40341186523438 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1;
    var n = create_well_border(e, i);
    return a.drawImage(n, 0, 0), a.translate(0, -10 * e), circle(a, 247.01138305664062 * e, 249.3125 * e, 161.4465855941215 * e), fill_path(a, void 0, i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(325.0113830566406 * e, 13.767059326171875 * e), a.bezierCurveTo(349.5113830566406 * e, 25.767059326171875 * e, 349.5113830566406 * e, 25.767059326171875 * e, 374.0113830566406 * e, 37.767059326171875 * e), a.bezierCurveTo(384.0113830566406 * e, 44.767059326171875 * e, 383.0113830566406 * e, 50.767059326171875 * e, 368.0113830566406 * e, 68.76705932617188 * e), a.bezierCurveTo(352.5113830566406 * e, 91.26705932617188 * e, 352.5113830566406 * e, 91.26705932617188 * e, 337.0113830566406 * e, 113.76705932617188 * e), a.bezierCurveTo(328.0113830566406 * e, 119.76705932617188 * e, 328.0113830566406 * e, 121.76705932617188 * e, 312.0113830566406 * e, 112.76705932617188 * e), a.bezierCurveTo(303.0113830566406 * e, 108.26705932617188 * e, 303.0113830566406 * e, 108.26705932617188 * e, 294.0113830566406 * e, 103.76705932617188 * e), a.bezierCurveTo(287.0113830566406 * e, 99.76705932617188 * e, 293.0113830566406 * e, 84.76705932617188 * e, 297.0113830566406 * e, 67.76705932617188 * e), a.bezierCurveTo(302.0113830566406 * e, 47.767059326171875 * e, 302.0113830566406 * e, 47.767059326171875 * e, 307.0113830566406 * e, 27.767059326171875 * e), a.bezierCurveTo(310.0113830566406 * e, 15.767059326171875 * e, 317.0113830566406 * e, 12.767059326171875 * e, 323.0113830566406 * e, 13.767059326171875 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(325.0113830566406 * e, 13.767059326171875 * e), a.bezierCurveTo(349.5113830566406 * e, 25.767059326171875 * e, 349.5113830566406 * e, 25.767059326171875 * e, 374.0113830566406 * e, 37.767059326171875 * e), a.bezierCurveTo(384.0113830566406 * e, 44.767059326171875 * e, 383.0113830566406 * e, 50.767059326171875 * e, 368.0113830566406 * e, 68.76705932617188 * e), a.bezierCurveTo(352.5113830566406 * e, 91.26705932617188 * e, 352.5113830566406 * e, 91.26705932617188 * e, 337.0113830566406 * e, 113.76705932617188 * e), a.bezierCurveTo(328.0113830566406 * e, 119.76705932617188 * e, 328.0113830566406 * e, 121.76705932617188 * e, 312.0113830566406 * e, 112.76705932617188 * e), a.bezierCurveTo(303.0113830566406 * e, 108.26705932617188 * e, 303.0113830566406 * e, 108.26705932617188 * e, 294.0113830566406 * e, 103.76705932617188 * e), a.bezierCurveTo(287.0113830566406 * e, 99.76705932617188 * e, 293.0113830566406 * e, 84.76705932617188 * e, 297.0113830566406 * e, 67.76705932617188 * e), a.bezierCurveTo(302.0113830566406 * e, 47.767059326171875 * e, 302.0113830566406 * e, 47.767059326171875 * e, 307.0113830566406 * e, 27.767059326171875 * e), a.bezierCurveTo(310.0113830566406 * e, 15.767059326171875 * e, 317.0113830566406 * e, 12.767059326171875 * e, 323.0113830566406 * e, 13.767059326171875 * e), a.closePath(), fill_path(a, i[3], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(403.0113830566406 * e, 89.76705932617188 * e), a.bezierCurveTo(413.0113830566406 * e, 76.76705932617188 * e, 418.0113830566406 * e, 79.76705932617188 * e, 428.0113830566406 * e, 92.76705932617188 * e), a.bezierCurveTo(435.0113830566406 * e, 99.76705932617188 * e, 435.0113830566406 * e, 99.76705932617188 * e, 442.0113830566406 * e, 106.76705932617188 * e), a.bezierCurveTo(450.0113830566406 * e, 116.76705932617188 * e, 445.0113830566406 * e, 119.76705932617188 * e, 433.0113830566406 * e, 128.76705932617188 * e), a.bezierCurveTo(408.0113830566406 * e, 146.26705932617188 * e, 408.0113830566406 * e, 146.26705932617188 * e, 383.0113830566406 * e, 163.76705932617188 * e), a.bezierCurveTo(376.0113830566406 * e, 166.76705932617188 * e, 377.0113830566406 * e, 165.76705932617188 * e, 368.0113830566406 * e, 156.76705932617188 * e), a.bezierCurveTo(359.0113830566406 * e, 144.76705932617188 * e, 359.0113830566406 * e, 142.76705932617188 * e, 367.0113830566406 * e, 133.76705932617188 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(403.0113830566406 * e, 89.76705932617188 * e), a.bezierCurveTo(413.0113830566406 * e, 76.76705932617188 * e, 418.0113830566406 * e, 79.76705932617188 * e, 428.0113830566406 * e, 92.76705932617188 * e), a.bezierCurveTo(435.0113830566406 * e, 99.76705932617188 * e, 435.0113830566406 * e, 99.76705932617188 * e, 442.0113830566406 * e, 106.76705932617188 * e), a.bezierCurveTo(450.0113830566406 * e, 116.76705932617188 * e, 445.0113830566406 * e, 119.76705932617188 * e, 433.0113830566406 * e, 128.76705932617188 * e), a.bezierCurveTo(408.0113830566406 * e, 146.26705932617188 * e, 408.0113830566406 * e, 146.26705932617188 * e, 383.0113830566406 * e, 163.76705932617188 * e), a.bezierCurveTo(376.0113830566406 * e, 166.76705932617188 * e, 377.0113830566406 * e, 165.76705932617188 * e, 368.0113830566406 * e, 156.76705932617188 * e), a.bezierCurveTo(359.0113830566406 * e, 144.76705932617188 * e, 359.0113830566406 * e, 142.76705932617188 * e, 367.0113830566406 * e, 133.76705932617188 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(228.01138305664062 * e, 1.767059326171875 * e), a.bezierCurveTo(246.51138305664062 * e, 3.267059326171875 * e, 246.51138305664062 * e, 3.267059326171875 * e, 265.0113830566406 * e, 4.767059326171875 * e), a.bezierCurveTo(273.0113830566406 * e, 5.767059326171875 * e, 275.0113830566406 * e, 11.767059326171875 * e, 270.0113830566406 * e, 27.767059326171875 * e), a.bezierCurveTo(264.0113830566406 * e, 54.267059326171875 * e, 264.0113830566406 * e, 54.267059326171875 * e, 258.0113830566406 * e, 80.76705932617188 * e), a.bezierCurveTo(256.0113830566406 * e, 92.76705932617188 * e, 256.0113830566406 * e, 94.76705932617188 * e, 242.01138305664062 * e, 93.76705932617188 * e), a.bezierCurveTo(226.01138305664062 * e, 95.76705932617188 * e, 225.01138305664062 * e, 91.76705932617188 * e, 225.01138305664062 * e, 80.76705932617188 * e), a.bezierCurveTo(223.51138305664062 * e, 50.267059326171875 * e, 223.51138305664062 * e, 50.267059326171875 * e, 222.01138305664062 * e, 19.767059326171875 * e), a.bezierCurveTo(219.01138305664062 * e, 8.767059326171875 * e, 224.01138305664062 * e, 4.767059326171875 * e, 227.01138305664062 * e, 2.767059326171875 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(228.01138305664062 * e, 1.767059326171875 * e), a.bezierCurveTo(246.51138305664062 * e, 3.267059326171875 * e, 246.51138305664062 * e, 3.267059326171875 * e, 265.0113830566406 * e, 4.767059326171875 * e), a.bezierCurveTo(273.0113830566406 * e, 5.767059326171875 * e, 275.0113830566406 * e, 11.767059326171875 * e, 270.0113830566406 * e, 27.767059326171875 * e), a.bezierCurveTo(264.0113830566406 * e, 54.267059326171875 * e, 264.0113830566406 * e, 54.267059326171875 * e, 258.0113830566406 * e, 80.76705932617188 * e), a.bezierCurveTo(256.0113830566406 * e, 92.76705932617188 * e, 256.0113830566406 * e, 94.76705932617188 * e, 242.01138305664062 * e, 93.76705932617188 * e), a.bezierCurveTo(226.01138305664062 * e, 95.76705932617188 * e, 225.01138305664062 * e, 91.76705932617188 * e, 225.01138305664062 * e, 80.76705932617188 * e), a.bezierCurveTo(223.51138305664062 * e, 50.267059326171875 * e, 223.51138305664062 * e, 50.267059326171875 * e, 222.01138305664062 * e, 19.767059326171875 * e), a.bezierCurveTo(219.01138305664062 * e, 8.767059326171875 * e, 224.01138305664062 * e, 4.767059326171875 * e, 227.01138305664062 * e, 2.767059326171875 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(142.01138305664062 * e, 25.767059326171875 * e), a.bezierCurveTo(158.51138305664062 * e, 19.767059326171875 * e, 158.51138305664062 * e, 19.767059326171875 * e, 175.01138305664062 * e, 13.767059326171875 * e), a.bezierCurveTo(188.01138305664062 * e, 11.767059326171875 * e, 188.01138305664062 * e, 16.767059326171875 * e, 191.01138305664062 * e, 29.767059326171875 * e), a.bezierCurveTo(197.01138305664062 * e, 60.267059326171875 * e, 197.01138305664062 * e, 60.267059326171875 * e, 203.01138305664062 * e, 90.76705932617188 * e), a.bezierCurveTo(206.01138305664062 * e, 102.76705932617188 * e, 196.01138305664062 * e, 99.76705932617188 * e, 181.01138305664062 * e, 105.76705932617188 * e), a.bezierCurveTo(175.01138305664062 * e, 108.76705932617188 * e, 172.01138305664062 * e, 104.76705932617188 * e, 164.01138305664062 * e, 84.76705932617188 * e), a.bezierCurveTo(152.51138305664062 * e, 63.267059326171875 * e, 152.51138305664062 * e, 63.267059326171875 * e, 141.01138305664062 * e, 41.767059326171875 * e), a.bezierCurveTo(138.01138305664062 * e, 35.767059326171875 * e, 138.01138305664062 * e, 29.767059326171875 * e, 141.01138305664062 * e, 27.767059326171875 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(142.01138305664062 * e, 25.767059326171875 * e), a.bezierCurveTo(158.51138305664062 * e, 19.767059326171875 * e, 158.51138305664062 * e, 19.767059326171875 * e, 175.01138305664062 * e, 13.767059326171875 * e), a.bezierCurveTo(188.01138305664062 * e, 11.767059326171875 * e, 188.01138305664062 * e, 16.767059326171875 * e, 191.01138305664062 * e, 29.767059326171875 * e), a.bezierCurveTo(197.01138305664062 * e, 60.267059326171875 * e, 197.01138305664062 * e, 60.267059326171875 * e, 203.01138305664062 * e, 90.76705932617188 * e), a.bezierCurveTo(206.01138305664062 * e, 102.76705932617188 * e, 196.01138305664062 * e, 99.76705932617188 * e, 181.01138305664062 * e, 105.76705932617188 * e), a.bezierCurveTo(175.01138305664062 * e, 108.76705932617188 * e, 172.01138305664062 * e, 104.76705932617188 * e, 164.01138305664062 * e, 84.76705932617188 * e), a.bezierCurveTo(152.51138305664062 * e, 63.267059326171875 * e, 152.51138305664062 * e, 63.267059326171875 * e, 141.01138305664062 * e, 41.767059326171875 * e), a.bezierCurveTo(138.01138305664062 * e, 35.767059326171875 * e, 138.01138305664062 * e, 29.767059326171875 * e, 141.01138305664062 * e, 27.767059326171875 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(70.01138305664062 * e, 76.76705932617188 * e), a.bezierCurveTo(83.01138305664062 * e, 64.26705932617188 * e, 83.01138305664062 * e, 64.26705932617188 * e, 96.01138305664062 * e, 51.767059326171875 * e), a.bezierCurveTo(104.01138305664062 * e, 44.767059326171875 * e, 110.01138305664062 * e, 51.767059326171875 * e, 119.01138305664062 * e, 66.76705932617188 * e), a.bezierCurveTo(135.01138305664062 * e, 88.26705932617188 * e, 135.01138305664062 * e, 88.26705932617188 * e, 151.01138305664062 * e, 109.76705932617188 * e), a.bezierCurveTo(157.01138305664062 * e, 119.76705932617188 * e, 153.01138305664062 * e, 122.76705932617188 * e, 147.01138305664062 * e, 129.76705932617188 * e), a.bezierCurveTo(138.01138305664062 * e, 140.76705932617188 * e, 136.01138305664062 * e, 140.76705932617188 * e, 122.01138305664062 * e, 127.76705932617188 * e), a.bezierCurveTo(99.51138305664062 * e, 110.26705932617188 * e, 99.51138305664062 * e, 110.26705932617188 * e, 77.01138305664062 * e, 92.76705932617188 * e), a.bezierCurveTo(66.01138305664062 * e, 83.76705932617188 * e, 66.01138305664062 * e, 82.76705932617188 * e, 69.01138305664062 * e, 78.76705932617188 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(70.01138305664062 * e, 76.76705932617188 * e), a.bezierCurveTo(83.01138305664062 * e, 64.26705932617188 * e, 83.01138305664062 * e, 64.26705932617188 * e, 96.01138305664062 * e, 51.767059326171875 * e), a.bezierCurveTo(104.01138305664062 * e, 44.767059326171875 * e, 110.01138305664062 * e, 51.767059326171875 * e, 119.01138305664062 * e, 66.76705932617188 * e), a.bezierCurveTo(135.01138305664062 * e, 88.26705932617188 * e, 135.01138305664062 * e, 88.26705932617188 * e, 151.01138305664062 * e, 109.76705932617188 * e), a.bezierCurveTo(157.01138305664062 * e, 119.76705932617188 * e, 153.01138305664062 * e, 122.76705932617188 * e, 147.01138305664062 * e, 129.76705932617188 * e), a.bezierCurveTo(138.01138305664062 * e, 140.76705932617188 * e, 136.01138305664062 * e, 140.76705932617188 * e, 122.01138305664062 * e, 127.76705932617188 * e), a.bezierCurveTo(99.51138305664062 * e, 110.26705932617188 * e, 99.51138305664062 * e, 110.26705932617188 * e, 77.01138305664062 * e, 92.76705932617188 * e), a.bezierCurveTo(66.01138305664062 * e, 83.76705932617188 * e, 66.01138305664062 * e, 82.76705932617188 * e, 69.01138305664062 * e, 78.76705932617188 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(33.011383056640625 * e, 126.76705932617188 * e), a.bezierCurveTo(22.011383056640625 * e, 149.76705932617188 * e, 22.011383056640625 * e, 149.76705932617188 * e, 11.011383056640625 * e, 172.76705932617188 * e), a.bezierCurveTo(7.011383056640625 * e, 184.76705932617188 * e, 11.011383056640625 * e, 189.76705932617188 * e, 36.011383056640625 * e, 195.76705932617188 * e), a.bezierCurveTo(61.011383056640625 * e, 202.26705932617188 * e, 61.011383056640625 * e, 202.26705932617188 * e, 86.01138305664062 * e, 208.76705932617188 * e), a.bezierCurveTo(100.01138305664062 * e, 214.76705932617188 * e, 102.01138305664062 * e, 203.76705932617188 * e, 109.01138305664062 * e, 189.76705932617188 * e), a.bezierCurveTo(117.01138305664062 * e, 171.76705932617188 * e, 116.01138305664062 * e, 166.76705932617188 * e, 97.01138305664062 * e, 156.76705932617188 * e), a.bezierCurveTo(74.01138305664062 * e, 140.76705932617188 * e, 74.01138305664062 * e, 140.76705932617188 * e, 51.011383056640625 * e, 124.76705932617188 * e), a.bezierCurveTo(42.011383056640625 * e, 118.76705932617188 * e, 37.011383056640625 * e, 119.76705932617188 * e, 33.011383056640625 * e, 126.76705932617188 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(33.011383056640625 * e, 126.76705932617188 * e), a.bezierCurveTo(22.011383056640625 * e, 149.76705932617188 * e, 22.011383056640625 * e, 149.76705932617188 * e, 11.011383056640625 * e, 172.76705932617188 * e), a.bezierCurveTo(7.011383056640625 * e, 184.76705932617188 * e, 11.011383056640625 * e, 189.76705932617188 * e, 36.011383056640625 * e, 195.76705932617188 * e), a.bezierCurveTo(61.011383056640625 * e, 202.26705932617188 * e, 61.011383056640625 * e, 202.26705932617188 * e, 86.01138305664062 * e, 208.76705932617188 * e), a.bezierCurveTo(100.01138305664062 * e, 214.76705932617188 * e, 102.01138305664062 * e, 203.76705932617188 * e, 109.01138305664062 * e, 189.76705932617188 * e), a.bezierCurveTo(117.01138305664062 * e, 171.76705932617188 * e, 116.01138305664062 * e, 166.76705932617188 * e, 97.01138305664062 * e, 156.76705932617188 * e), a.bezierCurveTo(74.01138305664062 * e, 140.76705932617188 * e, 74.01138305664062 * e, 140.76705932617188 * e, 51.011383056640625 * e, 124.76705932617188 * e), a.bezierCurveTo(42.011383056640625 * e, 118.76705932617188 * e, 37.011383056640625 * e, 119.76705932617188 * e, 33.011383056640625 * e, 126.76705932617188 * e), a.closePath(), fill_path(a, i[3], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(13.011383056640625 * e, 229.76705932617188 * e), a.bezierCurveTo(45.511383056640625 * e, 233.76705932617188 * e, 45.511383056640625 * e, 233.76705932617188 * e, 78.01138305664062 * e, 237.76705932617188 * e), a.bezierCurveTo(92.01138305664062 * e, 239.76705932617188 * e, 92.01138305664062 * e, 246.76705932617188 * e, 91.01138305664062 * e, 257.7670593261719 * e), a.bezierCurveTo(92.01138305664062 * e, 275.7670593261719 * e, 91.01138305664062 * e, 274.7670593261719 * e, 68.01138305664062 * e, 276.7670593261719 * e), a.bezierCurveTo(42.511383056640625 * e, 279.7670593261719 * e, 42.511383056640625 * e, 279.7670593261719 * e, 17.011383056640625 * e, 282.7670593261719 * e), a.bezierCurveTo(2.011383056640625 * e, 282.7670593261719 * e, 3.011383056640625 * e, 276.7670593261719 * e, 2.011383056640625 * e, 260.7670593261719 * e), a.bezierCurveTo(2.011383056640625 * e, 231.76705932617188 * e, 4.011383056640625 * e, 232.76705932617188 * e, 11.011383056640625 * e, 230.76705932617188 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(13.011383056640625 * e, 229.76705932617188 * e), a.bezierCurveTo(45.511383056640625 * e, 233.76705932617188 * e, 45.511383056640625 * e, 233.76705932617188 * e, 78.01138305664062 * e, 237.76705932617188 * e), a.bezierCurveTo(92.01138305664062 * e, 239.76705932617188 * e, 92.01138305664062 * e, 246.76705932617188 * e, 91.01138305664062 * e, 257.7670593261719 * e), a.bezierCurveTo(92.01138305664062 * e, 275.7670593261719 * e, 91.01138305664062 * e, 274.7670593261719 * e, 68.01138305664062 * e, 276.7670593261719 * e), a.bezierCurveTo(42.511383056640625 * e, 279.7670593261719 * e, 42.511383056640625 * e, 279.7670593261719 * e, 17.011383056640625 * e, 282.7670593261719 * e), a.bezierCurveTo(2.011383056640625 * e, 282.7670593261719 * e, 3.011383056640625 * e, 276.7670593261719 * e, 2.011383056640625 * e, 260.7670593261719 * e), a.bezierCurveTo(2.011383056640625 * e, 231.76705932617188 * e, 4.011383056640625 * e, 232.76705932617188 * e, 11.011383056640625 * e, 230.76705932617188 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(97.01138305664062 * e, 329.7670593261719 * e), a.bezierCurveTo(68.51138305664062 * e, 343.7670593261719 * e, 68.51138305664062 * e, 343.7670593261719 * e, 40.011383056640625 * e, 357.7670593261719 * e), a.bezierCurveTo(29.011383056640625 * e, 360.7670593261719 * e, 27.011383056640625 * e, 361.7670593261719 * e, 20.011383056640625 * e, 346.7670593261719 * e), a.bezierCurveTo(16.511383056640625 * e, 336.2670593261719 * e, 16.511383056640625 * e, 336.2670593261719 * e, 13.011383056640625 * e, 325.7670593261719 * e), a.bezierCurveTo(10.011383056640625 * e, 307.7670593261719 * e, 18.011383056640625 * e, 312.7670593261719 * e, 34.011383056640625 * e, 306.7670593261719 * e), a.bezierCurveTo(59.511383056640625 * e, 302.2670593261719 * e, 59.511383056640625 * e, 302.2670593261719 * e, 85.01138305664062 * e, 297.7670593261719 * e), a.bezierCurveTo(97.01138305664062 * e, 294.7670593261719 * e, 100.01138305664062 * e, 297.7670593261719 * e, 100.01138305664062 * e, 307.7670593261719 * e), a.bezierCurveTo(105.01138305664062 * e, 326.7670593261719 * e, 103.01138305664062 * e, 325.7670593261719 * e, 97.01138305664062 * e, 329.7670593261719 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(97.01138305664062 * e, 329.7670593261719 * e), a.bezierCurveTo(68.51138305664062 * e, 343.7670593261719 * e, 68.51138305664062 * e, 343.7670593261719 * e, 40.011383056640625 * e, 357.7670593261719 * e), a.bezierCurveTo(29.011383056640625 * e, 360.7670593261719 * e, 27.011383056640625 * e, 361.7670593261719 * e, 20.011383056640625 * e, 346.7670593261719 * e), a.bezierCurveTo(16.511383056640625 * e, 336.2670593261719 * e, 16.511383056640625 * e, 336.2670593261719 * e, 13.011383056640625 * e, 325.7670593261719 * e), a.bezierCurveTo(10.011383056640625 * e, 307.7670593261719 * e, 18.011383056640625 * e, 312.7670593261719 * e, 34.011383056640625 * e, 306.7670593261719 * e), a.bezierCurveTo(59.511383056640625 * e, 302.2670593261719 * e, 59.511383056640625 * e, 302.2670593261719 * e, 85.01138305664062 * e, 297.7670593261719 * e), a.bezierCurveTo(97.01138305664062 * e, 294.7670593261719 * e, 100.01138305664062 * e, 297.7670593261719 * e, 100.01138305664062 * e, 307.7670593261719 * e), a.bezierCurveTo(105.01138305664062 * e, 326.7670593261719 * e, 103.01138305664062 * e, 325.7670593261719 * e, 97.01138305664062 * e, 329.7670593261719 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(394.0113830566406 * e, 181.76705932617188 * e), a.bezierCurveTo(426.5113830566406 * e, 166.76705932617188 * e, 426.5113830566406 * e, 166.76705932617188 * e, 459.0113830566406 * e, 151.76705932617188 * e), a.bezierCurveTo(469.0113830566406 * e, 152.76705932617188 * e, 469.0113830566406 * e, 155.76705932617188 * e, 472.0113830566406 * e, 165.76705932617188 * e), a.bezierCurveTo(476.0113830566406 * e, 177.26705932617188 * e, 476.0113830566406 * e, 177.26705932617188 * e, 480.0113830566406 * e, 188.76705932617188 * e), a.bezierCurveTo(483.0113830566406 * e, 199.76705932617188 * e, 480.0113830566406 * e, 200.76705932617188 * e, 460.0113830566406 * e, 205.76705932617188 * e), a.bezierCurveTo(433.5113830566406 * e, 210.26705932617188 * e, 433.5113830566406 * e, 210.26705932617188 * e, 407.0113830566406 * e, 214.76705932617188 * e), a.bezierCurveTo(395.0113830566406 * e, 218.76705932617188 * e, 397.0113830566406 * e, 211.76705932617188 * e, 393.0113830566406 * e, 202.76705932617188 * e), a.bezierCurveTo(387.0113830566406 * e, 188.76705932617188 * e, 387.0113830566406 * e, 187.76705932617188 * e, 394.0113830566406 * e, 181.76705932617188 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(394.0113830566406 * e, 181.76705932617188 * e), a.bezierCurveTo(426.5113830566406 * e, 166.76705932617188 * e, 426.5113830566406 * e, 166.76705932617188 * e, 459.0113830566406 * e, 151.76705932617188 * e), a.bezierCurveTo(469.0113830566406 * e, 152.76705932617188 * e, 469.0113830566406 * e, 155.76705932617188 * e, 472.0113830566406 * e, 165.76705932617188 * e), a.bezierCurveTo(476.0113830566406 * e, 177.26705932617188 * e, 476.0113830566406 * e, 177.26705932617188 * e, 480.0113830566406 * e, 188.76705932617188 * e), a.bezierCurveTo(483.0113830566406 * e, 199.76705932617188 * e, 480.0113830566406 * e, 200.76705932617188 * e, 460.0113830566406 * e, 205.76705932617188 * e), a.bezierCurveTo(433.5113830566406 * e, 210.26705932617188 * e, 433.5113830566406 * e, 210.26705932617188 * e, 407.0113830566406 * e, 214.76705932617188 * e), a.bezierCurveTo(395.0113830566406 * e, 218.76705932617188 * e, 397.0113830566406 * e, 211.76705932617188 * e, 393.0113830566406 * e, 202.76705932617188 * e), a.bezierCurveTo(387.0113830566406 * e, 188.76705932617188 * e, 387.0113830566406 * e, 187.76705932617188 * e, 394.0113830566406 * e, 181.76705932617188 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(411.0113830566406 * e, 234.76705932617188 * e), a.bezierCurveTo(446.0113830566406 * e, 233.26705932617188 * e, 446.0113830566406 * e, 233.26705932617188 * e, 481.0113830566406 * e, 231.76705932617188 * e), a.bezierCurveTo(491.0113830566406 * e, 232.76705932617188 * e, 493.0113830566406 * e, 239.76705932617188 * e, 491.0113830566406 * e, 251.76705932617188 * e), a.bezierCurveTo(490.0113830566406 * e, 263.7670593261719 * e, 490.0113830566406 * e, 263.7670593261719 * e, 489.0113830566406 * e, 275.7670593261719 * e), a.bezierCurveTo(487.0113830566406 * e, 283.7670593261719 * e, 483.0113830566406 * e, 284.7670593261719 * e, 464.0113830566406 * e, 280.7670593261719 * e), a.bezierCurveTo(437.0113830566406 * e, 273.7670593261719 * e, 437.0113830566406 * e, 273.7670593261719 * e, 410.0113830566406 * e, 266.7670593261719 * e), a.bezierCurveTo(400.0113830566406 * e, 261.7670593261719 * e, 401.0113830566406 * e, 259.7670593261719 * e, 402.0113830566406 * e, 249.76705932617188 * e), a.bezierCurveTo(401.0113830566406 * e, 237.76705932617188 * e, 403.0113830566406 * e, 235.76705932617188 * e, 408.0113830566406 * e, 234.76705932617188 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(411.0113830566406 * e, 234.76705932617188 * e), a.bezierCurveTo(446.0113830566406 * e, 233.26705932617188 * e, 446.0113830566406 * e, 233.26705932617188 * e, 481.0113830566406 * e, 231.76705932617188 * e), a.bezierCurveTo(491.0113830566406 * e, 232.76705932617188 * e, 493.0113830566406 * e, 239.76705932617188 * e, 491.0113830566406 * e, 251.76705932617188 * e), a.bezierCurveTo(490.0113830566406 * e, 263.7670593261719 * e, 490.0113830566406 * e, 263.7670593261719 * e, 489.0113830566406 * e, 275.7670593261719 * e), a.bezierCurveTo(487.0113830566406 * e, 283.7670593261719 * e, 483.0113830566406 * e, 284.7670593261719 * e, 464.0113830566406 * e, 280.7670593261719 * e), a.bezierCurveTo(437.0113830566406 * e, 273.7670593261719 * e, 437.0113830566406 * e, 273.7670593261719 * e, 410.0113830566406 * e, 266.7670593261719 * e), a.bezierCurveTo(400.0113830566406 * e, 261.7670593261719 * e, 401.0113830566406 * e, 259.7670593261719 * e, 402.0113830566406 * e, 249.76705932617188 * e), a.bezierCurveTo(401.0113830566406 * e, 237.76705932617188 * e, 403.0113830566406 * e, 235.76705932617188 * e, 408.0113830566406 * e, 234.76705932617188 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(400.0113830566406 * e, 290.7670593261719 * e), a.bezierCurveTo(437.0113830566406 * e, 301.2670593261719 * e, 437.0113830566406 * e, 301.2670593261719 * e, 474.0113830566406 * e, 311.7670593261719 * e), a.bezierCurveTo(484.0113830566406 * e, 319.7670593261719 * e, 481.0113830566406 * e, 322.7670593261719 * e, 474.0113830566406 * e, 335.7670593261719 * e), a.bezierCurveTo(465.5113830566406 * e, 354.7670593261719 * e, 465.5113830566406 * e, 354.7670593261719 * e, 457.0113830566406 * e, 373.7670593261719 * e), a.bezierCurveTo(449.0113830566406 * e, 386.7670593261719 * e, 444.0113830566406 * e, 384.7670593261719 * e, 427.0113830566406 * e, 370.7670593261719 * e), a.bezierCurveTo(403.0113830566406 * e, 354.7670593261719 * e, 403.0113830566406 * e, 354.7670593261719 * e, 379.0113830566406 * e, 338.7670593261719 * e), a.bezierCurveTo(371.0113830566406 * e, 327.7670593261719 * e, 373.0113830566406 * e, 323.7670593261719 * e, 377.0113830566406 * e, 313.7670593261719 * e), a.bezierCurveTo(386.0113830566406 * e, 292.7670593261719 * e, 393.0113830566406 * e, 288.7670593261719 * e, 398.0113830566406 * e, 291.7670593261719 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(400.0113830566406 * e, 290.7670593261719 * e), a.bezierCurveTo(437.0113830566406 * e, 301.2670593261719 * e, 437.0113830566406 * e, 301.2670593261719 * e, 474.0113830566406 * e, 311.7670593261719 * e), a.bezierCurveTo(484.0113830566406 * e, 319.7670593261719 * e, 481.0113830566406 * e, 322.7670593261719 * e, 474.0113830566406 * e, 335.7670593261719 * e), a.bezierCurveTo(465.5113830566406 * e, 354.7670593261719 * e, 465.5113830566406 * e, 354.7670593261719 * e, 457.0113830566406 * e, 373.7670593261719 * e), a.bezierCurveTo(449.0113830566406 * e, 386.7670593261719 * e, 444.0113830566406 * e, 384.7670593261719 * e, 427.0113830566406 * e, 370.7670593261719 * e), a.bezierCurveTo(403.0113830566406 * e, 354.7670593261719 * e, 403.0113830566406 * e, 354.7670593261719 * e, 379.0113830566406 * e, 338.7670593261719 * e), a.bezierCurveTo(371.0113830566406 * e, 327.7670593261719 * e, 373.0113830566406 * e, 323.7670593261719 * e, 377.0113830566406 * e, 313.7670593261719 * e), a.bezierCurveTo(386.0113830566406 * e, 292.7670593261719 * e, 393.0113830566406 * e, 288.7670593261719 * e, 398.0113830566406 * e, 291.7670593261719 * e), a.closePath(), fill_path(a, i[3], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(366.0113830566406 * e, 361.2216033935547 * e), a.bezierCurveTo(393.0113830566406 * e, 383.2216033935547 * e, 393.0113830566406 * e, 383.2216033935547 * e, 420.0113830566406 * e, 405.2216033935547 * e), a.bezierCurveTo(427.0113830566406 * e, 414.2216033935547 * e, 425.0113830566406 * e, 417.2216033935547 * e, 413.0113830566406 * e, 428.2216033935547 * e), a.bezierCurveTo(405.5113830566406 * e, 435.2216033935547 * e, 405.5113830566406 * e, 435.2216033935547 * e, 398.0113830566406 * e, 442.2216033935547 * e), a.bezierCurveTo(388.0113830566406 * e, 451.2216033935547 * e, 385.0113830566406 * e, 445.2216033935547 * e, 373.0113830566406 * e, 428.2216033935547 * e), a.bezierCurveTo(358.5113830566406 * e, 408.2216033935547 * e, 358.5113830566406 * e, 408.2216033935547 * e, 344.0113830566406 * e, 388.2216033935547 * e), a.bezierCurveTo(337.0113830566406 * e, 378.2216033935547 * e, 342.0113830566406 * e, 377.2216033935547 * e, 347.0113830566406 * e, 371.2216033935547 * e), a.bezierCurveTo(359.0113830566406 * e, 359.2216033935547 * e, 361.0113830566406 * e, 358.2216033935547 * e, 364.0113830566406 * e, 361.2216033935547 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(366.0113830566406 * e, 361.2216033935547 * e), a.bezierCurveTo(393.0113830566406 * e, 383.2216033935547 * e, 393.0113830566406 * e, 383.2216033935547 * e, 420.0113830566406 * e, 405.2216033935547 * e), a.bezierCurveTo(427.0113830566406 * e, 414.2216033935547 * e, 425.0113830566406 * e, 417.2216033935547 * e, 413.0113830566406 * e, 428.2216033935547 * e), a.bezierCurveTo(405.5113830566406 * e, 435.2216033935547 * e, 405.5113830566406 * e, 435.2216033935547 * e, 398.0113830566406 * e, 442.2216033935547 * e), a.bezierCurveTo(388.0113830566406 * e, 451.2216033935547 * e, 385.0113830566406 * e, 445.2216033935547 * e, 373.0113830566406 * e, 428.2216033935547 * e), a.bezierCurveTo(358.5113830566406 * e, 408.2216033935547 * e, 358.5113830566406 * e, 408.2216033935547 * e, 344.0113830566406 * e, 388.2216033935547 * e), a.bezierCurveTo(337.0113830566406 * e, 378.2216033935547 * e, 342.0113830566406 * e, 377.2216033935547 * e, 347.0113830566406 * e, 371.2216033935547 * e), a.bezierCurveTo(359.0113830566406 * e, 359.2216033935547 * e, 361.0113830566406 * e, 358.2216033935547 * e, 364.0113830566406 * e, 361.2216033935547 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(323.0113830566406 * e, 393.2216033935547 * e), a.bezierCurveTo(338.0113830566406 * e, 424.7216033935547 * e, 338.0113830566406 * e, 424.7216033935547 * e, 353.0113830566406 * e, 456.2216033935547 * e), a.bezierCurveTo(355.0113830566406 * e, 467.2216033935547 * e, 354.0113830566406 * e, 469.2216033935547 * e, 336.0113830566406 * e, 475.2216033935547 * e), a.bezierCurveTo(326.0113830566406 * e, 478.2216033935547 * e, 326.0113830566406 * e, 478.2216033935547 * e, 316.0113830566406 * e, 481.2216033935547 * e), a.bezierCurveTo(304.0113830566406 * e, 484.2216033935547 * e, 304.0113830566406 * e, 477.2216033935547 * e, 301.0113830566406 * e, 454.2216033935547 * e), a.bezierCurveTo(295.5113830566406 * e, 429.2216033935547 * e, 295.5113830566406 * e, 429.2216033935547 * e, 290.0113830566406 * e, 404.2216033935547 * e), a.bezierCurveTo(287.0113830566406 * e, 396.2216033935547 * e, 297.0113830566406 * e, 394.2216033935547 * e, 303.0113830566406 * e, 392.2216033935547 * e), a.bezierCurveTo(316.0113830566406 * e, 387.2216033935547 * e, 318.0113830566406 * e, 387.2216033935547 * e, 323.0113830566406 * e, 394.2216033935547 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(323.0113830566406 * e, 393.2216033935547 * e), a.bezierCurveTo(338.0113830566406 * e, 424.7216033935547 * e, 338.0113830566406 * e, 424.7216033935547 * e, 353.0113830566406 * e, 456.2216033935547 * e), a.bezierCurveTo(355.0113830566406 * e, 467.2216033935547 * e, 354.0113830566406 * e, 469.2216033935547 * e, 336.0113830566406 * e, 475.2216033935547 * e), a.bezierCurveTo(326.0113830566406 * e, 478.2216033935547 * e, 326.0113830566406 * e, 478.2216033935547 * e, 316.0113830566406 * e, 481.2216033935547 * e), a.bezierCurveTo(304.0113830566406 * e, 484.2216033935547 * e, 304.0113830566406 * e, 477.2216033935547 * e, 301.0113830566406 * e, 454.2216033935547 * e), a.bezierCurveTo(295.5113830566406 * e, 429.2216033935547 * e, 295.5113830566406 * e, 429.2216033935547 * e, 290.0113830566406 * e, 404.2216033935547 * e), a.bezierCurveTo(287.0113830566406 * e, 396.2216033935547 * e, 297.0113830566406 * e, 394.2216033935547 * e, 303.0113830566406 * e, 392.2216033935547 * e), a.bezierCurveTo(316.0113830566406 * e, 387.2216033935547 * e, 318.0113830566406 * e, 387.2216033935547 * e, 323.0113830566406 * e, 394.2216033935547 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(270.0113830566406 * e, 413.2216033935547 * e), a.bezierCurveTo(271.0113830566406 * e, 445.7216033935547 * e, 271.0113830566406 * e, 445.7216033935547 * e, 272.0113830566406 * e, 478.2216033935547 * e), a.bezierCurveTo(273.0113830566406 * e, 490.2216033935547 * e, 267.0113830566406 * e, 493.2216033935547 * e, 249.01138305664062 * e, 490.2216033935547 * e), a.bezierCurveTo(222.01138305664062 * e, 492.2216033935547 * e, 220.01138305664062 * e, 485.2216033935547 * e, 225.01138305664062 * e, 467.2216033935547 * e), a.bezierCurveTo(230.51138305664062 * e, 440.2216033935547 * e, 230.51138305664062 * e, 440.2216033935547 * e, 236.01138305664062 * e, 413.2216033935547 * e), a.bezierCurveTo(237.01138305664062 * e, 405.2216033935547 * e, 238.01138305664062 * e, 404.2216033935547 * e, 253.01138305664062 * e, 403.2216033935547 * e), a.bezierCurveTo(269.0113830566406 * e, 405.2216033935547 * e, 270.0113830566406 * e, 407.2216033935547 * e, 269.0113830566406 * e, 412.2216033935547 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(270.0113830566406 * e, 413.2216033935547 * e), a.bezierCurveTo(271.0113830566406 * e, 445.7216033935547 * e, 271.0113830566406 * e, 445.7216033935547 * e, 272.0113830566406 * e, 478.2216033935547 * e), a.bezierCurveTo(273.0113830566406 * e, 490.2216033935547 * e, 267.0113830566406 * e, 493.2216033935547 * e, 249.01138305664062 * e, 490.2216033935547 * e), a.bezierCurveTo(222.01138305664062 * e, 492.2216033935547 * e, 220.01138305664062 * e, 485.2216033935547 * e, 225.01138305664062 * e, 467.2216033935547 * e), a.bezierCurveTo(230.51138305664062 * e, 440.2216033935547 * e, 230.51138305664062 * e, 440.2216033935547 * e, 236.01138305664062 * e, 413.2216033935547 * e), a.bezierCurveTo(237.01138305664062 * e, 405.2216033935547 * e, 238.01138305664062 * e, 404.2216033935547 * e, 253.01138305664062 * e, 403.2216033935547 * e), a.bezierCurveTo(269.0113830566406 * e, 405.2216033935547 * e, 270.0113830566406 * e, 407.2216033935547 * e, 269.0113830566406 * e, 412.2216033935547 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(207.01138305664062 * e, 406.2216033935547 * e), a.bezierCurveTo(197.51138305664062 * e, 440.7216033935547 * e, 197.51138305664062 * e, 440.7216033935547 * e, 188.01138305664062 * e, 475.2216033935547 * e), a.bezierCurveTo(184.01138305664062 * e, 485.2216033935547 * e, 179.01138305664062 * e, 491.2216033935547 * e, 152.01138305664062 * e, 477.2216033935547 * e), a.bezierCurveTo(136.51138305664062 * e, 469.7216033935547 * e, 136.51138305664062 * e, 469.7216033935547 * e, 121.01138305664062 * e, 462.2216033935547 * e), a.bezierCurveTo(109.01138305664062 * e, 453.2216033935547 * e, 117.01138305664062 * e, 447.2216033935547 * e, 133.01138305664062 * e, 427.2216033935547 * e), a.bezierCurveTo(146.51138305664062 * e, 406.7216033935547 * e, 146.51138305664062 * e, 406.7216033935547 * e, 160.01138305664062 * e, 386.2216033935547 * e), a.bezierCurveTo(163.01138305664062 * e, 377.2216033935547 * e, 168.01138305664062 * e, 378.2216033935547 * e, 187.01138305664062 * e, 387.2216033935547 * e), a.bezierCurveTo(206.01138305664062 * e, 395.2216033935547 * e, 208.01138305664062 * e, 398.2216033935547 * e, 207.01138305664062 * e, 405.2216033935547 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(207.01138305664062 * e, 406.2216033935547 * e), a.bezierCurveTo(197.51138305664062 * e, 440.7216033935547 * e, 197.51138305664062 * e, 440.7216033935547 * e, 188.01138305664062 * e, 475.2216033935547 * e), a.bezierCurveTo(184.01138305664062 * e, 485.2216033935547 * e, 179.01138305664062 * e, 491.2216033935547 * e, 152.01138305664062 * e, 477.2216033935547 * e), a.bezierCurveTo(136.51138305664062 * e, 469.7216033935547 * e, 136.51138305664062 * e, 469.7216033935547 * e, 121.01138305664062 * e, 462.2216033935547 * e), a.bezierCurveTo(109.01138305664062 * e, 453.2216033935547 * e, 117.01138305664062 * e, 447.2216033935547 * e, 133.01138305664062 * e, 427.2216033935547 * e), a.bezierCurveTo(146.51138305664062 * e, 406.7216033935547 * e, 146.51138305664062 * e, 406.7216033935547 * e, 160.01138305664062 * e, 386.2216033935547 * e), a.bezierCurveTo(163.01138305664062 * e, 377.2216033935547 * e, 168.01138305664062 * e, 378.2216033935547 * e, 187.01138305664062 * e, 387.2216033935547 * e), a.bezierCurveTo(206.01138305664062 * e, 395.2216033935547 * e, 208.01138305664062 * e, 398.2216033935547 * e, 207.01138305664062 * e, 405.2216033935547 * e), a.closePath(), fill_path(a, i[3], i[2], 12 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(130.01138305664062 * e, 375.2216033935547 * e), a.bezierCurveTo(109.51138305664062 * e, 400.7216033935547 * e, 109.51138305664062 * e, 400.7216033935547 * e, 89.01138305664062 * e, 426.2216033935547 * e), a.bezierCurveTo(82.01138305664062 * e, 435.2216033935547 * e, 77.01138305664062 * e, 435.2216033935547 * e, 62.011383056640625 * e, 417.2216033935547 * e), a.bezierCurveTo(43.011383056640625 * e, 397.2216033935547 * e, 47.011383056640625 * e, 395.2216033935547 * e, 62.011383056640625 * e, 382.2216033935547 * e), a.bezierCurveTo(84.01138305664062 * e, 366.7216033935547 * e, 84.01138305664062 * e, 366.7216033935547 * e, 106.01138305664062 * e, 351.2216033935547 * e), a.bezierCurveTo(116.01138305664062 * e, 344.2216033935547 * e, 120.01138305664062 * e, 347.2216033935547 * e, 127.01138305664062 * e, 356.2216033935547 * e), a.bezierCurveTo(137.01138305664062 * e, 366.2216033935547 * e, 137.01138305664062 * e, 366.2216033935547 * e, 131.01138305664062 * e, 376.2216033935547 * e), a.closePath(), fill_path(a, i[0], i[0], 12 * e), a.globalAlpha = 1, a.translate(0, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(130.01138305664062 * e, 375.2216033935547 * e), a.bezierCurveTo(109.51138305664062 * e, 400.7216033935547 * e, 109.51138305664062 * e, 400.7216033935547 * e, 89.01138305664062 * e, 426.2216033935547 * e), a.bezierCurveTo(82.01138305664062 * e, 435.2216033935547 * e, 77.01138305664062 * e, 435.2216033935547 * e, 62.011383056640625 * e, 417.2216033935547 * e), a.bezierCurveTo(43.011383056640625 * e, 397.2216033935547 * e, 47.011383056640625 * e, 395.2216033935547 * e, 62.011383056640625 * e, 382.2216033935547 * e), a.bezierCurveTo(84.01138305664062 * e, 366.7216033935547 * e, 84.01138305664062 * e, 366.7216033935547 * e, 106.01138305664062 * e, 351.2216033935547 * e), a.bezierCurveTo(116.01138305664062 * e, 344.2216033935547 * e, 120.01138305664062 * e, 347.2216033935547 * e, 127.01138305664062 * e, 356.2216033935547 * e), a.bezierCurveTo(137.01138305664062 * e, 366.2216033935547 * e, 137.01138305664062 * e, 366.2216033935547 * e, 131.01138305664062 * e, 376.2216033935547 * e), a.closePath(), fill_path(a, i[4], i[2], 12 * e), r
}

function create_sand(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 218 * e, r.height = 185 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(64 * e, 53.135406494140625 * e), a.bezierCurveTo(92 * e, 17.135406494140625 * e, 116 * e, 11.135406494140625 * e, 158 * e, 53.135406494140625 * e), a.bezierCurveTo(178 * e, 74.13540649414062 * e, 181 * e, 81.13540649414062 * e, 196 * e, 101.13540649414062 * e), a.bezierCurveTo(214 * e, 127.13540649414062 * e, 192 * e, 138.13540649414062 * e, 173 * e, 149.13540649414062 * e), a.bezierCurveTo(137 * e, 166.13540649414062 * e, 74 * e, 170.13540649414062 * e, 36 * e, 141.13540649414062 * e), a.bezierCurveTo(13 * e, 127.13540649414062 * e, 20 * e, 119.13540649414062 * e, 30 * e, 103.13540649414062 * e), a.bezierCurveTo(48 * e, 71.13540649414062 * e, 54 * e, 67.13540649414062 * e, 63 * e, 54.135406494140625 * e), a.closePath(), fill_path(a, i[0], i[1], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(107 * e, 25.135406494140625 * e), a.bezierCurveTo(62 * e, 90.13540649414062 * e, 54 * e, 129.13540649414062 * e, 53 * e, 151.13540649414062 * e), a.bezierCurveTo(39.5 * e, 142.13540649414062 * e, 39.5 * e, 142.13540649414062 * e, 26 * e, 133.13540649414062 * e), a.bezierCurveTo(23.5 * e, 128.63540649414062 * e, 23.5 * e, 128.63540649414062 * e, 21 * e, 124.13540649414062 * e), a.bezierCurveTo(22 * e, 113.13540649414062 * e, 31 * e, 99.13540649414062 * e, 40 * e, 88.13540649414062 * e), a.bezierCurveTo(54.5 * e, 67.13540649414062 * e, 54.5 * e, 67.13540649414062 * e, 69 * e, 46.135406494140625 * e), a.bezierCurveTo(80.5 * e, 36.635406494140625 * e, 80.5 * e, 36.635406494140625 * e, 92 * e, 27.135406494140625 * e), a.closePath(), fill_path(a, i[1]), r
}

function create_ice(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 167 * e, r.height = 136 * e, a.globalAlpha = .5, a.save(), a.translate(76.71426391601562 * e, 67.85713195800781 * e), round_rect(a, -57.5 * e, -54.5 * e, 115 * e, 109 * e, 15 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = .8, a.save(), a.translate(76.71426391601562 * e, 67.85713195800781 * e), round_rect(a, -57.5 * e, -54.5 * e, 115 * e, 109 * e, 15 * e), a.restore(), fill_path(a, void 0, i[1], 7 * e), a.globalAlpha = .5, a.save(), a.translate(91.21426391601562 * e, 67.35713195800781 * e), round_rect(a, -56 * e, -55 * e, 115 * e, 109 * e, 15 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.save(), a.translate(91.21426391601562 * e, 67.35713195800781 * e), round_rect(a, -56 * e, -55 * e, 115 * e, 109 * e, 15 * e), a.restore(), fill_path(a, void 0, i[1], 7 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(131.21426391601562 * e, 70.35713195800781 * e), a.bezierCurveTo(133.21426391601562 * e, 95.35713195800781 * e, 128.21426391601562 * e, 109.35713195800781 * e, 108.21426391601562 * e, 108.35713195800781 * e), fill_path(a, void 0, i[1], 10 * e), r
}

function create_plot(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 163 * e, r.height = 163 * e, a.save(), a.translate(82.5 * e, 81.1015625 * e), a.rotate(0), round_rect(a, -65.5 * e, -66 * e, 131 * e, 131 * e, 5 * e), a.restore(), fill_path(a, i[1]), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(80 * e, 17.1015625 * e), round_rect(a, -64 * e, -4.5 * e, 129 * e, 9 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(80 * e, 17.1015625 * e), round_rect(a, -64 * e, -4.5 * e, 129 * e, 9 * e, 5 * e), a.restore(), fill_path(a, i[2], i[3], 3 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(145.5 * e, 83.6015625 * e), round_rect(a, -4.5 * e, -61 * e, 9 * e, 129 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(145.5 * e, 83.6015625 * e), round_rect(a, -4.5 * e, -61 * e, 9 * e, 129 * e, 5 * e), a.restore(), fill_path(a, i[2], i[3], 3 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(17.5 * e, 82.6015625 * e), round_rect(a, -4.5 * e, -65 * e, 9 * e, 129 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(17.5 * e, 82.6015625 * e), round_rect(a, -4.5 * e, -65 * e, 9 * e, 129 * e, 5 * e), a.restore(), fill_path(a, i[2], i[3], 3 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(80.5 * e, 145.6015625 * e), round_rect(a, -65.5 * e, -4 * e, 129 * e, 9 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(80.5 * e, 145.6015625 * e), round_rect(a, -65.5 * e, -4 * e, 129 * e, 9 * e, 5 * e), a.restore(), fill_path(a, i[2], i[3], 3 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(17 * e, 18.1015625 * e), round_rect(a, -11 * e, -11.5 * e, 22 * e, 22 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(17 * e, 18.1015625 * e), round_rect(a, -11 * e, -11.5 * e, 22 * e, 22 * e, 5 * e), a.restore(), fill_path(a, i[2], i[3], 3 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(145.5 * e, 16.6015625 * e), round_rect(a, -10.5 * e, -11.5 * e, 21 * e, 22 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(145.5 * e, 16.6015625 * e), round_rect(a, -10.5 * e, -11.5 * e, 21 * e, 22 * e, 5 * e), a.restore(), fill_path(a, i[2], i[3], 3 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(145.5 * e, 144.1015625 * e), round_rect(a, -10.5 * e, -11 * e, 22 * e, 22 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(145.5 * e, 144.1015625 * e), round_rect(a, -10.5 * e, -11 * e, 22 * e, 22 * e, 5 * e), a.restore(), fill_path(a, i[2], i[3], 3 * e), a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), a.translate(17.5 * e, 145.1015625 * e), round_rect(a, -11.5 * e, -12 * e, 22 * e, 22 * e, 5 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), a.translate(17.5 * e, 145.1015625 * e), round_rect(a, -11.5 * e, -12 * e, 22 * e, 22 * e, 5 * e), a.restore(), fill_path(a, i[2], i[3], 3 * e), r
}

function create_watering_can(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 168 * e, r.height = 100 * e, a.globalAlpha = t ? .5 : 1, a.translate(10 * e, 5 * e), a.save(), a.translate(24.5 * e, 44.30000305175781 * e), round_rect(a, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115 * e, 37.80000305175781 * e), a.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e), a.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e), a.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e), a.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e), a.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e), a.closePath(), fill_path(a, i[0]), circle(a, 78 * e, 44.80000305175781 * e, 39.44616584663204 * e), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-10 * e, -5 * e), a.save(), a.translate(24.5 * e, 44.30000305175781 * e), round_rect(a, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e), a.restore(), fill_path(a, void 0, i[3], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115 * e, 37.80000305175781 * e), a.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e), a.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e), a.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e), a.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e), a.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e), a.closePath(), fill_path(a, void 0, i[3], 6 * e), circle(a, 78 * e, 44.80000305175781 * e, 42.44616584663204 * e), fill_path(a, void 0, i[3], 6 * e), a.save(), a.translate(24.5 * e, 44.30000305175781 * e), round_rect(a, -19.5 * e, -8.5 * e, 39 * e, 17 * e, 10 * e), a.restore(), fill_path(a, i[1]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115 * e, 37.80000305175781 * e), a.bezierCurveTo(142 * e, 37.80000305175781 * e, 140 * e, 37.80000305175781 * e, 141 * e, 37.80000305175781 * e), a.bezierCurveTo(147 * e, 28.800003051757812 * e, 149 * e, 26.800003051757812 * e, 153 * e, 32.80000305175781 * e), a.bezierCurveTo(160 * e, 42.80000305175781 * e, 157 * e, 50.80000305175781 * e, 153 * e, 58.80000305175781 * e), a.bezierCurveTo(148 * e, 62.80000305175781 * e, 147 * e, 59.80000305175781 * e, 143 * e, 52.80000305175781 * e), a.bezierCurveTo(129 * e, 52.80000305175781 * e, 129 * e, 52.80000305175781 * e, 115 * e, 52.80000305175781 * e), a.closePath(), fill_path(a, i[1]), circle(a, 78 * e, 44.80000305175781 * e, 39.44616584663204 * e), fill_path(a, i[2], i[1], 4 * e), circle(a, 78 * e, 44.80000305175781 * e, 29.68164415931166 * e), fill_path(a, i[3], i[1], 4 * e), circle(a, 78 * e, 44 * e, 20 * e), fill_path(a, i[4]), r
}

function create_pirahna(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 158 * e, r.height = 201 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(96.5 * e, 76.421875 * e), a.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e), a.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e), a.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e), a.closePath(), fill_path(a, i[8], i[8], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(61.5 * e, 78.421875 * e), a.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e), a.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e), a.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e), a.closePath(), fill_path(a, i[8], i[8], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(116.5 * e, 127.421875 * e), a.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e), a.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e), a.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e), a.closePath(), fill_path(a, i[8], i[8], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41.5 * e, 134.421875 * e), a.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e), a.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e), a.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e), a.closePath(), fill_path(a, i[8], i[8], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(78.5 * e, 51.921875 * e), a.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e), a.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e), a.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e), a.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e), a.closePath(), fill_path(a, i[8], i[8], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72.5 * e, 72.421875 * e), a.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), a.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), a.closePath(), fill_path(a, i[8], i[8], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42.5 * e, 163.421875 * e), a.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e), a.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e), a.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e), a.closePath(), fill_path(a, i[8], i[8], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79.5 * e, 61.421875 * e), a.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e), a.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e), a.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e), a.closePath(), fill_path(a, i[8], i[8], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72.5 * e, 72.421875 * e), a.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), a.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), a.closePath(), fill_path(a, i[8], i[8], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(96.5 * e, 76.421875 * e), a.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e), a.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e), a.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(61.5 * e, 78.421875 * e), a.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e), a.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e), a.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(116.5 * e, 127.421875 * e), a.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e), a.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e), a.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(41.5 * e, 134.421875 * e), a.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e), a.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e), a.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e), a.closePath(), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(78.5 * e, 51.921875 * e), a.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e), a.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e), a.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e), a.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e), a.closePath(), fill_path(a, i[3], i[2], 4 * e), circle(a, 108.5 * e, 148.421875 * e, 9 * e), fill_path(a, i[5]), circle(a, 106.5 * e, 144.421875 * e, 3 * e), fill_path(a, i[6]), circle(a, 46.5 * e, 148.421875 * e, 9 * e), fill_path(a, i[5]), circle(a, 44.5 * e, 144.421875 * e, 3 * e), fill_path(a, i[6]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(116.5 * e, 114.421875 * e), a.bezierCurveTo(121.5 * e, 137.421875 * e, 118.5 * e, 133.421875 * e, 108.5 * e, 139.421875 * e), a.bezierCurveTo(94.5 * e, 146.421875 * e, 96.5 * e, 148.421875 * e, 95.5 * e, 152.421875 * e), fill_path(a, i[3], i[2], 4 * e), a.beginPath(), a.translate(0, -2 * e), a.lineCap = "round", a.lineJoin = "round", a.moveTo(35.5 * e, 131.421875 * e), a.bezierCurveTo(36.5 * e, 140.421875 * e, 39.5 * e, 140.421875 * e, 49.5 * e, 143.421875 * e), a.bezierCurveTo(59.5 * e, 149.421875 * e, 57.5 * e, 151.421875 * e, 59.5 * e, 155.421875 * e), fill_path(a, i[3], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(84.5 * e, 57.421875 * e), a.bezierCurveTo(101.5 * e, 120.421875 * e, 92.5 * e, 127.421875 * e, 78.5 * e, 134.421875 * e), a.bezierCurveTo(51.5 * e, 131.421875 * e, 63.5 * e, 102.421875 * e, 70.5 * e, 59.421875 * e), a.bezierCurveTo(75 * e, 55.421875 * e, 78.5 * e, 52.421875 * e, 79.5 * e, 51.421875 * e), a.closePath(), fill_path(a, i[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79.5 * e, 61.421875 * e), a.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e), a.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e), a.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e), a.closePath(), fill_path(a, i[3], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72.5 * e, 72.421875 * e), a.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), a.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), a.closePath(), fill_path(a, i[3], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(87.5 * e, 154.421875 * e), a.bezierCurveTo(93.5 * e, 163.921875 * e, 93.5 * e, 163.921875 * e, 99.5 * e, 173.421875 * e), a.bezierCurveTo(95 * e, 177.421875 * e, 95 * e, 177.421875 * e, 90.5 * e, 181.421875 * e), a.bezierCurveTo(89 * e, 167.921875 * e, 89 * e, 167.921875 * e, 87.5 * e, 154.421875 * e), a.closePath(), fill_path(a, i[6], i[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(81.5 * e, 164.421875 * e), a.bezierCurveTo(84 * e, 172.921875 * e, 84 * e, 172.921875 * e, 86.5 * e, 181.421875 * e), a.bezierCurveTo(82.5 * e, 182.421875 * e, 82.5 * e, 182.421875 * e, 78.5 * e, 183.421875 * e), a.closePath(), fill_path(a, i[6], i[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(72.5 * e, 164.421875 * e), a.bezierCurveTo(73.5 * e, 173.921875 * e, 73.5 * e, 173.921875 * e, 74.5 * e, 183.421875 * e), a.bezierCurveTo(70.5 * e, 182.921875 * e, 70.5 * e, 182.921875 * e, 66.5 * e, 182.421875 * e), a.closePath(), fill_path(a, i[6], i[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(65.5 * e, 156.421875 * e), a.bezierCurveTo(65 * e, 168.421875 * e, 65 * e, 168.421875 * e, 64.5 * e, 180.421875 * e), a.bezierCurveTo(58.5 * e, 177.421875 * e, 58.5 * e, 177.421875 * e, 52.5 * e, 174.421875 * e), a.closePath(), fill_path(a, i[6], i[7], 2 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(42.5 * e, 163.421875 * e), a.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e), a.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e), a.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e), a.closePath(), fill_path(a, i[3], i[2], 4 * e), r
}

function create_hurt_pirahna(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 158 * e, i.height = 201 * e, r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(96.5 * e, 76.421875 * e), r.bezierCurveTo(100.5 * e, 64.421875 * e, 103.5 * e, 62.421875 * e, 110.5 * e, 65.421875 * e), r.bezierCurveTo(116.5 * e, 66.421875 * e, 117.5 * e, 67.421875 * e, 112.5 * e, 73.421875 * e), r.bezierCurveTo(107 * e, 79.921875 * e, 107 * e, 79.921875 * e, 101.5 * e, 86.421875 * e), r.closePath(), fill_path(r, t[0], t[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(61.5 * e, 78.421875 * e), r.bezierCurveTo(57.5 * e, 73.421875 * e, 51.5 * e, 66.421875 * e, 45.5 * e, 68.421875 * e), r.bezierCurveTo(32.5 * e, 73.421875 * e, 38.5 * e, 75.421875 * e, 46.5 * e, 81.421875 * e), r.bezierCurveTo(51.5 * e, 84.921875 * e, 51.5 * e, 84.921875 * e, 56.5 * e, 88.421875 * e), r.closePath(), fill_path(r, t[0], t[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(116.5 * e, 127.421875 * e), r.bezierCurveTo(124.5 * e, 108.421875 * e, 129.5 * e, 104.421875 * e, 141.5 * e, 107.421875 * e), r.bezierCurveTo(156.5 * e, 112.421875 * e, 153.5 * e, 113.421875 * e, 132.5 * e, 134.421875 * e), r.bezierCurveTo(123.5 * e, 141.921875 * e, 123.5 * e, 141.921875 * e, 114.5 * e, 149.421875 * e), r.closePath(), fill_path(r, t[0], t[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(41.5 * e, 134.421875 * e), r.bezierCurveTo(30.5 * e, 119.421875 * e, 25.5 * e, 111.421875 * e, 12.5 * e, 115.421875 * e), r.bezierCurveTo(4.5 * e, 120.421875 * e, 4.5 * e, 121.421875 * e, 26.5 * e, 142.421875 * e), r.bezierCurveTo(35 * e, 149.921875 * e, 35 * e, 149.921875 * e, 43.5 * e, 157.421875 * e), r.closePath(), fill_path(r, t[0], t[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(78.5 * e, 51.921875 * e), r.bezierCurveTo(99.5 * e, 75.921875 * e, 110.5 * e, 96.921875 * e, 118.5 * e, 120.921875 * e), r.bezierCurveTo(121.5 * e, 140.921875 * e, 107.5 * e, 179.921875 * e, 75.5 * e, 183.921875 * e), r.bezierCurveTo(30.5 * e, 169.921875 * e, 37.5 * e, 131.921875 * e, 34.5 * e, 120.921875 * e), r.bezierCurveTo(41.5 * e, 89.921875 * e, 61.5 * e, 67.921875 * e, 78.5 * e, 51.921875 * e), r.closePath(), fill_path(r, t[0], t[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(72.5 * e, 72.421875 * e), r.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), r.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), r.closePath(), fill_path(r, t[0], t[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(42.5 * e, 163.421875 * e), r.bezierCurveTo(62.5 * e, 185.421875 * e, 86.5 * e, 186.421875 * e, 111.5 * e, 165.421875 * e), r.bezierCurveTo(107.5 * e, 176.421875 * e, 95.5 * e, 187.421875 * e, 75.5 * e, 188.421875 * e), r.bezierCurveTo(53.5 * e, 188.421875 * e, 43.5 * e, 171.421875 * e, 42.5 * e, 164.421875 * e), r.closePath(), fill_path(r, t[0], t[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(79.5 * e, 61.421875 * e), r.bezierCurveTo(88.5 * e, 31.421875 * e, 81.5 * e, 16.421875 * e, 75.5 * e, 7.421875 * e), r.bezierCurveTo(77.5 * e, 28.421875 * e, 77.5 * e, 37.421875 * e, 68.5 * e, 42.421875 * e), r.bezierCurveTo(79.5 * e, 57.421875 * e, 79.5 * e, 58.421875 * e, 80.5 * e, 61.421875 * e), r.closePath(), fill_path(r, t[0], t[0], 10 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(72.5 * e, 72.421875 * e), r.bezierCurveTo(76.5 * e, 79.421875 * e, 79.5 * e, 80.421875 * e, 83.5 * e, 73.421875 * e), r.bezierCurveTo(80.5 * e, 96.921875 * e, 79.5 * e, 114.421875 * e, 77.5 * e, 120.421875 * e), r.closePath(), fill_path(r, t[0], t[0], 10 * e), i
}

function create_flour(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 170 * e, a.translate(0, -170 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(159.5 * e, 322.0625 * e), a.bezierCurveTo(240.5 * e, 293.0625 * e, 240.5 * e, 293.0625 * e, 321.5 * e, 264.0625 * e), a.bezierCurveTo(276.5 * e, 230.0625 * e, 276.5 * e, 230.0625 * e, 231.5 * e, 196.0625 * e), a.bezierCurveTo(158.5 * e, 221.5625 * e, 158.5 * e, 221.5625 * e, 85.5 * e, 247.0625 * e), a.closePath(), fill_path(a, i[0], i[1], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(212.5 * e, 270.0625 * e), a.bezierCurveTo(235 * e, 261.5625 * e, 235 * e, 261.5625 * e, 257.5 * e, 253.0625 * e), a.closePath(), fill_path(a, void 0, i[0], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(193.5 * e, 226.0625 * e), a.bezierCurveTo(204.5 * e, 242.0625 * e, 242.5 * e, 237.0625 * e, 251.5 * e, 225.0625 * e), a.bezierCurveTo(246.5 * e, 195.0625 * e, 205.5 * e, 190.0625 * e, 193.5 * e, 227.0625 * e), a.closePath(), fill_path(a, i[2], i[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(164.5 * e, 245.0625 * e), a.bezierCurveTo(182.5 * e, 264.0625 * e, 252.5 * e, 258.0625 * e, 276.5 * e, 244.0625 * e), a.bezierCurveTo(265.5 * e, 226.0625 * e, 244.5 * e, 231.0625 * e, 229.5 * e, 230.0625 * e), a.bezierCurveTo(205.5 * e, 227.0625 * e, 175.5 * e, 202.0625 * e, 162.5 * e, 244.0625 * e), a.closePath(), fill_path(a, i[2], i[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115.5 * e, 260.0625 * e), a.bezierCurveTo(134.5 * e, 279.0625 * e, 170.5 * e, 275.0625 * e, 191.5 * e, 257.0625 * e), a.bezierCurveTo(174.5 * e, 208.0625 * e, 142.5 * e, 197.0625 * e, 116.5 * e, 259.0625 * e), a.closePath(), fill_path(a, i[2], i[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(152.5 * e, 278.0625 * e), a.bezierCurveTo(165.5 * e, 294.0625 * e, 200.5 * e, 287.0625 * e, 216.5 * e, 278.0625 * e), a.bezierCurveTo(206.5 * e, 247.0625 * e, 173.5 * e, 233.0625 * e, 153.5 * e, 276.0625 * e), a.closePath(), fill_path(a, i[2], i[3], 12 * e), r
}

function create_leaderboard_mobile(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d"),
        r = 200 * e,
        a = 180 * e,
        n = 8 * e;
    t.width = r, t.height = a, i.beginPath(), round_rect(i, 0, 0, r, a - n, n), i.globalAlpha = .8, fill_path(i, "#1D6055"), i.globalAlpha = 1;
    var o = create_text(e, "Leaderboard", 25, "#FFF");
    return i.drawImage(o, (r - o.width) / 2, 5 * e), t
}

function create_leaderboard(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d"),
        r = 200 * e,
        a = 270 * e,
        n = 8 * e;
    t.width = r, t.height = a + 20, i.beginPath(), round_rect(i, 0, 0, r, a - n, n), i.globalAlpha = .5, fill_path(i, "#1D6055"), i.globalAlpha = 1;
    var o = create_text(e, "Leaderboard", 25, "#FFF");
    return i.drawImage(o, (r - o.width) / 2, 5 * e), t
}

function create_pumpkin(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 272 * e, r.height = 264 * e, a.translate(0, 20 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56.999969482421875 * e, 84.517333984375 * e), a.bezierCurveTo(61.999969482421875 * e, 58.517333984375 * e, 79.99996948242188 * e, 50.517333984375 * e, 102.99996948242188 * e, 50.517333984375 * e), a.bezierCurveTo(119.99996948242188 * e, 26.517333984375 * e, 137.99996948242188 * e, 32.517333984375 * e, 156.99996948242188 * e, 44.517333984375 * e), a.bezierCurveTo(187.99996948242188 * e, 42.517333984375 * e, 195.99996948242188 * e, 50.517333984375 * e, 202.99996948242188 * e, 77.517333984375 * e), a.bezierCurveTo(229.99996948242188 * e, 80.517333984375 * e, 231.99996948242188 * e, 96.517333984375 * e, 229.99996948242188 * e, 118.517333984375 * e), a.bezierCurveTo(241.99996948242188 * e, 147.517333984375 * e, 236.99996948242188 * e, 148.517333984375 * e, 220.99996948242188 * e, 165.517333984375 * e), a.bezierCurveTo(222.99996948242188 * e, 192.517333984375 * e, 209.99996948242188 * e, 212.517333984375 * e, 177.99996948242188 * e, 213.517333984375 * e), a.bezierCurveTo(159.99996948242188 * e, 234.517333984375 * e, 141.99996948242188 * e, 234.517333984375 * e, 116.99996948242188 * e, 222.517333984375 * e), a.bezierCurveTo(72.99996948242188 * e, 226.517333984375 * e, 66.99996948242188 * e, 207.517333984375 * e, 65.99996948242188 * e, 190.517333984375 * e), a.bezierCurveTo(35.999969482421875 * e, 180.517333984375 * e, 30.999969482421875 * e, 162.517333984375 * e, 39.999969482421875 * e, 135.517333984375 * e), a.bezierCurveTo(23.999969482421875 * e, 110.517333984375 * e, 43.999969482421875 * e, 90.517333984375 * e, 55.999969482421875 * e, 85.517333984375 * e), a.closePath(), fill_path(a, i[0]), a.translate(0, -20 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56.999969482421875 * e, 84.517333984375 * e), a.bezierCurveTo(61.999969482421875 * e, 58.517333984375 * e, 79.99996948242188 * e, 50.517333984375 * e, 102.99996948242188 * e, 50.517333984375 * e), a.bezierCurveTo(119.99996948242188 * e, 26.517333984375 * e, 137.99996948242188 * e, 32.517333984375 * e, 156.99996948242188 * e, 44.517333984375 * e), a.bezierCurveTo(187.99996948242188 * e, 42.517333984375 * e, 195.99996948242188 * e, 50.517333984375 * e, 202.99996948242188 * e, 77.517333984375 * e), a.bezierCurveTo(229.99996948242188 * e, 80.517333984375 * e, 231.99996948242188 * e, 96.517333984375 * e, 229.99996948242188 * e, 118.517333984375 * e), a.bezierCurveTo(241.99996948242188 * e, 147.517333984375 * e, 236.99996948242188 * e, 148.517333984375 * e, 220.99996948242188 * e, 165.517333984375 * e), a.bezierCurveTo(222.99996948242188 * e, 192.517333984375 * e, 209.99996948242188 * e, 212.517333984375 * e, 177.99996948242188 * e, 213.517333984375 * e), a.bezierCurveTo(159.99996948242188 * e, 234.517333984375 * e, 141.99996948242188 * e, 234.517333984375 * e, 116.99996948242188 * e, 222.517333984375 * e), a.bezierCurveTo(72.99996948242188 * e, 226.517333984375 * e, 66.99996948242188 * e, 207.517333984375 * e, 65.99996948242188 * e, 190.517333984375 * e), a.bezierCurveTo(35.999969482421875 * e, 180.517333984375 * e, 30.999969482421875 * e, 162.517333984375 * e, 39.999969482421875 * e, 135.517333984375 * e), a.bezierCurveTo(23.999969482421875 * e, 110.517333984375 * e, 43.999969482421875 * e, 90.517333984375 * e, 55.999969482421875 * e, 85.517333984375 * e), a.closePath(), fill_path(a, i[1], i[2], 8 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(123.99996948242188 * e, 116.18402099609375 * e), a.bezierCurveTo(115.99996948242188 * e, 99.18402099609375 * e, 109.99996948242188 * e, 74.18402099609375 * e, 109.99996948242188 * e, 63.18402099609375 * e), a.bezierCurveTo(115.99996948242188 * e, 69.18402099609375 * e, 125.99996948242188 * e, 87.18402099609375 * e, 137.99996948242188 * e, 112.18402099609375 * e), a.bezierCurveTo(142.99996948242188 * e, 84.18402099609375 * e, 143.99996948242188 * e, 76.18402099609375 * e, 153.99996948242188 * e, 62.18402099609375 * e), a.bezierCurveTo(155.99996948242188 * e, 79.18402099609375 * e, 149.99996948242188 * e, 110.18402099609375 * e, 151.99996948242188 * e, 117.18402099609375 * e), a.bezierCurveTo(162.99996948242188 * e, 104.18402099609375 * e, 180.99996948242188 * e, 91.18402099609375 * e, 191.99996948242188 * e, 91.18402099609375 * e), a.bezierCurveTo(185.99996948242188 * e, 102.18402099609375 * e, 180.99996948242188 * e, 106.18402099609375 * e, 160.99996948242188 * e, 124.18402099609375 * e), a.bezierCurveTo(190.99996948242188 * e, 121.18402099609375 * e, 199.99996948242188 * e, 120.18402099609375 * e, 207.99996948242188 * e, 123.18402099609375 * e), a.bezierCurveTo(199.99996948242188 * e, 129.18402099609375 * e, 181.99996948242188 * e, 132.18402099609375 * e, 160.99996948242188 * e, 135.18402099609375 * e), a.bezierCurveTo(179.99996948242188 * e, 142.18402099609375 * e, 193.99996948242188 * e, 151.18402099609375 * e, 196.99996948242188 * e, 156.18402099609375 * e), a.bezierCurveTo(185.99996948242188 * e, 156.18402099609375 * e, 163.99996948242188 * e, 149.18402099609375 * e, 152.99996948242188 * e, 147.18402099609375 * e), a.bezierCurveTo(157.99996948242188 * e, 155.18402099609375 * e, 165.99996948242188 * e, 176.18402099609375 * e, 169.99996948242188 * e, 195.18402099609375 * e), a.bezierCurveTo(162.99996948242188 * e, 190.18402099609375 * e, 147.99996948242188 * e, 167.18402099609375 * e, 139.99996948242188 * e, 153.18402099609375 * e), a.bezierCurveTo(137.99996948242188 * e, 167.18402099609375 * e, 126.99996948242188 * e, 194.18402099609375 * e, 119.99996948242188 * e, 204.18402099609375 * e), a.bezierCurveTo(117.99996948242188 * e, 186.18402099609375 * e, 123.99996948242188 * e, 165.18402099609375 * e, 126.99996948242188 * e, 149.18402099609375 * e), a.bezierCurveTo(110.99996948242188 * e, 163.18402099609375 * e, 103.99996948242188 * e, 170.18402099609375 * e, 82.99996948242188 * e, 177.18402099609375 * e), a.bezierCurveTo(90.99996948242188 * e, 162.18402099609375 * e, 99.99996948242188 * e, 153.18402099609375 * e, 117.99996948242188 * e, 140.18402099609375 * e), a.bezierCurveTo(97.99996948242188 * e, 140.18402099609375 * e, 83.99996948242188 * e, 139.18402099609375 * e, 65.99996948242188 * e, 132.18402099609375 * e), a.bezierCurveTo(77.99996948242188 * e, 127.18402099609375 * e, 95.99996948242188 * e, 127.18402099609375 * e, 115.99996948242188 * e, 127.18402099609375 * e), a.bezierCurveTo(91.99996948242188 * e, 113.18402099609375 * e, 84.99996948242188 * e, 107.18402099609375 * e, 76.99996948242188 * e, 96.18402099609375 * e), a.bezierCurveTo(94.99996948242188 * e, 99.18402099609375 * e, 109.99996948242188 * e, 109.18402099609375 * e, 123.99996948242188 * e, 116.18402099609375 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(131.99996948242188 * e, 119.18402099609375 * e), a.bezierCurveTo(141.99996948242188 * e, 119.18402099609375 * e, 145.99996948242188 * e, 116.18402099609375 * e, 147.99996948242188 * e, 109.18402099609375 * e), a.bezierCurveTo(151.99996948242188 * e, 107.18402099609375 * e, 159.99996948242188 * e, 107.18402099609375 * e, 156.99996948242188 * e, 123.18402099609375 * e), a.bezierCurveTo(155.99996948242188 * e, 140.18402099609375 * e, 142.99996948242188 * e, 149.18402099609375 * e, 132.99996948242188 * e, 147.18402099609375 * e), a.bezierCurveTo(119.99996948242188 * e, 144.18402099609375 * e, 113.99996948242188 * e, 122.18402099609375 * e, 131.99996948242188 * e, 119.18402099609375 * e), a.closePath(), fill_path(a, i[4], i[5], 6 * e), r
}

function create_brambles(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 247 * e, r.height = 247 * e, a.translate(0, 10 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(150 * e, 62 * e), a.bezierCurveTo(151.5 * e, 71.5 * e, 149 * e, 70 * e, 153 * e, 81 * e), a.bezierCurveTo(158 * e, 73.5 * e, 158 * e, 73.5 * e, 163 * e, 66 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(164 * e, 171 * e), a.bezierCurveTo(149 * e, 159 * e, 156.5 * e, 165 * e, 149 * e, 159 * e), a.bezierCurveTo(149 * e, 167 * e, 149 * e, 170 * e, 152 * e, 178 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(132 * e, 95 * e), a.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e), a.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e), a.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e), a.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e), a.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e), a.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e), a.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e), a.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e), a.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e), a.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e), a.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e), a.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e), a.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e), a.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e), a.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e), a.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e), a.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e), a.closePath(), fill_path(a, i[0]), a.translate(0, -10 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(150 * e, 62 * e), a.bezierCurveTo(151.5 * e, 71.5 * e, 149 * e, 70 * e, 153 * e, 81 * e), a.bezierCurveTo(158 * e, 73.5 * e, 158 * e, 73.5 * e, 163 * e, 66 * e), a.closePath(), fill_path(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(164 * e, 171 * e), a.bezierCurveTo(149 * e, 159 * e, 156.5 * e, 165 * e, 149 * e, 159 * e), a.bezierCurveTo(149 * e, 167 * e, 149 * e, 170 * e, 152 * e, 178 * e), a.closePath(), fill_path(a, i[5]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(132 * e, 95 * e), a.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e), a.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e), a.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e), a.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e), a.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e), a.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e), a.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e), a.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e), a.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e), a.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e), a.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e), a.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e), a.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e), a.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e), a.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e), a.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e), a.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e), a.closePath(), fill_path(a, i[1], i[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(137 * e, 137 * e), a.bezierCurveTo(145 * e, 125 * e, 138 * e, 108 * e, 123 * e, 104 * e), a.bezierCurveTo(81 * e, 101 * e, 88 * e, 77 * e, 98 * e, 65 * e), a.bezierCurveTo(117 * e, 38 * e, 138 * e, 39 * e, 165 * e, 52 * e), a.bezierCurveTo(197 * e, 72 * e, 207 * e, 111 * e, 197 * e, 140 * e), a.bezierCurveTo(182 * e, 180 * e, 161 * e, 197 * e, 112 * e, 194 * e), a.bezierCurveTo(58 * e, 194 * e, 37 * e, 170 * e, 34 * e, 142 * e), a.bezierCurveTo(29 * e, 102 * e, 40 * e, 63 * e, 51 * e, 45 * e), a.bezierCurveTo(43 * e, 78 * e, 41 * e, 103 * e, 43 * e, 122 * e), a.bezierCurveTo(51 * e, 158 * e, 63 * e, 174 * e, 95 * e, 179 * e), a.bezierCurveTo(129 * e, 186 * e, 169 * e, 172 * e, 177 * e, 144 * e), a.bezierCurveTo(197 * e, 105 * e, 172 * e, 76 * e, 160 * e, 71 * e), a.bezierCurveTo(125 * e, 52 * e, 111 * e, 73 * e, 111 * e, 81 * e), a.bezierCurveTo(106 * e, 93 * e, 140 * e, 92 * e, 147 * e, 107 * e), a.bezierCurveTo(153 * e, 128 * e, 140 * e, 135 * e, 137 * e, 139 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(132 * e, 95 * e), a.bezierCurveTo(154 * e, 102 * e, 154 * e, 126 * e, 137 * e, 139 * e), a.bezierCurveTo(113 * e, 152 * e, 89 * e, 136 * e, 80 * e, 121 * e), a.bezierCurveTo(57 * e, 89 * e, 69 * e, 63 * e, 79 * e, 52 * e), a.bezierCurveTo(110 * e, 20 * e, 139 * e, 21 * e, 150 * e, 25 * e), a.bezierCurveTo(197 * e, 36 * e, 221 * e, 67 * e, 226 * e, 90 * e), a.bezierCurveTo(234 * e, 134 * e, 214 * e, 177 * e, 195 * e, 197 * e), a.bezierCurveTo(144 * e, 242 * e, 79 * e, 216 * e, 58 * e, 206 * e), a.bezierCurveTo(13 * e, 174 * e, 20 * e, 134 * e, 23 * e, 107 * e), a.bezierCurveTo(26 * e, 78 * e, 33 * e, 60 * e, 38 * e, 43 * e), a.bezierCurveTo(42 * e, 32 * e, 47 * e, 32 * e, 50 * e, 36 * e), a.bezierCurveTo(54 * e, 37 * e, 50 * e, 52 * e, 44 * e, 87 * e), a.bezierCurveTo(40 * e, 115 * e, 46 * e, 142 * e, 57 * e, 158 * e), a.bezierCurveTo(76 * e, 189 * e, 129 * e, 182 * e, 152 * e, 173 * e), a.bezierCurveTo(186 * e, 156 * e, 191 * e, 106 * e, 176 * e, 85 * e), a.bezierCurveTo(159 * e, 61 * e, 132 * e, 62 * e, 122 * e, 66 * e), a.bezierCurveTo(108 * e, 74 * e, 108 * e, 89 * e, 116 * e, 90 * e), a.bezierCurveTo(123 * e, 92 * e, 130 * e, 93 * e, 131 * e, 94 * e), a.closePath(), fill_path(a, void 0, i[2], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(82 * e, 63 * e), a.bezierCurveTo(91 * e, 64 * e, 96 * e, 62 * e, 98 * e, 53 * e), a.bezierCurveTo(91 * e, 45 * e, 85 * e, 42 * e, 78 * e, 41 * e), a.bezierCurveTo(81 * e, 51 * e, 82 * e, 57 * e, 82 * e, 63 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(148 * e, 40 * e), a.bezierCurveTo(140 * e, 52 * e, 131 * e, 51 * e, 123 * e, 43 * e), a.bezierCurveTo(123 * e, 25 * e, 129 * e, 17 * e, 134 * e, 12 * e), a.bezierCurveTo(138 * e, 35 * e, 142 * e, 31 * e, 148 * e, 40 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(189 * e, 43 * e), a.bezierCurveTo(191 * e, 54 * e, 196 * e, 58 * e, 205 * e, 59 * e), a.bezierCurveTo(211 * e, 42 * e, 214 * e, 37 * e, 216 * e, 31 * e), a.bezierCurveTo(202 * e, 34 * e, 195 * e, 39 * e, 190 * e, 43 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(216 * e, 98 * e), a.bezierCurveTo(219 * e, 105 * e, 225 * e, 107 * e, 230 * e, 109 * e), a.bezierCurveTo(227 * e, 113 * e, 221 * e, 115 * e, 215 * e, 115 * e), a.bezierCurveTo(208 * e, 109 * e, 211 * e, 101 * e, 216 * e, 98 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(180 * e, 85 * e), a.bezierCurveTo(193 * e, 86 * e, 196 * e, 98 * e, 191 * e, 108 * e), a.bezierCurveTo(179 * e, 112 * e, 167 * e, 113 * e, 155 * e, 111 * e), a.bezierCurveTo(169 * e, 100 * e, 176 * e, 96 * e, 180 * e, 85 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(96 * e, 114 * e), a.bezierCurveTo(102 * e, 109 * e, 112 * e, 110 * e, 114 * e, 118 * e), a.bezierCurveTo(111 * e, 134 * e, 102 * e, 143 * e, 95 * e, 147 * e), a.bezierCurveTo(98 * e, 123 * e, 97 * e, 119 * e, 96 * e, 115 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79 * e, 92 * e), a.bezierCurveTo(86 * e, 95 * e, 89 * e, 102 * e, 83 * e, 111 * e), a.bezierCurveTo(70 * e, 110 * e, 61 * e, 107 * e, 54 * e, 100 * e), a.bezierCurveTo(70 * e, 97 * e, 70 * e, 95 * e, 78 * e, 92 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39 * e, 130 * e), a.bezierCurveTo(37 * e, 141 * e, 41 * e, 143 * e, 48 * e, 144 * e), a.bezierCurveTo(54 * e, 134 * e, 55 * e, 131 * e, 56 * e, 123 * e), a.bezierCurveTo(47 * e, 129 * e, 43 * e, 129 * e, 39 * e, 129 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(113 * e, 189 * e), a.bezierCurveTo(119 * e, 201 * e, 127 * e, 198 * e, 134 * e, 192 * e), a.bezierCurveTo(128 * e, 175 * e, 128 * e, 173 * e, 128 * e, 165 * e), a.bezierCurveTo(117 * e, 176 * e, 116 * e, 182 * e, 113 * e, 187 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(74 * e, 154 * e), a.bezierCurveTo(76 * e, 163 * e, 76 * e, 170 * e, 75 * e, 177 * e), a.bezierCurveTo(68 * e, 179 * e, 66 * e, 176 * e, 63 * e, 171 * e), a.bezierCurveTo(69 * e, 164 * e, 72 * e, 159 * e, 74 * e, 154 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(206 * e, 152 * e), a.bezierCurveTo(198 * e, 158 * e, 198 * e, 166 * e, 201 * e, 171 * e), a.bezierCurveTo(209 * e, 170 * e, 221 * e, 170 * e, 226 * e, 172 * e), a.bezierCurveTo(219 * e, 159 * e, 210 * e, 155 * e, 207 * e, 153 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(181 * e, 184 * e), a.bezierCurveTo(170 * e, 184 * e, 167 * e, 187 * e, 163 * e, 195 * e), a.bezierCurveTo(171 * e, 207 * e, 183 * e, 214 * e, 191 * e, 217 * e), a.bezierCurveTo(183 * e, 204 * e, 184 * e, 196 * e, 181 * e, 184 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(66 * e, 199 * e), a.bezierCurveTo(73 * e, 197 * e, 78 * e, 199 * e, 79 * e, 206 * e), a.bezierCurveTo(71 * e, 216 * e, 67 * e, 221 * e, 57 * e, 223 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(182 * e, 143 * e), a.bezierCurveTo(183 * e, 146 * e, 183 * e, 149 * e, 179 * e, 152 * e), a.bezierCurveTo(174 * e, 146 * e, 174 * e, 146 * e, 169 * e, 140 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(32 * e, 159 * e), a.bezierCurveTo(45 * e, 160 * e, 48 * e, 164 * e, 45 * e, 175 * e), a.bezierCurveTo(28 * e, 183 * e, 25 * e, 184 * e, 19 * e, 184 * e), a.bezierCurveTo(30 * e, 170 * e, 29 * e, 164 * e, 31 * e, 160 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(110 * e, 214 * e), a.bezierCurveTo(106 * e, 212 * e, 104 * e, 213 * e, 102 * e, 218 * e), a.bezierCurveTo(104 * e, 220 * e, 107 * e, 222 * e, 110 * e, 224 * e), a.bezierCurveTo(110.5 * e, 219 * e, 110.5 * e, 219 * e, 111 * e, 214 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(40 * e, 52 * e), a.bezierCurveTo(41 * e, 57 * e, 40 * e, 61 * e, 34 * e, 60 * e), a.bezierCurveTo(31.5 * e, 55 * e, 31.5 * e, 55 * e, 29 * e, 50 * e), a.bezierCurveTo(34 * e, 50.5 * e, 34 * e, 50.5 * e, 39 * e, 51 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(31 * e, 81 * e), a.bezierCurveTo(37 * e, 84 * e, 38 * e, 90 * e, 34 * e, 99 * e), a.bezierCurveTo(23 * e, 97 * e, 19 * e, 96 * e, 16 * e, 93 * e), a.bezierCurveTo(24 * e, 88 * e, 28 * e, 85 * e, 30 * e, 81 * e), a.closePath(), fill_path(a, i[4], i[5], 5 * e), r
}

function create_hood(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 465 * e, r.height = 310 * e, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(126 * e, 192 * e), a.bezierCurveTo(198 * e, 202 * e, 245 * e, 203 * e, 335 * e, 194 * e), a.bezierCurveTo(336 * e, 232 * e, 326 * e, 235 * e, 232 * e, 237 * e), a.bezierCurveTo(161 * e, 235 * e, 122 * e, 235 * e, 126 * e, 193 * e), a.closePath(), fill_path(a, i[0], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(146 * e, 239 * e), a.bezierCurveTo(174 * e, 74 * e, 287 * e, 88 * e, 320 * e, 240 * e), a.bezierCurveTo(329 * e, 231 * e, 340 * e, 219 * e, 332 * e, 115 * e), a.bezierCurveTo(330 * e, 40 * e, 144 * e, 30 * e, 129 * e, 116 * e), a.bezierCurveTo(124 * e, 217 * e, 124 * e, 228 * e, 143 * e, 237 * e), a.closePath(), fill_path(a, i[0], i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(126 * e, 193 * e), a.bezierCurveTo(173 * e, 94 * e, 209 * e, 100 * e, 228 * e, 57 * e), a.bezierCurveTo(190 * e, 112 * e, 165 * e, 115 * e, 127 * e, 184 * e), a.closePath(), fill_path(a, void 0, i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(230 * e, 57 * e), a.bezierCurveTo(266 * e, 117 * e, 310 * e, 130 * e, 332 * e, 183 * e), a.bezierCurveTo(290 * e, 112 * e, 262 * e, 109 * e, 230 * e, 56 * e), a.closePath(), fill_path(a, void 0, i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(154 * e, 212 * e), a.bezierCurveTo(208 * e, 224 * e, 252 * e, 219 * e, 305 * e, 212 * e), a.bezierCurveTo(267 * e, 219 * e, 204 * e, 222 * e, 155 * e, 212 * e), a.closePath(), fill_path(a, void 0, i[1], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(239 * e, 59 * e), a.bezierCurveTo(302 * e, 72 * e, 325 * e, 84 * e, 326 * e, 115 * e), a.bezierCurveTo(289 * e, 80 * e, 270 * e, 88 * e, 253 * e, 78 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(216 * e, 61 * e), a.bezierCurveTo(209 * e, 70 * e, 209 * e, 70 * e, 202 * e, 79 * e), a.bezierCurveTo(173 * e, 87 * e, 162 * e, 91 * e, 137 * e, 107 * e), a.bezierCurveTo(153 * e, 78 * e, 174 * e, 67 * e, 212 * e, 62 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(175 * e, 125 * e), a.bezierCurveTo(218 * e, 94 * e, 238 * e, 90 * e, 281 * e, 125 * e), a.bezierCurveTo(245 * e, 89 * e, 240 * e, 80 * e, 228 * e, 67 * e), a.bezierCurveTo(207 * e, 100 * e, 192 * e, 104 * e, 177 * e, 123 * e), a.closePath(), fill_path(a, i[2]), r
}

function create_winter_hood(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 465 * e, r.height = 405 * e, a.globalAlpha = 1, a.translate(6 * e, 0 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(39.000030517578125 * e, 162.03977966308594 * e), a.bezierCurveTo(125.00003051757812 * e, 84.03977966308594 * e, 108.50003051757812 * e, 115.03977966308594 * e, 178.00003051757812 * e, 68.03977966308594 * e), a.bezierCurveTo(299.0000305175781 * e, 146.53977966308594 * e, 299.0000305175781 * e, 146.53977966308594 * e, 420.0000305175781 * e, 225.03977966308594 * e), a.bezierCurveTo(400.0000305175781 * e, 288.53977966308594 * e, 400.0000305175781 * e, 288.53977966308594 * e, 380.0000305175781 * e, 352.03977966308594 * e), a.bezierCurveTo(216.50003051757812 * e, 345.53977966308594 * e, 216.50003051757812 * e, 345.53977966308594 * e, 53.000030517578125 * e, 339.03977966308594 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(23.000030517578125 * e, 306.94886779785156 * e), a.bezierCurveTo(5.000030517578125 * e, 275.94886779785156 * e, 6.000030517578125 * e, 201.94886779785156 * e, 14.000030517578125 * e, 150.94886779785156 * e), a.bezierCurveTo(40.000030517578125 * e, 34.94886779785156 * e, 157.00003051757812 * e, 14.948867797851562 * e, 199.00003051757812 * e, 11.948867797851562 * e), a.bezierCurveTo(331.0000305175781 * e, .9488677978515625 * e, 409.0000305175781 * e, 61.94886779785156 * e, 428.0000305175781 * e, 133.94886779785156 * e), a.bezierCurveTo(445.0000305175781 * e, 207.94886779785156 * e, 439.0000305175781 * e, 274.94886779785156 * e, 426.0000305175781 * e, 342.94886779785156 * e), a.bezierCurveTo(355.0000305175781 * e, 207.94886779785156 * e, 345.0000305175781 * e, 208.94886779785156 * e, 333.0000305175781 * e, 202.94886779785156 * e), a.bezierCurveTo(262.0000305175781 * e, 143.94886779785156 * e, 236.00003051757812 * e, 148.94886779785156 * e, 189.00003051757812 * e, 162.94886779785156 * e), a.bezierCurveTo(82.00003051757812 * e, 190.94886779785156 * e, 78.00003051757812 * e, 235.94886779785156 * e, 62.000030517578125 * e, 279.94886779785156 * e), a.closePath(), fill_path(a, i[0], i[1], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(17.000030517578125 * e, 149.94886779785156 * e), a.bezierCurveTo(76.00003051757812 * e, 67.94886779785156 * e, 177.00003051757812 * e, 40.94886779785156 * e, 232.00003051757812 * e, 45.94886779785156 * e), a.bezierCurveTo(316.0000305175781 * e, 46.94886779785156 * e, 359.0000305175781 * e, 74.94886779785156 * e, 428.0000305175781 * e, 145.94886779785156 * e), a.bezierCurveTo(414.0000305175781 * e, 73.94886779785156 * e, 386.0000305175781 * e, 68.94886779785156 * e, 359.0000305175781 * e, 43.94886779785156 * e), a.bezierCurveTo(295.0000305175781 * e, 5.9488677978515625 * e, 239.00003051757812 * e, 10.948867797851562 * e, 207.00003051757812 * e, 10.948867797851562 * e), a.bezierCurveTo(121.00003051757812 * e, 20.948867797851562 * e, 104.00003051757812 * e, 34.94886779785156 * e, 45.000030517578125 * e, 84.94886779785156 * e), a.bezierCurveTo(14.000030517578125 * e, 128.94886779785156 * e, 18.000030517578125 * e, 142.94886779785156 * e, 16.000030517578125 * e, 151.94886779785156 * e), a.closePath(), fill_path(a, i[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(23.000030517578125 * e, 306.94886779785156 * e), a.bezierCurveTo(5.000030517578125 * e, 275.94886779785156 * e, 6.000030517578125 * e, 201.94886779785156 * e, 14.000030517578125 * e, 150.94886779785156 * e), a.bezierCurveTo(40.000030517578125 * e, 34.94886779785156 * e, 157.00003051757812 * e, 14.948867797851562 * e, 199.00003051757812 * e, 11.948867797851562 * e), a.bezierCurveTo(331.0000305175781 * e, .9488677978515625 * e, 409.0000305175781 * e, 61.94886779785156 * e, 428.0000305175781 * e, 133.94886779785156 * e), a.bezierCurveTo(445.0000305175781 * e, 207.94886779785156 * e, 439.0000305175781 * e, 274.94886779785156 * e, 426.0000305175781 * e, 342.94886779785156 * e), a.bezierCurveTo(355.0000305175781 * e, 207.94886779785156 * e, 345.0000305175781 * e, 208.94886779785156 * e, 333.0000305175781 * e, 202.94886779785156 * e), a.bezierCurveTo(262.0000305175781 * e, 143.94886779785156 * e, 236.00003051757812 * e, 148.94886779785156 * e, 189.00003051757812 * e, 162.94886779785156 * e), a.bezierCurveTo(82.00003051757812 * e, 190.94886779785156 * e, 78.00003051757812 * e, 235.94886779785156 * e, 62.000030517578125 * e, 279.94886779785156 * e), a.closePath(), fill_path(a, void 0, i[1], 16 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(60.000030517578125 * e, 288.03977966308594 * e), a.bezierCurveTo(183.00003051757812 * e, 320.03977966308594 * e, 342.0000305175781 * e, 306.03977966308594 * e, 399.0000305175781 * e, 286.03977966308594 * e), a.bezierCurveTo(420.0000305175781 * e, 345.03977966308594 * e, 410.0000305175781 * e, 335.03977966308594 * e, 415.0000305175781 * e, 362.03977966308594 * e), a.bezierCurveTo(351.0000305175781 * e, 384.03977966308594 * e, 299.0000305175781 * e, 389.03977966308594 * e, 215.00003051757812 * e, 391.03977966308594 * e), a.bezierCurveTo(128.00003051757812 * e, 388.03977966308594 * e, 69.00003051757812 * e, 373.03977966308594 * e, 39.000030517578125 * e, 359.03977966308594 * e), a.closePath(), fill_path(a, i[0], i[1], 13 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(47.000030517578125 * e, 327.03977966308594 * e), a.bezierCurveTo(203.00003051757812 * e, 377.03977966308594 * e, 331.0000305175781 * e, 349.03977966308594 * e, 410.0000305175781 * e, 330.03977966308594 * e), a.closePath(), fill_path(a, i[0], i[1], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(9.000030517578125 * e, 339.1306915283203 * e), a.bezierCurveTo(2.000030517578125 * e, 280.1306915283203 * e, 30.000030517578125 * e, 219.1306915283203 * e, 85.00003051757812 * e, 167.1306915283203 * e), a.bezierCurveTo(174.00003051757812 * e, 82.13069152832031 * e, 241.00003051757812 * e, 101.13069152832031 * e, 284.0000305175781 * e, 115.13069152832031 * e), a.bezierCurveTo(333.0000305175781 * e, 134.1306915283203 * e, 376.0000305175781 * e, 177.1306915283203 * e, 410.0000305175781 * e, 247.1306915283203 * e), a.bezierCurveTo(439.0000305175781 * e, 300.1306915283203 * e, 442.0000305175781 * e, 346.1306915283203 * e, 430.0000305175781 * e, 363.1306915283203 * e), a.bezierCurveTo(418.0000305175781 * e, 366.1306915283203 * e, 395.0000305175781 * e, 295.1306915283203 * e, 355.0000305175781 * e, 223.1306915283203 * e), a.bezierCurveTo(299.0000305175781 * e, 156.1306915283203 * e, 262.0000305175781 * e, 155.1306915283203 * e, 215.00003051757812 * e, 159.1306915283203 * e), a.bezierCurveTo(133.00003051757812 * e, 171.1306915283203 * e, 120.00003051757812 * e, 193.1306915283203 * e, 96.00003051757812 * e, 221.1306915283203 * e), a.bezierCurveTo(49.000030517578125 * e, 262.1306915283203 * e, 47.000030517578125 * e, 306.1306915283203 * e, 38.000030517578125 * e, 336.1306915283203 * e), a.bezierCurveTo(30.000030517578125 * e, 349.1306915283203 * e, 30.000030517578125 * e, 349.1306915283203 * e, 22.000030517578125 * e, 362.1306915283203 * e), a.closePath(), fill_path(a, i[2], i[1], 20 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(228.00003051757812 * e, 128.03977966308594 * e), a.bezierCurveTo(315.0000305175781 * e, 131.03977966308594 * e, 349.0000305175781 * e, 178.03977966308594 * e, 386.0000305175781 * e, 234.03977966308594 * e), a.bezierCurveTo(444.0000305175781 * e, 329.03977966308594 * e, 446.0000305175781 * e, 354.03977966308594 * e, 427.0000305175781 * e, 373.03977966308594 * e), a.bezierCurveTo(389.0000305175781 * e, 389.03977966308594 * e, 399.0000305175781 * e, 329.03977966308594 * e, 361.0000305175781 * e, 277.03977966308594 * e), a.bezierCurveTo(306.0000305175781 * e, 191.03977966308594 * e, 266.0000305175781 * e, 183.03977966308594 * e, 220.00003051757812 * e, 181.03977966308594 * e), a.bezierCurveTo(138.00003051757812 * e, 184.03977966308594 * e, 123.00003051757812 * e, 212.03977966308594 * e, 89.00003051757812 * e, 271.03977966308594 * e), a.bezierCurveTo(52.000030517578125 * e, 349.03977966308594 * e, 68.00003051757812 * e, 364.03977966308594 * e, 33.000030517578125 * e, 369.03977966308594 * e), a.bezierCurveTo(6.000030517578125 * e, 366.03977966308594 * e, 5.000030517578125 * e, 341.03977966308594 * e, 26.000030517578125 * e, 288.03977966308594 * e), a.bezierCurveTo(60.000030517578125 * e, 207.03977966308594 * e, 100.00003051757812 * e, 180.03977966308594 * e, 113.00003051757812 * e, 170.03977966308594 * e), a.bezierCurveTo(159.00003051757812 * e, 132.03977966308594 * e, 196.00003051757812 * e, 133.03977966308594 * e, 226.00003051757812 * e, 129.03977966308594 * e), a.closePath(), fill_path(a, i[0], i[1], 20 * e), r
}

function create_peasant(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 198 * e, a.height = 147 * e, n.globalAlpha = t ? .5 : 1, n.translate(0, 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(44 * e, 76 * e), n.bezierCurveTo(50 * e, 82 * e, 50 * e, 82 * e, 56 * e, 88 * e), n.bezierCurveTo(59 * e, 82 * e, 59 * e, 82 * e, 62 * e, 76 * e), n.bezierCurveTo(59 * e, 71 * e, 59 * e, 71 * e, 56 * e, 66 * e), n.bezierCurveTo(59 * e, 69 * e, 59 * e, 69 * e, 62 * e, 72 * e), n.bezierCurveTo(80 * e, 48 * e, 102 * e, 50 * e, 120 * e, 62 * e), n.bezierCurveTo(127 * e, 58 * e, 127 * e, 58 * e, 134 * e, 54 * e), n.bezierCurveTo(129 * e, 60 * e, 129 * e, 60 * e, 124 * e, 66 * e), n.bezierCurveTo(129 * e, 73 * e, 129 * e, 73 * e, 134 * e, 80 * e), n.bezierCurveTo(140 * e, 74 * e, 140 * e, 74 * e, 146 * e, 68 * e), n.bezierCurveTo(142 * e, 76 * e, 142 * e, 76 * e, 138 * e, 84 * e), n.bezierCurveTo(144 * e, 90 * e, 142 * e, 90 * e, 144 * e, 90 * e), n.bezierCurveTo(136 * e, 97 * e, 136 * e, 97 * e, 128 * e, 104 * e), n.bezierCurveTo(154 * e, 110 * e, 164 * e, 90 * e, 160 * e, 80 * e), n.bezierCurveTo(138 * e, 22 * e, 148 * e, 51 * e, 136 * e, 22 * e), n.bezierCurveTo(97 * e, 24 * e, 97 * e, 24 * e, 58 * e, 26 * e), n.bezierCurveTo(47 * e, 54 * e, 36 * e, 80 * e, 36 * e, 82 * e), n.bezierCurveTo(40 * e, 108 * e, 54 * e, 104 * e, 62 * e, 104 * e), n.bezierCurveTo(46 * e, 92 * e, 54 * e, 97 * e, 46 * e, 90 * e), n.closePath(), fill_path(n, i[0]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36 * e, 80 * e), n.bezierCurveTo(30 * e, 84 * e, 28 * e, 92 * e, 34 * e, 100 * e), n.bezierCurveTo(41.5 * e, 102 * e, 41.5 * e, 102 * e, 49 * e, 104 * e), n.bezierCurveTo(43 * e, 105.5 * e, 43 * e, 105.5 * e, 37 * e, 107 * e), n.bezierCurveTo(46 * e, 111 * e, 60 * e, 114 * e, 76 * e, 114 * e), n.bezierCurveTo(78 * e, 110.5 * e, 78 * e, 110.5 * e, 80 * e, 107 * e), n.bezierCurveTo(81 * e, 110.5 * e, 81 * e, 110.5 * e, 82 * e, 114 * e), n.bezierCurveTo(94.5 * e, 113.5 * e, 94.5 * e, 113.5 * e, 107 * e, 113 * e), n.bezierCurveTo(108.5 * e, 110 * e, 108.5 * e, 110 * e, 110 * e, 107 * e), n.bezierCurveTo(111.5 * e, 110.5 * e, 111.5 * e, 110.5 * e, 113 * e, 114 * e), n.bezierCurveTo(131 * e, 112.5 * e, 131 * e, 112.5 * e, 149 * e, 111 * e), n.bezierCurveTo(148.5 * e, 107.5 * e, 148.5 * e, 107.5 * e, 148 * e, 104 * e), n.bezierCurveTo(150.5 * e, 107 * e, 150.5 * e, 107 * e, 153 * e, 110 * e), n.bezierCurveTo(155.5 * e, 108.5 * e, 155.5 * e, 108.5 * e, 158 * e, 107 * e), n.bezierCurveTo(156.5 * e, 104 * e, 156.5 * e, 104 * e, 155 * e, 101 * e), n.bezierCurveTo(158.5 * e, 102.5 * e, 158.5 * e, 102.5 * e, 162 * e, 104 * e), n.bezierCurveTo(168 * e, 100 * e, 170 * e, 92 * e, 169 * e, 85 * e), n.bezierCurveTo(166 * e, 86 * e, 166 * e, 86 * e, 163 * e, 87 * e), n.bezierCurveTo(165.5 * e, 83 * e, 165.5 * e, 83 * e, 168 * e, 79 * e), n.bezierCurveTo(165.5 * e, 76.5 * e, 165.5 * e, 76.5 * e, 163 * e, 74 * e), n.bezierCurveTo(155 * e, 82.5 * e, 155 * e, 82.5 * e, 147 * e, 91 * e), n.bezierCurveTo(139 * e, 95.5 * e, 139 * e, 95.5 * e, 131 * e, 100 * e), n.bezierCurveTo(97.5 * e, 100.5 * e, 97.5 * e, 100.5 * e, 64 * e, 101 * e), n.bezierCurveTo(49 * e, 102 * e, 43 * e, 90 * e, 36 * e, 80 * e), n.closePath(), fill_path(n, i[0]), n.globalAlpha = 1, n.translate(0, -6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(36 * e, 80 * e), n.bezierCurveTo(30 * e, 84 * e, 28 * e, 92 * e, 34 * e, 100 * e), n.bezierCurveTo(41.5 * e, 102 * e, 41.5 * e, 102 * e, 49 * e, 104 * e), n.bezierCurveTo(43 * e, 105.5 * e, 43 * e, 105.5 * e, 37 * e, 107 * e), n.bezierCurveTo(46 * e, 111 * e, 60 * e, 114 * e, 76 * e, 114 * e), n.bezierCurveTo(78 * e, 110.5 * e, 78 * e, 110.5 * e, 80 * e, 107 * e), n.bezierCurveTo(81 * e, 110.5 * e, 81 * e, 110.5 * e, 82 * e, 114 * e), n.bezierCurveTo(94.5 * e, 113.5 * e, 94.5 * e, 113.5 * e, 107 * e, 113 * e), n.bezierCurveTo(108.5 * e, 110 * e, 108.5 * e, 110 * e, 110 * e, 107 * e), n.bezierCurveTo(111.5 * e, 110.5 * e, 111.5 * e, 110.5 * e, 113 * e, 114 * e), n.bezierCurveTo(131 * e, 112.5 * e, 131 * e, 112.5 * e, 149 * e, 111 * e), n.bezierCurveTo(148.5 * e, 107.5 * e, 148.5 * e, 107.5 * e, 148 * e, 104 * e), n.bezierCurveTo(150.5 * e, 107 * e, 150.5 * e, 107 * e, 153 * e, 110 * e), n.bezierCurveTo(155.5 * e, 108.5 * e, 155.5 * e, 108.5 * e, 158 * e, 107 * e), n.bezierCurveTo(156.5 * e, 104 * e, 156.5 * e, 104 * e, 155 * e, 101 * e), n.bezierCurveTo(158.5 * e, 102.5 * e, 158.5 * e, 102.5 * e, 162 * e, 104 * e), n.bezierCurveTo(168 * e, 100 * e, 170 * e, 92 * e, 169 * e, 85 * e), n.bezierCurveTo(166 * e, 86 * e, 166 * e, 86 * e, 163 * e, 87 * e), n.bezierCurveTo(165.5 * e, 83 * e, 165.5 * e, 83 * e, 168 * e, 79 * e), n.bezierCurveTo(165.5 * e, 76.5 * e, 165.5 * e, 76.5 * e, 163 * e, 74 * e), n.bezierCurveTo(155 * e, 82.5 * e, 155 * e, 82.5 * e, 147 * e, 91 * e), n.bezierCurveTo(139 * e, 95.5 * e, 139 * e, 95.5 * e, 131 * e, 100 * e), n.bezierCurveTo(97.5 * e, 100.5 * e, 97.5 * e, 100.5 * e, 64 * e, 101 * e), n.bezierCurveTo(49 * e, 102 * e, 43 * e, 90 * e, 36 * e, 80 * e), n.closePath(), fill_path(n, i[1], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(49 * e, 98 * e), n.bezierCurveTo(96.5 * e, 98 * e, 96.5 * e, 98 * e, 144 * e, 98 * e), n.bezierCurveTo(136.5 * e, 102 * e, 136.5 * e, 102 * e, 129 * e, 106 * e), n.bezierCurveTo(103 * e, 105.5 * e, 103 * e, 105.5 * e, 77 * e, 105 * e), n.bezierCurveTo(65 * e, 105 * e, 65 * e, 105 * e, 53 * e, 105 * e), n.closePath(), fill_path(n, i[1]), n.globalAlpha = .5, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(54 * e, 98 * e), n.bezierCurveTo(97 * e, 98 * e, 97 * e, 98 * e, 140 * e, 98 * e), n.bezierCurveTo(134 * e, 101 * e, 134 * e, 101 * e, 128 * e, 104 * e), n.bezierCurveTo(92 * e, 104 * e, 92 * e, 104 * e, 56 * e, 104 * e), n.closePath(), fill_path(n, i[0]), n.globalAlpha = 1, n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(118 * e, 47 * e), n.bezierCurveTo(124.5 * e, 43.5 * e, 124.5 * e, 43.5 * e, 131 * e, 40 * e), n.bezierCurveTo(128 * e, 46 * e, 128 * e, 46 * e, 125 * e, 52 * e), n.bezierCurveTo(131 * e, 57 * e, 135 * e, 64 * e, 139 * e, 73 * e), n.bezierCurveTo(142.5 * e, 69.5 * e, 142.5 * e, 69.5 * e, 146 * e, 66 * e), n.bezierCurveTo(143.5 * e, 72.5 * e, 143.5 * e, 72.5 * e, 141 * e, 79 * e), n.bezierCurveTo(142 * e, 91 * e, 141 * e, 94 * e, 132 * e, 98 * e), n.bezierCurveTo(117 * e, 102 * e, 126 * e, 108 * e, 142 * e, 102 * e), n.bezierCurveTo(159 * e, 98 * e, 164 * e, 80 * e, 162 * e, 47 * e), n.bezierCurveTo(160 * e, 19 * e, 150 * e, 6 * e, 117 * e, 4 * e), n.bezierCurveTo(44 * e, 0 * e, 35 * e, 20 * e, 33 * e, 37 * e), n.bezierCurveTo(29 * e, 69 * e, 33 * e, 88 * e, 44 * e, 96 * e), n.bezierCurveTo(64 * e, 107 * e, 70 * e, 102 * e, 54 * e, 93 * e), n.bezierCurveTo(49 * e, 88 * e, 50 * e, 82 * e, 53 * e, 77 * e), n.bezierCurveTo(51.5 * e, 71 * e, 51.5 * e, 71 * e, 50 * e, 65 * e), n.bezierCurveTo(53 * e, 68.5 * e, 53 * e, 68.5 * e, 56 * e, 72 * e), n.bezierCurveTo(59 * e, 67.5 * e, 59 * e, 67.5 * e, 62 * e, 63 * e), n.bezierCurveTo(60.5 * e, 59.5 * e, 60.5 * e, 59.5 * e, 59 * e, 56 * e), n.bezierCurveTo(62 * e, 57 * e, 62 * e, 57 * e, 65 * e, 58 * e), n.bezierCurveTo(78 * e, 35 * e, 103 * e, 36 * e, 117 * e, 47 * e), n.closePath(), fill_path(n, i[1], i[2], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(62 * e, 21 * e), n.bezierCurveTo(63 * e, 34 * e, 64 * e, 37 * e, 66 * e, 40 * e), n.bezierCurveTo(54 * e, 49 * e, 53 * e, 51 * e, 48 * e, 58 * e), n.bezierCurveTo(44 * e, 51 * e, 42 * e, 43 * e, 40 * e, 36 * e), n.bezierCurveTo(47 * e, 28 * e, 52 * e, 25 * e, 61 * e, 21 * e), n.closePath(), fill_path(n, i[4]), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(60 * e, 29 * e), n.bezierCurveTo(62 * e, 25 * e, 65 * e, 24 * e, 70 * e, 23 * e), fill_path(n, void 0, i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(61 * e, 37 * e), n.bezierCurveTo(63 * e, 32 * e, 66 * e, 32 * e, 71 * e, 32 * e), fill_path(n, void 0, i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(52 * e, 31 * e), n.bezierCurveTo(50 * e, 26 * e, 50 * e, 25 * e, 51 * e, 23 * e), fill_path(n, void 0, i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(46 * e, 35 * e), n.bezierCurveTo(44 * e, 31 * e, 43 * e, 29 * e, 45 * e, 26 * e), fill_path(n, void 0, i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(58 * e, 44 * e), n.bezierCurveTo(57 * e, 48 * e, 57 * e, 50 * e, 60 * e, 52 * e), fill_path(n, void 0, i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(53 * e, 48 * e), n.bezierCurveTo(52 * e, 52 * e, 52 * e, 54 * e, 55 * e, 57 * e), fill_path(n, void 0, i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(46 * e, 41 * e), n.bezierCurveTo(41 * e, 42 * e, 39 * e, 45 * e, 38 * e, 48 * e), fill_path(n, void 0, i[3], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(48 * e, 48 * e), n.bezierCurveTo(42 * e, 51 * e, 42 * e, 53 * e, 40 * e, 55 * e), fill_path(n, void 0, i[3], 4 * e), 0 == r ? (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(99 * e, 101 * e), n.bezierCurveTo(118.6666259765625 * e, 104.33331298828125 * e, 124.6666259765625 * e, 116.33331298828125 * e, 112.6666259765625 * e, 114.33331298828125 * e), n.bezierCurveTo(104.6666259765625 * e, 112.33331298828125 * e, 100.6666259765625 * e, 105.33331298828125 * e, 99.6666259765625 * e, 101.33331298828125 * e), fill_path(n, void 0, i[5], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(97.6666259765625 * e, 101.33331298828125 * e), n.bezierCurveTo(81.6666259765625 * e, 106.33331298828125 * e, 79.6666259765625 * e, 114.33331298828125 * e, 89.6666259765625 * e, 114.33331298828125 * e), n.bezierCurveTo(95.6666259765625 * e, 111.33331298828125 * e, 95.6666259765625 * e, 109.33331298828125 * e, 98.6666259765625 * e, 102.33331298828125 * e), fill_path(n, void 0, i[5], 6 * e)) : (n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(103 * e, 100.39999389648438 * e), n.bezierCurveTo(120 * e, 106.39999389648438 * e, 118 * e, 107.39999389648438 * e, 120 * e, 111.39999389648438 * e), fill_path(n, void 0, i[5], 6 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(103 * e, 100.39999389648438 * e), n.bezierCurveTo(90 * e, 103.39999389648438 * e, 89 * e, 106.39999389648438 * e, 87 * e, 112.39999389648438 * e), fill_path(n, void 0, i[5], 6 * e), circle(n, 86 * e, 114.39999389648438 * e, 4.5 * e), fill_path(n, i[1], i[5], 6 * e), circle(n, 121 * e, 114.39999389648438 * e, 4.5 * e), fill_path(n, i[1], i[5], 6 * e)), a
}

function create_treasure_chest(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 253 * e, i.height = 192 * e, r.globalAlpha = .5, r.save(), r.translate(42 * e, 99 * e), r.globalAlpha = .5, round_rect(r, -7 * e, -20 * e, 14 * e, 39 * e, 20 * e), r.restore(), fill_path(r, t[0]), r.globalAlpha = 1, r.save(), r.translate(37 * e, 94 * e), round_rect(r, -7 * e, -20 * e, 14 * e, 37 * e, 20 * e), r.restore(), fill_path(r, t[2]), r.globalAlpha = .5, r.save(), r.translate(136 * e, 99 * e), r.globalAlpha = .5, round_rect(r, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e), r.restore(), fill_path(r, t[0], t[0], 13 * e), r.globalAlpha = 1, r.save(), r.translate(131 * e, 94 * e), round_rect(r, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e), r.restore(), fill_path(r, t[2], t[2], 13 * e), r.save(), r.translate(131 * e, 94 * e), round_rect(r, -76 * e, -61 * e, 152 * e, 122 * e, 20 * e), r.restore(), fill_path(r, t[3], t[1], 8 * e), r.save(), r.translate(168.5 * e, 93.5 * e), round_rect(r, -30.5 * e, -58.5 * e, 61 * e, 117 * e, 20 * e), r.restore(), fill_path(r, t[3], t[4], 6 * e), r.save(), r.translate(93.5 * e, 95.5 * e), round_rect(r, -32 * e, -59.5 * e, 59 * e, 119 * e, 20 * e), r.restore(), fill_path(r, t[3], t[4], 6 * e), r.save(), r.translate(130.5 * e, 94 * e), round_rect(r, -36 * e, -67 * e, 73 * e, 134 * e, 20 * e), r.restore(), fill_path(r, t[3], t[2], 8 * e), r.globalAlpha = .5, r.save(), r.translate(133 * e, 97 * e), round_rect(r, -83 * e, -12 * e, 160 * e, 24 * e, 0 * e), r.restore(), fill_path(r, t[0]), r.globalAlpha = 1, r.save(), r.translate(133 * e, 92 * e), round_rect(r, -83 * e, -12 * e, 160 * e, 24 * e, 0 * e), r.restore(), fill_path(r, t[2]), r.globalAlpha = .5, r.save(), r.translate(228 * e, 99.5 * e), r.globalAlpha = .5, round_rect(r, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e), r.restore(), fill_path(r, t[0]), r.globalAlpha = 1, r.save(), r.translate(223 * e, 94.5 * e), round_rect(r, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e), r.restore(), fill_path(r, t[2]), r.save(), r.translate(133.5 * e, 175.5 * e), r.globalAlpha = .5, round_rect(r, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e), r.restore(), fill_path(r, t[0]), r.globalAlpha = 1, r.save(), r.translate(128.5 * e, 170.5 * e), round_rect(r, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e), r.restore(), fill_path(r, t[2]), i
}

function create_hurt_treasure_chest(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 253 * e, i.height = 192 * e, r.save(), r.translate(37 * e, 94 * e), round_rect(r, -7 * e, -20 * e, 14 * e, 37 * e, 20 * e), r.restore(), fill_path(r, t[0]), r.save(), r.translate(131 * e, 94 * e), round_rect(r, -84 * e, -67 * e, 168 * e, 134 * e, 20 * e), r.restore(), fill_path(r, t[0], t[0], 13 * e), r.save(), r.translate(223 * e, 94.5 * e), round_rect(r, -5 * e, -18.5 * e, 10 * e, 37 * e, 20 * e), r.restore(), fill_path(r, t[0]), r.save(), r.translate(128.5 * e, 170.5 * e), round_rect(r, -22.5 * e, -6.5 * e, 45 * e, 13 * e, 20 * e), r.restore(), fill_path(r, t[0]), i
}

function create_bottle(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 316 * e, r.height = 365 * e, a.save(), a.translate(156.07142639160156 * e, 51.81248474121094 * e), a.rotate(0), round_rect(a, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e), a.restore(), fill_path(a, i[1], i[2], 15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(110.57142639160156 * e, 197.09820556640625 * e), a.bezierCurveTo(158.07142639160156 * e, 179.09820556640625 * e, 158.07142639160156 * e, 179.09820556640625 * e, 205.57142639160156 * e, 161.09820556640625 * e), a.bezierCurveTo(205.57142639160156 * e, 235.45535278320312 * e, 205.57142639160156 * e, 235.45535278320312 * e, 205.57142639160156 * e, 309.8125 * e), a.bezierCurveTo(205.57142639160156 * e, 323.8125 * e, 200.57142639160156 * e, 325.8125 * e, 187.57142639160156 * e, 326.8125 * e), a.bezierCurveTo(155.57142639160156 * e, 326.3125 * e, 155.57142639160156 * e, 326.3125 * e, 123.57142639160156 * e, 325.8125 * e), a.bezierCurveTo(111.57142639160156 * e, 326.8125 * e, 109.57142639160156 * e, 321.8125 * e, 110.57142639160156 * e, 312.8125 * e), a.closePath(), fill_path(a, i[3], i[4], 15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(126.57142639160156 * e, 67.38392639160156 * e), a.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e), a.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e), a.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e), a.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e), a.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e), a.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e), a.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e), a.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e), a.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e), a.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e), a.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e), a.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e), a.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e), a.closePath(), fill_path(a, void 0, i[5], 15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(125.57142639160156 * e, 156.66963958740234 * e), a.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e), a.closePath(), fill_path(a, void 0, i[6], 15 * e), r
}

function create_bottle_full(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 316 * e, r.height = 365 * e, a.save(), a.translate(156.07142639160156 * e, 51.81248474121094 * e), a.rotate(0), round_rect(a, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e), a.restore(), fill_path(a, i[1], i[2], 15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(126.57142639160156 * e, 67.38392639160156 * e), a.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e), a.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e), a.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e), a.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e), a.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e), a.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e), a.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e), a.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e), a.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e), a.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e), a.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e), a.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e), a.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e), a.closePath(), fill_path(a, void 0, i[5], 15 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(125.57142639160156 * e, 156.66963958740234 * e), a.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e), a.closePath(), fill_path(a, void 0, i[6], 15 * e), r
}

function create_drink_delay(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d");
    return i.width = 316 * e, i.height = 365 * e, r.save(), r.translate(156.07142639160156 * e, 51.81248474121094 * e), r.rotate(0), round_rect(r, -21.5 * e, -34 * e, 43 * e, 68 * e, 8 * e), r.restore(), fill_path(r, t[0], t[0], 15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(126.57142639160156 * e, 67.38392639160156 * e), r.bezierCurveTo(126.57142639160156 * e, 57.38392639160156 * e, 132.57142639160156 * e, 54.38392639160156 * e, 140.57142639160156 * e, 54.38392639160156 * e), r.bezierCurveTo(177.57142639160156 * e, 55.38392639160156 * e, 158.07142639160156 * e, 54.38392639160156 * e, 175.57142639160156 * e, 54.38392639160156 * e), r.bezierCurveTo(185.57142639160156 * e, 56.38392639160156 * e, 185.57142639160156 * e, 57.38392639160156 * e, 184.57142639160156 * e, 66.38392639160156 * e), r.bezierCurveTo(184.57142639160156 * e, 78.38392639160156 * e, 184.57142639160156 * e, 89.38392639160156 * e, 184.57142639160156 * e, 90.38392639160156 * e), r.bezierCurveTo(177.57142639160156 * e, 107.38392639160156 * e, 180.57142639160156 * e, 112.38392639160156 * e, 189.57142639160156 * e, 116.38392639160156 * e), r.bezierCurveTo(212.57142639160156 * e, 127.38392639160156 * e, 212.57142639160156 * e, 132.38392639160156 * e, 211.57142639160156 * e, 150.38392639160156 * e), r.bezierCurveTo(211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 227.59821128845215 * e, 211.57142639160156 * e, 304.81249618530273 * e), r.bezierCurveTo(212.57142639160156 * e, 328.81249618530273 * e, 209.57142639160156 * e, 330.81249618530273 * e, 188.57142639160156 * e, 333.81249618530273 * e), r.bezierCurveTo(155.07142639160156 * e, 333.31249618530273 * e, 155.07142639160156 * e, 333.31249618530273 * e, 121.57142639160156 * e, 332.81249618530273 * e), r.bezierCurveTo(104.57142639160156 * e, 327.81249618530273 * e, 105.57142639160156 * e, 328.81249618530273 * e, 104.57142639160156 * e, 312.81249618530273 * e), r.bezierCurveTo(104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 228.16963958740234 * e, 104.57142639160156 * e, 143.52678298950195 * e), r.bezierCurveTo(106.57142639160156 * e, 124.52678298950195 * e, 110.57142639160156 * e, 123.52678298950195 * e, 123.57142639160156 * e, 116.52678298950195 * e), r.bezierCurveTo(136.57142639160156 * e, 110.52678298950195 * e, 130.57142639160156 * e, 106.52678298950195 * e, 126.57142639160156 * e, 98.52678298950195 * e), r.closePath(), fill_path(r, t[0], t[0], 15 * e), r.beginPath(), r.lineCap = "round", r.lineJoin = "round", r.moveTo(125.57142639160156 * e, 156.66963958740234 * e), r.bezierCurveTo(125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 182.66963958740234 * e, 125.57142639160156 * e, 208.66963958740234 * e), r.closePath(), fill_path(r, t[0], t[0], 15 * e), i
}

function create_bucket_empty(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 400 * e, a.translate(0, 15 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(102 * e, 154 * e), a.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e), a.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e), a.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e), a.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(102 * e, 154 * e), a.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e), a.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e), a.closePath(), fill_path(a, void 0, i[0], 11 * e), a.translate(0, -5 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(103 * e, 154 * e), a.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e), a.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e), a.closePath(), fill_path(a, i[3], i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(102 * e, 154 * e), a.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e), a.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e), a.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e), a.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e), a.closePath(), fill_path(a, i[1], i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(182 * e, 185 * e), a.bezierCurveTo(182.5 * e, 237.5 * e, 182.5 * e, 237.5 * e, 183 * e, 290 * e), a.closePath(), fill_path(a, void 0, i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(222 * e, 287 * e), a.bezierCurveTo(226 * e, 233.5 * e, 226 * e, 233.5 * e, 230 * e, 180 * e), a.closePath(), fill_path(a, void 0, i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(145 * e, 290 * e), a.bezierCurveTo(140.5 * e, 237 * e, 140.5 * e, 237 * e, 136 * e, 184 * e), a.closePath(), fill_path(a, i[1], i[2], 11 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105 * e, 184 * e), a.bezierCurveTo(148 * e, 205 * e, 231 * e, 202 * e, 260 * e, 182 * e), a.bezierCurveTo(259 * e, 195.5 * e, 259 * e, 195.5 * e, 258 * e, 209 * e), a.bezierCurveTo(217 * e, 218 * e, 163 * e, 225 * e, 108 * e, 207 * e), a.closePath(), fill_path(a, i[4], i[2], 11 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(251 * e, 276 * e), a.bezierCurveTo(251.5 * e, 267.5 * e, 251.5 * e, 267.5 * e, 252 * e, 259 * e), a.bezierCurveTo(212 * e, 272 * e, 156 * e, 275 * e, 112 * e, 260 * e), a.bezierCurveTo(112.5 * e, 269 * e, 112.5 * e, 269 * e, 113 * e, 278 * e), a.bezierCurveTo(155 * e, 306 * e, 253 * e, 286 * e, 250 * e, 276 * e), a.closePath(), fill_path(a, i[4], i[2], 11 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(102 * e, 154 * e), a.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e), a.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e), a.closePath(), fill_path(a, void 0, i[2], 11 * e), r
}

function create_bucket_full(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 400 * e, r.height = 400 * e, a.translate(0, 15 * e), a.globalAlpha = t ? .5 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(102 * e, 154 * e), a.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e), a.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e), a.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e), a.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(102 * e, 154 * e), a.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e), a.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e), a.closePath(), fill_path(a, void 0, i[0], 11 * e), a.translate(0, -5 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(103 * e, 154 * e), a.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e), a.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e), a.closePath(), fill_path(a, i[3], i[2], 12 * e), a.translate(0, 25 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(103 * e, 154 * e), a.bezierCurveTo(98 * e, 119 * e, 264 * e, 119 * e, 264 * e, 154 * e), a.bezierCurveTo(271 * e, 189 * e, 94 * e, 188 * e, 103 * e, 154 * e), a.closePath(), fill_path(a, i[5]), a.translate(0, -25 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(102 * e, 154 * e), a.bezierCurveTo(108 * e, 216.5 * e, 108 * e, 216.5 * e, 114 * e, 279 * e), a.bezierCurveTo(124 * e, 300 * e, 237 * e, 299 * e, 251 * e, 279 * e), a.bezierCurveTo(257 * e, 217 * e, 257 * e, 217 * e, 263 * e, 155 * e), a.bezierCurveTo(248 * e, 194 * e, 91 * e, 180 * e, 103 * e, 156 * e), a.closePath(), fill_path(a, i[1], i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(182 * e, 185 * e), a.bezierCurveTo(182.5 * e, 237.5 * e, 182.5 * e, 237.5 * e, 183 * e, 290 * e), a.closePath(), fill_path(a, void 0, i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(222 * e, 287 * e), a.bezierCurveTo(226 * e, 233.5 * e, 226 * e, 233.5 * e, 230 * e, 180 * e), a.closePath(), fill_path(a, void 0, i[2], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(145 * e, 290 * e), a.bezierCurveTo(140.5 * e, 237 * e, 140.5 * e, 237 * e, 136 * e, 184 * e), a.closePath(), fill_path(a, i[1], i[2], 11 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105 * e, 184 * e), a.bezierCurveTo(148 * e, 205 * e, 231 * e, 202 * e, 260 * e, 182 * e), a.bezierCurveTo(259 * e, 195.5 * e, 259 * e, 195.5 * e, 258 * e, 209 * e), a.bezierCurveTo(217 * e, 218 * e, 163 * e, 225 * e, 108 * e, 207 * e), a.closePath(), fill_path(a, i[4], i[2], 11 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(251 * e, 276 * e), a.bezierCurveTo(251.5 * e, 267.5 * e, 251.5 * e, 267.5 * e, 252 * e, 259 * e), a.bezierCurveTo(212 * e, 272 * e, 156 * e, 275 * e, 112 * e, 260 * e), a.bezierCurveTo(112.5 * e, 269 * e, 112.5 * e, 269 * e, 113 * e, 278 * e), a.bezierCurveTo(155 * e, 306 * e, 253 * e, 286 * e, 250 * e, 276 * e), a.closePath(), fill_path(a, i[4], i[2], 11 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(102 * e, 154 * e), a.bezierCurveTo(106 * e, 53 * e, 255 * e, 53 * e, 263 * e, 154 * e), a.bezierCurveTo(248 * e, 38 * e, 99 * e, 69 * e, 103 * e, 154 * e), a.closePath(), fill_path(a, void 0, i[2], 11 * e), r
}

function create_shovel(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 80 * e, r.height = 160 * e, a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.save(), round_rect(a, 33 * e, 53 * e, 10 * e, 98 * e, 10 * e), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(-150 * e, -100 * e), a.moveTo(167.5 * e, 171.0625 * e), a.bezierCurveTo(188 * e, 171.0625 * e, 188 * e, 171.0625 * e, 208.5 * e, 171.0625 * e), a.bezierCurveTo(208.5 * e, 156.0625 * e, 208.5 * e, 156.0625 * e, 208.5 * e, 141.0625 * e), a.bezierCurveTo(203.5 * e, 113.0625 * e, 179.5 * e, 96.0625 * e, 167.5 * e, 141.0625 * e), a.closePath(), fill_path(a, i[0]), a.restore(), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.save(), round_rect(a, 33 * e, 53 * e, 10 * e, 98 * e, 10 * e), fill_path(a, i[1], i[2], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(-150 * e, -100 * e), a.moveTo(167.5 * e, 171.0625 * e), a.bezierCurveTo(188 * e, 171.0625 * e, 188 * e, 171.0625 * e, 208.5 * e, 171.0625 * e), a.bezierCurveTo(208.5 * e, 156.0625 * e, 208.5 * e, 156.0625 * e, 208.5 * e, 141.0625 * e), a.bezierCurveTo(203.5 * e, 113.0625 * e, 179.5 * e, 96.0625 * e, 167.5 * e, 141.0625 * e), a.closePath(), fill_path(a, i[3], i[4], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.translate(0 * e, 1 * e), a.moveTo(180.5 * e, 169.0625 * e), a.bezierCurveTo(180.5 * e, 157.5625 * e, 180.5 * e, 157.5625 * e, 180.5 * e, 146.0625 * e), a.bezierCurveTo(181.5 * e, 134.0625 * e, 193.5 * e, 129.0625 * e, 196.5 * e, 146.0625 * e), a.bezierCurveTo(196.5 * e, 157.5625 * e, 196.5 * e, 157.5625 * e, 196.5 * e, 169.0625 * e), a.closePath(), fill_path(a, i[5]), a.restore(), r
}

function create_symbol_hud(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 109 * e, r.height = 110 * e, circle(a, 54.5 * e, 55 * e, 48.038209575038294 * e), fill_path(a, t[0], t[1], 8 * e), 0 == i ? (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(54.928558349609375 * e, 43.72320556640625 * e), a.bezierCurveTo(66.92855834960938 * e, 31.72320556640625 * e, 69.92855834960938 * e, 29.72320556640625 * e, 74.92855834960938 * e, 29.72320556640625 * e), a.bezierCurveTo(86.92855834960938 * e, 28.72320556640625 * e, 91.92855834960938 * e, 42.72320556640625 * e, 89.92855834960938 * e, 52.72320556640625 * e), a.bezierCurveTo(88.92855834960938 * e, 63.72320556640625 * e, 73.92855834960938 * e, 75.72320556640625 * e, 55.928558349609375 * e, 87.72320556640625 * e), a.bezierCurveTo(37.928558349609375 * e, 78.72320556640625 * e, 26.928558349609375 * e, 65.72320556640625 * e, 19.928558349609375 * e, 54.72320556640625 * e), a.bezierCurveTo(13.928558349609375 * e, 42.72320556640625 * e, 21.928558349609375 * e, 28.72320556640625 * e, 35.928558349609375 * e, 29.72320556640625 * e), a.bezierCurveTo(45.928558349609375 * e, 31.72320556640625 * e, 51.928558349609375 * e, 40.72320556640625 * e, 53.928558349609375 * e, 44.72320556640625 * e), a.closePath(), fill_path(a, t[2])) : 1 == i ? (a.save(), a.translate(55 * e, 39.48748779296875 * e), round_rect(a, -11.5 * e, -36 * e, 23 * e, 72 * e, 10 * e), a.restore(), fill_path(a, t[2], t[3], 4 * e), circle(a, 54.5 * e, 78.48748779296875 * e, 22.02271554554524 * e), fill_path(a, t[4], t[3], 4 * e), a.save(), a.translate(55.5 * e, 57.287506103515625 * e), round_rect(a, -9 * e, -16 * e, 18 * e, 32 * e, 10 * e), a.restore(), fill_path(a, t[4]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(66.5 * e, 25.287506103515625 * e), a.bezierCurveTo(60.5 * e, 25.287506103515625 * e, 63.5 * e, 25.287506103515625 * e, 54.5 * e, 25.287506103515625 * e), a.closePath(), fill_path(a, void 0, t[5], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(66.5 * e, 37.287506103515625 * e), a.bezierCurveTo(60.5 * e, 37.287506103515625 * e, 60.5 * e, 37.287506103515625 * e, 54.5 * e, 37.287506103515625 * e), a.closePath(), fill_path(a, void 0, t[5], 4 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(66.5 * e, 50.287506103515625 * e), a.bezierCurveTo(61 * e, 50.287506103515625 * e, 61 * e, 50.287506103515625 * e, 55.5 * e, 50.287506103515625 * e), a.closePath(), fill_path(a, void 0, t[5], 4 * e)) : 2 == i ? (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(45.928558349609375 * e, 55.29463195800781 * e), a.bezierCurveTo(38.928558349609375 * e, 67.29463195800781 * e, 38.928558349609375 * e, 67.29463195800781 * e, 31.928558349609375 * e, 79.29463195800781 * e), a.bezierCurveTo(15.928558349609375 * e, 85.29463195800781 * e, 17.928558349609375 * e, 86.29463195800781 * e, 17.928558349609375 * e, 90.29463195800781 * e), a.bezierCurveTo(19.928558349609375 * e, 94.29463195800781 * e, 21.928558349609375 * e, 94.29463195800781 * e, 27.928558349609375 * e, 92.29463195800781 * e), a.bezierCurveTo(29.928558349609375 * e, 98.29463195800781 * e, 30.928558349609375 * e, 99.29463195800781 * e, 33.928558349609375 * e, 99.29463195800781 * e), a.bezierCurveTo(38.928558349609375 * e, 97.29463195800781 * e, 38.928558349609375 * e, 93.29463195800781 * e, 37.928558349609375 * e, 86.29463195800781 * e), a.bezierCurveTo(45.428558349609375 * e, 73.29463195800781 * e, 51.928558349609375 * e, 64.29463195800781 * e, 52.928558349609375 * e, 60.29463195800781 * e), a.closePath(), fill_path(a, t[2]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(55.928558349609375 * e, 8.866058349609375 * e), a.bezierCurveTo(35.928558349609375 * e, 35.866058349609375 * e, 37.928558349609375 * e, 48.866058349609375 * e, 46.928558349609375 * e, 62.866058349609375 * e), a.bezierCurveTo(65.92855834960938 * e, 72.86605834960938 * e, 80.92855834960938 * e, 55.866058349609375 * e, 93.92855834960938 * e, 36.866058349609375 * e), a.closePath(), fill_path(a, t[3], t[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(93.92855834960938 * e, 36.866058349609375 * e), a.bezierCurveTo(82.92855834960938 * e, 37.866058349609375 * e, 77.92855834960938 * e, 36.866058349609375 * e, 67.92855834960938 * e, 28.866058349609375 * e), a.bezierCurveTo(53.928558349609375 * e, 16.866058349609375 * e, 53.928558349609375 * e, 14.866058349609375 * e, 55.928558349609375 * e, 7.866058349609375 * e), a.bezierCurveTo(65.92855834960938 * e, 4.866058349609375 * e, 71.92855834960938 * e, 7.866058349609375 * e, 83.92855834960938 * e, 13.866058349609375 * e), a.bezierCurveTo(96.92855834960938 * e, 21.866058349609375 * e, 95.92855834960938 * e, 31.866058349609375 * e, 92.92855834960938 * e, 36.866058349609375 * e), a.closePath(), fill_path(a, t[3], t[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(68.92855834960938 * e, 16.866058349609375 * e), a.bezierCurveTo(71.92855834960938 * e, 13.866058349609375 * e, 76.92855834960938 * e, 16.866058349609375 * e, 79.92855834960938 * e, 21.866058349609375 * e), a.bezierCurveTo(82.92855834960938 * e, 24.866058349609375 * e, 81.92855834960938 * e, 27.866058349609375 * e, 73.92855834960938 * e, 24.866058349609375 * e), a.bezierCurveTo(67.92855834960938 * e, 20.866058349609375 * e, 66.92855834960938 * e, 19.866058349609375 * e, 67.92855834960938 * e, 17.866058349609375 * e), a.closePath(), fill_path(a, t[2])) : 3 == i && (a.scale(.9, .9), a.translate(6 * e, 0), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(54 * e, .421875 * e), a.bezierCurveTo(84 * e, 45.421875 * e, 89 * e, 51.421875 * e, 83 * e, 74.421875 * e), a.bezierCurveTo(74 * e, 95.421875 * e, 46 * e, 98.421875 * e, 30 * e, 78.421875 * e), a.bezierCurveTo(22 * e, 59.421875 * e, 27 * e, 49.421875 * e, 34 * e, 36.421875 * e), a.closePath(), fill_path(a, t[2], t[3], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(74 * e, 52.421875 * e), a.bezierCurveTo(77 * e, 73.421875 * e, 69 * e, 81.421875 * e, 58 * e, 81.421875 * e), a.bezierCurveTo(66 * e, 71.421875 * e, 70 * e, 66.421875 * e, 74 * e, 52.421875 * e), a.closePath(), fill_path(a, t[3])), r
}

function create_button_background(e, t) {
    var i = document.createElement("canvas"),
        r = i.getContext("2d"),
        a = e.w + e.lw,
        n = e.h + e.lw,
        o = .1 * n;
    return i.width = a, i.height = n + o, r.beginPath(), r.translate(a / 2, n / 2 + o), r.globalAlpha = .5, round_rect(r, -e.w / 2, -e.h / 2, e.w, e.h, e.r), fill_path(r, "#000", "#000", e.lw), r.globalAlpha = 1, r.beginPath(), t || r.translate(0, -o), round_rect(r, -e.w / 2, -e.h / 2, e.w, e.h, e.r), fill_path(r, e.bg, e.fg, e.lw), r.beginPath(), r.fillStyle = e.color, r.textBaseline = "middle", r.textAlign = "center", r.font = e.size + "px " + e.font, r.fillText(e.text, 0, 0), i
}

function create_button(e) {
    for (var t = [], i = 0; i < e.length; i++) t.push(create_button_background(e[i], 2 == i));
    return t
}

function create_gauges_mobile(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d"),
        r = 335 * e,
        a = 250 * e,
        n = 120 * e,
        o = 20 * e,
        s = 35 * e,
        _ = 65 * e,
        T = 2 * e,
        E = 4 * e;
    return t.width = r, t.height = n, i.beginPath(), i.translate(0, 15 * e), round_rect(i, _, 0, a, o, T), fill_path(i, null, "#69A148", E), i.translate(0, s), round_rect(i, _, 0, a, o, T), fill_path(i, null, "#AF352A", E), i.translate(0, s), round_rect(i, _, 0, a, o, T), fill_path(i, null, "#669BB1", E), t
}

function create_oxygen_gauges(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d"),
        r = 600 * e,
        a = 22 * e,
        n = 4 * e,
        o = 4 * e;
    return t.width = r, t.height = a, round_rect(i, 5 * e, 5 * e, r - 10 * e, a - 10 * e, n), fill_path(i, null, "#BBE8EF", o), t
}

function create_recipe_button(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 573 * e, r.height = 350 * e, 1 == i && (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(336 * e, 72 * e), a.bezierCurveTo(366 * e, 15 * e, 426 * e, 36 * e, 497 * e, 83 * e), a.bezierCurveTo(522 * e, 85 * e, 522 * e, 85 * e, 547 * e, 87 * e), a.bezierCurveTo(476.5 * e, 205 * e, 476.5 * e, 205 * e, 406 * e, 323 * e), a.bezierCurveTo(297.5 * e, 319 * e, 297.5 * e, 319 * e, 189 * e, 315 * e), a.bezierCurveTo(105.5 * e, 279 * e, 105.5 * e, 279 * e, 22 * e, 243 * e), a.bezierCurveTo(92 * e, 140 * e, 92 * e, 140 * e, 162 * e, 37 * e), a.bezierCurveTo(173 * e, 39 * e, 173 * e, 39 * e, 184 * e, 41 * e), a.bezierCurveTo(185 * e, 38.5 * e, 185 * e, 38.5 * e, 186 * e, 36 * e), a.bezierCurveTo(323 * e, 13 * e, 322 * e, 25 * e, 337 * e, 74 * e), a.closePath(), fill_path(a, t[4], t[4], 35 * e)), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(168 * e, 42 * e), a.bezierCurveTo(255 * e, 60 * e, 255 * e, 60 * e, 342 * e, 78 * e), a.bezierCurveTo(443 * e, 81.5 * e, 443 * e, 81.5 * e, 544 * e, 85 * e), a.bezierCurveTo(475 * e, 204.5 * e, 475 * e, 204.5 * e, 406 * e, 324 * e), a.bezierCurveTo(297.5 * e, 320 * e, 297.5 * e, 320 * e, 189 * e, 316 * e), a.bezierCurveTo(105.5 * e, 279 * e, 105.5 * e, 279 * e, 22 * e, 242 * e), a.closePath(), fill_path(a, t[0], t[1], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(188 * e, 41 * e), a.bezierCurveTo(308 * e, 15 * e, 325 * e, 18 * e, 337 * e, 66 * e), a.bezierCurveTo(191 * e, 305 * e, 196 * e, 286 * e, 184 * e, 307 * e), a.bezierCurveTo(175 * e, 250 * e, 90 * e, 254 * e, 52 * e, 241 * e), a.closePath(), fill_path(a, t[2], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(336 * e, 71 * e), a.bezierCurveTo(375 * e, 8 * e, 429 * e, 50 * e, 518 * e, 92 * e), a.bezierCurveTo(455 * e, 199.5 * e, 455 * e, 199.5 * e, 392 * e, 307 * e), a.bezierCurveTo(227 * e, 301 * e, 261 * e, 255 * e, 188 * e, 308 * e), a.closePath(), fill_path(a, t[2], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(357 * e, 76 * e), a.bezierCurveTo(390 * e, 67 * e, 414 * e, 86 * e, 435 * e, 104 * e), a.bezierCurveTo(417 * e, 135 * e, 417 * e, 135 * e, 399 * e, 166 * e), a.bezierCurveTo(352 * e, 140 * e, 345 * e, 139 * e, 319 * e, 142 * e), a.closePath(), fill_path(a, t[3], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(309 * e, 168 * e), a.bezierCurveTo(345 * e, 163 * e, 372 * e, 180 * e, 412 * e, 203 * e), fill_path(a, t[2], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(263 * e, 54 * e), a.bezierCurveTo(305 * e, 44 * e, 307 * e, 51 * e, 311 * e, 64 * e), a.bezierCurveTo(270.5 * e, 129.5 * e, 270.5 * e, 129.5 * e, 230 * e, 195 * e), a.bezierCurveTo(221 * e, 175 * e, 203 * e, 171 * e, 186 * e, 172 * e), a.closePath(), fill_path(a, t[3], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(292 * e, 198 * e), a.bezierCurveTo(328 * e, 191 * e, 364 * e, 211 * e, 401 * e, 237 * e), fill_path(a, t[2], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(245 * e, 68 * e), a.bezierCurveTo(210 * e, 72 * e, 210 * e, 72 * e, 189 * e, 69 * e), fill_path(a, t[2], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(222 * e, 96 * e), a.bezierCurveTo(196 * e, 97 * e, 193 * e, 97 * e, 177 * e, 92 * e), fill_path(a, t[2], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(207 * e, 124 * e), a.bezierCurveTo(179 * e, 123 * e, 177 * e, 124 * e, 161 * e, 119 * e), fill_path(a, t[2], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(115 * e, 183 * e), a.bezierCurveTo(184 * e, 185 * e, 203 * e, 198 * e, 219 * e, 221 * e), fill_path(a, t[2], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(98 * e, 213 * e), a.bezierCurveTo(161 * e, 214 * e, 193 * e, 227 * e, 201 * e, 249 * e), fill_path(a, t[2], t[3], 12 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(399 * e, 257 * e), a.bezierCurveTo(287 * e, 215 * e, 280 * e, 215 * e, 263 * e, 222 * e), a.bezierCurveTo(253 * e, 238 * e, 247 * e, 245 * e, 243 * e, 254 * e), a.bezierCurveTo(267 * e, 236 * e, 292 * e, 263 * e, 377 * e, 284 * e), fill_path(a, t[3], t[3], 12 * e), r
}

function create_quest_button(e, t, i, r) {
    var a = document.createElement("canvas"),
        n = a.getContext("2d");
    return a.width = 170 * e, a.height = 200 * e, n.translate(5 * e, 15 * e), 1 == r && (n.translate(0, -5 * e), circle(n, 77.00003051757812 * e, 104.49432373046875 * e, 71.84010022264724 * e), fill_path(n, i[1], i[5], 20 * e), circle(n, 77.00003051757812 * e, 104.22160339355469 * e, 61.554853586049575 * e), fill_path(n, i[1], i[5], 20 * e), n.save(), n.translate(77.00003051757812 * e, 31.267044067382812 * e), round_rect(n, -6 * e, -12.5 * e, 12 * e, 25 * e, 10 * e), n.restore(), fill_path(n, i[1], i[5], 20 * e), n.save(), n.translate(77.00003051757812 * e, 13.267044067382812 * e), round_rect(n, -15 * e, -10.5 * e, 30 * e, 21 * e, 10 * e), n.restore(), fill_path(n, i[1], i[5], 20 * e)), circle(n, 77.00003051757812 * e, 104.49432373046875 * e, 71.84010022264724 * e), fill_path(n, i[1], i[2], 7 * e), circle(n, 77.00003051757812 * e, 104.22160339355469 * e, 61.554853586049575 * e), fill_path(n, i[1], i[2], 7 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(18.000030517578125 * e, 105.85795593261719 * e), n.bezierCurveTo(134.00003051757812 * e, 104.85795593261719 * e, 77.00003051757812 * e, 104.85795593261719 * e, 136.00003051757812 * e, 103.85795593261719 * e), n.closePath(), fill_path(n, i[1], i[2], 8 * e), circle(n, 77.00003051757812 * e, 104.6761474609375 * e, 32.55764119219941 * e), fill_path(n, i[1], i[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(78.00003051757812 * e, 112.03977966308594 * e), n.bezierCurveTo(78.00003051757812 * e, 87.03977966308594 * e, 78.00003051757812 * e, 87.03977966308594 * e, 78.00003051757812 * e, 62.03977966308594 * e), n.closePath(), fill_path(n, i[3], i[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(78.00003051757812 * e, 48.03977966308594 * e), n.bezierCurveTo(82.00003051757812 * e, 55.53977966308594 * e, 82.00003051757812 * e, 55.53977966308594 * e, 86.00003051757812 * e, 63.03977966308594 * e), n.bezierCurveTo(78.00003051757812 * e, 63.03977966308594 * e, 78.00003051757812 * e, 63.03977966308594 * e, 70.00003051757812 * e, 63.03977966308594 * e), n.closePath(), fill_path(n, i[3], i[2], 4 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(80.00003051757812 * e, 111.6761474609375 * e), n.bezierCurveTo(95.00003051757812 * e, 97.1761474609375 * e, 95.00003051757812 * e, 97.1761474609375 * e, 110.00003051757812 * e, 82.6761474609375 * e), n.closePath(), fill_path(n, i[3], i[2], 8 * e), n.beginPath(), n.lineCap = "round", n.lineJoin = "round", n.moveTo(107.00003051757812 * e, 76.6761474609375 * e), n.bezierCurveTo(111.50003051757812 * e, 82.6761474609375 * e, 111.50003051757812 * e, 82.6761474609375 * e, 116.00003051757812 * e, 88.6761474609375 * e), n.bezierCurveTo(118.50003051757812 * e, 81.6761474609375 * e, 118.50003051757812 * e, 81.6761474609375 * e, 121.00003051757812 * e, 74.6761474609375 * e), n.closePath(), fill_path(n, i[3], i[2], 4 * e), circle(n, 77.00003051757812 * e, 105.03977966308594 * e, 15.556349186104045 * e), fill_path(n, i[3], i[2], 4 * e), n.save(), n.translate(77.00003051757812 * e, 31.267044067382812 * e), n.rotate(0), round_rect(n, -6 * e, -12.5 * e, 12 * e, 25 * e, 10 * e), n.restore(), fill_path(n, i[1], i[2], 7 * e), n.save(), n.translate(77.00003051757812 * e, 13.267044067382812 * e), n.rotate(0), round_rect(n, -15 * e, -10.5 * e, 30 * e, 21 * e, 10 * e), n.restore(), fill_path(n, i[1], i[2], 7 * e), a
}

function create_market_button(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 81 * e, r.height = 77 * e, a.translate(0, 10 * e), a.scale(.2, .2), a.translate(0, -30 * e), 1 == i && (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36.5 * e, 278.0625 * e), a.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e), a.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e), a.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e), a.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e), a.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e), a.closePath(), fill_path(a, t[0], t[3], 50 * e)), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(36.5 * e, 278.0625 * e), a.bezierCurveTo(67.5 * e, 316.0625 * e, 134.5 * e, 334.0625 * e, 199.5 * e, 319.0625 * e), a.bezierCurveTo(254.5 * e, 304.0625 * e, 346.5 * e, 270.0625 * e, 348.5 * e, 237.0625 * e), a.bezierCurveTo(359.5 * e, 206.0625 * e, 318.5 * e, 129.0625 * e, 262.5 * e, 122.0625 * e), a.bezierCurveTo(213.5 * e, 115.0625 * e, 166.5 * e, 133.0625 * e, 104.5 * e, 166.0625 * e), a.bezierCurveTo(54.5 * e, 194.0625 * e, 23.5 * e, 241.0625 * e, 36.5 * e, 277.0625 * e), a.closePath(), fill_path(a, t[0], t[1], 19 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(214.5 * e, 124.0625 * e), a.bezierCurveTo(242.5 * e, 125.0625 * e, 272.5 * e, 159.0625 * e, 283.5 * e, 184.0625 * e), a.bezierCurveTo(277.5 * e, 161.0625 * e, 233.5 * e, 128.0625 * e, 219.5 * e, 122.0625 * e), a.closePath(), fill_path(a, t[0], t[1], 19 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(157.5 * e, 145.0625 * e), a.bezierCurveTo(176.5 * e, 148.0625 * e, 205.5 * e, 176.0625 * e, 212.5 * e, 197.0625 * e), a.bezierCurveTo(205.5 * e, 178.0625 * e, 177.5 * e, 152.0625 * e, 156.5 * e, 142.0625 * e), a.closePath(), fill_path(a, t[0], t[1], 19 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(103.5 * e, 169.0625 * e), a.bezierCurveTo(160.5 * e, 166.0625 * e, 228.5 * e, 312.0625 * e, 162.5 * e, 323.0625 * e), a.bezierCurveTo(128.5 * e, 330.0625 * e, 45.5 * e, 312.0625 * e, 34.5 * e, 268.0625 * e), a.bezierCurveTo(30.5 * e, 238.0625 * e, 44.5 * e, 222.0625 * e, 52.5 * e, 211.0625 * e), a.bezierCurveTo(82.5 * e, 174.0625 * e, 104.5 * e, 166.0625 * e, 119.5 * e, 172.0625 * e), a.closePath(), fill_path(a, t[2], t[1], 19 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(194.5 * e, 313.0625 * e), a.bezierCurveTo(222.5 * e, 306.0625 * e, 319.5 * e, 271.0625 * e, 337.5 * e, 241.0625 * e), a.bezierCurveTo(274.5 * e, 270.0625 * e, 216.5 * e, 288.0625 * e, 199.5 * e, 287.0625 * e), a.bezierCurveTo(198.5 * e, 302.0625 * e, 195.5 * e, 311.0625 * e, 193.5 * e, 312.0625 * e), a.closePath(), fill_path(a, t[1]), a.scale(3, 3), a.translate(15, 10 * e), 1 == i && (a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(4 * e, 32 * e), a.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e), a.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e), a.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e), fill_path(a, void 0, t[3], 28 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56 * e, 6 * e), a.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e), a.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e), a.closePath(), fill_path(a, t[3], t[3], 28 * e)), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(4 * e, 32 * e), a.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e), a.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e), a.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e), fill_path(a, void 0, t[1], 17 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56 * e, 6 * e), a.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e), a.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e), a.closePath(), fill_path(a, t[1], t[1], 17 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(4 * e, 32 * e), a.bezierCurveTo(19 * e, 25 * e, 19 * e, 25 * e, 34 * e, 18 * e), a.bezierCurveTo(41.5 * e, 23.5 * e, 41.5 * e, 23.5 * e, 49 * e, 29 * e), a.bezierCurveTo(59.5 * e, 20 * e, 59.5 * e, 20 * e, 70 * e, 11 * e), fill_path(a, void 0, t[2], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(56 * e, 6 * e), a.bezierCurveTo(63.5 * e, 13.5 * e, 63.5 * e, 13.5 * e, 71 * e, 21 * e), a.bezierCurveTo(74.5 * e, 11.5 * e, 74.5 * e, 11.5 * e, 78 * e, 2 * e), a.closePath(), fill_path(a, t[2], t[2], 10 * e), r
}

function create_spanner(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 144 * e, r.height = 280 * e, a.globalAlpha = t ? .5 : 1, a.translate(5 * e, 5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(62 * e, 103.79999542236328 * e), a.bezierCurveTo(62.5 * e, 148.79999542236328 * e, 62.5 * e, 148.79999542236328 * e, 63 * e, 193.79999542236328 * e), a.bezierCurveTo(63 * e, 219.79999542236328 * e, 47 * e, 217.79999542236328 * e, 51 * e, 230.79999542236328 * e), a.bezierCurveTo(62 * e, 255.79999542236328 * e, 74 * e, 260.7999954223633 * e, 72 * e, 248.79999542236328 * e), a.bezierCurveTo(65 * e, 226.79999542236328 * e, 71 * e, 229.79999542236328 * e, 76 * e, 225.79999542236328 * e), a.bezierCurveTo(90 * e, 224.79999542236328 * e, 89 * e, 232.79999542236328 * e, 90 * e, 243.79999542236328 * e), a.bezierCurveTo(95 * e, 253.79999542236328 * e, 99 * e, 249.79999542236328 * e, 100 * e, 229.79999542236328 * e), a.bezierCurveTo(102 * e, 213.79999542236328 * e, 98 * e, 214.79999542236328 * e, 90 * e, 205.79999542236328 * e), a.bezierCurveTo(82 * e, 201.79999542236328 * e, 82 * e, 185.79999542236328 * e, 82 * e, 114.79999542236328 * e), a.bezierCurveTo(80 * e, 73 * e, 82 * e, 68 * e, 93 * e, 53 * e), a.bezierCurveTo(98 * e, 37 * e, 65 * e, 14 * e, 74 * e, 33 * e), a.bezierCurveTo(82 * e, 56 * e, 77 * e, 52 * e, 69 * e, 54 * e), a.bezierCurveTo(55 * e, 57 * e, 57 * e, 53 * e, 54 * e, 39 * e), a.bezierCurveTo(46 * e, 20 * e, 37 * e, 61 * e, 50 * e, 68 * e), a.bezierCurveTo(65 * e, 81 * e, 60 * e, 89 * e, 62 * e, 102 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(-5 * e, -5 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(62 * e, 103.79999542236328 * e), a.bezierCurveTo(62.5 * e, 148.79999542236328 * e, 62.5 * e, 148.79999542236328 * e, 63 * e, 193.79999542236328 * e), a.bezierCurveTo(63 * e, 219.79999542236328 * e, 47 * e, 217.79999542236328 * e, 51 * e, 230.79999542236328 * e), a.bezierCurveTo(62 * e, 255.79999542236328 * e, 74 * e, 260.7999954223633 * e, 72 * e, 248.79999542236328 * e), a.bezierCurveTo(65 * e, 226.79999542236328 * e, 71 * e, 229.79999542236328 * e, 76 * e, 225.79999542236328 * e), a.bezierCurveTo(90 * e, 224.79999542236328 * e, 89 * e, 232.79999542236328 * e, 90 * e, 243.79999542236328 * e), a.bezierCurveTo(95 * e, 253.79999542236328 * e, 99 * e, 249.79999542236328 * e, 100 * e, 229.79999542236328 * e), a.bezierCurveTo(102 * e, 213.79999542236328 * e, 98 * e, 214.79999542236328 * e, 90 * e, 205.79999542236328 * e), a.bezierCurveTo(82 * e, 201.79999542236328 * e, 82 * e, 185.79999542236328 * e, 82 * e, 114.79999542236328 * e), a.bezierCurveTo(80 * e, 73 * e, 82 * e, 68 * e, 93 * e, 53 * e), a.bezierCurveTo(98 * e, 37 * e, 65 * e, 14 * e, 74 * e, 33 * e), a.bezierCurveTo(82 * e, 56 * e, 77 * e, 52 * e, 69 * e, 54 * e), a.bezierCurveTo(55 * e, 57 * e, 57 * e, 53 * e, 54 * e, 39 * e), a.bezierCurveTo(46 * e, 20 * e, 37 * e, 61 * e, 50 * e, 68 * e), a.bezierCurveTo(65 * e, 81 * e, 60 * e, 89 * e, 62 * e, 102 * e), a.closePath(), fill_path(a, i[1], i[2], 6 * e), r
}

function create_present(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 160 * e, r.height = 161 * e, a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.save(), a.translate(80.5 * e, 78 * e), round_rect(a, -71.5 * e, -71 * e, 143 * e, 143 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -10 * e), a.save(), a.translate(80.5 * e, 78 * e), round_rect(a, -71.5 * e, -71 * e, 143 * e, 143 * e, 10 * e), a.restore(), fill_path(a, i[1], i[2], 6 * e), a.save(), a.translate(80 * e, 78.5 * e), round_rect(a, -17 * e, -72.5 * e, 34 * e, 145 * e, 10 * e), a.restore(), fill_path(a, i[3], i[4], 6 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.save(), a.translate(80 * e, 79.5 * e), round_rect(a, -73 * e, -16.5 * e, 145 * e, 34 * e, 10 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -10 * e), a.save(), a.translate(80 * e, 79.5 * e), round_rect(a, -73 * e, -16.5 * e, 145 * e, 34 * e, 10 * e), a.restore(), fill_path(a, i[3], i[4], 6 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79 * e, 71 * e), a.bezierCurveTo(90 * e, 42 * e, 98 * e, 36 * e, 109 * e, 43 * e), a.bezierCurveTo(119 * e, 47 * e, 128 * e, 62 * e, 107 * e, 72 * e), a.bezierCurveTo(96 * e, 78.5 * e, 96 * e, 78.5 * e, 85 * e, 85 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(84 * e, 78 * e), a.bezierCurveTo(113 * e, 82 * e, 123 * e, 97 * e, 115 * e, 108 * e), a.bezierCurveTo(110 * e, 119 * e, 98 * e, 124 * e, 87 * e, 107 * e), a.bezierCurveTo(81.5 * e, 94.5 * e, 81.5 * e, 94.5 * e, 76 * e, 82 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80 * e, 73 * e), a.bezierCurveTo(64 * e, 37 * e, 55 * e, 34 * e, 45 * e, 42 * e), a.bezierCurveTo(30 * e, 54 * e, 36 * e, 65 * e, 51 * e, 72 * e), a.bezierCurveTo(62.5 * e, 77 * e, 62.5 * e, 77 * e, 74 * e, 82 * e), a.closePath(), fill_path(a, i[0]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(82 * e, 83 * e), a.bezierCurveTo(73 * e, 107 * e, 60 * e, 123 * e, 47 * e, 113 * e), a.bezierCurveTo(33 * e, 105 * e, 33 * e, 92 * e, 52 * e, 85 * e), a.bezierCurveTo(74 * e, 73 * e, 77 * e, 76 * e, 76 * e, 75 * e), a.closePath(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(79 * e, 71 * e), a.bezierCurveTo(90 * e, 42 * e, 98 * e, 36 * e, 109 * e, 43 * e), a.bezierCurveTo(119 * e, 47 * e, 128 * e, 62 * e, 107 * e, 72 * e), a.bezierCurveTo(96 * e, 78.5 * e, 96 * e, 78.5 * e, 85 * e, 85 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(84 * e, 78 * e), a.bezierCurveTo(113 * e, 82 * e, 123 * e, 97 * e, 115 * e, 108 * e), a.bezierCurveTo(110 * e, 119 * e, 98 * e, 124 * e, 87 * e, 107 * e), a.bezierCurveTo(81.5 * e, 94.5 * e, 81.5 * e, 94.5 * e, 76 * e, 82 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(80 * e, 73 * e), a.bezierCurveTo(64 * e, 37 * e, 55 * e, 34 * e, 45 * e, 42 * e), a.bezierCurveTo(30 * e, 54 * e, 36 * e, 65 * e, 51 * e, 72 * e), a.bezierCurveTo(62.5 * e, 77 * e, 62.5 * e, 77 * e, 74 * e, 82 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(82 * e, 83 * e), a.bezierCurveTo(73 * e, 107 * e, 60 * e, 123 * e, 47 * e, 113 * e), a.bezierCurveTo(33 * e, 105 * e, 33 * e, 92 * e, 52 * e, 85 * e), a.bezierCurveTo(74 * e, 73 * e, 77 * e, 76 * e, 76 * e, 75 * e), a.closePath(), fill_path(a, i[3], i[4], 6 * e), a.globalAlpha = t ? .5 : 1, a.translate(0, 10 * e), a.save(), a.translate(78.5 * e, 78 * e), round_rect(a, -13.5 * e, -14 * e, 27 * e, 27 * e, 6 * e), a.restore(), fill_path(a, i[0]), a.globalAlpha = 1, a.translate(0, -10 * e), a.save(), a.translate(78.5 * e, 78 * e), round_rect(a, -13.5 * e, -14 * e, 27 * e, 27 * e, 6 * e), a.restore(), fill_path(a, i[3], i[4], 6 * e), r
}

function create_crown_life(e, t, i) {
    var r = document.createElement("canvas"),
        a = r.getContext("2d");
    return r.width = 372 * e, r.height = 358 * e, a.translate(0 * e, 10 * e), a.globalAlpha = t ? .2 : 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(247.00003051757812 * e, 115.76704406738281 * e), a.bezierCurveTo(305.0000305175781 * e, 124.76704406738281 * e, 335.0000305175781 * e, 112.76704406738281 * e, 359.0000305175781 * e, 93.76704406738281 * e), a.bezierCurveTo(359.5000305175781 * e, 113.26704406738281 * e, 359.5000305175781 * e, 113.26704406738281 * e, 360.0000305175781 * e, 132.7670440673828 * e), a.bezierCurveTo(339.0000305175781 * e, 177.7670440673828 * e, 281.0000305175781 * e, 178.7670440673828 * e, 243.00003051757812 * e, 183.7670440673828 * e), a.bezierCurveTo(214.50003051757812 * e, 214.2670440673828 * e, 214.50003051757812 * e, 214.2670440673828 * e, 186.00003051757812 * e, 244.7670440673828 * e), a.bezierCurveTo(155.00003051757812 * e, 214.2670440673828 * e, 155.00003051757812 * e, 214.2670440673828 * e, 124.00003051757812 * e, 183.7670440673828 * e), a.bezierCurveTo(51.000030517578125 * e, 180.7670440673828 * e, 21.000030517578125 * e, 161.7670440673828 * e, 9.000030517578125 * e, 129.7670440673828 * e), a.bezierCurveTo(8.500030517578125 * e, 110.76704406738281 * e, 8.500030517578125 * e, 110.76704406738281 * e, 8.000030517578125 * e, 91.76704406738281 * e), a.bezierCurveTo(31.000030517578125 * e, 112.76704406738281 * e, 87.00003051757812 * e, 119.76704406738281 * e, 116.00003051757812 * e, 117.76704406738281 * e), a.bezierCurveTo(175.00003051757812 * e, 18.767044067382812 * e, 170.00003051757812 * e, 23.767044067382812 * e, 181.00003051757812 * e, 14.767044067382812 * e), a.bezierCurveTo(199.00003051757812 * e, 34.76704406738281 * e, 203.00003051757812 * e, 54.76704406738281 * e, 247.00003051757812 * e, 115.76704406738281 * e), a.closePath(), fill_path(a, i[0], i[0], 10 * e), a.translate(0 * e, -10 * e), a.globalAlpha = 1, a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(107.00003051757812 * e, 54.13069152832031 * e), a.bezierCurveTo(106.50003051757812 * e, 38.63069152832031 * e, 106.50003051757812 * e, 38.63069152832031 * e, 106.00003051757812 * e, 23.130691528320312 * e), a.bezierCurveTo(121.50003051757812 * e, 38.13069152832031 * e, 121.50003051757812 * e, 38.13069152832031 * e, 137.00003051757812 * e, 53.13069152832031 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(233.00003051757812 * e, 53.6761474609375 * e), a.bezierCurveTo(247.00003051757812 * e, 37.1761474609375 * e, 247.00003051757812 * e, 37.1761474609375 * e, 261.0000305175781 * e, 20.6761474609375 * e), a.bezierCurveTo(261.0000305175781 * e, 36.1761474609375 * e, 261.0000305175781 * e, 36.1761474609375 * e, 261.0000305175781 * e, 51.6761474609375 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(293.0000305175781 * e, 54.403411865234375 * e), a.bezierCurveTo(300.0000305175781 * e, 49.903411865234375 * e, 300.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 45.403411865234375 * e), a.bezierCurveTo(307.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 49.903411865234375 * e, 307.0000305175781 * e, 54.403411865234375 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(77.00003051757812 * e, 54.403411865234375 * e), a.bezierCurveTo(70.00003051757812 * e, 50.403411865234375 * e, 70.00003051757812 * e, 50.403411865234375 * e, 63.000030517578125 * e, 46.403411865234375 * e), a.bezierCurveTo(62.500030517578125 * e, 50.903411865234375 * e, 62.500030517578125 * e, 50.903411865234375 * e, 62.000030517578125 * e, 55.403411865234375 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(58.000030517578125 * e, 122.3125 * e), a.bezierCurveTo(59.500030517578125 * e, 97.3125 * e, 59.500030517578125 * e, 97.3125 * e, 61.000030517578125 * e, 72.3125 * e), a.bezierCurveTo(91.00003051757812 * e, 89.3125 * e, 91.00003051757812 * e, 89.3125 * e, 121.00003051757812 * e, 106.3125 * e), a.closePath(), fill_path(a, i[1], i[1], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(310.0000305175781 * e, 127.3125 * e), a.bezierCurveTo(308.0000305175781 * e, 98.3125 * e, 308.0000305175781 * e, 98.3125 * e, 306.0000305175781 * e, 69.3125 * e), a.bezierCurveTo(274.5000305175781 * e, 88.8125 * e, 274.5000305175781 * e, 88.8125 * e, 243.00003051757812 * e, 108.3125 * e), a.closePath(), fill_path(a, i[1], i[1], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(226.00003051757812 * e, 87.85795593261719 * e), a.bezierCurveTo(243.50003051757812 * e, 66.85795593261719 * e, 243.50003051757812 * e, 66.85795593261719 * e, 261.0000305175781 * e, 45.85795593261719 * e), a.bezierCurveTo(265.0000305175781 * e, 83.85795593261719 * e, 265.0000305175781 * e, 83.85795593261719 * e, 269.0000305175781 * e, 121.85795593261719 * e), a.bezierCurveTo(235.00003051757812 * e, 122.85795593261719 * e, 233.00003051757812 * e, 107.85795593261719 * e, 228.00003051757812 * e, 90.85795593261719 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105.00003051757812 * e, 128.8579559326172 * e), a.bezierCurveTo(104.50003051757812 * e, 87.85795593261719 * e, 104.50003051757812 * e, 87.85795593261719 * e, 104.00003051757812 * e, 46.85795593261719 * e), a.bezierCurveTo(126.50003051757812 * e, 69.35795593261719 * e, 126.50003051757812 * e, 69.35795593261719 * e, 149.00003051757812 * e, 91.85795593261719 * e), a.bezierCurveTo(130.00003051757812 * e, 123.85795593261719 * e, 123.00003051757812 * e, 132.8579559326172 * e, 107.00003051757812 * e, 130.8579559326172 * e), a.closePath(), fill_path(a, i[1], i[1], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(59.000030517578125 * e, 121.85795593261719 * e), a.bezierCurveTo(59.500030517578125 * e, 99.35795593261719 * e, 59.500030517578125 * e, 99.35795593261719 * e, 60.000030517578125 * e, 76.85795593261719 * e), a.bezierCurveTo(84.00003051757812 * e, 92.35795593261719 * e, 84.00003051757812 * e, 92.35795593261719 * e, 108.00003051757812 * e, 107.85795593261719 * e), a.bezierCurveTo(106.00003051757812 * e, 148.8579559326172 * e, 86.00003051757812 * e, 148.8579559326172 * e, 62.000030517578125 * e, 123.85795593261719 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(105.00003051757812 * e, 132.8579559326172 * e), a.bezierCurveTo(104.50003051757812 * e, 93.35795593261719 * e, 104.50003051757812 * e, 93.35795593261719 * e, 104.00003051757812 * e, 53.85795593261719 * e), a.bezierCurveTo(126.50003051757812 * e, 75.85795593261719 * e, 126.50003051757812 * e, 75.85795593261719 * e, 149.00003051757812 * e, 97.85795593261719 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(311.0000305175781 * e, 126.85795593261719 * e), a.bezierCurveTo(309.0000305175781 * e, 101.35795593261719 * e, 309.0000305175781 * e, 101.35795593261719 * e, 307.0000305175781 * e, 75.85795593261719 * e), a.bezierCurveTo(271.0000305175781 * e, 96.85795593261719 * e, 271.0000305175781 * e, 96.85795593261719 * e, 235.00003051757812 * e, 117.85795593261719 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(228.00003051757812 * e, 96.85795593261719 * e), a.bezierCurveTo(244.50003051757812 * e, 74.85795593261719 * e, 244.50003051757812 * e, 74.85795593261719 * e, 261.0000305175781 * e, 52.85795593261719 * e), a.bezierCurveTo(265.5000305175781 * e, 89.85795593261719 * e, 265.5000305175781 * e, 89.85795593261719 * e, 270.0000305175781 * e, 126.85795593261719 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(12.000030517578125 * e, 86.13069152832031 * e), a.bezierCurveTo(36.000030517578125 * e, 113.13069152832031 * e, 84.00003051757812 * e, 111.13069152832031 * e, 116.00003051757812 * e, 113.13069152832031 * e), a.bezierCurveTo(164.00003051757812 * e, 23.130691528320312 * e, 172.00003051757812 * e, 18.130691528320312 * e, 181.00003051757812 * e, 9.130691528320312 * e), a.bezierCurveTo(199.00003051757812 * e, 29.130691528320312 * e, 221.00003051757812 * e, 78.13069152832031 * e, 247.00003051757812 * e, 112.13069152832031 * e), a.bezierCurveTo(301.0000305175781 * e, 122.13069152832031 * e, 338.0000305175781 * e, 111.13069152832031 * e, 359.0000305175781 * e, 94.13069152832031 * e), a.bezierCurveTo(359.0000305175781 * e, 113.13069152832031 * e, 358.5000305175781 * e, 105.13069152832031 * e, 358.0000305175781 * e, 116.13069152832031 * e), a.bezierCurveTo(270.5000305175781 * e, 130.1306915283203 * e, 270.5000305175781 * e, 130.1306915283203 * e, 183.00003051757812 * e, 144.1306915283203 * e), a.bezierCurveTo(98.00003051757812 * e, 128.6306915283203 * e, 98.00003051757812 * e, 128.6306915283203 * e, 13.000030517578125 * e, 113.13069152832031 * e), a.closePath(), fill_path(a, i[1], i[1], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(247.00003051757812 * e, 115.76704406738281 * e), a.bezierCurveTo(305.0000305175781 * e, 124.76704406738281 * e, 335.0000305175781 * e, 112.76704406738281 * e, 359.0000305175781 * e, 93.76704406738281 * e), a.bezierCurveTo(359.5000305175781 * e, 113.26704406738281 * e, 359.5000305175781 * e, 113.26704406738281 * e, 360.0000305175781 * e, 132.7670440673828 * e), a.bezierCurveTo(339.0000305175781 * e, 177.7670440673828 * e, 281.0000305175781 * e, 178.7670440673828 * e, 243.00003051757812 * e, 183.7670440673828 * e), a.bezierCurveTo(214.50003051757812 * e, 214.2670440673828 * e, 214.50003051757812 * e, 214.2670440673828 * e, 186.00003051757812 * e, 244.7670440673828 * e), a.bezierCurveTo(155.00003051757812 * e, 214.2670440673828 * e, 155.00003051757812 * e, 214.2670440673828 * e, 124.00003051757812 * e, 183.7670440673828 * e), a.bezierCurveTo(51.000030517578125 * e, 180.7670440673828 * e, 21.000030517578125 * e, 161.7670440673828 * e, 9.000030517578125 * e, 129.7670440673828 * e), a.bezierCurveTo(8.500030517578125 * e, 110.76704406738281 * e, 8.500030517578125 * e, 110.76704406738281 * e, 8.000030517578125 * e, 91.76704406738281 * e), a.bezierCurveTo(31.000030517578125 * e, 112.76704406738281 * e, 87.00003051757812 * e, 119.76704406738281 * e, 116.00003051757812 * e, 117.76704406738281 * e), a.bezierCurveTo(175.00003051757812 * e, 18.767044067382812 * e, 170.00003051757812 * e, 23.767044067382812 * e, 181.00003051757812 * e, 14.767044067382812 * e), a.bezierCurveTo(199.00003051757812 * e, 34.76704406738281 * e, 203.00003051757812 * e, 54.76704406738281 * e, 247.00003051757812 * e, 115.76704406738281 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(27.000030517578125 * e, 94.76704406738281 * e), a.bezierCurveTo(11.000030517578125 * e, 81.76704406738281 * e, 31.000030517578125 * e, 72.76704406738281 * e, 44.000030517578125 * e, 59.76704406738281 * e), a.bezierCurveTo(9.000030517578125 * e, 65.76704406738281 * e, 4.000030517578125 * e, 78.76704406738281 * e, 9.000030517578125 * e, 89.76704406738281 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(352.0000305175781 * e, 100.76705932617188 * e), a.bezierCurveTo(362.0000305175781 * e, 92.76705932617188 * e, 352.0000305175781 * e, 84.76705932617188 * e, 340.0000305175781 * e, 68.76705932617188 * e), a.bezierCurveTo(360.0000305175781 * e, 69.76705932617188 * e, 364.0000305175781 * e, 79.76705932617188 * e, 364.0000305175781 * e, 94.76705932617188 * e), a.closePath(), fill_path(a, i[1], i[1], 1 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(25.000030517578125 * e, 97.94886779785156 * e), a.bezierCurveTo(2.000030517578125 * e, 76.94886779785156 * e, 29.000030517578125 * e, 62.94886779785156 * e, 44.000030517578125 * e, 59.94886779785156 * e), a.bezierCurveTo(8.000030517578125 * e, 59.94886779785156 * e, -.999969482421875 * e, 81.94886779785156 * e, 4.000030517578125 * e, 92.94886779785156 * e), a.closePath(), fill_path(a, i[3]), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(349.0000305175781 * e, 100.94886779785156 * e), a.bezierCurveTo(366.0000305175781 * e, 82.94886779785156 * e, 353.0000305175781 * e, 76.94886779785156 * e, 337.0000305175781 * e, 67.94886779785156 * e), a.bezierCurveTo(366.0000305175781 * e, 69.94886779785156 * e, 366.0000305175781 * e, 83.94886779785156 * e, 363.0000305175781 * e, 101.94886779785156 * e), a.closePath(), fill_path(a, i[2], i[3], 10 * e), circle(a, 46.000030517578125 * e, 137.5852279663086 * e, 9.219544457292887 * e), fill_path(a, i[4], i[5], 1 * e), circle(a, 308.0000305175781 * e, 141.5852279663086 * e, 8.54400374531753 * e), fill_path(a, i[4], i[5], 1 * e), circle(a, 92.00003051757812 * e, 149.58523559570312 * e, 14.866068747318506 * e), fill_path(a, i[4], i[5], 1 * e), circle(a, 262.0000305175781 * e, 148.8579559326172 * e, 15.620499351813308 * e), fill_path(a, i[4], i[5], 1 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(184.00003051757812 * e, 68.85795593261719 * e), a.bezierCurveTo(203.00003051757812 * e, 108.85795593261719 * e, 203.00003051757812 * e, 108.85795593261719 * e, 222.00003051757812 * e, 148.8579559326172 * e), a.bezierCurveTo(202.50003051757812 * e, 177.8579559326172 * e, 202.50003051757812 * e, 177.8579559326172 * e, 183.00003051757812 * e, 206.8579559326172 * e), a.bezierCurveTo(162.00003051757812 * e, 178.8579559326172 * e, 162.00003051757812 * e, 178.8579559326172 * e, 141.00003051757812 * e, 150.8579559326172 * e), a.closePath(), fill_path(a, i[4], i[5], 10 * e), a.beginPath(), a.lineCap = "round", a.lineJoin = "round", a.moveTo(183.00003051757812 * e, 104.94886779785156 * e), a.bezierCurveTo(192.50003051757812 * e, 125.44886779785156 * e, 192.50003051757812 * e, 125.44886779785156 * e, 202.00003051757812 * e, 145.94886779785156 * e), a.bezierCurveTo(192.00003051757812 * e, 163.94886779785156 * e, 192.00003051757812 * e, 163.94886779785156 * e, 182.00003051757812 * e, 181.94886779785156 * e), a.bezierCurveTo(172.50003051757812 * e, 164.44886779785156 * e, 172.50003051757812 * e, 164.44886779785156 * e, 163.00003051757812 * e, 146.94886779785156 * e), a.closePath(), fill_path(a, i[6]), r
}

function create_background_market() {
    var e = document.createElement("canvas"),
        t = e.getContext("2d");
    e.width = 460, e.height = 220, t.fillStyle = "#3a2a0d", t.fillRect(0, 0, e.width, e.height), t.lineWidth = 4, t.beginPath(), t.strokeStyle = "#513810";
    for (var i = 20; i < 220; i += 20) t.moveTo(0, i), t.lineTo(460, i), t.closePath(), t.stroke();
    return e
}

function create_gauges(e) {
    var t = document.createElement("canvas"),
        i = t.getContext("2d"),
        r = 950 * e,
        a = 180 * e,
        n = 50 * e,
        o = 20 * e,
        s = 240 * e,
        _ = 35 * e,
        T = 1 * e,
        E = 4 * e,
        I = 4 * e;
    t.width = r, t.height = n, i.translate(0, 15 * e), round_rect(i, _, T, a, o, E), fill_path(i, null, "#69A148", I);
    var l = sprite[SPRITE.HEART_SYMBOL_HUD];
    i.drawImage(l, 17, -8), i.translate(s, 0), round_rect(i, _, T, a, o, E), fill_path(i, null, "#AF352A", I);
    l = sprite[SPRITE.FOOD_SYMBOL_HUD];
    i.drawImage(l, 17, -9), i.translate(s, 0), round_rect(i, _, T, a, o, E), fill_path(i, null, "#669BB1", I);
    l = sprite[SPRITE.COLD_SYMBOL_HUD];
    i.drawImage(l, 17, -8), i.translate(s, 0), round_rect(i, _, T, a, o, E), fill_path(i, null, "#074A87", I);
    l = sprite[SPRITE.WATER_SYMBOL_HUD];
    return i.drawImage(l, 17, -8), t
}

function _load_images() {
    (new Date).getTime();

    function e(e) {
        for (var t = 0, i = 0, r = 0; i < e.length; i++) {
            var a = e.charAt(i);
            "_" !== a && 5 !== i && ("1" === a && (t += Math.pow(2, r)), r++)
        }
        return t
    }
    for (var t in render_cosmetics(), sprite[SPRITE.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN], sprite[SPRITE.RIVER_DECO] = [], sprite[SPRITE.RIVER_DECO][SPRITE.DAY] = [], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_010_000")] = [IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_010_000")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_010_000")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_011_010")] = [IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_011_011")] = [IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO20], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO8, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_111")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO13], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_010_000")] = [IMAGES.DAY_RIVER_COMPO20], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_010_010")] = [IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_011_000")] = [IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_011_000")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_011_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_011_011")] = [IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO15], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_011_010")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_010")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_010")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("011_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_110_000")] = [IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_000")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("110_111_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_110")] = [IMAGES.DAY_RIVER_COMPO28, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_110")], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_000")] = [IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO14], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][e("111_111_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT] = [], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_010_000")] = [IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_010_000")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_010_000")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_011_010")] = [IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_011_011")] = [IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO20], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO8, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_111")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO13], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_010_000")] = [IMAGES.NIGHT_RIVER_COMPO20], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_010_010")] = [IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_011_000")] = [IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("010_110_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_011_000")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_011_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_011_011")] = [IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO15], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_011_010")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_010")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_010")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("011_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_110_000")] = [IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_000")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("110_111_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_110")] = [IMAGES.NIGHT_RIVER_COMPO28, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_110")], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_000")] = [IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO14], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28], sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][e("111_111_110")], sprite[SPRITE.RIVER] = [], sprite[SPRITE.RIVER][SPRITE.DAY] = [], sprite[SPRITE.RIVER][SPRITE.DAY][e("000_010_000")] = IMAGES.DAY_RIVER_000_010_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_010_010")] = IMAGES.DAY_RIVER_000_010_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_011_000")] = IMAGES.DAY_RIVER_000_011_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_011_010")] = IMAGES.DAY_RIVER_000_011_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_011_011")] = IMAGES.DAY_RIVER_000_011_011, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_110_000")] = IMAGES.DAY_RIVER_000_110_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_110_010")] = IMAGES.DAY_RIVER_000_110_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_110_110")] = IMAGES.DAY_RIVER_000_110_110, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_111_000")] = IMAGES.DAY_RIVER_000_111_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_111_010")] = IMAGES.DAY_RIVER_000_111_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_111_011")] = IMAGES.DAY_RIVER_000_111_011, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_111_110")] = IMAGES.DAY_RIVER_000_111_110, sprite[SPRITE.RIVER][SPRITE.DAY][e("000_111_111")] = IMAGES.DAY_RIVER_000_111_111, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_010_000")] = IMAGES.DAY_RIVER_010_010_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_010_010")] = IMAGES.DAY_RIVER_010_010_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_011_000")] = IMAGES.DAY_RIVER_010_011_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_011_010")] = IMAGES.DAY_RIVER_010_011_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_011_011")] = IMAGES.DAY_RIVER_010_011_011, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_110_000")] = IMAGES.DAY_RIVER_010_110_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_110_010")] = IMAGES.DAY_RIVER_010_110_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_110_110")] = IMAGES.DAY_RIVER_010_110_110, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_111_000")] = IMAGES.DAY_RIVER_010_111_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_111_010")] = IMAGES.DAY_RIVER_010_111_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_111_011")] = IMAGES.DAY_RIVER_010_111_011, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_111_110")] = IMAGES.DAY_RIVER_010_111_110, sprite[SPRITE.RIVER][SPRITE.DAY][e("010_111_111")] = IMAGES.DAY_RIVER_010_111_111, sprite[SPRITE.RIVER][SPRITE.DAY][e("011_011_000")] = IMAGES.DAY_RIVER_011_011_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("011_011_010")] = IMAGES.DAY_RIVER_011_011_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("011_011_011")] = IMAGES.DAY_RIVER_011_011_011, sprite[SPRITE.RIVER][SPRITE.DAY][e("011_111_000")] = IMAGES.DAY_RIVER_011_111_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("011_111_010")] = IMAGES.DAY_RIVER_011_111_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("011_111_011")] = IMAGES.DAY_RIVER_011_111_011, sprite[SPRITE.RIVER][SPRITE.DAY][e("011_111_110")] = IMAGES.DAY_RIVER_011_111_110, sprite[SPRITE.RIVER][SPRITE.DAY][e("011_111_111")] = IMAGES.DAY_RIVER_011_111_111, sprite[SPRITE.RIVER][SPRITE.DAY][e("110_110_000")] = IMAGES.DAY_RIVER_110_110_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("110_110_010")] = IMAGES.DAY_RIVER_110_110_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("110_110_110")] = IMAGES.DAY_RIVER_110_110_110, sprite[SPRITE.RIVER][SPRITE.DAY][e("110_111_000")] = IMAGES.DAY_RIVER_110_111_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("110_111_010")] = IMAGES.DAY_RIVER_110_111_010, sprite[SPRITE.RIVER][SPRITE.DAY][e("110_111_011")] = IMAGES.DAY_RIVER_110_111_011, sprite[SPRITE.RIVER][SPRITE.DAY][e("110_111_110")] = IMAGES.DAY_RIVER_110_111_110, sprite[SPRITE.RIVER][SPRITE.DAY][e("110_111_111")] = IMAGES.DAY_RIVER_110_111_111, sprite[SPRITE.RIVER][SPRITE.DAY][e("111_111_011")] = IMAGES.DAY_RIVER_111_111_011, sprite[SPRITE.RIVER][SPRITE.DAY][e("111_111_110")] = IMAGES.DAY_RIVER_111_111_110, sprite[SPRITE.RIVER][SPRITE.DAY][e("111_111_011")] = IMAGES.DAY_RIVER_111_111_011, sprite[SPRITE.RIVER][SPRITE.DAY][e("111_111_000")] = IMAGES.DAY_RIVER_111_111_000, sprite[SPRITE.RIVER][SPRITE.DAY][e("111_111_111")] = IMAGES.DAY_RIVER_111_111_111, sprite[SPRITE.RIVER][SPRITE.DAY][e("111_111_010")] = IMAGES.DAY_RIVER_111_111_010, sprite[SPRITE.RIVER][SPRITE.NIGHT] = [], sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_010_000")] = IMAGES.NIGHT_RIVER_000_010_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_010_010")] = IMAGES.NIGHT_RIVER_000_010_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_011_000")] = IMAGES.NIGHT_RIVER_000_011_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_011_010")] = IMAGES.NIGHT_RIVER_000_011_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_011_011")] = IMAGES.NIGHT_RIVER_000_011_011, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_110_000")] = IMAGES.NIGHT_RIVER_000_110_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_110_010")] = IMAGES.NIGHT_RIVER_000_110_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_110_110")] = IMAGES.NIGHT_RIVER_000_110_110, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_000")] = IMAGES.NIGHT_RIVER_000_111_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_010")] = IMAGES.NIGHT_RIVER_000_111_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_011")] = IMAGES.NIGHT_RIVER_000_111_011, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_110")] = IMAGES.NIGHT_RIVER_000_111_110, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("000_111_111")] = IMAGES.NIGHT_RIVER_000_111_111, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_010_000")] = IMAGES.NIGHT_RIVER_010_010_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_010_010")] = IMAGES.NIGHT_RIVER_010_010_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_011_000")] = IMAGES.NIGHT_RIVER_010_011_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_011_010")] = IMAGES.NIGHT_RIVER_010_011_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_011_011")] = IMAGES.NIGHT_RIVER_010_011_011, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_110_000")] = IMAGES.NIGHT_RIVER_010_110_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_110_010")] = IMAGES.NIGHT_RIVER_010_110_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_110_110")] = IMAGES.NIGHT_RIVER_010_110_110, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_000")] = IMAGES.NIGHT_RIVER_010_111_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_010")] = IMAGES.NIGHT_RIVER_010_111_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_011")] = IMAGES.NIGHT_RIVER_010_111_011, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_110")] = IMAGES.NIGHT_RIVER_010_111_110, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("010_111_111")] = IMAGES.NIGHT_RIVER_010_111_111, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("011_011_000")] = IMAGES.NIGHT_RIVER_011_011_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("011_011_010")] = IMAGES.NIGHT_RIVER_011_011_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("011_011_011")] = IMAGES.NIGHT_RIVER_011_011_011, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_000")] = IMAGES.NIGHT_RIVER_011_111_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_010")] = IMAGES.NIGHT_RIVER_011_111_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_011")] = IMAGES.NIGHT_RIVER_011_111_011, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_110")] = IMAGES.NIGHT_RIVER_011_111_110, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("011_111_111")] = IMAGES.NIGHT_RIVER_011_111_111, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("110_110_000")] = IMAGES.NIGHT_RIVER_110_110_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("110_110_010")] = IMAGES.NIGHT_RIVER_110_110_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("110_110_110")] = IMAGES.NIGHT_RIVER_110_110_110, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_000")] = IMAGES.NIGHT_RIVER_110_111_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_010")] = IMAGES.NIGHT_RIVER_110_111_010, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_011")] = IMAGES.NIGHT_RIVER_110_111_011, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_110")] = IMAGES.NIGHT_RIVER_110_111_110, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("110_111_111")] = IMAGES.NIGHT_RIVER_110_111_111, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_110")] = IMAGES.NIGHT_RIVER_111_111_110, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_000")] = IMAGES.NIGHT_RIVER_111_111_000, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_111")] = IMAGES.NIGHT_RIVER_111_111_111, sprite[SPRITE.RIVER][SPRITE.NIGHT][e("111_111_010")] = IMAGES.NIGHT_RIVER_111_111_010, sprite[SPRITE.PICK_REIDITE] = [], sprite[SPRITE.PICK_REIDITE][SPRITE.DAY] = IMAGES.PICK_REIDITED, sprite[SPRITE.PICK_REIDITE][SPRITE.NIGHT] = IMAGES.PICK_REIDITEN, sprite[SPRITE.CARROT] = [], sprite[SPRITE.CARROT][SPRITE.DAY] = IMAGES.CARROTD, sprite[SPRITE.CARROT][SPRITE.NIGHT] = IMAGES.CARROTN, sprite[SPRITE.TOMATO_MINI] = [], sprite[SPRITE.TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINID, sprite[SPRITE.TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MININ, sprite[SPRITE.TOMATO] = [], sprite[SPRITE.TOMATO][SPRITE.DAY] = IMAGES.TOMATOD, sprite[SPRITE.TOMATO][SPRITE.NIGHT] = IMAGES.TOMATON, sprite[SPRITE.DRIED_CARROT] = [], sprite[SPRITE.DRIED_CARROT][SPRITE.DAY] = IMAGES.CARROT_DRIEDD, sprite[SPRITE.DRIED_CARROT][SPRITE.NIGHT] = IMAGES.CARROT_DRIEDN, sprite[SPRITE.DRIED_TOMATO_MINI] = [], sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINI_DRIEDD, sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN, sprite[SPRITE.WATERMELON] = [], sprite[SPRITE.WATERMELON][SPRITE.DAY] = IMAGES.WATERMELOND, sprite[SPRITE.WATERMELON][SPRITE.NIGHT] = IMAGES.WATERMELONN, sprite[SPRITE.DRIED_WATERMELON] = [], sprite[SPRITE.DRIED_WATERMELON][SPRITE.DAY] = IMAGES.DRIED_WATERMELOND, sprite[SPRITE.DRIED_WATERMELON][SPRITE.NIGHT] = IMAGES.DRIED_WATERMELONN, sprite[SPRITE.ALOE_VERA_GROWN] = [], sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.DAY] = IMAGES.ALOE_VERA_GROWND, sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.NIGHT] = IMAGES.ALOE_VERA_GROWNN, sprite[SPRITE.DRIED_ALOE_VERA] = [], sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERA_DRIEDD, sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN, sprite[SPRITE.CACTUS] = [], sprite[SPRITE.CACTUS][SPRITE.DAY] = [IMAGES.CACTUSD], sprite[SPRITE.CACTUS][SPRITE.NIGHT] = [IMAGES.CACTUSN], sprite[SPRITE.REIDITE_WALL] = [], sprite[SPRITE.REIDITE_WALL][SPRITE.DAY] = IMAGES.REIDITE_WALLD, sprite[SPRITE.REIDITE_WALL][SPRITE.NIGHT] = IMAGES.REIDITE_WALLN, sprite[SPRITE.REIDITE_SPIKE] = [], sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_SPIKED, sprite[SPRITE.REIDITE_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_SPIKEN, sprite[SPRITE.REIDITE_DOOR] = [], sprite[SPRITE.REIDITE_DOOR][SPRITE.DAY] = IMAGES.REIDITE_DOORD, sprite[SPRITE.REIDITE_DOOR][SPRITE.NIGHT] = IMAGES.REIDITE_DOORN, sprite[SPRITE.WOOD_DOOR_SPIKE] = [], sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.WOOD_DOOR_SPIKED, sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN, sprite[SPRITE.STONE_DOOR_SPIKE] = [], sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.STONE_DOOR_SPIKED, sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.STONE_DOOR_SPIKEN, sprite[SPRITE.GOLD_DOOR_SPIKE] = [], sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.GOLD_DOOR_SPIKED, sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN, sprite[SPRITE.DIAMOND_DOOR_SPIKE] = [], sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.DAY] = IMAGES.DIAMOND_DOOR_SPIKED, sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN, sprite[SPRITE.AMETHYST_DOOR_SPIKE] = [], sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.DAY] = IMAGES.AMETHYST_DOOR_SPIKED, sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.AMETHYST_DOOR_SPIKEN, sprite[SPRITE.REIDITE_DOOR_SPIKE] = [], sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_DOOR_SPIKED, sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN, sprite[SPRITE.GOLDEN_HEN] = [], sprite[SPRITE.GOLDEN_HEN][SPRITE.DAY] = IMAGES.HEND, sprite[SPRITE.GOLDEN_HEN][SPRITE.NIGHT] = IMAGES.HENN, sprite[SPRITE.GOLDEN_CHICKEN] = [], sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.DAY] = IMAGES.CHICKEND, sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.NIGHT] = IMAGES.CHICKENN, sprite[SPRITE.HAMMER_REIDITE] = [], sprite[SPRITE.HAMMER_REIDITE][SPRITE.DAY] = IMAGES.HAMMER_REIDITED, sprite[SPRITE.HAMMER_REIDITE][SPRITE.NIGHT] = IMAGES.HAMMER_REIDITEN, sprite[SPRITE.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN, sprite[SPRITE.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN, sprite[SPRITE.FOG] = [], sprite[SPRITE.FOG][SPRITE.DAY] = [], sprite[SPRITE.FOG][SPRITE.NIGHT] = [], sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG0D), sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG1D), sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG2D), sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG0N), sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG1N), sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG2N), sprite[SPRITE.FOD] = [], sprite[SPRITE.FOD][SPRITE.DAY] = [], sprite[SPRITE.FOD][SPRITE.NIGHT] = [], sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD0D), sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD1D), sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD2D), sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD0N), sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD1N), sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD2N), sprite[SPRITE.MARKER] = [], sprite[SPRITE.MARKER][SPRITE.DAY] = [], sprite[SPRITE.MARKER][SPRITE.NIGHT] = [], sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER0D), sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER1D), sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER2D), sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER3D), sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER0N), sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER1N), sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER2N), sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER3N), sprite[SPRITE.LAVA_DRAGON] = [], sprite[SPRITE.LAVA_DRAGON][SPRITE.DAY] = IMAGES.LAVA_DRAGOND, sprite[SPRITE.LAVA_DRAGON][SPRITE.NIGHT] = IMAGES.LAVA_DRAGONN, sprite[SPRITE.LAVA_WING_LEFT] = [], sprite[SPRITE.LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.LAVA_WING_LEFTD, sprite[SPRITE.LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.LAVA_WING_LEFTN, sprite[SPRITE.LAVA_WING_RIGHT] = [], sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.LAVA_WING_RIGHTD, sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.LAVA_WING_RIGHTN, sprite[SPRITE.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON, sprite[SPRITE.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT, sprite[SPRITE.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT, sprite[SPRITE.DIAMOND_PROTECTION] = [], sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.DIAMOND_PROTECTIOND, sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.DIAMOND_PROTECTIONN, sprite[SPRITE.GLOVES_DIAMOND_PROTECTION] = [], sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND, sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN, sprite[SPRITE.AMETHYST_PROTECTION] = [], sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.AMETHYST_PROTECTIOND, sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.AMETHYST_PROTECTIONN, sprite[SPRITE.GLOVES_AMETHYST_PROTECTION] = [], sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND, sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN, sprite[SPRITE.REIDITE_HELMET] = [], sprite[SPRITE.REIDITE_HELMET][SPRITE.DAY] = IMAGES.REIDITE_HELMETD, sprite[SPRITE.REIDITE_HELMET][SPRITE.NIGHT] = IMAGES.REIDITE_HELMETN, sprite[SPRITE.REIDITE_SWORD] = [], sprite[SPRITE.REIDITE_SWORD][SPRITE.DAY] = IMAGES.REIDITE_SWORDD, sprite[SPRITE.REIDITE_SWORD][SPRITE.NIGHT] = IMAGES.REIDITE_SWORDN, sprite[SPRITE.REIDITE_SPEAR] = [], sprite[SPRITE.REIDITE_SPEAR][SPRITE.DAY] = IMAGES.REIDITE_SPEARD, sprite[SPRITE.REIDITE_SPEAR][SPRITE.NIGHT] = IMAGES.REIDITE_SPEARN, sprite[SPRITE.LAVA_SPEAR] = [], sprite[SPRITE.LAVA_SPEAR][SPRITE.DAY] = IMAGES.LAVA_SPEARD, sprite[SPRITE.LAVA_SPEAR][SPRITE.NIGHT] = IMAGES.LAVA_SPEARN, sprite[SPRITE.LAVA_SWORD] = [], sprite[SPRITE.LAVA_SWORD][SPRITE.DAY] = IMAGES.LAVA_SWORDD, sprite[SPRITE.LAVA_SWORD][SPRITE.NIGHT] = IMAGES.LAVA_SWORDN, sprite[SPRITE.LAVA_HELMET] = [], sprite[SPRITE.LAVA_HELMET][SPRITE.DAY] = IMAGES.LAVA_HELMETD, sprite[SPRITE.LAVA_HELMET][SPRITE.NIGHT] = IMAGES.LAVA_HELMETN, sprite[SPRITE.WITCH] = [], sprite[SPRITE.WITCH][SPRITE.DAY] = IMAGES.WITCHD, sprite[SPRITE.WITCH][SPRITE.NIGHT] = IMAGES.WITCHN, sprite[SPRITE.NIMBUS] = [], sprite[SPRITE.NIMBUS][SPRITE.DAY] = IMAGES.NIMBUSD, sprite[SPRITE.NIMBUS][SPRITE.NIGHT] = IMAGES.NIMBUSN, sprite[SPRITE.WOOD_SHIELD] = [], sprite[SPRITE.WOOD_SHIELD][SPRITE.DAY] = IMAGES.WOOD_SHIELDD, sprite[SPRITE.WOOD_SHIELD][SPRITE.NIGHT] = IMAGES.WOOD_SHIELDN, sprite[SPRITE.STONE_SHIELD] = [], sprite[SPRITE.STONE_SHIELD][SPRITE.DAY] = IMAGES.STONE_SHIELDD, sprite[SPRITE.STONE_SHIELD][SPRITE.NIGHT] = IMAGES.STONE_SHIELDN, sprite[SPRITE.GOLD_SHIELD] = [], sprite[SPRITE.GOLD_SHIELD][SPRITE.DAY] = IMAGES.GOLD_SHIELDD, sprite[SPRITE.GOLD_SHIELD][SPRITE.NIGHT] = IMAGES.GOLD_SHIELDN, sprite[SPRITE.DIAMOND_SHIELD] = [], sprite[SPRITE.DIAMOND_SHIELD][SPRITE.DAY] = IMAGES.DIAMOND_SHIELDD, sprite[SPRITE.DIAMOND_SHIELD][SPRITE.NIGHT] = IMAGES.DIAMOND_SHIELDN, sprite[SPRITE.AMETHYST_SHIELD] = [], sprite[SPRITE.AMETHYST_SHIELD][SPRITE.DAY] = IMAGES.AMETHYST_SHIELDD, sprite[SPRITE.AMETHYST_SHIELD][SPRITE.NIGHT] = IMAGES.AMETHYST_SHIELDN, sprite[SPRITE.REIDITE_SHIELD] = [], sprite[SPRITE.REIDITE_SHIELD][SPRITE.DAY] = IMAGES.REIDITE_SHIELDD, sprite[SPRITE.REIDITE_SHIELD][SPRITE.NIGHT] = IMAGES.REIDITE_SHIELDN, sprite[SPRITE.WOOD_ARROW] = [], sprite[SPRITE.WOOD_ARROW][SPRITE.DAY] = IMAGES.WOOD_ARROWD, sprite[SPRITE.WOOD_ARROW][SPRITE.NIGHT] = IMAGES.WOOD_ARROWN, sprite[SPRITE.WOOD_BOW] = [], sprite[SPRITE.WOOD_BOW][SPRITE.DAY] = IMAGES.WOOD_BOWD, sprite[SPRITE.WOOD_BOW][SPRITE.NIGHT] = IMAGES.WOOD_BOWN, sprite[SPRITE.STONE_ARROW] = [], sprite[SPRITE.STONE_ARROW][SPRITE.DAY] = IMAGES.STONE_ARROWD, sprite[SPRITE.STONE_ARROW][SPRITE.NIGHT] = IMAGES.STONE_ARROWN, sprite[SPRITE.STONE_BOW] = [], sprite[SPRITE.STONE_BOW][SPRITE.DAY] = IMAGES.STONE_BOWD, sprite[SPRITE.STONE_BOW][SPRITE.NIGHT] = IMAGES.STONE_BOWN, sprite[SPRITE.GOLD_ARROW] = [], sprite[SPRITE.GOLD_ARROW][SPRITE.DAY] = IMAGES.GOLD_ARROWD, sprite[SPRITE.GOLD_ARROW][SPRITE.NIGHT] = IMAGES.GOLD_ARROWN, sprite[SPRITE.GOLD_BOW] = [], sprite[SPRITE.GOLD_BOW][SPRITE.DAY] = IMAGES.GOLD_BOWD, sprite[SPRITE.GOLD_BOW][SPRITE.NIGHT] = IMAGES.GOLD_BOWN, sprite[SPRITE.DIAMOND_ARROW] = [], sprite[SPRITE.DIAMOND_ARROW][SPRITE.DAY] = IMAGES.DIAMOND_ARROWD, sprite[SPRITE.DIAMOND_ARROW][SPRITE.NIGHT] = IMAGES.DIAMOND_ARROWN, sprite[SPRITE.DIAMOND_BOW] = [], sprite[SPRITE.DIAMOND_BOW][SPRITE.DAY] = IMAGES.DIAMOND_BOWD, sprite[SPRITE.DIAMOND_BOW][SPRITE.NIGHT] = IMAGES.DIAMOND_BOWN, sprite[SPRITE.AMETHYST_ARROW] = [], sprite[SPRITE.AMETHYST_ARROW][SPRITE.DAY] = IMAGES.AMETHYST_ARROWD, sprite[SPRITE.AMETHYST_ARROW][SPRITE.NIGHT] = IMAGES.AMETHYST_ARROWN, sprite[SPRITE.AMETHYST_BOW] = [], sprite[SPRITE.AMETHYST_BOW][SPRITE.DAY] = IMAGES.AMETHYST_BOWD, sprite[SPRITE.AMETHYST_BOW][SPRITE.NIGHT] = IMAGES.AMETHYST_BOWN, sprite[SPRITE.REIDITE_ARROW] = [], sprite[SPRITE.REIDITE_ARROW][SPRITE.DAY] = IMAGES.REIDITE_ARROWD, sprite[SPRITE.REIDITE_ARROW][SPRITE.NIGHT] = IMAGES.REIDITE_ARROWN, sprite[SPRITE.REIDITE_BOW] = [], sprite[SPRITE.REIDITE_BOW][SPRITE.DAY] = IMAGES.REIDITE_BOWD, sprite[SPRITE.REIDITE_BOW][SPRITE.NIGHT] = IMAGES.REIDITE_BOWN, sprite[SPRITE.DRAGON_ARROW] = [], sprite[SPRITE.DRAGON_ARROW][SPRITE.DAY] = IMAGES.DRAGON_ARROWD, sprite[SPRITE.DRAGON_ARROW][SPRITE.NIGHT] = IMAGES.DRAGON_ARROWN, sprite[SPRITE.DRAGON_BOW] = [], sprite[SPRITE.DRAGON_BOW][SPRITE.DAY] = IMAGES.DRAGON_BOWD, sprite[SPRITE.DRAGON_BOW][SPRITE.NIGHT] = IMAGES.DRAGON_BOWN, sprite[SPRITE.TURBAN1] = [], sprite[SPRITE.TURBAN1][SPRITE.DAY] = IMAGES.TURBAN1D, sprite[SPRITE.TURBAN1][SPRITE.NIGHT] = IMAGES.TURBAN1N, sprite[SPRITE.TURBAN2] = [], sprite[SPRITE.TURBAN2][SPRITE.DAY] = IMAGES.TURBAN2D, sprite[SPRITE.TURBAN2][SPRITE.NIGHT] = IMAGES.TURBAN2N, sprite[SPRITE.REIDITE_PROTECTION] = [], sprite[SPRITE.REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.REIDITE_PROTECTIOND, sprite[SPRITE.REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.REIDITE_PROTECTIONN, sprite[SPRITE.GLOVES_REIDITE_PROTECTION] = [], sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.HAND_REIDITE_PROTECTIOND, sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_REIDITE_PROTECTIONN, sprite[SPRITE.LAVA_SHINGLE] = [], sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY] = [], sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT] = [], sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES0D), sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES1D), sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1D), sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1N), sprite[SPRITE.LAVA_BUBBLE] = [], sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY] = [], sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT] = [], sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE0D), sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE1D), sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE2D), sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE0N), sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE1N), sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE2N), sprite[SPRITE.PITCHFORK] = [], sprite[SPRITE.PITCHFORK][SPRITE.DAY] = IMAGES.PITCHFORKD, sprite[SPRITE.PITCHFORK][SPRITE.NIGHT] = IMAGES.PITCHFORKN, sprite[SPRITE.PITCHFORK2] = [], sprite[SPRITE.PITCHFORK2][SPRITE.DAY] = IMAGES.PITCHFORK2D, sprite[SPRITE.PITCHFORK2][SPRITE.NIGHT] = IMAGES.PITCHFORK2N, sprite[SPRITE.EMERALD] = [], sprite[SPRITE.EMERALD][SPRITE.DAY] = [], sprite[SPRITE.EMERALD][SPRITE.NIGHT] = [], sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD0D), sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD1D), sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD2D), sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD0N), sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD1N), sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD2N), sprite[SPRITE.REIDITE] = [], sprite[SPRITE.REIDITE][SPRITE.DAY] = [], sprite[SPRITE.REIDITE][SPRITE.NIGHT] = [], sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE0D), sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE1D), sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE2D), sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE0N), sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE1N), sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE2N), sprite[SPRITE.MAGMA] = [], sprite[SPRITE.MAGMA][SPRITE.DAY] = [], sprite[SPRITE.MAGMA][SPRITE.NIGHT] = [], sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA1D), sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA2D), sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA3D), sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA4D), sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA5D), sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA6D), sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA1N), sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA2N), sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA3N), sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA4N), sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA5N), sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA6N), sprite[SPRITE.LAVA_GROUND] = [], sprite[SPRITE.LAVA_GROUND][SPRITE.DAY] = [], sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT] = [], sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND1D), sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND2D), sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND3D), sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND4D), sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND5D), sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND6D), sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND1N), sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND2N), sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND3N), sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND4N), sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND5N), sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND6N), sprite[SPRITE.FIRE_MOB] = [], sprite[SPRITE.FIRE_MOB][SPRITE.DAY] = IMAGES.FIRE_MOBD, sprite[SPRITE.FIRE_MOB][SPRITE.NIGHT] = IMAGES.FIRE_MOBN, sprite[SPRITE.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT, sprite[SPRITE.MACHETE] = [], sprite[SPRITE.MACHETE][SPRITE.DAY] = IMAGES.MACHETED, sprite[SPRITE.MACHETE][SPRITE.NIGHT] = IMAGES.MACHETEN, sprite[SPRITE.BOAT] = [], sprite[SPRITE.BOAT][SPRITE.DAY] = IMAGES.BOATD, sprite[SPRITE.BOAT][SPRITE.NIGHT] = IMAGES.BOATN, sprite[SPRITE.SLED] = [], sprite[SPRITE.SLED][SPRITE.DAY] = IMAGES.SLEDD, sprite[SPRITE.SLED][SPRITE.NIGHT] = IMAGES.SLEDN, sprite[SPRITE.PLANE] = [], sprite[SPRITE.PLANE][SPRITE.DAY] = IMAGES.PLANED, sprite[SPRITE.PLANE][SPRITE.NIGHT] = IMAGES.PLANEN, sprite[SPRITE.PENGUIN] = [], sprite[SPRITE.PENGUIN][SPRITE.DAY] = IMAGES.PENGUIND, sprite[SPRITE.PENGUIN][SPRITE.NIGHT] = IMAGES.PENGUINN, sprite[SPRITE.HURT_PENGUIN] = IMAGES.HURT_PENGUIN, sprite[SPRITE.SAND_WORM1] = [], sprite[SPRITE.SAND_WORM1][SPRITE.DAY] = IMAGES.SAND_WORM1D, sprite[SPRITE.SAND_WORM1][SPRITE.NIGHT] = IMAGES.SAND_WORM1N, sprite[SPRITE.SAND_WORM2] = [], sprite[SPRITE.SAND_WORM2][SPRITE.DAY] = IMAGES.SAND_WORM2D, sprite[SPRITE.SAND_WORM2][SPRITE.NIGHT] = IMAGES.SAND_WORM2N, sprite[SPRITE.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0, sprite[SPRITE.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1, sprite[SPRITE.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2, sprite[SPRITE.SCORPION] = [], sprite[SPRITE.SCORPION][SPRITE.DAY] = IMAGES.SCORPIOND, sprite[SPRITE.SCORPION][SPRITE.NIGHT] = IMAGES.SCORPIONN, sprite[SPRITE.SCORPION_HAND_LEFT] = [], sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.DAY] = IMAGES.SCORPION_HAND_LEFTD, sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_LEFTN, sprite[SPRITE.SCORPION_HAND_RIGHT] = [], sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.DAY] = IMAGES.SCORPION_HAND_RIGHTD, sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_RIGHTN, sprite[SPRITE.HURT_SCORPION] = IMAGES.HURT_SCORPION, sprite[SPRITE.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT, sprite[SPRITE.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT, sprite[SPRITE.CRAB_BOSS_ATTACK] = [], sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_ATTACKD, sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN, sprite[SPRITE.CRAB_BOSS_TAMED] = [], sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.DAY] = IMAGES.CRAB_BOSS_TAMEDD, sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN, sprite[SPRITE.CRAB_BOSS] = [], sprite[SPRITE.CRAB_BOSS][SPRITE.DAY] = IMAGES.CRAB_BOSSD, sprite[SPRITE.CRAB_BOSS][SPRITE.NIGHT] = IMAGES.CRAB_BOSSN, sprite[SPRITE.CRAB_BOSS_CLAW_LEFT] = [], sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD, sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFTN, sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT] = [], sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHTD, sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHTN, sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK] = [], sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD, sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN, sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [], sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD, sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN, sprite[SPRITE.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS, sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT, sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT, sprite[SPRITE.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS, sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT, sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT, sprite[SPRITE.BABY_MAMMOTH_ATTACK] = [], sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD, sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_ATTACKN, sprite[SPRITE.BABY_MAMMOTH] = [], sprite[SPRITE.BABY_MAMMOTH][SPRITE.DAY] = IMAGES.BABY_MAMMOTHD, sprite[SPRITE.BABY_MAMMOTH][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTHN, sprite[SPRITE.MAMMOTH] = [], sprite[SPRITE.MAMMOTH][SPRITE.DAY] = IMAGES.MAMMOTHD, sprite[SPRITE.MAMMOTH][SPRITE.NIGHT] = IMAGES.MAMMOTHN, sprite[SPRITE.BABY_MAMMOTH_TAMED] = [], sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD, sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN, sprite[SPRITE.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH, sprite[SPRITE.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH, sprite[SPRITE.BABY_DRAGON_ATTACK] = [], sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_ATTACKD, sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN, sprite[SPRITE.BABY_DRAGON] = [], sprite[SPRITE.BABY_DRAGON][SPRITE.DAY] = IMAGES.BABY_DRAGOND, sprite[SPRITE.BABY_DRAGON][SPRITE.NIGHT] = IMAGES.BABY_DRAGONN, sprite[SPRITE.BABY_DRAGON_TAMED] = [], sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_TAMEDD, sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN, sprite[SPRITE.BABY_DRAGON_WING_LEFT] = [], sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFTD, sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFTN, sprite[SPRITE.BABY_DRAGON_WING_RIGHT] = [], sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHTD, sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHTN, sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK] = [], sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD, sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN, sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK] = [], sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD, sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN, sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED] = [], sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD, sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN, sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED] = [], sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD, sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN, sprite[SPRITE.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON, sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT, sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT] = IMAGES.HURT_BABY_DRAGON_WING_RIGHT, sprite[SPRITE.BABY_LAVA_ATTACK] = [], sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_ATTACKD, sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_ATTACKN, sprite[SPRITE.BABY_LAVA] = [], sprite[SPRITE.BABY_LAVA][SPRITE.DAY] = IMAGES.BABY_LAVAD, sprite[SPRITE.BABY_LAVA][SPRITE.NIGHT] = IMAGES.BABY_LAVAN, sprite[SPRITE.BABY_LAVA_TAMED] = [], sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_TAMEDD, sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_TAMEDN, sprite[SPRITE.BABY_LAVA_WING_LEFT] = [], sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFTD, sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFTN, sprite[SPRITE.BABY_LAVA_WING_RIGHT] = [], sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHTD, sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHTN, sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK] = [], sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKD, sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKN, sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK] = [], sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD, sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN, sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED] = [], sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDD, sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDN, sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED] = [], sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD, sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN, sprite[SPRITE.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA, sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT, sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT, sprite[SPRITE.HAWK_ATTACK] = [], sprite[SPRITE.HAWK_ATTACK][SPRITE.DAY] = IMAGES.HAWK_ATTACKD, sprite[SPRITE.HAWK_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_ATTACKN, sprite[SPRITE.HAWK] = [], sprite[SPRITE.HAWK][SPRITE.DAY] = IMAGES.HAWKD, sprite[SPRITE.HAWK][SPRITE.NIGHT] = IMAGES.HAWKN, sprite[SPRITE.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND, sprite[SPRITE.HAWK_GROUND] = [], sprite[SPRITE.HAWK_GROUND][SPRITE.DAY] = IMAGES.HAWK_GROUNDD, sprite[SPRITE.HAWK_GROUND][SPRITE.NIGHT] = IMAGES.HAWK_GROUNDN, sprite[SPRITE.HAWK_GROUND_ATTACK] = [], sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.DAY] = IMAGES.HAWK_GROUND_ATTACKD, sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN, sprite[SPRITE.HAWK_TAMED] = [], sprite[SPRITE.HAWK_TAMED][SPRITE.DAY] = IMAGES.HAWK_TAMEDD, sprite[SPRITE.HAWK_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_TAMEDN, sprite[SPRITE.HAWK_WING_LEFT] = [], sprite[SPRITE.HAWK_WING_LEFT][SPRITE.DAY] = IMAGES.HAWK_WING_LEFTD, sprite[SPRITE.HAWK_WING_LEFT][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFTN, sprite[SPRITE.HAWK_WING_RIGHT] = [], sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHTD, sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHTN, sprite[SPRITE.HAWK_WING_LEFT_ATTACK] = [], sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_ATTACKD, sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_ATTACKN, sprite[SPRITE.HAWK_WING_RIGHT_ATTACK] = [], sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_ATTACKD, sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_ATTACKN, sprite[SPRITE.HAWK_WING_LEFT_TAMED] = [], sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_TAMEDD, sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_TAMEDN, sprite[SPRITE.HAWK_WING_RIGHT_TAMED] = [], sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_TAMEDD, sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_TAMEDN, sprite[SPRITE.HURT_HAWK] = IMAGES.HURT_HAWK, sprite[SPRITE.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT, sprite[SPRITE.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT, sprite[SPRITE.VULTURE_ATTACK] = [], sprite[SPRITE.VULTURE_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_ATTACKD, sprite[SPRITE.VULTURE_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_ATTACKN, sprite[SPRITE.VULTURE] = [], sprite[SPRITE.VULTURE][SPRITE.DAY] = IMAGES.VULTURED, sprite[SPRITE.VULTURE][SPRITE.NIGHT] = IMAGES.VULTUREN, sprite[SPRITE.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND, sprite[SPRITE.VULTURE_GROUND] = [], sprite[SPRITE.VULTURE_GROUND][SPRITE.DAY] = IMAGES.VULTURE_GROUNDD, sprite[SPRITE.VULTURE_GROUND][SPRITE.NIGHT] = IMAGES.VULTURE_GROUNDN, sprite[SPRITE.VULTURE_GROUND_ATTACK] = [], sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_GROUND_ATTACKD, sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_GROUND_ATTACKN, sprite[SPRITE.VULTURE_TAMED] = [], sprite[SPRITE.VULTURE_TAMED][SPRITE.DAY] = IMAGES.VULTURE_TAMEDD, sprite[SPRITE.VULTURE_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_TAMEDN, sprite[SPRITE.VULTURE_WING_LEFT] = [], sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFTD, sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFTN, sprite[SPRITE.VULTURE_WING_RIGHT] = [], sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHTD, sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHTN, sprite[SPRITE.VULTURE_WING_LEFT_ATTACK] = [], sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_ATTACKD, sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_ATTACKN, sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK] = [], sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_ATTACKD, sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_ATTACKN, sprite[SPRITE.VULTURE_WING_LEFT_TAMED] = [], sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_TAMEDD, sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_TAMEDN, sprite[SPRITE.VULTURE_WING_RIGHT_TAMED] = [], sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_TAMEDD, sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_TAMEDN, sprite[SPRITE.HURT_VULTURE] = IMAGES.HURT_VULTURE, sprite[SPRITE.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT, sprite[SPRITE.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT, sprite[SPRITE.BOAR] = [], sprite[SPRITE.BOAR][SPRITE.DAY] = IMAGES.BOARD, sprite[SPRITE.BOAR][SPRITE.NIGHT] = IMAGES.BOARN, sprite[SPRITE.BOAR_TAMED] = [], sprite[SPRITE.BOAR_TAMED][SPRITE.DAY] = IMAGES.BOAR_TAMEDD, sprite[SPRITE.BOAR_TAMED][SPRITE.NIGHT] = IMAGES.BOAR_TAMEDN, sprite[SPRITE.BOAR_ATTACK] = [], sprite[SPRITE.BOAR_ATTACK][SPRITE.DAY] = IMAGES.BOAR_ANGRYD, sprite[SPRITE.BOAR_ATTACK][SPRITE.NIGHT] = IMAGES.BOAR_ANGRYN, sprite[SPRITE.BOAR_STEP] = [], sprite[SPRITE.BOAR_STEP][SPRITE.DAY] = IMAGES.BOAR_STEP, sprite[SPRITE.BOAR_STEP][SPRITE.NIGHT] = IMAGES.BOAR_STEP, sprite[SPRITE.CRAB_STEP] = [], sprite[SPRITE.CRAB_STEP][SPRITE.DAY] = IMAGES.CRAB_STEP, sprite[SPRITE.CRAB_STEP][SPRITE.NIGHT] = IMAGES.CRAB_STEP, sprite[SPRITE.BABY_MAMMOTH_STEP] = [], sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_STEP, sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_STEP, sprite[SPRITE.HURT_BOAR] = IMAGES.HURT_BOAR, sprite[SPRITE.SADDLE] = [], sprite[SPRITE.SADDLE][SPRITE.DAY] = IMAGES.SADDLED, sprite[SPRITE.SADDLE][SPRITE.NIGHT] = IMAGES.SADDLEN, sprite[SPRITE.WAND1] = [], sprite[SPRITE.WAND1][SPRITE.DAY] = IMAGES.WAND1D, sprite[SPRITE.WAND1][SPRITE.NIGHT] = IMAGES.WAND1N, sprite[SPRITE.SPELL] = [], sprite[SPRITE.SPELL][SPRITE.DAY] = [IMAGES.LIGHT_WAND0D, IMAGES.LIGHT_WAND1D, IMAGES.WOOD_ARROWD, IMAGES.STONE_ARROWD, IMAGES.GOLD_ARROWD, IMAGES.DIAMOND_ARROWD, IMAGES.AMETHYST_ARROWD, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWD], sprite[SPRITE.SPELL][SPRITE.NIGHT] = [IMAGES.LIGHT_WAND0N, IMAGES.LIGHT_WAND1N, IMAGES.WOOD_ARROWN, IMAGES.STONE_ARROWN, IMAGES.GOLD_ARROWN, IMAGES.DIAMOND_ARROWN, IMAGES.AMETHYST_ARROWN, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWN], sprite[SPRITE.WAND2] = [], sprite[SPRITE.WAND2][SPRITE.DAY] = IMAGES.WAND2D, sprite[SPRITE.WAND2][SPRITE.NIGHT] = IMAGES.WAND2N, sprite[SPRITE.BOAT_WAVE] = [], sprite[SPRITE.BOAT_WAVE][SPRITE.DAY] = IMAGES.BOAT_WAVED, sprite[SPRITE.BOAT_WAVE][SPRITE.NIGHT] = IMAGES.BOAT_WAVEN, sprite[SPRITE.SLED_WAVE] = [], sprite[SPRITE.SLED_WAVE][SPRITE.DAY] = IMAGES.SLED_WAVED, sprite[SPRITE.SLED_WAVE][SPRITE.NIGHT] = IMAGES.SLED_WAVEN, sprite[SPRITE.PIRATE_HAT] = [], sprite[SPRITE.PIRATE_HAT][SPRITE.DAY] = IMAGES.PIRATE_HATD, sprite[SPRITE.PIRATE_HAT][SPRITE.NIGHT] = IMAGES.PIRATE_HATN, sprite[SPRITE.FUR_HAT] = [], sprite[SPRITE.FUR_HAT][SPRITE.DAY] = IMAGES.FUR_HATD, sprite[SPRITE.FUR_HAT][SPRITE.NIGHT] = IMAGES.FUR_HATN, sprite[SPRITE.FLOWER_HAT] = [], sprite[SPRITE.FLOWER_HAT][SPRITE.DAY] = IMAGES.FLOWER_HATD, sprite[SPRITE.FLOWER_HAT][SPRITE.NIGHT] = IMAGES.FLOWER_HATN, sprite[SPRITE.PILOT_HELMET] = [], sprite[SPRITE.PILOT_HELMET][SPRITE.DAY] = IMAGES.PILOT_HELMETD, sprite[SPRITE.PILOT_HELMET][SPRITE.NIGHT] = IMAGES.PILOT_HELMETN, sprite[SPRITE.LAKE_EDGE] = [], sprite[SPRITE.LAKE_EDGE][SPRITE.DAY] = [], sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT] = [], sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE0D_EDGE), sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE1D_EDGE), sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE2D_EDGE), sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE0N_EDGE), sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE1N_EDGE), sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE2N_EDGE), sprite[SPRITE.LAKE_DEEP] = [], sprite[SPRITE.LAKE_DEEP][SPRITE.DAY] = [], sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT] = [], sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE0D_DEEP), sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE1D_DEEP), sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE2D_DEEP), sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE0N_DEEP), sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE1N_DEEP), sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE2N_DEEP), sprite[SPRITE.LAKE] = [], sprite[SPRITE.LAKE][SPRITE.DAY] = [], sprite[SPRITE.LAKE][SPRITE.NIGHT] = [], sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE0D), sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE1D), sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE2D), sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE0N), sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE1N), sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE2N), MINIMAP_UTILS.g = [], MINIMAP_UTILS.g[0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1], MINIMAP_UTILS.g[1] = MINIMAP_UTILS.g[0], MINIMAP_UTILS.g[2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2], MINIMAP_UTILS.m = [], MINIMAP_UTILS.m[0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1], MINIMAP_UTILS.m[1] = MINIMAP_UTILS.m[0], MINIMAP_UTILS.m[2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2], MINIMAP_UTILS.la = [], MINIMAP_UTILS.la[0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA], MINIMAP_UTILS.la[1] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.la[2] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.la[3] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.la[4] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.la[5] = MINIMAP_UTILS.la[0], MINIMAP_UTILS.s = [], MINIMAP_UTILS.s[0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1], MINIMAP_UTILS.s[1] = MINIMAP_UTILS.s[0], MINIMAP_UTILS.s[2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2], MINIMAP_UTILS.p = [], MINIMAP_UTILS.p[0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY], MINIMAP_UTILS.a = [], MINIMAP_UTILS.a[0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST], MINIMAP_UTILS.a[1] = MINIMAP_UTILS.a[0], MINIMAP_UTILS.a[2] = MINIMAP_UTILS.a[0], MINIMAP_UTILS.d = [], MINIMAP_UTILS.d[0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND], MINIMAP_UTILS.d[1] = MINIMAP_UTILS.d[0], MINIMAP_UTILS.d[2] = MINIMAP_UTILS.d[0], MINIMAP_UTILS.re = [], MINIMAP_UTILS.re[0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE], MINIMAP_UTILS.re[1] = MINIMAP_UTILS.re[0], MINIMAP_UTILS.re[2] = MINIMAP_UTILS.re[0], MINIMAP_UTILS.f = [], MINIMAP_UTILS.f[0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE], MINIMAP_UTILS.f[1] = MINIMAP_UTILS.f[0], MINIMAP_UTILS.f[2] = MINIMAP_UTILS.f[0], MINIMAP_UTILS.isl = [], MINIMAP_UTILS.isl[0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND], MINIMAP_UTILS.isl[1] = MINIMAP_UTILS.isl[0], MINIMAP_UTILS.isl[2] = MINIMAP_UTILS.isl[0], MINIMAP_UTILS.c = [], MINIMAP_UTILS.c[0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS], MINIMAP_UTILS.c[1] = MINIMAP_UTILS.c[0], MINIMAP_UTILS.c[2] = MINIMAP_UTILS.c[0], MINIMAP_UTILS.wtb = [], MINIMAP_UTILS.wtb[0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER], MINIMAP_UTILS.PIRANHA = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA], MINIMAP_UTILS.KRAKEN = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN], MINIMAP_UTILS.FOX = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX], MINIMAP_UTILS.WOLF = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF], MINIMAP_UTILS.SPIDER = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER], MINIMAP_UTILS.BEAR = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR], MINIMAP_UTILS.CAVE = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE], MINIMAP_UTILS.MAP = [IMAGES.BIGDAY, IMAGES.BIGNIGHT], MINIMAP_UTILS.FOREST = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST], MINIMAP_UTILS.WINTER = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER], MINIMAP_UTILS.DESERT = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT], MINIMAP_UTILS.LAVA = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA], MINIMAP_UTILS)
        for (var i = MINIMAP_UTILS[t], r = 0; r < i.length; r++) {
            var a = i[r];
            if (void 0 !== a.tryLoad) a.tryLoad();
            else if (a.length > 0)
                for (var n = 0; n < a.length; n++) void 0 !== a[n].tryLoad && a[n].tryLoad()
        }
}

function create_images() {
    (new Date).getTime();
    _load_images(), render_inventory(), sprite[SPRITE.BUBBLES] = [], sprite[SPRITE.BUBBLES][SPRITE.DAY] = [], sprite[SPRITE.BUBBLES][SPRITE.NIGHT] = [];
    for (var e = 0; e < SPRITE.BUBBLES_SIZES; e++) sprite[SPRITE.BUBBLES][SPRITE.DAY].push(CTI(create_flake(1, 4 + e, "#59B8CE"))), sprite[SPRITE.BUBBLES][SPRITE.NIGHT].push(CTI(create_flake(1, 4 + e, "#90DDD9")));
    sprite[SPRITE.FLAKES] = [], sprite[SPRITE.FLAKES][SPRITE.DAY] = [], sprite[SPRITE.FLAKES][SPRITE.NIGHT] = [];
    for (e = 0; e < SPRITE.FLAKES_SIZES; e++) sprite[SPRITE.FLAKES][SPRITE.DAY].push(CTI(create_flake(1, 4 + e, "#fff"))), sprite[SPRITE.FLAKES][SPRITE.NIGHT].push(CTI(create_flake(1, 4 + e, "#fff")));
    sprite[SPRITE.DESERT] = [], sprite[SPRITE.DESERT][SPRITE.DAY] = [], sprite[SPRITE.DESERT][SPRITE.NIGHT] = [];
    for (e = 0; e < SPRITE.FLAKES_SIZES; e++) sprite[SPRITE.DESERT][SPRITE.DAY].push(CTI(create_flake(1, 6 + e, "#DDCD8A"))), sprite[SPRITE.DESERT][SPRITE.NIGHT].push(CTI(create_flake(1, 6 + e, "#155E57")));
    sprite[SPRITE.ASHES] = [], sprite[SPRITE.ASHES][SPRITE.DAY] = [], sprite[SPRITE.ASHES][SPRITE.NIGHT] = [];
    for (e = 0; e < SPRITE.ASHES_SIZES; e++) sprite[SPRITE.ASHES][SPRITE.DAY].push(CTI(create_flake(1, 4 + e, "#353326"))), sprite[SPRITE.ASHES][SPRITE.NIGHT].push(CTI(create_flake(1, 4 + e, "#1D2526")));
    sprite[SPRITE.GARLAND] = [], sprite[SPRITE.GARLAND][SPRITE.DAY] = CTI(create_garland(1.5, !0, ["#ee71a9"])), sprite[SPRITE.GARLAND][SPRITE.NIGHT] = CTI(create_garland(1.5, !0, ["#ee71a9"])), sprite[SPRITE.GARLANDS] = [sprite[SPRITE.GARLAND]], sprite[SPRITE.GARLANDS][1] = [], sprite[SPRITE.GARLANDS][2] = [], sprite[SPRITE.GARLANDS][3] = [], sprite[SPRITE.GARLANDS][4] = [], sprite[SPRITE.GARLANDS][1][SPRITE.DAY] = CTI(create_garland(1.5, !0, ["#e2d63b"])), sprite[SPRITE.GARLANDS][1][SPRITE.NIGHT] = CTI(create_garland(1.5, !0, ["#e2d63b"])), sprite[SPRITE.GARLANDS][2][SPRITE.DAY] = CTI(create_garland(1.5, !0, ["#309cbd"])), sprite[SPRITE.GARLANDS][2][SPRITE.NIGHT] = CTI(create_garland(1.5, !0, ["#309cbd"])), sprite[SPRITE.GARLANDS][3][SPRITE.DAY] = CTI(create_garland(1.5, !0, ["#cd232d"])), sprite[SPRITE.GARLANDS][3][SPRITE.NIGHT] = CTI(create_garland(1.5, !0, ["#cd232d"])), sprite[SPRITE.GARLANDS][4][SPRITE.DAY] = CTI(create_garland(1.5, !0, ["#42b672"])), sprite[SPRITE.GARLANDS][4][SPRITE.NIGHT] = CTI(create_garland(1.5, !0, ["#42b672"])), Utils.gup("cti", window.location.href) ? document.getElementById("version").innerHTML += "[CTI]" : CTI = function(e) {
        return e.loaded = 1, e
    }, sprite[SPRITE.MARKET_BGD] = CTI(create_background_market()), sprite[SPRITE.STONES] = [], sprite[SPRITE.STONES][SPRITE.DAY] = [], sprite[SPRITE.STONES][SPRITE.NIGHT] = [], sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(1.1, !1, ["#0a2d18", "#c3d1cb", "#e4efe8"]))), sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(.9, !1, ["#0a2d18", "#c3d1cb", "#e4efe8"]))), sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(.6, !1, ["#0a2d18", "#c3d1cb", "#e4efe8"]))), sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(1.1, !1, ["#0a2728", "#3c8e88", "#40a39b"]))), sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(.9, !1, ["#0a2728", "#3c8e88", "#40a39b"]))), sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(.6, !1, ["#0a2728", "#3c8e88", "#40a39b"]))), sprite[SPRITE.GOLD] = [], sprite[SPRITE.GOLD][SPRITE.DAY] = [], sprite[SPRITE.GOLD][SPRITE.NIGHT] = [], sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(1.5, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(1.3, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(1.1, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(1.5, !1, ["#030d14", "#1b4444", "#16605a"]))), sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(1.3, !1, ["#030d14", "#1b4444", "#16605a"]))), sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(1.1, !1, ["#030d14", "#1b4444", "#16605a"]))), sprite[SPRITE.DIAMOND] = [], sprite[SPRITE.DIAMOND][SPRITE.DAY] = [], sprite[SPRITE.DIAMOND][SPRITE.NIGHT] = [], sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(1.1, !1, ["#232828", "#3fc9c9", "#74ede6"]))), sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(.9, !1, ["#232828", "#3fc9c9", "#74ede6"]))), sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(.7, !1, ["#232828", "#3fc9c9", "#74ede6"]))), sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(1.1, !1, ["#030d14", "#2b9390", "#57bcb5"]))), sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(.9, !1, ["#030d14", "#2b9390", "#57bcb5"]))), sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(.7, !1, ["#030d14", "#2b9390", "#57bcb5"]))), sprite[SPRITE.ALOE_VERA] = [], sprite[SPRITE.ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERAD, sprite[SPRITE.ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN, sprite[SPRITE.HAND_SHADOW] = [], sprite[SPRITE.HAND_SHADOW][SPRITE.DAY] = CTI(create_hand_shadow(.6, ["#0d1b1c"])), sprite[SPRITE.HAND_SHADOW][SPRITE.NIGHT] = CTI(create_hand_shadow(.6, ["#030d14"])), sprite[SPRITE.GLOVES_HOOD] = [], sprite[SPRITE.GLOVES_HOOD][SPRITE.DAY] = CTI(create_hand(.6, ["#2a2938", "#242330"])), sprite[SPRITE.GLOVES_HOOD][SPRITE.NIGHT] = CTI(create_hand(.6, ["#1b1e30", "#161921"])), sprite[SPRITE.ZOMBIE_BODY] = [], sprite[SPRITE.ZOMBIE_BODY][SPRITE.DAY] = CTI(create_zombie_boss(.6, !0, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"])), sprite[SPRITE.ZOMBIE_BODY][SPRITE.NIGHT] = CTI(create_zombie_boss(.6, !0, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"])), sprite[SPRITE.ZOMBIE_HEAD] = [], sprite[SPRITE.ZOMBIE_HEAD][SPRITE.DAY] = CTI(create_zombie_head(.6, !0, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"])), sprite[SPRITE.ZOMBIE_HEAD][SPRITE.NIGHT] = CTI(create_zombie_head(.6, !0, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"])), sprite[SPRITE.ZOMBIE_HAND] = [], sprite[SPRITE.ZOMBIE_HAND][SPRITE.DAY] = CTI(create_zombie_hand(.4, ["#0d1b1c", "#759e6e", "#55604b"])), sprite[SPRITE.ZOMBIE_HAND][SPRITE.NIGHT] = CTI(create_zombie_hand(.4, ["#030d14", "#11635e", "#02373e"])), sprite[SPRITE.ZOMBIE_HURT] = CTI(create_zombie_hurt(.6, ["#BB0000"])), sprite[SPRITE.ZOMBIE_HUNGER] = CTI(create_zombie_hurt(.6, ["#DBE71C"])), sprite[SPRITE.ZOMBIE_HEAL] = CTI(create_zombie_hurt(.6, ["#00BB00"])), sprite[SPRITE.TREE] = [], sprite[SPRITE.TREE][SPRITE.DAY] = [], sprite[SPRITE.TREE][SPRITE.NIGHT] = [], sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(1.1, ["#0e3022", "#0c8e5b", "#037542", "#209e64"], !1, 0)), sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(1.1, ["#0e3022", "#0f9862", "#0b8750", "#26ab6e"], !0, 0)), sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(.9, ["#0e3022", "#0e7d4c", "#258a4d", "#248c4d"], !1, 0)), sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(.9, ["#0e3022", "#096d41", "#1f7b43", "#1f7b43"], !0, 0)), sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], !1, 0)), sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(.7, ["#0e3022", "#124c34", "#0E3D26", "#155136"], !0, 0)), sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], !1, 0)), sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(1.1, ["#030d14", "#124949", "#0e3838", "#15514f"], !0, 0)), sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(.9, ["#030d14", "#0b3534", "#144443", "#174240"], !1, 0)), sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(.9, ["#030d14", "#0b3534", "#144443", "#174240"], !0, 0)), sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(.7, ["#030d14", "#082b29", "#073332", "#073332"], !1, 0)), sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(.7, ["#030d14", "#082b29", "#073332", "#073332"], !0, 0)), sprite[SPRITE.TREE_BRANCH] = [], sprite[SPRITE.TREE_BRANCH][SPRITE.DAY] = [], sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT] = [], sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], !1), sprite[SPRITE.TREE][SPRITE.DAY][0]))), sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(1.1, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#08562e", "#107746"], !0), sprite[SPRITE.TREE][SPRITE.DAY][1]))), sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], !1), sprite[SPRITE.TREE][SPRITE.NIGHT][0]))), sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(1.1, ["#030d14", "#031619", "#041c21", "#0a3333", "#113f3c", "#113f3c"], !0), sprite[SPRITE.TREE][SPRITE.NIGHT][1]))), sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], !1), sprite[SPRITE.TREE][SPRITE.DAY][2]))), sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(.9, ["#0e3022", "#4d2d14", "#432516", "#096d41", "#107746", "#107746"], !0), sprite[SPRITE.TREE][SPRITE.DAY][2]))), sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], !1), sprite[SPRITE.TREE][SPRITE.NIGHT][2]))), sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(.9, ["#030d14", "#031619", "#041c21", "#082b29", "#083b3a", "#083b3a"], !0), sprite[SPRITE.TREE][SPRITE.NIGHT][3]))), sprite[SPRITE.TREE][SPRITE.DAY][5] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][5]), sprite[SPRITE.TREE][SPRITE.DAY][4] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][4]), sprite[SPRITE.TREE][SPRITE.DAY][3] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][3]), sprite[SPRITE.TREE][SPRITE.DAY][2] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][2]), sprite[SPRITE.TREE][SPRITE.DAY][1] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][1]), sprite[SPRITE.TREE][SPRITE.DAY][0] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][0]), sprite[SPRITE.TREE][SPRITE.NIGHT][5] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][5]), sprite[SPRITE.TREE][SPRITE.NIGHT][4] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][4]), sprite[SPRITE.TREE][SPRITE.NIGHT][3] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][3]), sprite[SPRITE.TREE][SPRITE.NIGHT][2] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][2]), sprite[SPRITE.TREE][SPRITE.NIGHT][1] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][1]), sprite[SPRITE.TREE][SPRITE.NIGHT][0] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][0]), sprite[SPRITE.PICK_WOOD] = [], sprite[SPRITE.PICK_WOOD][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]))), sprite[SPRITE.PICK_WOOD][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"]))), sprite[SPRITE.PICK] = [], sprite[SPRITE.PICK][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]))), sprite[SPRITE.PICK][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"]))), sprite[SPRITE.PICK_GOLD] = [], sprite[SPRITE.PICK_GOLD][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]))), sprite[SPRITE.PICK_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"]))), sprite[SPRITE.PICK_DIAMOND] = [], sprite[SPRITE.PICK_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]))), sprite[SPRITE.PICK_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"]))), sprite[SPRITE.PICK_AMETHYST] = [], sprite[SPRITE.PICK_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]))), sprite[SPRITE.PICK_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(.75, !0, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"]))), sprite[SPRITE.PIRATE_SWORD] = [], sprite[SPRITE.PIRATE_SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_pirate_sword(.17, !0, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]))), sprite[SPRITE.PIRATE_SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_pirate_sword(.17, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"]))), sprite[SPRITE.SUGAR_CAN] = [], sprite[SPRITE.SUGAR_CAN][SPRITE.DAY] = CTI(create_rotated_img(3, create_sugar_can(.32, !0, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]))), sprite[SPRITE.SUGAR_CAN][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_sugar_can(.42, !0, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"]))), sprite[SPRITE.SWORD_WOOD] = [], sprite[SPRITE.SWORD_WOOD][SPRITE.DAY] = CTI(create_rotated_img(3, create_sword_wood(.4, !0, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"]))), sprite[SPRITE.SWORD_WOOD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_sword_wood(.4, !0, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"]))), sprite[SPRITE.SWORD] = [], sprite[SPRITE.SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_stonesword(.4, !0, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]))), sprite[SPRITE.SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_stonesword(.4, !0, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"]))), sprite[SPRITE.SWORD_GOLD] = [], sprite[SPRITE.SWORD_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_goldsword(.4, !0, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]))), sprite[SPRITE.SWORD_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_goldsword(.4, !0, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"]))), sprite[SPRITE.SWORD_DIAMOND] = [], sprite[SPRITE.SWORD_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_diamondsword(.4, !0, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]))), sprite[SPRITE.SWORD_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_diamondsword(.4, !0, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"]))), sprite[SPRITE.SWORD_AMETHYST] = [], sprite[SPRITE.SWORD_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_amesword(.4, !0, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]))), sprite[SPRITE.SWORD_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_amesword(.4, !0, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"]))), sprite[SPRITE.HERB] = [], sprite[SPRITE.HERB][SPRITE.DAY] = [], sprite[SPRITE.HERB][SPRITE.NIGHT] = [], sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(.9, !1, ["#0d4f35"], 0))), sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(.9, !1, ["#0d4f35"], 1))), sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(.9, !1, ["#0d4f35"], 2))), sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(.9, !1, ["#053339"], 0))), sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(.9, !1, ["#053339"], 1))), sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(.9, !1, ["#053339"], 2))), sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_leaf(.8, ["#241301", "#ba6b0e", "#6d3f04"]))), sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_leaf(.8, ["#292002", "#ba930e", "#6d5704"]))), sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_leaf(.9, ["#052919", "#0a4738", "#06321f"]))), sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_leaf(.8, ["#052918", "#08491c", "#063417"]))), sprite[SPRITE.SIGN] = [], sprite[SPRITE.SIGN][SPRITE.DAY] = CTI(create_rotated_img(Math.PI / 2, create_sign(.25, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]))), sprite[SPRITE.SIGN][SPRITE.NIGHT] = CTI(create_rotated_img(Math.PI / 2, create_sign(.25, !0, ["#030d14", "#082b22", "#0a2f2b", "#072824"]))), sprite[SPRITE.SIGN_BUTTON] = [], sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(.25, ["#44301b", "#57442a", "#523e26"], 0))), sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1))), sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2))), sprite[SPRITE.SYMBOLS] = [], sprite[SPRITE.SYMBOLS][SPRITE.DAY] = [], sprite[SPRITE.SYMBOLS][SPRITE.NIGHT] = [], sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, !1, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1)))), sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, !1, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1)))), sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, !1, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2)))), sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, !1, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2)))), sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, !1, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3)))), sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, !1, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3)))), sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, !1, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4)))), sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(.25, !1, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4)))), sprite[SPRITE.PLANT] = [], sprite[SPRITE.PLANT][SPRITE.DAY] = [CTI(create_plant(1.2, !0, ["#0e3022", "#0b8052", "#077b49"]))], sprite[SPRITE.PLANT][SPRITE.NIGHT] = [CTI(create_plant(1.2, !0, ["#030d14", "#084442", "#0a4049"]))], sprite[SPRITE.DRIED_PLANT] = [], sprite[SPRITE.DRIED_PLANT][SPRITE.DAY] = CTI(create_plant(.8, !0, ["#0e3022", "#68622D", "#665329"])), sprite[SPRITE.DRIED_PLANT][SPRITE.NIGHT] = CTI(create_plant(.8, !0, ["#030d14", "#0F3A24", "#083326"])), sprite[SPRITE.PUMPKIN] = [], sprite[SPRITE.PUMPKIN][SPRITE.DAY] = CTI(create_pumpkin(.5, !0, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"])), sprite[SPRITE.PUMPKIN][SPRITE.NIGHT] = CTI(create_pumpkin(.5, !0, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"])), sprite[SPRITE.GARLIC] = [], sprite[SPRITE.GARLIC][SPRITE.DAY] = CTI(create_garlic(.5, !0, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"])), sprite[SPRITE.GARLIC][SPRITE.NIGHT] = CTI(create_garlic(.5, !0, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"])), sprite[SPRITE.THORNBUSH] = [], sprite[SPRITE.THORNBUSH][SPRITE.DAY] = CTI(create_brambles(.5, !0, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"])), sprite[SPRITE.THORNBUSH][SPRITE.NIGHT] = CTI(create_brambles(.5, !0, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"])), sprite[SPRITE.PLANT_MINI] = [], sprite[SPRITE.PLANT_MINI][SPRITE.DAY] = CTI(create_plant(.8, !0, ["#1b170c", "#0b8052", "#077b49"])), sprite[SPRITE.PLANT_MINI][SPRITE.NIGHT] = CTI(create_plant(.8, !0, ["#030d14", "#084442", "#0a4049"])), sprite[SPRITE.DRIED_PUMPKIN] = [], sprite[SPRITE.DRIED_PUMPKIN][SPRITE.DAY] = CTI(create_pumpkin(.5, !0, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"])), sprite[SPRITE.DRIED_PUMPKIN][SPRITE.NIGHT] = CTI(create_pumpkin(.5, !0, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"])), sprite[SPRITE.DRIED_GARLIC] = [], sprite[SPRITE.DRIED_GARLIC][SPRITE.DAY] = CTI(create_garlic(.5, !0, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"])), sprite[SPRITE.DRIED_GARLIC][SPRITE.NIGHT] = CTI(create_garlic(.5, !0, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"])), sprite[SPRITE.DRIED_THORNBUSH] = [], sprite[SPRITE.DRIED_THORNBUSH][SPRITE.DAY] = CTI(create_brambles(.5, !0, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"])), sprite[SPRITE.DRIED_THORNBUSH][SPRITE.NIGHT] = CTI(create_brambles(.5, !0, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"])), sprite[SPRITE.GIFT] = [], sprite[SPRITE.GIFT][SPRITE.DAY] = CTI(create_present(.45, !0, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"])), sprite[SPRITE.GIFT][SPRITE.NIGHT] = CTI(create_present(.45, !0, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"])), sprite[SPRITE.HURT_GIFT] = CTI(create_present(.65, !0, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"])), sprite[SPRITE.FRUIT] = [], sprite[SPRITE.FRUIT][SPRITE.DAY] = CTI(create_fruit(1.4, !1, ["#ac222a", "#e6636a"])), sprite[SPRITE.FRUIT][SPRITE.NIGHT] = CTI(create_fruit(1.4, !1, ["#46195e", "#744188"])), sprite[SPRITE.FIRE] = [], sprite[SPRITE.FIRE][SPRITE.DAY] = CTI(create_fire(.9, !1, ["#efd435", "#ec8d35", "#e96132"])), sprite[SPRITE.FIRE][SPRITE.NIGHT] = CTI(create_fire(.9, !1, ["#efdb7b", "#efe854", "#e8ef62"])), sprite[SPRITE.BIG_FIRE_WOOD] = [], sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.DAY] = CTI(create_big_fire_wood(.9, !1, ["#4d2d14", "#432516"])), sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.NIGHT] = CTI(create_big_fire_wood(.9, !1, ["#282404", "#0a0a01"])), sprite[SPRITE.WOOD_FIRE] = [], sprite[SPRITE.WOOD_FIRE][SPRITE.DAY] = CTI(create_wood_fire(.9, !1, ["#4d2d14", "#432516"])), sprite[SPRITE.WOOD_FIRE][SPRITE.NIGHT] = CTI(create_wood_fire(.9, !1, ["#282404", "#0a0a01"])), sprite[SPRITE.HALO_FIRE] = [], sprite[SPRITE.HALO_FIRE][SPRITE.DAY] = CTI(create_halo_fire(.9, !1, ["#efd435"])), sprite[SPRITE.HALO_FIRE][SPRITE.NIGHT] = CTI(create_halo_fire(.9, !1, ["#fffabb"])), sprite[SPRITE.GROUND_FIRE] = [], sprite[SPRITE.GROUND_FIRE][SPRITE.DAY] = CTI(create_ground_fire(.9, !1, ["#efd435"])), sprite[SPRITE.GROUND_FIRE][SPRITE.NIGHT] = CTI(create_ground_fire(.9, !1, ["#fffabb"])), sprite[SPRITE.HALO_FIRE_PUMPKIN] = [], sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.DAY] = CTI(create_halo_fire(.9, !1, ["#efd435"])), sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(create_halo_fire(.9, !1, ["rgba(255, 84, 0, 1)"])), sprite[SPRITE.GROUND_FIRE_PUMPKIN] = [], sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.DAY] = CTI(create_ground_fire(.9, !1, ["#efd435"])), sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(create_ground_fire(.9, !1, ["#ff5704"])), sprite[SPRITE.GEAR] = CTI(create_gear(1, "#ffffff", 1)), sprite[SPRITE.GEAR2] = CTI(create_gear(1.5, "#ffffff", 1)), sprite[SPRITE.YOUR_SCORE] = CTI(create_text(1, "Your score:", 15, "#FFF")), sprite[SPRITE.WINDMILL_CASES] = CTI(create_windmill_chest(.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"])), sprite[SPRITE.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES, sprite[SPRITE.WINDMILL] = [], sprite[SPRITE.WINDMILL][SPRITE.DAY] = CTI(create_windmill(1.5, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])), sprite[SPRITE.WINDMILL][SPRITE.NIGHT] = CTI(create_windmill(1.5, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])), sprite[SPRITE.WINDMILL_WINGS] = [], sprite[SPRITE.WINDMILL_WINGS][SPRITE.DAY] = CTI(create_windmill_wing(2, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])), sprite[SPRITE.WINDMILL_WINGS][SPRITE.NIGHT] = CTI(create_windmill_wing(2, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])), sprite[SPRITE.WINDMILL_HEAD] = [], sprite[SPRITE.WINDMILL_HEAD][SPRITE.DAY] = CTI(create_windmill_head(1.5, !0, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"])), sprite[SPRITE.WINDMILL_HEAD][SPRITE.NIGHT] = CTI(create_windmill_head(1.5, !0, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"])), sprite[SPRITE.WILD_WHEAT] = [], sprite[SPRITE.WILD_WHEAT][SPRITE.DAY] = CTI(create_wheat(2.2, !0, ["#A89F67", "#9E8456"])), sprite[SPRITE.WILD_WHEAT][SPRITE.NIGHT] = CTI(create_wheat(2.2, !0, ["#0B4049", "#08383D"])), sprite[SPRITE.DRIED_WHEAT] = [], sprite[SPRITE.DRIED_WHEAT][SPRITE.DAY] = CTI(create_wheat(2.2, !0, ["#68622D", "#665329"])), sprite[SPRITE.DRIED_WHEAT][SPRITE.NIGHT] = CTI(create_wheat(2.2, !0, ["#0F3A24", "#083326"])), sprite[SPRITE.WHEAT_MOB] = [], sprite[SPRITE.WHEAT_MOB][SPRITE.DAY] = CTI(create_seed(.8, !0, ["#A89F67", "#9E8456"])), sprite[SPRITE.WHEAT_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, !0, ["#15514F", "#0F3F3D"])), sprite[SPRITE.PUMPKIN_SEED_MOB] = [], sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, !0, ["#c67933", "#b17238"])), sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, !0, ["#043c37", "#032b23"])), sprite[SPRITE.ALOE_VERA_SEED_MOB] = [], sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, !0, ["#3a8214", "#4a9c1e"])), sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, !0, ["#032d29", "#044640"])), sprite[SPRITE.GARLIC_SEED_MOB] = [], sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, !0, ["#e8e8e8", "#bbbbbb"])), sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, !0, ["#1c6161", "#07413f"])), sprite[SPRITE.THORNBUSH_SEED_MOB] = [], sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, !0, ["#328a56", "#449573"])), sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, !0, ["#043c37", "#032b23"])), sprite[SPRITE.CARROT_SEED_MOB] = [], sprite[SPRITE.CARROT_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, !0, ["#c98e2f", "#a36b11"])), sprite[SPRITE.CARROT_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, !0, ["#043c37", "#032b23"])), sprite[SPRITE.TOMATO_SEED_MOB] = [], sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, !0, ["#b22419", "#99110e"])), sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, !0, ["#04323c", "#03222b"])), sprite[SPRITE.WATERMELON_SEED_MOB] = [], sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.DAY] = CTI(create_seed(.8, !0, ["#13a56d", "#098a58"])), sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(.8, !0, ["#043c37", "#032b23"])), sprite[SPRITE.WINDMILL_WHEAT_SEED] = create_craft_button(1, [{
        f: create_wheat,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], .7), sprite[SPRITE.BREAD_OVEN_WOOD] = create_craft_button(1, [{
        f: create_wood_fire,
        x: 0,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#4d2d14", "#432516"]
    }], .3, ["#d2c77b", "#e7dc8f", "#bfb360"], .7), sprite[SPRITE.BREAD_OVEN_BREAD] = create_craft_button(1, [{
        f: create_bread,
        x: 0,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], .15, ["#d2c77b", "#e7dc8f", "#bfb360"], .7), sprite[SPRITE.EMPTY_SLOT] = create_craft_button(.9, [], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.PLANT_SEED] = [], sprite[SPRITE.PLANT_SEED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#7d613e", "#9e7e5a"])), sprite[SPRITE.PLANT_SEED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#084442", "#125e5a"])), sprite[SPRITE.WHEAT_SEED] = [], sprite[SPRITE.WHEAT_SEED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#9E8456", "#A89F67"])), sprite[SPRITE.WHEAT_SEED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#1b6f6a", "#0d4e4c"])), sprite[SPRITE.WHEAT_SEED_DRIED] = [], sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#665329", "#68622D"])), sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#083326", "#0F3A24"])), sprite[SPRITE.PLANT_PUMPKIN] = [], sprite[SPRITE.PLANT_PUMPKIN][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#c67933", "#ec952d"])), sprite[SPRITE.PLANT_PUMPKIN][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#0e6553", "#094437"])), sprite[SPRITE.PLANT_ALOE_VERA] = [], sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#375809", "#4b770e"])), sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#09542d", "#0d5d2f"])), sprite[SPRITE.PLANT_ALOE_VERA_DRIED] = [], sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#585809", "#72770e"])), sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#295209", "#305d0d"])), sprite[SPRITE.PLANT_GARLIC] = [], sprite[SPRITE.PLANT_GARLIC][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#b9b094", "#e2d2c0"])), sprite[SPRITE.PLANT_GARLIC][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#126366", "#0d484b"])), sprite[SPRITE.PLANT_THORNBUSH] = [], sprite[SPRITE.PLANT_THORNBUSH][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#3f8662", "#30915d"])), sprite[SPRITE.PLANT_THORNBUSH][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#0e6553", "#094437"])), sprite[SPRITE.PLANT_PUMPKIN_DRIED] = [], sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#c79153", "#dfa868"])), sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#073927", "#075040"])), sprite[SPRITE.PLANT_GARLIC_DRIED] = [], sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#768b5b", "#819984"])), sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#0c4540", "#0e5153"])), sprite[SPRITE.PLANT_THORNBUSH_DRIED] = [], sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#567465", "#627c6e"])), sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#073927", "#075040"])), sprite[SPRITE.PLANT_CARROT] = [], sprite[SPRITE.PLANT_CARROT][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#996b3a", "#bf956b"])), sprite[SPRITE.PLANT_CARROT][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#0e6553", "#094437"])), sprite[SPRITE.PLANT_CARROT_DRIED] = [], sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#7a634a", "#a68f77"])), sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#1e4d43", "#113c32"])), sprite[SPRITE.PLANT_TOMATO] = [], sprite[SPRITE.PLANT_TOMATO][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#99403c", "#bc796c"])), sprite[SPRITE.PLANT_TOMATO][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#1e434d", "#11303c"])), sprite[SPRITE.PLANT_TOMATO_DRIED] = [], sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#88504e", "#b3857c"])), sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#253b41", "#162930"])), sprite[SPRITE.PLANT_WATERMELON] = [], sprite[SPRITE.PLANT_WATERMELON][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#0f8870", "#23af93"])), sprite[SPRITE.PLANT_WATERMELON][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#032829", "#083233"])), sprite[SPRITE.PLANT_WATERMELON_DRIED] = [], sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.DAY] = CTI(create_plant_seed(.9, !1, ["#618a20", "#84a74e"])), sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(.9, !1, ["#1f4632", "#335d47"])), sprite[SPRITE.WORKBENCH] = [], sprite[SPRITE.WORKBENCH][SPRITE.DAY] = CTI(create_workbench(1.2, !0, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"])), sprite[SPRITE.WORKBENCH][SPRITE.NIGHT] = CTI(create_workbench(1.2, !0, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"])), sprite[SPRITE.WALL] = [], sprite[SPRITE.WALL][SPRITE.DAY] = CTI(create_wall(1, !0, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"])), sprite[SPRITE.WALL][SPRITE.NIGHT] = CTI(create_wall(1, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])), sprite[SPRITE.DIAMOND_WALL] = [], sprite[SPRITE.DIAMOND_WALL][SPRITE.DAY] = CTI(create_wall_diamond(1, !0, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])), sprite[SPRITE.DIAMOND_WALL][SPRITE.NIGHT] = CTI(create_wall_diamond(1, !0, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])), sprite[SPRITE.AMETHYST_WALL] = [], sprite[SPRITE.AMETHYST_WALL][SPRITE.DAY] = CTI(create_wall_stone(1, !0, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])), sprite[SPRITE.AMETHYST_WALL][SPRITE.NIGHT] = CTI(create_wall_stone(1, !0, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])), sprite[SPRITE.STONE_WALL] = [], sprite[SPRITE.STONE_WALL][SPRITE.DAY] = CTI(create_wall_stone(1, !0, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"])), sprite[SPRITE.STONE_WALL][SPRITE.NIGHT] = CTI(create_wall_stone(1, !0, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"])), sprite[SPRITE.GOLD_WALL] = [], sprite[SPRITE.GOLD_WALL][SPRITE.DAY] = CTI(create_wall_gold(1, !0, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"])), sprite[SPRITE.GOLD_WALL][SPRITE.NIGHT] = CTI(create_wall_gold(1, !0, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"])), sprite[SPRITE.SPIKE] = [], sprite[SPRITE.SPIKE][SPRITE.DAY] = CTI(create_spike(.8, !0, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"])), sprite[SPRITE.SPIKE][SPRITE.NIGHT] = CTI(create_spike(.8, !0, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])), sprite[SPRITE.GOLD_SPIKE] = [], sprite[SPRITE.GOLD_SPIKE][SPRITE.DAY] = CTI(create_spike_gold(.8, !0, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"])), sprite[SPRITE.GOLD_SPIKE][SPRITE.NIGHT] = CTI(create_spike_gold(.8, !0, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"])), sprite[SPRITE.DIAMOND_SPIKE] = [], sprite[SPRITE.DIAMOND_SPIKE][SPRITE.DAY] = CTI(create_spike_diamond(.8, !0, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])), sprite[SPRITE.DIAMOND_SPIKE][SPRITE.NIGHT] = CTI(create_spike_diamond(.8, !0, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])), sprite[SPRITE.STONE_SPIKE] = [], sprite[SPRITE.STONE_SPIKE][SPRITE.DAY] = CTI(create_spike_stone(.8, !0, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"])), sprite[SPRITE.STONE_SPIKE][SPRITE.NIGHT] = CTI(create_spike_stone(.8, !0, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"])), sprite[SPRITE.AMETHYST_SPIKE] = [], sprite[SPRITE.AMETHYST_SPIKE][SPRITE.DAY] = CTI(create_spike_stone(.8, !0, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])), sprite[SPRITE.AMETHYST_SPIKE][SPRITE.NIGHT] = CTI(create_spike_stone(.8, !0, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])), sprite[SPRITE.DOOR_WOOD_CLOSE] = [], sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.DAY] = CTI(create_door_wood(1.5, !0, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"])), sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.NIGHT] = CTI(create_door_wood(1.5, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"])), sprite[SPRITE.DOOR_WOOD_OPEN] = [], sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.DAY] = CTI(create_door_wood(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.NIGHT] = CTI(create_door_wood(1, !1, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"])), sprite[SPRITE.DOOR_STONE_CLOSE] = [], sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.DAY] = CTI(create_door_stone(1.5, !0, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"])), sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.NIGHT] = CTI(create_door_stone(1.5, !0, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"])), sprite[SPRITE.DOOR_STONE_OPEN] = [], sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.DAY] = CTI(create_door_stone(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.NIGHT] = CTI(create_door_stone(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])), sprite[SPRITE.DOOR_AMETHYST_CLOSE] = [], sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.DAY] = CTI(create_door_stone(1.5, !0, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"])), sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.NIGHT] = CTI(create_door_stone(1.5, !0, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"])), sprite[SPRITE.DOOR_AMETHYST_OPEN] = [], sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.DAY] = CTI(create_door_stone(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.NIGHT] = CTI(create_door_stone(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])), sprite[SPRITE.DOOR_GOLD_CLOSE] = [], sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.DAY] = CTI(create_door_gold(1.5, !0, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"])), sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.NIGHT] = CTI(create_door_gold(1.5, !0, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"])), sprite[SPRITE.DOOR_GOLD_OPEN] = [], sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.DAY] = CTI(create_door_gold(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.NIGHT] = CTI(create_door_gold(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])), sprite[SPRITE.DOOR_DIAMOND_CLOSE] = [], sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.DAY] = CTI(create_door_diamond(1.5, !0, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"])), sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.NIGHT] = CTI(create_door_diamond(1.5, !0, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"])), sprite[SPRITE.DOOR_DIAMOND_OPEN] = [], sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.DAY] = CTI(create_door_diamond(1, !1, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"])), sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.NIGHT] = CTI(create_door_diamond(1, !1, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"])), sprite[SPRITE.CHEST] = [], sprite[SPRITE.CHEST][SPRITE.DAY] = CTI(create_chest(.5, !0, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"])), sprite[SPRITE.CHEST][SPRITE.NIGHT] = CTI(create_chest(.5, !0, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"])), sprite[SPRITE.CHEST][2] = CTI(create_chest(.5, !0, ["#4d0000", "#4d0000", "#4d0000", "#4d0000", "#4d0000", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"])), sprite[SPRITE.TREASURE_CHEST] = [], sprite[SPRITE.TREASURE_CHEST][SPRITE.DAY] = CTI(create_treasure_chest(.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"])), sprite[SPRITE.TREASURE_CHEST][SPRITE.NIGHT] = CTI(create_treasure_chest(.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"])), sprite[SPRITE.RABBIT] = [], sprite[SPRITE.RABBIT][SPRITE.DAY] = CTI(create_rabbit(.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"])), sprite[SPRITE.RABBIT][SPRITE.NIGHT] = CTI(create_rabbit(.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"])), sprite[SPRITE.SPIDER] = [], sprite[SPRITE.SPIDER][SPRITE.DAY] = CTI(create_rotated_img(Math.PI, create_spider(.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"]))), sprite[SPRITE.SPIDER][SPRITE.NIGHT] = CTI(create_rotated_img(Math.PI, create_spider(.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"]))), sprite[SPRITE.WEB] = CTI(create_web(.6, ["#FFFFFF"])), sprite[SPRITE.WOLF] = [], sprite[SPRITE.WOLF][SPRITE.DAY] = CTI(create_wolf(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"])), sprite[SPRITE.WOLF][SPRITE.NIGHT] = CTI(create_wolf(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"])), sprite[SPRITE.EARMUFFS] = [], sprite[SPRITE.EARMUFFS][SPRITE.DAY] = CTI(create_earmuff(.6, !0, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"])), sprite[SPRITE.EARMUFFS][SPRITE.NIGHT] = CTI(create_earmuff(.6, !0, ["#478e8b", "#327e73", "#073030", "#08403f"])), sprite[SPRITE.COAT] = [], sprite[SPRITE.COAT][SPRITE.DAY] = CTI(create_coat(.6, !0, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"])), sprite[SPRITE.COAT][SPRITE.NIGHT] = CTI(create_coat(.6, !0, ["#073030", "#08403f", "#478e8b", "#327e73"])), sprite[SPRITE.CAP_SCARF] = [], sprite[SPRITE.CAP_SCARF][SPRITE.DAY] = CTI(create_cap_scarf(.63, !0, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"])), sprite[SPRITE.CAP_SCARF][SPRITE.NIGHT] = CTI(create_cap_scarf(.63, !0, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"])), sprite[SPRITE.CHRISTMAS_HAT] = [], sprite[SPRITE.CHRISTMAS_HAT][SPRITE.DAY] = CTI(create_christmas_hat(.6, !0, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"])), sprite[SPRITE.CHRISTMAS_HAT][SPRITE.NIGHT] = CTI(create_christmas_hat(.6, !0, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"])), sprite[SPRITE.ELF_HAT] = [], sprite[SPRITE.ELF_HAT][SPRITE.DAY] = CTI(create_elf_hat(.6, !0, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"])), sprite[SPRITE.ELF_HAT][SPRITE.NIGHT] = CTI(create_elf_hat(.6, !0, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"])), sprite[SPRITE.BREAD_OVEN_ON] = [], sprite[SPRITE.BREAD_OVEN_ON][SPRITE.DAY] = CTI(create_bread_oven(.42, !0, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"])), sprite[SPRITE.BREAD_OVEN_ON][SPRITE.NIGHT] = CTI(create_bread_oven(.42, !0, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"])), sprite[SPRITE.BREAD_LIGHT_UP] = [], sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.DAY] = CTI(create_bread_light_up(.9, ["#e4c027"])), sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.NIGHT] = CTI(create_bread_light_up(.9, ["#D8E57F"])), sprite[SPRITE.BREAD_OVEN_OFF] = [], sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.DAY] = CTI(create_bread_oven_off(.42, !0, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"])), sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.NIGHT] = CTI(create_bread_oven_off(.42, !0, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"])), sprite[SPRITE.BREAD_OVEN_UI] = CTI(create_bread_oven_ui(1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"])), sprite[SPRITE.FURNACE_ON] = [], sprite[SPRITE.FURNACE_ON][SPRITE.DAY] = CTI(create_furnace_on(.5, !0, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"])), sprite[SPRITE.FURNACE_ON][SPRITE.NIGHT] = CTI(create_furnace_on(.5, !0, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"])), sprite[SPRITE.FURNACE_OFF] = [], sprite[SPRITE.FURNACE_OFF][SPRITE.DAY] = CTI(create_furnace_off(.5, !0, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"])), sprite[SPRITE.FURNACE_OFF][SPRITE.NIGHT] = CTI(create_furnace_off(.5, !0, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"])), sprite[SPRITE.FURNACE_SLOT] = CTI(create_furnace_slot(.8, !0, ["#5f6061", "#939393"])), sprite[SPRITE.FURNACE_BUTTON] = create_craft_button(1, [{
        f: create_wood_fire,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
    }], .3, ["#494949", "#5b5858", "#3d3b3b"], 1), sprite[SPRITE.BED] = [], sprite[SPRITE.BED][SPRITE.DAY] = CTI(create_bed(1, !0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"])), sprite[SPRITE.BED][SPRITE.NIGHT] = CTI(create_bed(1, !0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"])), sprite[SPRITE.BED_TOP] = [], sprite[SPRITE.BED_TOP][SPRITE.DAY] = CTI(create_bed_top(1, !0, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"])), sprite[SPRITE.BED_TOP][SPRITE.NIGHT] = CTI(create_bed_top(1, !0, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"])), sprite[SPRITE.CRAB_SPEAR] = [], sprite[SPRITE.CRAB_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_crab_spear(.7, !0, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]))), sprite[SPRITE.CRAB_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_crab_spear(.7, !0, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"]))), sprite[SPRITE.WOOD_SPEAR] = [], sprite[SPRITE.WOOD_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_wood_spear(.7, !0, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]))), sprite[SPRITE.WOOD_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_wood_spear(.7, !0, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"]))), sprite[SPRITE.SPEAR] = [], sprite[SPRITE.SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_stonespear(.65, !0, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]))), sprite[SPRITE.SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_stonespear(.65, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"]))), sprite[SPRITE.GOLD_SPEAR] = [], sprite[SPRITE.GOLD_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_goldspear(.67, !0, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]))), sprite[SPRITE.GOLD_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_goldspear(.67, !0, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"]))), sprite[SPRITE.DIAMOND_SPEAR] = [], sprite[SPRITE.DIAMOND_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_diamondspear(.67, !0, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]))), sprite[SPRITE.DIAMOND_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_diamondspear(.67, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"]))), sprite[SPRITE.AMETHYST_SPEAR] = [], sprite[SPRITE.AMETHYST_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_amespear(.67, !0, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]))), sprite[SPRITE.AMETHYST_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_amespear(.67, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"]))), sprite[SPRITE.DRAGON_SPEAR] = [], sprite[SPRITE.DRAGON_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_spear(1, !0, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]))), sprite[SPRITE.DRAGON_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_spear(1, !0, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"]))), sprite[SPRITE.HAMMER] = [], sprite[SPRITE.HAMMER][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(1, !0, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]))), sprite[SPRITE.HAMMER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(1, !0, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"]))), sprite[SPRITE.SPANNER] = [], sprite[SPRITE.SPANNER][SPRITE.DAY] = CTI(create_rotated_img(3, create_spanner(.5, !0, ["#0d1b1c", "#939393", "#5f6061"]))), sprite[SPRITE.SPANNER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_spanner(.5, !0, ["#030d14", "#485e66", "#1f343f"]))), sprite[SPRITE.SUPER_HAMMER] = [], sprite[SPRITE.SUPER_HAMMER][SPRITE.DAY] = CTI(create_rotated_img(3, create_superhammer(1, !0, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"]))), sprite[SPRITE.SUPER_HAMMER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_superhammer(1, !0, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"]))), sprite[SPRITE.HAMMER_GOLD] = [], sprite[SPRITE.HAMMER_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(1, !0, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]))), sprite[SPRITE.HAMMER_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(1, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"]))), sprite[SPRITE.HAMMER_DIAMOND] = [], sprite[SPRITE.HAMMER_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(1, !0, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]))), sprite[SPRITE.HAMMER_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(1, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"]))), sprite[SPRITE.HAMMER_AMETHYST] = [], sprite[SPRITE.HAMMER_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(1, !0, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]))), sprite[SPRITE.HAMMER_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(1, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"]))), sprite[SPRITE.LOCK] = [], sprite[SPRITE.LOCK][SPRITE.DAY] = CTI(create_lock(.55, !1, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])), sprite[SPRITE.LOCK][SPRITE.NIGHT] = CTI(create_lock(.55, !1, ["#080707", "#133d3c", "#2b6664", "#1b2529"])), sprite[SPRITE.PADLOCK] = [], sprite[SPRITE.PADLOCK].push(CTI(create_lock(.8, !1, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]))), sprite[SPRITE.PADLOCK].push(CTI(create_lock(.8, !1, ["#141414", "#9f7d17", "#dab33c", "#474545"]))), sprite[SPRITE.PADLOCK].push(CTI(create_lock(.8, !1, ["#141414", "#73590d", "#a88a2c", "#2a2828"]))), sprite[SPRITE.LOCKED] = [], sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]), sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]), sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]), sprite[SPRITE.LOCKPICK] = [], sprite[SPRITE.LOCKPICK][SPRITE.DAY] = CTI(create_lockpick(.06, !1, ["#141414", "#c4a23a", "#816511"])), sprite[SPRITE.LOCKPICK][SPRITE.NIGHT] = CTI(create_lockpick(.06, !1, ["#030d14", "#2b6664", "#133d3c"])), sprite[SPRITE.KEY] = [], sprite[SPRITE.KEY].push(CTI(create_lockpick(.08, !1, ["#141414", "#c4a23a", "#816511"]))), sprite[SPRITE.KEY].push(CTI(create_lockpick(.08, !1, ["#141414", "#e2bd4e", "#a38018"]))), sprite[SPRITE.KEY].push(CTI(create_lockpick(.08, !1, ["#141414", "#b0902e", "#634d09"]))), sprite[SPRITE.DRAGON_HEART] = create_craft_button(1.5, [{
        f: create_dragon_heart,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9), sprite[SPRITE.RESURRECTION_GROUND] = [], sprite[SPRITE.RESURRECTION_GROUND][SPRITE.DAY] = CTI(create_resurrection_ground(.8, !0, ["#347f93", "#54a4ba"])), sprite[SPRITE.RESURRECTION_GROUND][SPRITE.NIGHT] = CTI(create_resurrection_ground(.8, !0, ["#98ede3", "#94f2e7"])), sprite[SPRITE.RESURRECTION_HOLE] = [], sprite[SPRITE.RESURRECTION_HOLE][SPRITE.DAY] = CTI(create_resurrection_hole(.8, !0, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"])), sprite[SPRITE.RESURRECTION_HOLE][SPRITE.NIGHT] = CTI(create_resurrection_hole(.8, !0, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"])), sprite[SPRITE.RESURRECTION_ROTATE] = [], sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.DAY] = CTI(create_resurrection_rotate(.8, !0, ["#a9e4ed", "#86d4e0"])), sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.NIGHT] = CTI(create_resurrection_rotate(.8, !0, ["#83ddd4", "#485e66"])), sprite[SPRITE.RESURRECTION] = [], sprite[SPRITE.RESURRECTION][SPRITE.DAY] = CTI(create_resurrection(.8, !0, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"])), sprite[SPRITE.RESURRECTION][SPRITE.NIGHT] = CTI(create_resurrection(.8, !0, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"])), sprite[SPRITE.EMERALD_MACHINE_GROUND] = [], sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_GROUNDD, sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_GROUNDN, sprite[SPRITE.EMERALD_MACHINE_HOLE] = [], sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_HOLED, sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_HOLEN, sprite[SPRITE.EMERALD_MACHINE_ROTATE] = [], sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_ROTATED, sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_ROTATEN, sprite[SPRITE.EMERALD_MACHINE] = [], sprite[SPRITE.EMERALD_MACHINE][SPRITE.DAY] = IMAGES.EMERALD_MACHINED, sprite[SPRITE.EMERALD_MACHINE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINEN, sprite[SPRITE.EXTRACTOR_MACHINE0_STONE] = [], sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_STONED, sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_STONEN, sprite[SPRITE.EXTRACTOR_MACHINE_STONE] = [], sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_STONED, sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_STONEN, sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD] = [], sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_GOLDD, sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_GOLDN, sprite[SPRITE.EXTRACTOR_MACHINE_GOLD] = [], sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_GOLDD, sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_GOLDN, sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND] = [], sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDD, sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDN, sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND] = [], sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_DIAMONDD, sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_DIAMONDN, sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST] = [], sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD, sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN, sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST] = [], sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTD, sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTN, sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE] = [], sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_REIDITED, sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_REIDITEN, sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE] = [], sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_REIDITED, sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_REIDITEN, sprite[SPRITE.FIREFLY] = [], sprite[SPRITE.FIREFLY][SPRITE.DAY] = IMAGES.FIREFLYD, sprite[SPRITE.FIREFLY][SPRITE.NIGHT] = IMAGES.FIREFLYN, sprite[SPRITE.HURT_FIREFLY] = IMAGES.HURT_FIREFLY, sprite[SPRITE.TOTEM] = [], sprite[SPRITE.TOTEM][SPRITE.DAY] = CTI(create_totem(.75, !0, ["#0d1b1c", "#4c3a15", "#634828", "#564021"])), sprite[SPRITE.TOTEM][SPRITE.NIGHT] = CTI(create_totem(.75, !0, ["#030d14", "#0d2e33", "#184747", "#123b3f"])), sprite[SPRITE.ICON_MEMBER] = CTI(create_icon_team(.3, ["#092813", "#1f773d"], 0)), sprite[SPRITE.ICON_LEADER] = CTI(create_icon_team(.3, ["#092813", "#1f773d"], 1)), sprite[SPRITE.VERIFIED] = CTI(create_verified(.6, ["#092813", "#1f773d"])), sprite[SPRITE.TEAM_BUTTON] = [], sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0))), sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0))), sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0))), sprite[SPRITE.FULL_TEAM_BUTTON] = [];
    var t = CTI(create_team_button(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
    sprite[SPRITE.FULL_TEAM_BUTTON].push(t), sprite[SPRITE.FULL_TEAM_BUTTON].push(t), sprite[SPRITE.FULL_TEAM_BUTTON].push(t), sprite[SPRITE.MANAGE_TEAM_BUTTON] = [], sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1))), sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1))), sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1))), sprite[SPRITE.DELAY_SPIKE] = CTI(create_spiketimer(.3, ["#FFFFFF"])), sprite[SPRITE.DELAY_WALL] = CTI(create_delay_wall(.3, ["#FFFFFF"])), sprite[SPRITE.DELAY_TEAM] = CTI(create_icon_team(.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0)), sprite[SPRITE.DELAY_DRINK] = CTI(create_rotated_img(Math.PI / 5, create_drink_delay(.2, ["#FFFFFF"]))), sprite[SPRITE.AMETHYST_HELMET] = [], sprite[SPRITE.AMETHYST_HELMET][SPRITE.DAY] = CTI(create_amethyst_helmet(.85, !0, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"])), sprite[SPRITE.AMETHYST_HELMET][SPRITE.NIGHT] = CTI(create_amethyst_helmet(.85, !0, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"])), sprite[SPRITE.SHOW_TEAM_BUTTON] = [], sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1))), sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1))), sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1))), sprite[SPRITE.HOOD] = [], sprite[SPRITE.HOOD][SPRITE.DAY] = CTI(create_hood(.37, !0, ["#2a2938", "#242330", "#313041"])), sprite[SPRITE.HOOD][SPRITE.NIGHT] = CTI(create_hood(.37, !0, ["#1b1e30", "#161921", "#252f3e"])), sprite[SPRITE.WINTER_HOOD] = [], sprite[SPRITE.WINTER_HOOD][SPRITE.DAY] = CTI(create_winter_hood(.17, !0, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"])), sprite[SPRITE.WINTER_HOOD][SPRITE.NIGHT] = CTI(create_winter_hood(.17, !0, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"])), sprite[SPRITE.WINTER_PEASANT] = [], sprite[SPRITE.WINTER_PEASANT][SPRITE.DAY] = CTI(create_peasant(.55, !0, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1)), sprite[SPRITE.WINTER_PEASANT][SPRITE.NIGHT] = CTI(create_peasant(.55, !0, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1)), sprite[SPRITE.PEASANT] = [], sprite[SPRITE.PEASANT][SPRITE.DAY] = CTI(create_peasant(.55, !0, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0)), sprite[SPRITE.PEASANT][SPRITE.NIGHT] = CTI(create_peasant(.55, !0, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0)), sprite[SPRITE.CROWN_GREEN] = [], sprite[SPRITE.CROWN_GREEN][SPRITE.DAY] = CTI(create_crown_life(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"])), sprite[SPRITE.CROWN_GREEN][SPRITE.NIGHT] = CTI(create_crown_life(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"])), sprite[SPRITE.CROWN_ORANGE] = [], sprite[SPRITE.CROWN_ORANGE][SPRITE.DAY] = CTI(create_crown_life(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"])), sprite[SPRITE.CROWN_ORANGE][SPRITE.NIGHT] = CTI(create_crown_life(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"])), sprite[SPRITE.CROWN_BLUE] = [], sprite[SPRITE.CROWN_BLUE][SPRITE.DAY] = CTI(create_crown_life(.2, !0, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"])), sprite[SPRITE.CROWN_BLUE][SPRITE.NIGHT] = CTI(create_crown_life(.2, !0, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"])), sprite[SPRITE.CROWN_CRAB] = [], sprite[SPRITE.CROWN_CRAB][SPRITE.DAY] = CTI(create_crab_crown(.24, !0, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"])), sprite[SPRITE.CROWN_CRAB][SPRITE.NIGHT] = CTI(create_crab_crown(.24, !0, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"])), sprite[SPRITE.DRAGON_HELMET] = [], sprite[SPRITE.DRAGON_HELMET][SPRITE.DAY] = CTI(create_dragon_helmet(.32, !0, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"])), sprite[SPRITE.DRAGON_HELMET][SPRITE.NIGHT] = CTI(create_dragon_helmet(.32, !0, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"])), sprite[SPRITE.DRAGON_SWORD] = [], sprite[SPRITE.DRAGON_SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_sword(.9, !0, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"]))), sprite[SPRITE.DRAGON_SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_sword(.9, !0, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"]))), sprite[SPRITE.DRAGON_SWORD_HALO] = [], sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_sword(1, !0, [void 0, void 0, void 0, "#c8efef", "#c8efef"]))), sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_sword(1, !0, [void 0, void 0, void 0, "#87d2e6", "#87d2e6"]))), sprite[SPRITE.QUEST_BUTTON] = [], sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(.3, !0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0))), sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(.3, !0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1))), sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(.3, !0, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1))), sprite[SPRITE.MARKET_BUTTON] = [], sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0))), sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1))), sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1))), sprite[SPRITE.SOUND_BUTTON_ON] = [], sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1))), sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1))), sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1))), sprite[SPRITE.SOUND_BUTTON_OFF] = [], sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0))), sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0))), sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0))), sprite[SPRITE.SHOVEL] = [], sprite[SPRITE.SHOVEL][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(.7, !0, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]))), sprite[SPRITE.SHOVEL][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(.7, !0, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"]))), sprite[SPRITE.SHOVEL_GOLD] = [], sprite[SPRITE.SHOVEL_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(.7, !0, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"]))), sprite[SPRITE.SHOVEL_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(.7, !0, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"]))), sprite[SPRITE.SHOVEL_DIAMOND] = [], sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(.7, !0, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]))), sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(.7, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"]))), sprite[SPRITE.SHOVEL_AMETHYST] = [], sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(.7, !0, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"]))), sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(.7, !0, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"]))), sprite[SPRITE.SHOP] = [], sprite[SPRITE.SHOP].push(CTI(create_shop(.7, ["#3b330d", "#b5a118", "#c8ac16"], 0))), sprite[SPRITE.SHOP].push(CTI(create_shop(.7, ["#524712", "#c7b11c", "#d9ba18"], 0))), sprite[SPRITE.SHOP].push(CTI(create_shop(.7, ["#2a2409", "#9f8e14", "#ad9511"], 0))), sprite[SPRITE.HURT_WOLF] = CTI(create_hurt_wolf(1.1, ["#BB0000"])), sprite[SPRITE.HURT_SPIDER] = CTI(create_rotated_img(Math.PI, create_hurt_spider(.9, "#BB0000"))), sprite[SPRITE.EXPLORER_HAT] = [], sprite[SPRITE.EXPLORER_HAT][SPRITE.DAY] = CTI(create_explorer_hat(.55, !0, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"])), sprite[SPRITE.EXPLORER_HAT][SPRITE.NIGHT] = CTI(create_explorer_hat(.55, !0, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"])), sprite[SPRITE.WOOD_HELMET] = [], sprite[SPRITE.WOOD_HELMET][SPRITE.DAY] = CTI(create_wooden_helmet(.55, !0, ["#252525", "#73583e", "#573f29", "#7d6144"])), sprite[SPRITE.WOOD_HELMET][SPRITE.NIGHT] = CTI(create_wooden_helmet(.55, !0, ["#0d3b39", "#144642", "#0b3230", "#154f4b"])), sprite[SPRITE.STONE_HELMET] = [], sprite[SPRITE.STONE_HELMET][SPRITE.DAY] = CTI(create_viking_hat(.6, !0, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"])), sprite[SPRITE.STONE_HELMET][SPRITE.NIGHT] = CTI(create_viking_hat(.6, !0, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"])), sprite[SPRITE.GOLD_HELMET] = [], sprite[SPRITE.GOLD_HELMET][SPRITE.DAY] = CTI(create_gold_helmet(.58, !0, ["#dbce71", "#b29c32", "#c4bc51"])), sprite[SPRITE.GOLD_HELMET][SPRITE.NIGHT] = CTI(create_gold_helmet(.58, !0, ["#2b7c57", "#15543c", "#1a7961"])), sprite[SPRITE.DIAMOND_HELMET] = [], sprite[SPRITE.DIAMOND_HELMET][SPRITE.DAY] = CTI(create_diamond_helmet(.69, !0, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"])), sprite[SPRITE.DIAMOND_HELMET][SPRITE.NIGHT] = CTI(create_diamond_helmet(.69, !0, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"])), sprite[SPRITE.FIR] = [], sprite[SPRITE.FIR][SPRITE.DAY] = [], sprite[SPRITE.FIR][SPRITE.NIGHT] = [], sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_three(1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"]))), sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_two(1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"]))), sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_one(1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"]))), sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_three(1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"]))), sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_two(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"]))), sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_one(1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"]))), sprite[SPRITE.DRAGON] = [], sprite[SPRITE.DRAGON][SPRITE.DAY] = CTI(create_dragon(1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"])), sprite[SPRITE.DRAGON][SPRITE.NIGHT] = CTI(create_dragon(1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"])), sprite[SPRITE.WING_LEFT] = [], sprite[SPRITE.WING_LEFT][SPRITE.DAY] = CTI(create_wingleft(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])), sprite[SPRITE.WING_LEFT][SPRITE.NIGHT] = CTI(create_wingleft(1, ["#050505", "#327570", "#021724", "#200333"])), sprite[SPRITE.WING_RIGHT] = [], sprite[SPRITE.WING_RIGHT][SPRITE.DAY] = CTI(create_wingright(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])), sprite[SPRITE.WING_RIGHT][SPRITE.NIGHT] = CTI(create_wingright(1, ["#050505", "#327570", "#021724", "#200333"])), sprite[SPRITE.DECORATION] = [], sprite[SPRITE.DECORATION][SPRITE.DAY] = [], sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [], sprite[SPRITE.DECORATION][SPRITE.DAY] = [IMAGES.DECORATION_0D, IMAGES.DECORATION_1D, IMAGES.DECORATION_2D, IMAGES.DECORATION_3D, IMAGES.DECORATION_4D, IMAGES.DECORATION_5D, IMAGES.DECORATION_6D, IMAGES.DECORATION_7D, IMAGES.DECORATION_8D, IMAGES.DECORATION_9D, IMAGES.DECORATION_10D, IMAGES.DECORATION_11D, IMAGES.DECORATION_12D, IMAGES.DECORATION_13D, IMAGES.DECORATION_14D, IMAGES.DECORATION_15D, IMAGES.DECORATION_16D, IMAGES.DECORATION_17D, IMAGES.DECORATION_18D, IMAGES.DECORATION_19D, IMAGES.DECORATION_20D, IMAGES.DECORATION_21D, IMAGES.DECORATION_22D, IMAGES.DECORATION_23D, IMAGES.DECORATION_24D, IMAGES.DECORATION_25D, IMAGES.DECORATION_26D, IMAGES.DECORATION_27D, IMAGES.DECORATION_28D, IMAGES.DECORATION_29D, IMAGES.DECORATION_30D, IMAGES.DECORATION_31D, IMAGES.DECORATION_32D, IMAGES.DECORATION_33D, IMAGES.DECORATION_34D, IMAGES.DECORATION_35D, IMAGES.DECORATION_36D, IMAGES.DECORATION_37D, IMAGES.DECORATION_38D, IMAGES.DECORATION_39D, IMAGES.DECORATION_40D, IMAGES.DECORATION_41D, IMAGES.DECORATION_42D, IMAGES.DECORATION_43D, IMAGES.DECORATION_44D, IMAGES.DECORATION_45D, IMAGES.DECORATION_46D, IMAGES.DECORATION_47D, IMAGES.DECORATION_48D, IMAGES.DECORATION_49D, IMAGES.DECORATION_50D, IMAGES.DECORATION_51D, IMAGES.DECORATION_52D, IMAGES.DECORATION_53D, IMAGES.DECORATION_54D, IMAGES.DECORATION_55D], sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [IMAGES.DECORATION_0N, IMAGES.DECORATION_1N, IMAGES.DECORATION_2N, IMAGES.DECORATION_3N, IMAGES.DECORATION_4N, IMAGES.DECORATION_5N, IMAGES.DECORATION_6N, IMAGES.DECORATION_7N, IMAGES.DECORATION_8N, IMAGES.DECORATION_9N, IMAGES.DECORATION_10N, IMAGES.DECORATION_11N, IMAGES.DECORATION_12N, IMAGES.DECORATION_13N, IMAGES.DECORATION_14N, IMAGES.DECORATION_15N, IMAGES.DECORATION_16N, IMAGES.DECORATION_17N, IMAGES.DECORATION_18N, IMAGES.DECORATION_19N, IMAGES.DECORATION_20N, IMAGES.DECORATION_21N, IMAGES.DECORATION_22N, IMAGES.DECORATION_23N, IMAGES.DECORATION_24N, IMAGES.DECORATION_25N, IMAGES.DECORATION_26N, IMAGES.DECORATION_27N, IMAGES.DECORATION_28N, IMAGES.DECORATION_29N, IMAGES.DECORATION_30N, IMAGES.DECORATION_31N, IMAGES.DECORATION_32N, IMAGES.DECORATION_33N, IMAGES.DECORATION_34N, IMAGES.DECORATION_35N, IMAGES.DECORATION_36N, IMAGES.DECORATION_37N, IMAGES.DECORATION_38N, IMAGES.DECORATION_39N, IMAGES.DECORATION_40N, IMAGES.DECORATION_41N, IMAGES.DECORATION_42N, IMAGES.DECORATION_43N, IMAGES.DECORATION_44N, IMAGES.DECORATION_45N, IMAGES.DECORATION_46N, IMAGES.DECORATION_47N, IMAGES.DECORATION_48N, IMAGES.DECORATION_49N, IMAGES.DECORATION_50N, IMAGES.DECORATION_51N, IMAGES.DECORATION_52N, IMAGES.DECORATION_53N, IMAGES.DECORATION_54N, IMAGES.DECORATION_55N], sprite[SPRITE.CAVE_STONES] = [], sprite[SPRITE.CAVE_STONES][SPRITE.DAY] = [], sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT] = [], sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(1.1, !1, ["#252B28", "#747471", "#83827e"], 0))), sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(.9, !1, ["#252B28", "#747471", "#83827e"], 1))), sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(1, !1, ["#252B28", "#747471", "#83827e"], 2))), sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(.9, !1, ["#252B28", "#747471", "#83827e"], 2))), sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(1.1, !1, ["#030d14", "#123335", "#183f3f"], 0))), sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(.9, !1, ["#030d14", "#123335", "#183f3f"], 1))), sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(1, !1, ["#030d14", "#123335", "#183f3f"], 2))), sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(.9, !1, ["#030d14", "#123335", "#183f3f"], 2))), sprite[SPRITE.SHADOW_CAVE_STONES] = [], sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY] = [], sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT] = [], sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(1.1, !0, ["#252B28", "#58645F", "#75827D"], 2))), sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(.9, !0, ["#252B28", "#58645F", "#75827D"], 2))), sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(1, !0, ["#252B28", "#58645F", "#75827D"], 2))), sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(.9, !0, ["#252B28", "#58645F", "#75827D"], 2))), sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(1.1, !0, ["#030d14", "#123335", "#183f3f"], 2))), sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(.9, !0, ["#030d14", "#123335", "#183f3f"], 2))), sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(1, !0, ["#030d14", "#123335", "#183f3f"], 2))), sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(.9, !0, ["#030d14", "#123335", "#183f3f"], 2))), sprite[SPRITE.GOLD_WINTER] = [], sprite[SPRITE.GOLD_WINTER][SPRITE.DAY] = [], sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT] = [], sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(1.5, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(1.3, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(1.1, !1, ["#2b280a", "#ddcf8a", "#f4efc6"]))), sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(1.5, !1, ["#0a2728", "#3e8989", "#50a09c"]))), sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(1.3, !1, ["#0a2728", "#3e8989", "#50a09c"]))), sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(1.1, !1, ["#0a2728", "#3e8989", "#50a09c"]))), sprite[SPRITE.DIAMOND_WINTER] = [], sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY] = [], sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT] = [], sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(1.1, !1, ["#123d38", "#70e0dd", "#95efea"]))), sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(.9, !1, ["#123d38", "#70e0dd", "#95efea"]))), sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(.7, !1, ["#123d38", "#70e0dd", "#95efea"]))), sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(1.1, !1, ["#123d38", "#47b2ac", "#5cccc4"]))), sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(.9, !1, ["#123d38", "#47b2ac", "#5cccc4"]))), sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(.7, !1, ["#123d38", "#47b2ac", "#5cccc4"]))), sprite[SPRITE.AMETHYST] = [], sprite[SPRITE.AMETHYST][SPRITE.DAY] = [], sprite[SPRITE.AMETHYST][SPRITE.NIGHT] = [], sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(1.7, !0, ["#1d051e", "#c27add", "#cd98e5"]))), sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(1.5, !0, ["#1d051e", "#c27add", "#cd98e5"]))), sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(1.3, !0, ["#1d051e", "#c27add", "#cd98e5"]))), sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(1.7, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))), sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(1.5, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))), sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(1.3, !0, ["#1d051e", "#41aaa0", "#5cccc4"]))), sprite[SPRITE.WATERBLOCK] = [], sprite[SPRITE.WATERBLOCK][SPRITE.DAY] = [], sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT] = [], sprite[SPRITE.WATERBLOCK][SPRITE.DAY].push(CTI(create_dragon_ground(1, ["#2d53c4"]))), sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT].push(CTI(create_dragon_ground(1, ["#2d53c4"]))), sprite[SPRITE.ISLAND_BLOCK] = [], sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY] = [], sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT] = [], sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY].push(CTI(create_dragon_ground(1, ["#c4912d"]))), sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT].push(CTI(create_dragon_ground(1, ["#c4912d"]))), sprite[SPRITE.CAVE_STEP] = [], sprite[SPRITE.CAVE_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#414040"])), sprite[SPRITE.CAVE_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#153635"])), sprite[SPRITE.DOOR_WOOD_OPEN_WINTER] = [], sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_wood(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_wood(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[SPRITE.DOOR_STONE_OPEN_WINTER] = [], sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_stone(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_stone(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER] = [], sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_stone(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_stone(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER] = [], sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_diamond(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_diamond(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[SPRITE.DOOR_GOLD_OPEN_WINTER] = [], sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_gold(1, !1, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"])), sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_gold(1, !1, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"])), sprite[SPRITE.FOX] = [], sprite[SPRITE.FOX][SPRITE.DAY] = CTI(create_winter_fox(.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"])), sprite[SPRITE.FOX][SPRITE.NIGHT] = CTI(create_winter_fox(.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"])), sprite[SPRITE.BEAR] = [], sprite[SPRITE.BEAR][SPRITE.DAY] = CTI(create_polar_bear(.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"])), sprite[SPRITE.BEAR][SPRITE.NIGHT] = CTI(create_polar_bear(.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"])), sprite[SPRITE.MINIMAP] = [], sprite[SPRITE.MINIMAP_CTX] = [], sprite[SPRITE.BIGMAP] = [], sprite[SPRITE.BIGMAP_CTX] = [];
    for (e = 0; e < 2; e++) sprite[SPRITE.MINIMAP][e] = document.createElement("canvas"), sprite[SPRITE.MINIMAP][e].width = 193, sprite[SPRITE.MINIMAP][e].height = 193, sprite[SPRITE.MINIMAP_CTX][e] = sprite[SPRITE.MINIMAP][e].getContext("2d"), sprite[SPRITE.BIGMAP][e] = document.createElement("canvas"), sprite[SPRITE.BIGMAP][e].width = 600, sprite[SPRITE.BIGMAP][e].height = 600, sprite[SPRITE.BIGMAP_CTX][e] = sprite[SPRITE.BIGMAP][e].getContext("2d");
    sprite[SPRITE.SNOW_STEP] = [], sprite[SPRITE.SNOW_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#c8e0de"])), sprite[SPRITE.SNOW_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#147071"])), sprite[SPRITE.LAVA_STEP] = [], sprite[SPRITE.LAVA_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#231912"])), sprite[SPRITE.LAVA_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#021719"])), sprite[SPRITE.HURT_TREASURE_CHEST] = CTI(create_hurt_treasure_chest(.5, ["#BB0000"])), sprite[SPRITE.HURT_FOX] = CTI(create_hurt_fox_winter(.9, "#BB0000")), sprite[SPRITE.HURT_BEAR] = CTI(create_hurt_polar_bear(.9, "#BB0000")), sprite[SPRITE.HURT_DRAGON] = CTI(create_hurt_dragon(1, ["#BB0000"])), sprite[SPRITE.HURT_WING_LEFT] = CTI(create_hurt_wingleft(.8, "#BB0000")), sprite[SPRITE.HURT_WING_RIGHT] = CTI(create_hurt_wingright(.8, "#BB0000")), sprite[SPRITE.HURT_RABBIT] = CTI(create_hurt_rabbit(.9, "#BB0000")), sprite[SPRITE.HURT] = CTI(create_hurt_player(.6, "#BB0000")), sprite[SPRITE.COLD] = CTI(create_hurt_player(.6, "#1CE7E0")), sprite[SPRITE.HUNGER] = CTI(create_hurt_player(.6, "#DBE71C")), sprite[SPRITE.HEAL] = CTI(create_hurt_player(.6, "#00BB00")), sprite[SPRITE.SAND_STEP] = [], sprite[SPRITE.SAND_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#dac291"])), sprite[SPRITE.SAND_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#0D423D"])), sprite[SPRITE.ISLAND_STEP] = [], sprite[SPRITE.ISLAND_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#dac291"])), sprite[SPRITE.ISLAND_STEP][SPRITE.NIGHT] = CTI(create_snow_step(1, ["#0D423D"])), sprite[SPRITE.WELL_FULL] = [], sprite[SPRITE.WELL_FULL][SPRITE.DAY] = CTI(create_well(.3, !0, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"])), sprite[SPRITE.WELL_FULL][SPRITE.NIGHT] = CTI(create_well(.3, !0, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"])), sprite[SPRITE.WELL_EMPTY] = [], sprite[SPRITE.WELL_EMPTY][SPRITE.DAY] = CTI(create_well(.3, !0, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"])), sprite[SPRITE.WELL_EMPTY][SPRITE.NIGHT] = CTI(create_well(.3, !0, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"])), sprite[SPRITE.BOTTLE_FULL] = [CTI(create_bottle(1, !0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))], sprite[SPRITE.BOTTLE_EMPTY] = [CTI(create_bottle(1, !0, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))], sprite[SPRITE.OCEAN] = [], sprite[SPRITE.OCEAN][SPRITE.DAY] = [], sprite[SPRITE.OCEAN][SPRITE.NIGHT] = [], sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_one(1, ["#0B6A84"]))), sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_two(1, ["#0B6A84"]))), sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_three(1, ["#0B6A84"]))), sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_four(1, ["#0B6A84"]))), sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_five(1, ["#0B6A84"]))), sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_six(1, ["#0B6A84"]))), sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_sept(1, ["#0B6A84"]))), sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_one(1, ["#09373F"]))), sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_two(1, ["#09373F"]))), sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_three(1, ["#09373F"]))), sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_four(1, ["#09373F"]))), sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_five(1, ["#09373F"]))), sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_six(1, ["#09373F"]))), sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_sept(1, ["#09373F"]))), sprite[SPRITE.ISLAND] = [], sprite[SPRITE.ISLAND][SPRITE.DAY] = [], sprite[SPRITE.ISLAND][SPRITE.NIGHT] = [], sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(1.7, ["#FBEFBC"], 0))), sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(1.9, ["#FBEFBC"], 1))), sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(1.7, ["#FBEFBC"], 2))), sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(1.7, ["#0F4C48"], 0))), sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(1.9, ["#0F4C48"], 1))), sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(1.7, ["#0F4C48"], 2))), sprite[SPRITE.WAVE_ONE] = [], sprite[SPRITE.WAVE_ONE][SPRITE.DAY] = [], sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT] = [], sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(1.8, ["#A9D6D3"], 0))), sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(2, ["#A9D6D3"], 1))), sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(1.8, ["#A9D6D3"], 2))), sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(1.8, ["#115E60"], 0))), sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(2, ["#115E60"], 1))), sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(1.8, ["#115E60"], 2))), sprite[SPRITE.WAVE_TWO] = [], sprite[SPRITE.WAVE_TWO][SPRITE.DAY] = [], sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT] = [], sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(1.9, ["#2A8B9B"], 0))), sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(2.1, ["#2A8B9B"], 1))), sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(1.9, ["#2A8B9B"], 2))), sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(1.9, ["#0F464C"], 0))), sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(2.1, ["#0F464C"], 1))), sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(1.9, ["#0F464C"], 2))), sprite[SPRITE.PALM] = [], sprite[SPRITE.PALM][SPRITE.DAY] = [], sprite[SPRITE.PALM][SPRITE.NIGHT] = [], sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))), sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))), sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))), sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(.8, ["#041e22", "#124949", "#0e3838", "#0a4049"]))), sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(1, ["#041e22", "#124949", "#0e3838", "#0a4049"]))), sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"]))), sprite[SPRITE.KRAKEN] = [], sprite[SPRITE.KRAKEN][SPRITE.DAY] = CTI(create_kraken(.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"])), sprite[SPRITE.KRAKEN][SPRITE.NIGHT] = CTI(create_kraken(.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"])), sprite[SPRITE.HURT_KRAKEN] = CTI(create_hurt_kraken(.8, ["#B6222A"])), sprite[SPRITE.PIRANHA] = [], sprite[SPRITE.PIRANHA][SPRITE.DAY] = CTI(create_pirahna(.8, !0, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"])), sprite[SPRITE.PIRANHA][SPRITE.NIGHT] = CTI(create_pirahna(.8, !0, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"])), sprite[SPRITE.HURT_PIRANHA] = CTI(create_hurt_pirahna(.8, ["#B6222A"])), sprite[SPRITE.FISH1] = [], sprite[SPRITE.FISH1][SPRITE.DAY] = CTI(create_fish1(.4, !0, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0)), sprite[SPRITE.FISH1][SPRITE.NIGHT] = CTI(create_fish1(.4, !0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)), sprite[SPRITE.FISH2] = [], sprite[SPRITE.FISH2][SPRITE.DAY] = CTI(create_fish1(.4, !0, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1)), sprite[SPRITE.FISH2][SPRITE.NIGHT] = CTI(create_fish1(.4, !0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1)), sprite[SPRITE.FISH3] = [], sprite[SPRITE.FISH3][SPRITE.DAY] = CTI(create_fish1(.4, !0, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0)), sprite[SPRITE.FISH3][SPRITE.NIGHT] = CTI(create_fish1(.4, !0, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)), sprite[SPRITE.HURT_FISH1] = CTI(create_hurt_fish1(.4, ["#B6222A"])), sprite[SPRITE.HURT_FISH2] = CTI(create_hurt_fish1(.4, ["#B6222A"])), sprite[SPRITE.HURT_FISH3] = CTI(create_hurt_fish1(.4, ["#B6222A"])), sprite[SPRITE.CRAB_LOOT] = CTI(create_crab_loot(.35, !0, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"], 1)), sprite[SPRITE.CRAB_STICK] = CTI(create_crab_stick(.35, !0, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"], 1)), sprite[SPRITE.CRAB_ATTACK] = [], sprite[SPRITE.CRAB_ATTACK][SPRITE.DAY] = CTI(create_crab(.35, !0, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1)), sprite[SPRITE.CRAB_ATTACK][SPRITE.NIGHT] = CTI(create_crab(.35, !0, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1)), sprite[SPRITE.CRAB] = [], sprite[SPRITE.CRAB][SPRITE.DAY] = CTI(create_crab(.35, !0, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0)), sprite[SPRITE.CRAB][SPRITE.NIGHT] = CTI(create_crab(.35, !0, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0)), sprite[SPRITE.CRAB_CLAW_LEFT] = [], sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.DAY] = CTI(create_crab_claw_left(.35, !0, ["#1e2021", "#e45936", "#ffffff"])), sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.NIGHT] = CTI(create_crab_claw_left(.35, !0, ["#0c0c0d", "#34255d", "#563f83"])), sprite[SPRITE.CRAB_CLAW_RIGHT] = [], sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.DAY] = CTI(create_crab_claw_right(.42, !0, ["#1e2021", "#e45936", "#ffffff"])), sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.NIGHT] = CTI(create_crab_claw_right(.42, !0, ["#0c0c0d", "#34255d", "#563f83"])), sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK] = [], sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.DAY] = CTI(create_crab_claw_left(.35, !0, ["#1e2021", "#e45936", "#B6222A"])), sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = CTI(create_crab_claw_left(.35, !0, ["#0c0c0d", "#613577", "#462966"])), sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK] = [], sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.DAY] = CTI(create_crab_claw_right(.42, !0, ["#1e2021", "#e45936", "#B6222A"])), sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = CTI(create_crab_claw_right(.42, !0, ["#0c0c0d", "#613577", "#462966"])), sprite[SPRITE.HURT_CRAB] = CTI(create_hurt_crab(.35, ["#B6222A"])), sprite[SPRITE.HURT_CRAB_CLAW_LEFT] = CTI(create_crab_claw_left(.35, !0, [void 0, "#B6222A"])), sprite[SPRITE.HURT_CRAB_CLAW_RIGHT] = CTI(create_crab_claw_right(.35, !0, [void 0, "#B6222A"])), sprite[SPRITE.HEAL_CRAB] = CTI(create_hurt_crab(.35, ["#22E066"])), sprite[SPRITE.HEAL_CRAB_CLAW_LEFT] = CTI(create_crab_claw_left(.35, !0, [void 0, "#22E066"])), sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT] = CTI(create_crab_claw_right(.35, !0, [void 0, "#22E066"])), sprite[SPRITE.DIVING_MASK] = [], sprite[SPRITE.DIVING_MASK][SPRITE.DAY] = CTI(create_divingmask(.3, !0, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"])), sprite[SPRITE.DIVING_MASK][SPRITE.NIGHT] = CTI(create_divingmask(.3, !0, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"])), sprite[SPRITE.SUPER_DIVING_SUIT] = [], sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.DAY] = CTI(create_superdivingsuit(.45, !0, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"])), sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.NIGHT] = CTI(create_superdivingsuit(.45, !0, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"])), sprite[SPRITE.PLOT] = [], sprite[SPRITE.PLOT][SPRITE.DAY] = CTI(create_plot(.63, !0, ["#1e2021", "#352E1E", "#4C3B19", "#574122"])), sprite[SPRITE.PLOT][SPRITE.NIGHT] = CTI(create_plot(.63, !0, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])), sprite[SPRITE.BRIDGE] = [], sprite[SPRITE.BRIDGE][SPRITE.DAY] = CTI(create_bridge(1, !0, ["#1e2021", "#332715", "#4C3B19", "#574122"])), sprite[SPRITE.BRIDGE][SPRITE.NIGHT] = CTI(create_bridge(1, !0, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])), sprite[SPRITE.WOOD_TOWER] = [], sprite[SPRITE.WOOD_TOWER][SPRITE.DAY] = IMAGES.WOOD_TOWERD, sprite[SPRITE.WOOD_TOWER][SPRITE.NIGHT] = IMAGES.WOOD_TOWERN, sprite[SPRITE.ROOF] = [], sprite[SPRITE.ROOF][SPRITE.DAY] = CTI(create_roof(.59, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])), sprite[SPRITE.ROOF][SPRITE.NIGHT] = CTI(create_roof(.59, !0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])), sprite[SPRITE.ROOFS] = [sprite[SPRITE.ROOF]], sprite[SPRITE.ROOFS][1] = [], sprite[SPRITE.ROOFS][2] = [], sprite[SPRITE.ROOFS][1][SPRITE.DAY] = CTI(create_roof1(.59, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])), sprite[SPRITE.ROOFS][1][SPRITE.NIGHT] = CTI(create_roof1(.59, !0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])), sprite[SPRITE.ROOFS][2][SPRITE.DAY] = CTI(create_roof2(.59, !0, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])), sprite[SPRITE.ROOFS][2][SPRITE.NIGHT] = CTI(create_roof2(.59, !0, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])), sprite[SPRITE.WATERING_CAN_FULL] = [], sprite[SPRITE.WATERING_CAN_FULL][SPRITE.DAY] = CTI(create_rotated_img(3 - Math.PI / 2, create_watering_can(.6, !0, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]))), sprite[SPRITE.WATERING_CAN_FULL][SPRITE.NIGHT] = CTI(create_rotated_img(3 - Math.PI / 2, create_watering_can(.6, !0, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"]))), sprite[SPRITE.DEAD_BOX] = [], sprite[SPRITE.DEAD_BOX][SPRITE.DAY] = CTI(create_dead_box(.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0)), sprite[SPRITE.DEAD_BOX][SPRITE.NIGHT] = CTI(create_dead_box(.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0)), sprite[SPRITE.DEAD_BOX_UI] = CTI(create_dead_box_ui(.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"])), sprite[SPRITE.HURT_DEAD_BOX] = CTI(create_hurt_dead_box(.3, ["#BB0000"])), sprite[SPRITE.WINDMILL_FLOUR] = create_craft_button(1, [{
        f: create_flour,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], .25, ["#d2c77b", "#e7dc8f", "#bfb360"], .7), sprite[SPRITE.LAVA_HEART] = create_craft_button(1.5, [{
        f: create_dragon_heart,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#120202", "#750a0a", "#991616", "#120202"]
    }], .45, ["#5bbcc9", "#73d2df", "#4daab6"], .9), sprite[SPRITE.HEART_SYMBOL_HUD] = create_symbol_hud(.35, ["#072428", "#67A242", "#67A242"], 0), sprite[SPRITE.COLD_SYMBOL_HUD] = create_symbol_hud(.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1), sprite[SPRITE.FOOD_SYMBOL_HUD] = create_symbol_hud(.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2), sprite[SPRITE.WATER_SYMBOL_HUD] = create_symbol_hud(.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3), mobile ? sprite[SPRITE.LEADERBOARD] = CTI(create_leaderboard_mobile(1)) : sprite[SPRITE.LEADERBOARD] = CTI(create_leaderboard(1)), mobile ? sprite[SPRITE.GAUGES] = CTI(create_gauges_mobile(.75)) : sprite[SPRITE.GAUGES] = CTI(create_gauges(1)), mobile ? sprite[SPRITE.OXYGEN] = CTI(create_oxygen_gauges(.75)) : sprite[SPRITE.OXYGEN] = CTI(create_oxygen_gauges(1)), sprite[SPRITE.DELAY_HELMET] = CTI(create_viking_hat(.16, !0, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])), sprite[SPRITE.DELAY_WEAPON] = CTI(create_rotated_img(5.8, create_sword(.15, !0, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]))), sprite[SPRITE.COUNTER] = [], sprite[SPRITE.SLOT_NUMBER] = [];
    for (e = 0; e < WORLD.WITH_BAG + 2; e++) sprite[SPRITE.SLOT_NUMBER][e] = create_text(1, "" + (e + 1), 12, "#FFF");
    sprite[SPRITE.RECIPE_BUTTON] = [], sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"]))), sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1))), sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1))), sprite[SPRITE.CLOCK] = [], sprite[SPRITE.CLOCK].push(CTI(create_clock_day(.22))), sprite[SPRITE.CLOCK].push(CTI(create_clock_night(.22))), sprite[SPRITE.ARROW_CLOCK] = CTI(create_arrow_clock(.22)), sprite[SPRITE.OPTION_BUTTON] = [], sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(1.5, ["#795026", "#654320", "#eda80d"], 0))), sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1))), sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(1.5, ["#67441f", "#573819", "#9c6e08"], 1))), sprite[SPRITE.AUTO_FEED] = IMAGES.AUTO_FEED, sprite[SPRITE.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED, sprite[SPRITE.STOP_REGENERATION] = IMAGES.STOP_REGENERATION, sprite[SPRITE.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD, sprite[SPRITE.SHOW_SPECTATORS] = create_text(1, "Show spectators", 25, "#FFF", void 0, void 0, "#000", 5, 220), sprite[SPRITE.RECONNECT] = create_text(1, "Reconnecting...", 30, "#FFF")
}

function init_fake_world() {
    document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time], fake_world.items.push(new Item(ITEMS.FIRE, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1)), fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5)), fake_world.items.push(new Item(ITEMS.WORKBENCH, 0, 0, 0, 0, Math.PI / 4, 0, 0)), fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5))
}

function draw_fake_world() {
    var e = fake_world.time;
    if (sprite[SPRITE.HERB] && (ctx.drawImage(sprite[SPRITE.HERB][e][1], canw2 + 480, canh2 + 190), ctx.drawImage(sprite[SPRITE.HERB][e][2], canw2 + 180, canh2 - 430), ctx.drawImage(sprite[SPRITE.HERB][e][1], canw2 - 855, canh2 + 100), ctx.drawImage(sprite[SPRITE.HERB][e][0], canw2 - 550, canh2 - 300), ctx.drawImage(sprite[SPRITE.HERB][e][0], canw2 - 1020, canh2 - 520)), sprite[SPRITE.STONES] && (ctx.drawImage(sprite[SPRITE.STONES][e][1], canw2 - 80, canh2 - 640), ctx.drawImage(sprite[SPRITE.STONES][e][1], canw2 + 80, canh2 + 490), ctx.drawImage(sprite[SPRITE.STONES][e][2], canw2 - 180, canh2 - 700), ctx.drawImage(sprite[SPRITE.STONES][e][0], canw2 + 550, canh2 + 100), ctx.drawImage(sprite[SPRITE.STONES][e][1], canw2 + 450, canh2 + 300), ctx.drawImage(sprite[SPRITE.STONES][e][1], canw2 + 780, canh2 + 300), ctx.drawImage(sprite[SPRITE.STONES][e][2], canw2 + 980, canh2 + 200), ctx.drawImage(sprite[SPRITE.STONES][e][2], canw2 + 680, canh2 + 600), ctx.drawImage(sprite[SPRITE.STONES][e][2], canw2 - 380, canh2 + 100), ctx.drawImage(sprite[SPRITE.STONES][e][2], canw2 + 280, canh2 + 250)), sprite[SPRITE.PLANT] && (ctx.drawImage(sprite[SPRITE.PLANT][e][0], canw2 - 590, canh2), ctx.drawImage(sprite[SPRITE.PLANT][e][0], canw2 + 120, canh2 - 390), ctx.drawImage(sprite[SPRITE.PLANT][e][0], canw2 - 270, canh2 + 340)), sprite[SPRITE.TREE] && (ctx.drawImage(sprite[SPRITE.TREE][e][4], canw2 - 700, canh2 - 600), ctx.drawImage(sprite[SPRITE.TREE][e][2], canw2 - 970, canh2 - 250), ctx.drawImage(sprite[SPRITE.TREE][e][5], canw2 - 720, canh2 - 200), ctx.drawImage(sprite[SPRITE.TREE][e][2], canw2 - 1020, canh2 + 340), ctx.drawImage(sprite[SPRITE.TREE][e][0], canw2 - 1120, canh2 - 0), ctx.drawImage(sprite[SPRITE.TREE][e][1], canw2 - 650, canh2 - 330), ctx.drawImage(sprite[SPRITE.TREE][e][4], canw2 - 495, canh2 - 90), ctx.drawImage(sprite[SPRITE.TREE][e][3], canw2 - 520, canh2 + 340), ctx.drawImage(sprite[SPRITE.TREE][e][2], canw2 + 830, canh2 - 520)), sprite[SPRITE.FIR], user && world) {
        var t = user.cam.x,
            i = user.cam.y;
        user.cam.x = canw2, user.cam.y = canh2;
        var r = world.time;
        world.time = fake_world.time;
        var a, n = fake_world.items;
        n[2].x = 400, n[2].y = 100, n[2].draw(SPRITE.WORKBENCH), (a = n[1]).x = -500, a.y = 100, a.fruits[0].x = a.x - 20.5, a.fruits[0].y = a.y - 22.5, a.fruits[1].x = a.x - 35.5, a.fruits[1].y = a.y + 7.5, a.fruits[2].x = a.x + 7.5, a.fruits[2].y = a.y - 30, a.fruits[3].x = a.x + 22.5, a.fruits[3].y = a.y, a.fruits[4].x = a.x - 7.5, a.fruits[4].y = a.y + 14.5;
        for (var o = 0; o < a.info; o++) a.fruits[o].draw(SPRITE.FRUIT);
        (a = n[3]).x = 210, a.y = -290, a.fruits[0].x = a.x - 20.5, a.fruits[0].y = a.y - 22.5, a.fruits[1].x = a.x - 35.5, a.fruits[1].y = a.y + 7.5, a.fruits[2].x = a.x + 7.5, a.fruits[2].y = a.y - 30, a.fruits[3].x = a.x + 22.5, a.fruits[3].y = a.y, a.fruits[4].x = a.x - 7.5, a.fruits[4].y = a.y + 14.5;
        for (o = 0; o < a.info; o++) a.fruits[o].draw(SPRITE.FRUIT);
        n[0].x = 450, n[0].y = -100, n[0].draw_bg(SPRITE.WOOD_FIRE), n[0].draw_fg(), user.cam.x = t, user.cam.y = i, world.time = r
    }
}

function render_inventory() {
    sprite[SPRITE.INV_PUMPKIN] = create_craft_button(1, [{
        f: create_pumpkin,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
    }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CHEST_PUMPKIN] = sprite[SPRITE.INV_PUMPKIN], sprite[SPRITE.INV_CARROT] = [], sprite[SPRITE.INV_CARROT][0] = IMAGES.INV_CARROT_OUT, sprite[SPRITE.INV_CARROT][1] = IMAGES.INV_CARROT_IN, sprite[SPRITE.INV_CARROT][2] = IMAGES.INV_CARROT_CLICK, sprite[SPRITE.CHEST_CARROT] = sprite[SPRITE.INV_CARROT], sprite[SPRITE.INV_WATERMELON] = [], sprite[SPRITE.INV_WATERMELON][0] = IMAGES.INV_WATERMELON_OUT, sprite[SPRITE.INV_WATERMELON][1] = IMAGES.INV_WATERMELON_IN, sprite[SPRITE.INV_WATERMELON][2] = IMAGES.INV_WATERMELON_CLICK, sprite[SPRITE.CHEST_WATERMELON] = sprite[SPRITE.INV_WATERMELON], sprite[SPRITE.INV_ALOE_VERA] = [], sprite[SPRITE.INV_ALOE_VERA][0] = IMAGES.INV_ALOE_VERA_OUT, sprite[SPRITE.INV_ALOE_VERA][1] = IMAGES.INV_ALOE_VERA_IN, sprite[SPRITE.INV_ALOE_VERA][2] = IMAGES.INV_ALOE_VERA_CLICK, sprite[SPRITE.CHEST_ALOE_VERA] = sprite[SPRITE.INV_ALOE_VERA], sprite[SPRITE.INV_CACTUS] = [], sprite[SPRITE.INV_CACTUS][0] = IMAGES.INV_CACTUS_OUT, sprite[SPRITE.INV_CACTUS][1] = IMAGES.INV_CACTUS_IN, sprite[SPRITE.INV_CACTUS][2] = IMAGES.INV_CACTUS_CLICK, sprite[SPRITE.CHEST_CACTUS] = sprite[SPRITE.INV_CACTUS], sprite[SPRITE.INV_TOMATO] = [], sprite[SPRITE.INV_TOMATO][0] = IMAGES.INV_TOMATO_OUT, sprite[SPRITE.INV_TOMATO][1] = IMAGES.INV_TOMATO_IN, sprite[SPRITE.INV_TOMATO][2] = IMAGES.INV_TOMATO_CLICK, sprite[SPRITE.CHEST_TOMATO] = sprite[SPRITE.INV_TOMATO], sprite[SPRITE.INV_BOAT] = [], sprite[SPRITE.INV_BOAT][0] = IMAGES.INV_BOAT_OUT, sprite[SPRITE.INV_BOAT][1] = IMAGES.INV_BOAT_IN, sprite[SPRITE.INV_BOAT][2] = IMAGES.INV_BOAT_CLICK, sprite[SPRITE.CHEST_BOAT] = sprite[SPRITE.INV_BOAT], sprite[SPRITE.CRAFT_BOAT] = sprite[SPRITE.INV_BOAT], sprite[SPRITE.INV_MACHETE] = [], sprite[SPRITE.INV_MACHETE][0] = IMAGES.INV_MACHETE_OUT, sprite[SPRITE.INV_MACHETE][1] = IMAGES.INV_MACHETE_IN, sprite[SPRITE.INV_MACHETE][2] = IMAGES.INV_MACHETE_CLICK, sprite[SPRITE.CHEST_MACHETE] = sprite[SPRITE.INV_MACHETE], sprite[SPRITE.CRAFT_MACHETE] = sprite[SPRITE.INV_MACHETE], sprite[SPRITE.INV_SLED] = [], sprite[SPRITE.INV_SLED][0] = IMAGES.INV_SLED_OUT, sprite[SPRITE.INV_SLED][1] = IMAGES.INV_SLED_IN, sprite[SPRITE.INV_SLED][2] = IMAGES.INV_SLED_CLICK, sprite[SPRITE.CHEST_SLED] = sprite[SPRITE.INV_SLED], sprite[SPRITE.CRAFT_SLED] = sprite[SPRITE.INV_SLED], sprite[SPRITE.INV_PIRATE_HAT] = [], sprite[SPRITE.INV_PIRATE_HAT][0] = IMAGES.INV_PIRATE_HAT_OUT, sprite[SPRITE.INV_PIRATE_HAT][1] = IMAGES.INV_PIRATE_HAT_IN, sprite[SPRITE.INV_PIRATE_HAT][2] = IMAGES.INV_PIRATE_HAT_CLICK, sprite[SPRITE.CHEST_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT], sprite[SPRITE.CRAFT_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT], sprite[SPRITE.INV_FUR_MAMMOTH] = [], sprite[SPRITE.INV_FUR_MAMMOTH][0] = IMAGES.INV_FUR_MAMMOTH_OUT, sprite[SPRITE.INV_FUR_MAMMOTH][1] = IMAGES.INV_FUR_MAMMOTH_IN, sprite[SPRITE.INV_FUR_MAMMOTH][2] = IMAGES.INV_FUR_MAMMOTH_CLICK, sprite[SPRITE.CHEST_FUR_MAMMOTH] = sprite[SPRITE.INV_FUR_MAMMOTH], sprite[SPRITE.INV_FUR_HAT] = [], sprite[SPRITE.INV_FUR_HAT][0] = IMAGES.INV_FUR_HAT_OUT, sprite[SPRITE.INV_FUR_HAT][1] = IMAGES.INV_FUR_HAT_IN, sprite[SPRITE.INV_FUR_HAT][2] = IMAGES.INV_FUR_HAT_CLICK, sprite[SPRITE.CHEST_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT], sprite[SPRITE.CRAFT_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT], sprite[SPRITE.INV_WOOD_BOW] = [], sprite[SPRITE.INV_WOOD_BOW][0] = IMAGES.INV_WOOD_BOW_OUT, sprite[SPRITE.INV_WOOD_BOW][1] = IMAGES.INV_WOOD_BOW_IN, sprite[SPRITE.INV_WOOD_BOW][2] = IMAGES.INV_WOOD_BOW_CLICK, sprite[SPRITE.CHEST_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW], sprite[SPRITE.CRAFT_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW], sprite[SPRITE.INV_WOOD_ARROW] = [], sprite[SPRITE.INV_WOOD_ARROW][0] = IMAGES.INV_WOOD_ARROW_OUT, sprite[SPRITE.INV_WOOD_ARROW][1] = IMAGES.INV_WOOD_ARROW_IN, sprite[SPRITE.INV_WOOD_ARROW][2] = IMAGES.INV_WOOD_ARROW_CLICK, sprite[SPRITE.CHEST_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW], sprite[SPRITE.CRAFT_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW], sprite[SPRITE.INV_STONE_BOW] = [], sprite[SPRITE.INV_STONE_BOW][0] = IMAGES.INV_STONE_BOW_OUT, sprite[SPRITE.INV_STONE_BOW][1] = IMAGES.INV_STONE_BOW_IN, sprite[SPRITE.INV_STONE_BOW][2] = IMAGES.INV_STONE_BOW_CLICK, sprite[SPRITE.CHEST_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW], sprite[SPRITE.CRAFT_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW], sprite[SPRITE.INV_STONE_ARROW] = [], sprite[SPRITE.INV_STONE_ARROW][0] = IMAGES.INV_STONE_ARROW_OUT, sprite[SPRITE.INV_STONE_ARROW][1] = IMAGES.INV_STONE_ARROW_IN, sprite[SPRITE.INV_STONE_ARROW][2] = IMAGES.INV_STONE_ARROW_CLICK, sprite[SPRITE.CHEST_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW], sprite[SPRITE.CRAFT_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW], sprite[SPRITE.INV_GOLD_BOW] = [], sprite[SPRITE.INV_GOLD_BOW][0] = IMAGES.INV_GOLD_BOW_OUT, sprite[SPRITE.INV_GOLD_BOW][1] = IMAGES.INV_GOLD_BOW_IN, sprite[SPRITE.INV_GOLD_BOW][2] = IMAGES.INV_GOLD_BOW_CLICK, sprite[SPRITE.CHEST_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW], sprite[SPRITE.CRAFT_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW], sprite[SPRITE.INV_GOLD_ARROW] = [], sprite[SPRITE.INV_GOLD_ARROW][0] = IMAGES.INV_GOLD_ARROW_OUT, sprite[SPRITE.INV_GOLD_ARROW][1] = IMAGES.INV_GOLD_ARROW_IN, sprite[SPRITE.INV_GOLD_ARROW][2] = IMAGES.INV_GOLD_ARROW_CLICK, sprite[SPRITE.CHEST_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW], sprite[SPRITE.CRAFT_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW], sprite[SPRITE.INV_DIAMOND_BOW] = [], sprite[SPRITE.INV_DIAMOND_BOW][0] = IMAGES.INV_DIAMOND_BOW_OUT, sprite[SPRITE.INV_DIAMOND_BOW][1] = IMAGES.INV_DIAMOND_BOW_IN, sprite[SPRITE.INV_DIAMOND_BOW][2] = IMAGES.INV_DIAMOND_BOW_CLICK, sprite[SPRITE.CHEST_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW], sprite[SPRITE.CRAFT_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW], sprite[SPRITE.INV_DIAMOND_ARROW] = [], sprite[SPRITE.INV_DIAMOND_ARROW][0] = IMAGES.INV_DIAMOND_ARROW_OUT, sprite[SPRITE.INV_DIAMOND_ARROW][1] = IMAGES.INV_DIAMOND_ARROW_IN, sprite[SPRITE.INV_DIAMOND_ARROW][2] = IMAGES.INV_DIAMOND_ARROW_CLICK, sprite[SPRITE.CHEST_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW], sprite[SPRITE.CRAFT_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW], sprite[SPRITE.INV_AMETHYST_BOW] = [], sprite[SPRITE.INV_AMETHYST_BOW][0] = IMAGES.INV_AMETHYST_BOW_OUT, sprite[SPRITE.INV_AMETHYST_BOW][1] = IMAGES.INV_AMETHYST_BOW_IN, sprite[SPRITE.INV_AMETHYST_BOW][2] = IMAGES.INV_AMETHYST_BOW_CLICK, sprite[SPRITE.CHEST_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW], sprite[SPRITE.CRAFT_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW], sprite[SPRITE.INV_AMETHYST_ARROW] = [], sprite[SPRITE.INV_AMETHYST_ARROW][0] = IMAGES.INV_AMETHYST_ARROW_OUT, sprite[SPRITE.INV_AMETHYST_ARROW][1] = IMAGES.INV_AMETHYST_ARROW_IN, sprite[SPRITE.INV_AMETHYST_ARROW][2] = IMAGES.INV_AMETHYST_ARROW_CLICK, sprite[SPRITE.CHEST_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW], sprite[SPRITE.CRAFT_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW], sprite[SPRITE.INV_REIDITE_BOW] = [], sprite[SPRITE.INV_REIDITE_BOW][0] = IMAGES.INV_REIDITE_BOW_OUT, sprite[SPRITE.INV_REIDITE_BOW][1] = IMAGES.INV_REIDITE_BOW_IN, sprite[SPRITE.INV_REIDITE_BOW][2] = IMAGES.INV_REIDITE_BOW_CLICK, sprite[SPRITE.CHEST_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW], sprite[SPRITE.CRAFT_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW], sprite[SPRITE.INV_REIDITE_ARROW] = [], sprite[SPRITE.INV_REIDITE_ARROW][0] = IMAGES.INV_REIDITE_ARROW_OUT, sprite[SPRITE.INV_REIDITE_ARROW][1] = IMAGES.INV_REIDITE_ARROW_IN, sprite[SPRITE.INV_REIDITE_ARROW][2] = IMAGES.INV_REIDITE_ARROW_CLICK, sprite[SPRITE.CHEST_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW], sprite[SPRITE.CRAFT_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW], sprite[SPRITE.INV_DRAGON_BOW] = [], sprite[SPRITE.INV_DRAGON_BOW][0] = IMAGES.INV_DRAGON_BOW_OUT, sprite[SPRITE.INV_DRAGON_BOW][1] = IMAGES.INV_DRAGON_BOW_IN, sprite[SPRITE.INV_DRAGON_BOW][2] = IMAGES.INV_DRAGON_BOW_CLICK, sprite[SPRITE.CHEST_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW], sprite[SPRITE.CRAFT_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW], sprite[SPRITE.INV_DRAGON_ARROW] = [], sprite[SPRITE.INV_DRAGON_ARROW][0] = IMAGES.INV_DRAGON_ARROW_OUT, sprite[SPRITE.INV_DRAGON_ARROW][1] = IMAGES.INV_DRAGON_ARROW_IN, sprite[SPRITE.INV_DRAGON_ARROW][2] = IMAGES.INV_DRAGON_ARROW_CLICK, sprite[SPRITE.CHEST_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW], sprite[SPRITE.CRAFT_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW], sprite[SPRITE.INV_WOOD_SHIELD] = [], sprite[SPRITE.INV_WOOD_SHIELD][0] = IMAGES.INV_WOOD_SHIELD_OUT, sprite[SPRITE.INV_WOOD_SHIELD][1] = IMAGES.INV_WOOD_SHIELD_IN, sprite[SPRITE.INV_WOOD_SHIELD][2] = IMAGES.INV_WOOD_SHIELD_CLICK, sprite[SPRITE.CHEST_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD], sprite[SPRITE.CRAFT_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD], sprite[SPRITE.INV_STONE_SHIELD] = [], sprite[SPRITE.INV_STONE_SHIELD][0] = IMAGES.INV_STONE_SHIELD_OUT, sprite[SPRITE.INV_STONE_SHIELD][1] = IMAGES.INV_STONE_SHIELD_IN, sprite[SPRITE.INV_STONE_SHIELD][2] = IMAGES.INV_STONE_SHIELD_CLICK, sprite[SPRITE.CHEST_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD], sprite[SPRITE.CRAFT_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD], sprite[SPRITE.INV_GOLD_SHIELD] = [], sprite[SPRITE.INV_GOLD_SHIELD][0] = IMAGES.INV_GOLD_SHIELD_OUT, sprite[SPRITE.INV_GOLD_SHIELD][1] = IMAGES.INV_GOLD_SHIELD_IN, sprite[SPRITE.INV_GOLD_SHIELD][2] = IMAGES.INV_GOLD_SHIELD_CLICK, sprite[SPRITE.CHEST_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD], sprite[SPRITE.CRAFT_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD], sprite[SPRITE.INV_DIAMOND_SHIELD] = [], sprite[SPRITE.INV_DIAMOND_SHIELD][0] = IMAGES.INV_DIAMOND_SHIELD_OUT, sprite[SPRITE.INV_DIAMOND_SHIELD][1] = IMAGES.INV_DIAMOND_SHIELD_IN, sprite[SPRITE.INV_DIAMOND_SHIELD][2] = IMAGES.INV_DIAMOND_SHIELD_CLICK, sprite[SPRITE.CHEST_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD], sprite[SPRITE.CRAFT_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD], sprite[SPRITE.INV_AMETHYST_SHIELD] = [], sprite[SPRITE.INV_AMETHYST_SHIELD][0] = IMAGES.INV_AMETHYST_SHIELD_OUT, sprite[SPRITE.INV_AMETHYST_SHIELD][1] = IMAGES.INV_AMETHYST_SHIELD_IN, sprite[SPRITE.INV_AMETHYST_SHIELD][2] = IMAGES.INV_AMETHYST_SHIELD_CLICK, sprite[SPRITE.CHEST_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD], sprite[SPRITE.CRAFT_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD], sprite[SPRITE.INV_REIDITE_SHIELD] = [], sprite[SPRITE.INV_REIDITE_SHIELD][0] = IMAGES.INV_REIDITE_SHIELD_OUT, sprite[SPRITE.INV_REIDITE_SHIELD][1] = IMAGES.INV_REIDITE_SHIELD_IN, sprite[SPRITE.INV_REIDITE_SHIELD][2] = IMAGES.INV_REIDITE_SHIELD_CLICK, sprite[SPRITE.CHEST_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD], sprite[SPRITE.CRAFT_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD], sprite[SPRITE.INV_FLOWER_HAT] = [], sprite[SPRITE.INV_FLOWER_HAT][0] = IMAGES.INV_FLOWER_HAT_OUT, sprite[SPRITE.INV_FLOWER_HAT][1] = IMAGES.INV_FLOWER_HAT_IN, sprite[SPRITE.INV_FLOWER_HAT][2] = IMAGES.INV_FLOWER_HAT_CLICK, sprite[SPRITE.CHEST_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT], sprite[SPRITE.CRAFT_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT], sprite[SPRITE.INV_SANDWORM_JUICE] = [], sprite[SPRITE.INV_SANDWORM_JUICE][0] = IMAGES.INV_SANDWORM_JUICE_OUT, sprite[SPRITE.INV_SANDWORM_JUICE][1] = IMAGES.INV_SANDWORM_JUICE_IN, sprite[SPRITE.INV_SANDWORM_JUICE][2] = IMAGES.INV_SANDWORM_JUICE_CLICK, sprite[SPRITE.CHEST_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE], sprite[SPRITE.CRAFT_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE], sprite[SPRITE.INV_GARLIC] = create_craft_button(1, [{
        f: create_garlic,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
    }], .22, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CHEST_GARLIC] = sprite[SPRITE.INV_GARLIC], sprite[SPRITE.INV_THORNBUSH] = create_craft_button(1, [{
        f: create_brambles,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
    }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CHEST_THORNBUSH] = sprite[SPRITE.INV_THORNBUSH], sprite[SPRITE.INV_WINDMILL] = create_craft_button(1, [{
        f: create_windmill,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
        f: create_windmill_wing,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }, {
        f: create_windmill_head,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_WINDMILL] = sprite[SPRITE.INV_WINDMILL], sprite[SPRITE.INV_WILD_WHEAT] = create_craft_button(1, [{
        f: create_wheat,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
    }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.INV_SIGN] = create_craft_button(1, [{
        f: create_sign,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
    }], .14, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_SIGN] = sprite[SPRITE.INV_SIGN], sprite[SPRITE.INV_WHEAT_SEED] = create_craft_button(1, [{
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED], sprite[SPRITE.INV_SEED] = create_craft_button(1, [{
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"]
    }], .7, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_SEED] = sprite[SPRITE.INV_SEED], sprite[SPRITE.INV_PUMPKIN_SEED] = create_craft_button(1, [{
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED], sprite[SPRITE.INV_GARLIC_SEED] = create_craft_button(1, [{
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED], sprite[SPRITE.INV_THORNBUSH_SEED] = create_craft_button(1, [{
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED], sprite[SPRITE.INV_CARROT_SEED] = create_craft_button(1, [{
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c98e2f", "#a36b11"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED], sprite[SPRITE.CHEST_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED], sprite[SPRITE.INV_WATERMELON_SEED] = create_craft_button(1, [{
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#13a56d", "#098a58"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED], sprite[SPRITE.CHEST_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED], sprite[SPRITE.INV_ALOE_VERA_SEED] = create_craft_button(1, [{
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a8214", "#4a9c1e"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED], sprite[SPRITE.CHEST_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED], sprite[SPRITE.INV_TOMATO_SEED] = create_craft_button(1, [{
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#b22419", "#99110e"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED], sprite[SPRITE.CHEST_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED], sprite[SPRITE.INV_FIRE] = create_craft_button(1, [{
        f: create_wood_fire,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"]
    }, {
        f: create_fire,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_FIRE] = sprite[SPRITE.INV_FIRE], sprite[SPRITE.INV_BIG_FIRE] = create_craft_button(1, [{
        f: create_big_fire_wood,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
    }, {
        f: create_fire,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"]
    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE], sprite[SPRITE.INV_PIRATE_SWORD] = create_craft_button(1, [{
        f: create_pirate_sword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
    }], .1, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_SUGAR_CAN] = create_craft_button(1, [{
        f: create_sugar_can,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
    }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_SWORD_WOOD] = create_craft_button(1, [{
        f: create_sword_wood,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_SWORD] = create_craft_button(1, [{
        f: create_stonesword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_SWORD_GOLD] = create_craft_button(1, [{
        f: create_goldsword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_SWORD_DIAMOND] = create_craft_button(1, [{
        f: create_diamondsword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_SWORD_AMETHYST] = create_craft_button(1, [{
        f: create_amesword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_PICK_WOOD] = create_craft_button(1, [{
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_PICK] = create_craft_button(1, [{
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_PICK_GOLD] = create_craft_button(1, [{
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_PICK_DIAMOND] = create_craft_button(1, [{
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_PICK_AMETHYST] = create_craft_button(1, [{
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_PICK_REIDITE] = [], sprite[SPRITE.INV_PICK_REIDITE][0] = IMAGES.INV_PICK_REIDITE_OUT, sprite[SPRITE.INV_PICK_REIDITE][1] = IMAGES.INV_PICK_REIDITE_IN, sprite[SPRITE.INV_PICK_REIDITE][2] = IMAGES.INV_PICK_REIDITE_CLICK, sprite[SPRITE.CRAFT_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE], sprite[SPRITE.CHEST_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE], sprite[SPRITE.INV_STONE] = create_craft_button(1, [{
        f: create_stone,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"]
    }], .23, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_GOLD] = create_craft_button(1, [{
        f: create_gold,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"]
    }], .43, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_DIAMOND] = create_craft_button(1, [{
        f: create_diamond,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"]
    }], .33, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_WOOD] = create_craft_button(1, [{
        f: create_wood_fire,
        x: 0,
        y: -5,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"]
    }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.CRAFT_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD], sprite[SPRITE.CRAFT_SWORD] = sprite[SPRITE.INV_SWORD], sprite[SPRITE.CRAFT_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD], sprite[SPRITE.CRAFT_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND], sprite[SPRITE.CRAFT_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST], sprite[SPRITE.CRAFT_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD], sprite[SPRITE.CRAFT_PICK] = sprite[SPRITE.INV_PICK], sprite[SPRITE.CRAFT_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD], sprite[SPRITE.CRAFT_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND], sprite[SPRITE.CRAFT_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST], sprite[SPRITE.INV_PLANT] = create_craft_button(1, [{
        f: create_food_plant,
        x: 0,
        y: 0,
        a: 1,
        r: 0
    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.INV_WORK] = create_craft_button(1, [{
        f: create_workbench,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
    }], .45, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_WORK] = sprite[SPRITE.INV_WORK], sprite[SPRITE.INV_STONE_WALL] = create_craft_button(1, [{
        f: create_wall_stone,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL], sprite[SPRITE.INV_DIAMOND_WALL] = create_craft_button(1, [{
        f: create_wall_diamond,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL], sprite[SPRITE.INV_AMETHYST_WALL] = create_craft_button(1, [{
        f: create_wall_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL], sprite[SPRITE.INV_GOLD_WALL] = create_craft_button(1, [{
        f: create_wall_gold,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], .4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL], sprite[SPRITE.INV_WALL] = create_craft_button(1, [{
        f: create_wall,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], .45, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_WALL] = sprite[SPRITE.INV_WALL], sprite[SPRITE.INV_SPIKE] = create_craft_button(1, [{
        f: create_spike,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_SPIKE] = sprite[SPRITE.INV_SPIKE], sprite[SPRITE.INV_GOLD_SPIKE] = create_craft_button(1, [{
        f: create_spike_gold,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE], sprite[SPRITE.INV_DIAMOND_SPIKE] = create_craft_button(1, [{
        f: create_spike_gold,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE], sprite[SPRITE.INV_STONE_SPIKE] = create_craft_button(1, [{
        f: create_spike_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE], sprite[SPRITE.INV_AMETHYST_SPIKE] = create_craft_button(1, [{
        f: create_spike_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE], sprite[SPRITE.INV_DOOR_WOOD_CLOSE] = create_craft_button(1, [{
        f: create_door_wood,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE], sprite[SPRITE.INV_DOOR_STONE_CLOSE] = create_craft_button(1, [{
        f: create_door_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE], sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE] = create_craft_button(1, [{
        f: create_door_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE], sprite[SPRITE.INV_DOOR_GOLD_CLOSE] = create_craft_button(1, [{
        f: create_door_gold,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE], sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE] = create_craft_button(1, [{
        f: create_door_diamond,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE], sprite[SPRITE.INV_CHEST] = create_craft_button(1, [{
        f: create_chest,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_CHEST] = sprite[SPRITE.INV_CHEST], sprite[SPRITE.INV_MEAT] = create_craft_button(1, [{
        f: create_meat,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.INV_COOKED_MEAT] = create_craft_button(1, [{
        f: create_meat,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
    }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT], sprite[SPRITE.INV_CORD] = create_craft_button(1, [{
        f: create_cord,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"]
    }], .9, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.INV_BLUE_CORD] = create_craft_button(1, [{
        f: create_cord,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"]
    }], .9, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD], sprite[SPRITE.INV_FUR] = create_craft_button(1, [{
        f: create_fur,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"]
    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_FUR_BOAR] = create_craft_button(1, [{
        f: create_fur,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"]
    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_SPECIAL_FUR] = create_craft_button(1, [{
        f: create_special_fur,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
    }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_SPECIAL_FUR_2] = create_craft_button(1, [{
        f: create_special_fur,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
    }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_KRAKEN_SKIN] = create_craft_button(1, [{
        f: create_fur,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"]
    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_FUR_WOLF] = create_craft_button(1, [{
        f: create_fur,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#231f20", "#b6222a"]
    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_FUR_WINTER] = create_craft_button(1, [{
        f: create_fur,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"]
    }], .5, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_EARMUFFS] = create_craft_button(1, [{
        f: create_earmuff,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS], sprite[SPRITE.INV_COAT] = create_craft_button(1, [{
        f: create_coat,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_COAT] = sprite[SPRITE.INV_COAT], sprite[SPRITE.INV_CAP_SCARF] = create_craft_button(1, [{
        f: create_cap_scarf,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF], sprite[SPRITE.INV_CHRISTMAS_HAT] = create_craft_button(1, [{
        f: create_christmas_hat,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CHEST_CHRISTMAS_HAT] = sprite[SPRITE.INV_CHRISTMAS_HAT], sprite[SPRITE.INV_ELF_HAT] = create_craft_button(1, [{
        f: create_elf_hat,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CHEST_ELF_HAT] = sprite[SPRITE.INV_ELF_HAT], sprite[SPRITE.INV_BANDAGE] = create_craft_button(1, [{
        f: create_bandage,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"]
    }], .35, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_BANDAGE] = sprite[SPRITE.INV_BANDAGE], sprite[SPRITE.INV_BAG] = [], sprite[SPRITE.INV_BAG][0] = IMAGES.INV_BAG_OUT, sprite[SPRITE.INV_BAG][1] = IMAGES.INV_BAG_IN, sprite[SPRITE.INV_BAG][2] = IMAGES.INV_BAG_CLICK, sprite[SPRITE.CRAFT_BAG] = sprite[SPRITE.INV_BAG], sprite[SPRITE.INV_PITCHFORK] = [], sprite[SPRITE.INV_PITCHFORK][0] = IMAGES.INV_PITCHFORK_OUT, sprite[SPRITE.INV_PITCHFORK][1] = IMAGES.INV_PITCHFORK_IN, sprite[SPRITE.INV_PITCHFORK][2] = IMAGES.INV_PITCHFORK_CLICK, sprite[SPRITE.CRAFT_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK], sprite[SPRITE.CHEST_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK], sprite[SPRITE.INV_PITCHFORK2] = [], sprite[SPRITE.INV_PITCHFORK2][0] = IMAGES.INV_PITCHFORK2_OUT, sprite[SPRITE.INV_PITCHFORK2][1] = IMAGES.INV_PITCHFORK2_IN, sprite[SPRITE.INV_PITCHFORK2][2] = IMAGES.INV_PITCHFORK2_CLICK, sprite[SPRITE.CRAFT_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2], sprite[SPRITE.CHEST_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2], sprite[SPRITE.INV_PITCHFORK_PART] = [], sprite[SPRITE.INV_PITCHFORK_PART][0] = IMAGES.INV_PITCHFORK_PART_CLICK, sprite[SPRITE.INV_PITCHFORK_PART][1] = IMAGES.INV_PITCHFORK_PART_CLICK, sprite[SPRITE.INV_PITCHFORK_PART][2] = IMAGES.INV_PITCHFORK_PART_CLICK, sprite[SPRITE.CHEST_PITCHFORK_PART] = sprite[SPRITE.INV_PITCHFORK_PART], sprite[SPRITE.INV_PILOT_HELMET] = [], sprite[SPRITE.INV_PILOT_HELMET][0] = IMAGES.INV_PILOT_HELMET_OUT, sprite[SPRITE.INV_PILOT_HELMET][1] = IMAGES.INV_PILOT_HELMET_IN, sprite[SPRITE.INV_PILOT_HELMET][2] = IMAGES.INV_PILOT_HELMET_CLICK, sprite[SPRITE.CRAFT_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET], sprite[SPRITE.CHEST_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET], sprite[SPRITE.INV_PILOT_GLASSES] = [], sprite[SPRITE.INV_PILOT_GLASSES][0] = IMAGES.INV_PILOT_GLASSES_CLICK, sprite[SPRITE.INV_PILOT_GLASSES][1] = IMAGES.INV_PILOT_GLASSES_CLICK, sprite[SPRITE.INV_PILOT_GLASSES][2] = IMAGES.INV_PILOT_GLASSES_CLICK, sprite[SPRITE.CHEST_PILOT_GLASSES] = sprite[SPRITE.INV_PILOT_GLASSES], sprite[SPRITE.INV_WOOD_TOWER] = [], sprite[SPRITE.INV_WOOD_TOWER][0] = IMAGES.INV_WOOD_TOWER_OUT, sprite[SPRITE.INV_WOOD_TOWER][1] = IMAGES.INV_WOOD_TOWER_IN, sprite[SPRITE.INV_WOOD_TOWER][2] = IMAGES.INV_WOOD_TOWER_CLICK, sprite[SPRITE.CRAFT_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER], sprite[SPRITE.CHEST_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER], sprite[SPRITE.INV_WOOD_DOOR_SPIKE] = [], sprite[SPRITE.INV_WOOD_DOOR_SPIKE][0] = IMAGES.INV_WOOD_DOOR_SPIKE_OUT, sprite[SPRITE.INV_WOOD_DOOR_SPIKE][1] = IMAGES.INV_WOOD_DOOR_SPIKE_IN, sprite[SPRITE.INV_WOOD_DOOR_SPIKE][2] = IMAGES.INV_WOOD_DOOR_SPIKE_CLICK, sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE], sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE], sprite[SPRITE.INV_STONE_DOOR_SPIKE] = [], sprite[SPRITE.INV_STONE_DOOR_SPIKE][0] = IMAGES.INV_STONE_DOOR_SPIKE_OUT, sprite[SPRITE.INV_STONE_DOOR_SPIKE][1] = IMAGES.INV_STONE_DOOR_SPIKE_IN, sprite[SPRITE.INV_STONE_DOOR_SPIKE][2] = IMAGES.INV_STONE_DOOR_SPIKE_CLICK, sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE], sprite[SPRITE.CHEST_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE], sprite[SPRITE.INV_GOLD_DOOR_SPIKE] = [], sprite[SPRITE.INV_GOLD_DOOR_SPIKE][0] = IMAGES.INV_GOLD_DOOR_SPIKE_OUT, sprite[SPRITE.INV_GOLD_DOOR_SPIKE][1] = IMAGES.INV_GOLD_DOOR_SPIKE_IN, sprite[SPRITE.INV_GOLD_DOOR_SPIKE][2] = IMAGES.INV_GOLD_DOOR_SPIKE_CLICK, sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE], sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE], sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE] = [], sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][0] = IMAGES.INV_DIAMOND_DOOR_SPIKE_OUT, sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][1] = IMAGES.INV_DIAMOND_DOOR_SPIKE_IN, sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][2] = IMAGES.INV_DIAMOND_DOOR_SPIKE_CLICK, sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE], sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE], sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE] = [], sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][0] = IMAGES.INV_AMETHYST_DOOR_SPIKE_OUT, sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][1] = IMAGES.INV_AMETHYST_DOOR_SPIKE_IN, sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][2] = IMAGES.INV_AMETHYST_DOOR_SPIKE_CLICK, sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE], sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE], sprite[SPRITE.INV_REIDITE_DOOR_SPIKE] = [], sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][0] = IMAGES.INV_REIDITE_DOOR_SPIKE_OUT, sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][1] = IMAGES.INV_REIDITE_DOOR_SPIKE_IN, sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][2] = IMAGES.INV_REIDITE_DOOR_SPIKE_CLICK, sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE], sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE], sprite[SPRITE.INV_REIDITE_DOOR] = [], sprite[SPRITE.INV_REIDITE_DOOR][0] = IMAGES.INV_REIDITE_DOOR_OUT, sprite[SPRITE.INV_REIDITE_DOOR][1] = IMAGES.INV_REIDITE_DOOR_IN, sprite[SPRITE.INV_REIDITE_DOOR][2] = IMAGES.INV_REIDITE_DOOR_CLICK, sprite[SPRITE.CRAFT_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR], sprite[SPRITE.CHEST_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR], sprite[SPRITE.INV_REIDITE_SPIKE] = [], sprite[SPRITE.INV_REIDITE_SPIKE][0] = IMAGES.INV_REIDITE_SPIKE_OUT, sprite[SPRITE.INV_REIDITE_SPIKE][1] = IMAGES.INV_REIDITE_SPIKE_IN, sprite[SPRITE.INV_REIDITE_SPIKE][2] = IMAGES.INV_REIDITE_SPIKE_CLICK, sprite[SPRITE.CRAFT_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE], sprite[SPRITE.CHEST_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE], sprite[SPRITE.INV_REIDITE_WALL] = [], sprite[SPRITE.INV_REIDITE_WALL][0] = IMAGES.INV_REIDITE_WALL_OUT, sprite[SPRITE.INV_REIDITE_WALL][1] = IMAGES.INV_REIDITE_WALL_IN, sprite[SPRITE.INV_REIDITE_WALL][2] = IMAGES.INV_REIDITE_WALL_CLICK, sprite[SPRITE.CRAFT_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL], sprite[SPRITE.CHEST_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL], sprite[SPRITE.INV_PENGUIN_FEATHER] = [], sprite[SPRITE.INV_PENGUIN_FEATHER][0] = IMAGES.INV_PENGUIN_FEATHER, sprite[SPRITE.INV_PENGUIN_FEATHER][1] = IMAGES.INV_PENGUIN_FEATHER, sprite[SPRITE.INV_PENGUIN_FEATHER][2] = IMAGES.INV_PENGUIN_FEATHER, sprite[SPRITE.CRAFT_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER], sprite[SPRITE.CHEST_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER], sprite[SPRITE.INV_HAWK_FEATHER] = [], sprite[SPRITE.INV_HAWK_FEATHER][0] = IMAGES.INV_HAWK_FEATHER, sprite[SPRITE.INV_HAWK_FEATHER][1] = IMAGES.INV_HAWK_FEATHER, sprite[SPRITE.INV_HAWK_FEATHER][2] = IMAGES.INV_HAWK_FEATHER, sprite[SPRITE.CRAFT_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER], sprite[SPRITE.CHEST_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER], sprite[SPRITE.INV_VULTURE_FEATHER] = [], sprite[SPRITE.INV_VULTURE_FEATHER][0] = IMAGES.INV_VULTURE_FEATHER, sprite[SPRITE.INV_VULTURE_FEATHER][1] = IMAGES.INV_VULTURE_FEATHER, sprite[SPRITE.INV_VULTURE_FEATHER][2] = IMAGES.INV_VULTURE_FEATHER, sprite[SPRITE.CRAFT_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER], sprite[SPRITE.CHEST_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER], sprite[SPRITE.INV_EMERALD] = [], sprite[SPRITE.INV_EMERALD][0] = IMAGES.INV_EMERALD, sprite[SPRITE.INV_EMERALD][1] = IMAGES.INV_EMERALD, sprite[SPRITE.INV_EMERALD][2] = IMAGES.INV_EMERALD, sprite[SPRITE.CHEST_EMERALD] = sprite[SPRITE.INV_EMERALD], sprite[SPRITE.INV_SADDLE] = [], sprite[SPRITE.INV_SADDLE][0] = IMAGES.INV_SADDLE_OUT, sprite[SPRITE.INV_SADDLE][1] = IMAGES.INV_SADDLE_IN, sprite[SPRITE.INV_SADDLE][2] = IMAGES.INV_SADDLE_CLICK, sprite[SPRITE.CRAFT_SADDLE] = sprite[SPRITE.INV_SADDLE], sprite[SPRITE.CHEST_SADDLE] = sprite[SPRITE.INV_SADDLE], sprite[SPRITE.INV_WAND1] = [], sprite[SPRITE.INV_WAND1][0] = IMAGES.INV_WAND1_OUT, sprite[SPRITE.INV_WAND1][1] = IMAGES.INV_WAND1_IN, sprite[SPRITE.INV_WAND1][2] = IMAGES.INV_WAND1_CLICK, sprite[SPRITE.CRAFT_WAND1] = sprite[SPRITE.INV_WAND1], sprite[SPRITE.CHEST_WAND1] = sprite[SPRITE.INV_WAND1], sprite[SPRITE.INV_WAND2] = [], sprite[SPRITE.INV_WAND2][0] = IMAGES.INV_WAND2_OUT, sprite[SPRITE.INV_WAND2][1] = IMAGES.INV_WAND2_IN, sprite[SPRITE.INV_WAND2][2] = IMAGES.INV_WAND2_CLICK, sprite[SPRITE.CRAFT_WAND2] = sprite[SPRITE.INV_WAND2], sprite[SPRITE.CHEST_WAND2] = sprite[SPRITE.INV_WAND2], sprite[SPRITE.INV_MOUNT_BOAR] = [], sprite[SPRITE.INV_MOUNT_BOAR][0] = IMAGES.INV_MOUNT_BOAR_OUT, sprite[SPRITE.INV_MOUNT_BOAR][1] = IMAGES.INV_MOUNT_BOAR_IN, sprite[SPRITE.INV_MOUNT_BOAR][2] = IMAGES.INV_MOUNT_BOAR_CLICK, sprite[SPRITE.CRAFT_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR], sprite[SPRITE.CHEST_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR], sprite[SPRITE.INV_CRAB_BOSS] = [], sprite[SPRITE.INV_CRAB_BOSS][0] = IMAGES.INV_CRAB_BOSS_OUT, sprite[SPRITE.INV_CRAB_BOSS][1] = IMAGES.INV_CRAB_BOSS_IN, sprite[SPRITE.INV_CRAB_BOSS][2] = IMAGES.INV_CRAB_BOSS_CLICK, sprite[SPRITE.CRAFT_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS], sprite[SPRITE.CHEST_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS], sprite[SPRITE.INV_HAWK] = [], sprite[SPRITE.INV_HAWK][0] = IMAGES.INV_HAWK_OUT, sprite[SPRITE.INV_HAWK][1] = IMAGES.INV_HAWK_IN, sprite[SPRITE.INV_HAWK][2] = IMAGES.INV_HAWK_CLICK, sprite[SPRITE.CRAFT_HAWK] = sprite[SPRITE.INV_HAWK], sprite[SPRITE.CHEST_HAWK] = sprite[SPRITE.INV_HAWK], sprite[SPRITE.INV_VULTURE] = [], sprite[SPRITE.INV_VULTURE][0] = IMAGES.INV_VULTURE_OUT, sprite[SPRITE.INV_VULTURE][1] = IMAGES.INV_VULTURE_IN, sprite[SPRITE.INV_VULTURE][2] = IMAGES.INV_VULTURE_CLICK, sprite[SPRITE.CRAFT_VULTURE] = sprite[SPRITE.INV_VULTURE], sprite[SPRITE.CHEST_VULTURE] = sprite[SPRITE.INV_VULTURE], sprite[SPRITE.INV_TURBAN1] = [], sprite[SPRITE.INV_TURBAN1][0] = IMAGES.INV_TURBAN1_OUT, sprite[SPRITE.INV_TURBAN1][1] = IMAGES.INV_TURBAN1_IN, sprite[SPRITE.INV_TURBAN1][2] = IMAGES.INV_TURBAN1_CLICK, sprite[SPRITE.CRAFT_TURBAN1] = sprite[SPRITE.INV_TURBAN1], sprite[SPRITE.CHEST_TURBAN1] = sprite[SPRITE.INV_TURBAN1], sprite[SPRITE.INV_TURBAN2] = [], sprite[SPRITE.INV_TURBAN2][0] = IMAGES.INV_TURBAN2_OUT, sprite[SPRITE.INV_TURBAN2][1] = IMAGES.INV_TURBAN2_IN, sprite[SPRITE.INV_TURBAN2][2] = IMAGES.INV_TURBAN2_CLICK, sprite[SPRITE.CRAFT_TURBAN2] = sprite[SPRITE.INV_TURBAN2], sprite[SPRITE.CHEST_TURBAN2] = sprite[SPRITE.INV_TURBAN2], sprite[SPRITE.INV_PLANE] = [], sprite[SPRITE.INV_PLANE][0] = IMAGES.INV_PLANE_OUT, sprite[SPRITE.INV_PLANE][1] = IMAGES.INV_PLANE_IN, sprite[SPRITE.INV_PLANE][2] = IMAGES.INV_PLANE_CLICK, sprite[SPRITE.CRAFT_PLANE] = sprite[SPRITE.INV_PLANE], sprite[SPRITE.CHEST_PLANE] = sprite[SPRITE.INV_PLANE], sprite[SPRITE.INV_BABY_DRAGON] = [], sprite[SPRITE.INV_BABY_DRAGON][0] = IMAGES.INV_BABY_DRAGON_OUT, sprite[SPRITE.INV_BABY_DRAGON][1] = IMAGES.INV_BABY_DRAGON_IN, sprite[SPRITE.INV_BABY_DRAGON][2] = IMAGES.INV_BABY_DRAGON_CLICK, sprite[SPRITE.CRAFT_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON], sprite[SPRITE.CHEST_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON], sprite[SPRITE.INV_BABY_MAMMOTH] = [], sprite[SPRITE.INV_BABY_MAMMOTH][0] = IMAGES.INV_BABY_MAMMOTH_OUT, sprite[SPRITE.INV_BABY_MAMMOTH][1] = IMAGES.INV_BABY_MAMMOTH_IN, sprite[SPRITE.INV_BABY_MAMMOTH][2] = IMAGES.INV_BABY_MAMMOTH_CLICK, sprite[SPRITE.CRAFT_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH], sprite[SPRITE.CHEST_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH], sprite[SPRITE.INV_BABY_LAVA] = [], sprite[SPRITE.INV_BABY_LAVA][0] = IMAGES.INV_BABY_LAVA_OUT, sprite[SPRITE.INV_BABY_LAVA][1] = IMAGES.INV_BABY_LAVA_IN, sprite[SPRITE.INV_BABY_LAVA][2] = IMAGES.INV_BABY_LAVA_CLICK, sprite[SPRITE.CRAFT_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA], sprite[SPRITE.CHEST_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA], sprite[SPRITE.INV_BREAD_OVEN] = create_craft_button(1, [{
        f: create_bread_oven,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
    }, {
        f: create_bread_light_up,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"]
    }], .14, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN], sprite[SPRITE.INV_FURNACE] = create_craft_button(1, [{
        f: create_furnace_on,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
    }], .18, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_FURNACE] = sprite[SPRITE.INV_FURNACE], sprite[SPRITE.INV_BED] = create_craft_button(1, [{
        f: create_bed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
    }], .32, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_BED] = sprite[SPRITE.INV_BED], sprite[SPRITE.CHEST_BED] = sprite[SPRITE.INV_BED], sprite[SPRITE.INV_CRAB_LOOT] = create_craft_button(1, [{
        f: create_crab_loot,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
    }], .17, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CHEST_CRAB_LOOT] = sprite[SPRITE.INV_CRAB_LOOT], sprite[SPRITE.INV_CRAB_SPEAR] = create_craft_button(1, [{
        f: create_crab_spear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR], sprite[SPRITE.CHEST_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR], sprite[SPRITE.INV_WOOD_SPEAR] = create_craft_button(1, [{
        f: create_wood_spear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR], sprite[SPRITE.INV_SPEAR] = create_craft_button(1, [{
        f: create_stonespear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_SPEAR] = sprite[SPRITE.INV_SPEAR], sprite[SPRITE.INV_GOLD_SPEAR] = create_craft_button(1, [{
        f: create_goldspear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR], sprite[SPRITE.INV_DIAMOND_SPEAR] = create_craft_button(1, [{
        f: create_diamondspear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR], sprite[SPRITE.INV_AMETHYST_SPEAR] = create_craft_button(1, [{
        f: create_amespear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR], sprite[SPRITE.INV_DRAGON_SPEAR] = create_craft_button(1, [{
        f: create_dragon_spear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
    }], .38, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR], sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR], sprite[SPRITE.INV_HAMMER] = create_craft_button(1, [{
        f: create_hammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_HAMMER] = sprite[SPRITE.INV_HAMMER], sprite[SPRITE.INV_SPANNER] = create_craft_button(1, [{
        f: create_spanner,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061"]
    }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_SPANNER] = sprite[SPRITE.INV_SPANNER], sprite[SPRITE.INV_SUPER_HAMMER] = create_craft_button(1, [{
        f: create_superhammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER], sprite[SPRITE.INV_HAMMER_GOLD] = create_craft_button(1, [{
        f: create_hammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD], sprite[SPRITE.INV_HAMMER_DIAMOND] = create_craft_button(1, [{
        f: create_hammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND], sprite[SPRITE.INV_HAMMER_AMETHYST] = create_craft_button(1, [{
        f: create_hammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST], sprite[SPRITE.INV_HAMMER_REIDITE] = [], sprite[SPRITE.INV_HAMMER_REIDITE][0] = IMAGES.INV_HAMMER_REIDITE_OUT, sprite[SPRITE.INV_HAMMER_REIDITE][1] = IMAGES.INV_HAMMER_REIDITE_IN, sprite[SPRITE.INV_HAMMER_REIDITE][2] = IMAGES.INV_HAMMER_REIDITE_CLICK, sprite[SPRITE.CHEST_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE], sprite[SPRITE.CRAFT_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE], sprite[SPRITE.INV_EMERALD_MACHINE] = [], sprite[SPRITE.INV_EMERALD_MACHINE][0] = IMAGES.INV_EMERALD_MACHINE_OUT, sprite[SPRITE.INV_EMERALD_MACHINE][1] = IMAGES.INV_EMERALD_MACHINE_IN, sprite[SPRITE.INV_EMERALD_MACHINE][2] = IMAGES.INV_EMERALD_MACHINE_CLICK, sprite[SPRITE.CHEST_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE], sprite[SPRITE.CRAFT_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE], sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE] = [], sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][0] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_OUT, sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][1] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_IN, sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][2] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_CLICK, sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE], sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE], sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD] = [], sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][0] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_OUT, sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][1] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_IN, sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][2] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_CLICK, sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD], sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD], sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND] = [], sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][0] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_OUT, sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][1] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_IN, sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][2] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_CLICK, sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND], sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND], sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST] = [], sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][0] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_OUT, sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][1] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_IN, sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][2] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK, sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST], sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST], sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE] = [], sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][0] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_OUT, sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][1] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_IN, sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][2] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_CLICK, sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE], sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE], sprite[SPRITE.INV_LOCK] = create_craft_button(1, [{
        f: create_lock,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
    }], .8, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.CRAFT_LOCK] = sprite[SPRITE.INV_LOCK], sprite[SPRITE.INV_LOCKPICK] = create_craft_button(1, [{
        f: create_lockpick,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 5,
        c: ["#141414", "#c4a23a", "#816511"]
    }], .08, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.CRAFT_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK], sprite[SPRITE.INV_DRAGON_HEART] = create_craft_button(1, [{
        f: create_dragon_heart,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"]
    }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7), sprite[SPRITE.INV_LAVA_HEART] = create_craft_button(1, [{
        f: create_dragon_heart,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"]
    }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .7), sprite[SPRITE.INV_RESURRECTION] = create_craft_button(1, [{
        f: create_resurrection_ground,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba"]
    }, {
        f: create_resurrection,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
    }, {
        f: create_resurrection_rotate,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0"]
    }, {
        f: create_resurrection_hole,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION], sprite[SPRITE.INV_TOTEM] = create_craft_button(1, [{
        f: create_headtotem,
        x: 45,
        y: 70,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_TOTEM] = sprite[SPRITE.INV_TOTEM], sprite[SPRITE.INV_AMETHYST_HELMET] = create_craft_button(1, [{
        f: create_amethyst_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
    }], .52, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET], sprite[SPRITE.INV_WINTER_HOOD] = create_craft_button(1, [{
        f: create_winter_hood,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
    }], .12, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD], sprite[SPRITE.INV_HOOD] = create_craft_button(1, [{
        f: create_hood,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"]
    }], .25, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_HOOD] = sprite[SPRITE.INV_HOOD], sprite[SPRITE.INV_WINTER_PEASANT] = create_craft_button(1, [{
        f: create_peasant,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
    }], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT], sprite[SPRITE.INV_PEASANT] = create_craft_button(1, [{
        f: create_peasant,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
    }], .39, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_PEASANT] = sprite[SPRITE.INV_PEASANT], sprite[SPRITE.INV_CROWN_GREEN] = create_craft_button(1, [{
        f: create_crown_life,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN], sprite[SPRITE.INV_CROWN_ORANGE] = create_craft_button(1, [{
        f: create_crown_life,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE], sprite[SPRITE.INV_CROWN_BLUE] = create_craft_button(1, [{
        f: create_crown_life,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE], sprite[SPRITE.INV_CROWN_CRAB] = create_craft_button(1, [{
        f: create_crab_crown,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB], sprite[SPRITE.CHEST_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB], sprite[SPRITE.INV_DRAGON_HELMET] = create_craft_button(1, [{
        f: create_dragon_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
    }], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET], sprite[SPRITE.INV_DRAGON_SWORD] = create_craft_button(1, [{
        f: create_dragon_sword,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
    }], .75, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD], sprite[SPRITE.INV_DRAGON_CUBE] = create_craft_button(1, [{
        f: create_dragon_cube,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_DRAGON_ORB] = create_craft_button(1, [{
        f: create_blue_orb,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
    }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_LAVA_CUBE] = create_craft_button(1, [{
        f: create_dragon_cube,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_LAVA_ORB] = create_craft_button(1, [{
        f: create_blue_orb,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
    }], .55, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_GEMME_GREEN] = create_craft_button(1, [{
        f: create_gemme_green,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
    }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_GEMME_ORANGE] = create_craft_button(1, [{
        f: create_gemme_green,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
    }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_GEMME_BLUE] = create_craft_button(1, [{
        f: create_gemme_green,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
    }], .35, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_SHOVEL] = create_craft_button(1, [{
        f: create_shovel,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_SHOVEL] = sprite[SPRITE.INV_SHOVEL], sprite[SPRITE.INV_SHOVEL_GOLD] = create_craft_button(1, [{
        f: create_shovel,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD], sprite[SPRITE.INV_SHOVEL_DIAMOND] = create_craft_button(1, [{
        f: create_shovel,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND], sprite[SPRITE.INV_SHOVEL_AMETHYST] = create_craft_button(1, [{
        f: create_shovel,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST], sprite[SPRITE.INV_EXPLORER_HAT] = create_craft_button(1, [{
        f: create_explorer_hat,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT], sprite[SPRITE.INV_WOOD_HELMET] = create_craft_button(1, [{
        f: create_wooden_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"]
    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET], sprite[SPRITE.INV_STONE_HELMET] = create_craft_button(1, [{
        f: create_viking_hat,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET], sprite[SPRITE.INV_GOLD_HELMET] = create_craft_button(1, [{
        f: create_gold_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"]
    }], .35, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET], sprite[SPRITE.INV_DIAMOND_HELMET] = create_craft_button(1, [{
        f: create_diamond_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
    }], .45, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET], sprite[SPRITE.INV_BOOK] = create_craft_button(1, [{
        f: create_book,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
    }], .15, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_BOOK] = sprite[SPRITE.INV_BOOK], sprite[SPRITE.INV_PAPER] = create_craft_button(1, [{
        f: create_paper,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"]
    }], .3, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.CRAFT_PAPER] = sprite[SPRITE.INV_PAPER], sprite[SPRITE.INV_AMETHYST] = create_craft_button(1, [{
        f: create_amethyst,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#c27add", "#cd98e5"]
    }], .31, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_SAND] = create_craft_button(1, [{
        f: create_sand,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"]
    }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_ICE] = create_craft_button(1, [{
        f: create_ice,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"]
    }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.INV_GROUND] = create_craft_button(1, [{
        f: create_sand,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"]
    }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_BUCKET_FULL] = create_craft_button(1, [{
        f: create_bucket_full,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_BUCKET_EMPTY] = create_craft_button(1, [{
        f: create_bucket_empty,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
    }], .22, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.CRAFT_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL], sprite[SPRITE.CRAFT_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY], sprite[SPRITE.INV_WELL] = create_craft_button(1, [{
        f: create_well,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
    }], .1, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_WELL] = sprite[SPRITE.INV_WELL], sprite[SPRITE.INV_BOTTLE_FULL] = create_craft_button(1, [{
        f: create_bottle,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], .18, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.INV_BOTTLE_EMPTY] = create_craft_button(1, [{
        f: create_bottle_full,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
    }], .18, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.CRAFT_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL], sprite[SPRITE.CRAFT_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY], sprite[SPRITE.INV_COOKIE] = create_craft_button(1, [{
        f: create_cookie,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_COOKIE] = sprite[SPRITE.INV_COOKIE], sprite[SPRITE.INV_CANDY] = create_craft_button(1, [{
        f: create_candy,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.INV_FERRERO] = create_craft_button(1, [{
        f: create_ferrero_rocher,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
    }], .6, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.INV_BREAD] = create_craft_button(1, [{
        f: create_bread,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
    }], .17, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_BREAD] = sprite[SPRITE.INV_BREAD], sprite[SPRITE.INV_FOODFISH] = create_craft_button(1, [{
        f: create_fishfood,
        x: -3,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
    }], .23, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.INV_FOODFISH_COOKED] = create_craft_button(1, [{
        f: create_fishfood_cooked,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"]
    }], .23, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED], sprite[SPRITE.INV_DIVING_MASK] = create_craft_button(1, [{
        f: create_divingmask,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
    }], .2, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK], sprite[SPRITE.INV_SCALES] = create_craft_button(1, [{
        f: create_scales,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
    }], .15, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_SUPER_DIVING_SUIT] = create_craft_button(1, [{
        f: create_superdivingsuit,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
    }], .3, ["#35b1b5", "#46c2c9", "#33b4e4"], .5), sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT], sprite[SPRITE.INV_PLOT] = create_craft_button(1, [{
        f: create_plot,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_PLOT] = sprite[SPRITE.INV_PLOT], sprite[SPRITE.INV_GARLAND] = create_craft_button(1, [{
        f: create_garland_inv,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"]
    }], 1, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CHEST_GARLAND] = sprite[SPRITE.INV_GARLAND], sprite[SPRITE.INV_BRIDGE] = create_craft_button(1, [{
        f: create_bridge,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
    }], .5, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_BRIDGE] = sprite[SPRITE.INV_BRIDGE], sprite[SPRITE.INV_ROOF] = create_craft_button(1, [{
        f: create_roof,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
    }], .3, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_ROOF] = sprite[SPRITE.INV_ROOF], sprite[SPRITE.INV_WATERING_CAN_FULL] = create_craft_button(1, [{
        f: create_watering_can,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
    }], .4, ["#35b1b5", "#46c2c9", "#33b4e4"], .7), sprite[SPRITE.CRAFT_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL], sprite[SPRITE.INV_WATERING_CAN] = create_craft_button(1, [{
        f: create_watering_can,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
    }], .4, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.CRAFT_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN], sprite[SPRITE.INV_FLOUR] = create_craft_button(1, [{
        f: create_flour,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
    }], .25, ["#2b5c48", "#2b5c48", "#2b5c48"], .5), sprite[SPRITE.INV_CRAB_STICK] = create_craft_button(1, [{
        f: create_crab_stick,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
    }], .2, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK], sprite[SPRITE.INV_CAKE] = create_craft_button(1, [{
        f: create_cake,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
    }], .25, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_CAKE] = sprite[SPRITE.INV_CAKE], sprite[SPRITE.INV_SANDWICH] = create_craft_button(1, [{
        f: create_SANDWICH,
        x: -2,
        y: -8,
        a: 1,
        r: 0,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
    }], .25, ["#3ba578", "#4eb687", "#3da34d"], .5), sprite[SPRITE.CRAFT_SANDWICH] = sprite[SPRITE.INV_SANDWICH], sprite[SPRITE.INV_LAVA_SWORD] = [], sprite[SPRITE.INV_LAVA_SWORD][0] = IMAGES.INV_LAVA_SWORD_OUT, sprite[SPRITE.INV_LAVA_SWORD][1] = IMAGES.INV_LAVA_SWORD_IN, sprite[SPRITE.INV_LAVA_SWORD][2] = IMAGES.INV_LAVA_SWORD_CLICK, sprite[SPRITE.CRAFT_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD], sprite[SPRITE.CHEST_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD], sprite[SPRITE.INV_LAVA_SPEAR] = [], sprite[SPRITE.INV_LAVA_SPEAR][0] = IMAGES.INV_LAVA_SPEAR_OUT, sprite[SPRITE.INV_LAVA_SPEAR][1] = IMAGES.INV_LAVA_SPEAR_IN, sprite[SPRITE.INV_LAVA_SPEAR][2] = IMAGES.INV_LAVA_SPEAR_CLICK, sprite[SPRITE.CRAFT_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR], sprite[SPRITE.CHEST_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR], sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD], sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD], sprite[SPRITE.INV_REIDITE_SWORD] = [], sprite[SPRITE.INV_REIDITE_SWORD][0] = IMAGES.INV_REIDITE_SWORD_OUT, sprite[SPRITE.INV_REIDITE_SWORD][1] = IMAGES.INV_REIDITE_SWORD_IN, sprite[SPRITE.INV_REIDITE_SWORD][2] = IMAGES.INV_REIDITE_SWORD_CLICK, sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD], sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD], sprite[SPRITE.INV_REIDITE_SPEAR] = [], sprite[SPRITE.INV_REIDITE_SPEAR][0] = IMAGES.INV_REIDITE_SPEAR_OUT, sprite[SPRITE.INV_REIDITE_SPEAR][1] = IMAGES.INV_REIDITE_SPEAR_IN, sprite[SPRITE.INV_REIDITE_SPEAR][2] = IMAGES.INV_REIDITE_SPEAR_CLICK, sprite[SPRITE.CRAFT_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR], sprite[SPRITE.CHEST_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR], sprite[SPRITE.INV_DIAMOND_PROTECTION] = [], sprite[SPRITE.INV_DIAMOND_PROTECTION][0] = IMAGES.INV_DIAMOND_PROTECTION_OUT, sprite[SPRITE.INV_DIAMOND_PROTECTION][1] = IMAGES.INV_DIAMOND_PROTECTION_IN, sprite[SPRITE.INV_DIAMOND_PROTECTION][2] = IMAGES.INV_DIAMOND_PROTECTION_CLICK, sprite[SPRITE.CRAFT_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION], sprite[SPRITE.CHEST_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION], sprite[SPRITE.INV_AMETHYST_PROTECTION] = [], sprite[SPRITE.INV_AMETHYST_PROTECTION][0] = IMAGES.INV_AMETHYST_PROTECTION_OUT, sprite[SPRITE.INV_AMETHYST_PROTECTION][1] = IMAGES.INV_AMETHYST_PROTECTION_IN, sprite[SPRITE.INV_AMETHYST_PROTECTION][2] = IMAGES.INV_AMETHYST_PROTECTION_CLICK, sprite[SPRITE.CRAFT_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION], sprite[SPRITE.CHEST_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION], sprite[SPRITE.INV_REIDITE_PROTECTION] = [], sprite[SPRITE.INV_REIDITE_PROTECTION][0] = IMAGES.INV_REIDITE_PROTECTION_OUT, sprite[SPRITE.INV_REIDITE_PROTECTION][1] = IMAGES.INV_REIDITE_PROTECTION_IN, sprite[SPRITE.INV_REIDITE_PROTECTION][2] = IMAGES.INV_REIDITE_PROTECTION_CLICK, sprite[SPRITE.CRAFT_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION], sprite[SPRITE.CHEST_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION], sprite[SPRITE.INV_REIDITE_HELMET] = [], sprite[SPRITE.INV_REIDITE_HELMET][0] = IMAGES.INV_REIDITE_HELMET_OUT, sprite[SPRITE.INV_REIDITE_HELMET][1] = IMAGES.INV_REIDITE_HELMET_IN, sprite[SPRITE.INV_REIDITE_HELMET][2] = IMAGES.INV_REIDITE_HELMET_CLICK, sprite[SPRITE.CRAFT_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET], sprite[SPRITE.CHEST_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET], sprite[SPRITE.INV_LAVA_HELMET] = [], sprite[SPRITE.INV_LAVA_HELMET][0] = IMAGES.INV_LAVA_HELMET_OUT, sprite[SPRITE.INV_LAVA_HELMET][1] = IMAGES.INV_LAVA_HELMET_IN, sprite[SPRITE.INV_LAVA_HELMET][2] = IMAGES.INV_LAVA_HELMET_CLICK, sprite[SPRITE.CRAFT_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET], sprite[SPRITE.CHEST_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET], sprite[SPRITE.INV_FIREFLY] = [], sprite[SPRITE.INV_FIREFLY][0] = IMAGES.INV_FIREFLY_OUT, sprite[SPRITE.INV_FIREFLY][1] = IMAGES.INV_FIREFLY_IN, sprite[SPRITE.INV_FIREFLY][2] = IMAGES.INV_FIREFLY_CLICK, sprite[SPRITE.CRAFT_FIREFLY] = sprite[SPRITE.INV_FIREFLY], sprite[SPRITE.CHEST_FIREFLY] = sprite[SPRITE.INV_FIREFLY], sprite[SPRITE.INV_WITCH] = [], sprite[SPRITE.INV_WITCH][0] = IMAGES.INV_WITCH_OUT, sprite[SPRITE.INV_WITCH][1] = IMAGES.INV_WITCH_IN, sprite[SPRITE.INV_WITCH][2] = IMAGES.INV_WITCH_CLICK, sprite[SPRITE.CRAFT_WITCH] = sprite[SPRITE.INV_WITCH], sprite[SPRITE.CHEST_WITCH] = sprite[SPRITE.INV_WITCH], sprite[SPRITE.INV_NIMBUS] = [], sprite[SPRITE.INV_NIMBUS][0] = IMAGES.INV_NIMBUS_OUT, sprite[SPRITE.INV_NIMBUS][1] = IMAGES.INV_NIMBUS_IN, sprite[SPRITE.INV_NIMBUS][2] = IMAGES.INV_NIMBUS_CLICK, sprite[SPRITE.CRAFT_NIMBUS] = sprite[SPRITE.INV_NIMBUS], sprite[SPRITE.CHEST_NIMBUS] = sprite[SPRITE.INV_NIMBUS], sprite[SPRITE.INV_REIDITE] = [], sprite[SPRITE.INV_REIDITE][0] = IMAGES.INV_REIDITE_OUT, sprite[SPRITE.INV_REIDITE][1] = IMAGES.INV_REIDITE_IN, sprite[SPRITE.INV_REIDITE][2] = IMAGES.INV_REIDITE_CLICK, sprite[SPRITE.CHEST_REIDITE] = sprite[SPRITE.INV_REIDITE], sprite[SPRITE.INV_FLAME] = [], sprite[SPRITE.INV_FLAME][0] = IMAGES.INV_FLAME_OUT, sprite[SPRITE.INV_FLAME][1] = IMAGES.INV_FLAME_IN, sprite[SPRITE.INV_FLAME][2] = IMAGES.INV_FLAME_CLICK, sprite[SPRITE.CHEST_FLAME] = sprite[SPRITE.INV_FLAME], sprite[SPRITE.CHEST_SHOVEL] = sprite[SPRITE.INV_SHOVEL], sprite[SPRITE.CHEST_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD], sprite[SPRITE.CHEST_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND], sprite[SPRITE.CHEST_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST], sprite[SPRITE.CHEST_SEED] = sprite[SPRITE.INV_SEED], sprite[SPRITE.CHEST_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED], sprite[SPRITE.CHEST_WINDMILL] = sprite[SPRITE.INV_WINDMILL], sprite[SPRITE.CHEST_WILD_WHEAT] = sprite[SPRITE.INV_WILD_WHEAT], sprite[SPRITE.CHEST_FIRE] = sprite[SPRITE.INV_FIRE], sprite[SPRITE.CHEST_DRAGON_ORB] = sprite[SPRITE.INV_DRAGON_ORB], sprite[SPRITE.CHEST_DRAGON_CUBE] = sprite[SPRITE.INV_DRAGON_CUBE], sprite[SPRITE.CHEST_LAVA_ORB] = sprite[SPRITE.INV_LAVA_ORB], sprite[SPRITE.CHEST_LAVA_CUBE] = sprite[SPRITE.INV_LAVA_CUBE];
    sprite[SPRITE.CHEST_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE], sprite[SPRITE.CHEST_SUGAR_CAN] = sprite[SPRITE.INV_SUGAR_CAN], sprite[SPRITE.CHEST_PIRATE_SWORD] = sprite[SPRITE.INV_PIRATE_SWORD], sprite[SPRITE.CHEST_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD], sprite[SPRITE.CHEST_SWORD] = sprite[SPRITE.INV_SWORD], sprite[SPRITE.CHEST_CURSED_SWORD] = sprite[SPRITE.INV_CURSED_SWORD], sprite[SPRITE.CHEST_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD], sprite[SPRITE.CHEST_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND], sprite[SPRITE.CHEST_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST], sprite[SPRITE.CHEST_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD], sprite[SPRITE.CHEST_PICK] = sprite[SPRITE.INV_PICK], sprite[SPRITE.CHEST_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD], sprite[SPRITE.CHEST_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND], sprite[SPRITE.CHEST_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST], sprite[SPRITE.CHEST_STONE] = sprite[SPRITE.INV_STONE], sprite[SPRITE.CHEST_GOLD] = sprite[SPRITE.INV_GOLD], sprite[SPRITE.CHEST_DIAMOND] = sprite[SPRITE.INV_DIAMOND], sprite[SPRITE.CHEST_WOOD] = sprite[SPRITE.INV_WOOD], sprite[SPRITE.CHEST_PLANT] = sprite[SPRITE.INV_PLANT], sprite[SPRITE.CHEST_WORKBENCH] = sprite[SPRITE.INV_WORK], sprite[SPRITE.CHEST_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL], sprite[SPRITE.CHEST_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL], sprite[SPRITE.CHEST_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL], sprite[SPRITE.CHEST_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL], sprite[SPRITE.CHEST_WALL] = sprite[SPRITE.INV_WALL], sprite[SPRITE.CHEST_SPIKE] = sprite[SPRITE.INV_SPIKE], sprite[SPRITE.CHEST_MEAT] = sprite[SPRITE.INV_MEAT], sprite[SPRITE.CHEST_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT], sprite[SPRITE.CHEST_CORD] = sprite[SPRITE.INV_CORD], sprite[SPRITE.CHEST_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD], sprite[SPRITE.CHEST_BANDAGE] = sprite[SPRITE.INV_BANDAGE], sprite[SPRITE.CHEST_LOCK] = sprite[SPRITE.INV_LOCK], sprite[SPRITE.CHEST_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK], sprite[SPRITE.CHEST_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION], sprite[SPRITE.CHEST_DRAGON_HEART] = sprite[SPRITE.INV_DRAGON_HEART], sprite[SPRITE.CHEST_LAVA_HEART] = sprite[SPRITE.INV_LAVA_HEART], sprite[SPRITE.CHEST_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD], sprite[SPRITE.CHEST_TOTEM] = sprite[SPRITE.INV_TOTEM], sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE], sprite[SPRITE.CHEST_CHEST] = sprite[SPRITE.INV_CHEST], sprite[SPRITE.CHEST_SLOT] = CTI(create_chest_slot(.8, !0, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"])), sprite[SPRITE.CHEST_PLUS] = create_craft_button(.5, [{
        f: create_plus_chest,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#ffffff"]
    }], .16, ["#c4a23a", "#d0ad41", "#b89733"], .9), sprite[SPRITE.CHEST_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE], sprite[SPRITE.CHEST_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE], sprite[SPRITE.CHEST_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE], sprite[SPRITE.CHEST_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE], sprite[SPRITE.CHEST_BAG] = sprite[SPRITE.INV_BAG], sprite[SPRITE.CHEST_SPECIAL_FUR] = sprite[SPRITE.INV_SPECIAL_FUR], sprite[SPRITE.CHEST_SPECIAL_FUR_2] = sprite[SPRITE.INV_SPECIAL_FUR_2], sprite[SPRITE.CHEST_FUR] = sprite[SPRITE.INV_FUR], sprite[SPRITE.CHEST_KRAKEN_SKIN] = sprite[SPRITE.INV_KRAKEN_SKIN], sprite[SPRITE.CHEST_FUR_WOLF] = sprite[SPRITE.INV_FUR_WOLF], sprite[SPRITE.CHEST_FUR_BOAR] = sprite[SPRITE.INV_FUR_BOAR], sprite[SPRITE.CHEST_FUR_WINTER] = sprite[SPRITE.INV_FUR_WINTER], sprite[SPRITE.CHEST_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS], sprite[SPRITE.CHEST_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF], sprite[SPRITE.CHEST_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE], sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE], sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE], sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE], sprite[SPRITE.CHEST_COAT] = sprite[SPRITE.INV_COAT], sprite[SPRITE.CHEST_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR], sprite[SPRITE.CHEST_SPEAR] = sprite[SPRITE.INV_SPEAR], sprite[SPRITE.CHEST_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR], sprite[SPRITE.CHEST_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR], sprite[SPRITE.CHEST_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR], sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR], sprite[SPRITE.CHEST_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER], sprite[SPRITE.CHEST_SPANNER] = sprite[SPRITE.INV_SPANNER], sprite[SPRITE.CHEST_HAMMER] = sprite[SPRITE.INV_HAMMER], sprite[SPRITE.CHEST_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD], sprite[SPRITE.CHEST_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND], sprite[SPRITE.CHEST_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST], sprite[SPRITE.CHEST_FURNACE] = sprite[SPRITE.INV_FURNACE], sprite[SPRITE.CHEST_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN], sprite[SPRITE.CHEST_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT], sprite[SPRITE.CHEST_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET], sprite[SPRITE.CHEST_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET], sprite[SPRITE.CHEST_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET], sprite[SPRITE.CHEST_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET], sprite[SPRITE.CHEST_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET], sprite[SPRITE.CHEST_BOOK] = sprite[SPRITE.INV_BOOK], sprite[SPRITE.CHEST_PAPER] = sprite[SPRITE.INV_PAPER], sprite[SPRITE.CHEST_AMETHYST] = sprite[SPRITE.INV_AMETHYST], sprite[SPRITE.CHEST_BRIDGE] = sprite[SPRITE.INV_BRIDGE], sprite[SPRITE.CHEST_ROOF] = sprite[SPRITE.INV_ROOF], sprite[SPRITE.CHEST_PLOT] = sprite[SPRITE.INV_PLOT], sprite[SPRITE.CHEST_SAND] = sprite[SPRITE.INV_SAND], sprite[SPRITE.CHEST_BREAD] = sprite[SPRITE.INV_BREAD], sprite[SPRITE.CHEST_ICE] = sprite[SPRITE.INV_ICE], sprite[SPRITE.CHEST_GROUND] = sprite[SPRITE.INV_GROUND], sprite[SPRITE.CHEST_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL], sprite[SPRITE.CHEST_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY], sprite[SPRITE.CHEST_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN], sprite[SPRITE.CHEST_FLOUR] = sprite[SPRITE.INV_FLOUR], sprite[SPRITE.CHEST_COOKIE] = sprite[SPRITE.INV_COOKIE], sprite[SPRITE.CHEST_CANDY] = sprite[SPRITE.INV_CANDY], sprite[SPRITE.CHEST_FERRERO] = sprite[SPRITE.INV_FERRERO], sprite[SPRITE.CHEST_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT], sprite[SPRITE.CHEST_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK], sprite[SPRITE.CHEST_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL], sprite[SPRITE.CHEST_CAKE] = sprite[SPRITE.INV_CAKE], sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK], sprite[SPRITE.CHEST_FOODFISH] = sprite[SPRITE.INV_FOODFISH], sprite[SPRITE.CHEST_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED], sprite[SPRITE.CHEST_SCALES] = sprite[SPRITE.INV_SCALES], sprite[SPRITE.CHEST_SANDWICH] = sprite[SPRITE.INV_SANDWICH], sprite[SPRITE.CHEST_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN], sprite[SPRITE.CHEST_GEMME_GREEN] = sprite[SPRITE.INV_GEMME_GREEN], sprite[SPRITE.CHEST_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE], sprite[SPRITE.CHEST_GEMME_ORANGE] = sprite[SPRITE.INV_GEMME_ORANGE], sprite[SPRITE.CHEST_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE], sprite[SPRITE.CHEST_GEMME_BLUE] = sprite[SPRITE.INV_GEMME_BLUE], sprite[SPRITE.CHEST_HOOD] = sprite[SPRITE.INV_HOOD], sprite[SPRITE.CHEST_PEASANT] = sprite[SPRITE.INV_PEASANT], sprite[SPRITE.CHEST_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT], sprite[SPRITE.CHEST_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD], sprite[SPRITE.CHEST_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY], sprite[SPRITE.CHEST_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL], sprite[SPRITE.CHEST_WELL] = sprite[SPRITE.INV_WELL], sprite[SPRITE.CHEST_SIGN] = sprite[SPRITE.INV_SIGN], sprite[SPRITE.CHEST_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED], sprite[SPRITE.CHEST_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED], sprite[SPRITE.CHEST_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED], sprite[SPRITE.CHEST_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET]
}

function ctxDrawImage(e, t, i, r, a, n, o, s, _, T) {
    void 0 !== t.tryLoad && 1 !== t.tryLoad() || (HackSettings.Xray.enabled && (e.globalAlpha = HackSettings.Xray.opacity), void 0 !== T ? e.drawImage(t, i, r, Math.max(1, a), Math.max(1, n), o, s, _, T) : void 0 !== n ? e.drawImage(t, i, r, a, n) : e.drawImage(t, i, r))
}

function draw_info_box() {
    var e = game.info_box,
        t = e.id;
    1 === e.activated && 1 === e.display && (void 0 === INFO_BOX[t] && (INFO_BOX[t] = create_info_box(t)), 1 === e.craft ? ctxDrawImage(ctx, INFO_BOX[t], e.x, e.y) : e.x - 80 + INFO_BOX[t].width > canw ? ctxDrawImage(ctx, INFO_BOX[t], canw - INFO_BOX[t].width - 10, e.y - INFO_BOX[t].height - 10) : ctxDrawImage(ctx, INFO_BOX[t], e.x - 80, e.y - INFO_BOX[t].height - 10))
}

function draw_slot_number(e, t, i) {
    var r = sprite[SPRITE.SLOT_NUMBER][e],
        a = t.info.translate.x + 5 * scale,
        n = t.info.translate.y + 5 * scale;
    (t.info.state == BUTTON_CLICK || i) && (n += 5 * scale), ctxDrawImage(ctx, r, a, n)
}

function draw_amount(e, t) {
    sprite[SPRITE.COUNTER][e] || (sprite[SPRITE.COUNTER][e] = create_text(scale, "x" + e, 17, "#FFF"));
    var i = sprite[SPRITE.COUNTER][e],
        r = t.info.translate.x + t.info.img[0].width - i.width - 14 * scale,
        a = t.info.translate.y + t.info.img[0].height - i.height - 19 * scale;
    t.info.state == BUTTON_CLICK && (a += 5 * scale), ctxDrawImage(ctx, i, r, a)
}

function draw_well_inventory() {
    if (!(user.chest.open || user.furnace.open || user.windmill.open || user.bread_oven.open || user.extractor.open)) {
        user.well.open = !1;
        var e = world.fast_units[user.uid],
            t = WORLD.DIST_WELL;
        if (e)
            for (var i = 0; i < world.units[ITEMS.WELL].length; i++) {
                var r = world.units[ITEMS.WELL][i],
                    a = Utils.dist(r, e);
                (HackSettings.ExtendedChestRange.enabled ? HelperFns.isInRadius(e, r) : a < t) && (t = a, user.well.open = !0, user.well.pid = r.pid, user.well.iid = r.id)
            }
    }
}

function draw_sign_button() {
    if (!(user.chest.open || user.furnace.open || user.windmill.open || user.bread_oven.open || user.extractor.open)) {
        user.sign.open = !1;
        var e, t = world.fast_units[user.uid],
            i = WORLD.DIST_SIGN;
        if (t) {
            for (var r = 0; r < world.units[ITEMS.SIGN].length; r++) {
                var a = world.units[ITEMS.SIGN][r],
                    n = Utils.dist(a, t);
                (e = HackSettings.ExtendedChestRange.enabled ? HelperFns.isInRadius(t, a) : n < i) && 0 === a.info && a.pid === user.id && (user.sign.open = !0, i = n, user.sign.iid = a.id)
            }
            if (e) game.sign.button.draw(ctx)
        }
    }
}

function draw_bread_oven_inventory() {
    if (!(user.chest.open || user.furnace.open || user.windmill.open || user.extractor.open)) {
        user.bread_oven.open = !1;
        var e, t = world.fast_units[user.uid],
            i = WORLD.DIST_BREAD_OVEN;
        if (t) {
            for (var r = 0; r < world.units[ITEMS.BREAD_OVEN].length; r++) {
                var a = world.units[ITEMS.BREAD_OVEN][r],
                    n = Utils.dist(a, t);
                (e = HackSettings.ExtendedChestRange.enabled ? HelperFns.isInRadius(t, a) : n < i) && (i = n, user.bread_oven.open = !0, user.bread_oven.amount_wood = 31 & a.info, user.bread_oven.amount_flour = (992 & a.info) >> 5, user.bread_oven.amount_bread = (31744 & a.info) >> 10, user.bread_oven.pid = a.pid, user.bread_oven.iid = a.id)
            }
            if (e) {
                var o = sprite[SPRITE.BREAD_OVEN_UI],
                    s = (_ = game.bread_oven_wood_button).info.translate.x - 32;
                if (ctxDrawImage(ctx, o, s, 0), user.bread_oven.amount_wood > 0) _.draw(ctx), (T = user.bread_oven.amount_wood) > 1 && draw_amount(T, _);
                var _ = game.bread_oven_bread_button;
                if (user.bread_oven.amount_bread > 0) _.draw(ctx), (T = user.bread_oven.amount_bread) > 1 && draw_amount(T, _);
                var T;
                _ = game.bread_oven_flour_button;
                if (user.bread_oven.amount_flour > 0) _.draw(ctx), (T = user.bread_oven.amount_flour) > 1 && draw_amount(T, _)
            }
        }
    }
}

function draw_extractor_inventory() {
    if (!user.chest.open && !user.furnace.open) {
        user.extractor.open = !1;
        var e, t = world.fast_units[user.uid],
            i = WORLD.DIST_EXTRACTOR_MACHINE;
        if (t) {
            for (var r = 0; r < EXTRACTORS.length; r++)
                for (var a = EXTRACTORS[r][0], n = EXTRACTORS[r][1], o = 0; o < world.units[a].length; o++) {
                    var s = world.units[a][o],
                        _ = Utils.dist(s, t);
                    (e = HackSettings.ExtendedChestRange.enabled ? HelperFns.isInRadius(t, s) : _ < i) && (i = _, user.extractor.mineral = n, user.extractor.type = a, user.extractor.open = !0, user.extractor.amount_wood = 255 & s.info, user.extractor.amount_mineral = (65280 & s.info) >> 8, user.extractor.pid = s.pid, user.extractor.iid = s.id)
                }
            if (e) {
                var T, E = sprite[SPRITE.EXTRACTOR_CASES],
                    I = (l = game.extractor_wood_button).info.translate.x - 33;
                if (ctxDrawImage(ctx, E, I, 0), user.extractor.amount_wood > 0) l.draw(ctx), (T = user.extractor.amount_wood) > 1 && draw_amount(T, l);
                switch (user.extractor.mineral) {
                    case INV.STONE:
                        var l = game.extractor_stone_button;
                        break;
                    case INV.GOLD:
                        l = game.extractor_gold_button;
                        break;
                    case INV.DIAMOND:
                        l = game.extractor_diamond_button;
                        break;
                    case INV.AMETHYST:
                        l = game.extractor_amethyst_button;
                        break;
                    case INV.REIDITE:
                        l = game.extractor_reidite_button
                }
                if (user.extractor.amount_mineral > 0) l.draw(ctx), (T = user.extractor.amount_mineral) > 1 && draw_amount(T, l)
            }
        }
    }
}

function draw_windmill_inventory() {
    if (!user.chest.open && !user.furnace.open) {
        user.windmill.open = !1;
        var e, t = world.fast_units[user.uid],
            i = WORLD.DIST_WINDMILL;
        if (t) {
            for (var r = 0; r < world.units[ITEMS.WINDMILL].length; r++) {
                var a = world.units[ITEMS.WINDMILL][r],
                    n = Utils.dist(a, t);
                (e = HackSettings.ExtendedChestRange.enabled ? HelperFns.isInRadius(t, a) : n < i) && (i = n, user.windmill.open = !0, user.windmill.amount_wheat = 255 & a.info, user.windmill.amount_flour = (65280 & a.info) >> 8, user.windmill.pid = a.pid, user.windmill.iid = a.id)
            }
            if (e) {
                var o = sprite[SPRITE.WINDMILL_CASES],
                    s = (T = game.windmill_wheat_button).info.translate.x - 33;
                if (ctxDrawImage(ctx, o, s, 0), user.windmill.amount_wheat > 0) T.draw(ctx), (_ = user.windmill.amount_wheat) > 1 && draw_amount(_, T);
                var _, T = game.windmill_flour_button;
                if (user.windmill.amount_flour > 0) T.draw(ctx), (_ = user.windmill.amount_flour) > 1 && draw_amount(_, T)
            }
        }
    }
}

function draw_furnace_inventory() {
    if (!user.chest.open) {
        user.furnace.amount = 0, user.furnace.open = !1;
        var e, t = world.fast_units[user.uid],
            i = WORLD.DIST_FURNACE;
        if (t) {
            for (var r = 0; r < world.units[ITEMS.FURNACE].length; r++) {
                var a = world.units[ITEMS.FURNACE][r],
                    n = Utils.dist(a, t);
                (e = HackSettings.ExtendedChestRange.enabled ? HelperFns.isInRadius(t, a) : n < i) && (i = n, user.furnace.open = !0, user.furnace.amount = a.info, user.furnace.pid = a.pid, user.furnace.iid = a.id)
            }
            if (e) {
                var o = sprite[SPRITE.FURNACE_SLOT],
                    s = game.furnace_button,
                    _ = Math.floor(s.info.translate.x + (s.info.img[0].width - o.width) / 2),
                    T = Math.floor(s.info.translate.y + (s.info.img[0].height - o.height) / 2) + 3;
                if (ctxDrawImage(ctx, o, _, T), user.furnace.amount > 0) {
                    s.draw(ctx);
                    var E = user.furnace.amount;
                    E > 1 && draw_amount(E, s)
                }
            }
        }
    }
}

function draw_resurrection_inventory() {
    user.resurrection.open = !1;
    var e, t = world.fast_units[user.uid],
        i = WORLD.DIST_RESURRECTION;
    if (t) {
        for (var r = 0; r < world.units[ITEMS.RESURRECTION].length; r++) {
            var a = world.units[ITEMS.RESURRECTION][r],
                n = Utils.dist(a, t);
            e = HackSettings.ExtendedChestRange.enabled ? HelperFns.isInRadius(t, a) : n < i, n < i && (i = n, user.resurrection.open = !0, user.resurrection.pid = a.pid, user.resurrection.iid = a.id)
        }
        e && game.resurrection.draw(ctx)
    }
}

function draw_team_buttons() {
    if (user.totem.id = -1, user.totem.pid = -1, !(user.spectator || user.totem.wait || user.zombie)) {
        var e = world.fast_units[user.uid],
            t = WORLD.DIST_TOTEM;
        if (e)
            for (var i = 0; i < world.units[ITEMS.TOTEM].length; i++) {
                var r = world.units[ITEMS.TOTEM][i],
                    a = Utils.dist(r, e);
                (HackSettings.ExtendedChestRange.enabled ? HelperFns.isInRadius(e, r) : a < t) && (t = a, user.totem.id = r.id, user.totem.pid = r.pid, user.totem.info = r.info, user.totem.lock = (16 & r.info) >> 4)
            }
        var n = game.team_buttons_id;
        game.team_buttons_id = -1, -1 == user.totem.pid || 0 != user.team.length && user.id != user.totem.pid ? 0 != user.team.length && user.team[0] != user.id ? game.team_buttons_id = CLIENT.TEAM_LEAVE : 0 != user.team.length && user.team[0] == user.id ? game.team_buttons_id = CLIENT.TEAM_SHOW : 0 != user.team.length && (game.team_buttons_id = CLIENT.TEAM_JOIN) : 0 == user.team.length && user.totem.info >= 8 ? game.team_buttons_id = CLIENT.TEAM_FULL : 0 == user.team.length ? game.team_buttons_id = CLIENT.TEAM_JOIN : game.team_buttons_id = CLIENT.TEAM_MANAGE, -1 != game.team_buttons_id && game.team_buttons[game.team_buttons_id].button.draw(ctx);
        var o = document.getElementById("team_box").style; - 1 != game.team_buttons_id && game.team_buttons_id != n && "inline-block" == o.display && game.team_buttons[game.team_buttons_id].action()
    }
}

function draw_chest_inventory() {
    user.chest.id = -1, user.chest.lock = !1, user.chest.locked = !1, user.chest.lockpick = !1, user.chest.padlock = !1, user.chest.open = !1;
    var e, t = world.fast_units[user.uid],
        i = WORLD.DIST_CHEST;
    if (t) {
        for (var r = 0; r < world.units[ITEMS.CHEST].length; r++) {
            var a = world.units[ITEMS.CHEST][r],
                n = Utils.dist(a, t);
            (e = HackSettings.ExtendedChestRange.enabled ? HelperFns.isInRadius(t, a) : n < i) && (i = n, user.chest.open = !0, user.chest.id = a.action < 2 ? -1 : Math.floor((a.action - 1) / 2), user.chest.amount = a.info, user.chest.pid = a.pid, user.chest.iid = a.id, user.chest.locked = a.lock, user.chest.lock = !(!a.lock || user.id == a.pid || user.in_team(a.pid)), user.chest.padlock = a.pid === user.id && !user.chest.locked && -1 != user.inv.find_item(INV.LOCK), user.chest.locked && -1 != user.inv.find_item(INV.LOCKPICK) && (user.chest.lockpick = !0))
        }
        if (e) {
            var o, s = sprite[SPRITE.CHEST_SLOT],
                _ = game.chest_buttons[0],
                T = Math.floor(_.info.translate.x + (_.info.img[0].width - s.width) / 2),
                E = Math.floor(_.info.translate.y + (_.info.img[0].height - s.height) / 2) + 3;
            if (ctxDrawImage(ctx, s, T, E), !user.chest.lock || user.chest.pid === user.id)
                if (user.chest.id >= 0)(_ = game.chest_buttons[user.chest.id]).draw(ctx), (o = user.chest.amount) > 1 && draw_amount(o, _);
            if (user.chest.lock) {
                if (user.chest.id >= 0)(_ = game.chest_buttons[user.chest.id]).draw(ctx), (o = user.chest.amount) > 1 && draw_amount(o, _)
            } else user.chest.padlock && game.chest_padlock.draw(ctx);
            user.chest.lockpick && game.chest_lockpick.draw(ctx)
        }
    }
}

function draw_bigmap() {
    if (user.bigmap) {
        ctx.globalAlpha = .5, ctx.fillStyle = "#000", ctx.fillRect(0, 0, canw, canh), ctx.globalAlpha = .8;
        var e = sprite[SPRITE.BIGMAP][world.time],
            t = canw2 - e.width / 2,
            i = canh2 - e.height / 2;
        ctxDrawImage(ctx, e, t, i), ctx.globalAlpha = 1, game.minimap.marker.x > -1 && (ctx.fillStyle = "#660000", circle(ctx, t + 3 * game.minimap.marker.x * scale, i + 3 * game.minimap.marker.y * scale, 14 * scale), ctx.fill());
        for (var r = game.minimap.players, a = 0; a < r.length; a++) {
            var n = r[a];
            ctx.fillStyle = (world.time, "#ff0000"), circle(ctx, t + n.x / (100 * world.nw) * 600 * scale, i + n.y / (100 * world.nh) * 600 * scale, 6 * scale), ctx.fill()
        }
        var o = world.fast_units[user.uid];
        o && (ctx.fillStyle = world.time ? "#fff" : "#e39716", circle(ctx, t + o.x / (100 * world.nw) * 600 * scale, i + o.y / (100 * world.nh) * 600 * scale, 12 * scale), ctx.fill())
    }
}

function draw_reconnect() {
    if (user.reconnect.enabled) {
        ctx.globalAlpha = .9, ctx.fillStyle = "#000", round_rect(ctx, canw2 - 150, canh2 - 90, 300, 180, 15), ctx.fill(), ctx.globalAlpha = 1;
        var e = sprite[SPRITE.GEAR2];
        ctx.save(), user.reconnect.rotate = (user.reconnect.rotate + 2 * delta) % (2 * Math.PI), ctx.translate(canw / 2, canh / 2 - 25), ctx.rotate(user.reconnect.rotate), ctxDrawImage(ctx, e, -e.width / 2, -e.height / 2), ctx.restore();
        e = sprite[SPRITE.RECONNECT];
        ctxDrawImage(ctx, e, (canw - e.width) / 2, (canh - e.height) / 2 + 25)
    }
}

function draw_minimap() {
    if (user.inv.can_select.length > 0) var e = {
        x: game.minimap.translate.x,
        y: game.minimap.translate.y - 120 * scale
    };
    else e = {
        x: game.minimap.translate.x,
        y: game.minimap.translate.y - 50 * scale
    };
    ctx.globalAlpha = .8;
    var t = sprite[SPRITE.MINIMAP][world.time];
    ctxDrawImage(ctx, t, e.x, e.y), ctx.globalAlpha = 1, game.minimap.marker.x > -1 && (ctx.fillStyle = "#660000", circle(ctx, e.x + game.minimap.marker.x * scale, e.y + game.minimap.marker.y * scale, 5 * scale), ctx.fill());
    for (var i = scale, r = game.minimap.players, a = 0; a < r.length; a++) {
        var n = r[a];
        ctx.fillStyle = (world.time, "#ff0000"), circle(ctx, e.x + n.x / (100 * world.nw) * 193 * scale, e.y + n.y / (100 * world.nh) * 193 * scale, 2 * scale), ctx.fill()
    }
    var o = world.fast_units[user.uid];
    o && (ctx.fillStyle = world.time ? "#fff" : "#e39716", circle(ctx, e.x + o.x / (100 * world.nw) * 193 * scale, e.y + o.y / (100 * world.nh) * 193 * scale, 4 * scale), ctx.fill()), scale = i
}
render_minimap = function() {
    for (var e = 0; e < 2; e++) {
        sprite[SPRITE.MINIMAP_CTX][e].clearRect(0, 0, 193, 193), sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 193, 193), sprite[SPRITE.BIGMAP_CTX][e].clearRect(0, 0, 600, 600), sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.MAP[e], 0, 0, 600, 600);
        for (var t = world.biomes.length - 1; t >= 0; t--) {
            var i = world.biomes[t],
                r = 193 * i.x1 / (100 * world.nw),
                a = 193 * i.y1 / (100 * world.nh),
                n = 193 * i.w / (100 * world.nw),
                o = 193 * i.h / (100 * world.nh),
                s = 600 * i.x1 / (100 * world.nw),
                _ = 600 * i.y1 / (100 * world.nh),
                T = 600 * i.w / (100 * world.nw),
                E = 600 * i.h / (100 * world.nh);
            i.t === world.BIOME_FOREST && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], r, a, n, o), sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.FOREST[e], s, _, T, E)), i.t === world.BIOME_WINTER && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], r, a, n, o), sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.WINTER[e], s, _, T, E)), i.t === world.BIOME_LAVA && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], r, a, n, o), sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.LAVA[e], s, _, T, E)), i.t === world.BIOME_DRAGON && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], r, a, n, o), sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.CAVE[e], s, _, T, E)), i.t === world.BIOME_DESERT && (sprite[SPRITE.MINIMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], r, a, n, o), sprite[SPRITE.BIGMAP_CTX][e].drawImage(MINIMAP_UTILS.DESERT[e], s, _, T, E))
        }
    }
}, render_cosmetics = function() {
    COSMETICS = {
        SKIN: [{
            id: 0,
            day: IMAGES.PLAYER0D,
            night: IMAGES.PLAYER0N,
            dayHand: IMAGES.HAND0D,
            nightHand: IMAGES.HAND0N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Starver"
        }, {
            id: 3,
            day: IMAGES.PLAYER3D,
            night: IMAGES.PLAYER3N,
            dayHand: IMAGES.HAND3D,
            nightHand: IMAGES.HAND3N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Angry"
        }, {
            id: 2,
            day: IMAGES.PLAYER2D,
            night: IMAGES.PLAYER2N,
            dayHand: IMAGES.HAND2D,
            nightHand: IMAGES.HAND2N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Sad"
        }, {
            id: 9,
            day: IMAGES.PLAYER9D,
            night: IMAGES.PLAYER9N,
            dayHand: IMAGES.HAND9D,
            nightHand: IMAGES.HAND9N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Happy 1"
        }, {
            id: 1,
            day: IMAGES.PLAYER1D,
            night: IMAGES.PLAYER1N,
            dayHand: IMAGES.HAND1D,
            nightHand: IMAGES.HAND1N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "What?"
        }, {
            id: 4,
            day: IMAGES.PLAYER4D,
            night: IMAGES.PLAYER4N,
            dayHand: IMAGES.HAND4D,
            nightHand: IMAGES.HAND4N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Suspicious"
        }, {
            id: 5,
            day: IMAGES.PLAYER5D,
            night: IMAGES.PLAYER5N,
            dayHand: IMAGES.HAND5D,
            nightHand: IMAGES.HAND5N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Scar"
        }, {
            id: 6,
            day: IMAGES.PLAYER6D,
            night: IMAGES.PLAYER6N,
            dayHand: IMAGES.HAND6D,
            nightHand: IMAGES.HAND6N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "In Trouble"
        }, {
            id: 7,
            day: IMAGES.PLAYER7D,
            night: IMAGES.PLAYER7N,
            dayHand: IMAGES.HAND7D,
            nightHand: IMAGES.HAND7N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Cute"
        }, {
            id: 8,
            day: IMAGES.PLAYER8D,
            night: IMAGES.PLAYER8N,
            dayHand: IMAGES.HAND8D,
            nightHand: IMAGES.HAND8N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Bored 1"
        }, {
            id: 10,
            day: IMAGES.PLAYER10D,
            night: IMAGES.PLAYER10N,
            dayHand: IMAGES.HAND10D,
            nightHand: IMAGES.HAND10N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Happy 2"
        }, {
            id: 11,
            day: IMAGES.PLAYER11D,
            night: IMAGES.PLAYER11N,
            dayHand: IMAGES.HAND11D,
            nightHand: IMAGES.HAND11N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Crazy"
        }, {
            id: 12,
            day: IMAGES.PLAYER12D,
            night: IMAGES.PLAYER12N,
            dayHand: IMAGES.HAND12D,
            nightHand: IMAGES.HAND12N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Happy 3"
        }, {
            id: 13,
            day: IMAGES.PLAYER13D,
            night: IMAGES.PLAYER13N,
            dayHand: IMAGES.HAND13D,
            nightHand: IMAGES.HAND13N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Very Cute"
        }, {
            id: 14,
            day: IMAGES.PLAYER14D,
            night: IMAGES.PLAYER14N,
            dayHand: IMAGES.HAND14D,
            nightHand: IMAGES.HAND14N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Curious"
        }, {
            id: 15,
            day: IMAGES.PLAYER15D,
            night: IMAGES.PLAYER15N,
            dayHand: IMAGES.HAND15D,
            nightHand: IMAGES.HAND15N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Bored 2"
        }, {
            id: 16,
            day: IMAGES.PLAYER16D,
            night: IMAGES.PLAYER16N,
            dayHand: IMAGES.HAND16D,
            nightHand: IMAGES.HAND16N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Happy 4"
        }, {
            id: 17,
            day: IMAGES.PLAYER17D,
            night: IMAGES.PLAYER17N,
            dayHand: IMAGES.HAND17D,
            nightHand: IMAGES.HAND17N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Scar 2"
        }, {
            id: 18,
            day: IMAGES.PLAYER18D,
            night: IMAGES.PLAYER18N,
            dayHand: IMAGES.HAND18D,
            nightHand: IMAGES.HAND18N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Sick"
        }, {
            id: 19,
            day: IMAGES.PLAYER19D,
            night: IMAGES.PLAYER19N,
            dayHand: IMAGES.HAND19D,
            nightHand: IMAGES.HAND19N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Somnambule"
        }, {
            id: 24,
            day: IMAGES.SKIN7D,
            night: IMAGES.SKIN7N,
            dayHand: IMAGES.HAND_SKIN7D,
            nightHand: IMAGES.HAND_SKIN7N,
            rarity: RARITY.WOOD,
            author: "Pixelbitie",
            name: "Feel Bad"
        }, {
            id: 23,
            day: IMAGES.SKIN0D,
            night: IMAGES.SKIN0N,
            dayHand: IMAGES.HAND_SKIN0D,
            nightHand: IMAGES.HAND_SKIN0N,
            rarity: RARITY.WOOD,
            author: "Pixelbitie",
            name: "Mmmh."
        }, {
            id: 103,
            day: IMAGES.SKIN78D,
            night: IMAGES.SKIN78N,
            dayHand: IMAGES.HAND_SKIN78D,
            nightHand: IMAGES.HAND_SKIN78N,
            rarity: RARITY.WOOD,
            author: "pizza wa",
            name: "Panic"
        }, {
            id: 105,
            day: IMAGES.SKIN80D,
            night: IMAGES.SKIN80N,
            dayHand: IMAGES.HAND_SKIN80D,
            nightHand: IMAGES.HAND_SKIN80N,
            rarity: RARITY.WOOD,
            author: "pizza wa",
            name: "Hypnotic"
        }, {
            id: 106,
            day: IMAGES.SKIN81D,
            night: IMAGES.SKIN81N,
            dayHand: IMAGES.HAND_SKIN81D,
            nightHand: IMAGES.HAND_SKIN81N,
            rarity: RARITY.WOOD,
            author: "pizza wa",
            name: "Stars in the eyes"
        }, {
            id: 104,
            day: IMAGES.SKIN79D,
            night: IMAGES.SKIN79N,
            dayHand: IMAGES.HAND_SKIN79D,
            nightHand: IMAGES.HAND_SKIN79N,
            rarity: RARITY.STONE,
            author: "pizza wa",
            name: "Scared at night"
        }, {
            id: 20,
            day: IMAGES.SKIN_VAMPIRED,
            night: IMAGES.SKIN_VAMPIREN,
            dayHand: IMAGES.HAND_VAMPIRED,
            nightHand: IMAGES.HAND_VAMPIREN,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Vampire"
        }, {
            id: 21,
            day: IMAGES.SKIN_ZOMBIED,
            night: IMAGES.SKIN_ZOMBIEN,
            dayHand: IMAGES.HAND_ZOMBIED,
            nightHand: IMAGES.HAND_ZOMBIEN,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Zombie"
        }, {
            id: 22,
            day: IMAGES.SKIN_DEVASTD,
            night: IMAGES.SKIN_DEVASTN,
            dayHand: IMAGES.HAND_DEVASTD,
            nightHand: IMAGES.HAND_DEVASTN,
            rarity: RARITY.STONE,
            author: "Pixelbitie",
            name: "Devaster"
        }, {
            id: 116,
            day: IMAGES.SKIN91D,
            night: IMAGES.SKIN91N,
            dayHand: IMAGES.HAND_SKIN91D,
            nightHand: IMAGES.HAND_SKIN91N,
            rarity: RARITY.STONE,
            author: "Fukss",
            name: "Dead Devaster"
        }, {
            id: 27,
            day: IMAGES.SKIN19D,
            night: IMAGES.SKIN19N,
            dayHand: IMAGES.HAND_SKIN19D,
            nightHand: IMAGES.HAND_SKIN19N,
            rarity: RARITY.STONE,
            author: "Winter",
            name: "Cactus"
        }, {
            id: 28,
            day: IMAGES.SKIN20D,
            night: IMAGES.SKIN20N,
            dayHand: IMAGES.HAND_SKIN20D,
            nightHand: IMAGES.HAND_SKIN20N,
            rarity: RARITY.STONE,
            author: "pizza wa",
            name: "Bee"
        }, {
            id: 49,
            day: IMAGES.SKIN24D,
            night: IMAGES.SKIN24N,
            dayHand: IMAGES.HAND_SKIN24D,
            nightHand: IMAGES.HAND_SKIN24N,
            rarity: RARITY.STONE,
            author: "Taco4Life",
            name: "Camo Skin"
        }, {
            id: 58,
            day: IMAGES.SKIN34D,
            night: IMAGES.SKIN34N,
            dayHand: IMAGES.HAND_SKIN34D,
            nightHand: IMAGES.HAND_SKIN34N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Blue Limax Skin"
        }, {
            id: 59,
            day: IMAGES.SKIN33D,
            night: IMAGES.SKIN33N,
            dayHand: IMAGES.HAND_SKIN33D,
            nightHand: IMAGES.HAND_SKIN33N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Red Limax Skin"
        }, {
            id: 94,
            day: IMAGES.SKIN69D,
            night: IMAGES.SKIN69N,
            dayHand: IMAGES.HAND_SKIN69D,
            nightHand: IMAGES.HAND_SKIN69N,
            rarity: RARITY.STONE,
            author: "Taco4Life",
            name: "Mr. Pumpkin"
        }, {
            id: 109,
            day: IMAGES.SKIN84D,
            night: IMAGES.SKIN84N,
            dayHand: IMAGES.HAND_SKIN84D,
            nightHand: IMAGES.HAND_SKIN84N,
            rarity: RARITY.STONE,
            author: "pizza wa",
            name: "Wood"
        }, {
            id: 114,
            day: IMAGES.SKIN89D,
            night: IMAGES.SKIN89N,
            dayHand: IMAGES.HAND_SKIN89D,
            nightHand: IMAGES.HAND_SKIN89N,
            rarity: RARITY.STONE,
            author: "pizza wa",
            name: "Zebra"
        }, {
            id: 120,
            day: IMAGES.SKIN95D,
            night: IMAGES.SKIN95N,
            dayHand: IMAGES.HAND_SKIN95D,
            nightHand: IMAGES.HAND_SKIN95N,
            rarity: RARITY.STONE,
            author: "CrysTal",
            name: "Tiger"
        }, {
            id: 134,
            day: IMAGES.SKIN109D,
            night: IMAGES.SKIN109N,
            dayHand: IMAGES.HAND_SKIN109D,
            nightHand: IMAGES.HAND_SKIN109N,
            rarity: RARITY.STONE,
            author: "Franchestcreator",
            name: "Day or Night"
        }, {
            id: 135,
            day: IMAGES.SKIN110D,
            night: IMAGES.SKIN110N,
            dayHand: IMAGES.HAND_SKIN110D,
            nightHand: IMAGES.HAND_SKIN110N,
            rarity: RARITY.STONE,
            author: "Poinet",
            name: "Square Starver"
        }, {
            id: 136,
            day: IMAGES.SKIN111D,
            night: IMAGES.SKIN111N,
            dayHand: IMAGES.HAND_SKIN111D,
            nightHand: IMAGES.HAND_SKIN111N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Voodoo Doll"
        }, {
            id: 137,
            day: IMAGES.SKIN112D,
            night: IMAGES.SKIN112N,
            dayHand: IMAGES.HAND_SKIN112D,
            nightHand: IMAGES.HAND_SKIN112N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Frankenstein"
        }, {
            id: 138,
            day: IMAGES.SKIN114D,
            night: IMAGES.SKIN114N,
            dayHand: IMAGES.HAND_SKIN114D,
            nightHand: IMAGES.HAND_SKIN114N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Old Mummy"
        }, {
            id: 139,
            day: IMAGES.SKIN115D,
            night: IMAGES.SKIN115N,
            dayHand: IMAGES.HAND_SKIN115D,
            nightHand: IMAGES.HAND_SKIN115N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Werewolf"
        }, {
            id: 140,
            day: IMAGES.SKIN116D,
            night: IMAGES.SKIN116N,
            dayHand: IMAGES.HAND_SKIN116D,
            nightHand: IMAGES.HAND_SKIN116N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Old Cthulhu"
        }, {
            id: 141,
            day: IMAGES.SKIN117D,
            night: IMAGES.SKIN117N,
            dayHand: IMAGES.HAND_SKIN117D,
            nightHand: IMAGES.HAND_SKIN117N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Sea Man"
        }, {
            id: 142,
            day: IMAGES.SKIN118D,
            night: IMAGES.SKIN118N,
            dayHand: IMAGES.HAND_SKIN118D,
            nightHand: IMAGES.HAND_SKIN118N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Old Pumpkin"
        }, {
            id: 148,
            day: IMAGES.SKIN124D,
            night: IMAGES.SKIN124N,
            dayHand: IMAGES.HAND_SKIN124D,
            nightHand: IMAGES.HAND_SKIN124N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Old Snowman"
        }, {
            id: 149,
            day: IMAGES.SKIN125D,
            night: IMAGES.SKIN125N,
            dayHand: IMAGES.HAND_SKIN125D,
            nightHand: IMAGES.HAND_SKIN125N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Old Christmas Tree Man"
        }, {
            id: 150,
            day: IMAGES.SKIN126D,
            night: IMAGES.SKIN126N,
            dayHand: IMAGES.HAND_SKIN126D,
            nightHand: IMAGES.HAND_SKIN126N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Old Mrs Bell"
        }, {
            id: 151,
            day: IMAGES.SKIN127D,
            night: IMAGES.SKIN127N,
            dayHand: IMAGES.HAND_SKIN127D,
            nightHand: IMAGES.HAND_SKIN127N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Old Elfy"
        }, {
            id: 152,
            day: IMAGES.SKIN128D,
            night: IMAGES.SKIN128N,
            dayHand: IMAGES.HAND_SKIN128D,
            nightHand: IMAGES.HAND_SKIN128N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Old Mr Present"
        }, {
            id: 153,
            day: IMAGES.SKIN129D,
            night: IMAGES.SKIN129N,
            dayHand: IMAGES.HAND_SKIN129D,
            nightHand: IMAGES.HAND_SKIN129N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "My Dear Old Deer"
        }, {
            id: 154,
            day: IMAGES.SKIN130D,
            night: IMAGES.SKIN130N,
            dayHand: IMAGES.HAND_SKIN130D,
            nightHand: IMAGES.HAND_SKIN130N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Mr Angel"
        }, {
            id: 155,
            day: IMAGES.SKIN131D,
            night: IMAGES.SKIN131N,
            dayHand: IMAGES.HAND_SKIN131D,
            nightHand: IMAGES.HAND_SKIN131N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Mr Ice Cube"
        }, {
            id: 156,
            day: IMAGES.SKIN132D,
            night: IMAGES.SKIN132N,
            dayHand: IMAGES.HAND_SKIN132D,
            nightHand: IMAGES.HAND_SKIN132N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Mr Snowman"
        }, {
            id: 159,
            day: IMAGES.SKIN135D,
            night: IMAGES.SKIN135N,
            dayHand: IMAGES.HAND_SKIN135D,
            nightHand: IMAGES.HAND_SKIN135N,
            rarity: RARITY.STONE,
            author: "CrysTal",
            name: "Crystal Sky Skin"
        }, {
            id: 167,
            day: IMAGES.SKIN143D,
            night: IMAGES.SKIN143N,
            dayHand: IMAGES.HAND_SKIN143D,
            nightHand: IMAGES.HAND_SKIN143N,
            rarity: RARITY.STONE,
            author: "Franchestcreator",
            name: "Radioactive Starver"
        }, {
            id: 169,
            day: IMAGES.SKIN146D,
            night: IMAGES.SKIN146N,
            dayHand: IMAGES.HAND_SKIN146D,
            nightHand: IMAGES.HAND_SKIN146N,
            rarity: RARITY.STONE,
            author: "TheScaryBlaze",
            name: "Eaten Cookie"
        }, {
            id: 170,
            day: IMAGES.SKIN147D,
            night: IMAGES.SKIN147N,
            dayHand: IMAGES.HAND_SKIN147D,
            nightHand: IMAGES.HAND_SKIN147N,
            rarity: RARITY.STONE,
            author: "aloner",
            name: "Blob Thing"
        }, {
            id: 172,
            day: IMAGES.SKIN149D,
            night: IMAGES.SKIN149N,
            dayHand: IMAGES.HAND_SKIN149D,
            nightHand: IMAGES.HAND_SKIN149N,
            rarity: RARITY.STONE,
            author: "aloner",
            name: "Machine Mask"
        }, {
            id: 29,
            day: IMAGES.SKIN2D,
            night: IMAGES.SKIN2N,
            dayHand: IMAGES.HAND_SKIN2D,
            nightHand: IMAGES.HAND_SKIN2N,
            rarity: RARITY.GOLD,
            author: "Pixelbitie",
            name: "Lollipop 1"
        }, {
            id: 30,
            day: IMAGES.SKIN3D,
            night: IMAGES.SKIN3N,
            dayHand: IMAGES.HAND_SKIN3D,
            nightHand: IMAGES.HAND_SKIN3N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Lollipop 2"
        }, {
            id: 31,
            day: IMAGES.SKIN4D,
            night: IMAGES.SKIN4N,
            dayHand: IMAGES.HAND_SKIN4D,
            nightHand: IMAGES.HAND_SKIN4N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Lollipop 3"
        }, {
            id: 32,
            day: IMAGES.SKIN5D,
            night: IMAGES.SKIN5N,
            dayHand: IMAGES.HAND_SKIN5D,
            nightHand: IMAGES.HAND_SKIN5N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Lollipop 4"
        }, {
            id: 33,
            day: IMAGES.SKIN8D,
            night: IMAGES.SKIN8N,
            dayHand: IMAGES.HAND_SKIN8D,
            nightHand: IMAGES.HAND_SKIN8N,
            rarity: RARITY.GOLD,
            author: "Sushui",
            name: "Yellow Bird"
        }, {
            id: 34,
            day: IMAGES.SKIN9D,
            night: IMAGES.SKIN9N,
            dayHand: IMAGES.HAND_SKIN9D,
            nightHand: IMAGES.HAND_SKIN9N,
            rarity: RARITY.GOLD,
            author: "Sushui",
            name: "Red Bird"
        }, {
            id: 35,
            day: IMAGES.SKIN10D,
            night: IMAGES.SKIN10N,
            dayHand: IMAGES.HAND_SKIN10D,
            nightHand: IMAGES.HAND_SKIN10N,
            rarity: RARITY.GOLD,
            author: "Sushui",
            name: "Blue Bird"
        }, {
            id: 37,
            day: IMAGES.SKIN17D,
            night: IMAGES.SKIN17N,
            dayHand: IMAGES.HAND_SKIN17D,
            nightHand: IMAGES.HAND_SKIN17N,
            rarity: RARITY.GOLD,
            author: "Winter",
            name: "Owl"
        }, {
            id: 52,
            day: IMAGES.SKIN27D,
            night: IMAGES.SKIN27N,
            dayHand: IMAGES.HAND_SKIN27D,
            nightHand: IMAGES.HAND_SKIN27N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Nemo"
        }, {
            id: 53,
            day: IMAGES.SKIN28D,
            night: IMAGES.SKIN28N,
            dayHand: IMAGES.HAND_SKIN28D,
            nightHand: IMAGES.HAND_SKIN28N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Mr. Bread"
        }, {
            id: 74,
            day: IMAGES.SKIN49D,
            night: IMAGES.SKIN49N,
            dayHand: IMAGES.HAND_SKIN49D,
            nightHand: IMAGES.HAND_SKIN49N,
            rarity: RARITY.GOLD,
            author: "Communist & Taco4Life",
            name: "Mr. Bread 2"
        }, {
            id: 75,
            day: IMAGES.SKIN50D,
            night: IMAGES.SKIN50N,
            dayHand: IMAGES.HAND_SKIN50D,
            nightHand: IMAGES.HAND_SKIN50N,
            rarity: RARITY.GOLD,
            author: "Communist & Taco4Life",
            name: "Mr. Bread 3"
        }, {
            id: 60,
            day: IMAGES.SKIN35D,
            night: IMAGES.SKIN35N,
            dayHand: IMAGES.HAND_SKIN35D,
            nightHand: IMAGES.HAND_SKIN35N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Red Berry"
        }, {
            id: 61,
            day: IMAGES.SKIN36D,
            night: IMAGES.SKIN36N,
            dayHand: IMAGES.HAND_SKIN36D,
            nightHand: IMAGES.HAND_SKIN36N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Old Berry"
        }, {
            id: 70,
            day: IMAGES.SKIN45D,
            night: IMAGES.SKIN45N,
            dayHand: IMAGES.HAND_SKIN45D,
            nightHand: IMAGES.HAND_SKIN45N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Cake"
        }, {
            id: 71,
            day: IMAGES.SKIN46D,
            night: IMAGES.SKIN46N,
            dayHand: IMAGES.HAND_SKIN46D,
            nightHand: IMAGES.HAND_SKIN46N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Christmas Cake"
        }, {
            id: 77,
            day: IMAGES.SKIN52D,
            night: IMAGES.SKIN52N,
            dayHand: IMAGES.HAND_SKIN52D,
            nightHand: IMAGES.HAND_SKIN52N,
            rarity: RARITY.GOLD,
            author: "Pancakez",
            name: "Mr. Pancake"
        }, {
            id: 87,
            day: IMAGES.SKIN62D,
            night: IMAGES.SKIN62N,
            dayHand: IMAGES.HAND_SKIN62D,
            nightHand: IMAGES.HAND_SKIN62N,
            rarity: RARITY.GOLD,
            author: "Taco4Life",
            name: "Mr. Taco"
        }, {
            id: 78,
            day: IMAGES.SKIN53D,
            night: IMAGES.SKIN53N,
            dayHand: IMAGES.HAND_SKIN53D,
            nightHand: IMAGES.HAND_SKIN53N,
            rarity: RARITY.GOLD,
            author: "Taco4Life",
            name: "Mr. Bottle"
        }, {
            id: 79,
            day: IMAGES.SKIN54D,
            night: IMAGES.SKIN54N,
            dayHand: IMAGES.HAND_SKIN54D,
            nightHand: IMAGES.HAND_SKIN54N,
            rarity: RARITY.GOLD,
            author: "Taco4Life",
            name: "Mr. Bottle 2"
        }, {
            id: 97,
            day: IMAGES.SKIN71D,
            night: IMAGES.SKIN71N,
            dayHand: IMAGES.HAND_SKIN71D,
            nightHand: IMAGES.HAND_SKIN71N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Pink Rabbit"
        }, {
            id: 102,
            day: IMAGES.SKIN77D,
            night: IMAGES.SKIN77N,
            dayHand: IMAGES.HAND_SKIN77D,
            nightHand: IMAGES.HAND_SKIN77N,
            rarity: RARITY.GOLD,
            author: "pizza wa",
            name: "Marshmallow"
        }, {
            id: 107,
            day: IMAGES.SKIN82D,
            night: IMAGES.SKIN82N,
            dayHand: IMAGES.HAND_SKIN82D,
            nightHand: IMAGES.HAND_SKIN82N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Fox"
        }, {
            id: 132,
            day: IMAGES.SKIN107D,
            night: IMAGES.SKIN107N,
            dayHand: IMAGES.HAND_SKIN107D,
            nightHand: IMAGES.HAND_SKIN107N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Raccoon"
        }, {
            id: 111,
            day: IMAGES.SKIN86D,
            night: IMAGES.SKIN86N,
            dayHand: IMAGES.HAND_SKIN86D,
            nightHand: IMAGES.HAND_SKIN86N,
            rarity: RARITY.GOLD,
            author: "pizza wa",
            name: "Cloud"
        }, {
            id: 113,
            day: IMAGES.SKIN88D,
            night: IMAGES.SKIN88N,
            dayHand: IMAGES.HAND_SKIN88D,
            nightHand: IMAGES.HAND_SKIN88N,
            rarity: RARITY.GOLD,
            author: "pizza wa",
            name: "Moon"
        }, {
            id: 117,
            day: IMAGES.SKIN92D,
            night: IMAGES.SKIN92N,
            dayHand: IMAGES.HAND_SKIN92D,
            nightHand: IMAGES.HAND_SKIN92N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Mr. Panda"
        }, {
            id: 118,
            day: IMAGES.SKIN93D,
            night: IMAGES.SKIN93N,
            dayHand: IMAGES.HAND_SKIN93D,
            nightHand: IMAGES.HAND_SKIN93N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Mr. Strawberry"
        }, {
            id: 119,
            day: IMAGES.SKIN94D,
            night: IMAGES.SKIN94N,
            dayHand: IMAGES.HAND_SKIN94D,
            nightHand: IMAGES.HAND_SKIN94N,
            rarity: RARITY.GOLD,
            author: "eogito & Sushuui",
            name: "Mummy"
        }, {
            id: 122,
            day: IMAGES.SKIN97D,
            night: IMAGES.SKIN97N,
            dayHand: IMAGES.HAND_SKIN97D,
            nightHand: IMAGES.HAND_SKIN97N,
            rarity: RARITY.GOLD,
            author: "Taco4Life",
            name: "Dino"
        }, {
            id: 127,
            day: IMAGES.SKIN102D,
            night: IMAGES.SKIN102N,
            dayHand: IMAGES.HAND_SKIN102D,
            nightHand: IMAGES.HAND_SKIN102N,
            rarity: RARITY.GOLD,
            author: "MADBalgouthi",
            name: "Mr. Koala"
        }, {
            id: 160,
            day: IMAGES.SKIN136D,
            night: IMAGES.SKIN136N,
            dayHand: IMAGES.HAND_SKIN136D,
            nightHand: IMAGES.HAND_SKIN136N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Bottle Protection"
        }, {
            id: 162,
            day: IMAGES.SKIN138D,
            night: IMAGES.SKIN138N,
            dayHand: IMAGES.HAND_SKIN138D,
            nightHand: IMAGES.HAND_SKIN138N,
            rarity: RARITY.GOLD,
            author: "CrysTal",
            name: "Leaf Man"
        }, {
            id: 166,
            day: IMAGES.SKIN142D,
            night: IMAGES.SKIN142N,
            dayHand: IMAGES.HAND_SKIN142D,
            nightHand: IMAGES.HAND_SKIN142N,
            rarity: RARITY.GOLD,
            author: "pizza wa",
            name: "Bubble"
        }, {
            id: 174,
            day: IMAGES.SKIN145D,
            night: IMAGES.SKIN145N,
            dayHand: IMAGES.HAND_SKIN145D,
            nightHand: IMAGES.HAND_SKIN145N,
            rarity: RARITY.GOLD,
            author: "upfiz",
            name: "Potato"
        }, {
            id: 171,
            day: IMAGES.SKIN148D,
            night: IMAGES.SKIN148N,
            dayHand: IMAGES.HAND_SKIN148D,
            nightHand: IMAGES.HAND_SKIN148N,
            rarity: RARITY.GOLD,
            author: "aloner",
            name: "Axolotl"
        }, {
            id: 25,
            day: IMAGES.SKIN6D,
            night: IMAGES.SKIN6N,
            dayHand: IMAGES.HAND_SKIN6D,
            nightHand: IMAGES.HAND_SKIN0N,
            rarity: RARITY.DIAMOND,
            author: "Pixelbitie",
            name: "Test Dummy"
        }, {
            id: 41,
            day: IMAGES.SKIN_STARD,
            night: IMAGES.SKIN_STARN,
            dayHand: IMAGES.HAND_STARD,
            nightHand: IMAGES.HAND_STARN,
            rarity: RARITY.DIAMOND,
            author: "pizza wa",
            name: "Star-ver"
        }, {
            id: 43,
            day: IMAGES.SKIN11D,
            night: IMAGES.SKIN11N,
            dayHand: IMAGES.HAND_SKIN11D,
            nightHand: IMAGES.HAND_SKIN11N,
            rarity: RARITY.DIAMOND,
            author: "Communist",
            name: "Starver Chest"
        }, {
            id: 88,
            day: IMAGES.SKIN63D,
            night: IMAGES.SKIN63N,
            dayHand: IMAGES.HAND_SKIN63D,
            nightHand: IMAGES.HAND_SKIN63N,
            rarity: RARITY.DIAMOND,
            author: "Communist",
            name: "Starver Workbench"
        }, {
            id: 121,
            day: IMAGES.SKIN96D,
            night: IMAGES.SKIN96N,
            dayHand: IMAGES.HAND_SKIN96D,
            nightHand: IMAGES.HAND_SKIN96N,
            rarity: RARITY.DIAMOND,
            author: "MADBalgouthi",
            name: "Fish"
        }, {
            id: 39,
            day: IMAGES.SKIN22D,
            night: IMAGES.SKIN22N,
            dayHand: IMAGES.HAND_SKIN22D,
            nightHand: IMAGES.HAND_SKIN22N,
            rarity: RARITY.DIAMOND,
            author: "Negligent4Dia",
            name: "Crab"
        }, {
            id: 40,
            day: IMAGES.SKIN23D,
            night: IMAGES.SKIN23N,
            dayHand: IMAGES.HAND_SKIN23D,
            nightHand: IMAGES.HAND_SKIN23N,
            rarity: RARITY.DIAMOND,
            author: "Negligent4Dia",
            name: "Piranha"
        }, {
            id: 36,
            day: IMAGES.SKIN16D,
            night: IMAGES.SKIN16N,
            dayHand: IMAGES.HAND_SKIN16D,
            nightHand: IMAGES.HAND_SKIN16N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Winter Fox"
        }, {
            id: 69,
            day: IMAGES.SKIN44D,
            night: IMAGES.SKIN44N,
            dayHand: IMAGES.HAND_SKIN44D,
            nightHand: IMAGES.HAND_SKIN44N,
            rarity: RARITY.DIAMOND,
            author: "Zed",
            name: "Baby Foxy"
        }, {
            id: 51,
            day: IMAGES.SKIN26D,
            night: IMAGES.SKIN26N,
            dayHand: IMAGES.HAND_SKIN26D,
            nightHand: IMAGES.HAND_SKIN26N,
            rarity: RARITY.DIAMOND,
            author: "HOWI",
            name: "Winter Bear"
        }, {
            id: 133,
            day: IMAGES.SKIN108D,
            night: IMAGES.SKIN108N,
            dayHand: IMAGES.HAND_SKIN108D,
            nightHand: IMAGES.HAND_SKIN108N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Hawk"
        }, {
            id: 55,
            day: IMAGES.SKIN30D,
            night: IMAGES.SKIN30N,
            dayHand: IMAGES.HAND_SKIN30D,
            nightHand: IMAGES.HAND_SKIN30N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Nice Little Yuki"
        }, {
            id: 68,
            day: IMAGES.SKIN43D,
            night: IMAGES.SKIN43N,
            dayHand: IMAGES.HAND_SKIN43D,
            nightHand: IMAGES.HAND_SKIN43N,
            rarity: RARITY.DIAMOND,
            author: "Taco4Life",
            name: "Baby Yuki"
        }, {
            id: 62,
            day: IMAGES.SKIN37D,
            night: IMAGES.SKIN37N,
            dayHand: IMAGES.HAND_SKIN37D,
            nightHand: IMAGES.HAND_SKIN37N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Mr. Carrot"
        }, {
            id: 56,
            day: IMAGES.SKIN31D,
            night: IMAGES.SKIN31N,
            dayHand: IMAGES.HAND_SKIN31D,
            nightHand: IMAGES.HAND_SKIN31N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Bat Limax"
        }, {
            id: 72,
            day: IMAGES.SKIN47D,
            night: IMAGES.SKIN47N,
            dayHand: IMAGES.HAND_SKIN47D,
            nightHand: IMAGES.HAND_SKIN47N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Mr. Crate"
        }, {
            id: 73,
            day: IMAGES.SKIN48D,
            night: IMAGES.SKIN48N,
            dayHand: IMAGES.HAND_SKIN48D,
            nightHand: IMAGES.HAND_SKIN48N,
            rarity: RARITY.DIAMOND,
            author: "Taco4Life & eogito",
            name: "Mr. Spider"
        }, {
            id: 93,
            day: IMAGES.SKIN68D,
            night: IMAGES.SKIN68N,
            dayHand: IMAGES.HAND_SKIN68D,
            nightHand: IMAGES.HAND_SKIN68N,
            rarity: RARITY.DIAMOND,
            author: "Anyone want to play?",
            name: "Mr. Spider 2"
        }, {
            id: 82,
            day: IMAGES.SKIN57D,
            night: IMAGES.SKIN57N,
            dayHand: IMAGES.HAND_SKIN57D,
            nightHand: IMAGES.HAND_SKIN57N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Mr. Blue Starfish"
        }, {
            id: 83,
            day: IMAGES.SKIN58D,
            night: IMAGES.SKIN58N,
            dayHand: IMAGES.HAND_SKIN58D,
            nightHand: IMAGES.HAND_SKIN58N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Mr. Orange Starfish"
        }, {
            id: 84,
            day: IMAGES.SKIN59D,
            night: IMAGES.SKIN59N,
            dayHand: IMAGES.HAND_SKIN59D,
            nightHand: IMAGES.HAND_SKIN59N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Mr. Pink Starfish"
        }, {
            id: 85,
            day: IMAGES.SKIN60D,
            night: IMAGES.SKIN60N,
            dayHand: IMAGES.HAND_SKIN60D,
            nightHand: IMAGES.HAND_SKIN60N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Mr. ShellMauve"
        }, {
            id: 86,
            day: IMAGES.SKIN61D,
            night: IMAGES.SKIN61N,
            dayHand: IMAGES.HAND_SKIN61D,
            nightHand: IMAGES.HAND_SKIN61N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Mr. Shell Bead"
        }, {
            id: 96,
            day: IMAGES.SKIN72D,
            night: IMAGES.SKIN72N,
            dayHand: IMAGES.HAND_SKIN72D,
            nightHand: IMAGES.HAND_SKIN72N,
            rarity: RARITY.DIAMOND,
            author: "Fukss",
            name: "Angry Crab"
        }, {
            id: 98,
            day: IMAGES.SKIN73D,
            night: IMAGES.SKIN73N,
            dayHand: IMAGES.HAND_SKIN73D,
            nightHand: IMAGES.HAND_SKIN73N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Penguin"
        }, {
            id: 126,
            day: IMAGES.SKIN101D,
            night: IMAGES.SKIN101N,
            dayHand: IMAGES.HAND_SKIN101D,
            nightHand: IMAGES.HAND_SKIN101N,
            rarity: RARITY.DIAMOND,
            author: "Anyone want to play?",
            name: "Mr. Boar"
        }, {
            id: 145,
            day: IMAGES.SKIN121D,
            night: IMAGES.SKIN121N,
            dayHand: IMAGES.HAND_SKIN121D,
            nightHand: IMAGES.HAND_SKIN121N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "I saw you"
        }, {
            id: 146,
            day: IMAGES.SKIN122D,
            night: IMAGES.SKIN122N,
            dayHand: IMAGES.HAND_SKIN122D,
            nightHand: IMAGES.HAND_SKIN122N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "It was funny"
        }, {
            id: 147,
            day: IMAGES.SKIN123D,
            night: IMAGES.SKIN123N,
            dayHand: IMAGES.HAND_SKIN123D,
            nightHand: IMAGES.HAND_SKIN123N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "You can scream"
        }, {
            id: 158,
            day: IMAGES.SKIN134D,
            night: IMAGES.SKIN134N,
            dayHand: IMAGES.HAND_SKIN134D,
            nightHand: IMAGES.HAND_SKIN134N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Mr. Book"
        }, {
            id: 163,
            day: IMAGES.SKIN139D,
            night: IMAGES.SKIN139N,
            dayHand: IMAGES.HAND_SKIN139D,
            nightHand: IMAGES.HAND_SKIN139N,
            rarity: RARITY.DIAMOND,
            author: "Anyone want to play?",
            name: "Mr. Mammoth"
        }, {
            id: 164,
            day: IMAGES.SKIN140D,
            night: IMAGES.SKIN140N,
            dayHand: IMAGES.HAND_SKIN140D,
            nightHand: IMAGES.HAND_SKIN140N,
            rarity: RARITY.DIAMOND,
            author: "SoOw",
            name: "Mr. Mammoth 2"
        }, {
            id: 161,
            day: IMAGES.SKIN137D,
            night: IMAGES.SKIN137N,
            dayHand: IMAGES.HAND_SKIN137D,
            nightHand: IMAGES.HAND_SKIN137N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Nightmare"
        }, {
            id: 168,
            day: IMAGES.SKIN144D,
            night: IMAGES.SKIN144N,
            dayHand: IMAGES.HAND_SKIN144D,
            nightHand: IMAGES.HAND_SKIN144N,
            rarity: RARITY.DIAMOND,
            author: "pizza wa",
            name: "Shiny Crystal"
        }, {
            id: 173,
            day: IMAGES.SKIN150D,
            night: IMAGES.SKIN150N,
            dayHand: IMAGES.HAND_SKIN150D,
            nightHand: IMAGES.HAND_SKIN150N,
            rarity: RARITY.DIAMOND,
            author: "pizza wa",
            name: "Water skin"
        }, {
            id: 42,
            day: IMAGES.SKIN14D,
            night: IMAGES.SKIN14N,
            dayHand: IMAGES.HAND_SKIN14D,
            nightHand: IMAGES.HAND_SKIN14N,
            rarity: RARITY.AMETHYST,
            author: "Winter",
            name: "Will-O'-The-Wisp"
        }, {
            id: 91,
            day: IMAGES.SKIN66D,
            night: IMAGES.SKIN66N,
            dayHand: IMAGES.HAND_SKIN66D,
            nightHand: IMAGES.HAND_SKIN66N,
            rarity: RARITY.AMETHYST,
            author: "ExpertyAnimations",
            name: "Flame"
        }, {
            id: 26,
            day: IMAGES.SKIN15D,
            night: IMAGES.SKIN15N,
            dayHand: IMAGES.HAND_SKIN15D,
            nightHand: IMAGES.HAND_SKIN15N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Be a Tree"
        }, {
            id: 38,
            day: IMAGES.SKIN18D,
            night: IMAGES.SKIN18N,
            dayHand: IMAGES.HAND_SKIN18D,
            nightHand: IMAGES.HAND_SKIN18N,
            rarity: RARITY.AMETHYST,
            author: "Winter",
            name: "Toxic Mutant"
        }, {
            id: 50,
            day: IMAGES.SKIN25D,
            night: IMAGES.SKIN25N,
            dayHand: IMAGES.HAND_SKIN25D,
            nightHand: IMAGES.HAND_SKIN25N,
            rarity: RARITY.AMETHYST,
            author: "Communist",
            name: "Mr. Tomato"
        }, {
            id: 54,
            day: IMAGES.SKIN29D,
            night: IMAGES.SKIN29N,
            dayHand: IMAGES.HAND_SKIN29D,
            nightHand: IMAGES.HAND_SKIN29N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Mr. Mauve, the Lapa"
        }, {
            id: 57,
            day: IMAGES.SKIN32D,
            night: IMAGES.SKIN32N,
            dayHand: IMAGES.HAND_SKIN32D,
            nightHand: IMAGES.HAND_SKIN32N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Golden Fish"
        }, {
            id: 64,
            day: IMAGES.SKIN39D,
            night: IMAGES.SKIN39N,
            dayHand: IMAGES.HAND_SKIN39D,
            nightHand: IMAGES.HAND_SKIN39N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "LapaMauve"
        }, {
            id: 65,
            day: IMAGES.SKIN40D,
            night: IMAGES.SKIN40N,
            dayHand: IMAGES.HAND_SKIN40D,
            nightHand: IMAGES.HAND_SKIN40N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "LapaMauve "
        }, {
            id: 92,
            day: IMAGES.SKIN67D,
            night: IMAGES.SKIN67N,
            dayHand: IMAGES.HAND_SKIN67D,
            nightHand: IMAGES.HAND_SKIN67N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Mr. Burger"
        }, {
            id: 66,
            day: IMAGES.SKIN41D,
            night: IMAGES.SKIN41N,
            dayHand: IMAGES.HAND_SKIN41D,
            nightHand: IMAGES.HAND_SKIN41N,
            rarity: RARITY.AMETHYST,
            author: "pizza wa",
            name: "Tropical Starver"
        }, {
            id: 80,
            day: IMAGES.SKIN55D,
            night: IMAGES.SKIN55N,
            dayHand: IMAGES.HAND_SKIN55D,
            nightHand: IMAGES.HAND_SKIN55N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Mr. ShellPink"
        }, {
            id: 81,
            day: IMAGES.SKIN56D,
            night: IMAGES.SKIN56N,
            dayHand: IMAGES.HAND_SKIN56D,
            nightHand: IMAGES.HAND_SKIN56N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Mr. OranShell"
        }, {
            id: 99,
            day: IMAGES.SKIN74D,
            night: IMAGES.SKIN74N,
            dayHand: IMAGES.HAND_SKIN74D,
            nightHand: IMAGES.HAND_SKIN74N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Pepe"
        }, {
            id: 100,
            day: IMAGES.SKIN75D,
            night: IMAGES.SKIN75N,
            dayHand: IMAGES.HAND_SKIN75D,
            nightHand: IMAGES.HAND_SKIN75N,
            rarity: RARITY.AMETHYST,
            author: "fatant",
            name: "Mr. Ant"
        }, {
            id: 115,
            day: IMAGES.SKIN90D,
            night: IMAGES.SKIN90N,
            dayHand: IMAGES.HAND_SKIN90D,
            nightHand: IMAGES.HAND_SKIN90N,
            rarity: RARITY.AMETHYST,
            author: "MADBalgouthi",
            name: "Mr. Watermelon"
        }, {
            id: 101,
            day: IMAGES.SKIN76D,
            night: IMAGES.SKIN76N,
            dayHand: IMAGES.HAND_SKIN76D,
            nightHand: IMAGES.HAND_SKIN76N,
            rarity: RARITY.AMETHYST,
            author: "Taco4Life",
            name: "Mr. Thornbush"
        }, {
            id: 131,
            day: IMAGES.SKIN106D,
            night: IMAGES.SKIN106N,
            dayHand: IMAGES.HAND_SKIN106D,
            nightHand: IMAGES.HAND_SKIN106N,
            rarity: RARITY.AMETHYST,
            author: "Taco4Life",
            name: "Cthulhu"
        }, {
            id: 143,
            day: IMAGES.SKIN119D,
            night: IMAGES.SKIN119N,
            dayHand: IMAGES.HAND_SKIN119D,
            nightHand: IMAGES.HAND_SKIN119N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Mr. Cactus"
        }, {
            id: 144,
            day: IMAGES.SKIN120D,
            night: IMAGES.SKIN120N,
            dayHand: IMAGES.HAND_SKIN120D,
            nightHand: IMAGES.HAND_SKIN120N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Momo"
        }, {
            id: 95,
            day: IMAGES.SKIN70D,
            night: IMAGES.SKIN70N,
            dayHand: IMAGES.HAND_SKIN70D,
            nightHand: IMAGES.HAND_SKIN70N,
            rarity: RARITY.REIDITE,
            author: "Taco4Life",
            name: "Mr. Garlic"
        }, {
            id: 76,
            day: IMAGES.SKIN51D,
            night: IMAGES.SKIN51N,
            dayHand: IMAGES.HAND_SKIN51D,
            nightHand: IMAGES.HAND_SKIN51N,
            rarity: RARITY.REIDITE,
            author: "Winter",
            name: "Robot Dragon"
        }, {
            id: 44,
            day: IMAGES.SKIN1D,
            night: IMAGES.SKIN1N,
            dayHand: IMAGES.HAND_SKIN1D,
            nightHand: IMAGES.HAND_SKIN1N,
            rarity: RARITY.REIDITE,
            author: "Winter",
            name: "Lava Dragon Version 1"
        }, {
            id: 90,
            day: IMAGES.SKIN65D,
            night: IMAGES.SKIN65N,
            dayHand: IMAGES.HAND_SKIN65D,
            nightHand: IMAGES.HAND_SKIN65N,
            rarity: RARITY.REIDITE,
            author: "ExpertyAnimations",
            name: "Lava Dragon Version 2"
        }, {
            id: 124,
            day: IMAGES.SKIN99D,
            night: IMAGES.SKIN99N,
            dayHand: IMAGES.HAND_SKIN99D,
            nightHand: IMAGES.HAND_SKIN99N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Lava Dragon Version 3"
        }, {
            id: 45,
            day: IMAGES.SKIN12D,
            night: IMAGES.SKIN12N,
            dayHand: IMAGES.HAND_SKIN12D,
            nightHand: IMAGES.HAND_SKIN12N,
            rarity: RARITY.REIDITE,
            author: "Sushui",
            name: "Ice Dragon Version 1"
        }, {
            id: 46,
            day: IMAGES.SKIN13D,
            night: IMAGES.SKIN13N,
            dayHand: IMAGES.HAND_SKIN13D,
            nightHand: IMAGES.HAND_SKIN13N,
            rarity: RARITY.REIDITE,
            author: "Winter",
            name: "Ice Dragon Version 2"
        }, {
            id: 108,
            day: IMAGES.SKIN83D,
            night: IMAGES.SKIN83N,
            dayHand: IMAGES.HAND_SKIN83D,
            nightHand: IMAGES.HAND_SKIN83N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Ice Dragon Version 3"
        }, {
            id: 123,
            day: IMAGES.SKIN98D,
            night: IMAGES.SKIN98N,
            dayHand: IMAGES.HAND_SKIN98D,
            nightHand: IMAGES.HAND_SKIN98N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Baby Dragon Version 1"
        }, {
            id: 128,
            day: IMAGES.SKIN103D,
            night: IMAGES.SKIN103N,
            dayHand: IMAGES.HAND_SKIN103D,
            nightHand: IMAGES.HAND_SKIN103N,
            rarity: RARITY.REIDITE,
            author: "MADBalgouthi",
            name: "Baby Dragon Version 2"
        }, {
            id: 125,
            day: IMAGES.SKIN100D,
            night: IMAGES.SKIN100N,
            dayHand: IMAGES.HAND_SKIN100D,
            nightHand: IMAGES.HAND_SKIN100N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Baby Lava"
        }, {
            id: 47,
            day: IMAGES.SKIN21D,
            night: IMAGES.SKIN21N,
            dayHand: IMAGES.HAND_SKIN21D,
            nightHand: IMAGES.HAND_SKIN21N,
            rarity: RARITY.REIDITE,
            author: "Taco4Life",
            name: "Kraken"
        }, {
            id: 129,
            day: IMAGES.SKIN104D,
            night: IMAGES.SKIN104N,
            dayHand: IMAGES.HAND_SKIN104D,
            nightHand: IMAGES.HAND_SKIN104N,
            rarity: RARITY.REIDITE,
            author: "Taco4Life",
            name: "Sandworm"
        }, {
            id: 63,
            day: IMAGES.SKIN38D,
            night: IMAGES.SKIN38N,
            dayHand: IMAGES.HAND_SKIN38D,
            nightHand: IMAGES.HAND_SKIN38N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Mr. Golden Bread"
        }, {
            id: 67,
            day: IMAGES.SKIN42D,
            night: IMAGES.SKIN42N,
            dayHand: IMAGES.HAND_SKIN42D,
            nightHand: IMAGES.HAND_SKIN42N,
            rarity: RARITY.REIDITE,
            author: "ForgottenHeroe",
            name: "Starver Ores"
        }, {
            id: 130,
            day: IMAGES.SKIN105D,
            night: IMAGES.SKIN105N,
            dayHand: IMAGES.HAND_SKIN105D,
            nightHand: IMAGES.HAND_SKIN105N,
            rarity: RARITY.REIDITE,
            author: "Taco4Life",
            name: "Poo"
        }, {
            id: 89,
            day: IMAGES.SKIN64D,
            night: IMAGES.SKIN64N,
            dayHand: IMAGES.HAND_SKIN64D,
            nightHand: IMAGES.HAND_SKIN64N,
            rarity: RARITY.REIDITE,
            author: "Poinet",
            name: "Volcano Starver"
        }, {
            id: 112,
            day: IMAGES.SKIN87D,
            night: IMAGES.SKIN87N,
            dayHand: IMAGES.HAND_SKIN87D,
            nightHand: IMAGES.HAND_SKIN87N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Lava Starver"
        }, {
            id: 48,
            day: IMAGES.SKIN_ROBOTD,
            night: IMAGES.SKIN_ROBOTN,
            dayHand: IMAGES.HAND_ROBOTD,
            nightHand: IMAGES.HAND_ROBOTN,
            rarity: RARITY.SPECIAL,
            author: "eogito",
            name: "Robot"
        }, {
            id: 110,
            day: IMAGES.SKIN85D,
            night: IMAGES.SKIN85N,
            dayHand: IMAGES.HAND_SKIN85D,
            nightHand: IMAGES.HAND_SKIN85N,
            rarity: RARITY.SPECIAL,
            author: "pizza wa",
            name: "Blue Butterfly"
        }, {
            id: 157,
            day: IMAGES.SKIN133D,
            night: IMAGES.SKIN133N,
            dayHand: IMAGES.HAND_SKIN133D,
            nightHand: IMAGES.HAND_SKIN133N,
            rarity: RARITY.SPECIAL,
            author: "eogito",
            name: "Yrifox"
        }, {
            id: 165,
            day: IMAGES.SKIN141D,
            night: IMAGES.SKIN141N,
            dayHand: IMAGES.HAND_SKIN141D,
            nightHand: IMAGES.HAND_SKIN141N,
            rarity: RARITY.SPECIAL,
            author: "OmarJr13",
            name: "Blob Skin"
        }],
        BAG: [{
            id: 0,
            day: IMAGES.BAGD,
            night: IMAGES.BAGN,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Bag 1"
        }, {
            id: 1,
            day: IMAGES.BAG0D,
            night: IMAGES.BAG0N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Old Bag"
        }, {
            id: 2,
            day: IMAGES.BAG4D,
            night: IMAGES.BAG4N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Bag 2"
        }, {
            id: 3,
            day: IMAGES.BAG5D,
            night: IMAGES.BAG5N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Bag 3"
        }, {
            id: 4,
            day: IMAGES.BAG6D,
            night: IMAGES.BAG6N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Bag 4"
        }, {
            id: 5,
            day: IMAGES.BAG7D,
            night: IMAGES.BAG7N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Bag 5"
        }, {
            id: 11,
            day: IMAGES.BAG23D,
            night: IMAGES.BAG23N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Wood Pickaxe Bag"
        }, {
            id: 19,
            day: IMAGES.BAG16D,
            night: IMAGES.BAG16N,
            rarity: RARITY.WOOD,
            author: "Starve.io ",
            name: "Wood Carrier"
        }, {
            id: 37,
            day: IMAGES.BAG36D,
            night: IMAGES.BAG36N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Bag 6"
        }, {
            id: 39,
            day: IMAGES.BAG38D,
            night: IMAGES.BAG38N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Bag with Wooden Swords"
        }, {
            id: 44,
            day: IMAGES.BAG43D,
            night: IMAGES.BAG43N,
            rarity: RARITY.WOOD,
            author: "Communist",
            name: "Big Bag"
        }, {
            id: 7,
            day: IMAGES.BAG14D,
            night: IMAGES.BAG14N,
            rarity: RARITY.STONE,
            author: "Communist",
            name: "Bag 6"
        }, {
            id: 8,
            day: IMAGES.BAG_EASTERD,
            night: IMAGES.BAG_EASTERN,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Easter Bag"
        }, {
            id: 9,
            day: IMAGES.BAG_STARD,
            night: IMAGES.BAG_STARN,
            rarity: RARITY.STONE,
            author: "pizza wa",
            name: "Star Bag"
        }, {
            id: 10,
            day: IMAGES.BAG9D,
            night: IMAGES.BAG9N,
            rarity: RARITY.STONE,
            author: "eogito",
            name: "Winter Bag"
        }, {
            id: 20,
            day: IMAGES.BAG17D,
            night: IMAGES.BAG17N,
            rarity: RARITY.STONE,
            author: "Starve.io ",
            name: "Stone Carrier"
        }, {
            id: 24,
            day: IMAGES.BAG24D,
            night: IMAGES.BAG24N,
            rarity: RARITY.STONE,
            author: "eogito",
            name: "Stone Pickaxe Bag"
        }, {
            id: 6,
            day: IMAGES.BAG13D,
            night: IMAGES.BAG13N,
            rarity: RARITY.STONE,
            author: "Communist",
            name: "Bag Camouflage"
        }, {
            id: 38,
            day: IMAGES.BAG37D,
            night: IMAGES.BAG37N,
            rarity: RARITY.STONE,
            author: "eogito",
            name: "Bag with Stone Swords"
        }, {
            id: 54,
            day: IMAGES.BAG53D,
            night: IMAGES.BAG53N,
            rarity: RARITY.STONE,
            author: "eogito",
            name: "Cow Bag"
        }, {
            id: 59,
            day: IMAGES.BAG58D,
            night: IMAGES.BAG58N,
            rarity: RARITY.STONE,
            author: "CrysTal",
            name: "Starver Bag"
        }, {
            id: 62,
            day: IMAGES.BAG61D,
            night: IMAGES.BAG61N,
            rarity: RARITY.STONE,
            author: "CrysTal",
            name: "Crystal Sky Bag"
        }, {
            id: 13,
            day: IMAGES.BAG10D,
            night: IMAGES.BAG10N,
            rarity: RARITY.GOLD,
            author: "pizza wa",
            name: "Honey Pot"
        }, {
            id: 21,
            day: IMAGES.BAG18D,
            night: IMAGES.BAG18N,
            rarity: RARITY.GOLD,
            author: "Starve.io ",
            name: "Gold Carrier"
        }, {
            id: 30,
            day: IMAGES.BAG25D,
            night: IMAGES.BAG25N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Gold Pickaxe Bag"
        }, {
            id: 29,
            day: IMAGES.BAG31D,
            night: IMAGES.BAG31N,
            rarity: RARITY.GOLD,
            author: "Ariel",
            name: "Mr and Mrs Bakers"
        }, {
            id: 41,
            day: IMAGES.BAG40D,
            night: IMAGES.BAG40N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Bag with Golden Swords"
        }, {
            id: 47,
            day: IMAGES.BAG46D,
            night: IMAGES.BAG46N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Explorer Bag"
        }, {
            id: 51,
            day: IMAGES.BAG50D,
            night: IMAGES.BAG50N,
            rarity: RARITY.GOLD,
            author: "pizza wa",
            name: "Bamboo Bag"
        }, {
            id: 53,
            day: IMAGES.BAG52D,
            night: IMAGES.BAG52N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Mummy Bag"
        }, {
            id: 58,
            day: IMAGES.BAG57D,
            night: IMAGES.BAG57N,
            rarity: RARITY.GOLD,
            author: "MADBalgouthi",
            name: "Watermelon Bag"
        }, {
            id: 60,
            day: IMAGES.BAG59D,
            night: IMAGES.BAG60N,
            rarity: RARITY.GOLD,
            author: "Taco4Life",
            name: "Garlic Bag"
        }, {
            id: 61,
            day: IMAGES.BAG60D,
            night: IMAGES.BAG59N,
            rarity: RARITY.GOLD,
            author: "Taco4Life",
            name: "Pumpkin Bag"
        }, {
            id: 64,
            day: IMAGES.BAG63D,
            night: IMAGES.BAG63N,
            rarity: RARITY.GOLD,
            author: "upfiz",
            name: "Oil Barel bag"
        }, {
            id: 67,
            day: IMAGES.BAG68D,
            night: IMAGES.BAG68N,
            rarity: RARITY.GOLD,
            author: "pizza wa",
            name: "Tree Bag"
        }, {
            id: 14,
            day: IMAGES.BAG1D,
            night: IMAGES.BAG1N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "a Rabbit in my Bag"
        }, {
            id: 15,
            day: IMAGES.BAG2D,
            night: IMAGES.BAG2N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Bird's nest"
        }, {
            id: 16,
            day: IMAGES.BAG3D,
            night: IMAGES.BAG3N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "a Fish on your Back"
        }, {
            id: 17,
            day: IMAGES.BAG8D,
            night: IMAGES.BAG8N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "a Squirrel in my Bag"
        }, {
            id: 22,
            day: IMAGES.BAG19D,
            night: IMAGES.BAG19N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io ",
            name: "Diamond Carrier"
        }, {
            id: 12,
            day: IMAGES.BAG22D,
            night: IMAGES.BAG22N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Resources Bag"
        }, {
            id: 32,
            day: IMAGES.BAG26D,
            night: IMAGES.BAG26N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Diamond Pickaxe Bag"
        }, {
            id: 40,
            day: IMAGES.BAG39D,
            night: IMAGES.BAG39N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Bag with Diamond Swords"
        }, {
            id: 45,
            day: IMAGES.BAG44D,
            night: IMAGES.BAG44N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "My Cake Bag"
        }, {
            id: 46,
            day: IMAGES.BAG45D,
            night: IMAGES.BAG45N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "My Christmas Cake Bag"
        }, {
            id: 52,
            day: IMAGES.BAG51D,
            night: IMAGES.BAG51N,
            rarity: RARITY.DIAMOND,
            author: "MADBalgouthi",
            name: "Fish Bag"
        }, {
            id: 65,
            day: IMAGES.BAG64D,
            night: IMAGES.BAG64N,
            rarity: RARITY.DIAMOND,
            author: "pizza wa",
            name: "Cloud Bag"
        }, {
            id: 68,
            day: IMAGES.BAG66D,
            night: IMAGES.BAG66N,
            rarity: RARITY.DIAMOND,
            author: "pizza wa",
            name: "Bee Bag"
        }, {
            id: 48,
            day: IMAGES.BAG47D,
            night: IMAGES.BAG47N,
            rarity: RARITY.AMETHYST,
            author: "fatant",
            name: "Natural Bag"
        }, {
            id: 23,
            day: IMAGES.BAG20D,
            night: IMAGES.BAG20N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io ",
            name: "Amethyst Carrier"
        }, {
            id: 25,
            day: IMAGES.BAG27D,
            night: IMAGES.BAG27N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Amethyst Pickaxe Bag"
        }, {
            id: 28,
            day: IMAGES.BAG30D,
            night: IMAGES.BAG30N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Your Baby"
        }, {
            id: 33,
            day: IMAGES.BAG32D,
            night: IMAGES.BAG32N,
            rarity: RARITY.AMETHYST,
            author: "pizza wa",
            name: "Tropical Bag"
        }, {
            id: 43,
            day: IMAGES.BAG42D,
            night: IMAGES.BAG42N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Bag with Amethyst Swords"
        }, {
            id: 35,
            day: IMAGES.BAG34D,
            night: IMAGES.BAG34N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Ice Bag"
        }, {
            id: 50,
            day: IMAGES.BAG49D,
            night: IMAGES.BAG49N,
            rarity: RARITY.AMETHYST,
            author: "Taco4Life",
            name: "Thornbush Bag"
        }, {
            id: 56,
            day: IMAGES.BAG55D,
            night: IMAGES.BAG55N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Autumn Bag"
        }, {
            id: 57,
            day: IMAGES.BAG56D,
            night: IMAGES.BAG56N,
            rarity: RARITY.AMETHYST,
            author: "Taco4Life",
            name: "Dino Egg Bag"
        }, {
            id: 66,
            day: IMAGES.BAG65D,
            night: IMAGES.BAG65N,
            rarity: RARITY.AMETHYST,
            author: "pizza wa",
            name: "Magic Cloud Bag"
        }, {
            id: 69,
            day: IMAGES.BAG67D,
            night: IMAGES.BAG67N,
            rarity: RARITY.AMETHYST,
            author: "pizza wa",
            name: "Chest Bag"
        }, {
            id: 31,
            day: IMAGES.BAG21D,
            night: IMAGES.BAG21N,
            rarity: RARITY.REIDITE,
            author: "Starve.io ",
            name: "Reidite Carrier"
        }, {
            id: 18,
            day: IMAGES.BAG11D,
            night: IMAGES.BAG11N,
            rarity: RARITY.REIDITE,
            author: "Winter",
            name: "Lava Bag"
        }, {
            id: 49,
            day: IMAGES.BAG48D,
            night: IMAGES.BAG48N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Lava Bag 2"
        }, {
            id: 36,
            day: IMAGES.BAG35D,
            night: IMAGES.BAG35N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Dragon Bag"
        }, {
            id: 55,
            day: IMAGES.BAG54D,
            night: IMAGES.BAG54N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Winter Ice Bag"
        }, {
            id: 26,
            day: IMAGES.BAG28D,
            night: IMAGES.BAG28N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Reidite Pickaxe Bag"
        }, {
            id: 27,
            day: IMAGES.BAG29D,
            night: IMAGES.BAG29N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Octopus Bowl"
        }, {
            id: 34,
            day: IMAGES.BAG33D,
            night: IMAGES.BAG33N,
            rarity: RARITY.REIDITE,
            author: "Taco4Life",
            name: "Cave Bag"
        }, {
            id: 42,
            day: IMAGES.BAG41D,
            night: IMAGES.BAG41N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Bag with Reidite Swords"
        }, {
            id: 63,
            day: IMAGES.BAG62D,
            night: IMAGES.BAG62N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Engineer Bag"
        }],
        CRATE: [{
            id: 0,
            day: IMAGES.CRATE7D,
            night: IMAGES.CRATE7N,
            rarity: RARITY.FREE,
            author: "eogito",
            name: "Wooden Dead Box"
        }, {
            id: 1,
            day: IMAGES.CRATE6D,
            night: IMAGES.CRATE6N,
            rarity: RARITY.FREE,
            author: "eogito",
            name: "Hidden item"
        }, {
            id: 2,
            day: IMAGES.CRATE1D,
            night: IMAGES.CRATE1N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Wooden Box 1"
        }, {
            id: 3,
            day: IMAGES.CRATE2D,
            night: IMAGES.CRATE2N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Wooden Box 2"
        }, {
            id: 4,
            day: IMAGES.CRATE3D,
            night: IMAGES.CRATE3N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Wooden Box 3"
        }, {
            id: 5,
            day: IMAGES.CRATE4D,
            night: IMAGES.CRATE4N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Broken Wooden Box"
        }, {
            id: 6,
            day: IMAGES.CRATE5D,
            night: IMAGES.CRATE5N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Wooden Box"
        }, {
            id: 7,
            day: IMAGES.CRATE8D,
            night: IMAGES.CRATE8N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Wooden Battle Box"
        }, {
            id: 8,
            day: IMAGES.CRATE9D,
            night: IMAGES.CRATE9N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Wooden Box with a Cross"
        }, {
            id: 9,
            day: IMAGES.CRATE10D,
            night: IMAGES.CRATE10N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Wooden Box with Bubbles"
        }, {
            id: 10,
            day: IMAGES.CRATE11D,
            night: IMAGES.CRATE11N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Wooden Box with Eyes"
        }, {
            id: 11,
            day: IMAGES.CRATE12D,
            night: IMAGES.CRATE12N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Dark Wooden Box"
        }, {
            id: 38,
            day: IMAGES.CRATE39D,
            night: IMAGES.CRATE39N,
            rarity: RARITY.WOOD,
            author: "Weddlz",
            name: "Noob Box"
        }, {
            id: 12,
            day: IMAGES.CRATE13D,
            night: IMAGES.CRATE13N,
            rarity: RARITY.STONE,
            author: "eogito",
            name: "Wooden and Stone Box"
        }, {
            id: 14,
            day: IMAGES.CRATE19D,
            night: IMAGES.CRATE19N,
            rarity: RARITY.STONE,
            author: "pizza wa",
            name: "Star Box 1"
        }, {
            id: 15,
            day: IMAGES.CRATE20D,
            night: IMAGES.CRATE20N,
            rarity: RARITY.STONE,
            author: "pizza wa",
            name: "Star Box 2"
        }, {
            id: 27,
            day: IMAGES.CRATE29D,
            night: IMAGES.CRATE29N,
            rarity: RARITY.STONE,
            author: "eogito",
            name: "Flower Box"
        }, {
            id: 46,
            day: IMAGES.CRATE47D,
            night: IMAGES.CRATE47N,
            rarity: RARITY.STONE,
            author: "MADBalgouthi",
            name: "Blue Box"
        }, {
            id: 19,
            day: IMAGES.CRATE21D,
            night: IMAGES.CRATE21N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Beehive"
        }, {
            id: 13,
            day: IMAGES.CRATE14D,
            night: IMAGES.CRATE14N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Wooden and Golden Box"
        }, {
            id: 21,
            day: IMAGES.CRATE22D,
            night: IMAGES.CRATE22N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Gravestone"
        }, {
            id: 25,
            day: IMAGES.CRATE26D,
            night: IMAGES.CRATE26N,
            rarity: RARITY.GOLD,
            author: "Communist",
            name: "Sky Box"
        }, {
            id: 29,
            day: IMAGES.CRATE30D,
            night: IMAGES.CRATE30N,
            rarity: RARITY.GOLD,
            author: "Winter",
            name: "Golden Box"
        }, {
            id: 34,
            day: IMAGES.CRATE35D,
            night: IMAGES.CRATE35N,
            rarity: RARITY.GOLD,
            author: "Communist",
            name: "Water Crate"
        }, {
            id: 35,
            day: IMAGES.CRATE36D,
            night: IMAGES.CRATE36N,
            rarity: RARITY.GOLD,
            author: "Communist",
            name: "Glass Crate"
        }, {
            id: 16,
            day: IMAGES.CRATE15D,
            night: IMAGES.CRATE15N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Wooden and Diamond Box"
        }, {
            id: 18,
            day: IMAGES.CRATE18D,
            night: IMAGES.CRATE18N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Don't Hit Me"
        }, {
            id: 26,
            day: IMAGES.CRATE27D,
            night: IMAGES.CRATE27N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Underwater Box"
        }, {
            id: 31,
            day: IMAGES.CRATE32D,
            night: IMAGES.CRATE32N,
            rarity: RARITY.DIAMOND,
            author: "Communist",
            name: "Items Pile"
        }, {
            id: 32,
            day: IMAGES.CRATE33D,
            night: IMAGES.CRATE33N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Cake Box"
        }, {
            id: 33,
            day: IMAGES.CRATE34D,
            night: IMAGES.CRATE34N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Christmas Cake Box"
        }, {
            id: 36,
            day: IMAGES.CRATE37D,
            night: IMAGES.CRATE37N,
            rarity: RARITY.DIAMOND,
            author: "Fukss",
            name: "Crab Box"
        }, {
            id: 42,
            day: IMAGES.CRATE43D,
            night: IMAGES.CRATE43N,
            rarity: RARITY.DIAMOND,
            author: "MADBalgouthi",
            name: "Fishing Box"
        }, {
            id: 22,
            day: IMAGES.CRATE23D,
            night: IMAGES.CRATE23N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Let me out of here"
        }, {
            id: 17,
            day: IMAGES.CRATE16D,
            night: IMAGES.CRATE16N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Wooden and Amethyst Box"
        }, {
            id: 24,
            day: IMAGES.CRATE25D,
            night: IMAGES.CRATE25N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Aquarium"
        }, {
            id: 28,
            day: IMAGES.CRATE28D,
            night: IMAGES.CRATE28N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Gift Box"
        }, {
            id: 40,
            day: IMAGES.CRATE41D,
            night: IMAGES.CRATE41N,
            rarity: RARITY.AMETHYST,
            author: "MADBalgouthi",
            name: "Open Watermelon Box"
        }, {
            id: 41,
            day: IMAGES.CRATE42D,
            night: IMAGES.CRATE42N,
            rarity: RARITY.AMETHYST,
            author: "MADBalgouthi",
            name: "Watermelon Box"
        }, {
            id: 39,
            day: IMAGES.CRATE40D,
            night: IMAGES.CRATE40N,
            rarity: RARITY.AMETHYST,
            author: "Taco4Life",
            name: "Thornbush Box"
        }, {
            id: 43,
            day: IMAGES.CRATE44D,
            night: IMAGES.CRATE44N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Rabbit in the Box"
        }, {
            id: 47,
            day: IMAGES.CRATE48D,
            night: IMAGES.CRATE48N,
            rarity: RARITY.AMETHYST,
            author: "Taco4Life",
            name: "Garlic Plot"
        }, {
            id: 48,
            day: IMAGES.CRATE49D,
            night: IMAGES.CRATE49N,
            rarity: RARITY.AMETHYST,
            author: "Taco4Life",
            name: "Pumpkin Plot"
        }, {
            id: 45,
            day: IMAGES.CRATE46D,
            night: IMAGES.CRATE46N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Autumn Box"
        }, {
            id: 44,
            day: IMAGES.CRATE45D,
            night: IMAGES.CRATE45N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Winter Box"
        }, {
            id: 20,
            day: IMAGES.CRATE17D,
            night: IMAGES.CRATE17N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Metal and Reidite Box"
        }, {
            id: 23,
            day: IMAGES.CRATE24D,
            night: IMAGES.CRATE24N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Kraken Box"
        }, {
            id: 30,
            day: IMAGES.CRATE31D,
            night: IMAGES.CRATE31N,
            rarity: RARITY.REIDITE,
            author: "Winter",
            name: "Lava Box"
        }, {
            id: 37,
            day: IMAGES.CRATE38D,
            night: IMAGES.CRATE38N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Lava Box 2"
        }, {
            id: 49,
            day: IMAGES.CRATE50D,
            night: IMAGES.CRATE50N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Rabbit"
        }, {
            id: 50,
            day: IMAGES.CRATE51D,
            night: IMAGES.CRATE51N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Wolf"
        }, {
            id: 51,
            day: IMAGES.CRATE52D,
            night: IMAGES.CRATE52N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Spider"
        }, {
            id: 52,
            day: IMAGES.CRATE53D,
            night: IMAGES.CRATE53N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Hawk"
        }, {
            id: 53,
            day: IMAGES.CRATE54D,
            night: IMAGES.CRATE54N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Bear"
        }, {
            id: 54,
            day: IMAGES.CRATE55D,
            night: IMAGES.CRATE55N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Fox"
        }, {
            id: 55,
            day: IMAGES.CRATE56D,
            night: IMAGES.CRATE56N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Baby Mammoth"
        }, {
            id: 56,
            day: IMAGES.CRATE57D,
            night: IMAGES.CRATE57N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Mammoth"
        }, {
            id: 57,
            day: IMAGES.CRATE58D,
            night: IMAGES.CRATE58N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Sandworm"
        }, {
            id: 58,
            day: IMAGES.CRATE59D,
            night: IMAGES.CRATE59N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Vulture"
        }, {
            id: 59,
            day: IMAGES.CRATE60D,
            night: IMAGES.CRATE60N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Kraken"
        }, {
            id: 60,
            day: IMAGES.CRATE61D,
            night: IMAGES.CRATE61N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Piranha"
        }, {
            id: 61,
            day: IMAGES.CRATE62D,
            night: IMAGES.CRATE62N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Baby Dragon"
        }, {
            id: 62,
            day: IMAGES.CRATE63D,
            night: IMAGES.CRATE63N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Baby Lava"
        }, {
            id: 63,
            day: IMAGES.CRATE64D,
            night: IMAGES.CRATE64N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Dragon"
        }, {
            id: 64,
            day: IMAGES.CRATE65D,
            night: IMAGES.CRATE65N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Penguin"
        }, {
            id: 65,
            day: IMAGES.CRATE66D,
            night: IMAGES.CRATE66N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Lava Dragon"
        }, {
            id: 66,
            day: IMAGES.CRATE67D,
            night: IMAGES.CRATE67N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Boar"
        }, {
            id: 67,
            day: IMAGES.CRATE68D,
            night: IMAGES.CRATE68N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Fire mob"
        }, {
            id: 68,
            day: IMAGES.CRATE69D,
            night: IMAGES.CRATE69N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the Crab"
        }, {
            id: 69,
            day: IMAGES.CRATE70D,
            night: IMAGES.CRATE70N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Box of the King Crab"
        }, {
            id: 70,
            day: IMAGES.CRATE71D,
            night: IMAGES.CRATE71N,
            rarity: RARITY.GOLD,
            author: "CrysTal",
            name: "Crystal Sky Box"
        }, {
            id: 71,
            day: IMAGES.CRATE72D,
            night: IMAGES.CRATE72N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Dragon Box"
        }],
        BOOK: [{
            id: 0,
            day: IMAGES.BOOK0D,
            night: IMAGES.BOOK0N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Book 1"
        }, {
            id: 1,
            day: IMAGES.BOOK3D,
            night: IMAGES.BOOK3N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Book 2"
        }, {
            id: 2,
            day: IMAGES.BOOK4D,
            night: IMAGES.BOOK4N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Book 3"
        }, {
            id: 3,
            day: IMAGES.BOOK5D,
            night: IMAGES.BOOK5N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Book 4"
        }, {
            id: 4,
            day: IMAGES.BOOK6D,
            night: IMAGES.BOOK6N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Damaged Book 1"
        }, {
            id: 18,
            day: IMAGES.BOOK18D,
            night: IMAGES.BOOK18N,
            rarity: RARITY.WOOD,
            author: "SeveR",
            name: "Damaged Book 2"
        }, {
            id: 5,
            day: IMAGES.BOOK1D,
            night: IMAGES.BOOK1N,
            rarity: RARITY.STONE,
            author: "Doctorpus",
            name: "Scroll"
        }, {
            id: 6,
            day: IMAGES.BOOK2D,
            night: IMAGES.BOOK2N,
            rarity: RARITY.STONE,
            author: "Doctorpus",
            name: "Clipboard"
        }, {
            id: 7,
            day: IMAGES.BOOK7D,
            night: IMAGES.BOOK7N,
            rarity: RARITY.STONE,
            author: "eogito",
            name: "Seed Book"
        }, {
            id: 20,
            day: IMAGES.BOOK20D,
            night: IMAGES.BOOK20N,
            rarity: RARITY.STONE,
            author: "Taco4Life",
            name: "Camo Book"
        }, {
            id: 24,
            day: IMAGES.BOOK24D,
            night: IMAGES.BOOK24N,
            rarity: RARITY.STONE,
            author: "Communist",
            name: "Stone Tablet"
        }, {
            id: 10,
            day: IMAGES.BOOK13D,
            night: IMAGES.BOOK13N,
            rarity: RARITY.GOLD,
            author: "pizza wa",
            name: "Star Book"
        }, {
            id: 8,
            day: IMAGES.BOOK9D,
            night: IMAGES.BOOK9N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Gold Book"
        }, {
            id: 15,
            day: IMAGES.BOOK15D,
            night: IMAGES.BOOK15N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Old Mysterious Paper"
        }, {
            id: 17,
            day: IMAGES.BOOK17D,
            night: IMAGES.BOOK17N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Gold Engraving"
        }, {
            id: 25,
            day: IMAGES.BOOK25D,
            night: IMAGES.BOOK25N,
            rarity: RARITY.GOLD,
            author: "fatant",
            name: "Ant Book"
        }, {
            id: 32,
            day: IMAGES.BOOK32D,
            night: IMAGES.BOOK32N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Mummy Book"
        }, {
            id: 37,
            day: IMAGES.BOOK39D,
            night: IMAGES.BOOK39N,
            rarity: RARITY.GOLD,
            author: "Taco4Life",
            name: "Garlic Book"
        }, {
            id: 38,
            day: IMAGES.BOOK38D,
            night: IMAGES.BOOK38N,
            rarity: RARITY.GOLD,
            author: "Taco4Life",
            name: "Pumpkin Book"
        }, {
            id: 39,
            day: IMAGES.BOOK40D,
            night: IMAGES.BOOK40N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Christmas Tree Book"
        }, {
            id: 11,
            day: IMAGES.BOOK10D,
            night: IMAGES.BOOK10N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Diamond Book"
        }, {
            id: 9,
            day: IMAGES.BOOK8D,
            night: IMAGES.BOOK8N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Obscure Book"
        }, {
            id: 16,
            day: IMAGES.BOOK16D,
            night: IMAGES.BOOK16N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Rolled Parchment"
        }, {
            id: 22,
            day: IMAGES.BOOK22D,
            night: IMAGES.BOOK22N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Cake Book"
        }, {
            id: 23,
            day: IMAGES.BOOK23D,
            night: IMAGES.BOOK23N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Christmas Cake Book"
        }, {
            id: 30,
            day: IMAGES.BOOK30D,
            night: IMAGES.BOOK30N,
            rarity: RARITY.DIAMOND,
            author: "MADBalgouthi",
            name: "Fish Book"
        }, {
            id: 31,
            day: IMAGES.BOOK31D,
            night: IMAGES.BOOK31N,
            rarity: RARITY.DIAMOND,
            author: "CrysTal",
            name: "Once upon a time"
        }, {
            id: 13,
            day: IMAGES.BOOK11D,
            night: IMAGES.BOOK11N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Amethyst Book"
        }, {
            id: 28,
            day: IMAGES.BOOK28D,
            night: IMAGES.BOOK28N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Paint Pallet"
        }, {
            id: 29,
            day: IMAGES.BOOK29D,
            night: IMAGES.BOOK29N,
            rarity: RARITY.AMETHYST,
            author: "CrysTal",
            name: "Watermelon Book"
        }, {
            id: 27,
            day: IMAGES.BOOK27D,
            night: IMAGES.BOOK27N,
            rarity: RARITY.AMETHYST,
            author: "Taco4Life",
            name: "Thornbush Book"
        }, {
            id: 35,
            day: IMAGES.BOOK35D,
            night: IMAGES.BOOK35N,
            rarity: RARITY.AMETHYST,
            author: "Taco4Life",
            name: "Menu"
        }, {
            id: 36,
            day: IMAGES.BOOK36D,
            night: IMAGES.BOOK36N,
            rarity: RARITY.AMETHYST,
            author: "CrysTal",
            name: "Lover Letter"
        }, {
            id: 40,
            day: IMAGES.BOOK41D,
            night: IMAGES.BOOK41N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Fresh-Baked Cookies"
        }, {
            id: 41,
            day: IMAGES.BOOK42D,
            night: IMAGES.BOOK42N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Inside, there is just a book."
        }, {
            id: 33,
            day: IMAGES.BOOK33D,
            night: IMAGES.BOOK33N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Winter Book"
        }, {
            id: 34,
            day: IMAGES.BOOK34D,
            night: IMAGES.BOOK34N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Autumn Book"
        }, {
            id: 14,
            day: IMAGES.BOOK12D,
            night: IMAGES.BOOK12N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Reidite Book"
        }, {
            id: 12,
            day: IMAGES.BOOK14D,
            night: IMAGES.BOOK14N,
            rarity: RARITY.REIDITE,
            author: "Winter",
            name: "Lava Book"
        }, {
            id: 26,
            day: IMAGES.BOOK26D,
            night: IMAGES.BOOK26N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Lava Book 2"
        }, {
            id: 19,
            day: IMAGES.BOOK19D,
            night: IMAGES.BOOK19N,
            rarity: RARITY.REIDITE,
            author: "Winter",
            name: "Ocean Mystery"
        }, {
            id: 21,
            day: IMAGES.BOOK21D,
            night: IMAGES.BOOK21N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Dragon Book"
        }, {
            id: 42,
            day: IMAGES.BOOK43D,
            night: IMAGES.BOOK43N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Engineer Book"
        }, {
            id: 43,
            day: IMAGES.BOOK44D,
            night: IMAGES.BOOK44N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Nightmare Book"
        }, {
            id: 44,
            day: IMAGES.BOOK45D,
            night: IMAGES.BOOK45N,
            rarity: RARITY.REIDITE,
            author: "aloner",
            name: "Mystery Book"
        }],
        ACCESSORY: [{
            id: 0,
            day: IMAGES.ACCESSORY0D,
            night: IMAGES.ACCESSORY0D,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Nothing"
        }, {
            id: 2,
            day: IMAGES.ACCESSORY4D,
            night: IMAGES.ACCESSORY4N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Pink Cheeks"
        }, {
            id: 3,
            day: IMAGES.ACCESSORY5D,
            night: IMAGES.ACCESSORY5N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Heart"
        }, {
            id: 1,
            day: IMAGES.ACCESSORY3D,
            night: IMAGES.ACCESSORY3N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Bandage 1"
        }, {
            id: 4,
            day: IMAGES.ACCESSORY6D,
            night: IMAGES.ACCESSORY6N,
            rarity: RARITY.FREE,
            author: "Starve.io",
            name: "Flower 1"
        }, {
            id: 5,
            day: IMAGES.ACCESSORY8D,
            night: IMAGES.ACCESSORY8N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Bow 1"
        }, {
            id: 6,
            day: IMAGES.ACCESSORY9D,
            night: IMAGES.ACCESSORY9N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Bandage 2"
        }, {
            id: 7,
            day: IMAGES.ACCESSORY15D,
            night: IMAGES.ACCESSORY15N,
            rarity: RARITY.WOOD,
            author: "Starve.io",
            name: "Flower 2"
        }, {
            id: 8,
            day: IMAGES.ACCESSORY10D,
            night: IMAGES.ACCESSORY10N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Bandage 3"
        }, {
            id: 36,
            day: IMAGES.ACCESSORY36D,
            night: IMAGES.ACCESSORY36N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Foliage"
        }, {
            id: 59,
            day: IMAGES.ACCESSORY47D,
            night: IMAGES.ACCESSORY47N,
            rarity: RARITY.WOOD,
            author: "eogito",
            name: "Peaceful"
        }, {
            id: 67,
            day: IMAGES.ACCESSORY55D,
            night: IMAGES.ACCESSORY55N,
            rarity: RARITY.WOOD,
            author: "pizza wa",
            name: "Sparkles"
        }, {
            id: 68,
            day: IMAGES.ACCESSORY56D,
            night: IMAGES.ACCESSORY56N,
            rarity: RARITY.WOOD,
            author: "pizza wa",
            name: "Luxury"
        }, {
            id: 69,
            day: IMAGES.ACCESSORY57D,
            night: IMAGES.ACCESSORY57N,
            rarity: RARITY.WOOD,
            author: "pizza wa",
            name: "Snow Flakes Crown"
        }, {
            id: 17,
            day: IMAGES.ACCESSORY17D,
            night: IMAGES.ACCESSORY17N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Glasses 1"
        }, {
            id: 10,
            day: IMAGES.ACCESSORY7D,
            night: IMAGES.ACCESSORY7N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Bow 2"
        }, {
            id: 11,
            day: IMAGES.ACCESSORY13D,
            night: IMAGES.ACCESSORY13N,
            rarity: RARITY.STONE,
            author: "pizza wa",
            name: "Little Stars"
        }, {
            id: 12,
            day: IMAGES.ACCESSORY11D,
            night: IMAGES.ACCESSORY11N,
            rarity: RARITY.STONE,
            author: "eogito",
            name: "Pirate Eye Patch 1"
        }, {
            id: 44,
            day: IMAGES.ACCESSORY44D,
            night: IMAGES.ACCESSORY44N,
            rarity: RARITY.STONE,
            author: "Taco4Life",
            name: "Pirate Eye Patch 2"
        }, {
            id: 23,
            day: IMAGES.ACCESSORY23D,
            night: IMAGES.ACCESSORY23N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Clown nose"
        }, {
            id: 16,
            day: IMAGES.ACCESSORY2D,
            night: IMAGES.ACCESSORY2N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Eye Patch"
        }, {
            id: 30,
            day: IMAGES.ACCESSORY30D,
            night: IMAGES.ACCESSORY30N,
            rarity: RARITY.STONE,
            author: "eogito",
            name: "Flower 3"
        }, {
            id: 38,
            day: IMAGES.ACCESSORY38D,
            night: IMAGES.ACCESSORY38N,
            rarity: RARITY.STONE,
            author: "Winter",
            name: "False Nose"
        }, {
            id: 74,
            day: IMAGES.ACCESSORY62D,
            night: IMAGES.ACCESSORY62N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Red Cloth"
        }, {
            id: 75,
            day: IMAGES.ACCESSORY63D,
            night: IMAGES.ACCESSORY63N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Blue Cloth"
        }, {
            id: 79,
            day: IMAGES.ACCESSORY67D,
            night: IMAGES.ACCESSORY67N,
            rarity: RARITY.STONE,
            author: "Starve.io",
            name: "Transparent Mask"
        }, {
            id: 89,
            day: IMAGES.ACCESSORY77D,
            night: IMAGES.ACCESSORY77N,
            rarity: RARITY.STONE,
            author: "Anyone want to play?",
            name: "Starve.io Anime"
        }, {
            id: 94,
            day: IMAGES.ACCESSORY78D,
            night: IMAGES.ACCESSORY78N,
            rarity: RARITY.STONE,
            author: "Ant",
            name: "Hero Mask"
        }, {
            id: 15,
            day: IMAGES.ACCESSORY16D,
            night: IMAGES.ACCESSORY16N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Star Glasses"
        }, {
            id: 21,
            day: IMAGES.ACCESSORY21D,
            night: IMAGES.ACCESSORY21N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Great-aunt's Glasses"
        }, {
            id: 24,
            day: IMAGES.ACCESSORY24D,
            night: IMAGES.ACCESSORY24N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Little Starver"
        }, {
            id: 22,
            day: IMAGES.ACCESSORY22D,
            night: IMAGES.ACCESSORY22N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Little Glasses"
        }, {
            id: 13,
            day: IMAGES.ACCESSORY14D,
            night: IMAGES.ACCESSORY14N,
            rarity: RARITY.GOLD,
            author: "Starve.io",
            name: "Flower Chain"
        }, {
            id: 29,
            day: IMAGES.ACCESSORY29D,
            night: IMAGES.ACCESSORY29N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Horns"
        }, {
            id: 31,
            day: IMAGES.ACCESSORY31D,
            night: IMAGES.ACCESSORY31N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Golden Flower"
        }, {
            id: 40,
            day: IMAGES.ACCESSORY40D,
            night: IMAGES.ACCESSORY40N,
            rarity: RARITY.GOLD,
            author: "pizza wa",
            name: "Sleeping Mask"
        }, {
            id: 57,
            day: IMAGES.ACCESSORY50D,
            night: IMAGES.ACCESSORY50N,
            rarity: RARITY.GOLD,
            author: "Taco4Life",
            name: "Fish on your head"
        }, {
            id: 58,
            day: IMAGES.ACCESSORY46D,
            night: IMAGES.ACCESSORY46N,
            rarity: RARITY.GOLD,
            author: "eogito",
            name: "Rose"
        }, {
            id: 91,
            day: IMAGES.ACCESSORY80D,
            night: IMAGES.ACCESSORY80N,
            rarity: RARITY.GOLD,
            author: "upfiz",
            name: "Grey Scarf"
        }, {
            id: 92,
            day: IMAGES.ACCESSORY81D,
            night: IMAGES.ACCESSORY81N,
            rarity: RARITY.GOLD,
            author: "upfiz",
            name: "Black Scarf"
        }, {
            id: 93,
            day: IMAGES.ACCESSORY82D,
            night: IMAGES.ACCESSORY82N,
            rarity: RARITY.GOLD,
            author: "upfiz",
            name: "Skull Mask"
        }, {
            id: 9,
            day: IMAGES.ACCESSORY1D,
            night: IMAGES.ACCESSORY1N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Fancy Glasses"
        }, {
            id: 25,
            day: IMAGES.ACCESSORY25D,
            night: IMAGES.ACCESSORY25N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Medecin Mask"
        }, {
            id: 14,
            day: IMAGES.ACCESSORY12D,
            night: IMAGES.ACCESSORY12N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Mr. Mayor"
        }, {
            id: 19,
            day: IMAGES.ACCESSORY19D,
            night: IMAGES.ACCESSORY19N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Sunglasses 2"
        }, {
            id: 28,
            day: IMAGES.ACCESSORY28D,
            night: IMAGES.ACCESSORY28N,
            rarity: RARITY.DIAMOND,
            author: "pizza wa",
            name: "Starfish"
        }, {
            id: 37,
            day: IMAGES.ACCESSORY37D,
            night: IMAGES.ACCESSORY37N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Berry"
        }, {
            id: 39,
            day: IMAGES.ACCESSORY39D,
            night: IMAGES.ACCESSORY39N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Flake"
        }, {
            id: 43,
            day: IMAGES.ACCESSORY43D,
            night: IMAGES.ACCESSORY43N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Leaf "
        }, {
            id: 61,
            day: IMAGES.ACCESSORY49D,
            night: IMAGES.ACCESSORY49N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "A sword in your head"
        }, {
            id: 62,
            day: IMAGES.ACCESSORY51D,
            night: IMAGES.ACCESSORY51N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Winter Scarf"
        }, {
            id: 64,
            day: IMAGES.ACCESSORY53D,
            night: IMAGES.ACCESSORY53N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Winter Scarf 2"
        }, {
            id: 66,
            day: IMAGES.ACCESSORY54D,
            night: IMAGES.ACCESSORY54N,
            rarity: RARITY.DIAMOND,
            author: "eogito",
            name: "Winter Scarf 3"
        }, {
            id: 70,
            day: IMAGES.ACCESSORY58D,
            night: IMAGES.ACCESSORY58N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Mask with animal tracks"
        }, {
            id: 71,
            day: IMAGES.ACCESSORY59D,
            night: IMAGES.ACCESSORY59N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Spring Mask"
        }, {
            id: 72,
            day: IMAGES.ACCESSORY60D,
            night: IMAGES.ACCESSORY60N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Pink Mask"
        }, {
            id: 73,
            day: IMAGES.ACCESSORY61D,
            night: IMAGES.ACCESSORY61N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Blue Mask"
        }, {
            id: 76,
            day: IMAGES.ACCESSORY64D,
            night: IMAGES.ACCESSORY64N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Military Mask"
        }, {
            id: 77,
            day: IMAGES.ACCESSORY65D,
            night: IMAGES.ACCESSORY65N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Orange Mask"
        }, {
            id: 78,
            day: IMAGES.ACCESSORY66D,
            night: IMAGES.ACCESSORY66N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "White and Red Points Mask"
        }, {
            id: 80,
            day: IMAGES.ACCESSORY68D,
            night: IMAGES.ACCESSORY68N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Stick out your tongue Mask"
        }, {
            id: 81,
            day: IMAGES.ACCESSORY69D,
            night: IMAGES.ACCESSORY69N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Two Teeth Mask"
        }, {
            id: 82,
            day: IMAGES.ACCESSORY70D,
            night: IMAGES.ACCESSORY70N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Make-up Mask"
        }, {
            id: 83,
            day: IMAGES.ACCESSORY71D,
            night: IMAGES.ACCESSORY71N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Sad Mask"
        }, {
            id: 84,
            day: IMAGES.ACCESSORY72D,
            night: IMAGES.ACCESSORY72N,
            rarity: RARITY.DIAMOND,
            author: "Starve.io",
            name: "Happy Mask"
        }, {
            id: 90,
            day: IMAGES.ACCESSORY79D,
            night: IMAGES.ACCESSORY79N,
            rarity: RARITY.DIAMOND,
            author: "aloner",
            name: "Blood"
        }, {
            id: 27,
            day: IMAGES.ACCESSORY27D,
            night: IMAGES.ACCESSORY27N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Clown Face"
        }, {
            id: 20,
            day: IMAGES.ACCESSORY20D,
            night: IMAGES.ACCESSORY20N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Sunglasses 3"
        }, {
            id: 32,
            day: IMAGES.ACCESSORY32D,
            night: IMAGES.ACCESSORY32N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Engineer's Glasses"
        }, {
            id: 33,
            day: IMAGES.ACCESSORY33D,
            night: IMAGES.ACCESSORY33N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Engineer's Monocle"
        }, {
            id: 34,
            day: IMAGES.ACCESSORY34D,
            night: IMAGES.ACCESSORY34N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Mauve's butt"
        }, {
            id: 41,
            day: IMAGES.ACCESSORY41D,
            night: IMAGES.ACCESSORY41N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Lapa Head"
        }, {
            id: 42,
            day: IMAGES.ACCESSORY42D,
            night: IMAGES.ACCESSORY42N,
            rarity: RARITY.AMETHYST,
            author: "eogito",
            name: "Lapa Head "
        }, {
            id: 85,
            day: IMAGES.ACCESSORY73D,
            night: IMAGES.ACCESSORY73N,
            rarity: RARITY.AMETHYST,
            author: "Starve.io",
            name: "Mask and Glasses"
        }, {
            id: 60,
            day: IMAGES.ACCESSORY48D,
            night: IMAGES.ACCESSORY48N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Jason"
        }, {
            id: 26,
            day: IMAGES.ACCESSORY26D,
            night: IMAGES.ACCESSORY26N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Devil Horns"
        }, {
            id: 18,
            day: IMAGES.ACCESSORY18D,
            night: IMAGES.ACCESSORY18N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Big Boss"
        }, {
            id: 35,
            day: IMAGES.ACCESSORY35D,
            night: IMAGES.ACCESSORY35N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Baby Kraken"
        }, {
            id: 63,
            day: IMAGES.ACCESSORY52D,
            night: IMAGES.ACCESSORY52N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Deer Antlers"
        }, {
            id: 65,
            day: IMAGES.ACCESSORY45D,
            night: IMAGES.ACCESSORY45N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Baby Dragon on your head"
        }, {
            id: 86,
            day: IMAGES.ACCESSORY74D,
            night: IMAGES.ACCESSORY74N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Gaz Mask and Glasses"
        }, {
            id: 87,
            day: IMAGES.ACCESSORY75D,
            night: IMAGES.ACCESSORY75N,
            rarity: RARITY.REIDITE,
            author: "Starve.io",
            name: "Pink Gaz Mask and Glasses"
        }, {
            id: 88,
            day: IMAGES.ACCESSORY76D,
            night: IMAGES.ACCESSORY76N,
            rarity: RARITY.REIDITE,
            author: "eogito",
            name: "Engineer Glasses"
        }, {
            id: 45,
            day: IMAGES.LEVEL5D,
            night: IMAGES.LEVEL5N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 5",
            level: 5
        }, {
            id: 46,
            day: IMAGES.LEVEL10D,
            night: IMAGES.LEVEL10N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 10",
            level: 10
        }, {
            id: 47,
            day: IMAGES.LEVEL15D,
            night: IMAGES.LEVEL15N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 15",
            level: 15
        }, {
            id: 48,
            day: IMAGES.LEVEL20D,
            night: IMAGES.LEVEL20N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 20",
            level: 20
        }, {
            id: 49,
            day: IMAGES.LEVEL25D,
            night: IMAGES.LEVEL25N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 25",
            level: 25
        }, {
            id: 50,
            day: IMAGES.LEVEL30D,
            night: IMAGES.LEVEL30N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 30",
            level: 30
        }, {
            id: 51,
            day: IMAGES.LEVEL35D,
            night: IMAGES.LEVEL35N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 35",
            level: 35
        }, {
            id: 52,
            day: IMAGES.LEVEL40D,
            night: IMAGES.LEVEL40N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 40",
            level: 40
        }, {
            id: 53,
            day: IMAGES.LEVEL45D,
            night: IMAGES.LEVEL45N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 45",
            level: 45
        }, {
            id: 54,
            day: IMAGES.LEVEL50D,
            night: IMAGES.LEVEL50N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 50",
            level: 50
        }, {
            id: 55,
            day: IMAGES.LEVEL55D,
            night: IMAGES.LEVEL55N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 55",
            level: 55
        }, {
            id: 56,
            day: IMAGES.LEVEL60D,
            night: IMAGES.LEVEL60N,
            rarity: RARITY.LEVEL,
            author: "Starve.io",
            name: "More than Level 60",
            level: 60
        }]
    }, WORLD.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21), WORLD.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20), sprite[SPRITE.BODY] = [], sprite[SPRITE.HAND] = [], sprite[SPRITE.CRATE] = [], sprite[SPRITE.BOOK] = [], sprite[SPRITE.BAG] = [], sprite[SPRITE.ACCESSORY] = [];
    for (var e = 0; e < COSMETICS.SKIN.length; e++) sprite[SPRITE.BODY][e] = [COSMETICS.SKIN[e].day, COSMETICS.SKIN[e].night], sprite[SPRITE.HAND][e] = [COSMETICS.SKIN[e].dayHand, COSMETICS.SKIN[e].nightHand];
    for (e = 0; e < COSMETICS.BOOK.length; e++) sprite[SPRITE.BOOK][e] = [COSMETICS.BOOK[e].day, COSMETICS.BOOK[e].night];
    for (e = 0; e < COSMETICS.CRATE.length; e++) sprite[SPRITE.CRATE][e] = [COSMETICS.CRATE[e].day, COSMETICS.CRATE[e].night];
    for (e = 0; e < COSMETICS.BAG.length; e++) sprite[SPRITE.BAG][e] = [COSMETICS.BAG[e].day, COSMETICS.BAG[e].night];
    for (e = 0; e < COSMETICS.ACCESSORY.length; e++) sprite[SPRITE.ACCESSORY][e] = [COSMETICS.ACCESSORY[e].day, COSMETICS.ACCESSORY[e].night]
}, INFO_BOX = [], PLAYER_LEVEL = [];
var __BANDAGE__ = [];

function draw_status() {
    var e = -8,
        t = -8;
    if (user.auto_feed.enabled) {
        var i = sprite[SPRITE.AUTO_FEED];
        ctxDrawImage(ctx, i, user.auto_feed.translate.x, user.auto_feed.translate.y + e), e += 70
    }
    if (1 === user.blizzard) {
        i = sprite[SPRITE.STOP_REGENERATION_BLIZZARD];
        ctxDrawImage(ctx, i, user.auto_feed.translate.x, user.auto_feed.translate.y + e), e += 70
    } else if (user.gauges.cold.x < .25 || user.gauges.hunger.x < .25 || user.gauges.thirst.x < .25 || user.gauges.oxygen.x < .25 || user.gauges.warm.x < .25) {
        i = sprite[SPRITE.STOP_REGENERATION];
        ctxDrawImage(ctx, i, user.auto_feed.translate.x, user.auto_feed.translate.y + e), e += 70
    }
    if (user.bandage > 0) {
        i = sprite[SPRITE.BANDAGE_ACTIVATED];
        ctxDrawImage(ctx, i, user.auto_feed.translate.x, user.auto_feed.translate.y + e);
        var r = __BANDAGE__[user.bandage];
        void 0 === r && (r = create_text(scale, user.bandage + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6), __BANDAGE__[user.bandage] = r), user.bandage < 9 ? ctxDrawImage(ctx, r, user.auto_feed.translate.x - 39, user.auto_feed.translate.y + e + 20) : ctxDrawImage(ctx, r, user.auto_feed.translate.x - 46, user.auto_feed.translate.y + e + 20)
    }
    HackSettings.StormAlert.enabled && (1 == user.winter.tempest && (ctxDrawImage(ctx, blizzard, user.auto_feed.translate.x, user.auto_feed.translate.y + e + t), e += 70, t += 70), 1 == user.desert.tempest && (ctxDrawImage(ctx, sandstorm, user.auto_feed.translate.x, user.auto_feed.translate.y + e + t), e += 70, t += 70))
}

function draw_leaderboard() {
    var e = user.ldb,
        t = game.leaderboard;
    if (e.update) {
        e.update = !1;
        var i = e.ids,
            r = t.can.width,
            a = t.can.height,
            n = t.ctx,
            o = world.players,
            s = !1;
        n.clearRect(0, 0, r, a), n.drawImage(t.img, 0, 0);
        for (var _ = 0; _ < i.length; _++) {
            var T = o[i[_]];
            world.mode === WORLD.MODE_HUNGER_GAMES && "spectator" === T.nickname || (world.mode === WORLD.MODE_ZOMBIES && T.skin === WORLD.ZOMBIE_SKIN || (i[_] == user.id ? (s = !0, world.mode === WORLD.MODE_VAMPIRES && T.skin === WORLD.VAMPIRE_SKIN ? color = "#FF0000" : color = "#FFF") : world.mode === WORLD.MODE_VAMPIRES && T.skin === WORLD.VAMPIRE_SKIN ? color = "#990000" : color = "#A1BDCD", n.drawImage(create_text(scale, "" + (_ + 1), 15 * scale, color), 20 * scale, (40 + 22 * _) * scale), T.ldb_label || (T.ldb_label = create_text(scale, T.nickname, 15 * scale, color, void 0, void 0, void 0, void 0, 110 * scale)), n.drawImage(T.ldb_label, 39 * scale, (40 + 22 * _) * scale), n.drawImage(create_text(scale, Utils.simplify_number(T.score), 15 * scale, color), 156 * scale, (40 + 22 * _) * scale)))
        }
        s || (world.mode === WORLD.MODE_PVP || world.mode === WORLD.MODE_VAMPIRES || world.mode === WORLD.MODE_LEGACY || world.mode === WORLD.MODE_BR || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_HUNGER_GAMES && !user.spectator || world.mode === WORLD.MODE_ZOMBIES && !user.zombie) && (n.drawImage(sprite[SPRITE.YOUR_SCORE], 15 * scale, (46 + 22 * _) * scale), n.drawImage(create_text(scale, Utils.simplify_number(world.players[user.id].score), 15 * scale, "#FFF"), 100 * scale, (46 + 22 * _) * scale))
    }
    ctxDrawImage(ctx, t.can, t.translate.x, t.translate.y)
}

function draw_totem_delay() {
    var e = user.totem;
    if (e.wait) {
        var t = e.timeout.update();
        ctx.save();
        var i = sprite[SPRITE.DELAY_TEAM],
            r = sprite[SPRITE.DELAY_WEAPON].height + 25 * scale;
        ctx.translate(i.width, game.gauges.translate.y - 188 * scale - r);
        var a = -i.width / 2 - 2,
            n = -i.height / 2 - 4;
        ctxDrawImage(ctx, i, a + 2, n), ctx.beginPath(), ctx.lineWidth = 5 * scale, ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time], ctx.lineCap = "round", ctx.arc(0, n + i.height / 2, 25 * scale, 0, 2 * Math.PI * e.timeout.v), ctx.stroke(), ctx.restore(), t && (e.wait = !1, e.timeout.v = 0, e.timeout.o = !1)
    }
}

function draw_clock() {
    var e = world.clock,
        t = sprite[SPRITE.CLOCK][world.time];
    ctxDrawImage(ctx, t, e.translate.x, e.translate.y), ctx.save(), ctx.translate(e.translate.x + t.width / 2, e.translate.y + t.height / 2), world.clock.now = ((new Date).getTime() - e.init + e.hour) % WORLD.DAY;
    var i = 2 * Math.PI * world.clock.now / WORLD.DAY - Math.PI / 2;
    ctx.rotate(i), ctxDrawImage(ctx, sprite[SPRITE.ARROW_CLOCK], -t.width / 2, -t.height / 2), ctx.restore(), HackSettings.FPS.enabled && (ctx.save(), ctx.strokeStyle = "black", ctx.fillStyle = "white", ctx.font = "30px Baloo Paaji", ctx.lineWidth = 5, ctx.strokeText(FPS + " FPS", e.translate.x - 110, e.translate.y + 50), ctx.fillText(FPS + " FPS", e.translate.x - 110, e.translate.y + 50), ctx.save())
}

function draw_build_delay() {
    var e = user.build;
    if (e.wait) {
        var t = e.timeout.update();
        ctx.save();
        var i = sprite[SPRITE.DELAY_WALL];
        ctx.translate(i.width - 12 * scale, game.gauges.translate.y - 190 * scale);
        var r = -i.width / 2 + 9,
            a = -i.height / 2 - 4;
        ctxDrawImage(ctx, i, r, a), ctx.beginPath(), ctx.lineWidth = 5 * scale, ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time], ctx.lineCap = "round", ctx.arc(9, a + i.height / 2, 25 * scale, 0, 2 * Math.PI * e.timeout.v), ctx.stroke(), ctx.restore(), t && (e.wait = !1, e.timeout.v = 0, e.timeout.o = !1)
    }
}

function draw_helmet_switch_delay() {
    var e = user.helmet;
    if (e.wait) {
        var t = e.timeout.update();
        ctx.save();
        var i = sprite[SPRITE.DELAY_HELMET];
        ctx.translate(i.width - 2 * scale, game.gauges.translate.y - 125 * scale);
        var r = -i.width / 2 + 10,
            a = -i.height / 2 - 4;
        ctxDrawImage(ctx, i, r, a), ctx.beginPath(), ctx.lineWidth = 5 * scale, ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time], ctx.lineCap = "round", ctx.arc(9, a + i.height / 2, 25 * scale, 0, 2 * Math.PI * e.timeout.v), ctx.stroke(), ctx.restore(), t && (e.wait = !1, e.timeout.v = 0, e.timeout.o = !1)
    }
}

function draw_weapon_switch_delay() {
    var e = user.weapon;
    if (e.wait) {
        var t = e.timeout.update();
        ctx.save();
        var i = sprite[SPRITE.DELAY_WEAPON];
        ctx.translate(i.width - 2 * scale, game.gauges.translate.y - 60 * scale);
        var r = -i.width / 2 - 2,
            a = -i.height / 2 - 4;
        ctxDrawImage(ctx, i, r, a), ctx.beginPath(), ctx.lineWidth = 5 * scale, ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time], ctx.lineCap = "round", ctx.arc(0, a + i.height / 2, 25 * scale, 0, 2 * Math.PI * e.timeout.v), ctx.stroke(), ctx.restore(), t && (e.wait = !1, e.timeout.v = 0, e.timeout.o = !1)
    }
}

function draw_ui_gear() {
    var e = user.craft;
    if (e.crafting) {
        var t = world.fast_units[user.uid];
        if (!t) return;
        ctx.save(), ctx.translate(user.cam.x + t.x, user.cam.y + t.y);
        var i = sprite[SPRITE.GEAR],
            r = -i.width / 2,
            a = -i.height / 2 - 125 * scale;
        ctxDrawImage(ctx, i, r, a), ctx.beginPath(), ctx.lineWidth = 5 * scale, ctx.strokeStyle = SPRITE.CRAFT_LOADING[world.time], ctx.lineCap = "round", ctx.arc(0, a + i.height / 2, 25 * scale, 0, 2 * Math.PI * e.timeout.v), ctx.stroke(), ctx.restore()
    }
}

function draw_ui_crafting() {
    var e = user.craft,
        t = world.fast_units[user.uid];
    if (!e.crafting && e.preview > 0) {
        if (!t) return;
        if (ctx.save(), 0 === INV_INFOS[e.preview].grid && 0 === e.mode) ctx.translate(user.cam.x + t.x, user.cam.y + t.y), ctx.rotate(t.angle), ctx.translate(120, 0);
        else {
            var i = Math.floor(t.x + 120 * Math.cos(t.angle)),
                r = Math.floor(t.y + 120 * Math.sin(t.angle));
            i = user.cam.x + (i - i % 100 + 50), r = user.cam.y + (r - r % 100 + 50), ctx.translate(i, r)
        }
        var a = sprite[e.preview][world.time];
        if (ctx.globalAlpha = .5, ctxDrawImage(ctx, a, -a.width / 2, -a.height / 2), ctx.globalAlpha = 1, ctx.restore(), HackSettings.ShowChunksInPreview.enabled && (e.preview === INV.CHEST || e.preview === INV.RESURRECTION)) {
            ctx.save();
            i = Math.floor(t.x + 120 * Math.cos(t.angle)), r = Math.floor(t.y + 120 * Math.sin(t.angle));
            i = user.cam.x + (i - i % 100 + 50), r = user.cam.y + (r - r % 100 + 50), ctx.strokeStyle = "green", ctx.lineWidth = 1, ctx.strokeRect(i - 150, r - 150, 300, 300), ctx.restore()
        }
        if (0 === INV_INFOS[e.preview].grid) {
            e.label[e.mode] || (0 === e.mode ? e.label[0] = create_text(scale, LANG[TEXT.MODE_FREE], 20, "#e2c340") : e.label[1] = create_text(scale, LANG[TEXT.MODE_GRID], 20, "#e2c340"));
            a = e.label[e.mode];
            ctxDrawImage(ctx, a, canw2 + -a.width / 2, game.gauges.y - 26)
        }
    }
    if (e.crafting) {
        for (var n = e.timeout.update(), o = 0; o < e.can_craft.length; o++) {
            var s = e.can_craft[o];
            if (e.id == s.id) {
                var _ = 42 * scale,
                    T = 17 * scale;
                round_rect(ctx, s.info.translate.x, s.info.translate.y + _ * (1 - e.timeout.v), s.info.width, _ * e.timeout.v + T, 10 * scale), ctx.fillStyle = "#55B973", ctx.fill(), ctx.globalAlpha = .8, s.draw(ctx)
            } else ctx.globalAlpha = .5, s.draw(ctx);
            ctx.globalAlpha = 1
        }
        return n && (e.crafting = !1, e.timeout.v = 0, e.timeout.o = !1), !0
    }
    for (o = 0; o < e.can_craft.length; o++) e.can_craft[o].draw(ctx);
    return !1
}

function draw_ui_chat() {
    var e = world.units[ITEMS.PLAYERS];
    if (world.mode === WORLD.MODE_PVP || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_ZOMBIES || world.mode === WORLD.MODE_LEGACY || world.mode === WORLD.MODE_BR || world.mode === WORLD.MODE_VAMPIRES)
        for (var t = 0; t < e.length; t++) e[t].draw_text();
    else if (world.mode === WORLD.MODE_HUNGER_GAMES)
        for (t = 0; t < e.length; t++)(user.spectator || user.show_spectators.enabled || "spectator" !== e[t].player.nickname) && e[t].draw_text()
}

function draw_ui_inventory() {
    for (var e = user.inv, t = world.fast_units[user.uid], i = 0; i < e.can_select.length; i++) {
        var r = e.can_select[i],
            a = !1;
        (t = world.fast_units[user.uid]) && (t.right == r.id || t.clothe == r.id && t.clothe > 0) ? (a = !0, ctxDrawImage(ctx, r.info.img[2], r.info.translate.x, r.info.translate.y, r.info.width, r.info.height)) : r.draw(ctx);
        var n = user.inv.n[r.id];
        n > 1 && draw_amount(n, r), n > 0 && draw_slot_number(i, r, a);
        var o = user.chest;
        !o.open || !(o.id < 0 || o.id == r.id) || o.lock && o.pid != user.id || game.plus_buttons[r.id].draw(ctx), user.furnace.open && INV.WOOD == r.id && game.plus_buttons[r.id].draw(ctx), user.well.open && INV.BUCKET_FULL == r.id && game.plus_buttons[r.id].draw(ctx), user.windmill.open && INV.WILD_WHEAT == r.id && game.plus_buttons[r.id].draw(ctx), user.extractor.open && INV.WOOD == r.id && game.plus_buttons[r.id].draw(ctx), !user.bread_oven.open || INV.WOOD != r.id && INV.FLOUR != r.id || game.plus_buttons[r.id].draw(ctx)
    }
    if (r && i < e.max) {
        var s = sprite[SPRITE.EMPTY_SLOT][2];
        for (x = r.info.translate.x, y = r.info.translate.y, j = 1; i < e.max; i++, j++) ctxDrawImage(ctx, s, x + j * (s.width + 5), y)
    }
}

function draw_gauges() {
    ctx.save();
    var e = scale;
    user.gauges.life.x < .25 && (ctx.globalAlpha = user.gauges.warn_life.v);
    var t = user.inv.can_select.length > 0 ? -70 : 0;
    if ((user.chest.open || user.furnace.open && -1 != user.inv.find_item(INV.WOOD) || user.windmill.open && -1 != user.inv.find_item(INV.WILD_WHEAT) || user.extractor.open && -1 != user.inv.find_item(INV.WOOD) || user.well.open && -1 != user.inv.find_item(INV.BUCKET_FULL) || user.bread_oven.open && (-1 != user.inv.find_item(INV.WOOD) || -1 != user.inv.find_item(INV.FLOUR))) && (t -= 50 * scale), ctx.translate((canw - 950 * scale) / 2, t), ctx.fillStyle = "#69A148", ctx.fillRect(this.translate.x + 37 * scale, this.translate.y + 17 * scale, 178 * user.gauges.life.x * scale, 18 * scale), ctx.globalAlpha = 1, user.gauges.hunger.x < .35 && (ctx.fillStyle = "#8F050A", ctx.globalAlpha = user.gauges.warn_hunger.v, ctx.fillRect(this.translate.x + 277 * scale, this.translate.y + 17 * scale, 178 * scale, 18 * scale), ctx.globalAlpha = 1), ctx.fillStyle = "#AF352A", ctx.fillRect(this.translate.x + 277 * scale, this.translate.y + 17 * scale, 178 * user.gauges.hunger.x * scale, 18 * scale), user.gauges.cold.x < .35 && (ctx.fillStyle = "#366B91", ctx.globalAlpha = user.gauges.warn_cold.v, ctx.fillRect(this.translate.x + 517 * scale, this.translate.y + 17 * scale, 178 * scale, 18 * scale), ctx.globalAlpha = 1), HackSettings.Timer.enabled) {
        let e = Date.now();
        ctx.save(), ctx.font = "34px Baloo Paaji", ctx.strokeStyle = "black", ctx.fillStyle = "red", ctx.lineWidth = 7, ctx.strokeText(user.gauges.realhp + "hp", this.translate.x - 80 * scale, this.translate.y + 35 * scale), ctx.fillText(user.gauges.realhp + "hp", this.translate.x - 80 * scale, this.translate.y + 35 * scale), ctx.strokeText(Math.floor(11 - (e - TimerTools.HPTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale), ctx.fillText(Math.floor(11 - (e - TimerTools.HPTimer) / 1e3) + "s", this.translate.x + 216 * scale, this.translate.y + 35 * scale), ctx.strokeText(Math.floor(6 - (e - TimerTools.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale), ctx.fillText(Math.floor(6 - (e - TimerTools.GaugeTimer) / 1e3) + "s", this.translate.x + 460 * scale, this.translate.y + 35 * scale), ctx.restore()
    }
    if (ctx.fillStyle = "#669BB1", ctx.fillRect(this.translate.x + 517 * scale, this.translate.y + 17 * scale, 178 * user.gauges.cold.x * scale, 18 * scale), user.gauges.cold.x > .99 && (user.gauges.warm.x < .35 && (ctx.fillStyle = "#6C4036", ctx.globalAlpha = user.gauges.warn_warm.v, ctx.fillRect(this.translate.x + 517 * scale, this.translate.y + 17 * scale, 178 * scale, 18 * scale), ctx.globalAlpha = 1), ctx.fillStyle = "#9C4036", ctx.fillRect(this.translate.x + 517 * scale, this.translate.y + 17 * scale, 178 * (1 - user.gauges.warm.x) * scale, 18 * scale)), user.gauges.thirst.x < .35 && (ctx.fillStyle = "#001A57", ctx.globalAlpha = user.gauges.warn_thirst.v, ctx.fillRect(this.translate.x + 757 * scale, this.translate.y + 17 * scale, 178 * scale, 18 * scale), ctx.globalAlpha = 1), ctx.fillStyle = "#074A87", ctx.fillRect(this.translate.x + 757 * scale, this.translate.y + 17 * scale, 178 * user.gauges.thirst.x * scale, 18 * scale), scale = e, ctxDrawImage(ctx, this.img, this.translate.x, this.translate.y), this.y = this.translate.y + t, ctx.restore(), user.gauges.oxygen.x < .99) {
        var i = Math.floor(canw2 - sprite[SPRITE.OXYGEN].width / 2);
        t += this.translate.y - sprite[SPRITE.OXYGEN].height - 5 * scale, ctx.fillStyle = "#BBE8EF", ctx.fillRect(i + 5, t + 5 * scale, 588 * scale * user.gauges.oxygen.x, 10 * scale), user.gauges.oxygen.x < .35 && (ctx.fillStyle = "#9BA8AF", ctx.globalAlpha = user.gauges.warn_oxygen.v, ctx.fillRect(i + 5, t + 5, 588 * scale, 10 * scale), ctx.globalAlpha = 1), ctxDrawImage(ctx, sprite[SPRITE.OXYGEN], i, t), this.y = t
    }
}

function draw_door(e) {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var t = (1 - this.hit.anim.v) * delta * 600 * scale,
            i = Math.cos(this.hit.angle - this.angle) * t,
            r = Math.sin(this.hit.angle - this.angle) * t
    } else i = 0, r = 0;
    var a = sprite[e][world.time];
    w = -a.width, h = -a.height, ctxDrawImage(ctx, a, -w / 2 + i, -h / 2 + r, w, h), ctx.restore()
}

function draw_chest() {
    var e = world.fast_units[user.uid];
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var t = (1 - this.hit.anim.v) * delta * 600 * scale,
            i = Math.cos(this.hit.angle - this.angle) * t,
            r = Math.sin(this.hit.angle - this.angle) * t
    } else i = 0, r = 0;
    img = sprite[SPRITE.CHEST][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2 + i, -h / 2 + r, w, h), this.lock && (img = HackSettings.DrawItemsOnChest.enabled ? sprite[SPRITE.CHEST][2] : sprite[SPRITE.LOCK][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2 + i - 1 * scale, -h / 2 + r, w, h)), ctx.restore(), this.action && HackSettings.DrawItemsOnChest.enabled && (ctx.save(), ctx.globalAlpha = .9, ctxDrawImage(ctx, game.chest_buttons[this.action / 2 - 1].info.img[0], user.cam.x + this.x + 25, user.cam.y + this.y + 15, w + 20, h + 20), ctx.globalAlpha = 1, ctx.font = "20px Baloo Paaji", ctx.strokeStyle = "black", ctx.lineWidth = 7, ctx.strokeText(this.action / 2 - 1, user.cam.x + this.x - 32, user.cam.y + this.y - 12), ctx.strokeText("x" + this.info, user.cam.x + this.x - 32, user.cam.y + this.y + 20), ctx.fillStyle = "white", ctx.fillText(this.action / 2 - 1, user.cam.x + this.x - 32, user.cam.y + this.y - 12), ctx.fillText(this.action / 2 - 1, user.cam.x + this.x - 32, user.cam.y + this.y - 12), ctx.fillText("x" + this.info, user.cam.x + this.x - 32, user.cam.y + this.y + 20), ctx.restore()), HackSettings.ShowObjectChunks.enabled && HackSettings.ShowObjectChunks.types.chest && (ctx.save(), ctx.globalAlpha = HackSettings.Xray.enabled ? HackSettings.Xray.opacity : 1, ctx.lineWidth = 1, ctx.strokeStyle = e && HelperFns.isInRadius(e, this) ? "green" : "red", ctx.strokeRect(user.cam.x + 100 * (this.ObjectX - 1), user.cam.y + 100 * (this.ObjectY - 1), 300, 300), ctx.restore())
}

function draw_thornbush_seed() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.THORNBUSH_SEED_MOB][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_garlic_seed() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.GARLIC_SEED_MOB][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_pumpkin_seed() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.PUMPKIN_SEED_MOB][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_aloe_vera_mob() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.ALOE_VERA][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_wheat_seed() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.WHEAT_MOB][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_life_small(e) {
    if (!((e = e / 100) > .8)) {
        if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var t = (1 - this.hit.anim.v) * delta * 600 * scale,
                i = Math.cos(this.hit.angle - this.angle) * t,
                r = Math.sin(this.hit.angle - this.angle) * t
        } else i = 0, r = 0;
        ctx.globalAlpha = .5, circle_angle(ctx, i, r, 18 * scale, e), fill_path(ctx, null, "#000000", 18 * scale), ctx.globalAlpha = 1, circle_angle(ctx, i, r, 18 * scale, e), fill_path(ctx, null, SPRITE.BROWN_LIFE[world.time], 6 * scale), ctx.restore()
    }
}

function draw_life(e) {
    if (!((e = e / 100) > .95)) {
        if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var t = (1 - this.hit.anim.v) * delta * 600 * scale,
                i = Math.cos(this.hit.angle - this.angle) * t,
                r = Math.sin(this.hit.angle - this.angle) * t
        } else i = 0, r = 0;
        ctx.globalAlpha = .5, circle_angle(ctx, i, r, 28 * scale, e), fill_path(ctx, null, "#000000", 18 * scale), ctx.globalAlpha = 1, circle_angle(ctx, i, r, 28 * scale, e), fill_path(ctx, null, SPRITE.CRAFT_LOADING[world.time], 6 * scale), ctx.restore()
    }
}

function draw_roof(e) {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var t = (1 - this.hit.anim.v) * delta * 600 * scale,
            i = Math.cos(this.hit.angle - this.angle) * t,
            r = Math.sin(this.hit.angle - this.angle) * t
    } else i = 0, r = 0;
    var a = sprite[SPRITE.ROOFS].length;
    img = sprite[SPRITE.ROOFS][(this.j + this.i % 2) % a][world.time], w = -img.width, h = -img.height;
    var n = world.fast_units[user.uid];
    HackSettings.Roofs.enabled || !n ? ctx.globalAlpha = .3 : (n && HelperFns.checkAlly(this.pid) ? Utils.dist(this, n) < 550 ? this.opacity = Math.max(this.opacity - delta, .3) : this.opacity = Math.min(this.opacity + delta, 1) : n && Utils.dist(this, world.fast_units[user.uid]) < 150 ? this.opacity = Math.max(this.opacity - delta, .3) : this.opacity = Math.min(this.opacity + delta, 1), ctx.globalAlpha *= this.opacity), ctxDrawImage(ctx, img, -w / 2 + i, -h / 2 + r, w, h), ctx.globalAlpha = 1, ctx.restore()
}

function draw_garland(e) {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var t = (1 - this.hit.anim.v) * delta * 600 * scale,
            i = Math.cos(this.hit.angle - this.angle) * t,
            r = Math.sin(this.hit.angle - this.angle) * t
    } else i = 0, r = 0;
    this.halo.update() && (this.color += .2 + .3 * Math.random()), img = sprite[SPRITE.GARLANDS][Math.floor(this.id + this.color) % 5][world.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, ctxDrawImage(ctx, img, -w / 2 + i, -h / 2 + r, w, h), ctx.restore()
}

function draw_bed(e) {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var t = (1 - this.hit.anim.v) * delta * 600 * scale,
            i = Math.cos(this.hit.angle - this.angle) * t,
            r = Math.sin(this.hit.angle - this.angle) * t
    } else i = 0, r = 0;
    if (e === SPRITE.BED_TOP && !world.transition) {
        for (var a = 0, n = world.units[ITEMS.PLAYERS], o = 0; o < n.length; o++) {
            var s = Utils.dist(n[o], this);
            if (s < 140 && s > 35) {
                a = 0;
                break
            }
            s <= 35 && (a = 1)
        }
        this.opacity = 0 === a ? Math.max(.5, this.opacity - delta / 1.5) : Math.min(1, this.opacity + delta / 1.5), ctx.globalAlpha = this.opacity
    }
    img = sprite[e][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2 + i, -h / 2 + r, w, h), ctx.globalAlpha = 1, ctx.restore()
}

function draw_simple_item(e) {
    let t = world.fast_units[user.uid];
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var i = (1 - this.hit.anim.v) * delta * 600 * scale,
            r = Math.cos(this.hit.angle - this.angle) * i,
            a = Math.sin(this.hit.angle - this.angle) * i
    } else r = 0, a = 0;
    img = sprite[e][world.time], w = -img.width, h = -img.height, ctxDrawImage(ctx, img, -w / 2 + r, -h / 2 + a, w, h), ctx.restore(), e === SPRITE.TOTEM && HackSettings.ShowObjectChunks.enabled && HackSettings.ShowObjectChunks.types.totem && (ctx.save(), ctx.globalAlpha = HackSettings.Xray.enabled ? HackSettings.Xray.opacity : 1, ctx.lineWidth = 1, ctx.strokeStyle = t && HelperFns.isInRadius(t, this) ? "green" : "red", ctx.strokeRect(user.cam.x + 100 * (this.ObjectX - 1), user.cam.y + 100 * (this.ObjectY - 1), 300, 300), ctx.restore())
}
var __wave = 0;

function draw_river_tile(e, t, i, r, a, n, o, s, _) {
    void 0 === s && (s = 0);
    for (var T = e; T <= t; T++)
        for (var E = i; E <= r; E++) {
            var I = MAP.tiles[T][E];
            if (void 0 !== I && void 0 !== I[n]) {
                var l = I[n],
                    u = sprite[a][world.time][l.river];
                if (ctxDrawImage(ctx, u, user.cam.x + l.x - u.width / (4 * _scale_object), user.cam.y + l.y - u.height / (4 * _scale_object), u.width / (2 * _scale_object), u.height / (2 * _scale_object)), ui.quality) {
                    var d = 2147483648,
                        c = (1103515245 * (1e3 * T + E) + 12345) % d / d;
                    if (c < .2) {
                        c = Math.floor(sprite[SPRITE.RIVER_DECO][world.time][l.river].length * (5 * c));
                        u = sprite[SPRITE.RIVER_DECO][world.time][l.river][c];
                        ctxDrawImage(ctx, u, user.cam.x + l.x - u.width / (4 * _scale_object), user.cam.y + l.y - u.height / (4 * _scale_object), u.width / (2 * _scale_object), u.height / (2 * _scale_object))
                    } else if (0 !== l.current) {
                        u = sprite[SPRITE.RIVER_WAVE][world.time];
                        var R = (__wave + T % 2 * 30) % 60;
                        ctx.globalAlpha = R < 30 ? R / 30 : 1 - (R - 30) / 30, ctxDrawImage(ctx, u, user.cam.x + l.x - u.width / (4 * _scale_object), user.cam.y + l.y - u.height / (4 * _scale_object) - 30 + R, u.width / (2 * _scale_object), u.height / (2 * _scale_object)), ctx.globalAlpha = 1
                    }
                }
            }
        }
}

function draw_sand_worm_ground() {
    if (1 == (1 & this.info)) this.dig = Math.min(this.dig + delta, 2.2);
    else if (this.dig = Math.max(this.dig - delta, 0), this.groundTimer += delta, this.groundTimer > .1) {
        this.groundTimer = 0;
        var e = {
            x: this.x + 60 * Math.random() - 30,
            y: this.y + 60 * Math.random() - 30,
            a: 0,
            r: 30 * Math.random() + 30
        };
        this.ground.push(e)
    }
    for (var t = 0; t < this.ground.length; t++) {
        e = this.ground[t];
        ctx.save(), ctx.translate(user.cam.x + e.x, user.cam.y + e.y), e.a = Math.min(1, e.a + delta / 2);
        var i = e.a;
        i < .2 ? i *= 5 : i = i > .8 ? 5 * (1 - i) : 1, ctx.globalAlpha = .8 * i, circle(ctx, 0, 0, e.r), fill_path(ctx, SPRITE.SAND_WORM_GROUND[world.time]), ctx.restore(), 1 === e.a && (this.ground.splice(t, 1), t--)
    }
}

function draw_sand_worm() {
    var e = void 0,
        t = void 0;
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.breath.update(), this.rotate.update(), this.dig >= .1 && this.dig <= 1.1) {
        (i = Math.max(0, Math.min(1, this.dig - .1))) < .2 ? i *= 5 : i = i > .8 ? 5 * (1 - i) : 1;
        e = sprite[SPRITE.SAND_WORM1][world.time];
        w = -e.width * this.breath.v, h = -e.height * this.breath.v, ctx.globalAlpha = i, ctxDrawImage(ctx, e, -w / 4, -h / 4, w / 2, h / 2);
        t = sprite[SPRITE.HURT_SAND_WORM1]
    }
    if (this.dig >= .9) {
        var i;
        (i = Math.max(0, Math.min(1, this.dig - .9))) < .2 ? i *= 5 : i = 1;
        e = sprite[SPRITE.SAND_WORM2][world.time];
        w = -e.width * this.breath.v, h = -e.height * this.breath.v, ctx.globalAlpha = i, ctxDrawImage(ctx, e, -w / 4, -h / 4, w / 2, h / 2);
        t = sprite[SPRITE.HURT_SAND_WORM2]
    }
    this.action & STATE.HURT && void 0 !== t && (this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = (.6 - this.hit.v) * i, w = -t.width * this.breath.v, h = -t.height * this.breath.v, ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2)), ctx.globalAlpha = 1, ctx.restore()
}

function draw_vulture() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle);
    var e = Utils.dist(this, this.r);
    if (this.scale = e > 350 ? Math.min(this.scale + delta / 2, 1.8) : Math.max(this.scale - delta, 1), this.breath.update(), this.rotate.update(), this._alpha = e < 350 ? Math.max(0, this._alpha - 2.2 * delta) : Math.min(1, this._alpha + 2.2 * delta), t = sprite[SPRITE.VULTURE_GROUND_ATTACK][world.time], w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctx.globalAlpha = 1 - this._alpha, ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), t = sprite[SPRITE.VULTURE_ATTACK][world.time], w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctx.globalAlpha = this._alpha, ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha);
        var t = sprite[SPRITE.HURT_VULTURE_GROUND];
        w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
        t = sprite[SPRITE.HURT_VULTURE];
        w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (t = sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][world.time], w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctx.save(), ctx.translate(-40 * scale, 80 * scale), ctx.rotate(this.rotate.v), ctx.globalAlpha = this._alpha, ctxDrawImage(ctx, t, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
        t = sprite[SPRITE.HURT_VULTURE_WING_LEFT];
        ctxDrawImage(ctx, t, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (ctx.restore(), t = sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][world.time], ctx.save(), ctx.translate(40 * scale, 80 * scale), ctx.rotate(-this.rotate.v), ctx.globalAlpha = this._alpha, ctxDrawImage(ctx, t, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
        t = sprite[SPRITE.HURT_VULTURE_WING_RIGHT];
        ctxDrawImage(ctx, t, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    ctx.globalAlpha = 1, ctx.restore(), ctx.restore()
}

function draw_hawk() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle);
    var e = Utils.dist(this, this.r);
    if (this.scale = e > 350 ? Math.min(this.scale + delta / 2, 1.8) : Math.max(this.scale - delta, 1), this.breath.update(), this.rotate.update(), this._alpha = e < 350 ? Math.max(0, this._alpha - 2.2 * delta) : Math.min(1, this._alpha + 2.2 * delta), t = 0 == (1 & this.info) ? sprite[SPRITE.HAWK_GROUND][world.time] : sprite[SPRITE.HAWK_GROUND_ATTACK][world.time], w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctx.globalAlpha = 1 - this._alpha, ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), t = 0 == (1 & this.info) ? sprite[SPRITE.HAWK][world.time] : sprite[SPRITE.HAWK_ATTACK][world.time], w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctx.globalAlpha = this._alpha, ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = (.6 - this.hit.v) * (1 - this._alpha);
        var t = sprite[SPRITE.HURT_HAWK_GROUND];
        w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
        t = sprite[SPRITE.HURT_HAWK];
        w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (t = 0 == (1 & this.info) ? sprite[SPRITE.HAWK_WING_LEFT][world.time] : sprite[SPRITE.HAWK_WING_LEFT_ATTACK][world.time], w = -t.width * this.breath.v * this.scale, h = -t.height * this.breath.v * this.scale, ctx.save(), ctx.translate(-20 * scale, 0 * scale), ctx.rotate(this.rotate.v), ctx.globalAlpha = this._alpha, ctxDrawImage(ctx, t, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
        t = sprite[SPRITE.HURT_HAWK_WING_LEFT];
        ctxDrawImage(ctx, t, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (ctx.restore(), t = 0 == (1 & this.info) ? sprite[SPRITE.HAWK_WING_RIGHT][world.time] : sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][world.time], ctx.save(), ctx.translate(20 * scale, 0 * scale), ctx.rotate(-this.rotate.v), ctx.globalAlpha = this._alpha, ctxDrawImage(ctx, t, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = (.6 - this.hit.v) * this._alpha;
        t = sprite[SPRITE.HURT_HAWK_WING_RIGHT];
        ctxDrawImage(ctx, t, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    ctx.globalAlpha = 1, ctx.restore(), ctx.restore()
}

function draw_baby_lava() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), Utils.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + delta / 2, 1.8) : this.scale = Math.max(this.scale - delta, 1), this.breath.update(), this.rotate.update(), e = 0 === this.info ? sprite[SPRITE.BABY_LAVA][world.time] : sprite[SPRITE.BABY_LAVA_ATTACK][world.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, ctxDrawImage(ctx, e, -w / 4, -h / 4, w / 2, h / 2), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var e = sprite[SPRITE.HURT_BABY_LAVA];
        ctxDrawImage(ctx, e, -w / 4, -h / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (e = 0 === this.info ? sprite[SPRITE.BABY_LAVA_WING_LEFT][world.time] : sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][world.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, ctx.save(), ctx.translate(-40 * scale, 10 * scale), ctx.rotate(this.rotate.v), ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        e = sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT];
        ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (ctx.restore(), e = 0 === this.info ? sprite[SPRITE.BABY_LAVA_WING_RIGHT][world.time] : sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][world.time], ctx.save(), ctx.translate(40 * scale, 10 * scale), ctx.rotate(-this.rotate.v), ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        e = sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT];
        ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    ctx.restore(), ctx.restore()
}

function draw_baby_dragon() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), Utils.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + delta / 2, 1.8) : this.scale = Math.max(this.scale - delta, 1), this.breath.update(), this.rotate.update(), e = 0 === this.info ? sprite[SPRITE.BABY_DRAGON][world.time] : sprite[SPRITE.BABY_DRAGON_ATTACK][world.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, ctxDrawImage(ctx, e, -w / 4, -h / 4, w / 2, h / 2), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var e = sprite[SPRITE.HURT_BABY_DRAGON];
        ctxDrawImage(ctx, e, -w / 4, -h / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (e = 0 === this.info ? sprite[SPRITE.BABY_DRAGON_WING_LEFT][world.time] : sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][world.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, ctx.save(), ctx.translate(-40 * scale, 10 * scale), ctx.rotate(this.rotate.v), ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        e = sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT];
        ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (ctx.restore(), e = 0 === this.info ? sprite[SPRITE.BABY_DRAGON_WING_RIGHT][world.time] : sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][world.time], ctx.save(), ctx.translate(40 * scale, 10 * scale), ctx.rotate(-this.rotate.v), ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        e = sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT];
        ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    ctx.restore(), ctx.restore()
}

function draw_lava_dragon() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), Utils.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + delta / 2, 1.8) : this.scale = Math.max(this.scale - delta, 1), this.breath.update(), this.rotate.update(), e = sprite[SPRITE.LAVA_DRAGON][world.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, ctxDrawImage(ctx, e, -w / 4, -h / 4, w / 2, h / 2), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var e = sprite[SPRITE.HURT_LAVA_DRAGON];
        ctxDrawImage(ctx, e, -w / 4, -h / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (e = sprite[SPRITE.LAVA_WING_LEFT][world.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, ctx.save(), ctx.translate(-60 * scale, 20 * scale), ctx.rotate(this.rotate.v), ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        e = sprite[SPRITE.HURT_LAVA_WING_LEFT];
        ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    if (ctx.restore(), e = sprite[SPRITE.LAVA_WING_RIGHT][world.time], ctx.save(), ctx.translate(60 * scale, 20 * scale), ctx.rotate(-this.rotate.v), ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        e = sprite[SPRITE.HURT_LAVA_WING_RIGHT];
        ctxDrawImage(ctx, e, -w * scale / 4, -h * scale / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    ctx.restore(), ctx.restore()
}

function draw_dragon() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), Utils.dist(this, this.r) > 300 ? this.scale = Math.min(this.scale + delta / 2, 1.8) : this.scale = Math.max(this.scale - delta, 1), this.breath.update(), this.rotate.update(), e = sprite[SPRITE.DRAGON][world.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, ctxDrawImage(ctx, e, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var e = sprite[SPRITE.HURT_DRAGON];
        ctxDrawImage(ctx, e, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (e = sprite[SPRITE.WING_LEFT][world.time], w = -e.width * this.breath.v * this.scale, h = -e.height * this.breath.v * this.scale, ctx.save(), ctx.translate(-30 * scale, 70 * scale), ctx.rotate(this.rotate.v), ctxDrawImage(ctx, e, -10 * scale, -40 * scale, w, h), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        e = sprite[SPRITE.HURT_WING_LEFT];
        ctxDrawImage(ctx, e, -10 * scale, -40 * scale, w, h), ctx.globalAlpha = 1
    }
    if (ctx.restore(), e = sprite[SPRITE.WING_RIGHT][world.time], ctx.save(), ctx.translate(30 * scale, 70 * scale), ctx.rotate(-this.rotate.v), ctxDrawImage(ctx, e, 10 * scale - w, -40 * scale, w, h), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        e = sprite[SPRITE.HURT_WING_RIGHT];
        ctxDrawImage(ctx, e, 10 * scale - w, -40 * scale, w, h), ctx.globalAlpha = 1
    }
    ctx.restore(), ctx.restore()
}

function draw_crate(e, t) {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), e === SPRITE.GIFT && (e = SPRITE.CRATE, this.info = 36), img = sprite[e][this.info][world.time], w = -img.width / 2, h = -img.height / 2, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var i = get_image_effect(this.info, img, __EFFECT_BOX__);
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    ctx.restore(), HackSettings.DropOrDeadBox.enabled && (ctx.save(), ctx.font = "18px Baloo Paaji", ctx.strokeStyle = "black", ctx.lineWidth = 7, ctx.strokeText(this.myHit, user.cam.x + this.x - 10, user.cam.y + this.y + 20), ctx.strokeText(86 === this.type ? "Drop" : "Dead", user.cam.x + this.x - 25, user.cam.y + this.y), ctx.strokeText(Math.floor((86 === this.type ? 17 : 240) - (Date.now() - this.lastSend) / 1e3), user.cam.x + this.x - 12.5, user.cam.y + this.y + 40), ctx.fillStyle = "white", ctx.fillText(this.myHit, user.cam.x + this.x - 10, user.cam.y + this.y + 20), ctx.fillText(86 === this.type ? "Drop" : "Dead", user.cam.x + this.x - 25, user.cam.y + this.y), ctx.fillText(Math.floor((86 === this.type ? 17 : 240) - (Date.now() - this.lastSend) / 1e3), user.cam.x + this.x - 12.5, user.cam.y + this.y + 40), ctx.restore())
}

function draw_simple_mobs_2(e, t) {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), i = sprite[e][world.time], w = -i.width, h = -i.height, ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var i = sprite[t];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    ctx.restore()
}

function draw_baby_mammoth() {
    if (this.breath.update(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), e = 0 === this.info ? sprite[SPRITE.BABY_MAMMOTH][world.time] : sprite[SPRITE.BABY_MAMMOTH_ATTACK][world.time], w = -e.width * this.breath.v, h = -e.height * this.breath.v, ctxDrawImage(ctx, e, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var e = sprite[SPRITE.HURT_BABY_MAMMOTH];
        ctxDrawImage(ctx, e, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    ctx.restore()
}

function draw_boar() {
    if (this.breath.update(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), e = 0 === this.info ? sprite[SPRITE.BOAR][world.time] : sprite[SPRITE.BOAR_ATTACK][world.time], w = -e.width * this.breath.v, h = -e.height * this.breath.v, ctxDrawImage(ctx, e, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var e = sprite[SPRITE.HURT_BOAR];
        ctxDrawImage(ctx, e, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    ctx.restore()
}

function draw_crab_boss() {
    var e = Math.PI / 2,
        t = Math.PI / 4;
    if (this.breath.update(), this.breathl.update(), this.breathr.update(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), i = 0 === this.info ? sprite[SPRITE.CRAB_BOSS][world.time] : sprite[SPRITE.CRAB_BOSS_ATTACK][world.time], w = -i.width * this.breath.v, h = -i.height * this.breath.v, ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var i = sprite[SPRITE.HURT_CRAB_BOSS];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (this.action & STATE.COLD) {
        this.heal.update() && 0 == this.heal.o && (this.action -= STATE.COLD), ctx.globalAlpha = .6 - this.heal.v;
        i = sprite[SPRITE.HEAL_CRAB_BOSS];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (ctx.restore(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle + t), ctx.translate(100, 0), ctx.rotate(e), i = 0 === this.info ? sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time] : sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][world.time], w = -i.width * this.breathl.v, h = -i.height * this.breathl.v, ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        i = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (this.action & STATE.COLD) {
        ctx.globalAlpha = .6 - this.heal.v;
        i = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (ctx.restore(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle + e + t), ctx.translate(100, 0), ctx.rotate(e), i = 0 === this.info ? sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time] : sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][world.time], w = -i.width * this.breathr.v, h = -i.height * this.breathr.v, ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        i = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (this.action & STATE.COLD) {
        ctx.globalAlpha = .6 - this.heal.v;
        i = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    ctx.restore()
}

function draw_crab() {
    var e = Math.PI / 2,
        t = Math.PI / 4;
    if (this.breath.update(), this.breathl.update(), this.breathr.update(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), i = 0 === this.info ? sprite[SPRITE.CRAB][world.time] : sprite[SPRITE.CRAB_ATTACK][world.time], w = -i.width * this.breath.v, h = -i.height * this.breath.v, ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var i = sprite[SPRITE.HURT_CRAB];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (this.action & STATE.COLD) {
        this.heal.update() && 0 == this.heal.o && (this.action -= STATE.COLD), ctx.globalAlpha = .6 - this.heal.v;
        i = sprite[SPRITE.HEAL_CRAB];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (ctx.restore(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle + t), ctx.translate(55, 0), ctx.rotate(e), i = 0 === this.info ? sprite[SPRITE.CRAB_CLAW_LEFT][world.time] : sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][world.time], w = -i.width * this.breathl.v, h = -i.height * this.breathl.v, ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        i = sprite[SPRITE.HURT_CRAB_CLAW_LEFT];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (this.action & STATE.COLD) {
        ctx.globalAlpha = .6 - this.heal.v;
        i = sprite[SPRITE.HEAL_CRAB_CLAW_LEFT];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (ctx.restore(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle + e + t), ctx.translate(55, 0), ctx.rotate(e), i = 0 === this.info ? sprite[SPRITE.CRAB_CLAW_RIGHT][world.time] : sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][world.time], w = -i.width * this.breathr.v, h = -i.height * this.breathr.v, ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        ctx.globalAlpha = .6 - this.hit.v;
        i = sprite[SPRITE.HURT_CRAB_CLAW_RIGHT];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    if (this.action & STATE.COLD) {
        ctx.globalAlpha = .6 - this.heal.v;
        i = sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    ctx.restore()
}

function draw_spell() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.born = Math.min(1, this.born + 2 * delta), ctx.globalAlpha = Math.min(1, Math.max(0, Utils.dist(this, this.r) / 80)) * this.born, this.breath.update(), img = sprite[SPRITE.SPELL][world.time][this.spell], this.spell < 2 ? (w = -img.width * this.breath.v, h = -img.height * this.breath.v) : 0 === this.fly ? (w = -img.width, h = -img.height) : (w = 1.35 * -img.width, h = 1.35 * -img.height), ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1, ctx.restore()
}

function draw_simple_mobs(e, t) {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.breath.update(), i = sprite[e][world.time], w = -i.width * this.breath.v, h = -i.height * this.breath.v, ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var i = sprite[t];
        ctxDrawImage(ctx, i, -w / 2, -h / 2, w, h), ctx.globalAlpha = 1
    }
    ctx.restore()
}

function draw_simple_mobs_hd(e, t) {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.breath.update(), i = sprite[e][world.time], w = -i.width * this.breath.v, h = -i.height * this.breath.v, ctxDrawImage(ctx, i, -w / 4, -h / 4, w / 2, h / 2), this.action & STATE.HURT) {
        this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v;
        var i = sprite[t];
        ctxDrawImage(ctx, i, -w / 4, -h / 4, w / 2, h / 2), ctx.globalAlpha = 1
    }
    ctx.restore()
}

function draw_breath_2(e, t, i) {
    ctx.save(), ctx.translate(user.cam.x + t, user.cam.y + i), ctx.rotate(this.angle), ctx.translate(this.x - t, this.y - i), img = sprite[e][world.time], w = -img.width * this.breath.v, h = -img.height * this.breath.v, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_breath(e) {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[e][world.time], w = -img.width * this.breath.v, h = -img.height * this.breath.v, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_thornbush() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    var r = 15 & this.info;
    if (10 === this.info || 0 === r) {
        if (ctx.rotate(this.angle), this.ground.update(), 16 & this.info) var a = sprite[SPRITE.PLANT_THORNBUSH_DRIED][world.time];
        else a = sprite[SPRITE.PLANT_THORNBUSH][world.time];
        var n = -a.width * this.ground.v,
            o = -a.height * this.ground.v;
        ctxDrawImage(ctx, a, -n / 2 + t, -o / 2 + i, n, o)
    } else {
        if (16 & this.info) a = sprite[SPRITE.DRIED_THORNBUSH][world.time];
        else a = sprite[SPRITE.THORNBUSH][world.time];
        ctx.translate(0, a.height / 2), ctxDrawImage(ctx, a, t - a.width / 2, -a.height + i)
    }
    ctx.restore()
}

function draw_garlic() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    var r = 15 & this.info;
    if (10 === this.info || 0 === r) {
        if (ctx.rotate(this.angle), this.ground.update(), 16 & this.info) var a = sprite[SPRITE.PLANT_GARLIC_DRIED][world.time];
        else a = sprite[SPRITE.PLANT_GARLIC][world.time];
        var n = -a.width * this.ground.v,
            o = -a.height * this.ground.v;
        ctxDrawImage(ctx, a, -n / 2 + t, -o / 2 + i, n, o)
    } else {
        if (16 & this.info) a = sprite[SPRITE.DRIED_GARLIC][world.time];
        else a = sprite[SPRITE.GARLIC][world.time];
        ctx.translate(0, a.height / 2), ctxDrawImage(ctx, a, t - a.width / 2, -a.height + i)
    }
    ctx.restore()
}

function draw_aloe_vera() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    var r = 15 & this.info;
    if (10 === this.info || 0 === r) {
        if (ctx.rotate(this.angle), this.ground.update(), 16 & this.info) var a = sprite[SPRITE.PLANT_ALOE_VERA_DRIED][world.time];
        else a = sprite[SPRITE.PLANT_ALOE_VERA][world.time];
        var n = -a.width * this.ground.v,
            o = -a.height * this.ground.v;
        ctxDrawImage(ctx, a, -n / 2 + t, -o / 2 + i, n, o)
    } else {
        if (16 & this.info) a = sprite[SPRITE.DRIED_ALOE_VERA][world.time];
        else a = sprite[SPRITE.ALOE_VERA_GROWN][world.time];
        ctx.translate(0, a.height / 2), ctxDrawImage(ctx, a, t - a.width / 2, -a.height + i)
    }
    ctx.restore()
}

function draw_watermelon() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    var r = 15 & this.info;
    if (10 === this.info || 0 === r) {
        if (ctx.rotate(this.angle), this.ground.update(), 16 & this.info) var a = sprite[SPRITE.PLANT_WATERMELON_DRIED][world.time];
        else a = sprite[SPRITE.PLANT_WATERMELON][world.time];
        var n = -a.width * this.ground.v,
            o = -a.height * this.ground.v;
        ctxDrawImage(ctx, a, -n / 2 + t, -o / 2 + i, n, o)
    } else {
        if (16 & this.info) a = sprite[SPRITE.DRIED_WATERMELON][world.time];
        else a = sprite[SPRITE.WATERMELON][world.time];
        ctx.translate(0, a.height / 2), ctxDrawImage(ctx, a, t - a.width / 2, -a.height + i)
    }
    ctx.restore()
}

function draw_carrot() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    var r = 15 & this.info;
    if (10 === this.info || 0 === r) {
        if (ctx.rotate(this.angle), this.ground.update(), 16 & this.info) var a = sprite[SPRITE.PLANT_CARROT_DRIED][world.time];
        else a = sprite[SPRITE.PLANT_CARROT][world.time];
        var n = -a.width * this.ground.v,
            o = -a.height * this.ground.v;
        ctxDrawImage(ctx, a, -n / 2 + t, -o / 2 + i, n, o)
    } else {
        if (16 & this.info) a = sprite[SPRITE.DRIED_CARROT][world.time];
        else a = sprite[SPRITE.CARROT][world.time];
        ctx.translate(0, a.height / 2), ctxDrawImage(ctx, a, t - a.width / 2, -a.height + i)
    }
    ctx.restore()
}

function draw_pumpkin() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    var r = 15 & this.info;
    if (10 === this.info || 0 === r) {
        if (ctx.rotate(this.angle), this.ground.update(), 16 & this.info) var a = sprite[SPRITE.PLANT_PUMPKIN_DRIED][world.time];
        else a = sprite[SPRITE.PLANT_PUMPKIN][world.time];
        var n = -a.width * this.ground.v,
            o = -a.height * this.ground.v;
        ctxDrawImage(ctx, a, -n / 2 + t, -o / 2 + i, n, o)
    } else {
        if (16 & this.info) a = sprite[SPRITE.DRIED_PUMPKIN][world.time];
        else a = sprite[SPRITE.PUMPKIN][world.time];
        ctx.translate(0, a.height / 2), ctxDrawImage(ctx, a, t - a.width / 2, -a.height + i)
    }
    ctx.restore()
}

function draw_wheat() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    var r = 15 & this.info;
    if (10 === this.info || 0 === r) {
        if (ctx.rotate(this.angle), this.ground.update(), 16 & this.info) var a = sprite[SPRITE.WHEAT_SEED_DRIED][world.time];
        else a = sprite[SPRITE.WHEAT_SEED][world.time];
        var n = -a.width * this.ground.v,
            o = -a.height * this.ground.v;
        ctxDrawImage(ctx, a, -n / 2 + t, -o / 2 + i, n, o)
    } else {
        if (this.wind.update(), 16 & this.info) a = sprite[SPRITE.DRIED_WHEAT][world.time];
        else a = sprite[SPRITE.WILD_WHEAT][world.time];
        ctx.translate(0, a.height / 2), ctx.rotate(this.wind.v), ctxDrawImage(ctx, a, t - a.width / 2, -a.height + i)
    }
    ctx.restore()
}

function draw_seed() {
    if (!(this.info < 10)) {
        if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * delta * 600 * scale,
                t = Math.cos(this.hit.angle - this.angle) * e,
                i = Math.sin(this.hit.angle - this.angle) * e
        } else t = 0, i = 0;
        this.ground.update();
        var r = sprite[SPRITE.PLANT_SEED][world.time],
            a = -r.width * this.ground.v,
            n = -r.height * this.ground.v;
        ctxDrawImage(ctx, r, -a / 2 + t, -n / 2 + i, a, n), ctx.restore()
    }
}

function draw_plant() {
    if (10 !== this.info) {
        if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * delta * 600 * scale,
                t = Math.cos(this.hit.angle - this.angle) * e,
                i = Math.sin(this.hit.angle - this.angle) * e
        } else t = 0, i = 0;
        if (16 & this.info) var r = sprite[SPRITE.DRIED_PLANT][world.time];
        else r = sprite[SPRITE.PLANT_MINI][world.time];
        ctxDrawImage(ctx, r, -r.width / 2 + t, -r.width / 2 + i), ctx.restore();
        for (var a = 15 & this.info, n = 0; n < a; n++) this.fruits[n].draw(SPRITE.FRUIT)
    }
}

function draw_tomato() {
    if (!(this.info < 10)) {
        if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var e = (1 - this.hit.anim.v) * delta * 600 * scale,
                t = Math.cos(this.hit.angle - this.angle) * e,
                i = Math.sin(this.hit.angle - this.angle) * e
        } else t = 0, i = 0;
        this.ground.update();
        var r = sprite[SPRITE.PLANT_TOMATO][world.time],
            a = -r.width * this.ground.v,
            n = -r.height * this.ground.v;
        ctxDrawImage(ctx, r, -a / 2 + t, -n / 2 + i, a, n), ctx.restore()
    }
}

function draw_tomato_fruit() {
    if (10 !== this.info) {
        for (var e = 15 & this.info, t = 0; t < e; t++) this.fruits[t].draw(SPRITE.TOMATO, this.x, this.y);
        if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
            this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
            var i = (1 - this.hit.anim.v) * delta * 600 * scale,
                r = Math.cos(this.hit.angle - this.angle) * i,
                a = Math.sin(this.hit.angle - this.angle) * i
        } else r = 0, a = 0;
        if (16 & this.info) var n = sprite[SPRITE.DRIED_TOMATO_MINI][world.time];
        else n = sprite[SPRITE.TOMATO_MINI][world.time];
        ctxDrawImage(ctx, n, -n.width / 2 + r, -n.width / 2 + a), ctx.restore()
    }
}

function draw_furnace() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    2 == this.action ? img = sprite[SPRITE.FURNACE_ON][world.time] : img = sprite[SPRITE.FURNACE_OFF][world.time], ctxDrawImage(ctx, img, -img.width / 2 + t, -img.height / 2 + i), ctx.restore(), HackSettings.BuildingInfo.enabled && this.info && (ctx.save(), ctx.font = "20px Baloo Paaji", ctx.strokeStyle = "black", ctx.lineWidth = 7, ctx.strokeText("x" + this.info, user.cam.x + this.x - 15, user.cam.y + this.y), ctx.fillStyle = "white", ctx.fillText("x" + this.info, user.cam.x + this.x - 15, user.cam.y + this.y), ctx.restore())
}

function draw_furnace_ground() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.ground.update(), ctx.globalAlpha = .3;
    var e = sprite[SPRITE.GROUND_FIRE][world.time],
        t = -e.width * this.ground.v,
        i = -e.height * this.ground.v;
    ctxDrawImage(ctx, e, -t / 2, -i / 2, t, i), ctx.globalAlpha = 1, ctx.restore()
}

function draw_bread_oven_smog() {
    let e = world.fast_units[user.uid];
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && 31 & this.info && 992 & this.info && 31744 != (31744 & this.info) && (0 == this.smog.length || this.smog[this.smog.length - 1] <= SPRITE.SMOG_PUSH) && this.smog.push(SPRITE.SMOG);
    for (var t = 0; t < this.smog.length; t++) {
        this.smog[t] = Math.max(0, this.smog[t] - delta * SPRITE.SMOG_SPEED), ctx.globalAlpha = this.smog[t] / 1.3;
        var i = 40 * (1 - this.smog[t]),
            r = 35 * (1 - this.smog[t]) + 10;
        circle(ctx, -68 * scale + Math.cos(-this.angle - Math.PI / 2) * i, -20 * scale + Math.sin(-this.angle - Math.PI / 2) * i, r), fill_path(ctx, "#333333")
    }
    ctx.globalAlpha = 1, this.smog.length > 0 && 0 === this.smog[0] && this.smog.shift(), ctx.restore(), HackSettings.BuildingInfo.enabled && this.info && ctx.drawImage(this.img.canvas, user.cam.x + this.x - 33, user.cam.y + this.y - 47), HackSettings.AutoSteal.enabled && e && HelperFns.isInRadius(e, this) && (31744 & this.info) >> 10 && client.socket.send(JSON.stringify([26, this.pid, this.id])), HackSettings.AutoBread.enabled && e && HelperFns.isInRadius(e, this) && (31 != (5 & this.info) && client.socket.send(JSON.stringify([25, 31, this.pid, this.id])), (992 & this.info) >> 5 != 31 && client.socket.send(JSON.stringify([24, 31, this.pid, this.id])), (31744 & this.info) >> 10 != 0 && client.socket.send(JSON.stringify([26, this.pid, this.id]))), HackSettings.ShowObjectChunks.enabled && HackSettings.ShowObjectChunks.types.ovens && (ctx.save(), ctx.globalAlpha = HackSettings.Xray.enabled ? HackSettings.Xray.opacity : 1, ctx.lineWidth = 1, ctx.strokeStyle = e && HelperFns.isInRadius(e, this) ? "green" : "red", ctx.strokeRect(user.cam.x + 100 * (this.ObjectX - 1), user.cam.y + 100 * (this.ObjectY - 1), 300, 300), ctx.restore())
}

function draw_fire_ground(e) {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.ground.update(), ctx.globalAlpha = .3;
    var t = sprite[SPRITE.GROUND_FIRE][world.time],
        i = -t.width * this.ground.v,
        r = -t.height * this.ground.v;
    if (ctxDrawImage(ctx, t, -i / 2, -r / 2, i, r), ctx.globalAlpha = 1, !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var a = (1 - this.hit.anim.v) * delta * 600 * scale,
            n = Math.cos(this.hit.angle - this.angle) * a,
            o = Math.sin(this.hit.angle - this.angle) * a
    } else n = 0, o = 0;
    t = sprite[e][world.time], ctxDrawImage(ctx, t, -t.width / 2 + n, -t.height / 2 + o), ctx.restore()
}

function draw_sign() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    0 === this.info ? img = sprite[SPRITE.SIGN][world.time] : img = sprite[SPRITE.SYMBOLS][world.time][this.info - 1], ctxDrawImage(ctx, img, -img.width / 2 + t, -img.height / 2 + i), ctx.restore()
}

function draw_bread_oven() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), !HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    if (31 & this.info && 992 & this.info && 31744 != (31744 & this.info)) {
        r = sprite[SPRITE.BREAD_OVEN_ON][world.time], ctxDrawImage(ctx, r, -r.width / 2 + t, -r.height / 2 + i), this.up.update();
        var r = sprite[SPRITE.BREAD_LIGHT_UP][world.time],
            a = -r.width * this.up.v,
            n = -r.height * this.up.v;
        ctxDrawImage(ctx, r, -a / 2 + 1 * scale, -n / 2 + 3 * scale, a, n)
    } else r = sprite[SPRITE.BREAD_OVEN_OFF][world.time], ctxDrawImage(ctx, r, -r.width / 2 + t, -r.height / 2 + i);
    ctx.restore()
}

function draw_windmill_wings() {
    let e = world.fast_units[user.uid];
    if (!HackSettings.FpsBoost.enabled && this.hit.update) var t = (1 - this.hit.anim.v) * delta * 600 * scale,
        i = Math.cos(this.hit.angle - this.angle) * t,
        r = Math.sin(this.hit.angle - this.angle) * t;
    else i = 0, r = 0;
    ctx.save(), ctx.translate(user.cam.x + this.x + i, user.cam.y + this.y + r), ctx.save(), !HackSettings.FpsBoost.enabled && ctx.rotate(this.rotate), img = sprite[SPRITE.WINDMILL_WINGS][world.time], ctxDrawImage(ctx, img, -img.width / 2 + i, -img.height / 2 + r), ctx.restore(), ctx.save(), ctx.rotate(this.angl), img = sprite[SPRITE.WINDMILL_HEAD][world.time], ctxDrawImage(ctx, img, -img.width / 2 + i, -img.height / 2 + r), ctx.restore(), ctx.restore(), HackSettings.BuildingInfo.enabled && this.info && ctx.drawImage(this.img.canvas, user.cam.x + this.x - 30, user.cam.y + this.y - 40), HackSettings.AutoSteal.enabled && e && HelperFns.isInRadius(e, this) && (65280 & this.info) >> 8 && client.socket.send(JSON.stringify([23, this.pid, this.id])), HackSettings.AutoBread.enabled && e && HelperFns.isInRadius(e, this) && (255 != (255 & this.info) && client.socket.send(JSON.stringify([22, 255, this.pid, this.id])), (65280 & this.info) >> 8 != 0 && client.socket.send(JSON.stringify([23, this.pid, this.id]))), HackSettings.ShowObjectChunks.enabled && HackSettings.ShowObjectChunks.types.windmills && (ctx.save(), ctx.globalAlpha = HackSettings.Xray.enabled ? HackSettings.Xray.opacity : 1, ctx.lineWidth = 1, ctx.strokeStyle = e && HelperFns.isInRadius(e, this) ? "green" : "red", ctx.strokeRect(user.cam.x + 100 * (this.ObjectX - 1), user.cam.y + 100 * (this.ObjectY - 1), 300, 300), ctx.restore())
}

function draw_extractor_stone() {
    if (!HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    ctx.save(), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (t += 2 * Math.random() - 1, i += 2 * Math.random() - 1), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.EXTRACTOR_MACHINE_STONE][world.time], ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * delta) % (2 * Math.PI)), !HackSettings.FpsBoost.enabled && ctx.rotate(this.rotate), img = sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][world.time], ctxDrawImage(ctx, img, -img.width / 2 + t, -img.height / 2 + i), ctx.restore(), HackSettings.BuildingInfo.enabled && this.info && ctx.drawImage(this.img.canvas, user.cam.x + this.x - 30, user.cam.y + this.y - 40)
}

function draw_extractor_gold() {
    if (!HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    ctx.save(), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (t += 2 * Math.random() - 1, i += 2 * Math.random() - 1), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][world.time], ctxDrawImage(ctx, img, -img.width / 2 + t, -img.height / 2 + i), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * delta) % (2 * Math.PI)), !HackSettings.FpsBoost.enabled && ctx.rotate(this.rotate), img = sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][world.time], ctxDrawImage(ctx, img, -img.width / 2 + t, -img.height / 2 + i), ctx.restore(), HackSettings.BuildingInfo.enabled && this.info && ctx.drawImage(this.img.canvas, user.cam.x + this.x - 30, user.cam.y + this.y - 40)
}

function draw_extractor_diamond() {
    let e = world.fast_units[user.uid];
    if (!HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var t = (1 - this.hit.anim.v) * delta * 600 * scale,
            i = Math.cos(this.hit.angle - this.angle) * t,
            r = Math.sin(this.hit.angle - this.angle) * t
    } else i = 0, r = 0;
    ctx.save(), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1, r += 2 * Math.random() - 1), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][world.time], ctxDrawImage(ctx, img, -img.width / 2 + i, -img.height / 2 + r), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * delta) % (2 * Math.PI)), !HackSettings.FpsBoost.enabled && ctx.rotate(this.rotate), img = sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][world.time], ctxDrawImage(ctx, img, -img.width / 2 + i, -img.height / 2 + r), ctx.restore(), HackSettings.BuildingInfo.enabled && this.info && ctx.drawImage(this.img.canvas, user.cam.x + this.x - 30, user.cam.y + this.y - 40), HackSettings.AutoSteal.enabled && e && HelperFns.isInRadius(e, this) && (65280 & this.info) >> 8 && client.socket.send(JSON.stringify([37, this.pid, this.id, 26])), HackSettings.AutoExe.enabled && e && HelperFns.isInRadius(e, this) && (255 != (255 & this.info) && client.socket.send(JSON.stringify([38, 255, this.pid, this.id, 26])), (65280 & this.info) >> 8 != 0 && client.socket.send(JSON.stringify([37, this.pid, this.id, 26]))), HackSettings.ShowObjectChunks.enabled && HackSettings.ShowObjectChunks.types.ext && (ctx.save(), ctx.globalAlpha = HackSettings.Xray.enabled ? HackSettings.Xray.opacity : 1, ctx.lineWidth = 1, ctx.strokeStyle = e && HelperFns.isInRadius(e, this) ? "green" : "red", ctx.strokeRect(user.cam.x + 100 * (this.ObjectX - 1), user.cam.y + 100 * (this.ObjectY - 1), 300, 300), ctx.restore())
}

function draw_extractor_amethyst() {
    let e = world.fast_units[user.uid];
    if (!HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var t = (1 - this.hit.anim.v) * delta * 600 * scale,
            i = Math.cos(this.hit.angle - this.angle) * t,
            r = Math.sin(this.hit.angle - this.angle) * t
    } else i = 0, r = 0;
    ctx.save(), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1, r += 2 * Math.random() - 1), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][world.time], ctxDrawImage(ctx, img, -img.width / 2 + i, -img.height / 2 + r), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * delta) % (2 * Math.PI)), !HackSettings.FpsBoost.enabled && ctx.rotate(this.rotate), img = sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][world.time], ctxDrawImage(ctx, img, -img.width / 2 + i, -img.height / 2 + r), ctx.restore(), HackSettings.BuildingInfo.enabled && this.info && ctx.drawImage(this.img.canvas, user.cam.x + this.x - 30, user.cam.y + this.y - 40), HackSettings.AutoSteal.enabled && e && HelperFns.isInRadius(e, this) && (65280 & this.info) >> 8 && client.socket.send(JSON.stringify([37, this.pid, this.id, 27])), HackSettings.AutoExe.enabled && e && HelperFns.isInRadius(e, this) && (255 != (255 & this.info) && client.socket.send(JSON.stringify([38, 255, this.pid, this.id, 27])), (65280 & this.info) >> 8 != 0 && client.socket.send(JSON.stringify([37, this.pid, this.id, 27]))), HackSettings.ShowObjectChunks.enabled && HackSettings.ShowObjectChunks.types.ext && (ctx.save(), ctx.globalAlpha = HackSettings.Xray.enabled ? HackSettings.Xray.opacity : 1, ctx.lineWidth = 1, ctx.strokeStyle = e && HelperFns.isInRadius(e, this) ? "green" : "red", ctx.strokeRect(user.cam.x + 100 * (this.ObjectX - 1), user.cam.y + 100 * (this.ObjectY - 1), 300, 300), ctx.restore())
}

function draw_extractor_reidite() {
    let e = world.fast_units[user.uid];
    if (!HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var t = (1 - this.hit.anim.v) * delta * 600 * scale,
            i = Math.cos(this.hit.angle - this.angle) * t,
            r = Math.sin(this.hit.angle - this.angle) * t
    } else i = 0, r = 0;
    ctx.save(), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (i += 2 * Math.random() - 1, r += 2 * Math.random() - 1), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), img = sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][world.time], ctxDrawImage(ctx, img, -img.width / 2 + i, -img.height / 2 + r), !HackSettings.FpsBoost.enabled && 255 & this.info && 65280 != (65280 & this.info) && (this.rotate = (this.rotate + 3 * delta) % (2 * Math.PI)), !HackSettings.FpsBoost.enabled && ctx.rotate(this.rotate), img = sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][world.time], ctxDrawImage(ctx, img, -img.width / 2 + i, -img.height / 2 + r), ctx.restore(), HackSettings.BuildingInfo.enabled && this.info && ctx.drawImage(this.img.canvas, user.cam.x + this.x - 30, user.cam.y + this.y - 40), HackSettings.AutoSteal.enabled && e && HelperFns.isInRadius(e, this) && (65280 & this.info) >> 8 && client.socket.send(JSON.stringify([37, this.pid, this.id, 28])), HackSettings.AutoExe.enabled && e && HelperFns.isInRadius(e, this) && (255 != (255 & this.info) && client.socket.send(JSON.stringify([38, 255, this.pid, this.id, 28])), (65280 & this.info) >> 8 != 0 && client.socket.send(JSON.stringify([37, this.pid, this.id, 28]))), HackSettings.ShowObjectChunks.enabled && HackSettings.ShowObjectChunks.types.ext && (ctx.save(), ctx.globalAlpha = HackSettings.Xray.enabled ? HackSettings.Xray.opacity : 1, ctx.lineWidth = 1, ctx.strokeStyle = e && HelperFns.isInRadius(e, this) ? "green" : "red", ctx.strokeRect(user.cam.x + 100 * (this.ObjectX - 1), user.cam.y + 100 * (this.ObjectY - 1), 300, 300), ctx.restore())
}

function draw_windmill_head() {
    if (!HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    ctx.save(), ctx.translate(user.cam.x + this.x + t, user.cam.y + this.y + i), ctx.rotate(this.angle), img = sprite[SPRITE.WINDMILL][world.time], ctxDrawImage(ctx, img, -img.width / 2 + t, -img.height / 2 + i), ctx.restore()
}

function draw_emerald_machine() {
    if (!HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var e = (1 - this.hit.anim.v) * delta * 600 * scale,
            t = Math.cos(this.hit.angle - this.angle) * e,
            i = Math.sin(this.hit.angle - this.angle) * e
    } else t = 0, i = 0;
    this.rotate1 = (this.rotate1 + 3 * delta) % (2 * Math.PI), this.rotate2 = (this.rotate2 - 3 * delta) % (2 * Math.PI), ctx.save(), ctx.translate(user.cam.x + this.x + t, user.cam.y + this.y + i), ctx.save(), ctx.rotate(this.angle), img = sprite[SPRITE.EMERALD_MACHINE][world.time], ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2), ctx.restore(), ctx.save(), ctx.rotate(this.rotate1), img = sprite[SPRITE.EMERALD_MACHINE_ROTATE][world.time], ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2), ctx.restore(), ctx.save(), ctx.rotate(this.rotate2), img = sprite[SPRITE.EMERALD_MACHINE_HOLE][world.time], ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2), ctx.restore(), ctx.restore()
}

function draw_resurrection() {
    var e = world.fast_units[user.uid];
    if (!HackSettings.FpsBoost.enabled && this.hit.update) {
        this.hit.anim.update() && 0 == this.hit.anim.o && (this.hit.update = !1);
        var t = (1 - this.hit.anim.v) * delta * 600 * scale,
            i = Math.cos(this.hit.angle - this.angle) * t,
            r = Math.sin(this.hit.angle - this.angle) * t
    } else i = 0, r = 0;
    this.rotate1 = (this.rotate1 + 3 * delta) % (2 * Math.PI), this.rotate2 = (this.rotate2 - 3 * delta) % (2 * Math.PI), ctx.save(), ctx.translate(user.cam.x + this.x + i, user.cam.y + this.y + r), ctx.save(), ctx.rotate(this.angle), img = sprite[SPRITE.RESURRECTION][world.time], ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2), ctx.restore(), ctx.save(), ctx.rotate(this.rotate1), img = sprite[SPRITE.RESURRECTION_ROTATE][world.time], ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2), ctx.restore(), ctx.save(), ctx.rotate(this.rotate2), img = sprite[SPRITE.RESURRECTION_HOLE][world.time], ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2), ctx.restore(), ctx.restore(), HackSettings.ShowObjectChunks.enabled && HackSettings.ShowObjectChunks.types.res && (ctx.save(), ctx.globalAlpha = HackSettings.Xray.enabled ? HackSettings.Xray.opacity : 1, ctx.lineWidth = 1, ctx.strokeStyle = e && HelperFns.isInRadius(e, this) ? "green" : "red", ctx.strokeRect(user.cam.x + 100 * (this.ObjectX - 1), user.cam.y + 100 * (this.ObjectY - 1), 300, 300), ctx.restore())
}

function draw_emerald_machine_halo() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.halo.update(), img = sprite[SPRITE.EMERALD_MACHINE_GROUND][world.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_resurrection_halo() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.halo.update(), img = sprite[SPRITE.RESURRECTION_GROUND][world.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_furnace_halo() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.halo.update(), img = sprite[SPRITE.HALO_FIRE][world.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_fire_halo() {
    ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.angle), this.fire.update(), img = sprite[SPRITE.FIRE][world.time], w = -img.width * this.fire.v, h = -img.height * this.fire.v, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), this.halo.update(), img = sprite[SPRITE.HALO_FIRE][world.time], w = -img.width * this.halo.v, h = -img.height * this.halo.v, ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h), ctx.restore()
}

function draw_player_effect(e) {
    if (e.right >= 0) switch (e.right) {
        case SPRITE.WATERING_CAN_FULL:
            ctx.save();
            var t = -3 * e.attack.v / Math.PI;
            if (e.attack.o) var i = -Math.PI / 3 - (Math.PI / 3 + e.attack.v) / 3;
            else i = e.attack.v;
            ctx.rotate(e.angle - Math.PI / 2 + i), ctx.globalAlpha = t / 1.2, circle(ctx, -40 * scale, 90 * scale, 5 * scale), fill_path(ctx, "#0B6A84"), ctx.globalAlpha = t / 1.2, circle(ctx, -52 * scale, 100 * scale, 8 * scale), fill_path(ctx, "#0B6A84"), ctx.globalAlpha = t / 1.2, circle(ctx, -30 * scale, 95 * scale, 4 * scale), fill_path(ctx, "#0B6A84"), ctx.globalAlpha = 1, ctx.restore();
            break;
        case SPRITE.SHOVEL:
        case SPRITE.SHOVEL_GOLD:
        case SPRITE.SHOVEL_DIAMOND:
        case SPRITE.SHOVEL_AMETHYST:
            if (1 === e.fly) break;
            if (e.dist_winter > 0) var r = SPRITE.ICE_SHOVEL_CO[world.time];
            else if (e.dist_sand > 0 || e.dist_desert > 0) r = SPRITE.SAND_SHOVEL_CO[world.time];
            else r = SPRITE.GRD_SHOVEL_CO[world.time];
            t = -3 * e.attack.v / Math.PI;
            if (e.attack.o) i = Math.max(.5 - t / 2 + .5, 0);
            else i = Math.max(t / 2, 0);
            0 === i && (e.angle_init = e.angle), ctx.save(), ctx.rotate(e.angle_init - Math.PI / 2), ctx.globalAlpha = t;
            var a = 25 * scale + 25 * i;
            circle(ctx, a, 80 * scale, 15 * scale), fill_path(ctx, r), circle(ctx, -a, 80 * scale, 15 * scale), fill_path(ctx, r), ctx.globalAlpha = 1, ctx.restore()
    }
}

function draw_player_right_stuff_after(e, t, i) {
    if (e >= 0) switch (img = sprite[e][world.time], e) {
        case SPRITE.WOOD_SHIELD:
        case SPRITE.STONE_SHIELD:
        case SPRITE.GOLD_SHIELD:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (0 + t), -img.height / 4 + scale * (i + 35));
            break;
        case SPRITE.DIAMOND_SHIELD:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (1 + t), -img.height / 4 + scale * (i + 45));
            break;
        case SPRITE.AMETHYST_SHIELD:
        case SPRITE.REIDITE_SHIELD:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (1 + t), -img.height / 4 + scale * (i + 40))
    }
}

function draw_player_right_stuff(e, t, i) {
    if (e >= 0) switch (img = sprite[e][world.time], e) {
        case SPRITE.PICK:
        case SPRITE.PICK_GOLD:
        case SPRITE.PICK_DIAMOND:
        case SPRITE.PICK_WOOD:
        case SPRITE.PICK_AMETHYST:
        case SPRITE.PICK_REIDITE:
            draw_image_transition(e, img, -img.width / 2 - scale * (45 + t), -img.height / 2 + scale * (i + 22));
            break;
        case SPRITE.SWORD_WOOD:
        case SPRITE.SWORD:
        case SPRITE.SWORD_GOLD:
        case SPRITE.SWORD_DIAMOND:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (47 + t), -img.height / 4 + scale * (i + 45));
            break;
        case SPRITE.SWORD_AMETHYST:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (52 + t), -img.height / 4 + scale * (i + 45));
            break;
        case SPRITE.REIDITE_SWORD:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (47 + t), -img.height / 4 + scale * (i + 44));
            break;
        case SPRITE.PIRATE_SWORD:
            draw_image_transition(e, img, -img.width / 2 - scale * (47 + t), -img.height / 2 + scale * (i + 44));
            break;
        case SPRITE.DRAGON_SWORD:
            draw_image_transition(e, img, -img.width / 2 - scale * (40 + t), -img.height / 2 + scale * (i + 65));
            break;
        case SPRITE.WOOD_SPEAR:
        case SPRITE.REIDITE_SPEAR:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (37 + t), -img.height / 4 + scale * (i + 85));
            break;
        case SPRITE.PITCHFORK2:
        case SPRITE.PITCHFORK:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (26 + t), -img.height / 4 + scale * (i + 77));
            break;
        case SPRITE.LAVA_SPEAR:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (37 + t), -img.height / 4 + scale * (i + 85));
            break;
        case SPRITE.LAVA_SWORD:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (47 + t), -img.height / 4 + scale * (i + 44));
            break;
        case SPRITE.WOOD_BOW:
        case SPRITE.STONE_BOW:
        case SPRITE.GOLD_BOW:
        case SPRITE.DIAMOND_BOW:
        case SPRITE.AMETHYST_BOW:
        case SPRITE.REIDITE_BOW:
        case SPRITE.DRAGON_BOW:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (37 + t), -img.height / 4 + scale * (i + 30));
            break;
        case SPRITE.MACHETE:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (47 + t), -img.height / 4 + scale * (i + 35));
            break;
        case SPRITE.WAND1:
        case SPRITE.WAND2:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (47 + t), -img.height / 4 + scale * (i + 40));
            break;
        case SPRITE.SADDLE:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (47 + t), -img.height / 4 + scale * (i + 34));
            break;
        case SPRITE.SPEAR:
        case SPRITE.GOLD_SPEAR:
        case SPRITE.DIAMOND_SPEAR:
        case SPRITE.AMETHYST_SPEAR:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (37 + t), -img.height / 4 + scale * (i + 90));
            break;
        case SPRITE.CRAB_SPEAR:
            draw_image_transition_hd(e, img, -img.width / 4 - scale * (40 + t), -img.height / 4 + scale * (i + 85));
            break;
        case SPRITE.DRAGON_SPEAR:
            draw_image_transition(e, img, -img.width / 2 - scale * (39 + t), -img.height / 2 + scale * (i + 90));
            break;
        case SPRITE.HAMMER:
        case SPRITE.HAMMER_GOLD:
        case SPRITE.HAMMER_DIAMOND:
        case SPRITE.HAMMER_AMETHYST:
        case SPRITE.HAMMER_REIDITE:
        case SPRITE.SUPER_HAMMER:
            draw_image_transition(e, img, -img.width / 2 - scale * (46 + t), -img.height / 2 + scale * (i + 35));
            break;
        case SPRITE.WATERING_CAN_FULL:
            draw_image_transition(e, img, -img.width / 2 - scale * (47 + t), -img.height / 2 + scale * (i + 54));
            break;
        case SPRITE.SHOVEL:
        case SPRITE.SHOVEL_GOLD:
        case SPRITE.SHOVEL_DIAMOND:
        case SPRITE.SHOVEL_AMETHYST:
            draw_image_transition(e, img, -img.width / 2 - scale * (46 + t), -img.height / 2 + scale * (i + 35));
            break;
        case SPRITE.SPANNER:
            draw_image_transition(e, img, -img.width / 2 - scale * (47 + t), -img.height / 2 + scale * (i + 20))
    }
}
var draw_player_clothe = function(e) {
    if (e > 0) {
        var t = sprite[e][world.time];
        switch (e) {
            case SPRITE.WOOD_HELMET:
                draw_image_transition(e, t, -t.width / 2 + 2 * scale, -t.height / 2 - 5 * scale);
                break;
            case SPRITE.EARMUFFS:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 - 18 * scale);
                break;
            case SPRITE.COAT:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 - 10 * scale);
                break;
            case SPRITE.EXPLORER_HAT:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 - 19 * scale);
                break;
            case SPRITE.PIRATE_HAT:
                draw_image_transition_hd(e, t, -t.width / 4, -t.height / 4 - 20 * scale);
                break;
            case SPRITE.STONE_HELMET:
                draw_image_transition(e, t, -t.width / 2 - 1 * scale, -t.height / 2 - 23 * scale);
                break;
            case SPRITE.GOLD_HELMET:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 - 5 * scale);
                break;
            case SPRITE.DIAMOND_HELMET:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 - 2 * scale);
                break;
            case SPRITE.AMETHYST_HELMET:
                draw_image_transition(e, t, -t.width / 2 + 1.5 * scale, -t.height / 2 - 1 * scale);
                break;
            case SPRITE.REIDITE_HELMET:
            case SPRITE.DIAMOND_PROTECTION:
            case SPRITE.AMETHYST_PROTECTION:
            case SPRITE.REIDITE_PROTECTION:
            case SPRITE.TURBAN1:
            case SPRITE.TURBAN2:
            case SPRITE.PILOT_HELMET:
            case SPRITE.LAVA_HELMET:
            case SPRITE.WITCH:
            case SPRITE.FUR_HAT:
            case SPRITE.FLOWER_HAT:
                draw_image_transition_hd(e, t, -t.width / 4, -t.height / 4 + 2 * scale);
                break;
            case SPRITE.CHRISTMAS_HAT:
            case SPRITE.ELF_HAT:
                draw_image_transition(e, t, -t.width / 2 - 5 * scale, -t.height / 2 - 2 * scale);
                break;
            case SPRITE.CAP_SCARF:
            case SPRITE.WINTER_HOOD:
            case SPRITE.DIVING_MASK:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 - 2 * scale);
                break;
            case SPRITE.SUPER_DIVING_SUIT:
                draw_image_transition(e, t, -t.width / 2 + 2 * scale, -t.height / 2);
                break;
            case SPRITE.DRAGON_HELMET:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 - 5 * scale);
                break;
            case SPRITE.CROWN_GREEN:
            case SPRITE.CROWN_ORANGE:
            case SPRITE.CROWN_BLUE:
                draw_image_transition(e, t, -t.width / 2 - 1 * scale, -t.height / 2);
                break;
            case SPRITE.HOOD:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 + 2 * scale);
                break;
            case SPRITE.PEASANT:
            case SPRITE.WINTER_PEASANT:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 + 8 * scale);
                break;
            case SPRITE.CROWN_CRAB:
                draw_image_transition(e, t, -t.width / 2, -t.height / 2 - 4 * scale)
        }
    }
};

function draw_vehicle() {
    if (!this.ghost && 0 !== this.vehicle) {
        if (this.x != this.r.x || this.y != this.r.y) {
            var e = (Utils.get_angle_2(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (2 * Math.PI);
            this.vehicle_fx2 = Utils.reduceAngle(e, this.vehicle_fx2), this.vehicle_fx2 = Utils.lerp(this.vehicle_fx2, e, .018)
        }
        if (ctx.save(), ctx.globalAlpha = .5, ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(this.vehicle_fx2), this.vehicle === INV.BOAT) {
            if (this.speed > 50 || this.vehicle_fx1 > 0) {
                this.speed > 50 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta), ctx.globalAlpha = .5;
                var t = sprite[SPRITE.BOAT_WAVE][world.time];
                draw_image_transition_hd(SPRITE.BOAT_WAVE, t, -t.width / 4, -t.height / 4), ctx.globalAlpha = .5
            }
            t = sprite[SPRITE.BOAT][world.time];
            draw_image_transition_hd(SPRITE.BOAT, t, -t.width / 4, -t.height / 4)
        } else if (this.vehicle === INV.HAWK) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018), this.vehicle_fx4.update(), this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - delta);
            t = sprite[SPRITE.HAWK_TAMED][world.time];
            draw_image_transition_hd(SPRITE.HAWK_TAMED, t, -t.width / 4, -t.height / 4), t = sprite[SPRITE.HAWK_WING_LEFT_TAMED][world.time], w = -t.width, h = -t.height, ctx.save(), ctx.translate(-20 * scale, -20 * scale), ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1), ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.restore(), t = sprite[SPRITE.HAWK_WING_RIGHT_TAMED][world.time], ctx.save(), ctx.translate(20 * scale, -20 * scale), ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1), ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.restore()
        } else if (this.vehicle === INV.BABY_LAVA) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018), this.vehicle_fx4.update(), this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - delta);
            t = sprite[SPRITE.BABY_LAVA_TAMED][world.time];
            draw_image_transition_hd(SPRITE.BABY_LAVA_TAMED, t, -t.width / 4, -t.height / 4), t = sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][world.time], w = -t.width, h = -t.height, ctx.save(), ctx.translate(-40 * scale, -45 * scale), ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1), ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.restore(), t = sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][world.time], ctx.save(), ctx.translate(40 * scale, -45 * scale), ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1), ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.restore()
        } else if (this.vehicle === INV.BABY_DRAGON) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018), this.vehicle_fx4.update(), this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4) : this.vehicle_fx1 = Math.max(.1, this.vehicle_fx1 - delta);
            t = sprite[SPRITE.BABY_DRAGON_TAMED][world.time];
            draw_image_transition_hd(SPRITE.BABY_DRAGON_TAMED, t, -t.width / 4, -t.height / 4), t = sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][world.time], w = -t.width, h = -t.height, ctx.save(), ctx.translate(-40 * scale, -45 * scale), ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1), ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.restore(), t = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][world.time], ctx.save(), ctx.translate(40 * scale, -45 * scale), ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1), ctxDrawImage(ctx, t, -w / 4, -h / 4, w / 2, h / 2), ctx.restore()
        } else if (this.vehicle === INV.NIMBUS) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018);
            t = sprite[SPRITE.NIMBUS][world.time];
            draw_image_transition_hd(SPRITE.NIMBUS, t, -t.width / 4, -t.height / 4)
        } else if (this.vehicle === INV.PLANE) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, .018);
            t = sprite[SPRITE.PLANE][world.time];
            draw_image_transition_hd(SPRITE.PLANE, t, -t.width / 4, -t.height / 4)
        } else if (this.vehicle === INV.SLED) {
            t = sprite[SPRITE.SLED][world.time];
            draw_image_transition_hd(SPRITE.SLED, t, -t.width / 4, -t.height / 4)
        } else if (this.vehicle === INV.BABY_MAMMOTH) {
            t = sprite[SPRITE.BABY_MAMMOTH_TAMED][world.time];
            this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta), this.vehicle_fx3 += 60 * delta, this.vehicle_fx3 > 60 && (this.vehicle_fx3 -= 60);
            var i = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6);
            draw_image_transition_hd(SPRITE.BABY_MAMMOTH_TAMED, t, -t.width / 4, -t.height / 4 + i)
        } else if (this.vehicle === INV.MOUNT_BOAR) {
            t = sprite[SPRITE.BOAR_TAMED][world.time];
            this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta), this.vehicle_fx3 += 60 * delta, this.vehicle_fx3 > 60 && (this.vehicle_fx3 -= 60);
            i = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6);
            draw_image_transition_hd(SPRITE.BOAR_TAMED, t, -t.width / 4, -t.height / 4 + i)
        } else if (this.vehicle === INV.CRAB_BOSS) {
            var r = Math.PI / 2,
                a = Math.PI / 4;
            t = sprite[SPRITE.CRAB_BOSS_TAMED][world.time];
            this.speed > 85 ? this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4) : this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta), this.vehicle_fx3 += 60 * delta, this.vehicle_fx3 > 60 && (this.vehicle_fx3 -= 60);
            i = this.vehicle_fx1 * (12 * (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) - 6);
            draw_image_transition_hd(SPRITE.CRAB_BOSS_TAMED, t, -t.width / 4 + i, -t.height / 4), ctx.restore(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(Math.PI + this.vehicle_fx2 + a), ctx.translate(120, i), ctx.rotate(r), t = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time], w = -t.width, h = -t.height, ctxDrawImage(ctx, t, -w / 2, -h / 2, w, h), ctx.restore(), ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), ctx.rotate(Math.PI + this.vehicle_fx2 + r + a), ctx.translate(120, i), ctx.rotate(r), t = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time], w = -t.width, h = -t.height, ctxDrawImage(ctx, t, -w / 2, -h / 2, w, h)
        }
        ctx.restore()
    }
}

function get_image_effect(e, t, i) {
    if (1 !== t.tryLoad()) return t;
    var r = __IMAGE_EFFECT__[i][e];
    if (void 0 === r) {
        var a = (r = document.createElement("canvas")).getContext("2d"),
            n = t.width,
            o = t.height;
        r.width = n, r.height = o, a.drawImage(t, 0, 0), a.globalCompositeOperation = "source-in", a.fillStyle = __IMAGE_EFFECT_COLOR__[i], a.fillRect(0, 0, n, o), __IMAGE_EFFECT__[i][e] = r
    }
    return r
}

function draw_player() {
    var e = 0;
    switch (this.right) {
        case SPRITE.WOOD_SHIELD:
        case SPRITE.STONE_SHIELD:
        case SPRITE.GOLD_SHIELD:
        case SPRITE.DIAMOND_SHIELD:
        case SPRITE.AMETHYST_SHIELD:
        case SPRITE.REIDITE_SHIELD:
            e = 1
    }
    if (this.ghost) {
        for (var t = 0; t < this.bubbles.length; t++) {
            var i = this.bubbles[t];
            if (i.life > .5) var r = 1 - 2 * (i.life - .5);
            else r = 2 * i.life;
            ctx.globalAlpha = r;
            var a = sprite[SPRITE.BUBBLES][world.time][i.id];
            ctxDrawImage(ctx, a, user.cam.x + i.x - a.width / 2, user.cam.y + i.y - a.height / 2), ctx.globalAlpha = 1
        }
        HackSettings.Timer.enabled && (ctx.save(), ctx.font = "30px Baloo Paaji", ctx.strokeStyle = "black", ctx.lineWidth = 7, ctx.strokeText(Math.floor(60 - (Date.now() - this.ghosttime) / 1e3) + 1, user.cam.x + this.x - 25, user.cam.y + this.y + 20), ctx.fillStyle = "white", ctx.fillText(Math.floor(60 - (Date.now() - this.ghosttime) / 1e3) + 1, user.cam.x + this.x - 25, user.cam.y + this.y + 20), ctx.restore())
    } else {
        ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), world.dist_from_biomes(this), this.action & STATE.ATTACK && draw_player_effect(this), ctx.save(), ctx.rotate(this.angle - Math.PI / 2), this.action & STATE.ATTACK || (this.action & STATE.IDLE || 0 !== this.vehicle ? this.idle.update() : this.action & STATE.WALK && this.walk.update());
        var n, o = this.idle.v,
            s = this.walk.v;
        this.clothe === SPRITE.WINTER_HOOD ? (a = sprite[SPRITE.GLOVES_HOOD][world.time], n = SPRITE.GLOVES_HOOD) : this.clothe === SPRITE.DIAMOND_PROTECTION ? (a = sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][world.time], n = SPRITE.GLOVES_DIAMOND_PROTECTION) : this.clothe === SPRITE.AMETHYST_PROTECTION ? (a = sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][world.time], n = SPRITE.GLOVES_AMETHYST_PROTECTION) : this.clothe === SPRITE.REIDITE_PROTECTION ? (a = sprite[SPRITE.GLOVES_REIDITE_PROTECTION][world.time], n = SPRITE.GLOVES_REIDITE_PROTECTION) : this.superzombie ? (a = sprite[SPRITE.ZOMBIE_HAND][world.time], n = SPRITE.ZOMBIE_HAND) : (a = sprite[SPRITE.HAND][this.skin][world.time], n = SPRITE.HAND), shadow = sprite[SPRITE.HAND_SHADOW][world.time];
        var _ = a,
            T = n;
        if (this.action & STATE.ATTACK) {
            this.attack.update() && 0 == this.attack.o && (this.hand = !this.hand, this.action -= STATE.ATTACK, this.uid == user.uid && (user.control.mouse = 0)), this.right >= 0 && (this.hand = !0);
            var E = this.hand ? this.attack.v : -this.attack.v / 3,
                I = this.hand ? this.attack.v / 3 : -this.attack.v;
            if (this.superzombie) ctx.save(), ctx.rotate(E), draw_image_transition(n, a, -a.width / 2 - scale * (66 + o), -a.height / 2 + (5 + s) * scale), ctx.restore(), ctx.save(), ctx.rotate(I), draw_image_transition(n, a, -a.width / 2 + scale * (66 + o), -a.height / 2 + (5 + s) * scale), ctx.restore();
            else if (0 === e) {
                if (this.right === SPRITE.WOOD_BOW && (E = -Utils.ease_out_quad(-E)), ctx.save(), ctx.rotate(E), draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - scale * (49 + o), -shadow.height / 2 + (15 + s) * scale), this.right === SPRITE.BOOK) {
                    var l = sprite[this.right][this.book][world.time];
                    draw_image_transition_hd_2(this.right, this.book, l, -l.width / 4 - scale * (62 + o), -l.height / 4 + scale * (s + 18))
                } else draw_player_right_stuff(this.right, o, s);
                n >= SPRITE.GLOVES_DIAMOND_PROTECTION ? draw_image_transition_hd(n, a, -a.width / 4 - scale * (49 + o), -a.height / 4 + (11 + s) * scale) : n !== SPRITE.GLOVES_HOOD ? draw_image_transition_hd_2(n, this.skin, a, -a.width / 4 - scale * (49 + o), -a.height / 4 + (11 + s) * scale) : draw_image_transition(n, a, -a.width / 2 - scale * (49 + o), -a.height / 2 + (11 + s) * scale), ctx.restore(), ctx.save(), ctx.rotate(I), draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + scale * (49 + o), -shadow.height / 2 + (15 + s) * scale), n >= SPRITE.GLOVES_DIAMOND_PROTECTION ? draw_image_transition_hd(n, a, -a.width / 4 + scale * (49 + o), -a.height / 4 + (11 + s) * scale) : n !== SPRITE.GLOVES_HOOD ? draw_image_transition_hd_2(n, this.skin, a, -a.width / 4 + scale * (49 + o), -a.height / 4 + (11 + s) * scale) : draw_image_transition(n, a, -a.width / 2 + scale * (49 + o), -a.height / 2 + (11 + s) * scale), ctx.restore()
            }
        } else if (this.superzombie) draw_image_transition(n, a, -a.width / 2 - scale * (66 + o), -a.height / 2 + (5 + s) * scale), draw_image_transition(n, a, -a.width / 2 + scale * (66 + o), -a.height / 2 + (5 + s) * scale);
        else if (0 === e) {
            if (draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - scale * (49 + o), -shadow.height / 2 + (15 + s) * scale), this.right === SPRITE.BOOK) {
                l = sprite[this.right][this.book][world.time];
                draw_image_transition_hd_2(this.right, this.book, l, -l.width / 4 - scale * (62 + o), -l.height / 4 + scale * (s + 18))
            } else draw_player_right_stuff(this.right, o, s);
            n >= SPRITE.GLOVES_DIAMOND_PROTECTION ? draw_image_transition_hd(n, a, -a.width / 4 - scale * (49 + o), -a.height / 4 + (11 + s) * scale) : n !== SPRITE.GLOVES_HOOD ? draw_image_transition_hd_2(n, this.skin, a, -a.width / 4 - scale * (49 + o), -a.height / 4 + (11 + s) * scale) : draw_image_transition(n, a, -a.width / 2 - scale * (49 + o), -a.height / 2 + (11 + s) * scale), draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + scale * (49 + o), -shadow.height / 2 + (15 + s) * scale), n >= SPRITE.GLOVES_DIAMOND_PROTECTION ? draw_image_transition_hd(n, a, -a.width / 4 + scale * (49 + o), -a.height / 4 + (11 + s) * scale) : n !== SPRITE.GLOVES_HOOD ? draw_image_transition_hd_2(n, this.skin, a, -a.width / 4 + scale * (49 + o), -a.height / 4 + (11 + s) * scale) : draw_image_transition(n, a, -a.width / 2 + scale * (49 + o), -a.height / 2 + (11 + s) * scale)
        }
        if (this.bag && this.clothe < 1) {
            a = sprite[SPRITE.BAG][this.baglook][world.time];
            draw_image_transition_hd_2(SPRITE.BAG, this.baglook, a, -a.width / 4, -a.height / 4 - 39 * scale)
        }
        if (this.superzombie) {
            a = sprite[SPRITE.ZOMBIE_BODY][world.time];
            draw_image_transition(SPRITE.ZOMBIE_BODY, a, -a.width / 2, -a.height / 2), this.move_head.update(), a = sprite[SPRITE.ZOMBIE_HEAD][world.time], draw_image_transition(SPRITE.ZOMBIE_HEAD, a, -a.width / 2, -a.height / 2 + this.move_head.v)
        } else {
            a = sprite[SPRITE.BODY][this.skin][world.time];
            if (this.clothe !== SPRITE.WINTER_HOOD && (draw_image_transition_hd_2(SPRITE.BODY, this.skin, a, -a.width / 4, -a.height / 4), this.accessory > 0)) {
                a = sprite[SPRITE.ACCESSORY][this.accessory][world.time];
                draw_image_transition_hd_2(SPRITE.ACCESSORY, this.accessory, a, -a.width / 4, -a.height / 4)
            }
        }
        if (this.action & STATE.HEAL) {
            if (this.heal.update() && 0 == this.heal.o && (this.action -= STATE.HEAL), ctx.globalAlpha = .6 - this.heal.v, this.superzombie) {
                a = sprite[SPRITE.ZOMBIE_HEAL];
                ctxDrawImage(ctx, a, -a.width / 2, -a.height / 2)
            } else {
                a = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HEAL__);
                ctxDrawImage(ctx, a, a.width / 4, a.height / 4, -a.width / 2, -a.height / 2)
            }
            ctx.globalAlpha = 1
        }
        if (this.action & STATE.WEB) {
            this.web.update() && 0 == this.web.o && (this.action -= STATE.WEB), ctx.globalAlpha = .6 - this.web.v;
            a = sprite[SPRITE.WEB];
            ctxDrawImage(ctx, a, -a.width / 2, -a.height / 2), ctx.globalAlpha = 1
        }
        if (this.action & STATE.HURT) {
            if (this.hit.update() && 0 == this.hit.o && (this.action -= STATE.HURT), ctx.globalAlpha = .6 - this.hit.v, this.superzombie) {
                a = sprite[SPRITE.ZOMBIE_HURT];
                ctxDrawImage(ctx, a, -a.width / 2, -a.height / 2)
            } else {
                a = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HURT__);
                ctxDrawImage(ctx, a, a.width / 4, a.height / 4, -a.width / 2, -a.height / 2)
            }
            ctx.globalAlpha = 1
        }
        if (this.action & STATE.COLD) {
            this.freeze.update() && 0 == this.freeze.o && (this.action -= STATE.COLD), ctx.globalAlpha = .6 - this.freeze.v;
            a = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_COLD__);
            ctxDrawImage(ctx, a, a.width / 4, a.height / 4, -a.width / 2, -a.height / 2), ctx.globalAlpha = 1
        }
        if (this.action & STATE.HUNGER) {
            if (this.starve.update() && 0 == this.starve.o && (this.action -= STATE.HUNGER), ctx.globalAlpha = .6 - this.starve.v, this.superzombie) {
                a = sprite[SPRITE.ZOMBIE_HUNGER];
                ctxDrawImage(ctx, a, -a.width / 2, -a.height / 2)
            } else {
                a = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HUNGER__);
                ctxDrawImage(ctx, a, a.width / 4, a.height / 4, -a.width / 2, -a.height / 2)
            }
            ctx.globalAlpha = 1
        }
        if (draw_player_clothe(this.clothe), 1 === e && (this.action & STATE.ATTACK && (o += 15 * this.attack.v), draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - 26 * scale, -shadow.height / 2 + (31 + s + o) * scale), T >= SPRITE.GLOVES_DIAMOND_PROTECTION ? draw_image_transition_hd(T, _, -_.width / 4 - 26 * scale, -_.height / 4 + (27 + s + o) * scale) : T !== SPRITE.GLOVES_HOOD ? draw_image_transition_hd_2(T, this.skin, _, -_.width / 4 - 26 * scale, -_.height / 4 + (27 + s + o) * scale) : draw_image_transition(T, _, -_.width / 2 - 26 * scale, -_.height / 2 + (27 + s + o) * scale), draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + 26 * scale, -shadow.height / 2 + (31 + s + o) * scale), T >= SPRITE.GLOVES_DIAMOND_PROTECTION ? draw_image_transition_hd(T, _, -_.width / 4 + 26 * scale, -_.height / 4 + (27 + s + o) * scale) : T !== SPRITE.GLOVES_HOOD ? draw_image_transition_hd_2(T, this.skin, _, -_.width / 4 + 26 * scale, -_.height / 4 + (27 + s + o) * scale) : draw_image_transition(T, _, -_.width / 2 + 26 * scale, -_.height / 2 + (27 + s + o) * scale), draw_player_right_stuff_after(this.right, 0, s + o)), ctx.restore(), this.dist_winter > 0) {
            this.player.label_winter || (this.player.label_winter = create_text(scale, this.player.nickname, 20, "#187484", "#000", 2, null, null, 300 * scale));
            a = this.player.label_winter
        } else {
            this.player.label || (this.player.label = create_text(scale, this.player.nickname, 20, "#FFF", "#000", 2, null, null, 300 * scale));
            a = this.player.label
        }
        world.day == SPRITE.NIGHT && (ctx.globalAlpha = .5);
        o = Math.floor(-a.width / 2), s = Math.floor(-a.height / 2 - 70 * scale);
        if (ctxDrawImage(ctx, a, o, s), this.player.level > 0) {
            var u = o + a.width + 5;
            a = sprite[SPRITE.VERIFIED], void 0 === PLAYER_LEVEL[this.player.level] && (PLAYER_LEVEL[this.player.level] = create_text(scale, "[" + this.player.level + "]", 20, "#F9E8A2", "#000", 2, null, null, 50 * scale)), ctxDrawImage(ctx, PLAYER_LEVEL[this.player.level], u, s)
        }
        if (ctx.globalAlpha = 1, user.in_team(this.pid)) {
            if (this.pid == user.team[0]) a = sprite[SPRITE.ICON_LEADER];
            else a = sprite[SPRITE.ICON_MEMBER];
            ctxDrawImage(ctx, a, o - a.width - 5, s - 6)
        }
        ctx.restore()
    }
}

function draw_alert_ghost() {
    if (this.enabled && this.delay >= 0) {
        var e = (new Date).getTime() - this.delay,
            t = e % 1e3 / 1e3;
        t > .5 ? t = 1 - 2 * (t - .5) : t *= 2, (e = Math.floor(e / 1e3)) < WORLD.GHOST_DELAY && (e = WORLD.GHOST_DELAY - e, this.label || (this.label = create_text(scale, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10)), this.now == e && this.sec || (this.now = e, this.sec = create_text(scale, "" + e, 40, "#660000", null, null, null, null, null, "#000", 10)), ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, 100 * scale), ctx.globalAlpha = t, ctxDrawImage(ctx, this.sec, (canw - this.label.width) / 2 - this.sec.width + 15 * scale, 100 * scale), ctx.globalAlpha = 1)
    }
}

function draw_welcome_message() {
    if (void 0 !== this.message) {
        var e = user.inv.can_select.length > 0 ? -95 : 0;
        ctxDrawImage(ctx, this.message, 0, canh - this.message.height + e)
    }
}

function draw_alert(e, t) {
    this.text && (this.timeout.o ? ctx.globalAlpha = 1 - this.timeout.v : ctx.globalAlpha = 1, this.label || (this.label = create_text(scale, this.text, 40, e, null, null, null, null, null, t, 10)), ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, 50 * scale), ctx.globalAlpha = 1, this.timeout.update() && 0 == this.timeout.o && (this.text = this.list.shift(), this.label = null))
}

function draw_chat() {
    if (ctx.save(), ctx.translate(user.cam.x + this.x, user.cam.y + this.y), this.text.length > 0) {
        for (var e = 0; e < this.text.length && e < 2; e++) HackSettings.CipherMessage.enabled && this.text[e].startsWith(HackSettings.CipherMessage.prefix) && (this.text[e] = this.text[e].substring(HackSettings.CipherMessage.prefix.length), this.text[e] = HelperFns.DeCipherMessage(this.text[e], Number(HackSettings.CipherMessage.cipherKey))), this.label[e] || (this.label[e] = create_message(scale, this.text[e]), this.text_effect[e] = 0, this.text_move[e] = 0), 1 === e && (this.text_move[0] = 30 * Utils.ease_in_out_quad(this.text_ease));
        this.text_effect[0] += delta, this.text.length > 1 && (this.text_ease = Math.min(this.text_ease + delta, 1), this.text_effect[0] > 1 && this.text_ease > .5 && (this.text_effect[1] += delta));
        for (e = 0; e < this.text.length && e < 2; e++) {
            var t = this.text_effect[e];
            t > 0 && (ctx.globalAlpha = t < .25 ? 4 * t : t > 3.75 ? Math.max(4 * (4 - t), 0) : 1, ctxDrawImage(ctx, this.label[e], -this.label[e].width / 2, -this.text_move[e] + -this.label[e].height / 2 - 110 * scale))
        }
        this.text_effect[0] > 4 && (this.text_effect.shift(), this.text.shift(), this.text_move.shift(), this.label.shift(), this.text_ease = 0)
    }
    ctx.restore()
}
__EFFECT_HURT__ = 0, __EFFECT_HEAL__ = 1, __EFFECT_COLD__ = 2, __EFFECT_HUNGER__ = 3, __EFFECT_BOX__ = 4, __IMAGE_EFFECT__ = [
    [],
    [],
    [],
    [],
    []
], __IMAGE_EFFECT_COLOR__ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
var __effect = 0;

function draw_objects_effect(e, t, i, r, a, n, o, s) {
    void 0 === s && (s = 0);
    for (var _ = o; _ >= s; _--)
        for (var T = e; T <= t; T++)
            for (var E = i; E <= r; E++) {
                var I = MAP.tiles[T][E];
                if (I && I[n]) {
                    var l = I[n][_];
                    if (void 0 !== l)
                        for (var u = 0; u < l.length; u++) {
                            var d = l[u],
                                c = sprite[a][world.time][_],
                                R = (__effect + 3 * (T + E)) % 60,
                                h = R < 30 ? R / 30 : 1 - (R - 30) / 30,
                                A = -c.width * (1 + .9 * h / 30),
                                S = -c.height * (1 + .9 * h / 30);
                            h = (R = (__effect + 7 * (T + E)) % 60) < 30 ? R / 30 : 1 - (R - 30) / 30;
                            var N = ctx.globalAlpha;
                            ctx.globalAlpha = (.9 + .1 * h) * N, ctxDrawImage(ctx, c, user.cam.x + d.x - A / 2, user.cam.y + d.y - S / 2, A, S), ctx.globalAlpha = N
                        }
                }
            }
}

function draw_breath_objects(e, t, i, r, a, n, o, s) {
    void 0 === s && (s = 0), world.breath[a].update();
    for (var _ = o; _ >= s; _--)
        for (var T = e; T <= t; T++)
            for (var E = i; E <= r; E++) {
                var I = MAP.tiles[T][E];
                if (I && I[n]) {
                    var l = I[n][_];
                    if (void 0 !== l)
                        for (var u = 0; u < l.length; u++) {
                            var d = l[u];
                            if (d.update) {
                                d.hit.update() && 0 == d.hit.o && (d.update = !1);
                                var c = (1 - d.hit.v) * delta * 600 * scale,
                                    R = Math.cos(d.angle) * c,
                                    h = Math.sin(d.angle) * c
                            } else R = 0, h = 0;
                            var A = sprite[a][world.time][_],
                                S = -A.width * world.breath[a].v,
                                N = -A.height * world.breath[a].v;
                            ctxDrawImage(ctx, A, user.cam.x + d.x - S / 2 + R, user.cam.y + d.y - N / 2 + h, S, N)
                        }
                }
            }
}
var randweb = [];
for (i = 0; i < 100; i++) {
    var r = 1;
    Math.random() < .25 && (r = 0), randweb.push(r)
}

function draw_map_objects(e, t, i, r, a, n, o, s, _) {
    void 0 === s && (s = 0);
    for (var T = o; T >= s; T--)
        for (var E = e; E <= t; E++)
            for (var I = i; I <= r; I++)
                if (!(_ > 0 && 1 === randweb[(E + I * _) % randweb.length])) {
                    var l = MAP.tiles[E][I];
                    if (void 0 !== l && void 0 !== l[n]) {
                        var u = l[n][T];
                        if (void 0 !== u)
                            for (var d = 0; d < u.length; d++) {
                                var c = u[d];
                                if (!HackSettings.FpsBoost.enabled && c.update) {
                                    c.hit.update() && 0 == c.hit.o && (c.update = !1);
                                    var R = (1 - c.hit.v) * delta * 600 * scale,
                                        h = Math.cos(c.angle) * R,
                                        A = Math.sin(c.angle) * R
                                } else h = 0, A = 0;
                                var S = sprite[a][world.time][T];
                                ctxDrawImage(ctx, S, user.cam.x + c.x - S.width / (2 * _scale_object) + h, user.cam.y + c.y - S.height / (2 * _scale_object) + A, S.width / _scale_object, S.height / _scale_object)
                            }
                    }
                }
}

function draw_map_decorations(e, t, i, r, a, n, o, s, _) {
    void 0 === s && (s = 0);
    for (var T = e; T <= t; T++)
        for (var E = i; E <= r; E++) {
            var I = MAP.tiles[T][E];
            if (void 0 !== I && void 0 !== I[n]) {
                var l = I[n];
                if (void 0 !== l)
                    if (1 === l.scale) {
                        var u = sprite[a][world.time][l._id];
                        ctx.save(), ctx.translate(user.cam.x + l.x, user.cam.y + l.y), ctx.rotate(l.angle), ctxDrawImage(ctx, u, -u.width / 4, -u.height / 4, u.width / 2, u.height / 2), ctx.restore()
                    } else if (3 === l.scale)
                    for (var d = 0; d < l.p.length; d++) {
                        ctx.save(), ctx.translate(user.cam.x + l.x, user.cam.y + l.y), ctx.rotate(l.p[d].angle);
                        u = sprite[a][world.time][l.p[d]._id];
                        ctxDrawImage(ctx, u, -u.width / 3 + l.p[d].x, -u.height / 3 + l.p[d].y, u.width / 1.5, u.height / 1.5), ctx.restore()
                    } else {
                        u = sprite[a][world.time][l._id];
                        ctx.save(), ctx.translate(user.cam.x + l.x, user.cam.y + l.y), ctx.rotate(l.angle), ctxDrawImage(ctx, u, -u.width / 2, -u.height / 2, u.width, u.height), ctx.restore()
                    }
            }
        }
}

function draw_lava_effect(e, t, i, r, a, n, o, s, _) {
    void 0 === s && (s = 0);
    for (var T = o; T >= s; T--)
        for (var E = e; E <= t; E++)
            for (var I = i; I <= r; I++) {
                var l = MAP.tiles[E][I];
                if (void 0 !== l && void 0 !== l[n]) {
                    var u = l[n][T];
                    if (void 0 !== u)
                        for (var d = 0; d < u.length; d++) {
                            var c = u[d];
                            if (c.update) {
                                c.hit.update() && 0 == c.hit.o && (c.update = !1);
                                var R = (1 - c.hit.v) * delta * 600 * scale,
                                    h = Math.cos(c.angle) * R,
                                    A = Math.sin(c.angle) * R
                            } else h = 0, A = 0;
                            for (var S = 0; S < _bubble[T].amount; S++) {
                                world.lava[S].last !== old_timestamp && (world.lava[S].update(), world.lava[S].last = old_timestamp);
                                var N = sprite[SPRITE.LAVA_BUBBLE][world.time][_bubble[T].pos[S].t],
                                    O = -N.width * world.lava[S].v,
                                    C = -N.height * world.lava[S].v;
                                ctxDrawImage(ctx, N, user.cam.x + c.x - O / 4 + h + _bubble[T].pos[S].x, user.cam.y + c.y - C / 4 + A + _bubble[T].pos[S].y, O / 2, C / 2)
                            }
                        }
                }
            }
}
_scale_object = 1, _bubble = [{
    amount: 10,
    pos: [{
        x: -128,
        y: -20,
        t: 0
    }, {
        x: -86,
        y: -4,
        t: 1
    }, {
        x: -60,
        y: -74,
        t: 2
    }, {
        x: -22,
        y: -144,
        t: 0
    }, {
        x: -58,
        y: 86,
        t: 0
    }, {
        x: 3,
        y: -30,
        t: 0
    }, {
        x: 65,
        y: -115,
        t: 1
    }, {
        x: 118,
        y: -50,
        t: 0
    }, {
        x: 73,
        y: 15,
        t: 1
    }, {
        x: 67,
        y: 79,
        t: 0
    }]
}, {
    amount: 5,
    pos: [{
        x: -45,
        y: -26,
        t: 0
    }, {
        x: -45,
        y: 20,
        t: 2
    }, {
        x: 10,
        y: -60,
        t: 1
    }, {
        x: 52,
        y: -17,
        t: 1
    }, {
        x: 14,
        y: 45,
        t: 0
    }]
}, {
    amount: 3,
    pos: [{
        x: -30,
        y: 3,
        t: 2
    }, {
        x: 7,
        y: -38,
        t: 2
    }, {
        x: 37,
        y: 5,
        t: 2
    }]
}, {
    amount: 11,
    pos: [{
        x: -74,
        y: -87,
        t: 2
    }, {
        x: -11,
        y: -10,
        t: 1
    }, {
        x: -99,
        y: 17,
        t: 1
    }, {
        x: -66,
        y: 84,
        t: 0
    }, {
        x: -55,
        y: 123,
        t: 1
    }, {
        x: 10,
        y: 81,
        t: 2
    }, {
        x: 52,
        y: 50,
        t: 0
    }, {
        x: 138,
        y: 9,
        t: 1
    }, {
        x: 104,
        y: -28,
        t: 0
    }, {
        x: 67,
        y: -56,
        t: 2
    }, {
        x: 5,
        y: -112,
        t: 0
    }]
}, {
    amount: 6,
    pos: [{
        x: -33,
        y: -66,
        t: 2
    }, {
        x: -58,
        y: 10,
        t: 0
    }, {
        x: -19,
        y: 44,
        t: 1
    }, {
        x: 44,
        y: 20,
        t: 0
    }, {
        x: 53,
        y: -36,
        t: 2
    }, {
        x: 7,
        y: -62,
        t: 0
    }]
}, {
    amount: 3,
    pos: [{
        x: -19,
        y: -25,
        t: 1
    }, {
        x: -29,
        y: 13,
        t: 2
    }, {
        x: 12,
        y: 12,
        t: 0
    }]
}];
var _js = 0,
    _je = 0,
    _is = 0,
    _ie = 0;

function draw_world() {
    var e = _js,
        t = _je,
        i = _is,
        r = _ie;
    ui.quality && draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.LAKE_EDGE, "l", 2), ui.quality && draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.LAVA_GROUND, "la", 5), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.MAGMA, "la", 5), draw_map_transition(draw_breath_objects, i, r, e, t, SPRITE.LAKE, "l", 2), ui.quality && (draw_map_transition(draw_lava_effect, i, r, e, t, SPRITE.MAGMA, "la", 5), draw_map_transition(draw_breath_objects, i, r, e, t, SPRITE.LAKE_DEEP, "l", 2)), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.MARKER, "ma", 3);
    for (var a = world.units[ITEMS.SAND_WORM], n = 0; n < a.length; n++) a[n].draw_ground();
    var o = world.units[ITEMS.PLAYERS];
    for (n = 0; n < o.length; n++)
        for (var s = o[n], _ = 0; _ < s.swim.length; _++) draw_swim(s.swim[_]);
    var T = world.units[ITEMS.BRIDGE];
    for (n = 0; n < T.length; n++) draw_transition(T[n], SPRITE.BRIDGE), T[n].draw_life(T[n].info);
    var E = world.units[ITEMS.FURNACE];
    for (n = 0; n < E.length; n++) 2 == E[n].action && draw_bg_transition(E[n]);
    var I = world.units[ITEMS.FIRE];
    for (n = 0; n < I.length; n++) draw_bg_transition(I[n], SPRITE.WOOD_FIRE);
    var l = world.units[ITEMS.RESURRECTION];
    for (n = 0; n < l.length; n++) draw_bg_transition(l[n]);
    var u = world.units[ITEMS.EMERALD_MACHINE];
    for (n = 0; n < u.length; n++) draw_bg_transition(u[n]);
    var d = world.units[ITEMS.BIG_FIRE];
    for (n = 0; n < d.length; n++) draw_bg_transition(d[n], SPRITE.BIG_FIRE_WOOD);
    var c = world.units[ITEMS.SIGN];
    for (n = 0; n < c.length; n++) draw_transition(c[n]);
    var R = world.units[ITEMS.PLOT];
    for (n = 0; n < R.length; n++) draw_transition(R[n], SPRITE.PLOT);
    var h = world.units[ITEMS.SEED];
    for (n = 0; n < h.length; n++) draw_bg_transition(h[n]);
    for (h = world.units[ITEMS.TOMATO_SEED], n = 0; n < h.length; n++) draw_bg_transition(h[n]);
    for (h = world.units[ITEMS.SEED], n = 0; n < h.length; n++) draw_fg_transition(h[n]);
    var A = world.units[ITEMS.CARROT_SEED];
    for (n = 0; n < A.length; n++) 0 != (15 & A[n].info) && 10 !== A[n].info || draw_transition(A[n]);
    var S = world.units[ITEMS.WATERMELON_SEED];
    for (n = 0; n < S.length; n++) 0 != (15 & S[n].info) && 10 !== S[n].info || draw_transition(S[n]);
    var N = world.units[ITEMS.ALOE_VERA_SEED];
    for (n = 0; n < N.length; n++) 0 != (15 & N[n].info) && 10 !== N[n].info || draw_transition(N[n]);
    var O = world.units[ITEMS.WHEAT_MOB];
    for (n = 0; n < O.length; n++) draw_transition(O[n], SPRITE.WHEAT_SEED);
    var C = world.units[ITEMS.GARLIC_SEED];
    for (n = 0; n < C.length; n++) 0 != (15 & C[n].info) && 10 !== C[n].info || draw_transition(C[n]);
    var g = world.units[ITEMS.THORNBUSH_SEED];
    for (n = 0; n < g.length; n++) 0 != (15 & g[n].info) && 10 !== g[n].info || draw_transition(g[n]);
    var p = world.units[ITEMS.PUMPKIN_SEED];
    for (n = 0; n < p.length; n++) 0 != (15 & p[n].info) && 10 !== p[n].info || draw_transition(p[n]);
    for (O = world.units[ITEMS.WHEAT_SEED], n = 0; n < O.length; n++) draw_transition(O[n]);
    if (!HackSettings.DrawBoxesOnTop.enabled) {
        var b = world.units[ITEMS.CRATE];
        for (n = 0; n < b.length; n++) draw_transition(b[n], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX)
    }
    if (!HackSettings.DrawBoxesOnTop.enabled) {
        var D = world.units[ITEMS.DEAD_BOX];
        for (n = 0; n < D.length; n++) draw_transition(D[n], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX)
    }
    var m = world.units[ITEMS.GIFT];
    for (n = 0; n < m.length; n++) draw_transition(m[n], SPRITE.GIFT, SPRITE.HURT_GIFT);
    var v = world.units[ITEMS.WOOD_DOOR_SPIKE];
    for (n = 0; n < v.length; n++) 1 & v[n].info && draw_transition(v[n], SPRITE.DOOR_WOOD_OPEN);
    for (v = world.units[ITEMS.STONE_DOOR_SPIKE], n = 0; n < v.length; n++) 1 & v[n].info && draw_transition(v[n], SPRITE.DOOR_STONE_OPEN);
    for (v = world.units[ITEMS.GOLD_DOOR_SPIKE], n = 0; n < v.length; n++) v[n].info && draw_transition(v[n], SPRITE.DOOR_GOLD_OPEN);
    for (v = world.units[ITEMS.DIAMOND_DOOR_SPIKE], n = 0; n < v.length; n++) v[n].info && draw_transition(v[n], SPRITE.DOOR_DIAMOND_OPEN);
    for (v = world.units[ITEMS.AMETHYST_DOOR_SPIKE], n = 0; n < v.length; n++) v[n].info && draw_transition(v[n], SPRITE.DOOR_AMETHYST_OPEN);
    for (v = world.units[ITEMS.REIDITE_DOOR_SPIKE], n = 0; n < v.length; n++) v[n].info && draw_transition(v[n], SPRITE.DOOR_GOLD_OPEN);
    for (v = world.units[ITEMS.WOOD_DOOR], n = 0; n < v.length; n++) 1 & v[n].info && draw_transition(v[n], SPRITE.DOOR_WOOD_OPEN);
    for (v = world.units[ITEMS.STONE_DOOR], n = 0; n < v.length; n++) 1 & v[n].info && draw_transition(v[n], SPRITE.DOOR_STONE_OPEN);
    for (v = world.units[ITEMS.GOLD_DOOR], n = 0; n < v.length; n++) v[n].info && draw_transition(v[n], SPRITE.DOOR_GOLD_OPEN);
    for (v = world.units[ITEMS.DIAMOND_DOOR], n = 0; n < v.length; n++) v[n].info && draw_transition(v[n], SPRITE.DOOR_DIAMOND_OPEN);
    for (v = world.units[ITEMS.AMETHYST_DOOR], n = 0; n < v.length; n++) v[n].info && draw_transition(v[n], SPRITE.DOOR_AMETHYST_OPEN);
    for (v = world.units[ITEMS.REIDITE_DOOR], n = 0; n < v.length; n++) v[n].info && draw_transition(v[n], SPRITE.DOOR_GOLD_OPEN);
    var P = world.units[ITEMS.RABBIT];
    for (n = 0; n < P.length; n++) draw_transition(P[n], SPRITE.RABBIT, SPRITE.HURT_RABBIT);
    var M = world.units[ITEMS.BED];
    for (n = 0; n < M.length; n++) draw_transition(M[n], SPRITE.BED);
    for (a = world.units[ITEMS.SAND_WORM], n = 0; n < a.length; n++) draw_transition(a[n], SPRITE.SAND_WORM, SPRITE.HURT_SAND_WORM);
    var f = world.units[ITEMS.SPELL];
    for (n = 0; n < f.length; n++) 0 === f[n].fly && draw_transition(f[n]);
    o = world.units[ITEMS.PLAYERS];
    if (!HackSettings.DrawPlayerOnTop.enabled)
        for (n = 0; n < o.length; n++) {
            s = o[n];
            if (o[n].vehicle !== INV.BABY_DRAGON && o[n].vehicle !== INV.BABY_LAVA && o[n].vehicle !== INV.HAWK && o[n].vehicle !== INV.PLANE && o[n].vehicle !== INV.NIMBUS) {
                if (0 === s.tower)
                    if (s.tower_fx > .001) {
                        s.tower_fx = Utils.lerp(s.tower_fx, 0, .018);
                        var L = 1 + .18 * Math.min(1, Math.max(s.tower_fx, 0) / 100);
                        ctx.save(), ctx.scale(L, L), user.cam.x /= L, user.cam.y /= L, s.x /= L, s.y /= L, s.r.x /= L, s.r.y /= L, s.draw_vehicle(), s.draw(), user.cam.x *= L, user.cam.y *= L, s.x *= L, s.y *= L, s.r.x *= L, s.r.y *= L, ctx.restore()
                    } else s.fly = 0, s.draw_vehicle(), s.draw()
            } else if (s.speed <= 180) {
                ctx.save();
                L = 1 + .35 * Math.min(1, Math.max(s.vehicle_fx5 - 30, 0) / 180);
                ctx.scale(L, L), user.cam.x /= L, user.cam.y /= L, s.x /= L, s.y /= L, s.r.x /= L, s.r.y /= L, s.fly = 0, s.draw_vehicle(), s.draw(), user.cam.x *= L, user.cam.y *= L, s.x *= L, s.y *= L, s.r.x *= L, s.r.y *= L, ctx.restore()
            }
        }
    for (M = world.units[ITEMS.BED], n = 0; n < M.length; n++) draw_transition(M[n], SPRITE.BED_TOP);
    var G = world.units[ITEMS.CRAB];
    for (n = 0; n < G.length; n++) draw_transition(G[n]);
    var V = world.units[ITEMS.FOX];
    for (n = 0; n < V.length; n++) draw_transition(V[n], SPRITE.FOX, SPRITE.HURT_FOX);
    var H = world.units[ITEMS.BOAR];
    for (n = 0; n < H.length; n++) draw_transition(H[n]);
    var y = world.units[ITEMS.WOLF];
    for (n = 0; n < y.length; n++) draw_transition(y[n], SPRITE.WOLF, SPRITE.HURT_WOLF);
    var w = world.units[ITEMS.BABY_DRAGON];
    for (n = 0; n < w.length; n++) draw_transition(w[n], SPRITE.BABY_DRAGON, SPRITE.HURT_BABY_DRAGON);
    var z = world.units[ITEMS.BABY_LAVA];
    for (n = 0; n < z.length; n++) draw_transition(z[n], SPRITE.BABY_LAVA, SPRITE.HURT_BABY_LAVA);
    for (A = world.units[ITEMS.CARROT_SEED], n = 0; n < A.length; n++) 0 != (15 & A[n].info) && 10 !== A[n].info && draw_transition(A[n]);
    for (S = world.units[ITEMS.WATERMELON_SEED], n = 0; n < S.length; n++) 0 != (15 & S[n].info) && 10 !== S[n].info && draw_transition(S[n]);
    for (N = world.units[ITEMS.ALOE_VERA_MOB], n = 0; n < N.length; n++) draw_transition(N[n], SPRITE.ALOE_VERA);
    for (N = world.units[ITEMS.ALOE_VERA_SEED], n = 0; n < N.length; n++) 0 != (15 & N[n].info) && 10 !== N[n].info && draw_transition(N[n]);
    for (h = world.units[ITEMS.TOMATO_SEED], n = 0; n < h.length; n++) draw_fg_transition(h[n]);
    for (C = world.units[ITEMS.GARLIC_SEED], n = 0; n < C.length; n++) 0 != (15 & C[n].info) && 10 !== C[n].info && draw_transition(C[n]);
    for (g = world.units[ITEMS.THORNBUSH_SEED], n = 0; n < g.length; n++) 0 != (15 & g[n].info) && 10 !== g[n].info && draw_transition(g[n]);
    for (p = world.units[ITEMS.PUMPKIN_SEED], n = 0; n < p.length; n++) 0 != (15 & p[n].info) && 10 !== p[n].info && draw_transition(p[n]);
    var U = world.units[ITEMS.TREASURE_CHEST];
    for (n = 0; n < U.length; n++) draw_transition(U[n], SPRITE.TREASURE_CHEST, SPRITE.HURT_TREASURE_CHEST);
    var B = world.units[ITEMS.KRAKEN];
    for (n = 0; n < B.length; n++) draw_transition(B[n], SPRITE.KRAKEN, SPRITE.HURT_KRAKEN);
    var W = world.units[ITEMS.PIRANHA];
    for (n = 0; n < W.length; n++) draw_transition(W[n], SPRITE.PIRANHA, SPRITE.HURT_PIRANHA);
    var k = world.units[ITEMS.SPIDER];
    for (n = 0; n < k.length; n++) draw_transition(k[n], SPRITE.SPIDER, SPRITE.HURT_SPIDER);
    var F = world.units[ITEMS.PENGUIN];
    for (n = 0; n < F.length; n++) draw_transition(F[n], SPRITE.PENGUIN, SPRITE.HURT_PENGUIN);
    var K = world.units[ITEMS.BEAR];
    for (n = 0; n < K.length; n++) draw_transition(K[n], SPRITE.BEAR, SPRITE.HURT_BEAR);
    var x = world.units[ITEMS.BABY_MAMMOTH];
    for (n = 0; n < x.length; n++) draw_transition(x[n]);
    var Y = world.units[ITEMS.FLAME];
    for (n = 0; n < Y.length; n++) draw_transition(Y[n], SPRITE.FIRE_MOB, SPRITE.HURT_FIRE_MOB);
    var J = world.units[ITEMS.CRAB_BOSS];
    for (n = 0; n < J.length; n++) draw_transition(J[n]);
    var X = world.units[ITEMS.MAMMOTH];
    for (n = 0; n < X.length; n++) draw_transition(X[n], SPRITE.MAMMOTH, SPRITE.HURT_MAMMOTH);
    var j = world.units[ITEMS.DRAGON];
    for (n = 0; n < j.length; n++) 1 === j[n].scale && draw_transition(j[n], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
    for (j = world.units[ITEMS.LAVA_DRAGON], n = 0; n < j.length; n++) 1 === j[n].scale && draw_transition(j[n], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
    var q = world.units[ITEMS.CHEST];
    if (!HackSettings.ChestOnTop.enabled)
        for (n = 0; n < q.length; n++) {
            draw_transition(q[n]);
            let e = world.fast_units[user.uid];
            if (e && (HackSettings.AutoSteal.enabled && (!q[n].ally && q[n].lock || HelperFns.isInRadius(e, q[n]) && (client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])))), !HackSettings.SwordInChest.enabled || 1 != HelperFns.isPlayerHoldingWeapon(e, !1) && 2 != HelperFns.isPlayerHoldingWeapon(e, !1) || q[n].lock && !q[n].ally || HelperFns.isInRadius(e, q[n]) && (0 === InventoryCounter && (InventoryCounter++, OldInventory = [...user.inv.can_select]), client.socket.send(JSON.stringify([8, e.right, 255, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), chestDelay = Date.now()), 1 === InventoryCounter && Date.now() - chestDelay > 200)) {
                InventoryCounter = 0, chestDelay = Date.now();
                var Z = 0;
                for (n = 0; n < OldInventory.length; n++) user.inv.n[OldInventory[n].id] ? user.inv.can_select[n - Z] = OldInventory[n] : Z++;
                game.update_inv_buttons()
            }
        }
    var $ = world.units[ITEMS.WORKBENCH];
    for (n = 0; n < $.length; n++) draw_transition($[n], SPRITE.WORKBENCH);
    for (E = world.units[ITEMS.FURNACE], n = 0; n < E.length; n++) draw_transition(E[n]);
    var Q = world.units[ITEMS.BREAD_OVEN];
    for (n = 0; n < Q.length; n++) draw_transition(Q[n]);
    for (v = world.units[ITEMS.WOOD_DOOR], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10024 : 10025 : SPRITE.DOOR_WOOD_CLOSE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.STONE_DOOR], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10026 : 10027 : SPRITE.DOOR_STONE_CLOSE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.GOLD_DOOR], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10028 : 10029 : SPRITE.DOOR_GOLD_CLOSE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.DIAMOND_DOOR], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10030 : 10031 : SPRITE.DOOR_DIAMOND_CLOSE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.AMETHYST_DOOR], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10032 : 10033 : SPRITE.DOOR_AMETHYST_CLOSE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.REIDITE_DOOR], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10034 : 10035 : SPRITE.REIDITE_DOOR), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.WOOD_DOOR_SPIKE], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10012 : 10013 : SPRITE.WOOD_DOOR_SPIKE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.STONE_DOOR_SPIKE], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10014 : 10015 : SPRITE.STONE_DOOR_SPIKE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.GOLD_DOOR_SPIKE], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10016 : 10017 : SPRITE.GOLD_DOOR_SPIKE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.DIAMOND_DOOR_SPIKE], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10018 : 10019 : SPRITE.DIAMOND_DOOR_SPIKE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.AMETHYST_DOOR_SPIKE], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10020 : 10021 : SPRITE.AMETHYST_DOOR_SPIKE), v[n].draw_life(v[n].info >> 1);
    for (v = world.units[ITEMS.REIDITE_DOOR_SPIKE], n = 0; n < v.length; n++) 1 & v[n].info || draw_transition(v[n], HackSettings.ColoredSpikes.enabled ? v[n].ally ? 10022 : 10023 : SPRITE.REIDITE_DOOR_SPIKE), v[n].draw_life(v[n].info >> 1);
    var ee = world.units[ITEMS.WALL];
    for (n = 0; n < ee.length; n++) draw_transition(ee[n], SPRITE.WALL), ee[n].draw_life(ee[n].info);
    for (ee = world.units[ITEMS.STONE_WALL], n = 0; n < ee.length; n++) draw_transition(ee[n], SPRITE.STONE_WALL), ee[n].draw_life(ee[n].info);
    for (ee = world.units[ITEMS.GOLD_WALL], n = 0; n < ee.length; n++) draw_transition(ee[n], SPRITE.GOLD_WALL), ee[n].draw_life(ee[n].info);
    for (ee = world.units[ITEMS.DIAMOND_WALL], n = 0; n < ee.length; n++) draw_transition(ee[n], SPRITE.DIAMOND_WALL), ee[n].draw_life(ee[n].info);
    for (ee = world.units[ITEMS.AMETHYST_WALL], n = 0; n < ee.length; n++) draw_transition(ee[n], SPRITE.AMETHYST_WALL), ee[n].draw_life(ee[n].info);
    for (ee = world.units[ITEMS.REIDITE_WALL], n = 0; n < ee.length; n++) draw_transition(ee[n], SPRITE.REIDITE_WALL), ee[n].draw_life(ee[n].info);
    var te = world.units[ITEMS.SPIKE];
    for (n = 0; n < te.length; n++) draw_transition(te[n], HackSettings.ColoredSpikes.enabled ? te[n].ally ? 1e4 : 10001 : SPRITE.SPIKE), te[n].draw_life(te[n].info);
    for (te = world.units[ITEMS.STONE_SPIKE], n = 0; n < te.length; n++) draw_transition(te[n], HackSettings.ColoredSpikes.enabled ? te[n].ally ? 10002 : 10003 : SPRITE.STONE_SPIKE), te[n].draw_life(te[n].info);
    for (te = world.units[ITEMS.GOLD_SPIKE], n = 0; n < te.length; n++) draw_transition(te[n], HackSettings.ColoredSpikes.enabled ? te[n].ally ? 10004 : 10005 : SPRITE.GOLD_SPIKE), te[n].draw_life(te[n].info);
    for (te = world.units[ITEMS.DIAMOND_SPIKE], n = 0; n < te.length; n++) draw_transition(te[n], HackSettings.ColoredSpikes.enabled ? te[n].ally ? 10006 : 10007 : SPRITE.DIAMOND_SPIKE), te[n].draw_life(te[n].info);
    for (te = world.units[ITEMS.AMETHYST_SPIKE], n = 0; n < te.length; n++) draw_transition(te[n], HackSettings.ColoredSpikes.enabled ? te[n].ally ? 10008 : 10009 : SPRITE.AMETHYST_SPIKE), te[n].draw_life(te[n].info);
    for (te = world.units[ITEMS.REIDITE_SPIKE], n = 0; n < te.length; n++) draw_transition(te[n], HackSettings.ColoredSpikes.enabled ? te[n].ally ? 10010 : 10011 : SPRITE.REIDITE_SPIKE), te[n].draw_life(te[n].info);
    var ie = world.units[ITEMS.WELL];
    for (n = 0; n < ie.length; n++) {
        var re = ie[n];
        re.info > 0 ? draw_transition(re, SPRITE.WELL_FULL) : draw_transition(re, SPRITE.WELL_EMPTY)
    }
    var ae = world.units[ITEMS.TOTEM];
    for (n = 0; n < ae.length; n++) {
        if (draw_transition(ae[n], SPRITE.TOTEM), HackSettings.AutoTotem.enabled && !user.totem.wait && 0 === user.team.length) {
            let e = world.fast_units[user.uid];
            e && !((16 & ae[n].info) >> 4) && ae[n].info < 8 && HelperFns.isInRadius(e, ae[n]) && client.socket.send(JSON.stringify([18, ae[n].pid, ae[n].id]))
        }
        HackSettings.BuildingInfo.enabled && ae[n].info && ctx.drawImage(ae[n].img.canvas, user.cam.x + ae[n].x - 45, user.cam.y + ae[n].y - 45)
    }
    draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.GOLD, "g", 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.GOLD_WINTER, "gw", 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.DIAMOND, "d", 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.DIAMOND_WINTER, "dw", 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.PLANT, "p", 0), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.EMERALD, "m", 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.AMETHYST, "a", 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.REIDITE, "re", 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.SHADOW_CAVE_STONES, "cs", 3, 3), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.SHADOW_CAVE_STONES, "cs", 2, 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.SHADOW_CAVE_STONES, "cs", 1, 1), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.SHADOW_CAVE_STONES, "cs", 0, 0), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.CAVE_STONES, "cs", 3, 3), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.CAVE_STONES, "cs", 2, 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.CAVE_STONES, "cs", 1, 1), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.CAVE_STONES, "cs", 0, 0);
    var ne = world.units[ITEMS.FRUIT];
    for (n = 0; n < ne.length; n++)
        for (_ = 0; _ < ne[n].info; _++) draw_transition(ne[n].fruits[_], SPRITE.FRUIT);
    draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.STONES, "s", 2);
    var oe = world.units[ITEMS.EXTRACTOR_MACHINE_STONE];
    for (n = 0; n < oe.length; n++) draw_transition(oe[n]);
    for (oe = world.units[ITEMS.EXTRACTOR_MACHINE_GOLD], n = 0; n < oe.length; n++) draw_transition(oe[n]);
    for (oe = world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND], n = 0; n < oe.length; n++) draw_transition(oe[n]);
    for (oe = world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST], n = 0; n < oe.length; n++) draw_transition(oe[n]);
    for (oe = world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE], n = 0; n < oe.length; n++) draw_transition(oe[n]);
    var se = world.units[ITEMS.WINDMILL];
    for (n = 0; n < se.length; n++) draw_bg_transition(se[n]);
    for (I = world.units[ITEMS.FIRE], n = 0; n < I.length; n++) draw_fg_transition(I[n]);
    for (I = world.units[ITEMS.BIG_FIRE], n = 0; n < I.length; n++) draw_fg_transition(I[n]);
    for (E = world.units[ITEMS.FURNACE], n = 0; n < E.length; n++) 2 == E[n].action && draw_fg_transition(E[n]);
    for (Q = world.units[ITEMS.BREAD_OVEN], n = 0; n < Q.length; n++) draw_fg_transition(Q[n]);
    for (l = world.units[ITEMS.RESURRECTION], n = 0; n < l.length; n++)
        if (draw_fg_transition(l[n]), HackSettings.AutoCrown.enabled && user.ghost.enabled && +new Date - CrownCoolDown > 5050) {
            var _e = world.fast_units[user.uid];
            if (_e) {
                if (user.inv.n[39]) var Te = 39;
                else if (user.inv.n[38]) Te = 38;
                else if (user.inv.n[37]) Te = 37;
                else if (user.inv.n[36]) Te = 36;
                else if (user.inv.n[35]) Te = 35;
                HelperFns.isInRadius(_e, l[n]) && (client.socket.send(JSON.stringify([17, l[n].pid, l[n].id])), world.fast_units[user.uid].clothe === SPRITE.CROWN_BLUE || user.helmet.wait || client.socket.send(JSON.stringify([5, SPRITE.CROWN_BLUE])), Te && world.fast_units[user.uid].right !== Te && client.socket.send(JSON.stringify([5, Te])))
            }
        } for (u = world.units[ITEMS.EMERALD_MACHINE], n = 0; n < u.length; n++) draw_fg_transition(u[n]), u[n].draw_life(u[n].info), HackSettings.BuildingInfo.enabled && ctx.drawImage(u[n].img.canvas, user.cam.x + u[n].x - 55, user.cam.y + u[n].y - 35);
    draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.CACTUS, "c", 0), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.TREE, "t", 5, 4), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.FIR, "f", 2, 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.PALM, "plm", 0, 0), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.TREE_BRANCH, "b", 3, 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.TREE, "t", 3, 2), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.TREE_BRANCH, "b", 1, 0), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.FIR, "f", 1, 1), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.PALM, "plm", 1, 1), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.TREE, "t", 1, 0), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.FIR, "f", 0, 0), draw_map_transition(draw_map_objects, i, r, e, t, SPRITE.PALM, "plm", 2, 2);
    for (se = world.units[ITEMS.WINDMILL], n = 0; n < se.length; n++) draw_fg_transition(se[n]);
    var Ee = world.units[ITEMS.WOOD_TOWER];
    for (n = 0; n < Ee.length; n++) draw_transition(Ee[n], SPRITE.WOOD_TOWER);
    for (o = world.units[ITEMS.PLAYERS], n = 0; n < o.length; n++) {
        if (1 === (s = o[n]).tower && (s.speed < 180 || s.vehicle !== INV.BABY_DRAGON && s.vehicle !== INV.BABY_LAVA && s.vehicle !== INV.NIMBUS && s.vehicle !== INV.HAWK && s.vehicle !== INV.PLANE)) {
            s.tower_fx = Utils.lerp(s.tower_fx, 100, .018);
            L = 1 + .18 * Math.min(1, Math.max(s.tower_fx, 0) / 100);
            ctx.save(), ctx.scale(L, L), user.cam.x /= L, user.cam.y /= L, s.x /= L, s.y /= L, s.r.x /= L, s.r.y /= L, s.draw_vehicle(), s.draw(), user.cam.x *= L, user.cam.y *= L, s.x *= L, s.y *= L, s.r.x *= L, s.r.y *= L, ctx.restore()
        }
    }
    var Ie = world.units[ITEMS.ROOF];
    for (n = 0; n < Ie.length; n++) draw_transition(Ie[n], SPRITE.ROOF), Ie[n].draw_life(Ie[n].info);
    var le = world.units[ITEMS.FIREFLY];
    for (n = 0; n < le.length; n++) draw_transition(le[n], SPRITE.FIREFLY, SPRITE.HURT_FIREFLY);
    var ue = world.units[ITEMS.GARLAND];
    for (n = 0; n < ue.length; n++) draw_transition(ue[n], SPRITE.GARLAND);
    for (o = world.units[ITEMS.PLAYERS], n = 0; n < o.length; n++) {
        if (((s = o[n]).vehicle === INV.BABY_DRAGON || s.vehicle === INV.BABY_LAVA || s.vehicle === INV.NIMBUS || s.vehicle === INV.HAWK || s.vehicle === INV.PLANE) && s.speed > 180) {
            s.fly = 1, ctx.save();
            L = 1 + .35 * Math.min(1, Math.max(s.vehicle_fx5 - 30, 0) / 180);
            ctx.scale(L, L), user.cam.x /= L, user.cam.y /= L, s.x /= L, s.y /= L, s.r.x /= L, s.r.y /= L, s.draw_vehicle(), s.draw(), user.cam.x *= L, user.cam.y *= L, s.x *= L, s.y *= L, s.r.x *= L, s.r.y *= L, ctx.restore()
        }
    }
    for (f = world.units[ITEMS.SPELL], n = 0; n < f.length; n++) 1 === f[n].fly && draw_transition(f[n]);
    for (j = world.units[ITEMS.DRAGON], n = 0; n < j.length; n++) j[n].scale > 1 && draw_transition(j[n], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
    for (j = world.units[ITEMS.LAVA_DRAGON], n = 0; n < j.length; n++) j[n].scale > 1 && draw_transition(j[n], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
    var de = world.units[ITEMS.HAWK];
    for (n = 0; n < de.length; n++) draw_transition(de[n], SPRITE.HAWK, SPRITE.HURT_HAWK);
    var ce = world.units[ITEMS.VULTURE];
    for (n = 0; n < ce.length; n++) draw_transition(ce[n], SPRITE.VULTURE, SPRITE.HURT_VULTURE);
    (__effect += 15 * delta) > 60 && (__effect -= 60), HackSettings.NoFog.enabled || (draw_map_transition(draw_objects_effect, i, r, e, t, SPRITE.FOG, "fo", 2), draw_map_transition(draw_objects_effect, i, r, e, t, SPRITE.FOD, "fod", 2));
    q = world.units[ITEMS.CHEST];
    if (HackSettings.ChestOnTop.enabled)
        for (n = 0; n < q.length; n++) {
            draw_transition(q[n]);
            let e = world.fast_units[user.uid];
            if (e && (HackSettings.AutoSteal.enabled && (!q[n].ally && q[n].lock || HelperFns.isInRadius(e, q[n]) && (client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])))), !HackSettings.SwordInChest.enabled || 1 != HelperFns.isPlayerHoldingWeapon(e, !1) && 2 != HelperFns.isPlayerHoldingWeapon(e, !1) || q[n].lock && !q[n].ally || HelperFns.isInRadius(e, q[n]) && (0 === InventoryCounter && (InventoryCounter++, OldInventory = [...user.inv.can_select]), client.socket.send(JSON.stringify([8, e.right, 255, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), client.socket.send(JSON.stringify([9, q[n].pid, q[n].id])), chestDelay = Date.now()), 1 === InventoryCounter && Date.now() - chestDelay > 200)) {
                InventoryCounter = 0, chestDelay = Date.now();
                for (Z = 0, n = 0; n < OldInventory.length; n++) user.inv.n[OldInventory[n].id] ? user.inv.can_select[n - Z] = OldInventory[n] : Z++;
                game.update_inv_buttons()
            }
        }
    if (HackSettings.DrawBoxesOnTop.enabled)
        for (b = world.units[ITEMS.CRATE], n = 0; n < b.length; n++) draw_transition(b[n], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
    if (HackSettings.DrawBoxesOnTop.enabled)
        for (D = world.units[ITEMS.DEAD_BOX], n = 0; n < D.length; n++) draw_transition(D[n], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
    o = world.units[ITEMS.PLAYERS];
    if (HackSettings.DrawPlayerOnTop.enabled)
        for (n = 0; n < o.length; n++) {
            s = o[n];
            if (o[n].vehicle !== INV.BABY_DRAGON && o[n].vehicle !== INV.BABY_LAVA && o[n].vehicle !== INV.HAWK && o[n].vehicle !== INV.PLANE && o[n].vehicle !== INV.NIMBUS) {
                if (0 === s.tower)
                    if (s.tower_fx > .001) {
                        s.tower_fx = Utils.lerp(s.tower_fx, 0, .018);
                        L = 1 + .18 * Math.min(1, Math.max(s.tower_fx, 0) / 100);
                        ctx.save(), ctx.scale(L, L), user.cam.x /= L, user.cam.y /= L, s.x /= L, s.y /= L, s.r.x /= L, s.r.y /= L, s.draw_vehicle(), s.draw(), user.cam.x *= L, user.cam.y *= L, s.x *= L, s.y *= L, s.r.x *= L, s.r.y *= L, ctx.restore()
                    } else s.fly = 0, s.draw_vehicle(), s.draw()
            } else if (s.speed <= 180) {
                ctx.save();
                L = 1 + .35 * Math.min(1, Math.max(s.vehicle_fx5 - 30, 0) / 180);
                ctx.scale(L, L), user.cam.x /= L, user.cam.y /= L, s.x /= L, s.y /= L, s.r.x /= L, s.r.y /= L, s.fly = 0, s.draw_vehicle(), s.draw(), user.cam.x *= L, user.cam.y *= L, s.x *= L, s.y *= L, s.r.x *= L, s.r.y *= L, ctx.restore()
            }
        }
}

function draw_bg_transition(e, t) {
    world.transition ? (ctx.globalAlpha = 1, e.draw_bg(t), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1 - world.shade.v, e.draw_bg(t), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1) : e.draw_bg(t)
}

function draw_fg_transition(e, t) {
    world.transition ? (ctx.globalAlpha = 1, e.draw_fg(t), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1 - world.shade.v, e.draw_fg(t), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1) : e.draw_fg(t)
}

function draw_image_transition_2(e, t, i, r, a) {
    world.transition ? (ctx.globalAlpha = 1, ctxDrawImage(ctx, sprite[e][t][world.time], r, a), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1 - world.shade.v, ctxDrawImage(ctx, sprite[e][t][world.time], r, a), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1) : ctxDrawImage(ctx, i, r, a)
}

function draw_image_transition(e, t, i, r) {
    world.transition ? (ctx.globalAlpha = 1, ctxDrawImage(ctx, sprite[e][world.time], i, r), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1 - world.shade.v, ctxDrawImage(ctx, sprite[e][world.time], i, r), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1) : ctxDrawImage(ctx, t, i, r)
}

function draw_image_transition_hd_2(e, t, i, r, a) {
    var n = i.width,
        o = i.height,
        s = Math.floor(n / 2),
        _ = Math.floor(o / 2);
    world.transition ? (ctx.globalAlpha = 1, ctxDrawImage(ctx, sprite[e][t][world.time], 0, 0, n, o, r, a, s, _), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1 - world.shade.v, ctxDrawImage(ctx, sprite[e][t][world.time], 0, 0, n, o, r, a, s, _), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1) : ctxDrawImage(ctx, sprite[e][t][world.time], 0, 0, n, o, r, a, s, _)
}

function draw_image_transition_hd(e, t, i, r) {
    var a = t.width,
        n = t.height,
        o = Math.floor(a / 2),
        s = Math.floor(n / 2);
    world.transition ? (ctx.globalAlpha = 1, ctxDrawImage(ctx, sprite[e][world.time], 0, 0, a, n, i, r, o, s), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1 - world.shade.v, ctxDrawImage(ctx, sprite[e][world.time], 0, 0, a, n, i, r, o, s), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1) : ctxDrawImage(ctx, t, 0, 0, a, n, i, r, o, s)
}

function draw_swim(e) {
    ctx.globalAlpha = e.alpha, circle(ctx, e.x + user.cam.x, e.y + user.cam.y, e.r), fill_path(ctx, SPRITE.SWIM_COLOR[world.time]), ctx.globalAlpha = 1
}

function draw_foot(e) {
    ctx.save(), ctx.translate(user.cam.x + e.x, user.cam.y + e.y), ctx.rotate(e.angle), ctx.globalAlpha = e.alpha;
    var t = sprite[e.id][world.time];
    ctxDrawImage(ctx, t, -t.width / 2, -t.height / 2), ctx.globalAlpha = 1, ctx.restore()
}

function draw_imgs_transition(e, t, i, r, a) {
    world.transition && 1 == a ? (ctx.globalAlpha = 1, ctxDrawImage(ctx, sprite[e][world.time][t], i, r), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1 - world.shade.v, ctxDrawImage(ctx, sprite[e][world.time][t], i, r), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1) : (ctx.globalAlpha = a, ctxDrawImage(ctx, sprite[e][world.time][t], i, r), ctx.globalAlpha = 1)
}

function draw_transition(e, t, i) {
    world.transition ? (ctx.globalAlpha = 1, e.draw(t, i), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1 - world.shade.v, e.draw(t, i), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1) : e.draw(t, i)
}

function draw_map_transition(e, t, i, r, a, n, o, s, _, T) {
    world.transition ? (ctx.globalAlpha = 1, e(t, i, r, a, n, o, s, _, T), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1 - world.shade.v, e(t, i, r, a, n, o, s, _, T), world.time = world.time ? 0 : 1, ctx.globalAlpha = 1) : e(t, i, r, a, n, o, s, _, T)
}

function get_color_transition(e, t, i, r, a, n, o) {
    var s, _ = "#";
    return _ += (s = Math.floor(r * o + (1 - o) * e)) < 16 ? "0" + s.toString(16) : s.toString(16), _ += (s = Math.floor(a * o + (1 - o) * t)) < 16 ? "0" + s.toString(16) : s.toString(16), _ += (s = Math.floor(n * o + (1 - o) * i)) < 16 ? "0" + s.toString(16) : s.toString(16)
}

function draw_simple_ground() {
    if (world.transition) {
        var e = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(4, 43, 48, 19, 58, 43, e)
    } else ctx.fillStyle = SPRITE.GROUND[world.time];
    ctx.fillRect(0, 0, canw, canh)
}

function draw_ground() {
    for (var e = world.biomes.length - 1; e >= 0; e--) {
        if ((d = world.biomes[e]).t === world.BIOME_SEA) {
            var t = world.BIOME[d.t];
            if (-user.cam.x >= d.x1 - 230 - canw && -user.cam.x <= d.x2 + 330 && -user.cam.y >= d.y1 - canh && -user.cam.y <= d.y2 + 100) {
                var i = d.x2;
                d.t !== world.BIOME_SEA && (i -= 610);
                var r = d.x1;
                d.t !== world.BIOME_SEA && (r += 610);
                var a = d.y2;
                d.t !== world.BIOME_SEA && (a -= 610);
                var n = d.y1;
                if (d.t !== world.BIOME_SEA && (n += 610), world.transition) {
                    var o = world.time ? 1 - world.shade.v : world.shade.v;
                    ctx.fillStyle = get_color_transition(t.night[0], t.night[1], t.night[2], t.day[0], t.day[1], t.day[1], o)
                } else ctx.fillStyle = t._color[world.time];
                var s = Math.max(user.cam.x + r - 2 - 230, 0),
                    _ = Math.max(-user.cam.x + canw - i - 330 - 2, 0),
                    T = Math.max(user.cam.y + n - 2, 0),
                    E = Math.max(-user.cam.y + canh - a - 100 - 2, 0);
                ctx.beginPath(), ctx.fillRect(s, T, canw - _ - s, canh - T - E)
            }
        }
    }
    for (e = world.biomes.length - 1; e >= 0; e--) {
        if ((d = world.biomes[e]).t !== world.BIOME_SEA) {
            i = d.x2;
            d.t !== world.BIOME_SEA && (i -= 400);
            r = d.x1;
            d.t !== world.BIOME_SEA && (r += 400);
            a = d.y2;
            d.t !== world.BIOME_SEA && (a -= 300);
            n = d.y1;
            d.t !== world.BIOME_SEA && (n += 300), 0 == (d.v & WORLD.RIGHT) && -user.cam.x >= i - canw + 120 && -user.cam.x <= i + 820 && -user.cam.y >= n + 88 - canh && -user.cam.y <= a + 50 && (draw_beach_sand_right(i, n + 88, a - 88, user.beach[0], world.BIOME[d.t], d.v & WORLD.RIGHT), draw_beach_right(i, n + 88, a - 88, user.beach[0], world.BIOME[d.t], d.v & WORLD.RIGHT)), 0 == (d.v & WORLD.LEFT) && -user.cam.x >= r - canw - 700 && -user.cam.x <= r - 20 && -user.cam.y >= n + 88 - canh && -user.cam.y <= a + 50 && (draw_beach_sand_left(r, n + 88, a - 88, user.beach[1], world.BIOME[d.t], d.v & WORLD.LEFT), draw_beach_left(r, n + 88, a - 88, user.beach[1], world.BIOME[d.t], d.v & WORLD.LEFT)), 0 == (d.v & WORLD.BOTTOM) && -user.cam.x >= r - 235 - canw && -user.cam.x <= i + 350 && -user.cam.y >= a - canh - 275 && -user.cam.y <= a + 490 && (draw_beach_sand_bottom(a - 230, r - 230, i + 230, user.beach[2], world.BIOME[d.t], d.v & WORLD.BOTTOM), draw_beach_bottom(a - 230, r - 230, i + 230, user.beach[2], world.BIOME[d.t], d.v & WORLD.BOTTOM)), 0 == (d.v & WORLD.TOP) && -user.cam.x >= r - 235 - canw && -user.cam.x <= i + 350 && -user.cam.y >= n - canh - 390 && -user.cam.y <= n + 315 && (draw_beach_sand_top(n + 310, r - 230, i + 230, user.beach[3], world.BIOME[d.t], d.v & WORLD.TOP), draw_beach_top(n + 310, r - 230, i + 230, user.beach[3], world.BIOME[d.t], d.v & WORLD.TOP))
        }
    }
    for (e = world.biomes.length - 1; e >= 0; e--) {
        if ((d = world.biomes[e]).t !== world.BIOME_SEA) {
            i = d.x2;
            d.t !== world.BIOME_SEA && (i -= 400);
            r = d.x1;
            d.t !== world.BIOME_SEA && (r += 400);
            a = d.y2;
            d.t !== world.BIOME_SEA && (a -= 300);
            n = d.y1;
            d.t !== world.BIOME_SEA && (n += 300), 0 != (d.v & WORLD.RIGHT) && -user.cam.x >= i - canw + 120 && -user.cam.x <= i + 820 && -user.cam.y >= n + 88 - canh && -user.cam.y <= a + 50 && draw_beach_sand_right(i, n + 88, a - 88, user.beach[0], world.BIOME[d.t], d.v & WORLD.RIGHT), 0 != (d.v & WORLD.LEFT) && -user.cam.x >= r - canw - 700 && -user.cam.x <= r - 20 && -user.cam.y >= n + 88 - canh && -user.cam.y <= a + 50 && draw_beach_sand_left(r, n + 88, a - 88, user.beach[1], world.BIOME[d.t], d.v & WORLD.LEFT), 0 != (d.v & WORLD.BOTTOM) && -user.cam.x >= r - 235 - canw && -user.cam.x <= i + 350 && -user.cam.y >= a - canh - 275 && -user.cam.y <= a + 490 && draw_beach_sand_bottom(a - 230, r - 230, i + 230, user.beach[2], world.BIOME[d.t], d.v & WORLD.BOTTOM), 0 != (d.v & WORLD.TOP) && -user.cam.x >= r - 235 - canw && -user.cam.x <= i + 350 && -user.cam.y >= n - canh - 390 && -user.cam.y <= n + 315 && draw_beach_sand_top(n + 310, r - 230, i + 230, user.beach[3], world.BIOME[d.t], d.v & WORLD.TOP)
        }
    }
    for (e = world.biomes.length - 1; e >= 0; e--) {
        if ((d = world.biomes[e]).t !== world.BIOME_SEA) {
            t = world.BIOME[d.t];
            if (-user.cam.x >= d.x1 - 230 - canw && -user.cam.x <= d.x2 + 330 && -user.cam.y >= d.y1 - canh && -user.cam.y <= d.y2 + 100) {
                i = d.x2;
                d.t !== world.BIOME_SEA && (0 == (d.v & WORLD.RIGHT) ? i -= 414 : i -= 610);
                r = d.x1;
                d.t !== world.BIOME_SEA && (0 == (d.v & WORLD.LEFT) ? r += 414 : r += 610);
                a = d.y2;
                d.t !== world.BIOME_SEA && (0 == (d.v & WORLD.BOTTOM) ? a -= 414 : a -= 610);
                n = d.y1;
                if (d.t !== world.BIOME_SEA && (0 == (d.v & WORLD.TOP) ? n += 414 : n += 610), world.transition) {
                    o = world.time ? 1 - world.shade.v : world.shade.v;
                    ctx.fillStyle = get_color_transition(t.night[0], t.night[1], t.night[2], t.day[0], t.day[1], t.day[2], o)
                } else ctx.fillStyle = t._color[world.time];
                s = Math.max(user.cam.x + r - 2 - 230, 0), _ = Math.max(-user.cam.x + canw - i - 330 - 2, 0), T = Math.max(user.cam.y + n - 2, 0), E = Math.max(-user.cam.y + canh - a - 100 - 2, 0);
                ctx.beginPath(), ctx.fillRect(s, T, canw - _ - s, canh - T - E)
            }
        }
    }
    ui.quality && (draw_map_transition(draw_breath_objects, _is, _ie, _js, _je, SPRITE.WAVE_TWO, "isl", 2), draw_map_transition(draw_breath_objects, _is, _ie, _js, _je, SPRITE.WAVE_ONE, "isl", 2)), draw_map_transition(draw_map_objects, _is, _ie, _js, _je, SPRITE.ISLAND, "isl", 2), ui.quality && draw_map_transition(draw_map_decorations, _is, _ie, _js, _je, SPRITE.DECORATION, "de");
    var I = world.units[ITEMS.PLAYERS];
    for (e = 0; e < I.length; e++)
        for (var l = I[e], u = 0; u < l.foot.length; u++) draw_foot(l.foot[u]);
    (__wave += 40 * delta) > 60 && (__wave -= 60), draw_map_transition(draw_river_tile, _is, _ie, _js, _je, SPRITE.RIVER, "r", 0);
    for (e = 0; e < world.biomes.length; e++) {
        var d;
        if ((d = world.biomes[e]).t !== world.BIOME_SEA) {
            i = d.x2;
            d.t !== world.BIOME_SEA && (i -= 400);
            r = d.x1;
            d.t !== world.BIOME_SEA && (r += 400);
            a = d.y2;
            d.t !== world.BIOME_SEA && (a -= 300);
            n = d.y1;
            d.t !== world.BIOME_SEA && (n += 300), (d.v & WORLD.RIGHT) > 0 && -user.cam.x >= i - canw + 120 && -user.cam.x <= i + 820 && -user.cam.y >= n + 88 - canh && -user.cam.y <= a + 50 && draw_beach_right(i, n + 88, a - 88, user.beach[0], world.BIOME[d.t], d.v & WORLD.RIGHT), (d.v & WORLD.LEFT) > 0 && -user.cam.x >= r - canw - 700 && -user.cam.x <= r - 20 && -user.cam.y >= n + 88 - canh && -user.cam.y <= a + 50 && draw_beach_left(r, n + 88, a - 88, user.beach[1], world.BIOME[d.t], d.v & WORLD.LEFT), (d.v & WORLD.BOTTOM) > 0 && -user.cam.x >= r - 235 - canw && -user.cam.x <= i + 350 && -user.cam.y >= a - canh - 275 && -user.cam.y <= a + 490 && draw_beach_bottom(a - 230, r - 230, i + 230, user.beach[2], world.BIOME[d.t], d.v & WORLD.BOTTOM), (d.v & WORLD.TOP) > 0 && -user.cam.x >= r - 235 - canw && -user.cam.x <= i + 350 && -user.cam.y >= n - canh - 390 && -user.cam.y <= n + 315 && draw_beach_top(n + 310, r - 230, i + 230, user.beach[3], world.BIOME[d.t], d.v & WORLD.TOP)
        }
    }
}

function draw_ash() {
    for (var e = user.ash, t = e.flakes, i = 0; i < t.length; i++) {
        var r = t[i];
        e.update(r), draw_imgs_transition(SPRITE.ASHES, r.id, user.cam.x + r.x, user.cam.y + r.y, r.alpha)
    }
    for (i = 0; i < t.length; i++) {
        ((r = t[i]).life <= 0 || r.x > -user.cam.x + canw || r.x < -user.cam.x || r.y > -user.cam.y + canh) && t.splice(i, 1)
    }
    var a = -user.cam.y;
    world.dist_lava > -1e3 && e.add(a)
}

function draw_winter() {
    var e = user.winter;
    0 === e.tempest ? e.tempest_speed = Math.max(0, e.tempest_speed - delta / 10) : e.tempest_speed = Math.min(1, e.tempest_speed + delta / 10);
    for (var t = e.flakes, i = 0; i < t.length; i++) {
        var r = t[i];
        e.update(r), draw_imgs_transition(SPRITE.FLAKES, r.id, user.cam.x + r.x, user.cam.y + r.y, r.alpha)
    }
    for (i = 0; i < t.length; i++) {
        ((r = t[i]).life <= 0 || r.x > -user.cam.x + canw || r.x < -user.cam.x || r.y > -user.cam.y + canh) && t.splice(i, 1)
    }
    var a = -user.cam.y;
    world.dist_winter > -1e3 && e.add(a)
}

function draw_desert() {
    var e = user.desert;
    0 === e.tempest ? e.tempest_speed = Math.max(0, e.tempest_speed - delta / 10) : e.tempest_speed = Math.min(1, e.tempest_speed + delta / 10);
    for (var t = e.flakes, i = 0; i < t.length; i++) {
        var r = t[i];
        e.update(r), draw_imgs_transition(SPRITE.DESERT, r.id, user.cam.x + r.x, user.cam.y + r.y, r.alpha)
    }
    for (i = 0; i < t.length; i++) {
        ((r = t[i]).life <= 0 || r.x > -user.cam.x + canw || r.x < -user.cam.x - user.cam.w / 2 || r.y > -user.cam.y + canh) && t.splice(i, 1)
    }
    var a = -user.cam.y;
    world.dist_desert > -1e3 && e.add(a)
}

function draw_beach_sand_left(e, t, i, r, a, n) {
    var o = r.w1,
        s = r.w2,
        _ = r.w3,
        T = user.cam.x + e - 700,
        E = Math.max(user.cam.y + t, 0),
        I = Math.max(-user.cam.y + canh - i - 100, 0),
        l = E,
        u = canh - E - I;
    if (n) var d = r.t(o).x;
    else d = o.r.x;
    var c = T + WORLD.LW1SX;
    WORLD.W1SX, c += d + WORLD.W1SX - 2;
    if (n) d = r.t(s).x;
    else d = s.r.x;
    var R = T + WORLD.LW2SX - c + d,
        h = (c += R - 2) - 2;
    if (n) d = r.t(_).x;
    else d = _.r.x;
    if (h < c + (R = T + WORLD.LW3SX - c + d) - 3) c += R - 2;
    else {
        c = h
    }
    if (R = T + WORLD.LSANDX - c, n > 0 && 1 === a.isSand) {
        if (world.transition) {
            var A = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, A)
        } else ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
        ctx.fillRect(c, l, R, u)
    } else {
        if (world.transition) {
            A = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(a.night[0], a.night[1], a.night[2], a.day[0], a.day[1], a.day[2], A)
        } else ctx.fillStyle = a._color[world.time];
        ctx.fillRect(c, l, R, u)
    }
}

function draw_beach_left(e, t, i, r, a, n) {
    var o = r.w1,
        s = r.w2,
        _ = r.w3,
        T = user.cam.x + e - 700,
        E = Math.max(user.cam.y + t, 0),
        I = Math.max(-user.cam.y + canh - i - 100, 0),
        l = E,
        u = canh - E - I;
    if (n) var d = r.t(o);
    else d = o.r;
    var c = T + WORLD.LW1SX,
        R = c,
        h = l,
        A = d.x + WORLD.W1SX,
        S = u,
        N = c += d.x + WORLD.W1SX - 2;
    if (n) d = r.t(s);
    else d = s.r;
    var O = T + WORLD.LW2SX - c + d.x,
        C = c,
        g = l,
        p = O,
        b = u,
        D = (c += O - 2) - 2;
    if (n) d = r.t(_);
    else d = _.r;
    if (D < c + (O = T + WORLD.LW3SX - c + d.x) - 3) var m = !0,
        v = c,
        P = l,
        M = O,
        f = u,
        L = c += O - 2;
    else {
        m = !1;
        c = D;
        L = -1
    }
    if (O = T + WORLD.LSANDX - c, world.transition) {
        var G = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
    } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    if (ctx.fillRect(R, h, A, S), n)
        if (world.transition) {
            G = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, G)
        } else ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    else if (world.transition) {
        G = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
    } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    if (ctx.fillRect(C, g, p, b), m) {
        if (n)
            if (world.transition) {
                G = world.time ? 1 - world.shade.v : world.shade.v;
                ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, G)
            } else ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
        else if (world.transition) {
            G = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
        } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        ctx.fillRect(v, P, M, f)
    }
    ui.quality && n && r.draw_foams_left(D, L, N, T, -user.cam.y + h, -user.cam.y + h + S)
}

function draw_beach_sand_top(e, t, i, r, a, n) {
    var o = r.w1,
        s = r.w2,
        _ = r.w3,
        T = user.cam.y + e - 700,
        E = Math.max(user.cam.x + t, 0),
        I = Math.max(-user.cam.x + canw - i - 100, 0),
        l = E,
        u = canw - E - I;
    if (n) var d = r.t(o).x;
    else d = o.r.x;
    var c = T + WORLD.LW1SX;
    WORLD.W1SX, c += d + WORLD.W1SX - 2;
    if (n) d = r.t(s).x;
    else d = s.r.x;
    var R = T + WORLD.LW2SX - c + d,
        h = (c += R - 2) - 2;
    if (n) d = r.t(_).x;
    else d = _.r.x;
    if (h < c + (R = T + WORLD.LW3SX - c + d) - 3) c += R - 2;
    else {
        c = h
    }
    if (R = T + WORLD.LSANDX - c, n > 0 && 1 === a.isSand) {
        if (world.transition) {
            var A = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, A)
        } else ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
        ctx.fillRect(l, c, u, R)
    } else {
        if (world.transition) {
            A = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(a.night[0], a.night[1], a.night[2], a.day[0], a.day[1], a.day[2], A)
        } else ctx.fillStyle = a._color[world.time];
        ctx.fillRect(l, c, u, R)
    }
}

function draw_beach_top(e, t, i, r, a, n) {
    var o = r.w1,
        s = r.w2,
        _ = r.w3,
        T = user.cam.y + e - 700,
        E = Math.max(user.cam.x + t, 0),
        I = Math.max(-user.cam.x + canw - i - 100, 0),
        l = E,
        u = canw - E - I;
    if (n) var d = r.t(o);
    else d = o.r;
    var c = T + WORLD.LW1SX,
        R = l,
        h = c,
        A = d.x + WORLD.W1SX,
        S = u,
        N = c += d.x + WORLD.W1SX - 2;
    if (n) d = r.t(s);
    else d = s.r;
    var O = T + WORLD.LW2SX - c + d.x,
        C = c,
        g = l,
        p = O,
        b = u,
        D = (c += O - 2) - 2;
    if (n) d = r.t(_);
    else d = _.r;
    if (D < c + (O = T + WORLD.LW3SX - c + d.x) - 3) var m = !0,
        v = c,
        P = l,
        M = O,
        f = u,
        L = c += O - 2;
    else {
        m = !1;
        c = D;
        L = -1
    }
    if (O = T + WORLD.LSANDX - c, world.transition) {
        var G = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
    } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    if (ctx.fillRect(R, h, S, A), n)
        if (world.transition) {
            G = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, G)
        } else ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    else if (world.transition) {
        G = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
    } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    if (ctx.fillRect(g, C, b, p), m) {
        if (n)
            if (world.transition) {
                G = world.time ? 1 - world.shade.v : world.shade.v;
                ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, G)
            } else ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
        else if (world.transition) {
            G = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
        } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        ctx.fillRect(P, v, f, M)
    }
    ui.quality && n && r.draw_foams_top(D, L, N, T, -user.cam.x + R, -user.cam.x + R + S)
}

function draw_beach_sand_right(e, t, i, r, a, n) {
    var o = r.w1,
        s = r.w2,
        _ = r.w3,
        T = user.cam.x + e + 820,
        E = Math.max(user.cam.y + t, 0),
        I = Math.max(-user.cam.y + canh - i - 100, 0),
        l = E,
        u = canh - E - I;
    if (n) var d = r.t(o).x;
    else d = o.r.x;
    var c = T + WORLD.LW1SX;
    WORLD.W1SX, c += -d + WORLD.W1SX + 2;
    if (n) d = r.t(s).x;
    else d = s.r.x;
    var R = T - WORLD.LW2SX - c - d,
        h = (c += R + 2) - 2;
    if (n) d = r.t(_).x;
    else d = _.r.x;
    if (h > c + (R = T - WORLD.LW3SX - c - d)) c += R + 2;
    else {
        c = h
    }
    if (R = T - WORLD.LSANDX - c, n > 0 && 1 === a.isSand) {
        if (world.transition) {
            var A = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, A)
        } else ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
        ctx.fillRect(c, l, R, u)
    } else {
        if (world.transition) {
            A = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(a.night[0], a.night[1], a.night[2], a.day[0], a.day[1], a.day[2], A)
        } else ctx.fillStyle = a._color[world.time];
        ctx.fillRect(c, l, R, u)
    }
}

function draw_beach_right(e, t, i, r, a, n) {
    var o = r.w1,
        s = r.w2,
        _ = r.w3,
        T = user.cam.x + e + 820,
        E = Math.max(user.cam.y + t, 0),
        I = Math.max(-user.cam.y + canh - i - 100, 0),
        l = E,
        u = canh - E - I;
    if (n) var d = r.t(o);
    else d = o.r;
    var c = T + WORLD.LW1SX,
        R = c,
        h = l,
        A = -d.x + WORLD.W1SX,
        S = u,
        N = c += -d.x + WORLD.W1SX + 2;
    if (n) d = r.t(s);
    else d = s.r;
    var O = T - WORLD.LW2SX - c - d.x,
        C = c,
        g = l,
        p = O,
        b = u,
        D = (c += O + 2) - 2;
    if (n) d = r.t(_);
    else d = _.r;
    if (D > c + (O = T - WORLD.LW3SX - c - d.x)) var m = !0,
        v = c,
        P = l,
        M = O,
        f = u,
        L = c += O + 2;
    else {
        m = !1;
        c = D;
        L = -1
    }
    if (O = T - WORLD.LSANDX - c, world.transition) {
        var G = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
    } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    if (ctx.fillRect(R, h, A, S), n)
        if (world.transition) {
            G = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, G)
        } else ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    else if (world.transition) {
        G = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
    } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    if (ctx.fillRect(C, g, p, b), m) {
        if (n)
            if (world.transition) {
                G = world.time ? 1 - world.shade.v : world.shade.v;
                ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, G)
            } else ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
        else if (world.transition) {
            G = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
        } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        ctx.fillRect(v, P, M, f)
    }
    ui.quality && n && r.draw_foams_right(D, L, N, T, -user.cam.y + h, -user.cam.y + h + S)
}

function draw_beach_sand_bottom(e, t, i, r, a, n) {
    var o = r.w1,
        s = r.w2,
        _ = r.w3,
        T = user.cam.y + e + 710,
        E = Math.max(user.cam.x + t, 0),
        I = Math.max(-user.cam.x + canw - i - 100, 0),
        l = E,
        u = canw - E - I;
    if (n) var d = r.t(o).x;
    else d = o.r.x;
    var c = T + WORLD.LW1SX;
    WORLD.W1SX, c += -d + WORLD.W1SX + 2;
    if (n) d = r.t(s).x;
    else d = s.r.x;
    var R = T - WORLD.LW2SX - c - d,
        h = (c += R + 2) - 2;
    if (n) d = r.t(_).x;
    else d = _.r.x;
    if (h > c + (R = T - WORLD.LW3SX - c - d)) c += R + 2;
    else {
        c = h
    }
    if (R = T - WORLD.LSANDX - c, n > 0 && 1 === a.isSand) {
        if (world.transition) {
            var A = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, A)
        } else ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
        ctx.fillRect(l, c, u, R)
    } else {
        if (world.transition) {
            A = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(a.night[0], a.night[1], a.night[2], a.day[0], a.day[1], a.day[2], A)
        } else ctx.fillStyle = a._color[world.time];
        ctx.fillRect(l, c, u, R)
    }
}

function draw_beach_bottom(e, t, i, r, a, n) {
    var o = r.w1,
        s = r.w2,
        _ = r.w3,
        T = user.cam.y + e + 710,
        E = Math.max(user.cam.x + t, 0),
        I = Math.max(-user.cam.x + canw - i - 100, 0),
        l = E,
        u = canw - E - I;
    if (n) var d = r.t(o);
    else d = o.r;
    var c = T + WORLD.LW1SX,
        R = c,
        h = l,
        A = -d.x + WORLD.W1SX,
        S = u,
        N = c += -d.x + WORLD.W1SX + 2;
    if (n) d = r.t(s);
    else d = s.r;
    var O = T - WORLD.LW2SX - c - d.x,
        C = c,
        g = l,
        p = O,
        b = u,
        D = (c += O + 2) - 2;
    if (n) d = r.t(_);
    else d = _.r;
    if (D > c + (O = T - WORLD.LW3SX - c - d.x)) var m = !0,
        v = c,
        P = l,
        M = O,
        f = u,
        L = c += O + 2;
    else {
        m = !1;
        c = D;
        L = -1
    }
    if (O = T - WORLD.LSANDX - c, world.transition) {
        var G = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
    } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    if (ctx.fillRect(h, R, S, A), n)
        if (world.transition) {
            G = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, G)
        } else ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    else if (world.transition) {
        G = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
    } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    if (ctx.fillRect(g, C, b, p), m) {
        if (n)
            if (world.transition) {
                G = world.time ? 1 - world.shade.v : world.shade.v;
                ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, G)
            } else ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
        else if (world.transition) {
            G = world.time ? 1 - world.shade.v : world.shade.v;
            ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, G)
        } else ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
        ctx.fillRect(P, v, f, M)
    }
    ui.quality && n && r.draw_foams_bottom(D, L, N, T, -user.cam.x + h, -user.cam.x + h + S)
}

function draw_world_with_effect() {
    if (ctx.globalAlpha = 1, world.transition) var e = world.shade.update();
    world.update_dist_from_biomes(-user.cam.x, -user.cam.y), _js = Math.max(Math.floor(-user.cam.x / world.dw) - 5 - Math.floor(window.innerWidth / HackSettings.Zoom.xSlider), 0), _je = Math.min(Math.floor((-user.cam.x + user.cam.w) / world.dw) + 4 + Math.floor(window.innerWidth / HackSettings.Zoom.xSlider), world.nw - 1), _is = Math.max(Math.floor(-user.cam.y / world.dh) - 3 - Math.floor(window.innerHeight / HackSettings.Zoom.ySlider), 0), _ie = Math.min(Math.floor((-user.cam.y + user.cam.h) / world.dh) + 3 + Math.floor(window.innerHeight / HackSettings.Zoom.ySlider), world.nh - 1), draw_ground(), draw_world(), ui.quality && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR && (draw_desert(), draw_winter(), draw_ash()), world.transition && e && (world.transition = !1, world.shade.v = 0, world.shade.o = !1)
}
var ANIMATION_STOP = 0,
    ANIMATION_RUN = 1,
    FOCUS_OUT = 0,
    FOCUS_IN = 1,
    ALIGN_CENTER = 0,
    ALIGN_LEFT = 1,
    STYLE_RETRO = 0,
    STYLE_FLAT = 1,
    KEYDOWN = 0,
    KEYPRESS = 1,
    GET_KEY_OUT = 0,
    GET_KEY_IN = 1,
    MOUSE_MOVE = 0,
    MOUSE_DOWN = 1,
    MOUSE_UP = 2,
    BUTTON_OUT = 0,
    BUTTON_IN = 1,
    BUTTON_CLICK = 2;

function gui_disable_antialiasing(e) {
    e.imageSmoothingEnabled = !1, e.webkitImageSmoothingEnabled = !1, e.mozImageSmoothingEnabled = !1, e.msImageSmoothingEnabled = !1, e.oImageSmoothingEnabled = !1
}

function get_mouse_pos(e, t) {
    var i = e.getBoundingClientRect();
    return {
        x: t.clientX - i.left,
        y: t.clientY - i.top
    }
}

function gui_render_text(e, t, i, r, a, n, o, s, _, T, E, I, l, u, d) {
    0 === e.length && (e = " "), void 0 === o && (o = 0), void 0 === s && (s = 0), void 0 === _ && (_ = 0), void 0 === u && (u = 0);
    var c = document.createElement("canvas"),
        R = c.getContext("2d");
    return R.textBaseline = "middle", R.font = (void 0 !== d ? d + " " : "") + r + "px " + t, a = void 0 !== a ? Math.min(R.measureText(e).width, a) : R.measureText(e).width, c.width = a + o, c.height = r + s, void 0 !== n && (void 0 !== E && (R.globalAlpha = E), R.fillStyle = n, void 0 !== I ? (roundRect(R, _ + 2, _, a + o - 2 * _ - 4, r + s - 2 * _, I), R.fill()) : R.fillRect(_, _, a + o - 2 * _, r + s - 2 * _), R.globalAlpha = 1, 0 !== _ && (R.lineWidth = _, R.strokeStyle = T, R.stroke())), R.textBaseline = "middle", R.font = (void 0 !== d ? d + " " : "") + r + "px " + t, void 0 !== l && (R.strokeStyle = l, R.lineWidth = u, R.lineJoin = "miter", R.miterLimit = 2, R.strokeText(e, Math.floor(o / 2), Math.floor(s / 2) + Math.floor(r / 2), a)), R.fillStyle = i, R.fillText(e, Math.floor(o / 2), Math.floor(s / 2) + Math.floor(r / 2), a), c.w2 = c.width / 2, c.h2 = c.height / 2, c
}

function gui_create_button(e, t, i, r, a, n, o, s, _, T, E) {
    if (void 0 === _ && (_ = 0), void 0 === s && (s = 0), void 0 === T && (T = 0), void 0 === E && (E = 1), 1 !== n && (n = 0), r) var I = r;
    var l, u = {
            width: e,
            height: t,
            img: I,
            state: BUTTON_OUT,
            translate: {
                x: s,
                y: _,
                _x: s,
                _y: _
            },
            enable_breath: n,
            breath: 0,
            callback: o,
            position: T,
            active: E
        },
        d = function() {
            return u.img[u.state]
        },
        c = function(e) {
            var t = u.translate;
            return 0 !== u.width && 0 !== u.height || (u.width = u.img[0].width, u.height = u.img[0].height), e.x > t.x && e.x < t.x + u.width / a && e.y > t.y && e.y < t.y + u.height / a
        };
    n = function() {
        var e = 0;
        return 1 === u.enable_breath && (u.state === BUTTON_IN || u.state === BUTTON_CLICK ? u.breath = (u.breath + 1e3 * delta) % 1e3 : u.breath > 0 && (u.breath = u.breath > 500 ? u.breath + 1e3 * delta : u.breath - 1e3 * delta, (u.breath < 0 || u.breath > 1e3) && (u.breath = 0)), e = .2 * Utils.ease_in_out_quad(u.breath > 500 ? (1e3 - u.breath) / 500 : u.breath / 500)), e
    };
    return 2 === (a = 3 === a ? 3 : 1 === a ? 2 : 1) ? l = function(e) {
        var t = 1 + n(),
            i = d(),
            r = u.width * t / 2,
            a = u.height * t / 2,
            o = (r - u.width / 2) / 2,
            s = (a - u.height / 2) / 2;
        ctxDrawImage(e, i, u.translate.x - o, u.translate.y - s, r, a)
    } : 3 === a ? (l = function(e) {
        var t = d(),
            i = u.width,
            r = u.height,
            a = (i - u.width) / 2,
            n = (r - u.height) / 2;
        ctxDrawImage(e, t, u.translate.x - a, u.translate.y - n, i, r)
    }, a = 1) : l = function(e) {
        ctxDrawImage(e, d(), u.translate.x, u.translate.y)
    }, {
        info: u,
        trigger: function(e, t, i) {
            return c(t) ? (i == MOUSE_DOWN ? u.state = BUTTON_CLICK : (i == MOUSE_UP || i == MOUSE_MOVE && u.state != BUTTON_CLICK) && (u.state = BUTTON_IN), !0) : (u.state = BUTTON_OUT, !1)
        },
        draw: l,
        in_button: c
    }
}

function gui_create_image_hd(e, t, i, r, a) {
    var n = {
        x: i,
        y: r,
        _x: i,
        _y: r
    };
    return {
        translate: n,
        draw: function(t) {
            ctxDrawImage(t, e, n.x, n.y, e.width / 2, e.height / 2)
        },
        active: t,
        position: a
    }
}

function gui_create_image(e) {
    var t = {
        x: 0,
        y: 0
    };
    return {
        img: e,
        translate: t,
        draw: function(i) {
            ctxDrawImage(i, e, t.x, t.y)
        }
    }
}

function gui_create_animation(e, t) {
    void 0 === t && (t = .033);
    var i = {
            x: 0,
            y: 0
        },
        r = 0,
        a = 0;
    return {
        img: e,
        translate: i,
        draw: function(n) {
            ctxDrawImage(n, ((a += delta) > t && (r = (r + 1) % e.length, a -= t), e[r]), i.x, i.y)
        }
    }
}

function gui_add_breath_effect(e, t, i, r, a, n, o) {
    e.end = t, e.start = i, e.speed_start = r, e.speed_end = a, e.width = e.img.width, e.height = e.img.height, e.scale = (t + i) / 2, e.breath = !1, e.draw = function(t) {
        e.translate.x = canw2 - e.width / 2, ctxDrawImage(t, e.img, 0, 0, e.img.width, e.img.height, e.translate.x, e.translate.y, e.width, e.height)
    }
}

function gui_breath_effect(e) {
    e.scale += e.breath ? delta / e.speed_start : -delta / e.speed_end, e.scale > e.end ? e.breath = !1 : e.scale < e.start && (e.breath = !0)
}
var SENDWORD = "send",
    SHOW_ID = "1" === Utils.getURLData("id") ? 1 : 0,
    PASSWORD = Utils.getURLData("password"),
    RIVET_API = "https://matchmaker.api.rivet.gg/v1",
    STATE = {
        DELETE: 1,
        HURT: 2,
        COLD: 4,
        HUNGER: 8,
        ATTACK: 16,
        WALK: 32,
        IDLE: 64,
        HEAL: 128,
        WEB: 256
    },
    KIT = [{
        price: 1e3,
        items: [
            [2, INV.FIRE],
            [1, INV.COOKED_MEAT],
            [8, INV.PLANT],
            [1, INV.BREAD]
        ]
    }, {
        price: 2e3,
        items: [
            [2, INV.BIG_FIRE],
            [1, INV.PICK_WOOD],
            [2, INV.COOKED_MEAT],
            [16, INV.PLANT],
            [2, INV.BREAD]
        ]
    }, {
        price: 4e3,
        items: [
            [3, INV.BIG_FIRE],
            [1, INV.PICK],
            [4, INV.COOKED_MEAT],
            [20, INV.PLANT],
            [4, INV.BREAD],
            [1, INV.WORKBENCH],
            [80, INV.STONE],
            [140, INV.WOOD]
        ]
    }, {
        price: 8e3,
        items: [
            [1, INV.BAG],
            [4, INV.BIG_FIRE],
            [1, INV.PICK_GOLD],
            [6, INV.COOKED_MEAT],
            [30, INV.PLANT],
            [6, INV.BREAD],
            [1, INV.WORKBENCH],
            [150, INV.STONE],
            [200, INV.WOOD],
            [60, INV.GOLD],
            [2, INV.BOTTLE_FULL]
        ]
    }, {
        price: 16e3,
        items: [
            [1, INV.BAG],
            [1, INV.PICK_DIAMOND],
            [1, INV.BED],
            [7, INV.CAKE],
            [2, INV.BOTTLE_FULL],
            [2, INV.BIG_FIRE],
            [1, INV.FURNACE],
            [15, INV.STONE_WALL],
            [2, INV.STONE_DOOR],
            [1, INV.TOTEM],
            [1, INV.SPANNER],
            [200, INV.STONE],
            [300, INV.WOOD]
        ]
    }, {
        price: 16e3,
        items: [
            [1, INV.BAG],
            [1, INV.COAT],
            [1, INV.SHOVEL_GOLD],
            [1, INV.PICK_GOLD],
            [10, INV.CAKE],
            [4, INV.BOTTLE_FULL],
            [6, INV.BIG_FIRE],
            [3, INV.BANDAGE],
            [1, INV.BOOK],
            [200, INV.STONE],
            [300, INV.WOOD]
        ]
    }, {
        price: 16e3,
        items: [
            [1, INV.BAG],
            [1, INV.HOOD],
            [1, INV.HAMMER_GOLD],
            [3, INV.BANDAGE],
            [1, 0],
            [1, INV.PICK_GOLD],
            [7, INV.CAKE],
            [2, INV.BOTTLE_FULL],
            [4, INV.BIG_FIRE],
            [150, INV.STONE],
            [200, INV.WOOD],
            [1, INV.LOCKPICK]
        ]
    }, {
        price: 16e3,
        items: [
            [1, INV.BAG],
            [1, INV.PEASANT],
            [1, INV.PICK_GOLD],
            [7, INV.CAKE],
            [2, INV.BOTTLE_FULL],
            [4, INV.BIG_FIRE],
            [2, INV.WINDMILL],
            [4, INV.BREAD_OVEN],
            [10, INV.PLOT],
            [6, INV.WHEAT_SEED],
            [4, INV.SEED],
            [1, INV.WATERING_CAN_FULL],
            [500, INV.WOOD]
        ]
    }, {
        price: 16e3,
        items: [
            [1, INV.BAG],
            [1, INV.PICK_GOLD],
            [16, INV.FOODFISH_COOKED],
            [1, INV.BOTTLE_FULL],
            [6, INV.BIG_FIRE],
            [3, INV.BANDAGE],
            [1, INV.DIVING_MASK],
            [1, INV.SWORD],
            [16, INV.BRIDGE],
            [150, INV.STONE],
            [200, INV.WOOD]
        ]
    }, {
        price: 2e4,
        items: [
            [1, INV.BAG],
            [1, INV.PICK_GOLD],
            [1, INV.CAKE],
            [1, INV.BOTTLE_FULL],
            [3, INV.BIG_FIRE],
            [3, INV.BANDAGE],
            [1, INV.GOLD_HELMET],
            [1, INV.SWORD_GOLD],
            [1, INV.DIAMOND_SPEAR],
            [2, INV.GOLD_SPIKE],
            [50, INV.STONE],
            [100, INV.WOOD]
        ]
    }],
    CLIENT = {
        VERSION_NUMBER: 52,
        TIMEOUT_TIME: 2e3,
        TIMEOUT_NUMBER: 3,
        PING: "[13]",
        PING_DELAY: 6e4,
        ROTATE: .2,
        ATTACK: .2,
        SLOW_ATTACK: .58,
        CAM_DELAY: 50,
        MUTE_DELAY: 125e3,
        TIMEOUT_SERVER: 6e5,
        WAITING_FOR_SERVER: 8e3,
        DELAY_CONNECTION_UPDATE: 5,
        LAG_DISTANCE: 200,
        LOOSE_FOCUS: 15,
        TOKEN_LEN: 14,
        TEAM_MANAGE: 0,
        TEAM_SHOW: 1,
        TEAM_LEAVE: 2,
        TEAM_JOIN: 3,
        TEAM_FULL: 4,
        SKIN_MAX: 20,
        ACCESSORY_MAX: 14,
        SYMBOL_MAX: 4
    };

function NetworkClient() {
    var e = this;
    this.socket = null, this._current_id = 0, this.server_list = [], this.mode_list = [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
    ], this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1], this.current_mode = 0, this.privateServer = 0, this.get_rivet_token = async function() {
        if (environment == environments.DEV) {
            let e = await fetch(`${DB}rivet-token`);
            return await e.text()
        }
        return null
    }, this.fetch_server_list = async function() {
        let e = await this.get_rivet_token(),
            t = {};
        e && (t.Authorization = `Bearer ${e}`);
        let i = await fetch(RIVET_API + "/lobbies/list", {
            method: "GET",
            headers: t
        });
        if (!i.ok) throw console.error("Failed to list lobbies"), "Failed to list lobbies";
        let r = await i.json();
        this.server_list = [];
        let a = {};
        for (let e of r.game_modes) this.server_list.push({
            a: "Auto Select",
            gm: e.game_mode_id,
            m: 100,
            nu: 0,
            auto: !0
        });
        for (let e of r.lobbies) {
            let t, i = e.game_mode_id;
            t = i in a ? ++a[i] : a[i] = 1;
            let n = r.regions.find((t => t.region_id == e.region_id));
            this.server_list.push({
                a: n.region_display_name + " " + t,
                gm: e.game_mode_id,
                idx: t,
                m: e.max_players_normal,
                nu: e.total_player_count,
                id: e.lobby_id
            })
        }
    }, this.geolocate_server = function(e) {
        for (var t = [], i = 0; i < e.length; i++) - 1 !== e[i].a.indexOf(TZ) && t.push(i);
        return 0 === t.length ? 0 : t[Math.floor(Math.random() * t.length)]
    }, this.set_server_list = function(e) {
        for (var t = 0, i = 0; i < e.length; i++) t += e[i].nu;
        var r = document.getElementById("servselect"); - 1 === client.selected_server[client.current_mode] ? client.selected_server[client.current_mode] = r.selectedIndex = client.geolocate_server(e) : r.selectedIndex = client.selected_server[client.current_mode];
        var a = '<label for="ul-id"><button type="button" class="ng-binding">' + e[r.selectedIndex].a + (e[r.selectedIndex].nu > 0 ? " [" + e[r.selectedIndex].nu + " " + LANG[TEXT.PLAYERS] + "]" : "") + '</button></label><ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id"><li role="option" id="selectDisabled">' + LANG[TEXT.CHOOSE] + " (" + this.total_players + ") " + LANG[TEXT.TOTAL_PLAYERS] + "</li>";
        for (i = 0; i < e.length; i++) a += '<li role="option">' + e[i].a, a += " [" + e[i].nu + " " + LANG[TEXT.PLAYERS] + "]", a += "</li>\n";
        a += '<li role="option" id="selectDisabled">(' + t + ") " + LANG[TEXT.TOTAL_MODE] + "</li>", a += "</div>", r.innerHTML = a, $(".md-select").on("click", (function() {
            $(this).toggleClass("active")
        })), $(".md-select ul li").on("click", (function() {
            for (var e = $(this).text(), t = -1, i = client.mode_list[client.current_mode], r = 0; r < i.length; r++)
                if (i[r].a + " [" + i[r].nu + " " + LANG[TEXT.PLAYERS] + "]" === e) {
                    t = r;
                    break
                } - 1 !== t && (document.getElementById("servselect").selectedIndex = t, client.selected_server[client.current_mode] = t, $(".md-select ul li").removeClass("active"), $(this).addClass("active"), $(".md-select label button").text(e))
        }))
    }, this.total_players = 0, this.update_server_list = function() {
        this.total_players = 0;
        for (var e = 0; e < client.server_list.length; e++) "experimental" == this.server_list[e].gm ? this.mode_list[WORLD.MODE_EXPERIMENTAL].push(this.server_list[e]) : "zombies" == this.server_list[e].gm ? this.mode_list[WORLD.MODE_ZOMBIES].push(this.server_list[e]) : "forest" == this.server_list[e].gm ? this.mode_list[WORLD.MODE_LEGACY].push(this.server_list[e]) : "battle-royale" == this.server_list[e].gm ? this.mode_list[WORLD.MODE_BR].push(this.server_list[e]) : "vampires" == this.server_list[e].gm ? this.mode_list[WORLD.MODE_VAMPIRES].push(this.server_list[e]) : this.mode_list[WORLD.MODE_PVP].push(this.server_list[e]), this.total_players += this.server_list[e].nu;
        for (e = 0; e < this.mode_list.length; e++) 0 === this.mode_list[e].length && this.mode_list[e].push({
            a: LANG[TEXT.COMMING_SOON],
            nu: 0,
            i: "127.0.0.1",
            p: 80
        });
        this.set_server_list(this.mode_list[0]), this.select_gamemode = function(e) {
            client.current_mode = e, client.set_server_list(client.mode_list[client.current_mode]), client.set_server_list(client.mode_list[client.current_mode]), document.getElementById("servselect").selectedIndex = client.current_mode
        }
    }, this.timeout_server = 0, this.timeout_number = 0, this.timeout_handler = null, this.timeout = function() {
        e.timeout_number++, e.socket.close(), e.timeout_number > CLIENT.TIMEOUT_NUMBER ? (___adsvid = 1, ui.error_level = CLIENT.ERROR_REFUSED, e.new_alert(LANG[TEXT.YOU_CANNOT_JOIN]), ui.waiting = !1, user.reconnect.enabled && game.quit(ui.run)) : e.connect_timeout()
    }, this.kick = function(e) {
        this._current_id == this.socket._current_id && (this._current_id++, this.new_alert(LANG[TEXT.KICKED] + e), game.quit(ui.run))
    }, this.mute = function() {
        this.new_alert("You speak too much")
    }, this.already_used_key = function() {
        clearTimeout(this.timeout_handler), this.new_alert(LANG[TEXT.KEY_ALREADY]), ui.waiting = !1
    }, this.hide_shop_kit = function() {
        user.shop.open = !1
    }, this.hide_recipe_book = function() {
        game.show_recipe_book = 0
    }, this.hide_clock = function() {
        game.show_clock = 0
    }, this.sand_tempest = function(e) {
        user.desert.tempest = e, world.dist_desert > -300 && (0 === e ? this.new_alert(LANG[TEXT.TEMPEST_OFF]) : this.new_alert(LANG[TEXT.TEMPEST_ON]))
    }, this.bandage = function(e) {
        user.bandage = e
    }, this.blizzard_status = function(e) {
        user.blizzard = e
    }, this.blizzard = function(e) {
        user.winter.tempest = e, world.dist_winter > -300 && (0 === e ? this.new_alert(LANG[TEXT.BLIZZARD_OFF]) : this.new_alert(LANG[TEXT.BLIZZARD_ON]))
    }, this.explorer_quest = function(e) {
        0 === e ? document.getElementById("exploreForest").src = "img/forest-leaf-ok.png" : 1 === e ? document.getElementById("exploreWinter").src = "img/winter-flake-ok.png" : 2 === e ? document.getElementById("exploreLava").src = "img/lava-volcano-ok.png" : 3 === e && (document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png")
    }, this.hide_market = function() {
        game.show_market = 0
    }, this.hide_quest = function() {
        game.show_quest = 0
    }, this.clean_inventory = function() {
        user.inv.can_select = [], user.inv.n = [], user.inv.id = -1, user.inv.drag.stop(), user.craft.can_craft = [], user.craft.crafting = !1, user.craft.can_build = !1, user.craft.preview = -1, user.craft.id = -1, user.craft.workbench = !1, user.craft.well = !1, user.craft.fire = !1, user.craft.water = !1, user.craft.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1)
    }, this.wrong_key = function() {
        clearTimeout(this.timeout_handler), this.new_alert(), ui.waiting = !1
    }, this.commands = function(e) {
        for (var t = 0; t < e.length; t++) "string" == typeof e[t] && (e[t] = Utils.escape_html(e[t]));
        user.terminal.write_command(e[1], e[2], e[3], e[4])
    }, this.message = function(e) {
        this.new_alert(e)
    }, this.wrong_password = function() {
        clearTimeout(this.timeout_handler), this.new_alert(LANG[TEXT.WRONG_PASSWORD]), ui.waiting = !1
    }, this.new_version = function() {
        clearTimeout(this.timeout_handler), this.new_alert(LANG[TEXT.NEW_VERSION]), ui.waiting = !1
    }, this.old_version = function() {
        clearTimeout(this.timeout_handler), this.new_alert(LANG[TEXT.OLD_VERSION]), ui.waiting = !1
    }, this.get_bag = function() {
        user.inv.update_bag_size(1, 0), game.update_inv_buttons()
    }, this.verified_account = function(e) {
        var t = e[1],
            i = world.players[t];
        i.skin = e[2], i.accessory = e[3], i.baglook = e[4], i.book = e[5], i.crate = e[6], i.dead = e[7], i.level = e[8];
        var r = world.fast_units[t * world.max_units];
        r && (r.skin = e[2], r.accessory = e[3], r.baglook = e[4], r.book = e[5])
    }, this.build_stop = function(e) {
        e === INV.BAG ? (user.inv.update_bag_size(1, 0), game.update_inv_buttons()) : this.gather([0, e, 1]), user.craft.restart()
    }, this.recycle_ok = function(e) {
        user.auto_feed.delay = 0, user.craft.do_recycle(e)
    }, this.recycle_stop = function(e) {
        for (var t = RECIPES[e].r, i = 0; i < t.length; i++)
            if (user.inv.max > user.inv.can_select.length || user.inv.n[t[i][0]] > 0) {
                var r = Math.floor(.8 * t[i][1]);
                if (!r) continue;
                this.gather([0, t[i][0], r])
            } user.craft.restart()
    }, this.build_ok = function(e) {
        user.auto_feed.delay = 0, user.craft.do_craft(e)
    }, this.new_alert = function(e) {
        user.alert.text ? e !== user.alert.text && e !== user.alert.list[user.alert.list.length - 1] && user.alert.list.push(e) : user.alert.text = e
    }, this.no_resources = function() {
        this.new_alert(LANG[TEXT.NO_MORE_RESOURCES])
    }, this.survive = function() {
        var e;
        e = 0 == user.day ? LANG[TEXT.SURVIVED_1DAY] : LANG[TEXT.SURVIVED] + (user.day + 1) + LANG[TEXT.DAYS], this.new_alert(e), user.day++
    }, this.fail_restore = function() {
        clearTimeout(e.timeout_handler), user.reconnect.enabled = !1, user.alive = !1, this.new_alert(LANG[TEXT.DEAD_SAD]), game.quit(ui.run), this.socket.close()
    }, this.blocked = function() {
        ___adsvid = 1, clearTimeout(this.timeout_handler), this.new_alert(LANG[TEXT.SPAM_ME]), ui.waiting = !1
    }, this.full = function() {
        ___adsvid = 1, clearTimeout(this.timeout_handler), this.new_alert(LANG[TEXT.SPAM_ME2]), ui.waiting = !1
    }, this.new_player = function(e) {
        var t = e[1],
            i = world.players;
        i[t].nickname = e[2], i[t].skin = e[3], i[t].accessory = e[4], i[t].baglook = e[5], i[t].book = e[6], i[t].crate = e[7], i[t].dead = e[8], i[t].level = e[9], i[t].score = 0, i[t].ldb_label = null, i[t].label = null, i[t].label_winter = null, i[t].alive = !0, 1 === SHOW_ID && (i[t].nickname += "|" + t)
    }, this.get_focus = function() {
        Spectator || this.socket.send(WINDOW1[JSONWORD1].stringify([11]))
    }, this.empty_res = function() {
        this.new_alert(LANG[TEXT.EMPTY])
    }, this.inv_full = function() {
        this.new_alert(LANG[TEXT.INV_FULL])
    }, this.choose_kit = function(e) {
        this.socket.send(WINDOW3[JSONWORD7].stringify([21, e])), user.shop.open = !1
    }, this.kit_ok = function(e) {
        for (var t = KIT[e - 1].items, i = 0; i < t.length && user.inv.max > user.inv.can_select.length; i++) {
            var r = t[i][1],
                a = t[i][0];
            t[i][1] === INV.BAG ? user.inv.update_bag_size(1, 0) : this.gather([0, r, a])
        }
    }, this.gather = function(e) {
        for (var t = e.length, i = user.inv, r = 1; r < t; r += 2) {
            for (var a = e[r], n = e[r + 1], o = 0; o < i.can_select.length; o++)
                if (i.can_select[o].id == a) {
                    i.n[a] += n;
                    break
                } o == i.can_select.length && (i.n[a] = n, i.can_select.push(game.inv_buttons[a]), game.update_inv_buttons())
        }
        user.craft.update()
    }, this.gauges = function(e, t, i, r, a, n, o) {
        (Math.floor(11 - (Date.now() - TimerTools.HPTimer) / 1e3) < 5 || e / 100 > user.gauges.l) && (TimerTools.HPTimer = (new Date).getTime()), TimerTools.GaugeTimer = (new Date).getTime(), user.gauges.l = e / 100, user.gauges.realhp = 2 * e, user.gauges.h = t / 100, user.gauges.c = i / 100, user.gauges.t = r / 100, user.gauges.o = a / 100, user.gauges.wa = n / 100, user.bandage = o
    }, this.succeed_quest = function(e) {
        game.quests.modify(e, 2)
    }, this.fail_quest = function(e) {
        game.quests.modify(e, 0)
    }, this.claimed = function(e) {
        game.quests.modify(e, 3)
    }, this.gauges_life = function(e, t) {
        user.gauges.l = e / 100, user.gauges.realhp = 2 * e, user.bandage = t
    }, this.gauges_water = function(e) {
        user.gauges.t = e / 100
    }, this.gauges_food = function(e) {
        user.gauges.h = e / 100
    }, this.gauges_warm = function(e) {
        user.gauges.wa = e / 100
    }, this.gauges_cold = function(e) {
        user.gauges.c = e / 100
    }, this.get_time = function(e) {
        world.time = e, world.transition = !0, audio.transition = 1
    }, this.change_ground = function() {
        document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[world.time]
    }, this.kill_player = function(e) {
        world.mode == WORLD.MODE_HUNGER_GAMES && "spectator" !== world.players[e].nickname && this.new_alert(world.players[e].nickname + LANG[TEXT.DEAD]), world.players[e].alive = !1
    }, this.set_cam = function(e) {
        if (!Spectator) {
            var t = new Uint16Array(e);
            player.cam.change(t[1], t[2])
        }
    }, this.recover_focus = function(e) {
        var t = new Uint16Array(e);
        user.cam.change(t[1], t[2])
    }, this.hitten_other = function(e, t) {
        for (var i = new Uint16Array(t), r = (e.length - 2) / 4, a = 0; a < r; a++) {
            var n = i[1 + 2 * a],
                o = e[4 + 4 * a],
                s = (e[5 + 4 * a] >> 1) / 127 * Math.PI * 2,
                _ = world.fast_units[o * world.max_units + n];
            _ && _.hit && (audio.loaded && audio.run && audio.hit(1 & e[5 + 4 * a], SOUND_BUILD[_.type], _.x, _.y), _.hit.angle = s, _.hit.update = s)
        }
    }, this.hitten = function(e) {
        for (var t = new Uint16Array(e), i = (t.length - 1) / 4, r = 0; r < i; r++) {
            var a, n = 4 * r,
                o = t[1 + n],
                s = t[2 + n],
                _ = (t[3 + n] >> 1) / 127 * Math.PI * 2,
                T = t[4 + n],
                E = MAP.tiles[s][o];
            switch (T) {
                case 0:
                    (a = E.p[0][0]).angle = _, a.update = !0;
                    break;
                case 1:
                    (a = E.s[0][0]).angle = _, a.update = !0;
                    break;
                case 2:
                    (a = E.s[1][0]).angle = _, a.update = !0;
                    break;
                case 3:
                    (a = E.s[2][0]).angle = _, a.update = !0;
                    break;
                case 4:
                    (a = E.t[0][0]).angle = _, a.update = !0;
                    break;
                case 5:
                    (a = E.t[1][0]).angle = _, a.update = !0;
                    break;
                case 6:
                    (a = E.t[2][0]).angle = _, a.update = !0;
                    break;
                case 7:
                    (a = E.t[3][0]).angle = _, a.update = !0;
                    break;
                case 8:
                    (a = E.t[4][0]).angle = _, a.update = !0;
                    break;
                case 9:
                    (a = E.t[5][0]).angle = _, a.update = !0;
                    break;
                case 10:
                    (a = E.g[0][0]).angle = _, a.update = !0;
                    break;
                case 11:
                    (a = E.g[1][0]).angle = _, a.update = !0;
                    break;
                case 12:
                    (a = E.g[2][0]).angle = _, a.update = !0;
                    break;
                case 13:
                    (a = E.d[0][0]).angle = _, a.update = !0;
                    break;
                case 14:
                    (a = E.d[1][0]).angle = _, a.update = !0;
                    break;
                case 15:
                    (a = E.d[2][0]).angle = _, a.update = !0;
                    break;
                case 16:
                    (a = E.b[0][0]).angle = _, a.update = !0;
                    break;
                case 17:
                    (a = E.b[1][0]).angle = _, a.update = !0;
                    break;
                case 18:
                    (a = E.b[2][0]).angle = _, a.update = !0;
                    break;
                case 19:
                    (a = E.b[3][0]).angle = _, a.update = !0;
                    break;
                case 20:
                    (a = E.f[0][0]).angle = _, a.update = !0;
                    break;
                case 21:
                    (a = E.f[1][0]).angle = _, a.update = !0;
                    break;
                case 22:
                    (a = E.f[2][0]).angle = _, a.update = !0;
                    break;
                case 23:
                    (a = E.sw[0][0]).angle = _, a.update = !0;
                    break;
                case 24:
                    (a = E.sw[1][0]).angle = _, a.update = !0;
                    break;
                case 25:
                    (a = E.sw[2][0]).angle = _, a.update = !0;
                    break;
                case 26:
                    (a = E.gw[0][0]).angle = _, a.update = !0;
                    break;
                case 27:
                    (a = E.gw[1][0]).angle = _, a.update = !0;
                    break;
                case 28:
                    (a = E.gw[2][0]).angle = _, a.update = !0;
                    break;
                case 29:
                    (a = E.dw[0][0]).angle = _, a.update = !0;
                    break;
                case 30:
                    (a = E.dw[1][0]).angle = _, a.update = !0;
                    break;
                case 31:
                    (a = E.dw[2][0]).angle = _, a.update = !0;
                    break;
                case 32:
                    (a = E.a[0][0]).angle = _, a.update = !0;
                    break;
                case 33:
                    (a = E.a[1][0]).angle = _, a.update = !0;
                    break;
                case 34:
                    (a = E.a[2][0]).angle = _, a.update = !0;
                    break;
                case 35:
                    (a = E.cs[0][0]).angle = _, a.update = !0;
                    break;
                case 36:
                    (a = E.cs[1][0]).angle = _, a.update = !0;
                    break;
                case 37:
                    (a = E.cs[2][0]).angle = _, a.update = !0;
                    break;
                case 38:
                    (a = E.cs[3][0]).angle = _, a.update = !0;
                    break;
                case 40:
                    (a = E.plm[0][0]).angle = _, a.update = !0;
                    break;
                case 41:
                    (a = E.plm[1][0]).angle = _, a.update = !0;
                    break;
                case 42:
                    (a = E.plm[2][0]).angle = _, a.update = !0;
                    break;
                case 50:
                    (a = E.re[0][0]).angle = _, a.update = !0;
                    break;
                case 51:
                    (a = E.re[1][0]).angle = _, a.update = !0;
                    break;
                case 52:
                    (a = E.re[2][0]).angle = _, a.update = !0;
                    break;
                case 55:
                    (a = E.c[0][0]).angle = _, a.update = !0;
                    break;
                case 56:
                    (a = E.m[0][0]).angle = _, a.update = !0;
                    break;
                case 57:
                    (a = E.m[1][0]).angle = _, a.update = !0;
                    break;
                case 58:
                    (a = E.m[2][0]).angle = _, a.update = !0
            }
            audio.loaded && audio.run && a && audio.hit(1 & t[3 + n], SOUND_NATURE[T], a.x, a.y)
        }
    }, this.resurrection = function() {
        this.socket.send(WINDOW2[JSONWORD2].stringify([17, user.resurrection.pid, user.resurrection.iid]))
    }, this.give_wheat = function(e, t) {
        this.socket.send(WINDOW2[JSONWORD4].stringify([22, t, e.pid, e.iid]))
    }, this.give_bread_oven = function(e, t, i) {
        t ? this.socket.send(WINDOW2[JSONWORD4].stringify([25, t, e.pid, e.iid])) : this.socket.send(WINDOW2[JSONWORD3].stringify([24, i, e.pid, e.iid]))
    }, this.take_bread = function(e) {
        this.socket.send(WINDOW5[JSONWORD5].stringify([26, e.pid, e.iid]))
    }, this.claim_quest_reward = function(e) {
        this.socket.send(WINDOW5[JSONWORD8].stringify([27, e]))
    }, this.give_well = function(e) {
        this.socket.send(WINDOW4[JSONWORD2].stringify([30, e.pid, e.iid]))
    }, this.give_wood_extractor = function(e, t) {
        this.socket.send(WINDOW3[JSONWORD5].stringify([38, t, e.pid, e.iid, e.type]))
    }, this.give_wood = function(e, t) {
        this.socket.send(WINDOW3[JSONWORD5].stringify([12, t, e.pid, e.iid]))
    }, this.give_item = function(e, t, i) {
        this.socket.send(WINDOW4[JSONWORD4].stringify([8, t, i, e.pid, e.iid]))
    }, this.take_extractor = function(e) {
        this.socket.send(WINDOW5[JSONWORD5].stringify([37, e.pid, e.iid, e.type]))
    }, this.take_flour = function(e) {
        this.socket.send(WINDOW5[JSONWORD5].stringify([23, e.pid, e.iid]))
    }, this.take_chest = function(e) {
        this.socket.send(WINDOW5[JSONWORD5].stringify([9, e.pid, e.iid]))
    }, this.unlock_chest = function(e) {
        this.socket.send(WINDOW6[JSONWORD6].stringify([15, e.pid, e.iid]))
    }, this.lock_chest = function(e) {
        this.socket.send(WINDOW7[JSONWORD7].stringify([16, e.iid]))
    }, this.kick_team = function(t) {
        e.socket.send(WINDOW8[JSONWORD8].stringify([20, user.totem.id, user.team[t]]))
    }, this.join_team = function() {
        e.socket.send(WINDOW9[JSONWORD9].stringify([18, user.totem.pid, user.totem.id]))
    }, this.leave_team = function() {
        e.socket.send(WINDOW10[JSONWORD10].stringify([19]))
    }, this.lock_team = function() {
        e.socket.send(WINDOW10[JSONWORD8].stringify([35, user.totem.id])), "LOCK" == document.getElementById("lock_team").innerHTML ? (user.totem.lock = 1, document.getElementById("lock_team").innerHTML = "UNLOCK") : (user.totem.lock = 0, document.getElementById("lock_team").innerHTML = "LOCK")
    }, this.units = function(e, t, i) {
        var r = new Uint16Array(e);
        i && world.delete_all_units();
        for (var a = (t.length - 2) / 18, n = 0; n < a; n++) {
            var o = 2 + 18 * n,
                s = 1 + 9 * n,
                _ = t[o],
                T = r[s + 1],
                E = r[s + 5],
                I = _ * world.max_units + E;
            if (T & STATE.DELETE) world.delete_units(I);
            else {
                var l = r[s + 2],
                    u = r[s + 3],
                    d = r[s + 4],
                    c = r[s + 6],
                    R = r[s + 7],
                    h = r[s + 8],
                    A = t[o + 1] / 255 * Math.PI * 2;
                if (world.fast_units[I]) {
                    world.fast_units[I] && (2 !== T || 86 !== l && 82 !== l && 87 !== l || world.fast_units[I].myHit++);
                    var S = world.fast_units[I];
                    S.r.x = u, S.r.y = d, 0 != _ && Utils.dist(S, S.r) > CLIENT.LAG_DISTANCE && (S.x = u, S.y = d), S.id === user.id && 0 !== _ || (S.nangle = A), S.action |= T, S.info = c, S.speed = R, S.extra = h, S.update && S.update(T)
                } else {
                    var N = new Item(l, _, E, u, d, A, T, c, R, h);
                    world.fast_units[I] = N, 0 === l && user.id !== _ ? world.units[l].unshift(N) : (0 === l && user.id, world.units[l].push(N))
                }
            }
        }
    }, this.leaderboard = function(e) {
        this.timeout_server = old_timestamp;
        var t = new Uint16Array(e);
        user.ldb.init(t)
    }, this.new_recipes = function(e) {
        if (void 0 !== OLD_RECIPES && (RECIPES = OLD_RECIPES), e.length > 0) {
            OLD_RECIPES = JSON.parse(JSON.stringify(RECIPES));
            for (var t = 0; t < e.length; t++) {
                var i = e[t],
                    r = RECIPES[i.item];
                void 0 !== r && (r.r = i.recipe, r.w = i.workbench, r.f = i.fire, r.o = i.water, r.e = i.well, r.time = 1 / i.time)
            }
        }
    }, this.welcome = function(e) {
        e && 0 !== e.length ? user.welcome.message = create_welcome_text(e) : user.welcome.message = void 0
    }, this.chat = function(e) {
        var t = world.fast_units[e[1] * world.max_units];
        t && (world.mode === WORLD.MODE_ZOMBIES && t.skin === WORLD.ZOMBIE_SKIN ? user.zombie ? Math.random() > .5 ? t.text.push(e[2] + " ..." + ZOMBIE_GRUMBLE) : t.text.push(ZOMBIE_GRUMBLE + "... " + e[2]) : t.text.push(ZOMBIE_GRUMBLES[Math.floor(Math.random() * ZOMBIE_GRUMBLES.length)]) : t.text.push(e[2]))
    }, this.select_craft = function(e) {
        return user.inv.max !== user.inv.can_select.length || RECIPES[e].id2 === INV.BAG || -1 != user.inv.find_item(RECIPES[e].id2) || user.inv.free_place(RECIPES[e].r) ? (HackSettings.AutoBook.enabled && this.socket.send(JSON.stringify([5, 28])), this.socket.send(WINDOW1[JSONWORD1].stringify([7, e])), lastCrafted = e, 1) : (this.inv_full(), 0)
    }, this.workbench = function(e) {
        user.craft.set_workbench(e)
    }, this.well = function(e) {
        user.craft.well = e, user.craft.update()
    }, this.fire = function(e) {
        user.craft.fire = e, user.craft.update()
    }, this.water = function(e) {
        user.craft.water = e, user.craft.update()
    }, this.dont_harvest = function(e) {
        this.new_alert(LANG[TEXT.WRONG_TOOL])
    }, this.cancel_craft = function() {
        user.craft.restart()
    }, this.minimap = function(e) {
        game.minimap.players = [];
        for (var t = world.fast_units[user.uid], i = 0, r = 1; r < e.length; r += 2) {
            var a = {
                x: Math.floor(e[r] * world.w / 250),
                y: Math.floor(e[r + 1] * world.h / 250)
            };
            t && !i && !user.spectator && Utils.dist(a, t) < 250 ? i += 1 : game.minimap.players.push(a)
        }
    }, this.reborn = function() {
        user.resurrection.open = !1, user.ghost.enabled = !1, user.ghost.delay = -1, user.ghost.label = null, user.ghost.sec = null, user.ghost.now = -1, HackSettings.AutoCrown.enabled && user.inv.n[INV.CROWN_BLUE] && (CrownCoolDown = +new Date, user.helmet.wait = !0, setTimeout((() => {
            let e = world.fast_units[user.uid];
            e && e.clothe !== INV.CROWN_BLUE && client.socket.send(JSON.stringify([5, INV.CROWN_BLUE]))
        }), 400))
    }, this.ghost = function(e) {
        WORLD.GHOST_DELAY = e, user.ghost.enabled = !0, user.ghost.delay = (new Date).getTime(), user.ghost.label = null, user.ghost.now = -1;
        for (var t = [INV.SUPER_HAMMER, INV.DRAGON_HEART, INV.SWORD_WOOD, INV.SWORD, INV.SWORD_GOLD, INV.SWORD_DIAMOND, INV.SWORD_AMETHYST, INV.REIDITE_SWORD, INV.DRAGON_SWORD, INV.LAVA_SWORD, INV.PIRATE_SWORD, INV.SPEAR, INV.WOOD_SPEAR, INV.GOLD_SPEAR, INV.DIAMOND_SPEAR, INV.AMETHYST_SPEAR, INV.REIDITE_SPEAR, INV.DRAGON_SPEAR, INV.LAVA_SPEAR, INV.CRAB_SPEAR, INV.WOOD_BOW, INV.STONE_BOW, INV.GOLD_BOW, INV.DIAMOND_BOW, INV.AMETHYST_BOW, INV.REIDITE_BOW, INV.DRAGON_BOW, INV.WOOD_SHIELD, INV.STONE_SHIELD, INV.GOLD_SHIELD, INV.DIAMOND_SHIELD, INV.AMETHYST_SHIELD, INV.REIDITE_SHIELD, INV.WAND1, INV.WAND2, INV.PICK_WOOD, INV.PICK, INV.PICK_GOLD, INV.PICK_DIAMOND, INV.PICK_AMETHYST, INV.PICK_REIDITE, INV.SPANNER, INV.PITCHFORK, INV.PITCHFORK2], i = 0; i < t.length; i++) {
            var r = user.inv.find_item(t[i]); - 1 != r && user.inv.delete_item(t.length[i], r)
        }
        user.craft.restart()
    }, this.decrease_item2 = function(e, t, i) {
        this.decrease_item(e, 256 * t + i)
    }, this.decrease_item = function(e, t) {
        user.craft.preview = -1, user.inv.decrease(e, t, user.inv.find_item(e)), user.craft.update()
    }, this.accept_build = function(e) {
        user.craft.preview = -1, user.build.wait = !0;
        var t = user.inv.find_item(e);
        user.inv.decrease(e, 1, t), t >= 0 && !user.inv.n[e] && user.craft.update(), e == INV.TOTEM && (user.team = [user.id])
    }, this.cancel_crafting = function() {
        this.socket.send(WINDOW2[JSONWORD2].stringify([31]))
    }, this.buy_market = function(e) {
        this.socket.send(WINDOW3[JSONWORD3].stringify([32, e.val, e.id]))
    }, this.update_sign = function(e, t) {
        this.socket.send(WINDOW3[JSONWORD5].stringify([33, e, t]))
    }, this.send_build = function() {
        var e = world.fast_units[user.uid];
        if (e) {
            var t = 2 * Math.PI;
            this.socket.send(WINDOW3[JSONWORD3].stringify([10, user.craft.preview, Math.floor((e.angle + t) % t * 255 / t), user.craft.mode]))
        }
    }, this.select_inv = function(e, t) {
        switch (e) {
            case INV.BANDAGE:
            case INV.PLANT:
            case INV.MEAT:
            case INV.COOKED_MEAT:
            case INV.SANDWICH:
            case INV.BOTTLE_FULL:
            case INV.COOKIE:
            case INV.CAKE:
            case INV.ICE:
            case INV.BREAD:
            case INV.PUMPKIN:
            case INV.TOMATO:
            case INV.CACTUS:
            case INV.CARROT:
            case INV.WATERMELON:
            case INV.ALOE_VERA:
            case INV.GARLIC:
            case INV.FOODFISH:
            case INV.FOODFISH_COOKED:
            case INV.CRAB_STICK:
            case INV.CRAB_LOOT:
            case INV.CANDY:
            case INV.SUGAR_CAN:
                user.craft.preview = -1, this.socket.send(WINDOW4[JSONWORD4].stringify([5, e]));
                break;
            case INV.WORKBENCH:
            case INV.SPIKE:
            case INV.SEED:
            case INV.WHEAT_SEED:
            case INV.PUMPKIN_SEED:
            case INV.TOMATO_SEED:
            case INV.CARROT_SEED:
            case INV.GARLIC_SEED:
            case INV.THORNBUSH_SEED:
            case INV.WATERMELON_SEED:
            case INV.ALOE_VERA_SEED:
            case INV.FIRE:
            case INV.WALL:
            case INV.STONE_WALL:
            case INV.GOLD_WALL:
            case INV.DIAMOND_WALL:
            case INV.BIG_FIRE:
            case INV.CHEST:
            case INV.RESURRECTION:
            case INV.EMERALD_MACHINE:
            case INV.WOOD_DOOR:
            case INV.STONE_DOOR:
            case INV.GOLD_DOOR:
            case INV.DIAMOND_DOOR:
            case INV.AMETHYST_DOOR:
            case INV.REIDITE_DOOR:
            case INV.WOOD_DOOR_SPIKE:
            case INV.STONE_DOOR_SPIKE:
            case INV.GOLD_DOOR_SPIKE:
            case INV.DIAMOND_DOOR_SPIKE:
            case INV.AMETHYST_DOOR_SPIKE:
            case INV.REIDITE_DOOR_SPIKE:
            case INV.STONE_SPIKE:
            case INV.GOLD_SPIKE:
            case INV.DIAMOND_SPIKE:
            case INV.FURNACE:
            case INV.AMETHYST_WALL:
            case INV.AMETHYST_SPIKE:
            case INV.REIDITE_WALL:
            case INV.REIDITE_SPIKE:
            case INV.BRIDGE:
            case INV.ROOF:
            case INV.PLOT:
            case INV.WINDMILL:
            case INV.EXTRACTOR_MACHINE_STONE:
            case INV.EXTRACTOR_MACHINE_GOLD:
            case INV.EXTRACTOR_MACHINE_DIAMOND:
            case INV.EXTRACTOR_MACHINE_AMETHYST:
            case INV.EXTRACTOR_MACHINE_REIDITE:
            case INV.BED:
            case INV.GARLAND:
            case INV.WELL:
            case INV.SIGN:
            case INV.BREAD_OVEN:
            case INV.TOTEM:
            case INV.WOOD_TOWER:
                user.zombie || (user.craft.preview === e ? user.craft.preview = -1 : user.craft.preview = e);
                break;
            case INV.SWORD:
            case INV.SWORD_WOOD:
            case INV.SWORD_GOLD:
            case INV.SWORD_DIAMOND:
            case INV.SWORD_AMETHYST:
            case INV.REIDITE_SWORD:
            case INV.PIRATE_SWORD:
            case INV.DRAGON_SWORD:
            case INV.LAVA_SWORD:
            case INV.WOOD_BOW:
            case INV.STONE_BOW:
            case INV.GOLD_BOW:
            case INV.DIAMOND_BOW:
            case INV.AMETHYST_BOW:
            case INV.REIDITE_BOW:
            case INV.DRAGON_BOW:
            case INV.WAND1:
            case INV.WAND2:
            case INV.WOOD_SPEAR:
            case INV.SPEAR:
            case INV.GOLD_SPEAR:
            case INV.DIAMOND_SPEAR:
            case INV.AMETHYST_SPEAR:
            case INV.AMETHYST_REIDITE:
            case INV.DRAGON_SPEAR:
            case INV.LAVA_SPEAR:
            case INV.REIDITE_SPEAR:
            case INV.CRAB_SPEAR:
                if (!user.zombie) user.craft.preview = -1, (i = world.fast_units[user.uid]) && i.right === e ? this.socket.send(WINDOW5[JSONWORD5].stringify([5, INV.HAND])) : (user.weapon.wait = !0, this.socket.send(WINDOW6[JSONWORD6].stringify([5, e])));
                break;
            case INV.PICK:
            case INV.PICK_WOOD:
            case INV.PICK_GOLD:
            case INV.PICK_DIAMOND:
            case INV.HAMMER:
            case INV.HAMMER_GOLD:
            case INV.HAMMER_DIAMOND:
            case INV.BOOK:
            case INV.HAMMER_AMETHYST:
            case INV.HAMMER_REIDITE:
            case INV.PICK_AMETHYST:
            case INV.PICK_REIDITE:
            case INV.SUPER_HAMMER:
            case INV.SHOVEL:
            case INV.SHOVEL_GOLD:
            case INV.SHOVEL_DIAMOND:
            case INV.SHOVEL_AMETHYST:
            case INV.SPANNER:
            case INV.MACHETE:
            case INV.PITCHFORK:
            case INV.PITCHFORK2:
            case INV.SADDLE:
            case INV.WATERING_CAN_FULL:
            case INV.WOOD_SHIELD:
            case INV.STONE_SHIELD:
            case INV.GOLD_SHIELD:
            case INV.DIAMOND_SHIELD:
            case INV.AMETHYST_SHIELD:
            case INV.REIDITE_SHIELD:
                if (!user.zombie) user.craft.preview = -1, (i = world.fast_units[user.uid]) && i.right === e ? this.socket.send(WINDOW7[JSONWORD7].stringify([5, INV.HAND])) : this.socket.send(WINDOW8[JSONWORD8].stringify([5, e]));
                break;
            case INV.BOAT:
            case INV.SLED:
            case INV.MOUNT_BOAR:
            case INV.BABY_MAMMOTH:
            case INV.CRAB_BOSS:
            case INV.BABY_DRAGON:
            case INV.BABY_LAVA:
            case INV.HAWK:
            case INV.PLANE:
            case INV.NIMBUS:
                if (!user.zombie) {
                    user.craft.preview = -1;
                    var i = world.fast_units[user.uid];
                    this.socket.send(WINDOW8[JSONWORD8].stringify([5, e]))
                }
                break;
            case INV.CROWN_GREEN:
            case INV.CROWN_ORANGE:
            case INV.CROWN_BLUE:
            case INV.WOOD_HELMET:
            case INV.STONE_HELMET:
            case INV.GOLD_HELMET:
            case INV.DIAMOND_HELMET:
            case INV.AMETHYST_HELMET:
            case INV.REIDITE_HELMET:
            case INV.DIAMOND_PROTECTION:
            case INV.AMETHYST_PROTECTION:
            case INV.REIDITE_PROTECTION:
            case INV.DRAGON_HELMET:
            case INV.LAVA_HELMET:
            case INV.WITCH:
            case INV.CROWN_CRAB:
            case INV.SUPER_DIVING_SUIT:
                (i = world.fast_units[user.uid]) && i.clothe !== e && (user.helmet.wait = !0), CrownCoolDown = +new Date, this.socket.send(WINDOW4[JSONWORD5].stringify([5, e]));
                break;
            case INV.EARMUFFS:
            case INV.HOOD:
            case INV.PEASANT:
            case INV.WINTER_PEASANT:
            case INV.COAT:
            case INV.CAP_SCARF:
            case INV.FUR_HAT:
            case INV.PILOT_HELMET:
            case INV.TURBAN1:
            case INV.TURBAN2:
            case INV.CHRISTMAS_HAT:
            case INV.ELF_HAT:
            case INV.WINTER_HOOD:
            case INV.EXPLORER_HAT:
            case INV.PIRATE_HAT:
            case INV.DIVING_MASK:
                this.socket.send(WINDOW9[JSONWORD9].stringify([5, e]))
        }
    }, this.delete_inv = function(e) {
        this.socket.send(WINDOW3[JSONWORD1].stringify([6, e]))
    }, this.delete_inv_ok = function(e) {
        user.build.wait = !0;
        var t = user.inv.find_item(e);
        user.inv.delete_item(e, t), user.craft.update()
    }, this.recycle_inv = function(e, t) {
        this.socket.send(WINDOW1[JSONWORD7].stringify([29, e])), lastRecycled = e
    }, this.delete_one_inv = function(e, t) {
        this.socket.send(WINDOW2[JSONWORD2].stringify([28, e]))
    }, this.delete_one_inv_ok = function(e) {
        user.build.wait = !0;
        var t = user.inv.find_item(e);
        user.inv.decrease(e, 1, t), user.craft.update()
    }, this.delete_single_inv = function(e) {
        var t = e[1],
            i = e[2];
        user.build.wait = !0;
        var r = user.inv.find_item(t);
        user.inv.decrease(t, i, r), user.craft.update()
    }, this.stop_attack = function() {
        this.socket.send(WINDOW2[JSONWORD2].stringify([14]))
    }, this.send_attack = function(e) {
        var t = 2 * Math.PI;
        this.socket.send(WINDOW3[JSONWORD3].stringify([4, Math.floor((e + t) % t * 255 / t)]))
    }, this.send_angle = function(e) {
        var t = 2 * Math.PI;
        this.socket.send(WINDOW3[JSONWORD3].stringify([3, Math.floor((e + t) % t * 255 / t)]))
    }, this.send_move = function(e) {
        Spectator || this.socket.send(WINDOW12[JSONWORD12].stringify([2, e]))
    }, this.send_command = function(e) {
        this.socket.send(WINDOW5[JSONWORD5].stringify([36, e]))
    }, this.send_chat = function(e) {
        var t = world.fast_units[user.uid];
        user.zombie ? Math.random() > .5 ? t.text.push(e.substring(0, 25) + " ..." + ZOMBIE_GRUMBLE) : t.text.push(ZOMBIE_GRUMBLE + "... " + e.substring(0, 25)) : HackSettings.CipherMessage.enabled ? t.text.push(HelperFns.CipherMessage(e, Number(HackSettings.CipherMessage.cipherKey))) : t.text.push(e), HackSettings.CipherMessage.enabled ? this.socket.send(WINDOW5[JSONWORD5].stringify([0, HelperFns.CipherMessage(e, Number(HackSettings.CipherMessage.cipherKey))])) : this.socket.send(WINDOW5[JSONWORD5].stringify([0, e]))
    }, this.move_units = function(e) {
        var t = player.select.units;
        if (0 != t.length) {
            var i = [2],
                r = [];
            Utils.sub_vector(e, {
                x: player.cam.rx,
                y: player.cam.ry
            }), i.push(e.x), i.push(e.y);
            for (var a = 0; a < t.length; a++) r.push(t[a].oid);
            i.push(r), this.socket.send(WINDOW6[JSONWORD6].stringify(i))
        }
    }, this.cam_delay = 0, this.last_cam = {
        i: 0,
        j: 0
    }, this.update_cam = function() {
        world.fast_units[user.uid];
        if (old_timestamp - this.cam_delay > CLIENT.CAM_DELAY) {
            this.cam_delay = old_timestamp;
            var e = user.cam,
                t = Math.floor(e.x / 100),
                i = Math.floor(e.y / 100);
            this.last_cam.i == t && this.last_cam.j == i || (this.socket.send(JSON.stringify([1, Math.floor(-e.x) + HackSettings.Zoom.realZoomX, Math.floor(-e.y) + HackSettings.Zoom.realZoomY])), this.last_cam.i = t, this.last_cam.j = i)
        }
    }, this.ping_delay = 0, this.try_ping = function() {
        old_timestamp - this.ping_delay > CLIENT.PING_DELAY && (this.ping_delay = old_timestamp, this.ping())
    }, this.lost = function() {
        user.reconnect.enabled = !0, this._current_id == this.socket._current_id && (this._current_id++, this.socket.close(), client.connect())
    }, this.join_new_team = function(e) {
        this.new_alert(LANG[TEXT.JOIN_TEAM]);
        for (var t = 1; t < e.length; t++) user.team.push(e[t]);
        HelperFns.updateAllys()
    }, this.new_member_team = function(e) {
        this.new_alert(world.players[e].nickname + LANG[TEXT.JOINED_TEAM]), user.team.push(e);
        var t = document.getElementById("team_box"); - 1 != game.team_buttons_id && "inline-block" == t.style.display && game.team_buttons[game.team_buttons_id].action(), HelperFns.updateAllys()
    }, this.destroy_team = function() {
        this.new_alert(LANG[TEXT.TEAM_DESTROYED]), user.totem.wait = !0, user.team = [], document.getElementById("team_box").style.display = "none", HelperFns.updateAllys()
    }, this.exclude_team = function(e) {
        if (e == user.id) this.new_alert(LANG[TEXT.LEFT_TEAM]), user.totem.wait = !0, user.team = [], document.getElementById("team_box").style.display = "none";
        else {
            this.new_alert(world.players[e].nickname + LANG[TEXT.LEFT_TEAM2]);
            for (var t = 0; t < user.team.length; t++)
                if (user.team[t] == e) {
                    user.team.splice(t, 1);
                    break
                } var i = document.getElementById("team_box"); - 1 != game.team_buttons_id && "inline-block" == i.style.display && game.team_buttons[game.team_buttons_id].action()
        }
        HelperFns.updateAllys()
    }, this.steal_token = function(e) {
        if (user.alive = !1, this.new_alert(LANG[TEXT.TOKEN]), HackSettings.AntiStealToken.enabled) this._current_id++, this.socket.close(), ui.waiting = !1, ui.play_game();
        else {
            if (this._current_id != this.socket._current_id) return;
            this._current_id++, game.quit(ui.run), this.socket.close()
        }
    }, this.killed = function(e, t) {
        user.alive = !1, HackSettings.AutoSpike.enabled = !1, HackSettings.SwordInChest.enabled = !1, HackSettings.AutoTotem.enabled = !1, HackSettings.DropSword.enabled = !1, HackSettings.AutoBridge.enabled = !1;
        var i = new Uint16Array(t),
            r = new Uint32Array(t);
        user.die.howdie = DIE[e][Math.floor(Math.random() * DIE[e].length)], user.die.score = Utils.simplify_number(world.players[user.id].score), user.die.bank = Utils.simplify_number(r[1]), user.die.kill = i[1], this.new_alert(LANG[TEXT.YOU_DEAD]), HackSettings.AutoRespawn.enabled ? (this._current_id++, this.socket.close(), ui.waiting = !1, ui.play_game()) : this._current_id == this.socket._current_id && (this._current_id++, this.socket.close(), game.quit(scoreboard.run)), window.aiptag.cmd.display.push((function() {
            window.aipDisplayTag.display("MFN_starve-io_300x250")
        }))
    }, this.ping = function() {
        this.socket.send(CLIENT.PING)
    }, this.check_state = function() {
        3 == this.socket.readyState && (this.timeout_server -= CLIENT.TIMEOUT_SERVER)
    }, this.check_pong = function() {
        delta > CLIENT.LOOSE_FOCUS && (this.timeout_server = old_timestamp), old_timestamp - this.timeout_server > CLIENT.TIMEOUT_SERVER && (this.timeout_server = old_timestamp, this.lost())
    }, this.handshake = function(t) {
        ___adsvid++, clearTimeout(this.timeout_handler), document.getElementById("commandMainBoxName").innerHTML = this.mode_list[this.current_mode][this.selected_server[this.current_mode]].a, document.getElementById("exploreForest").src = "img/forest-leaf.png", document.getElementById("exploreWinter").src = "img/winter-flake.png", document.getElementById("exploreDesert").src = "img/desert-cactus.png", document.getElementById("exploreLava").src = "img/lava-volcano.png", this.timeout_server = old_timestamp, user.gauges.cold.ed = user.gauges.cold.em, user.gauges.hunger.ed = user.gauges.hunger.em, user.gauges.thirst.ed = user.gauges.thirst.em, user.gauges.oxygen.ed = user.gauges.oxygen.em, user.gauges.warm.ed = user.gauges.warm.em, user.gauges.l = 1, user.gauges.c = 1, user.gauges.h = 1, user.gauges.t = 1, user.gauges.o = 1, user.gauges.wa = 1, user.gauges.realhp = 200, user.bigmap = !1, game.info_box.display = 0, user.inv.can_select = [], user.inv.n = [], user.inv.max = WORLD.WITHOUT_BAG, user.inv.bonus = 0, user.inv.bag = 0, user.inv.id = -1, game.show_recipe_book = 1, game.show_clock = 1, game.show_quest = 1, game.show_market = 1, user.alive = !0, user.inv.drag.stop(), user.craft.can_craft = [], user.craft.crafting = !1, user.craft.can_build = !1, user.craft.preview = -1, user.craft.id = -1, user.craft.workbench = !1, user.craft.well = !1, user.craft.fire = !1, user.craft.water = !1, user.craft.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1), user.weapon.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, .1, 1), user.weapon.wait = !1, user.helmet.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, .2, 1), user.helmet.wait = !1, user.build.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1), user.build.wait = !1, user.totem.id = -1, user.totem.pid = -1, user.totem.wait = !1, user.totem.timeout = new Utils.LinearAnimation(!1, 0, 1, 0, 1 / 30, 1), game.minimap.marker.x = -1, game.minimap.marker.y = -1, game.craft_list.open = !1, game.minimap.players = [], user.show_spectators.enabled = !1, world.mode = t[1], void 0 !== t[20] && void 0 !== t[21] && (world.nw = t[20], world.nh = t[21], world.w = world.nw * world.dw, world.h = world.nh * world.dh), world.islands = t[22], world.custom_map = t[23], e.welcome(t[24]), e.new_recipes(t[25]), user.desert.tempest = t[26], user.blizzard = 0, user.winter.tempest = t[27], world.generate_world(t[19]), world.time = t[5], world.clock.hour = t[15], world.clock.init = (new Date).getTime(), game.quests.born = t[16], world.transition = !1, user.day = t[2], game.quests.reset(), user.team = t[8], world.units[ITEMS.PLAYERS] = [], world.units[ITEMS.FRUIT] = [], world.units[ITEMS.WORKBENCH] = [], world.units[ITEMS.FIRE] = [], world.units[ITEMS.BIG_FIRE] = [], world.units[ITEMS.SEED] = [], world.units[ITEMS.WHEAT_SEED] = [], world.units[ITEMS.PUMPKIN_SEED] = [], world.units[ITEMS.TOMATO_SEED] = [], world.units[ITEMS.CARROT_SEED] = [], world.units[ITEMS.GARLIC_SEED] = [], world.units[ITEMS.THORNBUSH_SEED] = [], world.units[ITEMS.WATERMELON_SEED] = [], world.units[ITEMS.ALOE_VERA_SEED] = [], world.units[ITEMS.WALL] = [], world.units[ITEMS.STONE_WALL] = [], world.units[ITEMS.GOLD_WALL] = [], world.units[ITEMS.DIAMOND_WALL] = [], world.units[ITEMS.WOOD_DOOR] = [], world.units[ITEMS.STONE_DOOR] = [], world.units[ITEMS.GOLD_DOOR] = [], world.units[ITEMS.DIAMOND_DOOR] = [], world.units[ITEMS.WOOD_DOOR_SPIKE] = [], world.units[ITEMS.STONE_DOOR_SPIKE] = [], world.units[ITEMS.GOLD_DOOR_SPIKE] = [], world.units[ITEMS.DIAMOND_DOOR_SPIKE] = [], world.units[ITEMS.AMETHYST_DOOR_SPIKE] = [], world.units[ITEMS.REIDITE_DOOR_SPIKE] = [], world.units[ITEMS.CHEST] = [], world.units[ITEMS.RESURRECTION] = [], world.units[ITEMS.EMERALD_MACHINE] = [], world.units[ITEMS.SPIKE] = [], world.units[ITEMS.STONE_SPIKE] = [], world.units[ITEMS.GOLD_SPIKE] = [], world.units[ITEMS.DIAMOND_SPIKE] = [], world.units[ITEMS.WOLF] = [], world.units[ITEMS.BOAR] = [], world.units[ITEMS.CRAB_BOSS] = [], world.units[ITEMS.BABY_DRAGON] = [], world.units[ITEMS.BABY_LAVA] = [], world.units[ITEMS.HAWK] = [], world.units[ITEMS.TREASURE_CHEST] = [], world.units[ITEMS.DEAD_BOX] = [], world.units[ITEMS.GIFT] = [], world.units[ITEMS.CRATE] = [], world.units[ITEMS.BREAD_OVEN] = [], world.units[ITEMS.PIRANHA] = [], world.units[ITEMS.KRAKEN] = [], world.units[ITEMS.CRAB] = [], world.units[ITEMS.FOX] = [], world.units[ITEMS.BEAR] = [], world.units[ITEMS.MAMMOTH] = [], world.units[ITEMS.BABY_MAMMOTH] = [], world.units[ITEMS.VULTURE] = [], world.units[ITEMS.SAND_WORM] = [], world.units[ITEMS.DRAGON] = [], world.units[ITEMS.LAVA_DRAGON] = [], world.units[ITEMS.FLAME] = [], world.units[ITEMS.WHEAT_MOB] = [], world.units[ITEMS.ALOE_VERA_MOB] = [], world.units[ITEMS.PUMPKIN_MOB] = [], world.units[ITEMS.GARLIC_MOB] = [], world.units[ITEMS.THORNBUSH_MOB] = [], world.units[ITEMS.RABBIT] = [], world.units[ITEMS.PENGUIN] = [], world.units[ITEMS.SPELL] = [], world.units[ITEMS.FIREFLY] = [], world.units[ITEMS.SPIDER] = [], world.units[ITEMS.FURNACE] = [], world.units[ITEMS.AMETHYST_WALL] = [], world.units[ITEMS.AMETHYST_SPIKE] = [], world.units[ITEMS.AMETHYST_DOOR] = [], world.units[ITEMS.REIDITE_WALL] = [], world.units[ITEMS.REIDITE_SPIKE] = [], world.units[ITEMS.REIDITE_DOOR] = [], world.units[ITEMS.TOTEM] = [], world.units[ITEMS.WOOD_TOWER] = [], world.units[ITEMS.BRIDGE] = [], world.units[ITEMS.ROOF] = [], world.units[ITEMS.PLOT] = [], world.units[ITEMS.WINDMILL] = [], world.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [], world.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [], world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [], world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [], world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [], world.units[ITEMS.GARLAND] = [], world.units[ITEMS.BED] = [], world.units[ITEMS.WELL] = [], world.units[ITEMS.SIGN] = [], world.fast_units = [], world.max_units = t[7], user.id = t[9], user.uid = user.id * world.max_units, audio.loaded && (audio.players[0].uid = user.uid, audio.players[0].free = 0), keyboard.clear_directionnal(), user.cam.change(t[3], t[10]), world.players = [];
        for (var i = world.players, r = 0; r < t[11]; r++) i.push(new Player);
        r = 0;
        for (var a = t[4]; r < a.length; r++) {
            var n = i[a[r].i];
            n.nickname = a[r].n, n.skin = a[r].s, n.accessory = a[r].a, n.crate = a[r].c, n.book = a[r].b, n.dead = a[r].d, n.baglook = a[r].g, n.level = a[r].l, n.score = Utils.restore_number(a[r].p), n.alive = !0, 1 === SHOW_ID && (n.nickname += "|" + a[r].i)
        }
        if (user.ldb.sort(), world.mode === WORLD.MODE_HUNGER_GAMES && "spectator" === world.players[user.id].nickname ? user.spectator = !0 : user.spectator = !1, world.mode === WORLD.MODE_ZOMBIES && world.players[user.id].skin === WORLD.ZOMBIE_SKIN ? user.zombie = !0 : user.zombie = !1, world.mode === WORLD.MODE_VAMPIRES && world.players[user.id].skin === WORLD.VAMPIRE_SKIN ? user.vampire = !0 : user.vampire = !1, Cookies.set("starve_token", user.token), 0 === t[12]) {
            user.shop.delay = 0, game.quests.restore(t[17]);
            var o = t[14];
            o[INV.BAG] && user.inv.update_bag_size(1, 0);
            for (r = 0; r < o.length; r++)
                if (o[r]) {
                    if (r == INV.BAG) continue;
                    if (r == INV.HAND) continue;
                    this.gather([0, r, o[r]])
                } user.shop.open = !1
        } else world.mode === WORLD.MODE_LEGACY ? this.gather([0, INV.SANDWORM_JUICE, 1]) : world.mode === WORLD.MODE_VAMPIRES && (user.vampire ? this.gather([0, INV.ROOF, 4]) : this.gather([0, INV.GARLIC_SEED, 3])), world.mode === WORLD.MODE_PVP || world.mode === WORLD.MODE_VAMPIRES || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_LEGACY ? (user.shop.delay = (new Date).getTime(), user.shop.open = !0, user.shop.value = t[13], game.shop.init()) : (user.shop.delay = 0, user.shop.open = !1, user.shop.value = 0), user.token_id = t[12].toString(), HackSettings.Tokens.tokenid = user.token_id, HelperFns.saveSettings();
        user.ghost.enabled = t[6], user.ghost.delay = -1, user.ghost.label = null, user.ghost.now = -1, Cookies.set("starve_token_id", user.token_id), user.reconnect.enabled ? (user.reconnect.rotate = 0, user.reconnect.enabled = !1) : (ui.quit(game.run), ga && ga("send", "event", "Game", "play", "S" + ui.skin + "A" + ui.accessory)), TimerTools.HPTimer = (new Date).getTime(), TimerTools.GaugeTimer = (new Date).getTime(), HelperFns.updateAllys(), HackSettings.AutoBuyKit.enabled && client.socket.send(JSON.stringify([21, Number(HackSettings.AutoBuyKit.selectedKit)]))
    }, this.connect = function() {
        this.timeout_number = 0, this.connect_timeout()
    }, this.connect_timeout = async function() {
        let t = await this.get_rivet_token();
        console.log("Rivet Token: ", t);
        let i = WORLD.RIVET_GAME_MODES[this.current_mode];
        console.log("Game Mode ID: ", i);
        let r, a, n = this.selected_server[this.current_mode];
        if (console.log("Selected Server Index: ", n), 0 == n) r = RIVET_API + "/lobbies/find", a = {
            game_modes: [i]
        };
        else {
            let e = this.server_list.find((e => e.gm == i && e.idx == n));
            r = RIVET_API + "/lobbies/join", a = {
                lobby_id: e.id
            }
        }
        console.log("Fetch URL: ", r, "Request Body: ", a);
        let o = {};
        t && (o.Authorization = `Bearer ${t}`);
        let s = await fetch(r, {
            method: "POST",
            headers: o,
            body: JSON.stringify(a)
        });
        if (!s.ok) return client.new_alert("Failed to join lobby, Try connecting again."), ui.waiting = !1, void(HackSettings.Reconnect.enabled && ui.play_game());
        let _ = await s.json();
        console.log("Res URL: ", r, "Res Body: ", _);
        let T = _.lobby.ports.default,
            E = T.host,
            I = "ws" + (T.is_tls ? "s" : "") + "://" + E + "?token=" + _.lobby.player.token;
        this.socket = new window.WebSocket(I), this.socket.binaryType = "arraybuffer", this.socket._current_id = this._current_id, this.socket.onmessage = function(t) {
            if (this._current_id == e._current_id)
                if ("string" == typeof t.data) {
                    var i = JSON.parse(t.data);
                    switch (i[0]) {
                        case 0:
                            e.chat(i);
                            break;
                        case 1:
                            e.kick(i[1]);
                            break;
                        case 2:
                            e.new_player(i);
                            break;
                        case 3:
                            e.handshake(i);
                            break;
                        case 4:
                            e.message(i[1]);
                            break;
                        case 5:
                            e.commands(i);
                            break;
                        case 6:
                            e.welcome(i[1])
                    }
                } else {
                    var r = new Uint8Array(t.data);
                    switch (r[0]) {
                        case 0:
                            e.units(t.data, r, !1);
                            break;
                        case 1:
                            e.units(t.data, r, !0);
                            break;
                        case 2:
                            e.cancel_craft();
                            break;
                        case 3:
                            e.gather(new Uint16Array(t.data));
                            break;
                        case 4:
                            e.old_version();
                            break;
                        case 5:
                            e.full();
                            break;
                        case 6:
                            e.dont_harvest();
                            break;
                        case 7:
                            e.hitten(t.data);
                            break;
                        case 8:
                            e.build_stop(r[1]);
                            break;
                        case 9:
                            e.build_ok(r[1]);
                            break;
                        case 10:
                            e.inv_full();
                            break;
                        case 11:
                            e.decrease_item(r[1], r[2]);
                            break;
                        case 12:
                            e.workbench(r[1]);
                            break;
                        case 13:
                            e.hitten_other(r, t.data);
                            break;
                        case 14:
                            e.mute();
                            break;
                        case 15:
                            e.kill_player(r[1]);
                            break;
                        case 16:
                            e.gauges(r[1], r[2], r[3], r[4], r[5], r[6], r[7]);
                            break;
                        case 17:
                            e.recover_focus(t.data);
                            break;
                        case 18:
                            e.empty_res();
                            break;
                        case 19:
                            e.fire(r[1]);
                            break;
                        case 20:
                            e.survive();
                            break;
                        case 21:
                            e.leaderboard(t.data);
                            break;
                        case 22:
                            e.get_time(r[1]);
                            break;
                        case 23:
                            e.set_cam(t.data);
                            break;
                        case 24:
                            e.accept_build(r[1]);
                            break;
                        case 25:
                            e.killed(r[1], t.data);
                            break;
                        case 26:
                            e.minimap(r);
                            break;
                        case 27:
                            e.fail_restore();
                            break;
                        case 28:
                            e.ghost(r[1]);
                            break;
                        case 29:
                            e.reborn();
                            break;
                        case 30:
                            e.steal_token();
                            break;
                        case 31:
                            e.join_new_team(r);
                            break;
                        case 32:
                            e.exclude_team(r[1]);
                            break;
                        case 33:
                            e.new_member_team(r[1]);
                            break;
                        case 34:
                            e.destroy_team();
                            break;
                        case 35:
                            e.kit_ok(r[1]);
                            break;
                        case 36:
                            e.water(r[1]);
                            break;
                        case 37:
                            e.gauges_life(r[1], r[2]);
                            break;
                        case 38:
                            e.gauges_food(r[1]);
                            break;
                        case 39:
                            e.gauges_water(r[1]);
                            break;
                        case 40:
                            e.get_bag();
                            break;
                        case 41:
                            e.verified_account(r);
                            break;
                        case 42:
                            e.succeed_quest(r[1]);
                            break;
                        case 43:
                            e.fail_quest(r[1]);
                            break;
                        case 44:
                            e.claimed(r[1]);
                            break;
                        case 45:
                            e.recycle_ok(r[1]);
                            break;
                        case 46:
                            e.recycle_stop(r[1]);
                            break;
                        case 47:
                            e.well(r[1]);
                            break;
                        case 48:
                            e.no_resources();
                            break;
                        case 50:
                            e.decrease_item2(r[1], r[2], r[3]);
                            break;
                        case 51:
                            e.blocked();
                            break;
                        case 52:
                            e.delete_inv_ok(r[1]);
                            break;
                        case 53:
                            e.delete_one_inv_ok(r[1]);
                            break;
                        case 54:
                            e.account_ok();
                            break;
                        case 55:
                            e.gauges_warm(r[1]);
                            break;
                        case 56:
                            e.gauges_cold(r[1]);
                            break;
                        case 57:
                            e.new_version();
                            break;
                        case 58:
                            e.wrong_password();
                            break;
                        case 59:
                            e.clean_inventory();
                            break;
                        case 60:
                            e.hide_shop_kit();
                            break;
                        case 61:
                            user.cam.forcedDelay = .2, user.cam.delay = 3;
                            break;
                        case 62:
                            e.delete_single_inv(new Uint16Array(t.data));
                            break;
                        case 63:
                            e.hide_clock();
                            break;
                        case 64:
                            e.hide_recipe_book();
                            break;
                        case 65:
                            e.hide_quest();
                            break;
                        case 66:
                            e.hide_market();
                            break;
                        case 67:
                            e.explorer_quest(r[1]);
                            break;
                        case 68:
                            e.sand_tempest(r[1]);
                            break;
                        case 69:
                            e.blizzard(r[1]);
                            break;
                        case 70:
                            e.blizzard_status(r[1]);
                            break;
                        case 71:
                            e.bandage(r[1])
                    }
                }
        }, this.socket.onopen = function() {
            clearTimeout(e.timeout_handler), user.newToken = user.newToken || Utils.getURLData("token"), Utils.get_recaptcha_token().then((t => {
                e.socket.send(WINDOW10[JSONWORD9].stringify([ui.nickname.input.value, screen.width + 200, screen.height + 200, CLIENT.VERSION_NUMBER, HackSettings.Tokens.token, HackSettings.Tokens.tokenid, user.reconnect.enabled ? 1 : 0, ui.skin, ui.accessory, ui.bag, ui.book, ui.crate, ui.dead, void 0 === userId ? 0 : userId, void 0 === userToken ? 0 : userToken.substring(userToken.length - 50), PASSWORD, user.newToken, t])), user.newToken = void 0, e.timeout_handler = setTimeout(e.timeout, CLIENT.TIMEOUT_TIME)
            })), open = !0
        }
    }
}
var WORLD = {
        DAY: 48e4,
        WITHOUT_BAG: 10,
        WITH_BAG: 16,
        BAG_SIZE: 6,
        GHOST_DELAY: 60,
        TOP: 1,
        BOTTOM: 2,
        LEFT: 4,
        RIGHT: 8,
        ROTATE: 10,
        DIST_CHEST: 100,
        DIST_FURNACE: 100,
        DIST_WINDMILL: 100,
        DIST_WELL: 100,
        DIST_BREAD_OVEN: 100,
        DIST_SIGN: 100,
        DIST_TOTEM: 100,
        DIST_SIGN: 100,
        DIST_RESURRECTION: 100,
        DIST_EXTRACTOR_MACHINE: 100,
        MODE_PVP: 0,
        MODE_HUNGER_GAMES: 1,
        MODE_ZOMBIES: 2,
        MODE_VAMPIRES: 3,
        MODE_LEGACY: 4,
        MODE_BR: 5,
        MODE_COMMUNITY: 6,
        MODE_EXPERIMENTAL: 7,
        RIVET_GAME_MODES: {
            0: "normal",
            2: "zombies",
            3: "vampires",
            4: "forest",
            7: "experimental"
        },
        ZOMBIE_SKIN: 0,
        VAMPIRE_SKIN: 0,
        ROBOT_SKIN: 30,
        GHOST: 2,
        GHOST_DELAY: 6e4,
        WT1SY: 0,
        LWT1SY: 0,
        WT1EY: 50,
        WT2SY: 0,
        LWT2SY: 40,
        WT2EY: 39,
        LWT2: 830,
        FLOAM_X: 25,
        FLOAM_Y: 8,
        W1SX: 0,
        LW1SX: 0,
        W1EX: 200,
        W2SX: 0,
        LW2SX: 250,
        W2EX: 150,
        W3SX: 0,
        LW3SX: 350,
        W3EX: 100,
        LSANDX: 700,
        SEED: 39879
    },
    SLOW_DOWN = [];
for (i = 0; i < 500; i++) SLOW_DOWN[i] = 0;
SLOW_DOWN[SPRITE.SUPER_DIVING_SUIT] = 1, SLOW_DOWN[SPRITE.SWORD_WOOD] = 1, SLOW_DOWN[SPRITE.SWORD] = 1, SLOW_DOWN[SPRITE.SWORD_GOLD] = 1, SLOW_DOWN[SPRITE.SWORD_DIAMOND] = 1, SLOW_DOWN[SPRITE.SWORD_AMETHYST] = 1, SLOW_DOWN[SPRITE.REIDITE_SWORD] = 1, SLOW_DOWN[SPRITE.PIRATE_SWORD] = 1, SLOW_DOWN[SPRITE.DRAGON_SWORD] = 1, SLOW_DOWN[SPRITE.LAVA_SWORD] = 1, SLOW_DOWN[SPRITE.SPEAR] = 1, SLOW_DOWN[SPRITE.GOLD_SPEAR] = 1, SLOW_DOWN[SPRITE.DIAMOND_SPEAR] = 1, SLOW_DOWN[SPRITE.AMETHYST_SPEAR] = 1, SLOW_DOWN[SPRITE.REIDITE_SPEAR] = 1, SLOW_DOWN[SPRITE.DRAGON_SPEAR] = 1, SLOW_DOWN[SPRITE.LAVA_SPEAR] = 1, SLOW_DOWN[SPRITE.WOOD_SPEAR] = 1, SLOW_DOWN[SPRITE.CRAB_SPEAR] = 1;
var QUESTS = [{
        time: 288e4
    }, {
        time: 144e4
    }, {
        time: 192e4
    }, {
        time: 144e4
    }, {
        time: 288e4
    }, {
        time: 24e5
    }, {
        time: 24e5
    }, {
        time: 48e5
    }, {
        time: 288e4
    }, {
        time: 336e4
    }, {
        time: 288e4
    }, {
        time: 384e4
    }, {
        time: 336e4
    }],
    ITEMS = {
        PLAYERS: 0,
        FIRE: 1,
        WORKBENCH: 2,
        SEED: 3,
        WALL: 4,
        SPIKE: 5,
        BIG_FIRE: 6,
        STONE_WALL: 7,
        GOLD_WALL: 8,
        DIAMOND_WALL: 9,
        WOOD_DOOR: 10,
        CHEST: 11,
        STONE_SPIKE: 12,
        GOLD_SPIKE: 13,
        DIAMOND_SPIKE: 14,
        STONE_DOOR: 15,
        GOLD_DOOR: 16,
        DIAMOND_DOOR: 17,
        FURNACE: 18,
        AMETHYST_WALL: 19,
        AMETHYST_SPIKE: 20,
        AMETHYST_DOOR: 21,
        RESURRECTION: 22,
        EMERALD_MACHINE: 23,
        EXTRACTOR_MACHINE_STONE: 24,
        EXTRACTOR_MACHINE_GOLD: 25,
        EXTRACTOR_MACHINE_DIAMOND: 26,
        EXTRACTOR_MACHINE_AMETHYST: 27,
        EXTRACTOR_MACHINE_REIDITE: 28,
        TOTEM: 29,
        BRIDGE: 30,
        WHEAT_SEED: 31,
        WINDMILL: 32,
        PLOT: 33,
        BREAD_OVEN: 34,
        WELL: 35,
        SIGN: 36,
        PUMPKIN_SEED: 37,
        ROOF: 38,
        GARLIC_SEED: 39,
        THORNBUSH_SEED: 40,
        BED: 41,
        GARLAND: 42,
        TOMATO_SEED: 43,
        CARROT_SEED: 44,
        WOOD_DOOR_SPIKE: 45,
        STONE_DOOR_SPIKE: 46,
        GOLD_DOOR_SPIKE: 47,
        DIAMOND_DOOR_SPIKE: 48,
        AMETHYST_DOOR_SPIKE: 49,
        REIDITE_WALL: 50,
        REIDITE_DOOR: 51,
        REIDITE_SPIKE: 52,
        REIDITE_DOOR_SPIKE: 53,
        WATERMELON_SEED: 54,
        ALOE_VERA_SEED: 55,
        WOOD_TOWER: 56,
        WOLF: 60,
        SPIDER: 61,
        FOX: 62,
        BEAR: 63,
        DRAGON: 64,
        PIRANHA: 65,
        KRAKEN: 66,
        CRAB: 67,
        FLAME: 68,
        LAVA_DRAGON: 69,
        BOAR: 70,
        CRAB_BOSS: 71,
        BABY_DRAGON: 72,
        BABY_LAVA: 73,
        HAWK: 74,
        VULTURE: 75,
        SAND_WORM: 76,
        BABY_MAMMOTH: 77,
        MAMMOTH: 78,
        WHEAT_MOB: 79,
        RABBIT: 80,
        TREASURE_CHEST: 81,
        DEAD_BOX: 82,
        PUMPKIN_MOB: 83,
        GARLIC_MOB: 84,
        THORNBUSH_MOB: 85,
        CRATE: 86,
        GIFT: 87,
        PENGUIN: 88,
        ALOE_VERA_MOB: 89,
        FIREFLY: 90,
        SPELL: 91,
        FRUIT: 100
    },
    EXTRACTORS = [
        [ITEMS.EXTRACTOR_MACHINE_STONE, INV.STONE],
        [ITEMS.EXTRACTOR_MACHINE_GOLD, INV.GOLD],
        [ITEMS.EXTRACTOR_MACHINE_DIAMOND, INV.DIAMOND],
        [ITEMS.EXTRACTOR_MACHINE_AMETHYST, INV.AMETHYST],
        [ITEMS.EXTRACTOR_MACHINE_REIDITE, INV.REIDITE]
    ];

function Player() {
    this.nickname = "", this.skin = 0, this.accessory = 0, this.bag = 0, this.baglook = 0, this.book = 0, this.crate = 0, this.dead = 0, this.level = 0, this.label = null, this.label_winter = null, this.ldb_label = null, this.alive = !1, this.score = 0
}

function Item(e, t, i, r, a, n, o, s, _, T) {
    switch (this.type = e, this.pid = t, this.id = i, this.x = r, this.y = a, this.angle = n, this.nangle = n, this.action = o, this.info = s, this.extra = T, this.r = {
            x: r,
            y: a
        }, this.speed = _, world && (this.uid = t * world.max_units + i), e) {
        case ITEMS.PLAYERS:
            this.ally = user.id === this.pid || HelperFns.checkAlly(this.pid), this.player = world.players[this.pid], this.skin = this.player.skin, this.baglook = this.player.baglook, this.book = this.player.book, this.accessory = this.player.accessory, this.dist_forest = -1e6, this.dist_lava = -1e6, this.dist_winter = -1e6, this.dist_desert = -1e6, this.dist_water = -1e6, this.dist_sand = -1e6, this.dist_dragon = -1e6, this.zombie = world.mode === WORLD.MODE_ZOMBIES && this.skin === WORLD.ZOMBIE_SKIN, this.vampire = world.mode === WORLD.MODE_VAMPIRES && this.skin === WORLD.VAMPIRE_SKIN, this.superzombie = !(!this.zombie || "  " !== this.player.nickname), this.foot = [], this.tower = 0, this.move_effect = !0, this.id_foot = 0, this.fly = 0, this.swim = [], this.r = {
                x: r,
                y: a
            }, this.draw = draw_player, this.draw_vehicle = draw_vehicle, this.vehicle_fx1 = 0, this.vehicle_fx2 = 0, this.vehicle_fx3 = 0, this.vehicle_fx4 = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.vehicle_fx5 = 0, this.tower_fx = 0, this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3), this.heal = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3), this.freeze = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3), this.starve = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3), this.idle = new Utils.LinearAnimation(!0, 0, 2.25, -1.5, 3.75, 7.5), this.walk = new Utils.LinearAnimation(!0, 0, 7.5, -3, 22.5, 33.75), this.attack = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 3, 6, 9), this.slow_attack = 0, this.web = new Utils.LinearAnimation(!1, .6, .6, 0, 1, 3), this.move_head = this.superzombie ? new Utils.LinearAnimation(!0, 0, 2.25, -1.5, 2.75, 5.5) : 0, this.angle_init = 0, this.text_ease = 0, this.text_effect = [], this.text_move = [], this.text = [], this.label = [], this.draw_text = draw_chat, this.hand = !0, this.right = -1, this.vehicle = -1, this.action = STATE.IDLE, this.collide = !1, this.clothe = 0, this.ghost = !1, this.bubbles = [], this.bag = 0, this.sid = -1, this.update = function(e) {
                32768 & this.info ? (this.collide = !0, this.info = -32769 & this.info) : this.collide = !1, 16384 & this.info ? (this.info = -16385 & this.info, this.bag = 1) : this.bag = 0, this.clothe = Math.floor(this.info / 128), this.info -= 128 * this.clothe, this.info === INV.HAND || this.superzombie ? this.right = -1 : this.right = this.info, this.tower = world.find_tower(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100)), this.vehicle = 255 & this.extra, this.right === WORLD.GHOST ? this.ghost = !0 : this.ghost = !1, (this.ghost && ((60 - (Date.now() - this.ghosttime)) / 1e3).toFixed(1) < 0 || !this.ghosttime) && (this.ghosttime = new Date), this.ghost || (this.ghosttime = null), SLOW_DOWN[this.right] ? this.weapon = !0 : this.weapon = !1, e & STATE.WEB ? (this.web.o = !1, this.web.v = .6) : e & STATE.COLD ? (this.freeze.o = !1, this.freeze.v = .6) : e & STATE.HEAL && (this.heal.o = !1, this.heal.v = .6), e & STATE.HUNGER && (this.starve.o = !1, this.starve.v = .6), e & STATE.HURT && (this.hit.o = !1, this.hit.v = .6), e & STATE.ATTACK && (this.slow_attack = CLIENT.SLOW_ATTACK, audio.run && -1 !== this.sid && audio.players[this.sid].swing(SOUND[this.right]))
            }, this.update();
            break;
        case ITEMS.EMERALD_MACHINE:
            this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_bg = draw_emerald_machine_halo, this.draw_fg = draw_emerald_machine, this.halo = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01), this.rotate1 = 0, this.rotate2 = 0, this.draw_life = draw_life, this.img = new createText(200, 50, 0), this.img.drawText(String.raw`${world.players[this.pid].nickname}`, 18, "black", "white");
            break;
        case ITEMS.RESURRECTION:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_bg = draw_resurrection_halo, this.draw_fg = draw_resurrection, this.halo = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01), this.rotate1 = 0, this.rotate2 = 0;
            break;
        case ITEMS.FIRE:
        case ITEMS.BIG_FIRE:
            this.draw_bg = draw_fire_ground, this.draw_fg = draw_fire_halo, this.fire = new Utils.LinearAnimation(!1, 1, 1.03, .98, .3, .3), this.ground = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01), this.halo = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .01, .01), this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.TOMATO_SEED:
            this.draw_bg = draw_tomato, this.draw_fg = draw_tomato_fruit, this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2), this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.fruits = [];
            for (var E = 0; E < 3; E++) this.fruits.push({
                draw: draw_breath_2,
                breath: new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2)
            });
            this.fruits[0].x = this.x - 16.5, this.fruits[0].y = this.y - 15.5, this.fruits[0].angle = this.angle, this.fruits[1].x = this.x + 36, this.fruits[1].y = this.y + 17, this.fruits[1].angle = this.angle, this.fruits[2].x = this.x - 18.5, this.fruits[2].y = this.y + 39, this.fruits[2].angle = this.angle;
            break;
        case ITEMS.SEED:
            this.draw_bg = draw_seed, this.draw_fg = draw_plant, this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2), this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.fruits = [];
            for (E = 0; E < 3; E++) this.fruits.push({
                draw: draw_breath,
                breath: new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2)
            });
            this.fruits[0].x = this.x - 16.5, this.fruits[0].y = this.y - 15.5, this.fruits[1].x = this.x - 5.5, this.fruits[1].y = this.y + 7.5, this.fruits[2].x = this.x + 18, this.fruits[2].y = this.y - 5;
            break;
        case ITEMS.BABY_MAMMOTH:
            this.draw = draw_baby_mammoth, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.BOAR:
            this.draw = draw_boar, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.CRAB_BOSS:
            this.draw = draw_crab_boss, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.breathl = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.breathr = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3), this.heal = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.CRAB:
            this.draw = draw_crab, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.breathl = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.breathr = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3), this.heal = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.FLAME:
            this.draw = draw_simple_mobs_hd, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.FIREFLY:
            this.draw = draw_simple_mobs, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .5, .5), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.SPELL:
            this.spell = 15 & this.info, this.fly = 1 & this.extra, this.born = 0, this.x = this.info, this.y = this.extra, this.draw = draw_spell, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .6, .6);
            break;
        case ITEMS.RABBIT:
        case ITEMS.WOLF:
        case ITEMS.SPIDER:
        case ITEMS.FOX:
        case ITEMS.BEAR:
        case ITEMS.MAMMOTH:
        case ITEMS.PIRANHA:
        case ITEMS.KRAKEN:
        case ITEMS.PENGUIN:
            this.draw = draw_simple_mobs, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.SIGN:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw = draw_sign, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.BREAD_OVEN:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw_fg = draw_bread_oven_smog, this.draw = draw_bread_oven, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.up = new Utils.LinearAnimation(!1, 1, 1.03, .98, .1, .1), this.smog = [], this.img = new createText(68, 90, 2), this.info && this.img.drawText(this.info, 20, "black", "white"), this.update = function(e) {
                this.info && this.img.drawText(this.info, 20, "black", "white")
            };
            break;
        case ITEMS.GIFT:
            this.angle = Math.random() * Math.PI / 2;
        case ITEMS.CRATE:
        case ITEMS.DEAD_BOX:
            this.lastSend = Date.now(), this.myHit = 0, this.draw = draw_crate, this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.TREASURE_CHEST:
            this.draw = draw_simple_mobs_2, this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.LAVA_DRAGON:
            this.scale = 1, this.draw = draw_lava_dragon, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.SAND_WORM:
            this.dig = 0, this.ground = [], this.groundTimer = 0, this.draw_ground = draw_sand_worm_ground, this.draw = draw_sand_worm, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.VULTURE:
            this.x = this.info, this.y = this.extra, this.scale = 1, this._alpha = 0, this.draw = draw_vulture, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.HAWK:
            this.x = this.info, this.y = this.extra, this.scale = 1, this._alpha = 0, this.draw = draw_hawk, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.BABY_LAVA:
            this.scale = 1, this.draw = draw_baby_lava, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.BABY_DRAGON:
            this.scale = 1, this.draw = draw_baby_dragon, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.DRAGON:
            this.scale = 1, this.draw = draw_dragon, this.breath = new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2), this.rotate = new Utils.LinearAnimation(!1, 0, 0, -Math.PI / 6, .5, 1), this.hit = new Utils.LinearAnimation(!1, .6, .6, 0, 5, 3);
            break;
        case ITEMS.FRUIT:
            this.fruits = [];
            for (E = 0; E < 5; E++) this.fruits.push({
                draw: draw_breath,
                breath: new Utils.LinearAnimation(!1, .9 + .15 * Math.random(), 1.05, .9, .2, .2)
            });
            switch (this.id % 3) {
                case 0:
                    this.fruits[0].x = this.x - 20.5, this.fruits[0].y = this.y - 22.5, this.fruits[1].x = this.x - 35.5, this.fruits[1].y = this.y + 7.5, this.fruits[2].x = this.x + 7.5, this.fruits[2].y = this.y - 30, this.fruits[3].x = this.x + 22.5, this.fruits[3].y = this.y, this.fruits[4].x = this.x - 7.5, this.fruits[4].y = this.y + 14.5;
                    break;
                case 1:
                    this.fruits[0].x = this.x - 30.5, this.fruits[0].y = this.y - 22.5, this.fruits[1].x = this.x - 15.5, this.fruits[1].y = this.y + 7.5, this.fruits[2].x = this.x + 15.5, this.fruits[2].y = this.y - 30, this.fruits[3].x = this.x + 12.5, this.fruits[3].y = this.y + 5, this.fruits[4].x = this.x - 40.5, this.fruits[4].y = this.y + 14.5;
                    break;
                case 2:
                    this.fruits[0].x = this.x - 20.5, this.fruits[0].y = this.y - 20.5, this.fruits[1].x = this.x - 35.5, this.fruits[1].y = this.y + 15.5, this.fruits[2].x = this.x + 7.5, this.fruits[2].y = this.y - 17, this.fruits[3].x = this.x + 22.5, this.fruits[3].y = this.y + 5, this.fruits[4].x = this.x - 7.5, this.fruits[4].y = this.y + 1.5
            }
            break;
        case ITEMS.WHEAT_SEED:
            this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = draw_wheat, this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2), this.wind = new Utils.LinearAnimation(!1, 0, Math.PI / 30, -Math.PI / 30, .06, .06);
            break;
        case ITEMS.THORNBUSH_SEED:
            this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = draw_thornbush, this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.GARLIC_SEED:
            this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = draw_garlic, this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.CARROT_SEED:
            this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = draw_carrot, this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.ALOE_VERA_SEED:
            this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = draw_aloe_vera, this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.WATERMELON_SEED:
            this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = draw_watermelon, this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.PUMPKIN_SEED:
            this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw = draw_pumpkin, this.ground = new Utils.LinearAnimation(!1, .9, 1.05, .9, .2, .2);
            break;
        case ITEMS.EXTRACTOR_MACHINE_STONE:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw = draw_extractor_stone, this.rotate = 0, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.img = new createText(70, 70, 1), this.info && this.img.drawText(this.info, 20, "black", "white"), this.update = function(e) {
                this.info && this.img.drawText(this.info, 20, "black", "white")
            };
            break;
        case ITEMS.EXTRACTOR_MACHINE_GOLD:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw = draw_extractor_gold, this.rotate = 0, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.img = new createText(70, 70, 1), this.info && this.img.drawText(this.info, 20, "black", "white"), this.update = function(e) {
                this.info && this.img.drawText(this.info, 20, "black", "white")
            };
            break;
        case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw = draw_extractor_diamond, this.rotate = 0, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.img = new createText(70, 70, 1), this.info && this.img.drawText(this.info, 20, "black", "white"), this.update = function(e) {
                this.info && this.img.drawText(this.info, 20, "black", "white")
            };
            break;
        case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw = draw_extractor_amethyst, this.rotate = 0, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.img = new createText(70, 70, 1), this.info && this.img.drawText(this.info, 20, "black", "white"), this.update = function(e) {
                this.info && this.img.drawText(this.info, 20, "black", "white")
            };
            break;
        case ITEMS.EXTRACTOR_MACHINE_REIDITE:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw = draw_extractor_reidite, this.rotate = 0, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.img = new createText(70, 70, 1), this.info && this.img.drawText(this.info, 20, "black", "white"), this.update = function(e) {
                this.info && this.img.drawText(this.info, 20, "black", "white")
            };
            break;
        case ITEMS.WINDMILL:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw_bg = draw_windmill_head, this.draw_fg = draw_windmill_wings, this.rotate = 0, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.img = new createText(70, 70, 1), this.info && this.img.drawText(this.info, 20, "black", "white"), this.update = function(e) {
                this.info && this.img.drawText(this.info, 20, "black", "white")
            };
            break;
        case ITEMS.ROOF:
            this.ally = user.id === this.pid || HelperFns.checkAlly(this.pid), this.draw = draw_roof, this.j = Math.floor(this.x / 100), this.i = Math.floor(this.y / 100), this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.opacity = 1, this.draw_life = draw_life_small;
            break;
        case ITEMS.GARLAND:
            this.draw = draw_garland, this.halo = new Utils.LinearAnimation(!1, 1, 1.15, 1, .3, .3), this.color = 0, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            break;
        case ITEMS.PLOT:
        case ITEMS.WORKBENCH:
        case ITEMS.WOOD_TOWER:
        case ITEMS.WELL:
        case ITEMS.TOTEM:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw = draw_simple_item, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, 29 === this.type && (this.img = new createText(200, 90, 3), this.img.drawText([String.raw`${world.players[this.pid].nickname}`, this.info], 18, "black", "white"), this.update = function(e) {
                this.img.drawText([String.raw`${world.players[this.pid].nickname}`, this.info], 18, "black", "white")
            });
            break;
        case ITEMS.BRIDGE:
            this.draw = draw_simple_item, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_life = draw_life_small;
            break;
        case ITEMS.WALL:
        case ITEMS.STONE_WALL:
        case ITEMS.GOLD_WALL:
        case ITEMS.DIAMOND_WALL:
        case ITEMS.AMETHYST_WALL:
        case ITEMS.REIDITE_WALL:
        case ITEMS.SPIKE:
        case ITEMS.STONE_SPIKE:
        case ITEMS.GOLD_SPIKE:
        case ITEMS.DIAMOND_SPIKE:
        case ITEMS.AMETHYST_SPIKE:
        case ITEMS.REIDITE_SPIKE:
            this.ally = user.id === this.pid || HelperFns.checkAlly(this.pid), this.draw = draw_simple_item, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_life = draw_life;
            break;
        case ITEMS.BED:
            this.draw = draw_bed, this.opacity = 1, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            };
            var I = this.angle % (Math.PI / 2);
            I < Math.PI / 4 ? this.angle -= I : this.angle += Math.PI / 2 - I;
            break;
        case ITEMS.WHEAT_MOB:
            this.draw = draw_wheat_seed, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.ALOE_VERA_MOB:
            this.draw = draw_aloe_vera_mob, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.PUMPKIN_MOB:
            this.draw = draw_pumpkin_seed, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.GARLIC_MOB:
            this.draw = draw_garlic_seed, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.THORNBUSH_MOB:
            this.draw = draw_thornbush_seed, this.angle = Math.random() * Math.PI * 2;
            break;
        case ITEMS.CHEST:
            this.ally = user.id === this.pid || HelperFns.checkAlly(this.pid), this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.update = function(e) {
                this.lock = 8192 & this.info ? 1 : 0, this.info = 8191 & this.info, this.action = e
            }, this.draw = draw_chest, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.lock = 0, this.update(this.action);
            break;
        case ITEMS.WOOD_DOOR_SPIKE:
        case ITEMS.STONE_DOOR_SPIKE:
        case ITEMS.GOLD_DOOR_SPIKE:
        case ITEMS.DIAMOND_DOOR_SPIKE:
        case ITEMS.AMETHYST_DOOR_SPIKE:
        case ITEMS.REIDITE_DOOR_SPIKE:
        case ITEMS.WOOD_DOOR:
        case ITEMS.STONE_DOOR:
        case ITEMS.GOLD_DOOR:
        case ITEMS.DIAMOND_DOOR:
        case ITEMS.AMETHYST_DOOR:
        case ITEMS.REIDITE_DOOR:
            this.ally = user.id === this.pid || HelperFns.checkAlly(this.pid), this.draw = draw_door, this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.draw_life = draw_life;
            break;
        case ITEMS.FURNACE:
            this.ObjectX = Math.floor(this.x / 100), this.ObjectY = Math.floor(this.y / 100), this.Chunk = {}, this.Chunk[`${this.ObjectX.toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+this.ObjectY.toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${this.ObjectX.toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY-1).toString()}`] = 1, this.Chunk[`${(this.ObjectX-1).toString()+(this.ObjectY+1).toString()}`] = 1, this.Chunk[`${(this.ObjectX+1).toString()+(this.ObjectY+1).toString()}`] = 1, this.draw_bg = draw_furnace_ground, this.draw = draw_furnace, this.draw_fg = draw_furnace_halo, this.ground = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .02, .02), this.halo = new Utils.LinearAnimation(!1, 1, 1.23, 1.18, .04, .04), this.hit = {
                anim: new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10),
                update: !1,
                angle: 0
            }, this.update = function(e) {
                this.action = e
            }
    }
}

function World(e) {
    function t(e, t, i, r, a) {
        for (var n = t + Math.floor(world.RNG.get() * r), o = i + Math.floor(world.RNG.get() * r), s = 10 + Math.floor(world.RNG.get() * (world.nw - n - 20)), _ = 10 + Math.floor(world.RNG.get() * (world.nh - o - 20)), T = s + n, E = _ + o, I = 0; I < world.biomes.length; I++) {
            var l = world.biomes[I];
            if (1 === Utils.intersect_aabb(s, T, _, E, l.x1 / 100 - a, l.x2 / 100 + a, l.y1 / 100 - a, l.y2 / 100 + a)) return 0
        }
        return world.biomes.push(new world.Biome(e, s, _, n, o, 15)), 1
    }

    function i(e, t, i) {
        for (var r = t, a = i; a < world.nh; a++) {
            for (var n = t; n < world.nw && (a === i && (r = Math.max(n, r)), !(n > r)) && 1 !== e[a][n]; n++) e[a][n] = 1;
            if (n < r) break
        }
        world.biomes.push(new world.Biome(world.BIOME_SEA, t, i, r - t + 1, a - i, 15))
    }

    function r(e, i, r, a, n) {
        for (var o = 0; o < n && 1 !== t(e, i, r, a, 8); o++);
        return o === n ? 0 : 1
    }

    function a(e, t, i, r, a, n, o, s) {
        for (var _ = Math.floor(o / 2), T = Math.max(1, Math.floor(o / 2)), E = Math.floor(s / 2), I = Math.max(1, Math.floor(s / 2)), l = 0; l < i; l++) {
            for (var u = e - E; u < e + I; u++)
                for (var d = t - _; d < t + T; d++) 1 === A(u, d, "wtb", 0, 1) && n.push([u, d, 1]);
            e += r, t += a
        }
    }

    function n(e, t) {
        for (var i = world.biomes[e], r = Math.floor(i.y1 / 100), n = Math.floor(i.x1 / 100), o = Math.floor(i.h / 100), s = n + (c = Math.floor(i.w / 100)), _ = 2, T = o, E = r, I = n + 10 + Math.floor((c - 20) * world.RNG.get()), l = I - 4; l < I + 4; l++) A(r - 1, l, "wtb", 0, 1);
        for (; T > 0;)
            if (2 !== _)
                if (T < 10)
                    for (h = 1; T > 0; h++) a(E, I, 1, 1, 0, t, h, 1), T -= 1, E += 1;
                else if (1 !== _) {
            _ = 1;
            var u = Math.floor(1 + 2 * world.RNG.get()),
                d = 1 + Math.floor(4 * world.RNG.get());
            I < n + 16 ? (a(E, I, u, 0, 1, t, d, d), I += u) : I > s - 16 ? (a(E, I, u, 0, -1, t, d, d), I -= u) : world.RNG.get() > .5 ? (a(E, I, u, 0, 1, t, d, d), I += u) : (a(E, I, u, 0, -1, t, d, d), I -= u)
        } else {
            var c, R = Math.min(T, Math.floor(1 + 4 * world.RNG.get()));
            a(E, I, R, 1, 0, t, c = 1 + Math.floor(4 * world.RNG.get()), c), _ = 0, T -= R, E += R
        } else {
            for (var h = 10; h > 1; h--) a(E, I, 1, 1, 0, t, h, 1), T -= 1, E += 1;
            _ = 0
        }
        for (l = I - 1; l < I + 2; l++) A(E, l, "wtb", 0, 1)
    }

    function o(e, t) {
        for (var i = 0; i < t.length; i++) {
            h(t[i][0], t[i][1], e, t[i][2])
        }
    }

    function s(e) {
        for (var t = 0; t < 3; t++) c(e, "s", t, 15);
        for (t = 0; t < 3; t++) c(e, "a", t, 1);
        for (t = 0; t < 3; t++) c(e, "d", t, 1);
        d(e)
    }

    function _(e, t) {
        for (var i = 0; i < 3; i++) c(e, "s", i, Math.floor(18 * t));
        for (i = 0; i < 3; i++) c(e, "f", i, Math.floor(24 * t));
        for (i = 0; i < 3; i++) c(e, "d", i, Math.max(1, Math.floor(2 * t)), .3);
        for (i = 0; i < 3; i++) c(e, "g", i, Math.floor(6 * t));
        d(e)
    }

    function T(e, t) {
        for (var i = 0; i < 3; i++) c(e, "s", i, Math.floor(12 * t));
        for (i = 0; i < 3; i++) c(e, "m", i, Math.max(1, Math.floor(1 * t)), .2);
        c(e, "c", 0, Math.floor(36 * t));
        var r = [];
        ! function(e, t) {
            for (var i = world.biomes[e], r = Math.floor(i.y1 / 100), a = Math.floor(i.x1 / 100), n = Math.floor(i.h / 100), o = Math.floor(i.w / 100), s = r + Math.floor(n / 2), _ = a + Math.floor(o / 2), T = 0; T < 3; T++) A(E = Math.floor(s - 3 + 6 * world.RNG.get()), I = Math.floor(_ - 3 + 6 * world.RNG.get()), "plm", T, 1);
            for (T = 0; T < 80; T++) {
                var E, I;
                1 === A(E = Math.floor(s - 3 + 6 * world.RNG.get()), I = Math.floor(_ - 3 + 6 * world.RNG.get()), "wtb", 0, 1) && t.push([E, I, 0])
            }
        }(e, r), o(e, r), r = []
    }

    function E(e, t) {
        ! function(e, t) {
            for (var i = world.biomes[t], r = 0, a = 0; r < e && a < 1e4; a++) {
                var n = i.y1 + world.RNG.get() * i.h,
                    o = i.x1 + world.RNG.get() * i.w,
                    s = Math.floor(n / 100),
                    _ = Math.floor(o / 100);
                if (!(world.dist_from_biome(t, 100 * _ + 50, 100 * s + 50) < 600)) {
                    for (var T = 1, E = s - 4; 1 === T && E <= s + 4; E++)
                        for (var I = _ - 4; 1 === T && I <= _ + 4; I++) void 0 !== MAP.tiles[E][I] && (T = 0);
                    0 !== T && (A(s, _, "la", r % 6, 0), r++)
                }
            }
        }(80 * t, e);
        for (var i = 0; i < 3; i++) c(e, "s", i, Math.floor(12 * t));
        for (i = 0; i < 3; i++) c(e, "g", i, Math.floor(6 * t));
        for (i = 0; i < 3; i++) c(e, "re", i, Math.max(1, Math.floor(1 * t)), .2);
        for (i = 0; i < 3; i++) c(e, "a", i, Math.max(1, Math.floor(2 * t)));
        d(e)
    }

    function I(e, t) {
        for (var i = 0; i < 6; i++) c(e, "t", i, Math.floor(80 * t));
        for (i = 0; i < 4; i++) c(e, "b", i, Math.floor(80 * t));
        for (i = 0; i < 3; i++) c(e, "s", i, Math.floor(50 * t));
        var r = [];
        for (i = 0; i < 6; i++) n(e, r);
        o(e, r), r = [], c(e, "p", 0, Math.floor(28 * t));
        for (i = 0; i < 3; i++) c(e, "g", i, Math.floor(7 * t));
        for (i = 0; i < 3; i++) c(e, "d", i, Math.floor(2 * t));
        for (i = 0; i < 3; i++) c(e, "a", i, Math.floor(1 * t));
        for (i = 0; i < 3; i++) c(e, "m", i, Math.floor(1 * t));
        c(e, "a", 0, Math.floor(1 * t)), d(e)
    }

    function u(e, t) {
        for (var i = 0; i < 6; i++) c(e, "t", i, Math.floor(20 * t));
        for (i = 0; i < 4; i++) c(e, "b", i, Math.floor(20 * t));
        for (i = 0; i < 3; i++) c(e, "s", i, Math.floor(20 * t));
        var r = [];
        n(e, r), o(e, r), r = [], c(e, "p", 0, Math.floor(24 * t));
        for (i = 0; i < 3; i++) c(e, "g", i, Math.floor(5 * t));
        if (world.mode === WORLD.MODE_ZOMBIES) {
            for (i = 0; i < 3; i++) c(e, "d", i, Math.floor(3 * t));
            for (i = 0; i < 3; i++) c(e, "a", i, Math.floor(2 * t))
        }
        d(e)
    }

    function d(e) {
        var t = world.biomes[e];
        A(-3 + Math.floor(t.y2 / 100), -1 + Math.floor(t.x2 / 100), "s", 0, 0), A(3 + Math.floor(t.y1 / 100), -1 + Math.floor(t.x2 / 100), "s", 0, 0), A(-3 + Math.floor(t.y2 / 100), 1 + Math.floor(t.x1 / 100), "s", 0, 0), A(3 + Math.floor(t.y1 / 100), 1 + Math.floor(t.x1 / 100), "s", 0, 0)
    }

    function c(e, t, i, r, a) {
        var n = world.biomes[e],
            o = Math.floor(n.x1 / 100),
            s = Math.floor(n.y1 / 100),
            _ = Math.floor(n.w / 100),
            T = Math.floor(n.h / 100);
        void 0 !== a && (a = 1 - a, o += Math.floor(_ * a / 2), s += Math.floor(T * a / 2), _ -= Math.floor(_ * a), T -= Math.floor(T * a));
        for (var E = MAP.tiles, I = 0, l = 0; I < r && !(l > 5e4); l++) {
            var u, d = s + Math.floor(world.RNG.get() * T),
                c = o + Math.floor(world.RNG.get() * _);
            world.dist_from_biome(e, 100 * c + 50, 100 * d + 50) < 400 || void 0 !== (u = E[d][c + 1]) && void 0 !== u[t] && void 0 !== u[t][i] || void 0 !== (u = E[d][c - 1]) && void 0 !== u[t] && void 0 !== u[t][i] || void 0 !== (u = E[d + 1][c]) && void 0 !== u[t] && void 0 !== u[t][i] || void 0 !== (u = E[d - 1][c]) && void 0 !== u[t] && void 0 !== u[t][i] || void 0 !== (u = E[d + 1][c - 1]) && void 0 !== u[t] && void 0 !== u[t][i] || void 0 !== (u = E[d - 1][c + 1]) && void 0 !== u[t] && void 0 !== u[t][i] || void 0 !== (u = E[d + 1][c + 1]) && void 0 !== u[t] && void 0 !== u[t][i] || void 0 !== (u = E[d - 1][c - 1]) && void 0 !== u[t] && void 0 !== u[t][i] || void 0 === E[d][c] && (A(d, c, t, i, 1), I++)
        }
    }

    function R(e, t) {
        return e >= 0 && t >= 0 && e < world.nh && t < world.nw
    }

    function h(e, t, i, r) {
        if (R(e, t) && (tiles = MAP.tiles, void 0 === tiles[e][t] && (tiles[e][t] = {}), void 0 === tiles[e][t].r)) {
            var a = 0;
            R(e - 1, t) && void 0 !== tiles[e - 1][t] && void 0 !== tiles[e - 1][t].wtb && (a += 2), R(e, t - 1) && void 0 !== tiles[e][t - 1] && void 0 !== tiles[e][t - 1].wtb && (a += 8), R(e, t + 1) && void 0 !== tiles[e][t + 1] && void 0 !== tiles[e][t + 1].wtb && (a += 16), R(e + 1, t) && void 0 !== tiles[e + 1][t] && void 0 !== tiles[e + 1][t].wtb && (a += 64), R(e - 1, t - 1) && 10 == (10 & a) && void 0 !== tiles[e - 1][t - 1] && void 0 !== tiles[e - 1][t - 1].wtb && (a += 1), R(e - 1, t + 1) && 18 == (18 & a) && void 0 !== tiles[e - 1][t + 1] && void 0 !== tiles[e - 1][t + 1].wtb && (a += 4), R(e + 1, t - 1) && 72 == (72 & a) && void 0 !== tiles[e + 1][t - 1] && void 0 !== tiles[e + 1][t - 1].wtb && (a += 32), R(e + 1, t + 1) && 80 == (80 & a) && void 0 !== tiles[e + 1][t + 1] && void 0 !== tiles[e + 1][t + 1].wtb && (a += 128), tiles[e][t].r = {}, tiles[e][t].r.river = a, tiles[e][t].r.current = r, tiles[e][t].r.dist = world.dist_from_biome(i, 100 * t + 50, 100 * e + 50) - 400, tiles[e][t].r.x = 100 * t + 50, tiles[e][t].r.y = 100 * e + 50
        }
    }

    function A(e, t, i, r, a) {
        if (!(e < 0 || t < 0 || e >= world.nh || t >= world.nw)) return tiles = MAP.tiles, void 0 === tiles[e][t] && (tiles[e][t] = {}), void 0 !== tiles[e][t][i] ? 0 : (tiles[e][t][i] = [], tiles[e][t][i][r] = [{
            x: 100 * t + 50,
            y: 100 * e + 50
        }], 1 === a && add_resource_minimap(i, r, e, t), 1)
    }

    function S(e, t, i) {
        if (e[t])
            for (k = 0; k < e[t].length; k++)
                if (e[t][k])
                    for (l = 0; l < e[t][k].length; l++) e[t][k][l].hit = i, e[t][k][l].update = !1, e[t][k][l].time = 0, e[t][k][l].angle = 0
    }
    this.mode = WORLD.MODE_PVP, this.max_units = e, this.custom_map = 0, this.islands = 6, this.players = [], this.units = [], this.units[ITEMS.PLAYERS] = [], this.units[ITEMS.FRUIT] = [], this.units[ITEMS.RABBIT] = [], this.units[ITEMS.WOLF] = [], this.units[ITEMS.CRAB] = [], this.units[ITEMS.BOAR] = [], this.units[ITEMS.BABY_MAMMOTH] = [], this.units[ITEMS.CRAB_BOSS] = [], this.units[ITEMS.BABY_DRAGON] = [], this.units[ITEMS.BABY_LAVA] = [], this.units[ITEMS.HAWK] = [], this.units[ITEMS.PIRANHA] = [], this.units[ITEMS.KRAKEN] = [], this.units[ITEMS.FOX] = [], this.units[ITEMS.PENGUIN] = [], this.units[ITEMS.SPELL] = [], this.units[ITEMS.FIREFLY] = [], this.units[ITEMS.BEAR] = [], this.units[ITEMS.MAMMOTH] = [], this.units[ITEMS.DRAGON] = [], this.units[ITEMS.LAVA_DRAGON] = [], this.units[ITEMS.FLAME] = [], this.units[ITEMS.WHEAT_MOB] = [], this.units[ITEMS.ALOE_VERA_MOB] = [], this.units[ITEMS.PUMPKIN_MOB] = [], this.units[ITEMS.GARLIC_MOB] = [], this.units[ITEMS.THORNBUSH_MOB] = [], this.units[ITEMS.TREASURE_CHEST] = [], this.units[ITEMS.DEAD_BOX] = [], this.units[ITEMS.CRATE] = [], this.units[ITEMS.BREAD_OVEN] = [], this.units[ITEMS.SIGN] = [], this.units[ITEMS.SPIDER] = [], this.units[ITEMS.WORKBENCH] = [], this.units[ITEMS.FIRE] = [], this.units[ITEMS.BIG_FIRE] = [], this.units[ITEMS.SEED] = [], this.units[ITEMS.SPIKE] = [], this.units[ITEMS.STONE_SPIKE] = [], this.units[ITEMS.GOLD_SPIKE] = [], this.units[ITEMS.DIAMOND_SPIKE] = [], this.units[ITEMS.AMETHYST_SPIKE] = [], this.units[ITEMS.REIDITE_SPIKE] = [], this.units[ITEMS.WALL] = [], this.units[ITEMS.STONE_WALL] = [], this.units[ITEMS.GOLD_WALL] = [], this.units[ITEMS.DIAMOND_WALL] = [], this.units[ITEMS.AMETHYST_WALL] = [], this.units[ITEMS.REIDITE_WALL] = [], this.units[ITEMS.BED] = [], this.units[ITEMS.WOOD_DOOR] = [], this.units[ITEMS.STONE_DOOR] = [], this.units[ITEMS.GOLD_DOOR] = [], this.units[ITEMS.DIAMOND_DOOR] = [], this.units[ITEMS.AMETHYST_DOOR] = [], this.units[ITEMS.REIDITE_DOOR] = [], this.units[ITEMS.WOOD_DOOR_SPIKE] = [], this.units[ITEMS.STONE_DOOR_SPIKE] = [], this.units[ITEMS.GOLD_DOOR_SPIKE] = [], this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [], this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [], this.units[ITEMS.REIDITE_DOOR_SPIKE] = [], this.units[ITEMS.FURNACE] = [], this.units[ITEMS.TOTEM] = [], this.units[ITEMS.WOOD_TOWER] = [], this.units[ITEMS.CHEST] = [], this.units[ITEMS.RESURRECTION] = [], this.units[ITEMS.EMERALD_MACHINE] = [], this.units[ITEMS.BRIDGE] = [], this.units[ITEMS.ROOF] = [], this.units[ITEMS.PLOT] = [], this.units[ITEMS.WHEAT_SEED] = [], this.units[ITEMS.ALOE_VERA_SEED] = [], this.units[ITEMS.PUMPKIN_SEED] = [], this.units[ITEMS.TOMATO_SEED] = [], this.units[ITEMS.CARROT_SEED] = [], this.units[ITEMS.WATERMELON_SEED] = [], this.units[ITEMS.GARLIC_SEED] = [], this.units[ITEMS.THORNBUSH_SEED] = [], this.units[ITEMS.WINDMILL] = [], this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [], this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [], this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [], this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [], this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [], this.units[ITEMS.WELL] = [], this.units[ITEMS.GIFT] = [], this.units[ITEMS.GARLAND] = [], this.fast_units = [], this.nw = 260, this.nh = 260, this.dw = 100, this.dh = 100, this.w = this.nw * this.dw, this.h = this.nh * this.dh, this.RNG = new RNG.Random, this.biomes = [], this.shade = new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1), this.transition = !1, this.BIOME = [], this.BIOME_FOREST = 0, this.BIOME_WINTER = 1, this.BIOME_LAVA = 2, this.BIOME_DRAGON = 3, this.BIOME_SEA = 4, this.BIOME_DESERT = 10, this.BIOME[this.BIOME_FOREST] = {
        isSand: 1,
        day: [19, 58, 43],
        night: [4, 43, 48],
        _color: ["#133a2b", "#042b30"]
    }, this.BIOME[this.BIOME_SEA] = {
        isSand: 0,
        day: [11, 106, 132],
        night: [9, 55, 63],
        _color: ["#0B6A84", "#09373F"]
    }, this.BIOME[this.BIOME_WINTER] = {
        isSand: 0,
        day: [235, 242, 240],
        night: [19, 97, 103],
        _color: ["#EBF2F0", "#136167"]
    }, this.BIOME[this.BIOME_LAVA] = {
        isSand: 0,
        day: [45, 32, 23],
        night: [3, 28, 30],
        _color: ["#2D2017", "#031C1E"]
    }, this.BIOME[this.BIOME_DRAGON] = {
        isSand: 0,
        day: [74, 74, 74],
        night: [24, 61, 60],
        _color: ["#4A4A4A", "#183D3C"]
    }, this.BIOME[this.BIOME_DESERT] = {
        isSand: 0,
        day: [235, 216, 166],
        night: [9, 61, 56],
        _color: ["#EBD8A6", "#093D38"]
    }, this.Biome = function(e, t, i, r, a, n) {
        this.x1 = 100 * t, this.y1 = 100 * i, this.w = 100 * r, this.h = 100 * a, this.x2 = 100 * (t + r), this.y2 = 100 * (i + a), this.t = e, this.v = void 0 === n ? 15 : n
    }, this.MAX_DIST = -1e6, this.dist_winter = this.MAX_DIST, this.dist_desert = this.MAX_DIST, this.dist_lava = this.MAX_DIST, this.dist_forest = this.MAX_DIST, this.dist_water = this.MAX_DIST, this.dist_dragon = this.MAX_DIST, this.dist_from_biomes = function(e) {
        var t = e.r.x,
            i = e.r.y,
            r = Math.floor(i / 100),
            a = Math.floor(t / 100);
        e.dist_winter = world.MAX_DIST, e.dist_desert = world.MAX_DIST, e.dist_lava = world.MAX_DIST, e.dist_forest = world.MAX_DIST, e.dist_dragon = world.MAX_DIST, e.dist_sand = world.MAX_DIST;
        for (var n = 0; world.biomes[n].t !== world.BIOME_SEA; n++)
            if (world.biomes[n].t === world.BIOME_FOREST) {
                var o = world.dist_from_biome(n, t, i);
                e.dist_forest = Math.max(e.dist_forest, o), o > 0 && 1 === world.dist_from_sand(n, t, i) && (e.dist_sand = 1)
            } else world.biomes[n].t === world.BIOME_WINTER ? e.dist_winter = Math.max(e.dist_winter, world.dist_from_biome(n, t, i)) : world.biomes[n].t === world.BIOME_DESERT ? e.dist_desert = Math.max(e.dist_desert, world.dist_from_biome(n, t, i)) : world.biomes[n].t === world.BIOME_LAVA ? e.dist_lava = Math.max(e.dist_lava, world.dist_from_biome(n, t, i)) : world.biomes[n].t === world.BIOME_DRAGON && (e.dist_dragon = Math.max(e.dist_dragon, world.dist_from_biome(n, t, i)));
        MAP.tiles[r][a].iblk && (e.dist_sand = 1), world.find_bridge(a, r) ? e.dist_water = e.MAX_DIST : MAP.tiles[r][a].wtb || e.dist_winter < 0 && e.dist_lava < 0 && e.dist_forest < 0 && e.dist_sand < 0 && e.dist_dragon < 0 && e.dist_desert < 0 ? e.dist_water = 1 : e.dist_water = e.MAX_DIST
    }, this.update_dist_from_biomes = function(e, t) {
        world.dist_winter = world.MAX_DIST, world.dist_desert = world.MAX_DIST, world.dist_lava = world.MAX_DIST, world.dist_dragon = world.MAX_DIST, world.dist_forest = world.MAX_DIST;
        for (var i = 0; world.biomes[i].t !== world.BIOME_SEA; i++) world.biomes[i].t === world.BIOME_FOREST ? world.dist_forest = Math.max(world.dist_forest, world.dist_from_biome(i, e, t)) : world.biomes[i].t === world.BIOME_WINTER ? world.dist_winter = Math.max(world.dist_winter, world.dist_from_biome(i, e, t)) : world.biomes[i].t === world.BIOME_DESERT ? world.dist_desert = Math.max(world.dist_desert, world.dist_from_biome(i, e, t)) : world.biomes[i].t === world.BIOME_LAVA ? world.dist_lava = Math.max(world.dist_lava, world.dist_from_biome(i, e, t)) : world.biomes[i].t === world.BIOME_DRAGON && (world.dist_dragon = Math.max(world.dist_dragon, world.dist_from_biome(i, e, t)));
        world.dist_winter < 0 && world.dist_dragon < 0 && world.dist_forest < 0 && world.dist_dragon < 0 && world.dist_desert < 0 ? world.dist_water = 1 : world.dist_water = world.MAX_DIST
    }, this.dist_from_sand = function(e, t, i) {
        var r = world.biomes[e],
            a = 0;
        x1 = r.x1 + 30 + (0 == (r.v & WORLD.LEFT) ? 150 : 0);
        var n = t - x1;
        return (r.v & WORLD.LEFT) > 0 && n > 0 && n < 320 && (a = 1), y1 = r.y1 + 250 + (0 == (r.v & WORLD.TOP) ? 150 : 0), n = i - y1, (r.v & WORLD.TOP) > 0 && n > 0 && n < 320 && (a = 1), x2 = r.x2 + 80 + (0 == (r.v & WORLD.RIGHT) ? -200 : 0), n = x2 - t, (r.v & WORLD.RIGHT) > 0 && n > 0 && n < 320 && (a = 1), y2 = r.y2 - 200 + (0 == (r.v & WORLD.BOTTOM) ? -200 : 0), n = y2 - i, (r.v & WORLD.BOTTOM) > 0 && n > 0 && n < 320 && (a = 1), t >= x1 && t <= x2 && i >= y1 && i <= y2 ? a : 0
    }, this.dist_from_biome = function(e, t, i) {
        var r = world.biomes[e];
        if (x1 = r.x1 + 30, y1 = r.y1 + 250, x2 = r.x2 + 80, y2 = r.y2 - 200, t >= x1 && t <= x2 && i >= y1 && i <= y2) return Math.min(t - x1, x2 - t, i - y1, y2 - i);
        var a = -1e6;
        return t - x1 < 0 ? a = Math.max(a, t - x1) : x2 - t < 0 && (a = Math.max(a, x2 - t)), distY = -1e6, (i < y1 || i > y2) && (i - y1 < 0 ? distY = Math.max(distY, i - y1) : distY = Math.max(distY, y2 - i), a = -1e6 !== a && -1e6 !== distY ? Math.min(a, distY) : distY), a
    }, this.add_island = function(e, t, i) {
        var r = i,
            a = t;
        A(r, a, "isl", e, 1);
        for (var n = 0; n < 4; n++)
            for (var o = 0; o < 3; o++) A(r - o, a - n, "iblk", 0), A(r + o, a - n, "iblk", 0), A(r + o, a + n, "iblk", 0), A(r - o, a + n, "iblk", 0);
        if (0 === e) {
            for (n = 0; n < 2; n++) A(r - n, a - 4, "iblk", 0), A(r + n, a - 4, "iblk", 0), A(r - n, a + 4, "iblk", 0), A(r + n, a + 4, "iblk", 0);
            for (n = 0; n < 3; n++) A(r - 3, a + n, "iblk", 0), A(r + 3, a + n, "iblk", 0), A(r - 3, a - n, "iblk", 0), A(r + 3, a - n, "iblk", 0);
            A(r - 2, a - 4, "iblk", 0), A(r - 3, a - 3, "iblk", 0), A(r + 2, a + 4, "iblk", 0), A(r + 3, a + 3, "iblk", 0)
        } else if (1 === e) {
            for (n = 0; n < 3; n++) A(r - n, a - 4, "iblk", 0), A(r + n, a - 4, "iblk", 0), A(r - n, a + 4, "iblk", 0), A(r + n, a + 4, "iblk", 0);
            for (n = 0; n < 4; n++) A(r - 3, a + n, "iblk", 0), A(r + 3, a + n, "iblk", 0), A(r - 3, a - n, "iblk", 0), A(r + 3, a - n, "iblk", 0)
        } else if (2 === e) {
            for (n = 0; n < 2; n++) A(r - n, a - 4, "iblk", 0), A(r + n, a - 4, "iblk", 0), A(r - n, a + 4, "iblk", 0), A(r + n, a + 4, "iblk", 0);
            for (n = 0; n < 3; n++) A(r - 3, a + n, "iblk", 0), A(r + 3, a + n, "iblk", 0), A(r - 3, a - n, "iblk", 0), A(r + 3, a - n, "iblk", 0)
        }
    }, this.add_islands = function(e) {
        for (var t = 0; t < world.biomes.length && e > 0; t++) {
            var i = world.biomes[t];
            if (i.t === world.BIOME_SEA && (i.w > 1800 && i.h > 1e3)) {
                var r = Math.floor((i.x1 + i.w / 2) / 100),
                    a = Math.floor((i.y1 + i.h / 2) / 100);
                world.add_island(e % 3, r, a);
                for (var n = 0; n < 3; n++) {
                    var o = a - 2 + Math.floor(4 * world.RNG.get()),
                        s = r - 3 + Math.floor(6 * world.RNG.get());
                    void 0 === MAP.tiles[o][s].s && A(o, s, "plm", n);
                    o = a - 2 + Math.floor(4 * world.RNG.get()), s = r - 3 + Math.floor(6 * world.RNG.get());
                    void 0 === MAP.tiles[o][s].plm && A(o, s, "s", n)
                }
                o = a - 2 + Math.floor(4 * world.RNG.get()), s = r - 3 + Math.floor(6 * world.RNG.get());
                void 0 === MAP.tiles[o][s].plm && void 0 === MAP.tiles[o][s].s && A(o, s, "p", 0, 1), e--
            }
        }
    }, this.generate_world = function(e) {
        world.RNG.init(e);
        for (var t = 0;;) {
            if (++t > 1e4) return;
            if (world.biomes = [], 0 !== world.custom_map || world.mode !== WORLD.MODE_VAMPIRES && world.mode !== WORLD.MODE_EXPERIMENTAL && world.mode !== WORLD.MODE_PVP || (world.custom_map = ___MAP___), world.mode === WORLD.MODE_ZOMBIES) world.biomes.push(new world.Biome(world.BIOME_FOREST, 2, 2, 80, 80, 15));
            else if (world.mode === WORLD.MODE_LEGACY) world.biomes.push(new world.Biome(world.BIOME_FOREST, 2, 2, 150, 150, 15));
            else if (0 !== world.custom_map && world.custom_map.length > 0 && world.custom_map[0].length > 3)
                for (var a = 0; a < world.custom_map.length; a++) {
                    if (0 !== (g = world.custom_map[a])[0]) break;
                    var n = WORLD.BIOME_FOREST;
                    switch (g[1]) {
                        case "FOREST":
                            n = world.BIOME_FOREST;
                            break;
                        case "WINTER":
                            n = world.BIOME_WINTER;
                            break;
                        case "DESERT":
                            n = world.BIOME_DESERT;
                            break;
                        case "LAVA":
                            n = world.BIOME_LAVA;
                            break;
                        case "DRAGON":
                            n = world.BIOME_DRAGON
                    }
                    world.biomes.push(new world.Biome(n, g[2], g[3], g[4], g[5], g[6], g[7]))
                } else if (0 !== world.custom_map) {
                    for (a = 0; a < world.custom_map.length; a++) {
                        var l = world.custom_map[a];
                        n = WORLD.BIOME_FOREST;
                        switch (l[0]) {
                            case "FOREST":
                                n = world.BIOME_FOREST;
                                break;
                            case "WINTER":
                                n = world.BIOME_WINTER;
                                break;
                            case "DESERT":
                                n = world.BIOME_DESERT;
                                break;
                            case "LAVA":
                                n = world.BIOME_LAVA;
                                break;
                            case "DRAGON":
                                n = world.BIOME_DRAGON
                        }
                        if (0 === r(n, l[1], l[2], 0, 10 * (a + 1))) break
                    }
                    if (a !== world.custom_map.length) continue
                } break
        }
        render_minimap();
        for (var d = [], c = 0; c < world.nh; c++) {
            d[c] = new Array(world.nw);
            for (var R = 0; R < world.nw; R++) d[c][R] = 0
        }
        for (c = 0; c < world.biomes.length; c++)
            for (var h = (l = world.biomes[c]).x2 / 100, S = l.y2 / 100, N = l.x1 / 100; N <= h; N++)
                for (var O = l.y1 / 100; O <= S; O++) d[O] && (d[O][N] = 1);
        for (O = 0; O < world.nh; O++)
            for (N = 0; N < world.nw; N++) 0 === d[O][N] && i(d, N, O);
        MAP = {
            w: world.nw,
            h: world.nh,
            tiles: []
        };
        for (c = 0; c < world.nh; c++) MAP.tiles[c] = [];
        if (0 !== world.custom_map && world.custom_map.length > 0 && world.custom_map[0].length > 3)
            for (a = 0; a < world.custom_map.length; a++) {
                "isl" === (g = world.custom_map[a])[1] && world.add_island(g[2], g[3], g[4])
            } else world.add_islands(world.islands);
        if (0 !== world.custom_map && world.custom_map.length > 0 && world.custom_map[0].length > 3) {
            var C = [];
            for (a = 0; a < world.custom_map.length; a++) {
                var g;
                1 === (g = world.custom_map[a])[0] && ("r" === g[1] ? (A(g[3], g[2], "wtb", 0, 1), C.push([g[3], g[2], g[4]])) : A(g[4], g[3], g[1], g[2], g[5]))
            }
            o(0, C), C = []
        } else
            for (c = 0; c < world.biomes.length; c++) {
                l = world.biomes[c];
                world.mode === WORLD.MODE_LEGACY ? l.t === world.BIOME_FOREST && I(c, l.w / 1e4) : (l.t === world.BIOME_FOREST && u(c, l.w / 1e4), l.t === world.BIOME_LAVA && E(c, l.w / 1e4), l.t === world.BIOME_WINTER && _(c, l.w / 1e4), l.t === world.BIOME_DESERT && T(c, l.w / 1e4), l.t === world.BIOME_DRAGON && s(c))
            }
        render_all_resources_minimap(), world.map_wrapper(MAP)
    }, this.render_single_resource = A, this.map_wrapper = function(e) {
        for (var t = 0; t < this.nh; t++)
            for (var i = 0; i < this.nw; i++)
                if (e.tiles[t] || (e.tiles[t] = []), e.tiles[t][i]) {
                    var r = e.tiles[t][i];
                    if (r.de && r.de.length > 0)
                        for (var a = 0; a < r.de.length; a++)
                            if (r.de[a] && r.de[a].length > 0)
                                if (r.de = r.de[a][0], a >= 41 && a <= 49) {
                                    r.de.scale = 3;
                                    var n = Math.floor(3 * Math.random() + 1);
                                    r.de.p = [];
                                    for (var o = 0; o < n; o++) r.de.p.push({
                                        x: 120 * Math.random() - 60,
                                        y: 120 * Math.random() - 60,
                                        angle: Math.random() * Math.PI * 2,
                                        _id: 41 + Math.floor(9 * Math.random())
                                    })
                                } else if (a >= 19 && a <= 26) {
                        r.de.scale = 3;
                        n = Math.floor(3 * Math.random() + 1);
                        r.de.p = [];
                        for (o = 0; o < n; o++) r.de.p.push({
                            x: 120 * Math.random() - 60,
                            y: 120 * Math.random() - 60,
                            angle: Math.random() * Math.PI * 2,
                            _id: 19 + Math.floor(8 * Math.random())
                        })
                    } else a <= 15 || a >= 27 && a <= 40 ? (r.de.angle = 0, r.de.scale = 2, r.de._id = a) : (r.de.angle = Math.random() * Math.PI * 2, r.de.scale = 1, r.de._id = a);
                    S(r, "p", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "t", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "s", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "g", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "d", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "b", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "f", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "sw", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "gw", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "dw", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "a", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "cs", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "plm", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "re", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "c", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10)), S(r, "m", new Utils.LinearAnimation(!1, 1, 1, 0, 10, 10))
                } else e.tiles[t][i] = []
    }, this.time = SPRITE.DAY, this.clock = {
        translate: {
            x: 0,
            y: 0
        },
        init: 0,
        hour: 0,
        now: 0
    }, this.delete_all_units = function() {
        this.fast_units = [], this.units[ITEMS.PLAYERS] = [], this.units[ITEMS.WORKBENCH] = [], this.units[ITEMS.FIRE] = [], this.units[ITEMS.BIG_FIRE] = [], this.units[ITEMS.SEED] = [], this.units[ITEMS.SPIKE] = [], this.units[ITEMS.STONE_SPIKE] = [], this.units[ITEMS.GOLD_SPIKE] = [], this.units[ITEMS.DIAMOND_SPIKE] = [], this.units[ITEMS.AMETHYST_SPIKE] = [], this.units[ITEMS.REIDITE_SPIKE] = [], this.units[ITEMS.BRIDGE] = [], this.units[ITEMS.WOOD_TOWER] = [], this.units[ITEMS.ROOF] = [], this.units[ITEMS.PLOT] = [], this.units[ITEMS.WHEAT_SEED] = [], this.units[ITEMS.ALOE_VERA_SEED] = [], this.units[ITEMS.PUMPKIN_SEED] = [], this.units[ITEMS.TOMATO_SEED] = [], this.units[ITEMS.CARROT_SEED] = [], this.units[ITEMS.WATERMELON_SEED] = [], this.units[ITEMS.GARLIC_SEED] = [], this.units[ITEMS.THORNBUSH_SEED] = [], this.units[ITEMS.WINDMILL] = [], this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [], this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [], this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [], this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [], this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [], this.units[ITEMS.WELL] = [], this.units[ITEMS.WALL] = [], this.units[ITEMS.STONE_WALL] = [], this.units[ITEMS.GOLD_WALL] = [], this.units[ITEMS.DIAMOND_WALL] = [], this.units[ITEMS.AMETHYST_WALL] = [], this.units[ITEMS.REIDITE_WALL] = [], this.units[ITEMS.BED] = [], this.units[ITEMS.WOOD_DOOR] = [], this.units[ITEMS.STONE_DOOR] = [], this.units[ITEMS.GOLD_DOOR] = [], this.units[ITEMS.DIAMOND_DOOR] = [], this.units[ITEMS.AMETHYST_DOOR] = [], this.units[ITEMS.REIDITE_DOOR] = [], this.units[ITEMS.WOOD_DOOR_SPIKE] = [], this.units[ITEMS.STONE_DOOR_SPIKE] = [], this.units[ITEMS.GOLD_DOOR_SPIKE] = [], this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [], this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [], this.units[ITEMS.REIDITE_DOOR_SPIKE] = [], this.units[ITEMS.FURNACE] = [], this.units[ITEMS.TOTEM] = [], this.units[ITEMS.WOOD_TOWER] = [], this.units[ITEMS.CHEST] = [], this.units[ITEMS.RESURRECTION] = [], this.units[ITEMS.EMERALD_MACHINE] = [], this.units[ITEMS.FRUIT] = [], this.units[ITEMS.RABBIT] = [], this.units[ITEMS.WOLF] = [], this.units[ITEMS.CRAB] = [], this.units[ITEMS.BOAR] = [], this.units[ITEMS.BABY_MAMMOTH] = [], this.units[ITEMS.CRAB_BOSS] = [], this.units[ITEMS.BABY_DRAGON] = [], this.units[ITEMS.BABY_LAVA] = [], this.units[ITEMS.HAWK] = [], this.units[ITEMS.PIRANHA] = [], this.units[ITEMS.KRAKEN] = [], this.units[ITEMS.FOX] = [], this.units[ITEMS.PENGUIN] = [], this.units[ITEMS.SPELL] = [], this.units[ITEMS.FIREFLY] = [], this.units[ITEMS.BEAR] = [], this.units[ITEMS.MAMMOTH] = [], this.units[ITEMS.VULTURE] = [], this.units[ITEMS.SAND_WORM] = [], this.units[ITEMS.DRAGON] = [], this.units[ITEMS.LAVA_DRAGON] = [], this.units[ITEMS.FLAME] = [], this.units[ITEMS.WHEAT_MOB] = [], this.units[ITEMS.ALOE_VERA_MOB] = [], this.units[ITEMS.PUMPKIN_MOB] = [], this.units[ITEMS.GARLIC_MOB] = [], this.units[ITEMS.THORNBUSH_MOB] = [], this.units[ITEMS.TREASURE_CHEST] = [], this.units[ITEMS.DEAD_BOX] = [], this.units[ITEMS.CRATE] = [], this.units[ITEMS.BREAD_OVEN] = [], this.units[ITEMS.SIGN] = [], this.units[ITEMS.SPIDER] = [], this.units[ITEMS.GIFT] = [], this.units[ITEMS.GARLAND] = []
    }, this.delete_units = function(e) {
        if (this.fast_units[e]) {
            type = this.fast_units[e].type, this.fast_units[e] = null;
            for (var t = this.units[type], i = 0; i < t.length; i++)
                if (t[i].uid == e) return void t.splice(i, 1)
        }
    }, this.find_tower = function(e, t) {
        for (var i = 0; i < this.units[ITEMS.WOOD_TOWER].length; i++) {
            var r = this.units[ITEMS.WOOD_TOWER][i];
            if (Math.floor(r.x / 100) === t && Math.floor(r.y / 100) === e) return 1
        }
        return 0
    }, this.find_bridge = function(e, t) {
        for (var i = 0; i < this.units[ITEMS.BRIDGE].length; i++) {
            var r = this.units[ITEMS.BRIDGE][i];
            if (Math.floor(r.x / 100) == e && Math.floor(r.y / 100) == t) return !0
        }
        return !1
    }, this.move_units = function(e) {
        for (var t = 0; t < e.length; t++) {
            if (b = e[t], b.angle != b.nangle) {
                var i = 2 * Math.PI;
                if (b.angle = (b.angle + i) % i, b.nangle = (b.nangle + i) % i, b.angle != b.nangle) {
                    var r = b.nangle - b.angle,
                        a = Math.abs(r);
                    a > Math.PI && (a = 2 * Math.PI - a);
                    var n = a / Math.PI * 3 * WORLD.ROTATE * delta;
                    r > Math.PI ? b.angle -= n : r < -Math.PI ? b.angle += n : r < 0 ? b.angle -= n : b.angle += n, b.angle = (b.angle + i) % i, Math.abs(b.angle - b.nangle) < n && (b.angle = b.nangle)
                }
            }
            Math.floor(b.r.y / 100), Math.floor(b.r.x / 100);
            if (b.x != b.r.x || b.y != b.r.y) {
                b.action & STATE.IDLE && (b.action -= STATE.IDLE), b.action |= STATE.WALK;
                var o = Utils.get_std_angle(b, b.r) + Math.PI,
                    s = delta * b.speed,
                    _ = Utils.build_vector(s, o);
                Utils.norm(_) < Utils.norm(Utils.get_vector(b, b.r)) ? Utils.add_vector(b, _) : (b.action & STATE.WALK && (b.action -= STATE.WALK), b.action |= STATE.IDLE, Utils.copy_vector(b.r, b))
            }
            if (b.ghost) {
                var T = b.bubbles;
                (0 === (u = T.length) || u < SPRITE.GHOST_BUBBLES && T[u - 1].life < .95) && T.push({
                    id: Math.floor(Math.random() * sprite[SPRITE.BUBBLES][0].length),
                    x: Math.floor(b.x + 80 * Math.random() - 40),
                    y: Math.floor(b.y + 80 * Math.random() - 40),
                    life: 1
                });
                for (var E = 0; E < u; E++) T[E].life = Math.max(0, T[E].life - delta);
                for (E = 0; E < u; E++)
                    if (0 === T[E].life) {
                        T.splice(E, 1);
                        break
                    }
            }
            var I = 0;
            if (b.move_effect && ui.quality) {
                var l = b.swim,
                    u = l.length;
                if (b.dist_water > 0 && b.vehicle !== INV.BABY_DRAGON && b.vehicle !== INV.BABY_LAVA && b.vehicle !== INV.PLANE && b.vehicle !== INV.HAWK && b.vehicle !== INV.NIMBUS && !b.ghost && (I = 1, 0 === u || Utils.dist(l[u - 1], b) > SPRITE.SWIM_SPACE)) {
                    var d = -b.angle,
                        c = 45 * Math.sin(d) * scale,
                        R = 45 * Math.cos(d) * scale;
                    l.push({
                        x: b.x + c,
                        y: b.y + R,
                        r: 8,
                        alpha: .8
                    }), l.push({
                        x: b.x - c,
                        y: b.y - R,
                        r: 8,
                        alpha: .8
                    }), l.push({
                        x: b.x,
                        y: b.y,
                        r: 24,
                        alpha: 1
                    })
                }
                for (E = 0; E < u; E++) l[E].alpha = Math.max(0, l[E].alpha - delta / 2.2), l[E].r += 20 * delta;
                l.length > 0 && 0 === l[0].alpha && l.splice(0, 1);
                var h = b.foot,
                    A = (u = h.length, -1),
                    S = Math.max(0, Math.sign(b.dist_sand)),
                    N = Math.max(0, Math.sign(b.dist_winter)),
                    O = (Math.max(0, Math.sign(b.dist_desert)), Math.max(0, Math.sign(b.dist_lava))),
                    C = Math.max(0, Math.sign(b.dist_dragon));
                if (b.dist_sand > 0 || b.dist_desert > 0) A = SPRITE.SAND_STEP;
                else if (b.dist_dragon > 0) A = SPRITE.CAVE_STEP;
                else if (b.dist_winter > 0) A = SPRITE.SNOW_STEP;
                else if (b.dist_lava > 0) A = SPRITE.LAVA_STEP;
                if (b.vehicle === INV.MOUNT_BOAR && 1 == (S | N | O | C)) {
                    A = SPRITE.BOAR_STEP;
                    var g = b.vehicle_fx2 - Math.PI / 2,
                        p = 15,
                        D = 11,
                        m = SPRITE.STEP_SPACE
                } else if (b.vehicle === INV.BABY_MAMMOTH && 1 == (S | N | O | C)) {
                    A = SPRITE.BABY_MAMMOTH_STEP;
                    g = b.vehicle_fx2 - Math.PI / 2, p = 21, D = 16, m = SPRITE.STEP_SPACE
                } else if (b.vehicle === INV.CRAB_BOSS && 1 == (S | N | O | C)) {
                    A = SPRITE.CRAB_STEP;
                    g = b.vehicle_fx2 - Math.PI / 2;
                    var v = 50 * Math.random();
                    p = 10 + v, D = 0 + v, m = .9 * SPRITE.STEP_SPACE
                } else g = b.angle, p = 15, D = 11, m = SPRITE.STEP_SPACE;
                if (b.vehicle === INV.BABY_DRAGON || b.vehicle === INV.BABY_LAVA || b.vehicle === INV.NIMBUS || b.vehicle === INV.HAWK || b.vehicle === INV.PLANE || b.ghost);
                else if (b.vehicle === INV.SLED)(0 === u || Utils.dist(h[u - 1], b) > SPRITE.TRAIL_SPACE) && h.push({
                    x: b.x,
                    y: b.y,
                    angle: b.vehicle_fx2,
                    alpha: 1,
                    id: SPRITE.SLED_WAVE
                });
                else if (-1 != A && 0 === I && (0 === u || Utils.dist(h[u - 1], b) > m)) {
                    if (b.id_foot++, Math.abs(b.x - b.r.x) > 1 && Math.abs(b.y - b.r.y) > 1)
                        if (b.r.x > b.x && b.r.y < b.y || b.r.x < b.x && b.r.y > b.y)
                            if (b.id_foot % 2) c = -D * scale, R = -D * scale;
                            else R = D * scale, c = D * scale;
                    else if (b.id_foot % 2) c = D * scale, R = -D * scale;
                    else R = D * scale, c = -D * scale;
                    else if (b.id_foot % 2) c = Math.sin(g) * p * scale, R = Math.cos(g) * p * scale;
                    else c = -Math.sin(g) * p * scale, R = -Math.cos(g) * p * scale;
                    h.push({
                        x: b.x + c,
                        y: b.y + R,
                        angle: g + Math.PI / 2,
                        alpha: 1,
                        id: A
                    })
                }
                for (E = 0; E < u; E++) h[E].id === SPRITE.SLED_WAVE ? h[E].alpha = Math.max(0, h[E].alpha - 1.5 * delta) : h[E].alpha = Math.max(0, h[E].alpha - delta / 2.85);
                h.length > 0 && 0 === h[0].alpha && h.splice(0, 1)
            }
        }
    }, this.update = function() {
        this.move_units(this.units[ITEMS.PLAYERS]), this.move_units(this.units[ITEMS.RABBIT]), this.move_units(this.units[ITEMS.WOLF]), this.move_units(this.units[ITEMS.CRAB]), this.move_units(this.units[ITEMS.BOAR]), this.move_units(this.units[ITEMS.BABY_MAMMOTH]), this.move_units(this.units[ITEMS.CRAB_BOSS]), this.move_units(this.units[ITEMS.BABY_DRAGON]), this.move_units(this.units[ITEMS.BABY_LAVA]), this.move_units(this.units[ITEMS.HAWK]), this.move_units(this.units[ITEMS.SPIDER]), this.move_units(this.units[ITEMS.FOX]), this.move_units(this.units[ITEMS.PENGUIN]), this.move_units(this.units[ITEMS.SPELL]), this.move_units(this.units[ITEMS.FIREFLY]), this.move_units(this.units[ITEMS.BEAR]), this.move_units(this.units[ITEMS.MAMMOTH]), this.move_units(this.units[ITEMS.VULTURE]), this.move_units(this.units[ITEMS.SAND_WORM]), this.move_units(this.units[ITEMS.DRAGON]), this.move_units(this.units[ITEMS.FLAME]), this.move_units(this.units[ITEMS.PIRANHA]), this.move_units(this.units[ITEMS.KRAKEN]), this.move_units(this.units[ITEMS.LAVA_DRAGON])
    }, this.breath = [], this.breath[SPRITE.LAKE] = new Utils.LinearAnimation(!1, 1, 1.05, 1, .008, .008), this.breath[SPRITE.LAKE_DEEP] = new Utils.LinearAnimation(!1, 1, 1.08, 1, .006, .006), this.breath[SPRITE.WAVE_ONE] = new Utils.LinearAnimation(!1, 1, 1.02, 1, .008, .008), this.breath[SPRITE.WAVE_TWO] = new Utils.LinearAnimation(!1, 1, 1.08, 1, .006, .006), this.lava = [], this.lava[0] = new Utils.LinearAnimation(!1, .1, 1, 0, .6, .6), this.lava[1] = new Utils.LinearAnimation(!1, .4, 1, 0, .6, .6), this.lava[2] = new Utils.LinearAnimation(!1, .3, 1, 0, .6, .6), this.lava[3] = new Utils.LinearAnimation(!1, .8, 1, 0, .6, .6), this.lava[4] = new Utils.LinearAnimation(!1, .3, 1, 0, .6, .6), this.lava[5] = new Utils.LinearAnimation(!1, .8, 1, 0, .6, .6), this.lava[6] = new Utils.LinearAnimation(!1, .5, 1, 0, .6, .6), this.lava[7] = new Utils.LinearAnimation(!1, .9, 1, 0, .6, .6), this.lava[8] = new Utils.LinearAnimation(!1, .6, 1, 0, .6, .6), this.lava[9] = new Utils.LinearAnimation(!1, .2, 1, 0, .6, .6), this.lava[10] = new Utils.LinearAnimation(!1, .6, 1, 0, .6, .6), this.lava[11] = new Utils.LinearAnimation(!1, .4, 1, 0, .6, .6), this.lava[12] = new Utils.LinearAnimation(!1, .8, 1, 0, .6, .6), this.lava[13] = new Utils.LinearAnimation(!1, .2, 1, 0, .6, .6), this.lava[14] = new Utils.LinearAnimation(!1, .7, 1, 0, .6, .6)
}

function Flakes(e, t, i, r) {
    this.id = e, this.speed = 8 * (e + 5), this.life = canw / 1366, this.x = t, this.y = i, this.c = Math.cos(r), this.s = Math.sin(r), this.alpha = 0
}

function User() {
    this.init = function() {}, this.resurrection = {
        pid: 1,
        iid: 1,
        open: !1
    }, this.well = {
        pid: 1,
        iid: -1,
        open: !1
    }, this.windmill = {
        amount_wheat: 0,
        amount_flour: 0,
        pid: 1,
        iid: -1,
        open: !1
    }, this.extractor = {
        amount_wood: 0,
        amount_mineral: 0,
        type: 0,
        mineral: 0,
        pid: 1,
        iid: -1,
        open: !1
    }, this.bread_oven = {
        amount_wood: 0,
        amount_bread: 0,
        amount_flour: 0,
        pid: 1,
        iid: -1,
        open: !1
    }, this.sign = {
        iid: -1,
        open: !1
    }, this.furnace = {
        amount: 0,
        pid: 1,
        iid: -1,
        open: !1
    }, this.ghost = {
        enabled: !1,
        delay: -1,
        label: !1,
        now: -1,
        draw: draw_alert_ghost
    }, this.chest = {
        id: -1,
        amount: 0,
        pid: 1,
        iid: -1,
        open: !1,
        lock: !1,
        locked: !1,
        lockpick: !1,
        padlock: !1
    }, this.alive = !0, this.reconnect = {
        enabled: !1,
        rotate: 0
    }, this.key = Utils.gup("key", window.location.href);
    var e = Utils.gup("egg", window.location.href);
    e && (ui.skin = parseInt(e)), this.beta = 0 === window.location.href.indexOf("http://starve.io/beta") ? 1 : 0, this.key && this.beta ? Cookies.set("starve_beta", this.key) : this.beta && (this.key = Cookies.get("starve_beta")), this.token = Cookies.get("starve_token") ? Cookies.get("starve_token") : Utils.generate_token(CLIENT.TOKEN_LEN), window.baguette();
    var t = window.kot2;

    function i() {
        this.seed = 1, this.seed2 = 2, this.seed3 = 3, this.seedv = 1, this.seedv2 = 2, this.seedv3 = 3, this.new_seed = function(e) {
            this.seed = 2 + Math.floor(Math.random() * WORLD.SEED)
        }, this.new_seed2 = function(e) {
            this.seed2 = 2 + Math.floor(Math.random() * WORLD.SEED)
        }, this.new_seed3 = function(e) {
            this.seed3 = 2 + Math.floor(Math.random() * WORLD.SEED)
        }, this.new_seedv = function(e) {
            this.seedv = 2 + Math.floor(Math.random() * WORLD.SEED)
        }, this.new_seedv2 = function(e) {
            this.seedv2 = 2 + Math.floor(Math.random() * WORLD.SEED)
        }, this.new_seedv3 = function(e) {
            this.seedv3 = 2 + Math.floor(Math.random() * WORLD.SEED)
        }, this.draw_foam_vert = function(e, t, i, r, a, n, o) {
            for (var s = 1; s < o;) {
                var _ = s * i % RAND_SIZE,
                    T = RANDOM[_];
                if (T < .1) E += 50, s += 50;
                else {
                    var E = Math.floor(T * r + a);
                    if (s > n && s < o) {
                        var I = Math.random() > .5 ? -10 * delta : 10 * delta,
                            l = E * t;
                        if (this.bxv[_] = Math.max(-WORLD.FLOAM_X, Math.min(WORLD.FLOAM_X, this.bxv[_] + I)), this.byv[_] = Math.max(-WORLD.FLOAM_Y, Math.min(WORLD.FLOAM_Y, this.byv[_] + I)), l > 0) {
                            if (ctx.beginPath(), ctx.arc(s + user.cam.x + this.byv[_], e + this.bxv[_] - .8 * WORLD.FLOAM_X, l, 0, 2 * Math.PI), world.transition) {
                                var u = world.time ? 1 - world.shade.v : world.shade.v;
                                ctx.fillStyle = get_color_transition(83, 156, 160, 236, 247, 249, u)
                            } else ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
                            ctx.fill()
                        }
                    }
                    s += 2 * E
                }
            }
        }, this.draw_foam = function(e, t, i, r, a, n, o) {
            for (var s = 1; s < o;) {
                var _ = s * i % RAND_SIZE,
                    T = RANDOM[_];
                if (T < .1) E += 50, s += 50;
                else {
                    var E = Math.floor(T * r + a);
                    if (s > n && s < o) {
                        var I = Math.random() > .5 ? -10 * delta : 10 * delta,
                            l = E * t;
                        if (this.bx[_] = Math.max(-WORLD.FLOAM_X, Math.min(WORLD.FLOAM_X, this.bx[_] + I)), this.by[_] = Math.max(-WORLD.FLOAM_Y, Math.min(WORLD.FLOAM_Y, this.by[_] + I)), l > 0) {
                            if (ctx.beginPath(), ctx.arc(e + this.bx[_] - .8 * WORLD.FLOAM_X, s + user.cam.y + this.by[_], l, 0, 2 * Math.PI), world.transition) {
                                var u = world.time ? 1 - world.shade.v : world.shade.v;
                                ctx.fillStyle = get_color_transition(83, 156, 160, 236, 247, 249, u)
                            } else ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
                            ctx.fill()
                        }
                    }
                    s += 2 * E
                }
            }
        }, this.draw_foams_bottom = function(e, t, i, r, a, n) {
            var o;
            (a -= 30, n += 30, 0 === (o = -(i - WORLD.LW1SX - r - 2) / WORLD.W1EX) && this.new_seed3(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam_vert(i, o, this.seed3, 18, 16, a, n), ctx.globalAlpha = 1, 0 === (o = -(e - WORLD.LW2SX - r + 500) / WORLD.W2EX) && this.new_seed(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam_vert(e, o, this.seed, 12, 10, a, n), ctx.globalAlpha = 1, -1 !== t) && ((o = -(t - WORLD.LW3SX - r + 698) / WORLD.W3EX) <= .01 && this.new_seed2(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam_vert(t, o, this.seed2, 6, 6, a, n), ctx.globalAlpha = 1)
        }, this.draw_foams_top = function(e, t, i, r, a, n) {
            var o;
            (a -= 30, n += 30, 0 === (o = -(-i + WORLD.LW1SX + r + 2) / WORLD.W1EX) && this.new_seed3(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam_vert(i, o, this.seed3, 18, 16, a, n), ctx.globalAlpha = 1, 0 === (o = -(-e + WORLD.LW2SX + r) / WORLD.W2EX) && this.new_seed(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam_vert(e, o, this.seed, 12, 10, a, n), ctx.globalAlpha = 1, -1 !== t) && ((o = -(-t + WORLD.LW3SX + r) / WORLD.W3EX) <= .01 && this.new_seed2(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam_vert(t, o, this.seed2, 6, 6, a, n), ctx.globalAlpha = 1)
        }, this.draw_foams_left = function(e, t, i, r, a, n) {
            var o;
            (a -= 30, n += 30, 0 === (o = -(-i + WORLD.LW1SX + r + 2) / WORLD.W1EX) && this.new_seed3(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam(i, o, this.seed3, 18, 16, a, n), ctx.globalAlpha = 1, 0 === (o = -(-e + WORLD.LW2SX + r) / WORLD.W2EX) && this.new_seed(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam(e, o, this.seed, 12, 10, a, n), ctx.globalAlpha = 1, -1 !== t) && ((o = -(-t + WORLD.LW3SX + r) / WORLD.W3EX) <= .01 && this.new_seed2(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam(t, o, this.seed2, 6, 6, a, n), ctx.globalAlpha = 1)
        }, this.draw_foams_right = function(e, t, i, r, a, n) {
            var o;
            (a -= 30, n += 30, 0 === (o = -(i - WORLD.LW1SX - r - 2) / WORLD.W1EX) && this.new_seed3(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam(i, o, this.seed3, 18, 16, a, n), ctx.globalAlpha = 1, 0 === (o = -(e - WORLD.LW2SX - r + 500) / WORLD.W2EX) && this.new_seed(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam(e, o, this.seed, 12, 10, a, n), ctx.globalAlpha = 1, -1 !== t) && ((o = -(t - WORLD.LW3SX - r + 698) / WORLD.W3EX) <= .01 && this.new_seed2(), ctx.globalAlpha = Utils.ease_in_out_quad(o), this.draw_foam(t, o, this.seed2, 6, 6, a, n), ctx.globalAlpha = 1)
        }, this.w1 = {
            r: new Utils.Ease(Utils.ease_out_cubic, 0, 10, WORLD.W1SX, WORLD.W1SX, WORLD.W1EX),
            l: new Utils.Ease(Utils.ease_in_out_cubic, 0, 10, WORLD.W1EX, WORLD.W1EX, WORLD.W1SX)
        }, this.w2 = {
            r: new Utils.Ease(Utils.ease_out_quart, 0, 10, WORLD.W2SX, WORLD.W2SX, WORLD.W2EX),
            l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, WORLD.W2EX, WORLD.W2EX, WORLD.W2SX)
        }, this.w3 = {
            r: new Utils.Ease(Utils.ease_out_quint, 0, 10, WORLD.W3SX, WORLD.W3SX, WORLD.W3EX),
            l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, WORLD.W3EX, WORLD.W3EX, WORLD.W3SX)
        }, this.t_ = function(e) {
            return e.r.x === e.r.ex ? e.l.x === e.l.ex ? e.r : e.l : e.r
        }, this.t = function(e) {
            var t;
            return e.r.x === e.r.ex ? e.l.x === e.l.ex ? (e.r.restart(), e.l.restart(), t = e.r) : t = e.l : t = e.r, t.ease(t.ex), t
        }, this.bx = [], this.by = [], this.bxv = [], this.byv = [], this.init = function() {
            for (var e = 0; e < RAND_SIZE; e++) this.bx[e] = Math.floor(RANDOM[e] * WORLD.FLOAM_X), this.by[e] = Math.floor(RANDOM[e] * WORLD.FLOAM_Y), this.bxv[e] = Math.floor(RANDOM[e] * WORLD.FLOAM_X), this.byv[e] = Math.floor(RANDOM[e] * WORLD.FLOAM_Y);
            this.w1.r.x = this.w1.r.ex, this.w2.r.ed = 3.5, this.w3.r.ed = 2
        }, this.init()
    }
    this.token = t.substring(0, 6) + this.token.substring(6), this.token_id = Cookies.get("starve_token_id") ? Cookies.get("starve_token_id") : "", this.id = 0, this.uid = 0, this.day = 0, this.die = {
        howdie: "",
        score: 0,
        bank: 0,
        kill: 0
    }, this.account = {
        connected: 0,
        last: (new Date).getTime()
    }, this.team = [], this.in_team = function(e) {
        for (var t = 0; t < this.team.length; t++)
            if (this.team[t] == e) return !0;
        return !1
    }, this.shop = {
        delay: 0,
        time: 0,
        value: 0,
        open: !1,
        draw: function() {
            if (this.open) {
                var e = (new Date).getTime();
                this.time = Math.floor((e - this.delay) / 1e3), this.time < 60 ? game.shop.button.draw(ctx) : (document.getElementById("shop_starterkit").style.display = "none", this.open = !1)
            }
        }
    }, this.totem = {
        id: -1,
        pid: -1,
        lock: 0,
        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, 1 / 30, 1),
        wait: !1
    }, this.helmet = {
        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, .2, 1),
        wait: !1
    }, this.build = {
        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1),
        wait: !1
    }, this.weapon = {
        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, .1, 1),
        wait: !1
    }, this.cam = new Utils.Ease2d(Utils.ease_out_quad, 0, .4, 0, 0, canw2, canh2, canw2, canh2), this.cam.delay = 0, this.cam.forcedDelay = 0, this.cam.update = function() {
        if (this.forcedDelay > 0) this.forcedDelay -= delta;
        else {
            var e = world.fast_units[user.uid];
            if (e && !Spectator) {
                this.delay = 0;
                var t = Math.max(Math.min(canw2 - e.x, -2), 2 - world.w + canw),
                    i = Math.max(Math.min(canh2 - e.y, -2), 2 - world.h + canh);
                this.ease({
                    x: t,
                    y: i
                })
            } else this.delay += delta, this.delay > 3 && (this.delay = 0, user.reconnect.enabled || client.get_focus())
        }
    }, this.cam.w = screen.width, this.cam.h = screen.height, this.cam.rw = this.cam.w, this.cam.rh = this.cam.h, this.cam.rx = 0, this.cam.ry = 0, this.cam.rdw = 0, this.cam.rdh = 0, this.cam.change = function(e, t) {
        this.x = -Math.min(Math.max(2 * -world.dw, e - world.dw - this.rw / 2), world.w - this.rw), this.y = -Math.min(Math.max(2 * -world.dh, t - (world.dh + this.rh) / 2), world.h - this.rh + world.dh), this.ex = this.x, this.ey = this.y
    }, this.control = {
        angle: 0,
        timeout: 0,
        previous: 0,
        mouse: 0,
        attack: 0,
        update: function() {
            var e = world.fast_units[user.uid];
            if (e) var t = {
                x: user.cam.x + e.x,
                y: user.cam.y + e.y
            };
            else t = canm;
            var i = Utils.get_std_angle(mouse.pos, t),
                r = !1;
            if (this.mouse += delta, mouse.state || e && !(e.action & STATE.ATTACK) && this.mouse > CLIENT.ATTACK && (this.attack = 1, r = !0, this.mouse = 0, client.send_attack(i)), e && (e.angle = i, e.nangle = i), r || (this.timeout += delta, this.timeout > CLIENT.ROTATE && (this.timeout = 0, Math.abs(this.angle - i) > .005 && (client.send_angle(i), this.angle = i))), !user.chat.open && !user.terminal.open) {
                var a = 0;
                keyboard.is_left() && (a |= 1), keyboard.is_right() && (a |= 2), keyboard.is_bottom() && (a |= 4), keyboard.is_top() && (a |= 8), this.previous != a && client.send_move(a), this.previous = a
            }
        }
    }, this.gauges = {
        c: 1,
        l: 1,
        realhp: 200,
        h: 1,
        t: 1,
        o: 1,
        wa: 1,
        warn_cold: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
        warn_life: new Utils.LinearAnimation(!0, 0, 1, 0, 2, 2),
        warn_hunger: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
        warn_thirst: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
        warn_oxygen: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
        warn_warm: new Utils.LinearAnimation(!0, 0, 1, 0, 3, 3),
        cold: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        life: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        hunger: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        thirst: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        oxygen: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        warm: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
        update: function() {
            this.warn_cold.update(), this.warn_life.update(), this.warn_hunger.update(), this.warn_thirst.update(), this.warn_oxygen.update(), this.warn_warm.update(), this.cold.ease(this.c), this.life.ease(this.l), this.hunger.ease(this.h), this.thirst.ease(this.t), this.oxygen.ease(this.o), this.warm.ease(this.wa)
        }
    }, this.bigmap = !1, this.spectator = !1, this.zombie = !1, this.vampire = !1, this.inv = {
        max: WORLD.WITHOUT_BAG,
        bonus: 0,
        bag: 0,
        n: [],
        can_select: [],
        update_bag_size: function(e, t) {
            1 === e && (this.bag = WORLD.BAG_SIZE), this.bonus += t, this.max = WORLD.WITHOUT_BAG + this.bonus + this.bag
        },
        drag: {
            item: -1,
            img: null,
            _start: 0,
            _move: 0,
            _x: -1,
            _y: -1,
            move: function(e) {
                !this._start || e.x === this._x && e.y === this._y || (this._move = 1)
            },
            start: function(e, t) {
                this._x = t.x, this._y = t.y, this.item = e, this.img = user.inv.can_select[e].info.img[2], this._start = 1
            },
            stop: function() {
                this._start = 0, this._move = 0, this._x = -1, this._y = -1
            },
            release: function() {
                var e = -1,
                    t = user.inv.can_select,
                    i = 0;
                if (this._start && this._move) {
                    for (var r = 0; r < t.length; r++)
                        if (t[r].info.state === BUTTON_IN) {
                            e = r;
                            break
                        } if (-1 !== e && e !== this.item && t[this.item]) {
                        i = 1;
                        var a = t[e];
                        t[e] = t[this.item], t[this.item] = a, game.update_inv_buttons()
                    }
                }
                return this.stop(), i
            },
            draw: function(e, t) {
                this._start && this._move && ctxDrawImage(ctx, this.img, Math.floor(e - this.img.width / 2), Math.floor(t - this.img.height / 2))
            }
        },
        free_place: function(e) {
            for (r = 0; r < e.length; r++)
                if (this.n[e[r][0]] == e[r][1]) return !0;
            return !1
        },
        find_item: function(e) {
            for (var t = 0; t < this.can_select.length; t++)
                if (this.can_select[t].id == e) return t;
            return -1
        },
        delete_item: function(e, t) {
            this.n[e] = 0, this.can_select.splice(t, 1), game.update_inv_buttons()
        },
        decrease: function(e, t, i) {
            update = !0, this.n[e] = Math.max(0, this.n[e] - t), !this.n[e] && i >= 0 && this.delete_item(e, i)
        }
    }, this.show_spectators = {
        enabled: !1,
        translate: {
            x: 0,
            y: 0
        },
        invert: function() {
            world.mode != WORLD.MODE_HUNGER_GAMES || user.spectator || (user.show_spectators.enabled = !user.show_spectators.enabled, user.show_spectators.enabled ? game.options.spectator_agree.display = "inline-block" : game.options.spectator_agree.display = "none")
        }
    }, game.options.spectator_agree.display = "none", this.auto_feed = {
        enabled: !1,
        translate: {
            x: 0,
            y: 0
        },
        delay: 0,
        invert: function() {
            user.auto_feed.enabled = !user.auto_feed.enabled, user.auto_feed.enabled ? game.options.feed_agree.display = "inline-block" : game.options.feed_agree.display = "none"
        },
        update: function() {
            !this.enabled || user.craft.id >= 0 || game.safe_delete.open || (this.delay += delta, this.delay > 2 && (this.delay = 0, user.gauges.h < .35 ? user.inv.n[INV.PLANT] ? client.select_inv(INV.PLANT, user.inv.find_item(INV.PLANT)) : user.inv.n[INV.GARLIC] ? client.select_inv(INV.GARLIC, user.inv.find_item(INV.GARLIC)) : user.inv.n[INV.CRAB_STICK] ? client.select_inv(INV.CRAB_STICK, user.inv.find_item(INV.CRAB_STICK)) : user.inv.n[INV.PUMPKIN] ? client.select_inv(INV.PUMPKIN, user.inv.find_item(INV.PUMPKIN)) : user.inv.n[INV.TOMATO] ? client.select_inv(INV.TOMATO, user.inv.find_item(INV.TOMATO)) : user.inv.n[INV.CARROT] ? client.select_inv(INV.CARROT, user.inv.find_item(INV.CARROT)) : user.inv.n[INV.WATERMELON] ? client.select_inv(INV.WATERMELON, user.inv.find_item(INV.WATERMELON)) : user.inv.n[INV.BREAD] ? client.select_inv(INV.BREAD, user.inv.find_item(INV.BREAD)) : user.inv.n[INV.COOKED_MEAT] ? client.select_inv(INV.COOKED_MEAT, user.inv.find_item(INV.COOKED_MEAT)) : user.inv.n[INV.FOODFISH_COOKED] ? client.select_inv(INV.FOODFISH_COOKED, user.inv.find_item(INV.FOODFISH_COOKED)) : user.inv.n[INV.COOKIE] ? client.select_inv(INV.COOKIE, user.inv.find_item(INV.COOKIE)) : user.inv.n[INV.SANDWICH] ? client.select_inv(INV.SANDWICH, user.inv.find_item(INV.SANDWICH)) : user.inv.n[INV.CAKE] ? client.select_inv(INV.CAKE, user.inv.find_item(INV.CAKE)) : user.inv.n[INV.CRAB_LOOT] && client.select_inv(INV.CRAB_LOOT, user.inv.find_item(INV.CRAB_LOOT)) : user.gauges.t < .35 && user.inv.n[INV.BOTTLE_FULL] && client.select_inv(INV.BOTTLE_FULL, user.inv.find_item(INV.BOTTLE_FULL))))
        }
    }, game.options.feed_agree.display = "none", this.craft = {
        id: -1,
        id2: -1,
        timeout: new Utils.LinearAnimation(!1, 0, 1, 0, 1, 1),
        crafting: !1,
        preview: -1,
        mode: 0,
        label: [],
        can_craft: [],
        workbench: !1,
        fire: !1,
        water: !1,
        well: !1,
        change_mode: function() {
            this.mode = 0 === this.mode ? 1 : 0
        },
        set_workbench: function(e) {
            this.workbench = e;
            var t = game.safe_delete;
            t.open && t.del(t.button), this.update()
        },
        do_recycle: function(e) {
            var t = RECIPES[e];
            this.id = e, this.crafting = !0;
            world.fast_units[user.uid];
            this.timeout.max_speed = 8 * t.time, this.id2 = t.id2
        },
        do_craft: function(e) {
            var t = RECIPES[e];
            this.id = e, this.crafting = !0;
            var i = world.fast_units[user.uid];
            i && i.right == INV.BOOK ? this.timeout.max_speed = 3 * t.time : this.timeout.max_speed = t.time, this.id2 = t.id2;
            for (var r = 0; r < t.r.length; r++) {
                var a = t.r[r];
                user.inv.decrease(a[0], a[1], user.inv.find_item(a[0]))
            }
            game.update_inv_buttons()
        },
        update: function() {
            for (var e in this.can_craft = [], 1 === game.info_box.craft && (game.info_box.display = 0), RECIPES) {
                var t = RECIPES[e],
                    i = !0;
                if (t.r) {
                    for (var r = 0; r < t.r.length; r++) {
                        if (user.inv.max >= WORLD.WITH_BAG && t.id === CRAFT.BAG) {
                            i = !1;
                            break
                        }
                        if (t.w > this.workbench || t.f > this.fire || t.o > this.water || t.e > this.well) {
                            i = !1;
                            break
                        }
                        var a = t.r[r];
                        if (!user.inv.n[a[0]] || user.inv.n[a[0]] < a[1]) {
                            i = !1;
                            break
                        }
                    }
                    i && this.can_craft.push(game.craft_buttons[t.id])
                }
            }
            game.update_craft_buttons(), game.update_chest_buttons(), game.update_furnace_button(), game.update_windmill_button(), game.update_extractor_button(), game.update_bread_oven_button(), game.sign.update_button()
        },
        restart: function() {
            this.id = -1, this.crafting = !1, this.timeout.v = 0, this.timeout.o = !1, this.update()
        }
    }, this.welcome = {
        message: void 0,
        draw: draw_welcome_message
    }, this.alert = {
        timeout: new Utils.LinearAnimation(!1, 1, 1, 0, 4, .3),
        text: "",
        label: null,
        draw: draw_alert,
        list: []
    }, this.ldb = {
        can: document.createElement("canvas"),
        ids: [],
        update: !0,
        translate: {
            x: 0,
            y: 0
        },
        sort: function() {
            for (var e = [], t = world.players, i = 0; i < t.length; i++) t[i].alive && e.push({
                id: i,
                s: t[i].score
            });
            e.sort((function(e, t) {
                return t.s - e.s
            })), this.ids = [];
            for (i = 0; i < e.length && i < 10; i++) this.ids.push(e[i].id);
            this.update = !0
        },
        init: function(e) {
            for (var t = world.players, i = 0; i < t.length; i++) t[i].score = 0;
            t[user.id].score = Utils.restore_number(e[1]), this.ids = [];
            for (i = 2; i < e.length; i += 2) this.ids.push(e[i]), t[e[i]].score = Utils.restore_number(e[i + 1]);
            this.update = !0
        }
    }, this.ldb.can.width = 180 * scale, this.ldb.can.height = 300 * scale, this.ldb.ctx = this.ldb.can.getContext("2d"), this.terminal = {
        open: !1,
        input: document.getElementById("commandInput"),
        contentBox: document.getElementById("commandsBox"),
        style: document.getElementById("commandMainBox").style,
        _print: function(e) {
            this.contentBox.innerHTML += e
        },
        update: function() {
            this.style.left = Math.floor(canw / 2 - 300) + "px", this.style.top = Math.floor(canh / 2 - 250) + "px"
        },
        _clean: function() {
            this.contentBox.innerHTML = ""
        },
        quit: function() {
            this.open = !1, this.style.display = "none"
        },
        create_array: function(e) {
            for (var t = '<table class="tableList">', i = 0; i < e.length; i++) i % 3 == 0 && (t += "<tr>"), t += '<td class="tableList">' + e[i] + "</td>", (i + 1) % 3 != 0 && i + 1 !== e.length || (t += "</tr>");
            return t += "</table>"
        },
        write_command: function(e, t, i, r) {
            var a = "<div class=commandWritten>" + (e = e || "");
            a += (t = t || "") ? "<div class=commandValidated>" : "<div class=commandUnknown>", a += (i = i || "") + "</div>" + (r = r || "") + "</div>", this._print(a), this.scroll_down()
        },
        scroll_down: function() {
            this.contentBox.scrollTop = this.contentBox.scrollHeight
        },
        commands: function(e) {
            switch (e) {
                case "clean":
                    return this._clean(), !0;
                case "list":
                    for (var t = "", i = world.players, r = 0; r < i.length; r++) {
                        var a = i[r];
                        a.alive && (t += a.nickname + ' <span style="color:green">#' + r + "</span><br />")
                    }
                    return this.write_command("list", 1, "List all connected players", t), !0;
                case "weapon-list":
                    return this.write_command("Weapons", 1, "List all weapons in the game", this.create_array(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"])), !0;
                case "tool-list":
                    return this.write_command("Tools", 1, "List all tools in the game", this.create_array(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"])), !0;
                case "survival-list":
                    return this.write_command("Survival Items", 1, "List all survival items in the game", this.create_array(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"])), !0;
                case "resource-list":
                    return this.write_command("Resources", 1, "List all resources in the game", this.create_array(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"])), !0;
                case "food-list":
                    return this.write_command("Food", 1, "List all food in the game", this.create_array(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"])), !0;
                case "hat-list":
                    return this.write_command("Hats", 1, "List all hats in the game", this.create_array(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"])), !0;
                case "building-list":
                    return this.write_command("Buildings", 1, "List all buildings in the game", this.create_array(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"])), !0;
                case "biome-list":
                    return this.write_command("Biomes list", 1, "List all available biomes in the game", this.create_array(["forest", "winter", "lava", "sea", "beach", "island", "dragon"])), !0;
                case "help-config":
                    return this.write_command("Help Configuration", 1, "Learn how to build your customized map", '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.'), !0;
                case "pos":
                    for (i = world.units[ITEMS.PLAYERS], r = 0; r < i.length; r++) {
                        var n = i[r];
                        if (n.pid === user.id) return this.write_command("pos", 1, "Your position is " + Math.floor(n.x / 100) + ":" + Math.floor(n.y / 100)), !0
                    }
                    break;
                case "help-admin":
                    return this.write_command("help-admin", 1, "List all available commands for admin only", this.create_array(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"])), !0;
                case "help":
                    return this.write_command("help", 1, "List all available commands", this.create_array(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"])), !0
            }
            return !1
        },
        _open: function() {
            this.open || (this.open = !0, this.style.display = "inline-block", this.input.focus())
        },
        _send: function() {
            var e = this.input.value;
            e && e.length > 0 && (this.commands(e) || client.send_command(this.input.value), this.input.value = "")
        }
    }, this.chat = {
        open: !1,
        input: document.getElementById("chat_input"),
        style: document.getElementById("chat_block").style,
        update: function() {
            this.style.left = Math.floor(canw / 2 - 150) + "px", this.style.top = Math.floor(canh / 2 + 80) + "px"
        },
        quit: function() {
            this.open = !1, this.style.display = "none", this.input.value = ""
        },
        prefix: "!",
        cmd: {
            hud: function(e) {
                if ("off" === e) {
                    var t = 'Enter "!hud" without the quotes to restore the HUD';
                    user.alert.text ? user.alert.list.push(t) : user.alert.text = t, game.show_ui = 0
                } else game.show_ui = 1
            }
        },
        commands: function(e) {
            if (e.charAt(0) == this.prefix) {
                for (var t = "", i = "", r = 1; r < e.length && " " != e.charAt(r); r++) t += e.charAt(r);
                for (r++; r < e.length; r++) i += e.charAt(r);
                var a = this.cmd[t];
                return a && a(i), !0
            }
            return !1
        },
        run: function() {
            if (this.open) {
                this.open = !1, this.style.display = "none";
                var e = this.input.value;
                e && (this.commands(e) || client.send_chat(this.input.value), this.input.value = "")
            } else this.open = !0, this.style.display = "inline-block", this.input.focus()
        }
    }, this.ash = {
        flakes: [],
        update: function(e) {
            e.y += 80 * delta * e.s, e.x += 80 * delta * e.c, e.life -= delta / 6, e.life > .2 ? e.alpha = Math.min(e.alpha + 3 * delta, 1) : e.alpha = Math.max(e.alpha - 1 * delta, 0)
        },
        add: function(e) {
            var t = Math.floor(Math.min(SPRITE.ASHES_NUMBER * (canw / 1366), SPRITE.ASHES_NUMBER + 10) * Math.max(Math.min(world.dist_lava + 1e3, 3e3) / 3e3, 0));
            if (this.flakes.length < t) {
                var i = Math.floor(Math.random() * SPRITE.ASHES_SIZES),
                    r = -user.cam.x + Math.floor(Math.random() * user.cam.w),
                    a = -user.cam.y + Math.floor(Math.random() * user.cam.h),
                    n = Math.random(Math.PI);
                this.flakes.push(new Flakes(i, r, a, n))
            }
        }
    }, this.blizzard = 0, this.bandage = 0, this.desert = {
        flakes: [],
        tempest: 0,
        tempest_speed: 0,
        update: function(e) {
            e.y += delta * (200 + 800 * this.tempest_speed) * e.s, e.x += delta * (200 + 800 * this.tempest_speed) * e.c, e.life -= delta / 6, e.life > .2 ? e.alpha = Math.min(e.alpha + 3 * delta, 1) : e.alpha = Math.max(e.alpha - 1 * delta, 0)
        },
        add: function(e) {
            var t = Math.floor(Math.min((this.tempest_speed + .1) * SPRITE.SAND_NUMBER * (canw / 1366), (this.tempest_speed + .1) * SPRITE.SAND_NUMBER + 10) * Math.max(Math.min(world.dist_desert + 1e3, 3e3) / 3e3, 0));
            if (this.flakes.length < t) {
                var i = Math.floor(Math.random() * SPRITE.ASHES_SIZES),
                    r = -user.cam.x + Math.floor(Math.random() * user.cam.w),
                    a = -user.cam.y + Math.floor(Math.random() * user.cam.h),
                    n = Math.random(Math.PI);
                0 !== user.desert.tempest && (r -= user.cam.w / 2), this.flakes.push(new Flakes(i, r, a, n))
            }
        }
    }, this.winter = {
        flakes: [],
        tempest: 0,
        tempest_speed: 0,
        update: function(e) {
            keyboard.is_bottom() ? e.y += delta * e.speed * (5.5 + 10 * this.tempest_speed) : e.y += delta * e.speed * (5 + 10 * this.tempest_speed), e.life -= delta / 2, keyboard.is_left() ? e.x += delta * (100 + 400 * this.tempest_speed) : keyboard.is_right() ? e.x -= delta * (130 - 400 * this.tempest_speed) : e.x -= delta * (30 - 400 * this.tempest_speed), e.life > .2 ? e.alpha = Math.min(e.alpha + 3 * delta, 1) : e.alpha = Math.max(e.alpha - 5 * delta, 0)
        },
        add: function(e) {
            var t = Math.floor(Math.min((1.5 * this.tempest_speed + .5) * SPRITE.FLAKES_NUMBER * (canw / 1366), (1.5 * this.tempest_speed + .5) * SPRITE.FLAKES_NUMBER + 10) * Math.max(Math.min(world.dist_winter + 1e3, 3e3) / 3e3, 0));
            if (this.flakes.length < t) {
                var i = Math.floor(Math.random() * SPRITE.FLAKES_SIZES),
                    r = -user.cam.x + Math.floor(Math.random() * user.cam.w),
                    a = -user.cam.y + Math.floor(400 * Math.random() * scale - 200 * scale);
                this.flakes.push(new Flakes(i, r, a, 0))
            }
        }
    }, this.beach = [];
    for (var r = 0; r < 4; r++) this.beach.push(new i)
}

function get__e() {
    Math.random();
    return "e"
}

function get__S() {
    Math.random();
    return "S"
}

function get__t() {
    Math.random();
    return "t"
}

function get__d() {
    Math.random();
    return "d"
}

function get__o() {
    Math.random();
    return "o"
}

function get__r() {
    Math.random();
    return "r"
}

function get__a() {
    Math.random();
    return "a"
}

function get__w() {
    Math.random();
    return "w"
}

function get__I() {
    Math.random();
    return "I"
}

function get__k() {
    Math.random();
    return "k"
}

function get__W() {
    Math.random();
    return "W"
}

function get__a() {
    Math.random();
    return "a"
}

function get__s() {
    Math.random();
    return "s"
}

function get__n() {
    Math.random();
    return "n"
}

function get__p() {
    Math.random();
    return "p"
}

function get__2() {
    Math.random();
    return "2"
}

function get__g() {
    Math.random();
    return "g"
}

function get__m() {
    Math.random();
    return "m"
}

function get__b() {
    Math.random();
    return "b"
}

function get__o() {
    Math.random();
    return "o"
}

function get__t() {
    Math.random();
    return "t"
}

function get__y() {
    Math.random();
    return "y"
}

function get__c() {
    Math.random();
    return "c"
}

function get__p() {
    Math.random();
    return "p"
}

function get__i() {
    Math.random();
    return "i"
}

function get__v() {
    Math.random();
    return "v"
}

function get__C() {
    Math.random();
    return "C"
}

function get__R() {
    Math.random();
    return "R"
}

function get__x() {
    Math.random();
    return "x"
}

function get__D() {
    Math.random();
    return "D"
}

function fixNative() {
    var e = get__n() + get__a() + get__t() + get__i(),
        t = get__W() + get__e() + get__b() + get__S() + get__o() + get__c() + get__k() + get__e() + get__t(); - 1 === window[t].toString().indexOf(e) && (Math.floor = function() {
        return Math.round() + 1
    });
    var i = get__s() + get__e() + get__n() + get__d(),
        r = get__p() + get__r() + get__o() + get__t() + get__o() + get__t() + get__y() + get__p() + get__e(); - 1 === window[t][r][i].toString().indexOf(e) && (Math.floor = function() {
        return Math.round() + 1
    });
    t = get__d() + get__r() + get__a() + get__w() + get__I() + get__m() + get__a() + get__g() + get__e(), i = get__C() + get__a() + get__n() + get__v() + get__a() + get__s() + get__R() + get__e() + get__n() + get__d() + get__e() + get__r() + get__i() + get__n() + get__g() + get__C() + get__o() + get__n() + get__t() + get__e() + get__x() + get__t() + get__2() + get__D(); - 1 === window[i][r][t].toString().indexOf(e) && (Math.floor = function() {
        return Math.round() + 1
    }), setTimeout(fixNative, 1e5)
}
mycyph1 = 1, setTimeout(fixNative, 1e5);
var SERVER_INFO_URL = "datas/info.json";
environment === environments.DEV && (SERVER_INFO_URL = "datas/info.local.json");
var LOADER = {
    SERVER_INFO_URL: SERVER_INFO_URL
};

function Loader(e, t, i) {
    this.can = e, this.ctx = t, this.logo = {
        translate: {
            x: 0,
            y: 0
        },
        style: document.getElementById("loading").style,
        update: function() {
            this.style.left = this.translate.x + "px", this.style.top = Math.floor(this.translate.y) + "px"
        }
    }, this.logo.style.position = "absolute", this.logo.style.display = "inline-block", this.logo.update(), this.is_run = !0, this.stop = function() {
        this.is_run = !1
    }, this.loading = {
        total: 1
    };
    var r = this,
        a = function() {},
        n = 0;
    this.quit_effect = function() {
        if (40 == ++n) return r.stop(), void a();
        window.setTimeout(r.quit_effect, 0)
    }, this.quit = function(e) {
        a = e, r.quit_effect()
    };
    (new Date).getTime();

    function o(e) {
        return -1 !== e.indexOf("normal-mode") || -1 !== e.indexOf("player0") ? 1 : -1 !== e.indexOf("day-bag") || -1 !== e.indexOf("night-bag") || -1 !== e.indexOf("day-book") || -1 !== e.indexOf("night-book") || -1 !== e.indexOf("day-player") || -1 !== e.indexOf("night-player") || -1 !== e.indexOf("day-accessory") || -1 !== e.indexOf("night-accessory") || -1 !== e.indexOf("day-crate") || -1 !== e.indexOf("night-crate") || -1 !== e.indexOf("day-skin") || -1 !== e.indexOf("night-skin") || -1 !== e.indexOf("day-river") || -1 !== e.indexOf("night-river") || -1 !== e.indexOf("day-river") || -1 !== e.indexOf("night-river") || -1 !== e.indexOf("day-rock") || -1 !== e.indexOf("night-rock") || -1 !== e.indexOf("day-flower") || -1 !== e.indexOf("night-flower") || -1 !== e.indexOf("day-leaf") || -1 !== e.indexOf("night-leaf") || -1 !== e.indexOf("day-herb") || -1 !== e.indexOf("night-herb") || -1 !== e.indexOf("day-shell") || -1 !== e.indexOf("night-shell") || -1 !== e.indexOf("day-hand-skin") || -1 !== e.indexOf("night-hand-skin") || -1 !== e.indexOf("bignight") || -1 !== e.indexOf("bigday") || -1 !== e.indexOf("bigzday") || -1 !== e.indexOf("bigznight") || -1 !== e.indexOf("tutorial-box") || -1 !== e.indexOf("tuto-") || -1 !== e.indexOf("-leaderboard-") || -1 !== e.indexOf("-lead-") || -1 !== e.indexOf("day-lava-") || -1 !== e.indexOf("night-lava-") || -1 !== e.indexOf("-click.png") || -1 !== e.indexOf("-in.png") || -1 !== e.indexOf("-fog") || -1 !== e.indexOf("-lava") || -1 !== e.indexOf("pebblecompo") || -1 !== e.indexOf("avatar-player") ? 0 : 1
    }
    Object.keys(IMAGES).length;
    for (var s in IMAGES) 0 === o(IMAGES[s]) && 0;
    var _ = function() {
            return 0 !== this.isLoaded ? this.isLoaded : (this.isLoaded = 2, this.src = this._src, 0)
        },
        T = function(e) {
            this.isLoaded = 1
        },
        E = 0,
        I = function() {
            let e = async () => {
                await client.fetch_server_list(),
                    function() {
                        if (1 !== E) {
                            E = 1, next_lang !== set_english && set_english(), next_lang();
                            var e = Utils.getURLData("server");
                            null !== e && (client.privateServer = 1, client.server_list = [{
                                nu: 0,
                                m: 100,
                                i: "server" + e + ".starve.io",
                                p: 443,
                                a: "Private Server " + e,
                                ssl: 1
                            }]), client.update_server_list(), setTimeout(i, 100)
                        }
                    }()
            };
            document.fonts && document.fonts.check ? document.fonts.check("1em Baloo Paaji") ? setTimeout(e, 100) : setTimeout(I, 100) : setTimeout(e, 1e3)
        },
        l = function() {
            var e = this.src,
                t = 0 === o(e) ? 1e4 : 2e3;
            setTimeout((function() {
                for (var t in DUMP_IMAGES)
                    if (-1 !== e.indexOf(DUMP_IMAGES[t])) {
                        IMAGES[t] = new Image, IMAGES[t].onload = T, IMAGES[t].onerror = l, IMAGES[t].src = e;
                        break
                    }
            }), t)
        };

    function u(e) {
        for (var t in IMAGES) {
            var i = IMAGES[t];
            "string" == typeof i && (o(i) === e && (IMAGES[t] = new Image, IMAGES[t].isLoaded = 0, IMAGES[t].onload = T, IMAGES[t].onerror = l, IMAGES[t].tryLoad = _, "https:" !== window.location.protocol ? IMAGES[t]._src = i : IMAGES[t]._src = "https://starve.io/" + i))
        }
    }
    u(1), u(0), create_text(1, "l", 20, "#000"), I(), _load_images(), this.update = function() {
        this.logo.translate.x = (canw - 500) / 2, this.logo.translate.y = (canh - 150) / 2;
        var e = 2500 / (40 - n + 1) - 48;
        this.logo.translate.y -= e, this.logo.update()
    }, this.logo.update(), this.draw = function() {
        try {
            draw_fake_world()
        } catch (e) {}
        this.update()
    }
}

function UI(e, t) {
    this.can = e, this.ctx = t, window.navigator.userAgent.indexOf("Edge") > -1 ? (this.cursor0 = "default", this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default", this.cursor1 = "url('img/cursor1.png'), pointer");
    var i = this;

    function r(e, t, r, a, n) {
        for (var o = this, s = t + 9, _ = 0, T = a, E = t; E < s; E++) i.buttons[E].info.callback = l, i.buttons[E].info.cosmeticType = e;

        function I() {
            var t = e[T];
            ui.cosmetic_name = gui_render_text(t.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, void 0, 10, 8), void 0 !== t.level ? ui.cosmetic_author = gui_render_text("Level " + t.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, void 0, 10, 8) : ui.cosmetic_author = gui_render_text("by " + t.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, void 0, 10, 8)
        }

        function l() {
            T !== this.cosmeticId && -1 !== this.cosmeticId && (this.unlocked > 0 ? t === FIRST_BUTTON_SKIN ? B(N, q, "none") : B(O, q, "none") : t === FIRST_BUTTON_SKIN ? B(N, Z, "inline-block") : B(O, Z, "inline-block"), T = this.cosmeticId, r(this.cosmeticId), I())
        }
        this.initSelector = function() {
            for (var r = t, a = 3 * _; r < s && a < e.length; r++, a++)
                if (e[a].rarity !== RARITY.SPECIAL || 0 !== n[a]) {
                    i.buttons[r].info.cosmeticId = a;
                    for (var o = 0; o < 3; o++) i.buttons[r].info.img[o] = RARITY_BUTTON[e[a].rarity][o], i.buttons[r].info.active = Z, i.buttons[r].info.unlocked = n[a]
                } else i.buttons[r].info.cosmeticId = -1, i.buttons[r].info.active = q;
            for (; r < s; r++) i.buttons[r].info.cosmeticId = -1, i.buttons[r].info.active = q;
            I()
        }, i.buttons[s].info.callback = function() {
            _ > 0 && _--, o.initSelector()
        }, i.buttons[s + 1].info.callback = function() {
            3 * _ + 9 < e.length && _++, o.initSelector()
        }
    }

    function a() {
        var e = Number(Cookies.get("starve_crate")),
            t = Number(Cookies.get("starve_dead")),
            r = Number(Cookies.get("starve_book")),
            a = Number(Cookies.get("starve_bag")),
            n = Number(Cookies.get("starve_skin")),
            o = Number(Cookies.get("starve_accessory"));
        i.skin = n || 0, i.book = r || 0, i.crate = e || 1, i.accessory = o || 0, i.bag = a || 0, i.dead = t || 0
    }

    function n() {
        for (var e = COSMETICS.SKIN, t = 0; t < e.length; t++) e[t].rarity === RARITY.FREE ? i.unlock.skin[t] = 1 : i.unlock.skin[t] = 0;
        for (e = COSMETICS.ACCESSORY, t = 0; t < e.length; t++) e[t].rarity === RARITY.FREE ? i.unlock.accessory[t] = 1 : i.unlock.accessory[t] = 0;
        for (e = COSMETICS.BAG, t = 0; t < e.length; t++) e[t].rarity === RARITY.FREE ? i.unlock.bag[t] = 1 : i.unlock.bag[t] = 0;
        for (e = COSMETICS.BOOK, t = 0; t < e.length; t++) e[t].rarity === RARITY.FREE ? i.unlock.book[t] = 1 : i.unlock.book[t] = 0;
        for (e = COSMETICS.CRATE, t = 0; t < e.length; t++) e[t].rarity === RARITY.FREE ? (i.unlock.crate[t] = 1, i.unlock.dead[t] = 1) : (i.unlock.crate[t] = 0, i.unlock.dead[t] = 0)
    }
    this.waiting = !1, this.in_this_view = 0, this.current_mode_score = -1, this.loading = {
        translate: {
            x: 0,
            y: 0
        },
        angle: 0,
        img: sprite[SPRITE.GEAR2],
        draw: function() {
            this.angle += 2 * delta, t.save(), t.translate(this.translate.x + this.img.width / 2, this.translate.y + this.img.height / 2), t.rotate(this.angle), ctxDrawImage(t, this.img, -this.img.width / 2, -this.img.height / 2), t.restore()
        }
    }, this.langselect = {
        id: document.getElementById("langselect"),
        style: document.getElementById("langselect").style,
        translate: {
            x: 0,
            y: 0
        },
        update: function() {
            this.style.left = Math.floor(this.translate.x) + "px", this.style.top = Math.floor(this.translate.y) + "px"
        }
    }, this.bread = 0, this.previous_bread = -1, this.bread_img = void 0, this.new_nickname = "", this.previous_new_nickname = "", this.new_nickname_img = void 0, this.lvl = 0, this.previous_lvl = -1, this.lvl_img = void 0, this.xp = 0, this.xp_dest = 0, this.firstName = 0, this.kill = 0, this.death = 0, this.time = 0, this.score = 0, this.scoreTotal = 0, this.bestKill = 0, this.bestTime = 0, this.bestScore = 0, this.seasons = [], this.kit = -1, this.previous_kit_hour = -1, this.previous_kit_min = -1, this.kit_img_min = void 0, this.kit_img_hour = void 0, this.privateServerTime = -1, this.previous_privateServerTime_day = -1, this.previous_privateServerTime_hour = -1, this.previous_privateServerTime_min = -1, this.privateServerTime_img_min = void 0, this.privateServerTime_img_hour = void 0, this.privateServerTime_img_day = void 0, this.cosmetic_name = void 0, this.cosmetic_author = void 0, this.leaderboard_range = void 0, this.leaderboard_mode = void 0, this.leaderboard_sorted = void 0, this.leaderboard_season = void 0, this.profile_season = 3, this.breath = 0, this.settings = !1, this.quality = Cookies.get("starve_quality") ? Cookies.get("starve_quality") : "high", "high" === this.quality ? (document.getElementById("high_ing").style.backgroundColor = "#B56D18", document.getElementById("low_ing").style.backgroundColor = "#3A2A0D", this.quality = 1) : (document.getElementById("low_ing").style.backgroundColor = "#B56D18", document.getElementById("high_ing").style.backgroundColor = "#3A2A0D", this.quality = 0), this.high_quality = function() {
        document.getElementById("high_ing").style.backgroundColor = "#B56D18", document.getElementById("low_ing").style.backgroundColor = "#3A2A0D", Cookies.set("starve_quality", "high", {
            expires: 30
        }), document.getElementById("input_ratio").value = 1, game.change_ratio(), ui.quality = 1
    }, this.low_quality = function() {
        document.getElementById("high_ing").style.backgroundColor = "#3A2A0D", document.getElementById("low_ing").style.backgroundColor = "#B56D18", Cookies.set("starve_quality", "low", {
            expires: 30
        }), document.getElementById("input_ratio").value = .5 / (devicePixelRatio / backingStoreRatio), game.change_ratio(), ui.quality = 0
    }, void 0 === Cookies.get("starve_mapping") && "FR" === lang ? (keyboard.set_azerty(), this.mapping = "azerty") : this.mapping = Cookies.get("starve_mapping") ? Cookies.get("starve_mapping") : "qwerty", "azerty" == this.mapping ? (keyboard.set_azerty(), document.getElementById("azerty_ing").style.backgroundColor = "#B56D18", document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D") : (document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18", document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D"), this.set_azerty = function() {
        keyboard.set_azerty(), document.getElementById("azerty_ing").style.backgroundColor = "#B56D18", document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D", Cookies.set("starve_mapping", "azerty", {
            expires: 30
        })
    }, this.set_qwerty = function() {
        keyboard.set_qwerty(), document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D", document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18", Cookies.set("starve_mapping", "qwerty", {
            expires: 30
        })
    }, this.all_rights_reserved = {
        id: document.getElementById("all_rights_reserved"),
        style: document.getElementById("all_rights_reserved").style,
        translate: {
            x: 0,
            y: 0
        },
        update: function() {
            this.style.left = this.translate.x + "px", this.style.top = Math.floor(this.translate.y) + "px"
        }
    }, a(), this.unlock = {}, this.unlock.skin = [], this.unlock.bag = [], this.unlock.book = [], this.unlock.crate = [], this.unlock.dead = [], this.unlock.accessory = [], this.day_mode = 0, this.unlock_cosmetics = n, n(), this.trevda = {
        id: document.getElementById("trevda"),
        style: document.getElementById("trevda").style,
        translate: {
            x: 0,
            y: 0
        },
        update: function() {
            this.style.left = this.translate.x + "px", this.style.top = Math.floor(this.translate.y) + "px"
        }
    };
    var o, s = 0,
        _ = function() {
            if (30 == ++s) return i.add_event_listener(), i.in_this_view = !0, void i.update();
            window.setTimeout(_, 0)
        };
    this.quit = function(e) {
        o = e, i.remove_event_listener(), i.in_this_view = 0, T = -1, E()
    };
    var T = -1,
        E = function() {
            if (30 == ++T) return Cookies.set("starve_nickname", i.nickname.input.value, {
                expires: 30
            }), i.nickname.style.display = "none", i.server_list.style.display = "none", i.langselect.style.display = "none", i.all_rights_reserved.style.display = "none", i.trevda.style.display = "none", i.stop(), void o();
            window.setTimeout(E, 0)
        };
    this.is_run = !1, this.stop = function() {
        this.is_run = !1
    }, this.run = function() {
        check_ads(), document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time], i.nickname.style.display = "inline-block", i.server_list.style.display = "inline-block", i.langselect.style.display = "inline-block", i.all_rights_reserved.style.display = "inline-block", i.trevda.style.display = "none", i.waiting = !1, i.is_run = !0, T = -1, s = 0, _()
    }, this.update_component = function(e, t) {
        t = t < 0 ? -t : t, (e.position & X) === X ? (e.position & K) === K ? e.translate.x = canw2 + e.translate._x - t : (e.position & x) === x ? e.translate.x = canw2 + e.translate._x + t : e.translate.x = canw2 + e.translate._x : (e.position & K) === K ? e.translate.x = e.translate._x - t : (e.position & x) === x ? e.translate.x = canw - e.translate._x + t : e.translate.x = e.translate._x, (e.position & j) === j ? (e.position & Y) === Y ? e.translate.y = canh2 + e.translate._y - t : (e.position & J) === J ? e.translate.y = canh2 + e.translate._y + t : e.translate.y = canh2 + e.translate._y : (e.position & Y) === Y ? e.translate.y = e.translate._y - t : (e.position & J) === J ? e.translate.y = canh + e.translate._y + t : e.translate.y = e.translate._y, void 0 !== e.style && (e.style.left = Math.floor(e.translate.x) + "px", e.style.top = Math.floor(e.translate.y) + "px")
    }, this.update = function() {
        var e = 0;
        if (30 != s || -1 != T) {
            if (30 != s) e = 1500 / (s + 1) - 50;
            if (-1 != T) e = -(1750 / (30 - T + 1) - 48)
        }
        for (var t = 0; t < this.bkgd.length; t++) this.update_component(this.bkgd[t], e);
        for (t = 0; t < this.buttons.length; t++) this.update_component(this.buttons[t].info, e);
        for (t = 0; t < this.css.length; t++) this.update_component(this.css[t], e);
        if (this.loading.translate.x = (canw - this.loading.img.width) / 2, this.loading.translate.y = 0, this.langselect.translate.x = canw - 450, this.langselect.translate.y = canh - 40, this.all_rights_reserved.translate.x = canw - 340, this.all_rights_reserved.translate.y = canh - 25, this.trevda.translate.x = canw - 320, this.trevda.translate.y = 80, 30 != s || -1 != T) {
            var i = 0;
            if (30 != s) i = 1500 / (s + 1) - 50;
            if (-1 != T) i = -(1750 / (30 - T + 1) - 48);
            this.loading.translate.y -= i > 0 ? i : -i, this.langselect.translate.y -= i < 0 ? i : -i, this.all_rights_reserved.translate.y -= i < 0 ? i : -i
        }
        this.langselect.update(), this.all_rights_reserved.update(), this.trevda.update()
    }, this.create_spin = function(e) {
        var t = document.createElement("canvas"),
            i = t.getContext("2d");
        t.width = 342, t.height = 342;
        for (var r = -Math.PI / 2, a = 0; a < e.length; a++) {
            var n = e[a][0],
                o = e[a][1] * Math.PI / 180;
            i.beginPath(), i.arc(171, 171, 170, r, r + o, !1), i.lineTo(171, 171), i.fillStyle = n, i.fill(), r += o
        }
        return t
    }, this.generate_new_nickname = function() {
        this.new_nickname = document.getElementById("account_nickname_input").value, this.new_nickname !== this.previous_new_nickname && (this.previous_new_nickname = this.new_nickname, this.new_nickname_img = gui_render_text(this.new_nickname, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550))
    }, this.draw = function() {
        draw_fake_world(), ui.xp = Utils.lerp(ui.xp, ui.xp_dest, .03), this.bkgd[LEVEL_GAUGE].translate.x = this.bkgd[0].translate.x + -72 + 165 * ui.xp, this.bkgd[LEVEL_GAUGE].translate._x = this.bkgd[LEVEL_GAUGE].translate.x, this.bkgd[LEVEL_GAUGE].translate.y = this.bkgd[0].translate.y + 30, this.bkgd[LEVEL_GAUGE].translate._y = this.bkgd[LEVEL_GAUGE].translate.y;
        for (var e = 2; e < this.bkgd.length; e++) this.bkgd[e].active === Z && this.bkgd[e].draw(t);
        var r;
        if ((r = this.kit - Date.now()) > 0) {
            var a = Math.floor(r / 6e4),
                n = Math.floor(a / 60);
            (a %= 60) !== this.previous_kit_min && (this.previous_kit_min = a, a = a < 10 ? "0" + a : "" + a, i.kit_img_min = gui_render_text(a, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), n !== this.previous_kit_hour && (this.previous_kit_hour = n, n = n < 10 ? "0" + n : "" + n, i.kit_img_hour = gui_render_text(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), (s = this.bkgd[BAG_REMAIN_BOX]).draw(t);
            var o = this.kit_img_hour;
            ctxDrawImage(t, o, s.translate.x - o.width / 4 + 182, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
            o = this.kit_img_min;
            ctxDrawImage(t, o, s.translate.x - o.width / 4 + 251, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2)
        }
        if ((r = this.privateServerTime - Date.now()) > 0) {
            a = Math.floor(r / 6e4), n = Math.floor(a / 60);
            var s, _ = Math.floor(n / 24);
            n %= 24, (a %= 60) !== this.previous_privateServerTime_min && (this.previous_privateServerTime_min = a, a = a < 10 ? "0" + a : "" + a, i.privateServerTime_img_min = gui_render_text(a, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), n !== this.previous_privateServerTime_hour && (this.previous_privateServerTime_hour = n, n = n < 10 ? "0" + n : "" + n, i.privateServerTime_img_hour = gui_render_text(n, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), _ !== this.previous_privateServerTime_day && (this.previous_privateServerTime_day = _, _ = _ < 10 ? "0" + _ : "" + _, i.privateServerTime_img_day = gui_render_text(_, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200)), (s = this.bkgd[SERVER_REMAIN_BOX]).draw(t);
            o = this.privateServerTime_img_day;
            ctxDrawImage(t, o, s.translate.x - o.width / 4 + 113, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
            o = this.privateServerTime_img_hour;
            ctxDrawImage(t, o, s.translate.x - o.width / 4 + 182, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2);
            o = this.privateServerTime_img_min;
            ctxDrawImage(t, o, s.translate.x - o.width / 4 + 251, s.translate.y - o.height / 4 + 40, o.width / 2, o.height / 2)
        }(this.current_view & l) === l ? this.buttons[GAME_BUTTON].info.state = BUTTON_CLICK : (this.current_view & A) === A ? this.buttons[LEADERBOARD_BUTTON].info.state = BUTTON_CLICK : (this.current_view & c) === c ? this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK : (this.current_view & u) === u ? this.buttons[PROFILE_BUTTON].info.state = BUTTON_CLICK : (this.current_view & h) === h ? this.buttons[TUTORIAL_BUTTON].info.state = BUTTON_CLICK : (this.current_view & d) === d ? this.buttons[LOGIN_BUTTON].info.state = BUTTON_CLICK : (this.current_view & R) === R || (this.current_view & C) === C || (this.current_view & g) === g || (this.current_view & p) === p || (this.current_view & b) === b || (this.current_view & D) === D || (this.current_view & m) === m ? this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK : (this.current_view & v) === v || (this.current_view & M) === M || (this.current_view & P) === P || (this.current_view & f) === f || (this.current_view & L) === L || (this.current_view & G) === G ? this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK : (this.current_view & y) === y || (this.current_view & w) === w || (this.current_view & z) === z ? this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK : (this.current_view & U) === U && (this.buttons[PROFILE_BUTTON].info.state = BUTTON_CLICK), (this.current_view & A) === A && (this.leaderboard_mode === this.LEADERBOARD_TOTAL ? (this.leaderboard_range = this.LEADERBOARD_ALL, this.buttons[this.LEADERBOARD_ALL].info.active = q, this.buttons[this.LEADERBOARD_WEEK].info.active = q, this.buttons[this.LEADERBOARD_TODAY].info.active = q) : (this.buttons[this.LEADERBOARD_ALL].info.active = Z, this.buttons[this.LEADERBOARD_WEEK].info.active = Z, this.buttons[this.LEADERBOARD_TODAY].info.active = Z), this.leaderboard_mode === this.LEADERBOARD_NORMAL ? this.buttons[this.LEADERBOARD_NORMAL].info.state = BUTTON_CLICK : this.leaderboard_mode === this.LEADERBOARD_VAMPIRE ? this.buttons[this.LEADERBOARD_VAMPIRE].info.state = BUTTON_CLICK : this.leaderboard_mode === this.LEADERBOARD_TOTAL ? this.buttons[this.LEADERBOARD_TOTAL].info.state = BUTTON_CLICK : this.leaderboard_mode === this.LEADERBOARD_ZOMBIE ? this.buttons[this.LEADERBOARD_ZOMBIE].info.state = BUTTON_CLICK : this.leaderboard_mode === this.LEADERBOARD_FOREST && (this.buttons[this.LEADERBOARD_FOREST].info.state = BUTTON_CLICK), this.leaderboard_range === this.LEADERBOARD_ALL ? this.buttons[this.LEADERBOARD_ALL].info.state = BUTTON_CLICK : this.leaderboard_range === this.LEADERBOARD_WEEK ? this.buttons[this.LEADERBOARD_WEEK].info.state = BUTTON_CLICK : this.leaderboard_range === this.LEADERBOARD_TODAY && (this.buttons[this.LEADERBOARD_TODAY].info.state = BUTTON_CLICK), this.leaderboard_sorted === this.LEADERBOARD_KILL ? this.buttons[this.LEADERBOARD_KILL].info.state = BUTTON_CLICK : this.leaderboard_sorted === this.LEADERBOARD_SCORE ? this.buttons[this.LEADERBOARD_SCORE].info.state = BUTTON_CLICK : this.leaderboard_sorted === this.LEADERBOARD_TIME && (this.buttons[this.LEADERBOARD_TIME].info.state = BUTTON_CLICK), this.leaderboard_season === this.LEADERBOARD_SEASON1 ? this.buttons[this.LEADERBOARD_SEASON1].info.state = BUTTON_CLICK : this.leaderboard_season === this.LEADERBOARD_SEASON2 ? this.buttons[this.LEADERBOARD_SEASON2].info.state = BUTTON_CLICK : this.leaderboard_season === this.LEADERBOARD_SEASON3 ? this.buttons[this.LEADERBOARD_SEASON3].info.state = BUTTON_CLICK : this.leaderboard_season === this.LEADERBOARD_SEASON4 ? this.buttons[this.LEADERBOARD_SEASON4].info.state = BUTTON_CLICK : this.leaderboard_season === this.LEADERBOARD_SEASON5 && (this.buttons[this.LEADERBOARD_SEASON5].info.state = BUTTON_CLICK)), (this.current_view & u) === u && (-1 === this.current_mode_score ? this.buttons[de].info.state = BUTTON_CLICK : this.current_mode_score === WORLD.MODE_PVP ? this.buttons[ce].info.state = BUTTON_CLICK : this.current_mode_score === WORLD.MODE_ZOMBIES ? this.buttons[he].info.state = BUTTON_CLICK : this.current_mode_score === WORLD.MODE_VAMPIRES ? this.buttons[Ae].info.state = BUTTON_CLICK : this.current_mode_score === WORLD.MODE_LEGACY && (this.buttons[Re].info.state = BUTTON_CLICK), 0 === this.profile_season ? this.buttons[Te].info.state = BUTTON_CLICK : 1 === this.profile_season ? this.buttons[Ee].info.state = BUTTON_CLICK : 2 === this.profile_season ? this.buttons[Ie].info.state = BUTTON_CLICK : 3 === this.profile_season ? this.buttons[le].info.state = BUTTON_CLICK : 4 === this.profile_season && (this.buttons[ue].info.state = BUTTON_CLICK)), (this.current_view & l) === l && 0 === client.privateServer && (this.buttons[ie].in_button(mouse.pos) ? this.buttons[ie].hint = Math.min(1, this.buttons[ie].hint + 1.5 * delta) : this.buttons[ie].hint = Math.max(0, this.buttons[ie].hint - 1.5 * delta), this.buttons[re].in_button(mouse.pos) ? this.buttons[re].hint = Math.min(1, this.buttons[re].hint + 1.5 * delta) : this.buttons[re].hint = Math.max(0, this.buttons[re].hint - 1.5 * delta), this.buttons[ae].in_button(mouse.pos) ? this.buttons[ae].hint = Math.min(1, this.buttons[ae].hint + 1.5 * delta) : this.buttons[ae].hint = Math.max(0, this.buttons[ae].hint - 1.5 * delta), this.buttons[se].in_button(mouse.pos) ? this.buttons[se].hint = Math.min(1, this.buttons[se].hint + 1.5 * delta) : this.buttons[se].hint = Math.max(0, this.buttons[se].hint - 1.5 * delta), this.buttons[ne].in_button(mouse.pos) ? this.buttons[ne].hint = Math.min(1, this.buttons[ne].hint + 1.5 * delta) : this.buttons[ne].hint = Math.max(0, this.buttons[ne].hint - 1.5 * delta), this.buttons[oe].in_button(mouse.pos) ? this.buttons[oe].hint = Math.min(1, this.buttons[oe].hint + 1.5 * delta) : this.buttons[oe].hint = Math.max(0, this.buttons[oe].hint - 1.5 * delta));
        var T = 1;
        if ((this.current_view & (C | g | p | b | D | m)) > 1) {
            o = IMAGES.ARROW_SPIN;
            t.save(), t.translate(canw2, ee + o.height / 4), 1 === this.spin && (this.spin_effect += delta / 3, T = this.spin_target - 100 / Math.pow(1 + this.spin_effect, 1 + this.spin_effect), t.rotate(T)), ctxDrawImage(t, o, -o.width / 4, -o.height / 4, o.width / 2, o.height / 2), t.restore()
        }
        0 === client.privateServer && (client.current_mode === WORLD.MODE_PVP ? this.buttons[ie].info.state = BUTTON_CLICK : client.current_mode === WORLD.MODE_LEGACY ? this.buttons[re].info.state = BUTTON_CLICK : client.current_mode === WORLD.MODE_ZOMBIES ? this.buttons[ne].info.state = BUTTON_CLICK : client.current_mode === WORLD.MODE_VAMPIRES ? this.buttons[oe].info.state = BUTTON_CLICK : client.current_mode === WORLD.MODE_COMMUNITY ? this.buttons[ae].info.state = BUTTON_CLICK : client.current_mode === WORLD.MODE_EXPERIMENTAL && (this.buttons[se].info.state = BUTTON_CLICK));
        for (e = 1; e < this.buttons.length; e++) this.buttons[e].info.active === Z && this.buttons[e].draw(t);
        if (this.bkgd[0].draw(t), (this.current_view & (H | V)) > 0) {
            o = this.new_nickname_img;
            ctxDrawImage(t, o, canw2 - o.width / 4, 138, o.width / 2, o.height / 2)
        }
        var E = Math.max(1, Math.min(18, Math.floor((ui.lvl + 3) / 2)));
        if (this.bkgd[E].active = Z, this.bkgd[E].draw(t), this.bkgd[E].active = q, this.buttons[0].draw(t), (this.current_view & (c | M | f | v | L)) > 1) {
            var I = (this.current_view & (M | f | v | L)) > 1 ? -190 : 0;
            o = sprite[SPRITE.BAG][this.bag][this.day_mode];
            ctxDrawImage(t, o, canw2 - o.width / 4 + I, 183, o.width / 2, o.height / 2), this.breath = (this.breath + 1e3 * delta) % 2e3;
            var S = 4.5 * (this.breath < 1e3) ? this.breath / 1e3 : (2e3 - this.breath) / 1e3;
            o = sprite[SPRITE.BOOK][this.book][this.day_mode];
            ctxDrawImage(t, o, canw2 - o.width / 4 - 62 + S + I, 240, o.width / 2, o.height / 2);
            o = sprite[SPRITE.HAND][this.skin][this.day_mode];
            ctxDrawImage(t, o, canw2 - o.width / 4 - 54 + S + I, 272, o.width / 2, o.height / 2), ctxDrawImage(t, o, canw2 - o.width / 4 + 54 - S + I, 272, o.width / 2, o.height / 2);
            o = sprite[SPRITE.BODY][this.skin][this.day_mode];
            ctxDrawImage(t, o, canw2 - o.width / 4 + I, 222, o.width / 2, o.height / 2);
            o = sprite[SPRITE.ACCESSORY][this.accessory][this.day_mode];
            ctxDrawImage(t, o, canw2 - o.width / 4 + I, 222, o.width / 2, o.height / 2)
        }
        if ((this.current_view & c) === c) {
            o = sprite[SPRITE.CRATE][this.crate][this.day_mode];
            ctxDrawImage(t, o, canw2 - o.width / 4 - 61, 406 - o.height / 4, o.width / 2, o.height / 2);
            o = sprite[SPRITE.CRATE][this.dead][this.day_mode];
            ctxDrawImage(t, o, canw2 - o.width / 4 + 53, 406 - o.height / 4, o.width / 2, o.height / 2)
        }
        if ((this.current_view & P) === P) {
            o = sprite[SPRITE.CRATE][this.dead][this.day_mode];
            ctxDrawImage(t, o, canw2 - o.width / 4 - 200, 268 - o.height / 4, o.width / 2, o.height / 2)
        }
        if ((this.current_view & G) === G) {
            o = sprite[SPRITE.CRATE][this.crate][this.day_mode];
            ctxDrawImage(t, o, canw2 - o.width / 4 - 200, 268 - o.height / 4, o.width / 2, o.height / 2)
        }
        if ((this.current_view & (M | f | v | L | P | G)) > 1) {
            for (e = 1; e < this.buttons.length; e++)
                if (0 != (this.buttons[e].view & this.current_view)) {
                    var N = this.buttons[e].info;
                    if (N.cosmeticId >= 0) {
                        o = N.cosmeticType[N.cosmeticId].day;
                        if (ctxDrawImage(t, o, N.translate.x - o.width / 8 + 44.5, N.translate.y - o.height / 8 + 45.5, o.width / 4, o.height / 4), 1 !== N.unlocked) {
                            o = IMAGES.RED_LOCKED;
                            ctxDrawImage(t, o, N.translate.x - o.width / 4 + 44.5, N.translate.y - o.height / 4 + 44.5, o.width / 2, o.height / 2)
                        }
                    }
                } o = this.cosmetic_name;
            ctxDrawImage(t, o, canw2 - 312, 375, o.width / 2, o.height / 2);
            o = this.cosmetic_author;
            ctxDrawImage(t, o, canw2 - 312, 395, o.width / 2, o.height / 2)
        }
        if (this.bread !== this.previous_bread && (this.previous_bread = this.bread, this.bread_img = gui_render_text("" + this.bread, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250)), ctxDrawImage(t, this.bread_img, this.bkgd[0].translate.x + 350, 15, this.bread_img.w2, this.bread_img.h2), this.lvl !== this.previous_lvl && (this.previous_lvl = this.lvl, this.lvl_img = gui_render_text("LVL " + (this.lvl + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, void 0, 30, 24, void 0, void 0, void 0, void 0, "#3F3019", 20)), ctxDrawImage(t, this.lvl_img, this.bkgd[0].translate.x + 94, 0, this.lvl_img.w2, this.lvl_img.h2), 0 === client.privateServer) {
            var O;
            if ((O = this.buttons[ie].hint) > 0) {
                o = IMAGES.NORMAL_MODE_HOVER;
                ctxDrawImage(t, o, canw2 - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - O) / 2, o.width / 2, o.height / 2)
            }
            if ((O = this.buttons[re].hint) > 0) {
                o = IMAGES.FOREST_MODE_HOVER;
                ctxDrawImage(t, o, canw2 - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - O) / 2, o.width / 2, o.height / 2)
            }
            if ((O = this.buttons[ae].hint) > 0) {
                o = IMAGES.MODE_COMMUNITY_HOVER;
                ctxDrawImage(t, o, canw2 - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - O) / 2, o.width / 2, o.height / 2)
            }
            if ((O = this.buttons[se].hint) > 0) {
                o = IMAGES.MODE_EXPERIMENTAL_HOVER;
                ctxDrawImage(t, o, canw2 - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - O) / 2, o.width / 2, o.height / 2)
            }
            if ((O = this.buttons[oe].hint) > 0) {
                o = IMAGES.VAMPIRE_MODE_HOVER;
                ctxDrawImage(t, o, canw2 - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - O) / 2, o.width / 2, o.height / 2)
            }
            if ((O = this.buttons[ne].hint) > 0) {
                o = IMAGES.ZOMBIE_MODE_HOVER;
                ctxDrawImage(t, o, canw2 - o.width / 4, -36 - o.height * Utils.ease_in_out_quad(1 - O) / 2, o.width / 2, o.height / 2)
            }
        }
        if (1 === this.spin && Math.abs(T - this.spin_target) < .006) {
            t.globalAlpha = Math.min(1, 3 * this.spin_win_effect);
            o = IMAGES.SPIN_LIGHT;
            t.save(), t.translate(canw2, 260), this.spin_win_effect += delta, t.rotate(this.spin_win_effect), ctxDrawImage(t, o, -o.width / 2, -o.height / 2, o.width, o.height), t.restore();
            S = 1.05 + .05 * Math.sin(5 * this.spin_win_effect);
            if (0 === this.spin_type) {
                var B = S * (o = COSMETICS.SKIN[this.spin_win].day).width,
                    W = S * o.height;
                ctxDrawImage(t, o, canw2 - B / 2, 260 - W / 2, B, W)
            } else if (1 === this.spin_type) {
                B = S * (o = COSMETICS.SKIN[0].day).width, W = S * o.height;
                ctxDrawImage(t, o, canw2 - B / 2, 260 - W / 2, B, W);
                B = S * (o = COSMETICS.ACCESSORY[this.spin_win].day).width, W = S * o.height;
                ctxDrawImage(t, o, canw2 - B / 2, 260 - W / 2, B, W)
            } else if (2 === this.spin_type) {
                B = S * (o = COSMETICS.BAG[this.spin_win].day).width, W = S * o.height;
                ctxDrawImage(t, o, canw2 - B / 2, 180 - W / 2, B, W);
                B = S * (o = COSMETICS.SKIN[0].day).width, W = S * o.height;
                ctxDrawImage(t, o, canw2 - B / 2, 260 - W / 2, B, W)
            } else if (3 === this.spin_type) {
                B = S * (o = COSMETICS.BOOK[this.spin_win].day).width, W = S * o.height;
                t.save(), t.translate(canw2, 260), t.rotate(Math.PI), ctxDrawImage(t, o, -B / 2, -W / 2, B, W), t.restore()
            } else if (4 === this.spin_type) {
                B = S * (o = COSMETICS.CRATE[this.spin_win].day).width, W = S * o.height;
                ctxDrawImage(t, o, canw2 - B / 2, 260 - W / 2, B, W)
            }
            o = this.spin_name;
            ctxDrawImage(t, o, canw2 - o.width / 4, 340, o.width / 2, o.height / 2);
            o = this.spin_author;
            ctxDrawImage(t, o, canw2 - o.width / 4, 365, o.width / 2, o.height / 2), this.spin_win_effect > 6 && (this.spin = 0, k(R)), t.globalAlpha = 1
        }
        user.alert.draw("#FFF", "#000"), i.waiting && this.loading.draw()
    };
    var I = 0,
        l = Math.pow(2, I++),
        u = Math.pow(2, I++);
    this.__PROFILE__ = u;
    var d = Math.pow(2, I++),
        c = Math.pow(2, I++),
        R = Math.pow(2, I++),
        h = Math.pow(2, I++),
        A = Math.pow(2, I++),
        S = Math.pow(2, I++);
    this.__BUY__ = S;
    var N = Math.pow(2, I++),
        O = Math.pow(2, I++),
        C = Math.pow(2, I++),
        g = Math.pow(2, I++),
        p = Math.pow(2, I++),
        b = Math.pow(2, I++),
        D = Math.pow(2, I++),
        m = Math.pow(2, I++),
        v = Math.pow(2, I++),
        P = Math.pow(2, I++),
        M = Math.pow(2, I++),
        f = Math.pow(2, I++),
        L = Math.pow(2, I++),
        G = Math.pow(2, I++),
        V = Math.pow(2, I++),
        H = Math.pow(2, I++),
        y = Math.pow(2, I++);
    this.__SERVER_LOCATION__ = y;
    var w = Math.pow(2, I++);
    this.__SERVER_DURATION__ = w;
    var z = Math.pow(2, I++);
    this.__SERVER_ACCESS__ = z;
    var U = Math.pow(2, I++);

    function B(e, t, r) {
        for (var a = 0; a < i.bkgd.length; a++) 0 != (i.bkgd[a].view & e) && (i.bkgd[a].active = t);
        for (a = 0; a < i.buttons.length; a++) 0 != (i.buttons[a].view & e) && (i.buttons[a].info.active = t);
        for (a = 0; a < i.css.length; a++) 0 != (i.css[a].view & e) && (i.css[a].style.display = r)
    }
    this.current_view = l;

    function W() {
        var e = Number(Cookies.get("starve_crate")),
            t = Number(Cookies.get("starve_dead")),
            i = Number(Cookies.get("starve_book")),
            r = Number(Cookies.get("starve_bag")),
            a = Number(Cookies.get("starve_skin")),
            n = Number(Cookies.get("starve_accessory"));
        ui.unlock.skin[ui.skin] > 0 || (ui.skin = ui.unlock.skin[a] > 0 ? a : 0), ui.unlock.book[ui.book] > 0 || (ui.book = ui.unlock.book[i] > 0 ? i : 0), ui.unlock.dead[ui.dead] > 0 || (ui.dead = ui.unlock.dead[t] > 0 ? t : 0), ui.unlock.crate[ui.crate] > 0 || (ui.crate = ui.unlock.crate[e] > 0 ? e : 0), ui.unlock.accessory[ui.accessory] > 0 || (ui.accessory = ui.unlock.accessory[n] > 0 ? n : 0), ui.unlock.bag[ui.bag] > 0 || (ui.bag = ui.unlock.bag[r] > 0 ? r : 0)
    }

    function k(e) {
        !1 !== i.in_this_view && (B(N, q, "none"), B(O, q, "none"), W(), e === i.current_view || i.spin >= 1 || (i.trevda.style.display = "none", B(i.current_view, q, "none"), i.current_view = e, B(i.current_view, Z, "inline-block")))
    }

    function F() {
        W(), ___adsvid % 2 || 1 !== isYolla ? client.connect() : window.YMPB.que.push((function() {
            document.getElementById("preroll").style.display = "block", window.YMPB.preroll("preroll", yollaCallback)
        }))
    }
    this.hijackedAsset = 0, this.select_subview = k, this.play_game = function() {
        !1 === i.waiting && (user.reconnect.enabled = !1, i.waiting = !0, user.newToken ? F() : function(e, t, i) {
            const r = new XMLHttpRequest;
            r.open("GET", e), r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), r.onreadystatechange = function() {
                4 == this.readyState && 200 == this.status ? void 0 !== t && t(r.responseText) : 4 == this.readyState && void 0 !== i && i()
            }, r.send()
        }(`${DB}token`, (function(e) {
            try {
                const t = e.split("_"),
                    i = t[0] + "_",
                    r = Number(t[1]),
                    a = Math.abs(entrypoint(r));
                user.newToken = i + a
            } catch (e) {
                console.error("::: [iandev] /token error :::", e)
            }
            F()
        }), (function() {
            i.waiting = !1
        })))
    };
    var K = 1,
        x = 2,
        Y = 4,
        J = 8,
        X = 16,
        j = 32,
        q = 0,
        Z = 1;
    window.innerWidth < 1300 ? this.nickname = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: Z,
        position: Y | K,
        view: l,
        translate: {
            x: 0,
            y: 0,
            _x: 200,
            _y: 184
        }
    } : this.nickname = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: Z,
        position: Y | X,
        view: l,
        translate: {
            x: 0,
            y: 0,
            _x: -180,
            _y: 184
        }
    }, this.nickname.id.addEventListener("keyup", (function(e) {
        e.preventDefault(), 13 != e.keyCode || i.waiting || i.settings || i.play_game()
    })), this.nickname.input.value = Cookies.get("starve_nickname") ? Cookies.get("starve_nickname") : "", this.account_nickname = {
        id: document.getElementById("account_nickname_block"),
        style: document.getElementById("account_nickname_block").style,
        input: document.getElementById("account_nickname_input"),
        active: q,
        position: Y | X,
        view: u,
        translate: {
            x: 0,
            y: 0,
            _x: -122,
            _y: 110
        }
    }, window.innerWidth < 1300 ? this.server_list = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: Z,
        position: Y | K,
        view: l,
        translate: {
            x: 0,
            y: 0,
            _x: 208,
            _y: 225
        }
    } : this.server_list = {
        id: document.getElementById("servselect"),
        style: document.getElementById("servselect").style,
        active: Z,
        position: Y | X,
        view: l,
        translate: {
            x: 0,
            y: 0,
            _x: -180,
            _y: 225
        }
    }, this.leaderboard = {
        id: document.getElementById("leaderboard"),
        style: document.getElementById("leaderboard").style,
        active: q,
        position: Y | X,
        view: A,
        translate: {
            x: 0,
            y: 0,
            _x: -294.5,
            _y: 190
        }
    }, this.stats_box = {
        id: document.getElementById("stats_box"),
        style: document.getElementById("stats_box").style,
        active: q,
        position: Y | X,
        view: u,
        translate: {
            x: 0,
            y: 0,
            _x: 125,
            _y: 187
        }
    }, this.serverAddressBlock = {
        id: document.getElementById("serverAddressBlock"),
        style: document.getElementById("serverAddressBlock").style,
        input: document.getElementById("serverAddressInput"),
        active: q,
        position: Y | X,
        view: z,
        translate: {
            x: 0,
            y: 0,
            _x: -220,
            _y: 350
        }
    }, I = 0, this.css = [], this.css[I++] = this.nickname, this.css[I++] = this.server_list, this.css[I++] = this.leaderboard, this.css[I++] = this.account_nickname, this.css[I++] = this.stats_box, this.css[I++] = this.serverAddressBlock, I = 0, this.bkgd = [], this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_RESUME, Z, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL1, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL2, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL3, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL4, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL5, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL6, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL7, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL8, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL9, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL10, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL11, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL12, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL13, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL14, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL15, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL16, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL17, q, 0, 0, K), this.bkgd[I++] = gui_create_image_hd(IMAGES.AVATAR_LVL18, q, 0, 0, K), window.innerWidth < 1300 ? this.bkgd[I] = gui_create_image_hd(IMAGES.LOGO_INTERFACE, Z, 200, 100, Y | K) : this.bkgd[I] = gui_create_image_hd(IMAGES.LOGO_INTERFACE, Z, -753 / 4, 100, Y | X), this.bkgd[I++].view = l, this.bkgd[I++] = gui_create_image_hd(IMAGES.LINKS_BG, Z, 403, -10, x), window.innerWidth > 1300 && (this.bkgd[I] = gui_create_image_hd(IMAGES.CHANGELOG_BOX, Z, -885 / 4, -159.5, J | X), this.bkgd[I++].view = l), this.bkgd[I] = gui_create_image_hd(IMAGES.PROFILE_BOX, q, -323.25, 100, Y | X), this.bkgd[I++].view = u, this.bkgd[I] = gui_create_image_hd(IMAGES.SKINS_BOX, q, -356.25, 100, Y | X), this.bkgd[I++].view = c, this.bkgd[I] = gui_create_image_hd(IMAGES.ACCOUNT_BOX, q, -905 / 4, 50, Y | X), this.bkgd[I++].view = d, this.bkgd[I] = gui_create_image_hd(IMAGES.SHOP_BOX, q, -402, 130, Y | X), this.bkgd[I++].view = R, this.bkgd[I] = gui_create_image_hd(IMAGES.SERVER_LOCATION_BOX, q, -279.25, 130, Y | X), this.bkgd[I++].view = y, this.bkgd[I] = gui_create_image_hd(IMAGES.SERVER_DURATION_BOX, q, -305.5, 130, Y | X), this.bkgd[I++].view = w, this.bkgd[I] = gui_create_image_hd(IMAGES.SERVER_ACCESS_BOX, q, -305.5, 100, Y | X), this.bkgd[I++].view = z, this.bkgd[I] = gui_create_image_hd(IMAGES.SEASON5_BOX, q, -IMAGES.SEASON5_BOX.width / 4 - 350, -15, Y | X), this.bkgd[I++].view = U, this.bkgd[I] = gui_create_image_hd(IMAGES.TUTORIAL_BOX, q, -374.25, 110, Y | X), this.bkgd[I++].view = h, this.bkgd[I] = gui_create_image_hd(IMAGES.LEADERBOARD_BOX, q, -306.5, 100, Y | X), this.bkgd[I++].view = A, this.bkgd[I] = gui_create_image_hd(IMAGES.BUY_BREAD_BOX, q, -345.25, 80, Y | X), this.bkgd[I++].view = S, this.bkgd[I] = gui_create_image_hd(IMAGES.SPIN1, q, -385.5, 150, Y | X), this.bkgd[I++].view = C;
    var $ = 3.6,
        Q = this.create_spin([
            ["#25c5d6", 10.8],
            ["#e2cf27", 36],
            ["#afac98", 108],
            ["#d88e23", 57 * $]
        ]);
    this.bkgd[I] = gui_create_image_hd(Q, q, -Q.width / 4, 178, Y | X), this.bkgd[I++].view = C, this.play_spin = function(e, t, r) {
        var a;
        i.spin = 1, i.spin_effect = 0, i.spin_win_effect = 0, i.spin_target = e, i.spin_type = t;
        var n = 0;
        if (0 === t) {
            for (n = 0; n < COSMETICS.SKIN.length && r !== COSMETICS.SKIN[n].id; n++);
            a = COSMETICS.SKIN[n], i.unlock.skin[n] = 1
        } else if (1 === t) {
            for (n = 0; n < COSMETICS.ACCESSORY.length && r !== COSMETICS.ACCESSORY[n].id; n++);
            a = COSMETICS.ACCESSORY[n], i.unlock.accessory[n] = 1
        } else if (2 === t) {
            for (n = 0; n < COSMETICS.BAG.length && r !== COSMETICS.BAG[n].id; n++);
            a = COSMETICS.BAG[n], i.unlock.bag[n] = 1
        } else if (3 === t) {
            for (n = 0; n < COSMETICS.BOOK.length && r !== COSMETICS.BOOK[n].id; n++);
            a = COSMETICS.BOOK[n], i.unlock.book[n] = 1
        } else if (4 === t) {
            for (n = 0; n < COSMETICS.CRATE.length && r !== COSMETICS.CRATE[n].id; n++);
            a = COSMETICS.CRATE[n], i.unlock.crate[n] = 1, i.unlock.dead[n] = 1
        }
        i.spin_win = n, i.spin_author = gui_render_text("by " + a.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, void 0, 30, 24, void 0, void 0, void 0, void 0, "#000000", 24), i.spin_name = gui_render_text(a.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, void 0, 30, 24, void 0, void 0, void 0, void 0, "#000000", 20)
    }, this.spin = 0, this.spin_effect = 0, this.spin_target = 0, this.spin_type = 0, this.spin_win_effect = 0, this.spin_author = void 0, this.spin_name = void 0;
    var ee = 197;
    this.bkgd[I] = gui_create_image_hd(IMAGES.SPIN2, q, -385.5, 150, Y | X), this.bkgd[I++].view = D;
    Q = this.create_spin([
        ["#d45ce5", 10.8],
        ["#25c5d6", 36],
        ["#e2cf27", 108],
        ["#afac98", 57 * $]
    ]);
    this.bkgd[I] = gui_create_image_hd(Q, q, -Q.width / 4, 178, Y | X), this.bkgd[I++].view = D, this.bkgd[I] = gui_create_image_hd(IMAGES.SPIN3, q, -385.5, 150, Y | X), this.bkgd[I++].view = p;
    Q = this.create_spin([
        ["#d33a2a", 10.8],
        ["#d45ce5", 36],
        ["#25c5d6", 108],
        ["#e2cf27", 57 * $]
    ]);
    this.bkgd[I] = gui_create_image_hd(Q, q, -Q.width / 4, 178, Y | X), this.bkgd[I++].view = p, this.bkgd[I] = gui_create_image_hd(IMAGES.SPIN4, q, -385.5, 150, Y | X), this.bkgd[I++].view = b;
    Q = this.create_spin([
        ["#25c5d6", 10.8],
        ["#e2cf27", 36],
        ["#afac98", 108],
        ["#d88e23", 57 * $]
    ]);
    this.bkgd[I] = gui_create_image_hd(Q, q, -Q.width / 4, 178, Y | X), this.bkgd[I++].view = b, this.bkgd[I] = gui_create_image_hd(IMAGES.SPIN5, q, -385.5, 150, Y | X), this.bkgd[I++].view = g;
    Q = this.create_spin([
        ["#d45ce5", 10.8],
        ["#25c5d6", 36],
        ["#e2cf27", 108],
        ["#afac98", 57 * $]
    ]);
    this.bkgd[I] = gui_create_image_hd(Q, q, -Q.width / 4, 178, Y | X), this.bkgd[I++].view = g, this.bkgd[I] = gui_create_image_hd(IMAGES.SPIN6, q, -385.5, 150, Y | X), this.bkgd[I++].view = m;
    Q = this.create_spin([
        ["#d33a2a", 10.8],
        ["#d45ce5", 36],
        ["#25c5d6", 108],
        ["#e2cf27", 57 * $]
    ]);
    this.bkgd[I] = gui_create_image_hd(Q, q, -Q.width / 4, 178, Y | X), this.bkgd[I++].view = m, this.bkgd[I] = gui_create_image_hd(IMAGES.CUSTOM_SKIN_BOX, q, -341.5, 100, Y | X), this.bkgd[I++].view = v, this.bkgd[I] = gui_create_image_hd(IMAGES.ACCESSORIES_BOX, q, -341.5, 100, Y | X), this.bkgd[I++].view = L, this.bkgd[I] = gui_create_image_hd(IMAGES.BAG_BOX, q, -341.5, 100, Y | X), this.bkgd[I++].view = M, this.bkgd[I] = gui_create_image_hd(IMAGES.BOOK_BOX, q, -341.5, 100, Y | X), this.bkgd[I++].view = f, this.bkgd[I] = gui_create_image_hd(IMAGES.CRATE_BOX, q, -341.5, 100, Y | X), this.bkgd[I++].view = P, this.bkgd[I] = gui_create_image_hd(IMAGES.LOOT_BOX, q, -341.5, 100, Y | X), this.bkgd[I++].view = G, BAG_REMAIN_BOX = I++, this.bkgd[BAG_REMAIN_BOX] = gui_create_image_hd(IMAGES.BAG_REMAIN_BOX, q, 484, 0, Y), SERVER_REMAIN_BOX = I++, this.bkgd[SERVER_REMAIN_BOX] = gui_create_image_hd(IMAGES.SERVER_REMAIN_BOX, q, 812.5, 0, Y), this.bkgd[I] = gui_create_image_hd(IMAGES.LOCKED_CUSTOM_ALERT, q, -189.5, -5, Y | X), this.bkgd[I++].view = O, this.bkgd[I] = gui_create_image_hd(IMAGES.LOCKED_SKIN_ALERT, q, -189.5, -5, Y | X), this.bkgd[I++].view = N, LEVEL_GAUGE = I++, this.bkgd[LEVEL_GAUGE] = gui_create_image_hd(IMAGES.GAUGE, Z, 93, 30, Y), this.bkgd[I] = gui_create_image_hd(IMAGES.CHANGE_NICKNAME1_BOX, q, -173, 110, Y | X), this.bkgd[I++].view = V, this.bkgd[I] = gui_create_image_hd(IMAGES.CHANGE_NICKNAME0_BOX, q, -173, 110, Y | X), this.bkgd[I++].view = H;
    var te = window.innerWidth < 1300 ? 500 : 310;
    if (this.bkgd[I] = gui_create_image_hd(IMAGES.MOBILE_BOXAD, Z, -153, te, Y | X), this.bkgd[I].view = l, I = 0, this.buttons = [], this.buttons[I] = gui_create_button(50, 57, "", [IMAGES.BUY_BREAD_OUT, IMAGES.BUY_BREAD_IN, IMAGES.BUY_BREAD_CLICK], 1, 0, (function() {
            i.isUserLogged() ? k(S) : k(d)
        }), 320, 0, K, Z), I++, window.innerWidth < 1300 ? this.buttons[I] = gui_create_button(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 462, 235, Y | K, Z) : this.buttons[I] = gui_create_button(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], 1, 0, this.play_game, 74, 235, Y | X, Z), this.buttons[I].view = l, I++, this.buttons[I] = gui_create_button(120, 40, "", [IMAGES.APP_STORE_BADGE, IMAGES.APP_STORE_BADGE, IMAGES.APP_STORE_BADGE], 0, 0, (() => window.open("https://apps.apple.com/us/app/id1538497844", "_blank")), -137, te + 200, Y | X, Z), this.buttons[I].view = l, I++, this.buttons[I] = gui_create_button(135, 40, "", [IMAGES.PLAY_STORE_BADGE, IMAGES.PLAY_STORE_BADGE, IMAGES.PLAY_STORE_BADGE], 0, 0, (() => window.open("https://play.google.com/store/apps/details?id=com.addictinggames.starveio", "_blank")), 2, te + 200, Y | X, Z), this.buttons[I].view = l, I++, window.innerWidth > 1300 && (this.buttons[I] = gui_create_button(355, 168, "", [IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT], 1, 0, (function() {
            window.open("./changelog.html", "_blank")
        }), -195, -115, J | X, Z), this.buttons[I++].view = l, this.buttons[I] = gui_create_button(355, 168, "", [IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT], 1, 0, (function() {
            window.open("https://devast.io", "_blank")
        }), 20, -115, J | X, Z), this.buttons[I++].view = l), this.buttons[I++] = gui_create_button(80, 80, "", [IMAGES.MERCH_BUTTON_OUT, IMAGES.MERCH_BUTTON_IN, IMAGES.MERCH_BUTTON_CLICK], 1, 0, (function() {
            window.open("https://shop.addictinggames.com/", "_blank")
        }), 380, 10, x, Z), this.buttons[I++] = gui_create_button(80, 80, "", [IMAGES.DISCORD_BUTTON_OUT, IMAGES.DISCORD_BUTTON_IN, IMAGES.DISCORD_BUTTON_CLICK], 1, 0, (function() {
            window.open("https://discord.gg/starveio", "_blank")
        }), 330, 10, x, Z), this.buttons[I++] = gui_create_button(80, 80, "", [IMAGES.REDDIT_BUTTON_OUT, IMAGES.REDDIT_BUTTON_IN, IMAGES.REDDIT_BUTTON_CLICK], 1, 0, (function() {
            window.open("https://reddit.com/r/starveio", "_blank")
        }), 280, 10, x, Z), this.buttons[I++] = gui_create_button(80, 80, "", [IMAGES.WIKI_BUTTON_OUT, IMAGES.WIKI_BUTTON_IN, IMAGES.WIKI_BUTTON_CLICK], 1, 0, (function() {
            window.open("https://starveiopro.wikia.com/wiki/", "_blank")
        }), 230, 10, x, Z), this.buttons[I++] = gui_create_button(80, 80, "", [IMAGES.FACEBOOK_BUTTON_OUT, IMAGES.FACEBOOK_BUTTON_IN, IMAGES.FACEBOOK_BUTTON_CLICK], 1, 0, (function() {
            window.open("https://www.facebook.com/pages/category/Video-Game/limaxio-571818073000979/", "_blank")
        }), 155, 10, x, Z), this.buttons[I++] = gui_create_button(80, 80, "", [IMAGES.TWITTER_BUTTON_OUT, IMAGES.TWITTER_BUTTON_IN, IMAGES.TWITTER_BUTTON_CLICK], 1, 0, (function() {
            window.open("https://twitter.com/lapamauve", "_blank")
        }), 105, 10, x, Z), this.buttons[I++] = gui_create_button(80, 80, "", [IMAGES.YOUTUBE_BUTTON_OUT, IMAGES.YOUTUBE_BUTTON_IN, IMAGES.YOUTUBE_BUTTON_CLICK], 1, 0, (function() {
            window.open("https://youtube.com/c/lapamauve", "_blank")
        }), 55, 10, x, Z), LEADERBOARD_BUTTON = I++, this.buttons[LEADERBOARD_BUTTON] = gui_create_button(232, 142, "", [IMAGES.ICONS_BOTTOM_BG_BUTTON_OUT, IMAGES.ICONS_BOTTOM_BG_BUTTON_IN, IMAGES.ICONS_BOTTOM_BG_BUTTON_CLICK], 1, 0, (function() {
            k(A), getLeaderboard(ui.LEADERBOARD_ALL, ui.LEADERBOARD_TOTAL, ui.LEADERBOARD_SCORE, ui.LEADERBOARD_SEASON5)
        }), -5, 573, K, Z), this.buttons[I++] = gui_create_button(236, 165, "", [IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON], 1, 1, (function() {
            k(A)
        }), -5, 566, K, Z), TUTORIAL_BUTTON = I++, this.buttons[TUTORIAL_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
            k(h)
        }), -5, 494, K, Z), this.buttons[I++] = gui_create_button(236, 165, "", [IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON], 1, 1, (function() {
            k(h)
        }), -5, 494, K, Z), SERVER_BUTTON = I++, this.buttons[SERVER_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
            i.isUserLogged() ? ui.privateServerTime - Date.now() > 0 && k(z) : k(d)
        }), -5, 415, K, Z), this.buttons[I++] = gui_create_button(236, 165, "", [IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON], 1, 1, (function() {
            i.isUserLogged() ? ui.privateServerTime - Date.now() > 0 && k(z) : k(d)
        }), -5, 415, K, Z), SHOP_BUTTON = I++, this.buttons[SHOP_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
            k(R)
        }), -5, 336, K, Z), this.buttons[I++] = gui_create_button(236, 165, "", [IMAGES.SHOP_ICON, IMAGES.SHOP_ICON, IMAGES.SHOP_ICON], 1, 1, (function() {
            k(R)
        }), -5, 336, K, Z), COSMETICS_BUTTON = I++, this.buttons[COSMETICS_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
            k(c)
        }), -5, 257, K, Z), this.buttons[I++] = gui_create_button(236, 165, "", [IMAGES.SKINS_ICON, IMAGES.SKINS_ICON, IMAGES.SKINS_ICON], 1, 1, (function() {
            k(c)
        }), -5, 257, K, Z), GAME_BUTTON = I++, this.buttons[GAME_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], 1, 0, (function() {
            k(l)
        }), -5, 178, K, Z), this.buttons[I++] = gui_create_button(236, 165, "", [IMAGES.START_ICON, IMAGES.START_ICON, IMAGES.START_ICON], 1, 1, (function() {
            k(l)
        }), -5, 178, K, Z), LOGIN_BUTTON = I++, this.LOGIN_BUTTON = LOGIN_BUTTON, this.buttons[LOGIN_BUTTON] = gui_create_button(324, 222, "", [IMAGES.LOGIN_BUTTON_OUT, IMAGES.LOGIN_BUTTON_IN, IMAGES.LOGIN_BUTTON_CLICK], 1, 0, (function() {
            k(d)
        }), 0, 70, K, Z), PROFILE_BUTTON = I++, PROFILE_BUTTON_2 = I++, this.PROFILE_BUTTON = PROFILE_BUTTON, this.PROFILE_BUTTON_2 = PROFILE_BUTTON_2, this.buttons[PROFILE_BUTTON] = gui_create_button(324, 222, "", [IMAGES.PROFILE_BUTTON_OUT, IMAGES.PROFILE_BUTTON_IN, IMAGES.PROFILE_BUTTON_CLICK], 1, 0, (function() {
            k(u), _e(-1)
        }), 0, 70, K, q), this.buttons[PROFILE_BUTTON_2] = gui_create_button(324, 222, "", [IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON], 1, 1, (function() {
            k(u), _e(-1)
        }), 0, 70, K, q), 0 === client.privateServer) {
        var ie = I++;
        window.innerWidth < 1300 ? this.buttons[ie] = gui_create_button(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_PVP)
        }), 150, 300, K | Y, Z) : this.buttons[ie] = gui_create_button(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_PVP)
        }), -340, 100, X | Y, Z), this.buttons[ie].view = l, this.buttons[ie].hint = 0;
        var re = I++;
        window.innerWidth < 1300 ? this.buttons[re] = gui_create_button(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_LEGACY)
        }), 150, 400, K | Y, Z) : this.buttons[re] = gui_create_button(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_LEGACY)
        }), -340, 200, X | Y, Z), this.buttons[re].view = l, this.buttons[re].hint = 0;
        var ae = I++;
        window.innerWidth < 1300 ? this.buttons[ae] = gui_create_button(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_COMMUNITY)
        }), 450, 300, K | Y, Z) : this.buttons[ae] = gui_create_button(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_COMMUNITY)
        }), -340, 300, X | Y, Z), this.buttons[ae].view = l, this.buttons[ae].hint = 0;
        var ne = I++;
        window.innerWidth < 1300 ? this.buttons[ne] = gui_create_button(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_ZOMBIES)
        }), 300, 300, K | Y, Z) : this.buttons[ne] = gui_create_button(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_ZOMBIES)
        }), 204, 100, X | Y, Z), this.buttons[ne].view = l, this.buttons[ne].hint = 0;
        var oe = I++;
        window.innerWidth < 1300 ? this.buttons[oe] = gui_create_button(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_VAMPIRES)
        }), 300, 400, K | Y, Z) : this.buttons[oe] = gui_create_button(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_VAMPIRES)
        }), 204, 200, X | Y, Z), this.buttons[oe].view = l, this.buttons[oe].hint = 0;
        var se = I++;
        this.buttons[se] = gui_create_button(266, 176, "", [IMAGES.MODE_EXPERIMENTAL_OUT, IMAGES.MODE_EXPERIMENTAL_IN, IMAGES.MODE_EXPERIMENTAL_CLICK], 1, 0, (function() {
            client.select_gamemode(WORLD.MODE_EXPERIMENTAL)
        }), window.innerWidth < 1300 ? 450 : 204, window.innerWidth < 1300 ? 400 : 300, (window.innerWidth < 1300 ? K : X) | Y, Z), this.buttons[se].view = l, this.buttons[se].hint = 0
    }

    function _e(e, t) {
        if (void 0 !== t) {
            ui.profile_season = t;
            var i = ui.seasons[t];
            ui.score = i.score, ui.kill = i.kill, ui.death = i.death, ui.time = i.time, ui.bestScore = i.bestScore, ui.bestKill = i.bestKill, ui.bestTime = i.bestTime, ui.scoreTotal = i.scoreTotal
        }
        if (void 0 === e && (e = ui.current_mode_score), ui.current_mode_score = e, e >= 0) document.getElementById("stats_box_time").innerHTML = ui.bestTime[e], document.getElementById("stats_box_kill").innerHTML = ui.bestKill[e], document.getElementById("stats_box_score").innerHTML = ui.bestScore[e];
        else {
            for (var r = 0, a = 0; a < ui.kill.length; a++) r += ui.kill[a];
            var n = 0;
            for (a = 0; a < ui.time.length; a++) n += ui.time[a];
            document.getElementById("stats_box_time").innerHTML = n, document.getElementById("stats_box_kill").innerHTML = r, document.getElementById("stats_box_score").innerHTML = ui.score
        }
    }
    this.buttons[I] = gui_create_button(87, 78, "", [IMAGES.MODIFY_NAME_OUT, IMAGES.MODIFY_NAME_IN, IMAGES.MODIFY_NAME_CLICK], 1, 0, (function() {
        ui.generate_new_nickname(), 0 === ui.firstName ? k(H) : k(V)
    }), 127, 110, X | Y, q), this.buttons[I++].view = u, this.buttons[I] = gui_create_button(87, 78, "", [IMAGES.LOGOUT_OUT, IMAGES.LOGOUT_IN, IMAGES.LOGOUT_CLICK], 1, 0, (function() {
        logout()
    }), 255, 110, X | Y, q), this.buttons[I++].view = u, this.buttons[I] = gui_create_button(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, (function() {
        k(l)
    }), 189, 118, X | Y, q), this.buttons[I++].view = d, this.buttons[I] = gui_create_button(497, 72, "", [IMAGES.LOGIN_GOOGLE_OUT, IMAGES.LOGIN_GOOGLE_IN, IMAGES.LOGIN_GOOGLE_CLICK], 1, 0, (function() {
        loginWithGoogle()
    }), -130, 390, X | Y, q), this.buttons[I++].view = d, this.buttons[I] = gui_create_button(497, 72, "", [IMAGES.LOGIN_FACEBOOK_OUT, IMAGES.LOGIN_FACEBOOK_IN, IMAGES.LOGIN_FACEBOOK_CLICK], 1, 0, (function() {
        logWithFacebook()
    }), -130, 430, X | Y, q), this.buttons[I++].view = d, __LEVEL_FACTOR__ = 2e4, this.xp_formula = function(e) {
        var t = ui.level_formula(e),
            i = t * t * __LEVEL_FACTOR__;
        return (e -= i) / ((t + 1) * (t + 1) * __LEVEL_FACTOR__ - i)
    }, this.level_formula = function(e) {
        return Math.floor(Math.sqrt(e / __LEVEL_FACTOR__))
    }, this.update_score = function(e) {
        ui.lvl = ui.level_formula(e), ui.xp_dest = ui.xp_formula(e), ui.xp = 0, ui.score = e
    }, this.login_restore_data = function(e) {
        ui.buttons[ui.LOGIN_BUTTON].info.active = 0, ui.buttons[ui.PROFILE_BUTTON].info.active = 1, ui.buttons[ui.PROFILE_BUTTON_2].info.active = 1, a(), -1 === e.name.indexOf("Starver#") ? document.getElementById("account_nickname_input").value = window.decodeURIComponent(window.escape(window.atob(e.name))) : document.getElementById("account_nickname_input").value = e.name, ui.bread = e.bread;
        var t = e.seasons,
            r = t[t.length - 1];
        ui.seasons = t, i.update_score(r.score), ui.score = r.score, ui.kill = r.kill, ui.death = r.death, ui.time = r.time, ui.bestScore = r.bestScore, ui.bestKill = r.bestKill, ui.bestTime = r.bestTime, ui.scoreTotal = r.scoreTotal, ui.firstName = e.firstName, document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + e.privateServer, void 0 === ui.firstName && (ui.firstName = 0), ui.privateServerTime = Date.now() + e.privateServerTime, Number(e.privateServerTime) > 0 && (ui.privateServerTime = Date.now() + Number(e.privateServerTime)), ui.kit = Date.now() + e.kit, Number(e.kit) > 0 && (ui.kit = Date.now() + Number(e.kit));
        for (var n = COSMETICS.SKIN, o = 0; o < e.skins.length; o++) {
            if (e.skins[o] > 0)
                for (var s = 0; s < n.length; s++) n[s].id === o && (i.unlock.skin[s] = 1)
        }
        for (n = COSMETICS.ACCESSORY, o = 0; o < e.accessories.length; o++) {
            if (e.accessories[o] > 0)
                for (s = 0; s < n.length; s++) n[s].id === o && (i.unlock.accessory[s] = 1)
        }
        for (n = COSMETICS.BOOK, o = 0; o < e.books.length; o++) {
            if (e.books[o] > 0)
                for (s = 0; s < n.length; s++) n[s].id === o && (i.unlock.book[s] = 1)
        }
        for (n = COSMETICS.BAG, o = 0; o < e.bags.length; o++) {
            if (e.bags[o] > 0)
                for (s = 0; s < n.length; s++) n[s].id === o && (i.unlock.bag[s] = 1)
        }
        for (n = COSMETICS.CRATE, o = 0; o < e.crates.length; o++) {
            if (e.crates[o] > 0)
                for (s = 0; s < n.length; s++) n[s].id === o && (i.unlock.crate[s] = 1, i.unlock.dead[s] = 1)
        }
    }, this.login_after = function() {
        window.onUserLogin = function() {
            k(l), getUserDetails(i.login_restore_data)
        }, 1 === userAlreadyLoggedIn && window.onUserLogin()
    }, window.onUserLogout = function() {
        ui.buttons[ui.LOGIN_BUTTON].info.active = 1, ui.buttons[ui.PROFILE_BUTTON].info.active = 0, ui.buttons[ui.PROFILE_BUTTON_2].info.active = 0, k(l)
    }, this.isUserLogged = function() {
        return ui.buttons[ui.PROFILE_BUTTON].info.active
    }, this.buttons[I] = gui_create_button(461, 105, "", [IMAGES.GET_MORE_BUTTON_OUT, IMAGES.GET_MORE_BUTTON_IN, IMAGES.GET_MORE_BUTTON_CLICK], 1, 0, (function() {
        i.isUserLogged() ? k(S) : k(d)
    }), -100, 80, X | Y, q), this.buttons[I++].view = R, this.buttons[I] = gui_create_button(157, 158, "", [IMAGES.TUTO_WIKI_OUT, IMAGES.TUTO_WIKI_IN, IMAGES.TUTO_WIKI_CLICK], 1, 0, (function() {
        window.open("https://starveiopro.wikia.com/wiki/", "_blank")
    }), -35, 125, X | Y, q), this.buttons[I++].view = h, this.buttons[I] = gui_create_button(66, 73, "", [IMAGES.TUTO_PREVIOUS_OUT, IMAGES.TUTO_PREVIOUS_IN, IMAGES.TUTO_PREVIOUS_CLICK], 1, 0, void 0, -68, 340, X | Y, q), this.buttons[I++].view = h, this.buttons[I] = gui_create_button(66, 73, "", [IMAGES.TUTO_NEXT_OUT, IMAGES.TUTO_NEXT_IN, IMAGES.TUTO_NEXT_CLICK], 1, 0, void 0, -30, 340, X | Y, q), this.buttons[I++].view = h, this.buttons[I] = gui_create_button(97, 66, "", [IMAGES.LVL_LEADERBOARD_OUT, IMAGES.LVL_LEADERBOARD_IN, IMAGES.LVL_LEADERBOARD_CLICK], 1, 0, void 0, -14, 151, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_KILL = I, this.buttons[I] = gui_create_button(135, 66, "", [IMAGES.KILL_LEADERBOARD_OUT, IMAGES.KILL_LEADERBOARD_IN, IMAGES.KILL_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, void 0, ui.LEADERBOARD_KILL)
    }), 37.5, 151, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_TIME = I, this.buttons[I] = gui_create_button(160, 66, "", [IMAGES.TIME_LEADERBOARD_OUT, IMAGES.TIME_LEADERBOARD_IN, IMAGES.TIME_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, void 0, ui.LEADERBOARD_TIME)
    }), 107.5, 151, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_SCORE = I, this.buttons[I] = gui_create_button(207, 66, "", [IMAGES.SCORE_LEADERBOARD_OUT, IMAGES.SCORE_LEADERBOARD_IN, IMAGES.SCORE_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, void 0, ui.LEADERBOARD_SCORE)
    }), 190.5, 151, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_TODAY = I, this.buttons[I] = gui_create_button(144, 66, "", [IMAGES.TODAY_LEADERBOARD_OUT, IMAGES.TODAY_LEADERBOARD_IN, IMAGES.TODAY_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(ui.LEADERBOARD_TODAY)
    }), 103.5, 110, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_WEEK = I, this.buttons[I] = gui_create_button(124, 66, "", [IMAGES.WEEK_LEADERBOARD_OUT, IMAGES.WEEK_LEADERBOARD_IN, IMAGES.WEEK_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(ui.LEADERBOARD_WEEK)
    }), 177.5, 110, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_ALL = I, this.buttons[I] = gui_create_button(104, 66, "", [IMAGES.ALL_LEADERBOARD_OUT, IMAGES.ALL_LEADERBOARD_IN, IMAGES.ALL_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(ui.LEADERBOARD_ALL)
    }), 242, 110, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_SEASON1 = I, this.buttons[I] = gui_create_button(183, 66, "", [IMAGES.SEASON1_LEADERBOARD_OUT, IMAGES.SEASON1_LEADERBOARD_IN, IMAGES.SEASON1_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, void 0, void 0, ui.LEADERBOARD_SEASON1)
    }), -290, 521, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_SEASON2 = I, this.buttons[I] = gui_create_button(183, 66, "", [IMAGES.SEASON2_LEADERBOARD_OUT, IMAGES.SEASON2_LEADERBOARD_IN, IMAGES.SEASON2_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, void 0, void 0, ui.LEADERBOARD_SEASON2)
    }), -185, 521, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_SEASON3 = I, this.buttons[I] = gui_create_button(183, 66, "", [IMAGES.SEASON3_LEADERBOARD_OUT, IMAGES.SEASON3_LEADERBOARD_IN, IMAGES.SEASON3_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, void 0, void 0, ui.LEADERBOARD_SEASON3)
    }), -80, 521, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_SEASON4 = I, this.buttons[I] = gui_create_button(183, 66, "", [IMAGES.SEASON4_LEADERBOARD_OUT, IMAGES.SEASON4_LEADERBOARD_IN, IMAGES.SEASON4_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, void 0, void 0, ui.LEADERBOARD_SEASON4)
    }), 25, 521, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_SEASON5 = I, this.buttons[I] = gui_create_button(183, 66, "", [IMAGES.SEASON5_LEADERBOARD_OUT, IMAGES.SEASON5_LEADERBOARD_IN, IMAGES.SEASON5_LEADERBOARD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, void 0, void 0, ui.LEADERBOARD_SEASON5)
    }), 130, 521, X | Y, q), this.buttons[I++].view = A, this.buttons[I] = gui_create_button(232, 352, "", [IMAGES.CURRENCY1_OUT, IMAGES.CURRENCY1_IN, IMAGES.CURRENCY1_CLICK], 1, 0, (function() {
        openXsolla(300)
    }), -330, 135, X | Y, q), this.buttons[I++].view = S, this.buttons[I] = gui_create_button(232, 352, "", [IMAGES.CURRENCY2_OUT, IMAGES.CURRENCY2_IN, IMAGES.CURRENCY2_CLICK], 1, 0, (function() {
        openXsolla(600)
    }), -195, 135, X | Y, q), this.buttons[I++].view = S, this.buttons[I] = gui_create_button(243, 374, "", [IMAGES.CURRENCY3_OUT, IMAGES.CURRENCY3_IN, IMAGES.CURRENCY3_CLICK], 1, 0, (function() {
        openXsolla(2600)
    }), -60, 130, X | Y, q), this.buttons[I++].view = S, this.buttons[I] = gui_create_button(232, 352, "", [IMAGES.CURRENCY4_OUT, IMAGES.CURRENCY4_IN, IMAGES.CURRENCY4_CLICK], 1, 0, (function() {
        openXsolla(7e3)
    }), 78, 135, X | Y, q), this.buttons[I++].view = S, this.buttons[I] = gui_create_button(243, 374, "", [IMAGES.CURRENCY5_OUT, IMAGES.CURRENCY5_IN, IMAGES.CURRENCY5_CLICK], 1, 0, (function() {
        openXsolla(2e4)
    }), 213, 130, X | Y, q), this.buttons[I++].view = S, this.buttons[I] = gui_create_button(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], 1, 0, (function() {
        k(R)
    }), 300, 88, X | Y, q), this.buttons[I++].view = S, this.buttons[I] = gui_create_button(323, 112, "", [IMAGES.SKIN_BUTTON_OUT, IMAGES.SKIN_BUTTON_IN, IMAGES.SKIN_BUTTON_CLICK], 1, 0, (function() {
        k(v), Se.initSelector()
    }), -315, 185, X | Y, q), this.buttons[I++].view = c, this.buttons[I] = gui_create_button(323, 112, "", [IMAGES.ACCESSORY_BUTTON_OUT, IMAGES.ACCESSORY_BUTTON_IN, IMAGES.ACCESSORY_BUTTON_CLICK], 1, 0, (function() {
        k(L), pe.initSelector()
    }), -315, 321, X | Y, q), this.buttons[I++].view = c, this.buttons[I] = gui_create_button(323, 112, "", [IMAGES.BAG_BUTTON_OUT, IMAGES.BAG_BUTTON_IN, IMAGES.BAG_BUTTON_CLICK], 1, 0, (function() {
        k(M), Ne.initSelector()
    }), 153, 185, X | Y, q), this.buttons[I++].view = c, this.buttons[I] = gui_create_button(323, 112, "", [IMAGES.BOOK_BUTTON_OUT, IMAGES.BOOK_BUTTON_IN, IMAGES.BOOK_BUTTON_CLICK], 1, 0, (function() {
        k(f), Oe.initSelector()
    }), 153, 321, X | Y, q), this.buttons[I++].view = c, this.buttons[I] = gui_create_button(323, 112, "", [IMAGES.CRATE_BUTTON_OUT, IMAGES.CRATE_BUTTON_IN, IMAGES.CRATE_BUTTON_CLICK], 1, 0, (function() {
        k(P), Ce.initSelector()
    }), 153, 463, X | Y, q), this.buttons[I++].view = c, this.buttons[I] = gui_create_button(323, 112, "", [IMAGES.LOOT_BUTTON_OUT, IMAGES.LOOT_BUTTON_IN, IMAGES.LOOT_BUTTON_CLICK], 1, 0, (function() {
        k(G), ge.initSelector()
    }), -315, 463, X | Y, q), this.buttons[I++].view = c, this.buttons[I] = gui_create_button(327, 117, "", [IMAGES.SEASON_5, IMAGES.SEASON_5_IN, IMAGES.SEASON_5_OUT], 1, 0, (function() {
        k(U)
    }), 155, 70, K, Z), this.buttons[I++].view = l, this.buttons[I] = gui_create_button(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, (function() {
        B(N, q, "none"), k(R)
    }), 10, 40, X | Y, q), this.buttons[I++].view = N, this.buttons[I] = gui_create_button(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], 1, 0, (function() {
        B(O, q, "none"), k(R)
    }), 10, 40, X | Y, q), this.buttons[I++].view = O, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(R)
    }), 200, 140, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.ATLANTA_OUT, IMAGES.ATLANTA_IN, IMAGES.ATLANTA_CLICK], 1, 0, (function() {
        regionPreference("Atlanta")
    }), -265, 300, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.DALLAS_OUT, IMAGES.DALLAS_IN, IMAGES.DALLAS_CLICK], 1, 0, (function() {
        regionPreference("Dallas")
    }), -130, 300, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.FREMONT_OUT, IMAGES.FREMONT_IN, IMAGES.FREMONT_CLICK], 1, 0, (function() {
        regionPreference("Fremont")
    }), 5, 300, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.NEWARK_OUT, IMAGES.NEWARK_IN, IMAGES.NEWARK_CLICK], 1, 0, (function() {
        regionPreference("Newark")
    }), 140, 300, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.LONDON_OUT, IMAGES.LONDON_IN, IMAGES.LONDON_CLICK], 1, 0, (function() {
        regionPreference("London")
    }), -265, 365, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.FRANKFURT_OUT, IMAGES.FRANKFURT_IN, IMAGES.FRANKFURT_CLICK], 1, 0, (function() {
        regionPreference("Frankfurt")
    }), -130, 365, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.SINGAPORE_OUT, IMAGES.SINGAPORE_IN, IMAGES.SINGAPORE_CLICK], 1, 0, (function() {
        regionPreference("Singapore")
    }), 5, 365, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.TOKYO_OUT, IMAGES.TOKYO_IN, IMAGES.TOKYO_CLICK], 1, 0, (function() {
        regionPreference("Tokyo")
    }), 140, 365, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.TORONTO_OUT, IMAGES.TORONTO_IN, IMAGES.TORONTO_CLICK], 1, 0, (function() {
        regionPreference("Toronto")
    }), -265, 430, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(253, 110, "", [IMAGES.MUMBAI_OUT, IMAGES.MUMBAI_IN, IMAGES.MUMBAI_CLICK], 1, 0, (function() {
        regionPreference("Mumbai")
    }), -130, 430, X | Y, q), this.buttons[I++].view = y, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(y)
    }), 230, 140, X | Y, q), this.buttons[I++].view = w, this.buttons[I] = gui_create_button(230, 352, "", [IMAGES.DAYS3_OUT, IMAGES.DAYS3_IN, IMAGES.DAYS3_CLICK], 1, 0, (function() {
        openXsolla(350)
    }), -280, 240, X | Y, q), this.buttons[I++].view = w, this.buttons[I] = gui_create_button(230, 352, "", [IMAGES.DAYS7_OUT, IMAGES.DAYS7_IN, IMAGES.DAYS7_CLICK], 1, 0, (function() {
        openXsolla(700)
    }), -130, 240, X | Y, q), this.buttons[I++].view = w, this.buttons[I] = gui_create_button(230, 352, "", [IMAGES.DAYS30_OUT, IMAGES.DAYS30_IN, IMAGES.DAYS30_CLICK], 1, 0, (function() {
        openXsolla(1400)
    }), 20, 240, X | Y, q), this.buttons[I++].view = w, this.buttons[I] = gui_create_button(230, 352, "", [IMAGES.DAYS90_OUT, IMAGES.DAYS90_IN, IMAGES.DAYS90_CLICK], 1, 0, (function() {
        openXsolla(3e3)
    }), 170, 240, X | Y, q), this.buttons[I++].view = w, this.buttons[I] = gui_create_button(105, 119, "", [IMAGES.COPY_PASTE_OUT, IMAGES.COPY_PASTE_IN, IMAGES.COPY_PASTE_CLICK], 1, 0, (function() {
        document.getElementById("serverAddressInput").select(), document.execCommand("copy")
    }), 170, 310, X | Y, q), this.buttons[I++].view = z, this.buttons[I] = gui_create_button(105, 119, "", [IMAGES.RESTART_OUT, IMAGES.RESTART_IN, IMAGES.RESTART_CLICK], 1, 0, (function() {
        rebootServer()
    }), 235, 310, X | Y, q), this.buttons[I++].view = z, this.buttons[I] = gui_create_button(204, 115, "", [IMAGES.GUIDE_OUT, IMAGES.GUIDE_IN, IMAGES.GUIDE_CLICK], 1, 0, (function() {
        window.open("./commands.html", "_blank")
    }), -265, 490, X | Y, q), this.buttons[I++].view = z, this.buttons[I] = gui_create_button(145, 69, "", [IMAGES.PRICE5_OUT, IMAGES.PRICE5_IN, IMAGES.PRICE5_CLICK], 1, 0, (function() {
        k(C)
    }), -210, 170, X | Y, q), this.buttons[I++].view = R, this.buttons[I] = gui_create_button(145, 69, "", [IMAGES.PRICE1_OUT, IMAGES.PRICE1_IN, IMAGES.PRICE1_CLICK], 1, 0, (function() {
        k(b)
    }), 70, 170, X | Y, q), this.buttons[I++].view = R, this.buttons[I] = gui_create_button(145, 69, "", [IMAGES.PRICE2_OUT, IMAGES.PRICE2_IN, IMAGES.PRICE2_CLICK], 1, 0, (function() {
        k(g)
    }), 70, 204, X | Y, q), this.buttons[I++].view = R, this.buttons[I] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, (function() {
        k(D)
    }), -210, 204, X | Y, q), this.buttons[I++].view = R, this.buttons[I] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, (function() {
        k(m)
    }), 70, 238, X | Y, q), this.buttons[I++].view = R, this.buttons[I] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], 1, 0, (function() {
        i.isUserLogged() ? buyKit(0, 300) : k(d)
    }), 307, 205, X | Y, q), this.buttons[I++].view = R, this.buttons[I] = gui_create_button(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, (function() {
        k(p)
    }), -210, 238, X | Y, q), this.buttons[I++].view = R, this.buttons[I] = gui_create_button(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], 1, 0, (function() {
        i.isUserLogged() ? buyKit(1, 600) : k(d)
    }), 307, 239, X | Y, q), this.buttons[I++].view = R, this.buttons[I] = gui_create_button(192, 101, "", [IMAGES.YES_BUTTON_OUT, IMAGES.YES_BUTTON_IN, IMAGES.YES_BUTTON_CLICK], 1, 0, (function() {
        buyNameChanger()
    }), -100, 250, X | Y, q), this.buttons[I++].view = H, this.buttons[I] = gui_create_button(192, 104, "", [IMAGES.YES_300_BUTTON_OUT, IMAGES.YES_300_BUTTON_IN, IMAGES.YES_300_BUTTON_CLICK], 1, 0, (function() {
        buyNameChanger()
    }), -100, 239, X | Y, q), this.buttons[I++].view = V, this.buttons[I] = gui_create_button(192, 101, "", [IMAGES.NO_BUTTON_OUT, IMAGES.NO_BUTTON_IN, IMAGES.NO_BUTTON_CLICK], 1, 0, (function() {
        k(u)
    }), 10, 250, X | Y, q), this.buttons[I++].view = H, this.buttons[I] = gui_create_button(192, 104, "", [IMAGES.NO_THANKS_BUTTON_OUT, IMAGES.NO_THANKS_BUTTON_IN, IMAGES.NO_THANKS_BUTTON_CLICK], 1, 0, (function() {
        k(u)
    }), 10, 239, X | Y, q), this.buttons[I++].view = V, RARITY_BUTTON = [], RARITY_BUTTON[RARITY.FREE] = [IMAGES.FREE_ITEM_OUT, IMAGES.FREE_ITEM_IN, IMAGES.FREE_ITEM_CLICK], RARITY_BUTTON[RARITY.WOOD] = [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], RARITY_BUTTON[RARITY.STONE] = [IMAGES.STONE_ITEM_OUT, IMAGES.STONE_ITEM_IN, IMAGES.STONE_ITEM_CLICK], RARITY_BUTTON[RARITY.GOLD] = [IMAGES.GOLD_ITEM_OUT, IMAGES.GOLD_ITEM_IN, IMAGES.GOLD_ITEM_CLICK], RARITY_BUTTON[RARITY.DIAMOND] = [IMAGES.DIAMOND_ITEM_OUT, IMAGES.DIAMOND_ITEM_IN, IMAGES.DIAMOND_ITEM_CLICK], RARITY_BUTTON[RARITY.AMETHYST] = [IMAGES.AMETHYST_ITEM_OUT, IMAGES.AMETHYST_ITEM_IN, IMAGES.AMETHYST_ITEM_CLICK], RARITY_BUTTON[RARITY.REIDITE] = [IMAGES.REIDITE_ITEM_OUT, IMAGES.REIDITE_ITEM_IN, IMAGES.REIDITE_ITEM_CLICK], RARITY_BUTTON[RARITY.LEVEL] = [IMAGES.LEVEL_ITEM_OUT, IMAGES.LEVEL_ITEM_IN, IMAGES.LEVEL_ITEM_CLICK], RARITY_BUTTON[RARITY.SPECIAL] = [IMAGES.SPECIAL_ITEM_OUT, IMAGES.SPECIAL_ITEM_IN, IMAGES.SPECIAL_ITEM_CLICK], FIRST_BUTTON_SKIN = I, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, X | Y, q), this.buttons[I++].view = v, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(c)
    }), -320, 470, X | Y, q), this.buttons[I++].view = v, FIRST_BUTTON_ACCESSORY = I, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, X | Y, q), this.buttons[I++].view = L, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(c)
    }), -320, 470, X | Y, q), this.buttons[I++].view = L, FIRST_BUTTON_LOOT = I, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, X | Y, q), this.buttons[I++].view = G, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(c)
    }), -320, 470, X | Y, q), this.buttons[I++].view = G, FIRST_BUTTON_BAG = I, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, X | Y, q), this.buttons[I++].view = M, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(c)
    }), -320, 470, X | Y, q), this.buttons[I++].view = M, FIRST_BUTTON_BOOK = I, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, X | Y, q), this.buttons[I++].view = f, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(c)
    }), -320, 470, X | Y, q), this.buttons[I++].view = f, FIRST_BUTTON_CRATE = I, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 205, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 300, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, -29, 395, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 205, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 300, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 65, 395, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 205, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 300, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], 1, 0, void 0, 159, 395, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], 1, 0, void 0, -61, 315, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], 1, 0, void 0, 260, 315, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(c)
    }), -320, 470, X | Y, q), this.buttons[I++].view = P, this.buttons[I] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_1_OUT, IMAGES.SPIN_BUTTON_1_IN, IMAGES.SPIN_BUTTON_1_CLICK], 1, 0, (function() {
        i.isUserLogged() ? buySpin(3, 50) : k(d)
    }), -65, 197, X | Y, q), this.buttons[I++].view = b, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(R)
    }), 309, 180, X | Y, q), this.buttons[I++].view = b, this.buttons[I] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_2_OUT, IMAGES.SPIN_BUTTON_2_IN, IMAGES.SPIN_BUTTON_2_CLICK], 1, 0, (function() {
        i.isUserLogged() ? buySpin(0, 100) : k(d)
    }), -65, 197, X | Y, q), this.buttons[I++].view = C, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(R)
    }), 309, 180, X | Y, q), this.buttons[I++].view = C, this.buttons[I] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_3_OUT, IMAGES.SPIN_BUTTON_3_IN, IMAGES.SPIN_BUTTON_3_CLICK], 1, 0, (function() {
        i.isUserLogged() ? buySpin(4, 150) : k(d)
    }), -65, 197, X | Y, q), this.buttons[I++].view = g, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(R)
    }), 309, 180, X | Y, q), this.buttons[I++].view = g, this.buttons[I] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, (function() {
        i.isUserLogged() ? buySpin(1, 300) : k(d)
    }), -65, 197, X | Y, q), this.buttons[I++].view = D, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(R)
    }), 309, 180, X | Y, q), this.buttons[I++].view = D, this.buttons[I] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_5_OUT, IMAGES.SPIN_BUTTON_5_IN, IMAGES.SPIN_BUTTON_5_CLICK], 1, 0, (function() {
        i.isUserLogged() ? buySpin(2, 600) : k(d)
    }), -65, 197, X | Y, q), this.buttons[I++].view = p, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(R)
    }), 309, 180, X | Y, q), this.buttons[I++].view = p, this.buttons[I] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], 1, 0, (function() {
        i.isUserLogged() ? buySpin(5, 300) : k(d)
    }), -65, 197, X | Y, q), this.buttons[I++].view = m, this.buttons[I] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], 1, 0, (function() {
        k(R)
    }), 309, 180, X | Y, q), this.buttons[I++].view = m;
    var Te = I;
    this.buttons[I] = gui_create_button(205, 67, "", [IMAGES.SEASON1_PROFILE_OUT, IMAGES.SEASON1_PROFILE_IN, IMAGES.SEASON1_PROFILE_CLICK], 1, 0, (function() {
        _e(void 0, 0)
    }), -305, 125, X | Y, q), this.buttons[I++].view = u;
    var Ee = I;
    this.buttons[I] = gui_create_button(205, 67, "", [IMAGES.SEASON2_PROFILE_OUT, IMAGES.SEASON2_PROFILE_IN, IMAGES.SEASON2_PROFILE_CLICK], 1, 0, (function() {
        _e(void 0, 1)
    }), -305, 170, X | Y, q), this.buttons[I++].view = u;
    var Ie = I;
    this.buttons[I] = gui_create_button(205, 67, "", [IMAGES.SEASON3_PROFILE_OUT, IMAGES.SEASON3_PROFILE_IN, IMAGES.SEASON3_PROFILE_CLICK], 1, 0, (function() {
        _e(void 0, 2)
    }), -305, 215, X | Y, q), this.buttons[I++].view = u;
    var le = I;
    this.buttons[I] = gui_create_button(205, 67, "", [IMAGES.SEASON4_PROFILE_OUT, IMAGES.SEASON4_PROFILE_IN, IMAGES.SEASON4_PROFILE_CLICK], 1, 0, (function() {
        _e(void 0, 3)
    }), -305, 260, X | Y, q), this.buttons[I++].view = u;
    var ue = I;
    this.buttons[I] = gui_create_button(205, 67, "", [IMAGES.SEASON5_PROFILE_OUT, IMAGES.SEASON5_PROFILE_IN, IMAGES.SEASON5_PROFILE_CLICK], 1, 0, (function() {
        _e(void 0, 3)
    }), -305, 305, X | Y, q), this.buttons[I++].view = u;
    var de = I;
    this.buttons[I] = gui_create_button(460, 73, "", [IMAGES.TOTAL_PROFILE_OUT, IMAGES.TOTAL_PROFILE_IN, IMAGES.TOTAL_PROFILE_CLICK], 1, 0, (function() {
        _e(-1)
    }), -180, 170, X | Y, q), this.buttons[I++].view = u;
    var ce = I;
    this.buttons[I] = gui_create_button(222, 68, "", [IMAGES.NORMAL_PROFILE_OUT, IMAGES.NORMAL_PROFILE_IN, IMAGES.NORMAL_PROFILE_CLICK], 1, 0, (function() {
        _e(WORLD.MODE_PVP)
    }), -180, 215, X | Y, q), this.buttons[I++].view = u;
    var Re = I;
    this.buttons[I] = gui_create_button(222, 68, "", [IMAGES.FOREST_PROFILE_OUT, IMAGES.FOREST_PROFILE_IN, IMAGES.FOREST_PROFILE_CLICK], 1, 0, (function() {
        _e(WORLD.MODE_LEGACY)
    }), -180, 260, X | Y, q), this.buttons[I++].view = u;
    var he = I;
    this.buttons[I] = gui_create_button(222, 68, "", [IMAGES.ZOMBIE_PROFILE_OUT, IMAGES.ZOMBIE_PROFILE_IN, IMAGES.ZOMBIE_PROFILE_CLICK], 1, 0, (function() {
        _e(WORLD.MODE_ZOMBIES)
    }), -60, 215, X | Y, q), this.buttons[I++].view = u;
    var Ae = I;
    this.buttons[I] = gui_create_button(222, 68, "", [IMAGES.VAMPIRE_PROFILE_OUT, IMAGES.VAMPIRE_PROFILE_IN, IMAGES.VAMPIRE_PROFILE_CLICK], 1, 0, (function() {
        _e(WORLD.MODE_VAMPIRES)
    }), -60, 260, X | Y, q), this.buttons[I++].view = u, this.LEADERBOARD_TOTAL = I, this.buttons[I] = gui_create_button(143, 66, "", [IMAGES.TOTAL_LEAD_OUT, IMAGES.TOTAL_LEAD_IN, IMAGES.TOTAL_LEAD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, ui.LEADERBOARD_TOTAL)
    }), -298, 110, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_NORMAL = I, this.buttons[I] = gui_create_button(104, 66, "", [IMAGES.NORMAL_LEAD_OUT, IMAGES.NORMAL_LEAD_IN, IMAGES.NORMAL_LEAD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, ui.LEADERBOARD_NORMAL)
    }), -223, 110, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_FOREST = I, this.buttons[I] = gui_create_button(110, 66, "", [IMAGES.FOREST_LEAD_OUT, IMAGES.FOREST_LEAD_IN, IMAGES.FOREST_LEAD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, ui.LEADERBOARD_FOREST)
    }), -168, 110, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_ZOMBIE = I, this.buttons[I] = gui_create_button(88, 66, "", [IMAGES.ZOMBIE_LEAD_OUT, IMAGES.ZOMBIE_LEAD_IN, IMAGES.ZOMBIE_LEAD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, ui.LEADERBOARD_ZOMBIE)
    }), -110, 110, X | Y, q), this.buttons[I++].view = A, this.LEADERBOARD_VAMPIRE = I, this.buttons[I] = gui_create_button(88, 66, "", [IMAGES.VAMPIRE_LEAD_OUT, IMAGES.VAMPIRE_LEAD_IN, IMAGES.VAMPIRE_LEAD_CLICK], 1, 0, (function() {
        getLeaderboard(void 0, ui.LEADERBOARD_VAMPIRE)
    }), -63, 110, X | Y, q), this.buttons[I++].view = A, this.buttons[I] = gui_create_button(86, 44, "", [IMAGES.TERMS_BUTTON_OUT, IMAGES.TERMS_BUTTON_IN, IMAGES.TERMS_BUTTON_CLICK], 1, 0, (function() {
        window.open("./terms.html", "_blank")
    }), 349, 290, X | Y, q), this.buttons[I++].view = R;
    var Se = new r(COSMETICS.SKIN, FIRST_BUTTON_SKIN, (function(e) {
            ui.skin = e, 1 === ui.unlock.skin[e] && Cookies.set("starve_skin", "" + e, {
                expires: 30
            })
        }), this.skin, this.unlock.skin),
        Ne = new r(COSMETICS.BAG, FIRST_BUTTON_BAG, (function(e) {
            ui.bag = e, 1 === ui.unlock.bag[e] && Cookies.set("starve_bag", "" + e, {
                expires: 30
            })
        }), this.bag, this.unlock.bag),
        Oe = new r(COSMETICS.BOOK, FIRST_BUTTON_BOOK, (function(e) {
            ui.book = e, 1 === ui.unlock.book[e] && Cookies.set("starve_book", "" + e, {
                expires: 30
            })
        }), this.book, this.unlock.book),
        Ce = new r(COSMETICS.CRATE, FIRST_BUTTON_CRATE, (function(e) {
            ui.dead = e, 1 === ui.unlock.dead[e] && Cookies.set("starve_dead", "" + e, {
                expires: 30
            })
        }), this.dead, this.unlock.dead),
        ge = new r(COSMETICS.CRATE, FIRST_BUTTON_LOOT, (function(e) {
            ui.crate = e, 1 === ui.unlock.crate[e] && Cookies.set("starve_crate", "" + e, {
                expires: 30
            })
        }), this.crate, this.unlock.crate),
        pe = new r(COSMETICS.ACCESSORY, FIRST_BUTTON_ACCESSORY, (function(e) {
            ui.accessory = e, 1 === ui.unlock.accessory[e] && Cookies.set("starve_accessory", "" + e, {
                expires: 30
            })
        }), this.accessory, this.unlock.accessory);
    this.trigger_mousedown = function(e) {
        mouse.pos = get_mouse_pos(i.can, e);
        for (var t = 0; t < i.buttons.length; t++) i.buttons[t].info.active === Z && i.buttons[t].trigger(i.can, mouse.pos, MOUSE_DOWN)
    }, this.trigger_mouseup = function(e) {
        mouse.pos = get_mouse_pos(i.can, e);
        for (var t = 0; t < i.buttons.length; t++) {
            var r = i.buttons[t];
            if (r.info.active === Z && r.trigger(i.can, mouse.pos, MOUSE_UP)) return void r.info.callback()
        }
    }, this.current_cursor = !1, this.trigger_mousemove = function(t) {
        mouse.pos = get_mouse_pos(i.can, t);
        for (var r = !1, a = 0; a < i.buttons.length; a++) i.buttons[a].info.active === Z && (r |= i.buttons[a].trigger(i.can, mouse.pos, MOUSE_MOVE));
        i.current_cursor !== r && (i.current_cursor = r, e.style.cursor = r ? i.cursor1 : i.cursor0)
    }, this.add_event_listener = function() {
        window.addEventListener("mousedown", this.trigger_mousedown, !1), window.addEventListener("mouseup", this.trigger_mouseup, !1), window.addEventListener("mousemove", this.trigger_mousemove, !1)
    }, this.remove_event_listener = function() {
        window.removeEventListener("mousedown", this.trigger_mousedown, !1), window.removeEventListener("mouseup", this.trigger_mouseup, !1), window.removeEventListener("mousemove", this.trigger_mousemove, !1)
    }
}

function Game(e, t) {
    var i = this;
    this.can = e, this.ctx = t, window.navigator.userAgent.indexOf("Edge") > -1 ? (this.cursor0 = "default", this.cursor1 = "pointer") : (this.cursor0 = "url('img/cursor0.png'), default", this.cursor1 = "url('img/cursor1.png'), pointer"), this.show_ui = 1, this.show_clock = 1, this.show_recipe_book = 1, this.show_quest = 1, this.team_box = {
        id: document.getElementById("team_box"),
        style: document.getElementById("team_box").style,
        update: function() {
            this.style.left = Math.floor(canw2 - 125) + "px", this.style.top = "110px"
        }
    }, this.audio = {
        button_on: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_ON]),
        button_off: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_OFF])
    }, this.sign = {
        open: !1,
        breads: 0,
        symbol: document.getElementById("sign_object"),
        symbol_id: 0,
        id: document.getElementById("sign_window"),
        style: document.getElementById("sign_window").style,
        button: gui_create_button(60, 60, "", sprite[SPRITE.SIGN_BUTTON]),
        update_button: function() {
            var e = Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + sprite[SPRITE.INV_WOOD][0].width) + 35);
            this.button.info.translate.x = e, this.button.info.translate.y = 22
        },
        update: function() {
            this.style.left = Math.floor(canw2 - 150) + "px", this.style.top = Math.floor(canh2 - 115) + "px"
        },
        quit: function() {
            game.sign.style.display = "none", game.sign.open = !1
        },
        select: function() {
            game.sign.open = !game.sign.open, game.sign.open ? game.sign.style.display = "inline-block" : game.sign.style.display = "none"
        },
        ok: function() {
            client.update_sign(user.sign.iid, game.sign.symbol_id), game.sign.select()
        },
        up: function() {
            game.sign.symbol_id = 0 === game.sign.symbol_id ? CLIENT.SYMBOL_MAX - 1 : game.sign.symbol_id - 1, game.sign.symbol.src = "./img/sign" + game.sign.symbol_id + ".png"
        },
        down: function() {
            game.sign.symbol_id = (game.sign.symbol_id + 1) % CLIENT.SYMBOL_MAX, game.sign.symbol.src = "./img/sign" + game.sign.symbol_id + ".png"
        }
    }, document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, !1), document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, !1), document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, !1), document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, !1), this.market = {
        open: !1,
        id: document.getElementById("shop_market"),
        style: document.getElementById("shop_market").style,
        items: [{
            id: 0,
            name: "wood",
            val: 1,
            b: 1,
            a: 3,
            img_item: SPRITE.INV_WOOD
        }, {
            id: 1,
            name: "stone",
            val: 1,
            b: 1,
            a: 4,
            img_item: SPRITE.INV_STONE
        }, {
            id: 2,
            name: "gold",
            val: 1,
            b: 1,
            a: 6,
            img_item: SPRITE.INV_GOLD
        }, {
            id: 3,
            name: "diamond",
            val: 4,
            b: 4,
            a: 1,
            img_item: SPRITE.INV_DIAMOND
        }, {
            id: 4,
            name: "amethyst",
            val: 8,
            b: 8,
            a: 1,
            img_item: SPRITE.INV_AMETHYST
        }, {
            id: 5,
            name: "reidite",
            val: 16,
            b: 16,
            a: 1,
            img_item: SPRITE.INV_REIDITE
        }, {
            id: 6,
            name: "pumpkin_seed",
            val: 10,
            b: 10,
            a: 1,
            img_item: SPRITE.INV_PUMPKIN_SEED
        }, {
            id: 7,
            name: "carrot_seed",
            val: 16,
            b: 16,
            a: 1,
            img_item: SPRITE.INV_CARROT_SEED
        }, {
            id: 8,
            name: "tomato_seed",
            val: 20,
            b: 20,
            a: 1,
            img_item: SPRITE.INV_TOMATO_SEED
        }, {
            id: 9,
            name: "thornbush_seed",
            val: 30,
            b: 30,
            a: 1,
            img_item: SPRITE.INV_THORNBUSH_SEED
        }, {
            id: 10,
            name: "garlic_seed",
            val: 40,
            b: 40,
            a: 1,
            img_item: SPRITE.INV_GARLIC_SEED
        }, {
            id: 11,
            name: "watermelon_seed",
            val: 60,
            b: 60,
            a: 1,
            img_item: SPRITE.INV_WATERMELON_SEED
        }],
        button: gui_create_button(60, 60, "", sprite[SPRITE.MARKET_BUTTON]),
        update: function() {
            this.style.left = Math.floor(canw2 - 450) + "px", this.style.top = Math.floor(canh2 - 270) + "px"
        },
        select: function() {
            game.market.open = !game.market.open, game.market.open ? game.market.style.display = "inline-block" : game.market.style.display = "none"
        },
        quit: function() {
            game.market.style.display = "none", game.market.open = !1
        },
        buy: function() {
            client.buy_market(this.itemMarket)
        },
        change: function() {
            this.id;
            if (1 === this.itemMarket.a) {
                var e = Math.floor(Number(this.value) * this.itemMarket.b);
                this.itemMarket.val = e, document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = e + ""
            } else {
                e = Math.floor(Number(this.value) / this.itemMarket.a);
                this.itemMarket.val = e, document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = e + ""
            }
        }
    }, document.getElementById("quit_market").addEventListener("mouseup", this.market.quit, !1);
    for (var r = [
            ["mouseup", this.market.buy, "buy_"],
            ["click", this.market.change, ""],
            ["change", this.market.change, ""],
            ["keypress", this.market.keypress, ""]
        ], a = 0; a < this.market.items.length; a++) {
        var n = this.market.items[a];
        document.getElementById(n.name + "_market").src = void 0 === sprite[n.img_item][0]._src ? sprite[n.img_item][0].src : sprite[n.img_item][0]._src, 1 === n.a ? (document.getElementById(n.name + "_trad_number").innerHTML = n.b, document.getElementById(n.name + "_number").value = 1, document.getElementById(n.name + "_number").step = 1, document.getElementById(n.name + "_number").min = 1, document.getElementById(n.name + "_number").max = Math.floor(255 / n.b)) : (document.getElementById(n.name + "_trad_number").innerHTML = 1, document.getElementById(n.name + "_number").value = n.a, document.getElementById(n.name + "_number").step = n.a, document.getElementById(n.name + "_number").min = n.a), document.getElementById("buy_" + n.name + "_number").itemMarket = n, document.getElementById(n.name + "_number").itemMarket = n;
        for (var o = 0; o < r.length; o++) document.getElementById(r[o][2] + n.name + "_number").addEventListener(r[o][0], r[o][1], !1)
    }
    $("[type='number']").keypress((function(e) {
        e.preventDefault()
    })), this.options = {
        open: !1,
        id: document.getElementById("option_in_game"),
        style: document.getElementById("option_in_game").style,
        agree: document.getElementById("agree_ing").style,
        cancel_agree: document.getElementById("cancel_agree_ing").style,
        quests_agree: document.getElementById("quest_agree_ing").style,
        spectator_agree: document.getElementById("spectator_agree_ing").style,
        feed_agree: document.getElementById("auto_feed_agree_ing").style,
        info_box_agree: document.getElementById("info_agree_ing").style,
        aliasing_agree: document.getElementById("pixelated_agree_ing").style,
        button: gui_create_button(60, 60, "", sprite[SPRITE.OPTION_BUTTON]),
        select_options: function() {
            game.options.open = !game.options.open, game.options.open ? game.options.style.display = "inline-block" : game.options.style.display = "none"
        },
        azerty: function() {
            ui.set_azerty()
        },
        qwerty: function() {
            ui.set_qwerty()
        },
        high: function() {
            ui.high_quality()
        },
        low: function() {
            ui.low_quality()
        },
        checkbox: function() {
            game.safe_delete.checkbox()
        },
        cancel_checkbox: function() {
            game.safe_cancel.checkbox()
        },
        quest_checkbox: function() {
            game.quests.checkbox()
        },
        spectator_checkbox: function() {
            user.show_spectators.invert()
        },
        feed_checkbox: function() {
            user.auto_feed.invert()
        },
        quit: function() {
            game.options.style.display = "none", game.options.open = !1
        },
        update: function() {
            this.style.left = Math.floor(canw2 - 235) + "px", this.style.top = Math.floor(canh2 - 170) + "px"
        }
    }, document.getElementById("azerty_ing").addEventListener("mouseup", this.options.azerty, !1), document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.qwerty, !1), document.getElementById("low_ing").addEventListener("mouseup", this.options.low, !1), document.getElementById("high_ing").addEventListener("mouseup", this.options.high, !1), document.getElementById("quit_opt").addEventListener("mouseup", this.options.quit, !1), document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.checkbox, !1), document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.quest_checkbox, !1), document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.cancel_checkbox, !1), document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.spectator_checkbox, !1), document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.feed_checkbox, !1), this.safe_cancel = {
        open: !1,
        activated: Cookies.get("starve_cancel") && "0" === Cookies.get("starve_cancel") ? 0 : 1,
        id: document.getElementById("cancel_sure_delete"),
        style: document.getElementById("cancel_sure_delete").style,
        agree: document.getElementById("cancel_agree").style,
        button: 0,
        i: 0,
        quit: function() {
            game.safe_cancel.style.display = "none", game.safe_cancel.open = !1
        },
        yes: function() {
            user.craft.crafting && client.cancel_crafting(), game.safe_cancel.quit()
        },
        checkbox: function() {
            game.safe_cancel.activated ? (Cookies.set("starve_cancel", "0"), game.safe_cancel.agree.display = "inline-block", game.options.cancel_agree.display = "none") : (Cookies.set("starve_cancel", "1"), game.safe_cancel.agree.display = "none", game.options.cancel_agree.display = "inline-block"), game.safe_cancel.activated = !game.safe_cancel.activated
        },
        del: function() {
            this.activated ? (this.style.display = "inline-block", this.open = !0) : this.yes()
        },
        update: function() {
            this.style.left = Math.floor(canw2 - 235) + "px", this.style.top = Math.floor(canh2 - 130) + "px"
        }
    }, this.safe_cancel.id.oncontextmenu = function() {
        return !1
    }, this.safe_cancel.agree.display = "none", this.safe_cancel.activated ? this.options.cancel_agree.display = "inline-block" : this.options.cancel_agree.display = "none", document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.safe_cancel.yes, !1), document.getElementById("cancel_no_delete").addEventListener("mouseup", this.safe_cancel.quit, !1), document.getElementById("cancel_case_agree").addEventListener("mouseup", this.safe_cancel.checkbox, !1), document.addEventListener("cancel_sure_delete", (function(e) {
        e.preventDefault()
    }), !1), this.aliasing = {
        activated: Cookies.get("starve_aliasing") && "0" === Cookies.get("starve_aliasing") ? 0 : 1,
        set_aliasing: function(e) {
            document.getElementById("game_canvas").style.imageRendering = e ? "pixelated" : "auto"
        },
        checkbox: function() {
            0 === game.aliasing.activated ? (Cookies.set("starve_aliasing", "1"), game.aliasing.set_aliasing(1), game.options.aliasing_agree.display = "inline-block") : (Cookies.set("starve_aliasing", "0"), game.aliasing.set_aliasing(0), game.options.aliasing_agree.display = "none"), game.aliasing.activated = (game.aliasing.activated + 1) % 2
        }
    }, 1 === this.aliasing.activated ? this.options.aliasing_agree.display = "inline-block" : (this.aliasing.set_aliasing(0), this.options.aliasing_agree.display = "none"), document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.aliasing.checkbox, !1), this.info_box = {
        activated: Cookies.get("starve_info_box") && "0" === Cookies.get("starve_info_box") ? 0 : 1,
        display: 0,
        x: 0,
        y: 0,
        id: 0,
        craft: 0,
        checkbox: function() {
            0 === game.info_box.activated ? (Cookies.set("starve_info_box", "1"), game.options.info_box_agree.display = "inline-block") : (Cookies.set("starve_info_box", "0"), game.options.info_box_agree.display = "none"), game.info_box.activated = (game.info_box.activated + 1) % 2
        },
        trigger: function(e, t, i) {
            return e && this.activated && (this.display = 1, this.id = 0 === i ? t.id : RECIPES[t.id].id2, this.x = t.info.translate.x + 80, this.y = t.info.translate.y, this.craft = i), e
        }
    }, 1 === this.info_box.activated ? this.options.info_box_agree.display = "inline-block" : this.options.info_box_agree.display = "none", document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.info_box.checkbox, !1), Cookies.get("starve_scale") && (ratio_opt = Number(Cookies.get("starve_scale")), document.getElementById("input_ratio").value = ratio_opt, ratio_opt *= devicePixelRatio / backingStoreRatio, resize_canvas()), this.change_ratio = function() {
        Cookies.set("starve_scale", "" + document.getElementById("input_ratio").value), ratio_opt = document.getElementById("input_ratio").value * (devicePixelRatio / backingStoreRatio), resize_canvas()
    }, document.getElementById("input_ratio").addEventListener("input", this.change_ratio, !1), this.safe_delete = {
        open: !1,
        activated: Cookies.get("starve_safe") && "0" === Cookies.get("starve_safe") ? 0 : 1,
        id: document.getElementById("sure_delete"),
        style: document.getElementById("sure_delete").style,
        agree: document.getElementById("agree").style,
        button: 0,
        i: 0,
        quit: function() {
            game.safe_delete.style.display = "none", game.safe_delete.open = !1
        },
        all: function() {
            user.build.wait || (user.craft.preview < 0 && user.craft.id < 0 && client.delete_inv(game.safe_delete.button), game.safe_delete.quit())
        },
        recycle: function() {
            user.craft.workbench && !user.build.wait && (user.craft.preview < 0 && user.craft.id < 0 && client.recycle_inv(game.safe_delete.button), game.safe_delete.quit())
        },
        one: function() {
            user.build.wait || (user.craft.preview < 0 && user.craft.id < 0 && client.delete_one_inv(game.safe_delete.button), game.safe_delete.quit())
        },
        checkbox: function() {
            game.safe_delete.activated ? (Cookies.set("starve_safe", "0"), game.safe_delete.agree.display = "inline-block", game.options.agree.display = "none") : (Cookies.set("starve_safe", "1"), game.safe_delete.agree.display = "none", game.options.agree.display = "inline-block"), game.safe_delete.activated = !game.safe_delete.activated
        },
        del: function(e) {
            this.button = e, document.getElementById("item_to_del").src = void 0 === sprite[INV_INFOS[e].img][0]._src ? sprite[INV_INFOS[e].img][0].src : sprite[INV_INFOS[e].img][0]._src, INV_INFOS[e].recycle && !user.zombie && user.craft.workbench ? document.getElementById("recycle_delete").style.display = "inline-block" : document.getElementById("recycle_delete").style.display = "none", this.activated ? (this.style.display = "inline-block", this.open = !0) : this.all()
        },
        update: function() {
            this.style.left = Math.floor(canw2 - 235) + "px", this.style.top = Math.floor(canh2 - 175) + "px"
        }
    }, this.safe_delete.agree.display = "none", this.safe_delete.activated ? this.options.agree.display = "inline-block" : this.options.agree.display = "none", document.getElementById("one_delete").addEventListener("mouseup", this.safe_delete.one, !1), document.getElementById("yes_delete").addEventListener("mouseup", this.safe_delete.all, !1), document.getElementById("recycle_delete").addEventListener("mouseup", this.safe_delete.recycle, !1), document.getElementById("no_delete").addEventListener("mouseup", this.safe_delete.quit, !1), document.getElementById("case_agree").addEventListener("mouseup", this.safe_delete.checkbox, !1), this.shop = {
        open: !1,
        kit: -1,
        button: gui_create_button(60, 60, "", sprite[SPRITE.SHOP]),
        id: document.getElementById("shop_starterkit"),
        style: document.getElementById("shop_starterkit").style,
        update: function() {
            this.style.left = Math.floor(canw2 - 300) + "px", this.style.top = Math.floor(canh2 - 215) + "px"
        },
        quit: function() {
            game.shop.open = !1, game.shop.style.display = "none"
        },
        select: function() {
            game.shop.open = !game.shop.open, game.shop.open ? game.shop.style.display = "inline-block" : game.shop.style.display = "none"
        },
        buy: function() {
            game.shop.kit >= 0 && (client.choose_kit(game.shop.kit), game.shop.quit(), ga && ga("send", "event", "Game", "kit", "" + game.shop.kit))
        },
        init: function() {
            var e = user.shop.value;
            document.getElementById("points_bank").innerHTML = Utils.simplify_number(e) + " points";
            for (var t = 0; t < KIT.length; t++) KIT[t].price > e ? document.getElementById("starter" + (t + 1)).style.opacity = "0.4" : document.getElementById("starter" + (t + 1)).style.opacity = "1";
            for (t = 1; t < 13; t++) document.getElementById("inv_shop" + t).src = "./img/empty-shop.png", document.getElementById("amount_shop" + t).innerHTML = "";
            document.getElementById("buy_kit").style.opacity = "0.2"
        },
        get_starter: function() {
            if (this.id.length > 8) var e = Number(this.id.charAt(7) + this.id.charAt(8));
            else e = Number(this.id.charAt(7));
            var t = KIT[e - 1];
            user.shop.value >= t.price ? (game.shop.kit = e, document.getElementById("buy_kit").style.opacity = "1") : (game.shop.kit = -1, document.getElementById("buy_kit").style.opacity = "0.2"), t = t.items;
            for (var i = 1, r = 1; i < t.length + 1; i++) t[i - 1][1] !== INV.BAG && (document.getElementById("inv_shop" + r).style.display = "inline-block", document.getElementById("inv_shop" + r).src = void 0 === sprite[INV_INFOS[t[i - 1][1]].img][0]._src ? sprite[INV_INFOS[t[i - 1][1]].img][0].src : sprite[INV_INFOS[t[i - 1][1]].img][0]._src, document.getElementById("amount_shop" + r).innerHTML = "" + t[i - 1][0], r++);
            for (; r < 13; r++) document.getElementById("inv_shop" + r).src = "./img/empty-shop.png", document.getElementById("amount_shop" + r).innerHTML = ""
        }
    }, document.getElementById("quit3").addEventListener("mouseup", this.shop.quit, !1), document.getElementById("buy_kit").addEventListener("mouseup", this.shop.buy, !1);
    for (o = 1; o < 11; o++) document.getElementById("starter" + o).addEventListener("mouseup", this.shop.get_starter, !1);
    this.quests = {
        open: !1,
        activated: Cookies.get("starve_quests") && "1" === Cookies.get("starve_quests") ? 1 : 0,
        button: gui_create_button(60, 60, "", sprite[SPRITE.QUEST_BUTTON]),
        id: document.getElementById("chronoquest"),
        style: document.getElementById("chronoquest").style,
        update: function() {
            this.style.left = Math.floor(canw2 - 420) + "px", this.style.top = Math.floor(canh2 - 270) + "px"
        },
        quit: function() {
            game.quests.style.display = "none", game.quests.open = !1
        },
        select: function() {
            game.quests.open = !game.quests.open, game.quests.open ? game.quests.style.display = "inline-block" : game.quests.style.display = "none"
        },
        list: [],
        reset: function() {
            for (var e = 0; e < QUESTS.length; e++) this.list[e] = 1, document.getElementById("timeremain_" + e).style.display = "inline-block", document.getElementById("time_finished_" + e).style.display = "none", document.getElementById("claim_reward_" + e).style.display = "none"
        },
        timer: 0,
        born: 0,
        update_chrono: function() {
            if (game.quests.open) {
                var e = (new Date).getTime();
                if (!(e - this.timer < 1e3)) {
                    this.timer = e;
                    for (var t = 0; t < QUESTS.length; t++)
                        if (game.quests.list[t]) {
                            var i = QUESTS[t].time - (e - world.clock.init + game.quests.born);
                            document.getElementById("timeremain_" + t).innerHTML = i > 96e4 ? Math.floor(i / 48e4) + " days" : i > 48e4 ? Math.floor(i / 48e4) + " day" : i > 6e4 ? Math.floor(i / 6e4) + " min" : Math.floor(i / 1e3) + " sec"
                        }
                }
            }
        },
        restore: function(e) {
            for (var t = 0; t < e.length; t++) 1 != e[t] && game.quests.modify_simple(t, e[t])
        },
        modify_simple: function(e, t) {
            3 !== t || 11 !== e && 12 !== e || (user.inv.update_bag_size(0, 1), game.update_inv_buttons()), document.getElementById("timeremain_" + e).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;", t > 1 ? (document.getElementById("time_finished_" + e).innerHTML = "SUCCEED", document.getElementById("timeremain_" + e).style.display = "none") : 0 === t && (document.getElementById("time_finished_" + e).innerHTML = "FAILED", document.getElementById("timeremain_" + e).style.display = "none"), document.getElementById("claim_reward_" + e).style.display = 2 === t ? "inline-block" : "none", document.getElementById("time_finished_" + e).style.display = "inline", game.quests.list[e] = 0
        },
        modify: function(e, t) {
            game.quests.modify_simple(e, t), game.quests.activated && (game.quests.open = !0, game.quests.style.display = "inline-block")
        },
        checkbox: function() {
            game.quests.activated ? (Cookies.set("starve_quests", "0"), game.options.quests_agree.display = "none") : (Cookies.set("starve_quests", "1"), game.options.quests_agree.display = "inline-block"), game.quests.activated = !game.quests.activated
        },
        claim: function() {
            var e = Number(this.id.charAt(13)),
                t = Number(this.id.charAt(14));
            "" !== this.id.charAt(14) && t >= 0 && t <= 9 && (e = 10 * e + t), client.claim_quest_reward(e)
        }
    }, this.quests.activated ? this.options.quests_agree.display = "inline-block" : this.options.quests_agree.display = "none", document.getElementById("quit_chronoquest").addEventListener("mouseup", this.quests.quit, !1);
    for (o = 0; o < QUESTS.length; o++) document.getElementById("claim_reward_" + o).addEventListener("mouseup", this.quests.claim, !1);
    this.craft_list = {
        open: !1,
        button: gui_create_button(60, 60, "", sprite[SPRITE.RECIPE_BUTTON]),
        list: {
            id: document.getElementById("recipe_craft"),
            style: document.getElementById("recipe_craft").style,
            recipes: [],
            category: 0,
            update: function() {
                this.style.left = Math.floor(canw2 - 335) + "px", this.style.top = Math.floor(canh2 - 215) + "px"
            },
            quit: function() {
                document.getElementById("recipe_craft").style.display = "none", game.craft_list.open = !1
            },
            previous: function() {
                document.getElementById("recipe_craft").style.display = "none", document.getElementById("home_craft").style.display = "inline-block"
            },
            get_recipe: function(e) {
                (t = this.recipes[e]).o ? document.getElementById("watercraft").style.display = "inline-block" : document.getElementById("watercraft").style.display = "none", t.f ? document.getElementById("firecraft").style.display = "inline-block" : document.getElementById("firecraft").style.display = "none", t.w ? document.getElementById("workcraft").style.display = "inline-block" : document.getElementById("workcraft").style.display = "none", t.e ? document.getElementById("wellcraft").style.display = "inline-block" : document.getElementById("wellcraft").style.display = "none";
                for (var t = t.r, i = (e = 0, 1); e < t.length; e++) document.getElementById("inv" + i).style.display = "inline-block", document.getElementById("inv" + i).src = void 0 === sprite[INV_INFOS[t[e][0]].img][0]._src ? sprite[INV_INFOS[t[e][0]].img][0].src : sprite[INV_INFOS[t[e][0]].img][0]._src, document.getElementById("numb" + i).innerHTML = "" + t[e][1], i++;
                for (; i < 6; i++) document.getElementById("inv" + i).style.display = "none", document.getElementById("numb" + i).innerHTML = ""
            },
            select: function(e) {
                this.category = e, document.getElementById("home_craft").style.display = "none", document.getElementById("workcraft").style.display = "none", document.getElementById("firecraft").style.display = "none", document.getElementById("watercraft").style.display = "none", document.getElementById("wellcraft").style.display = "none", document.getElementById("recipe_craft").style.display = "inline-block", document.getElementById("inv1").style.display = "none", document.getElementById("inv2").style.display = "none", document.getElementById("inv3").style.display = "none", document.getElementById("inv4").style.display = "none", document.getElementById("inv5").style.display = "none", document.getElementById("numb1").innerHTML = "", document.getElementById("numb2").innerHTML = "", document.getElementById("numb3").innerHTML = "", document.getElementById("numb4").innerHTML = "", document.getElementById("numb5").innerHTML = "";
                for (var t = 0, i = 0; t < RECIPES.length; t++) {
                    var r = RECIPES[t];
                    e === r.t && (this.recipes[i] = r, i++, document.getElementById("img_" + i).style.display = "inline-block", document.getElementById("img_" + i).src = void 0 === sprite[INV_INFOS[r.id2].img][0]._src ? sprite[INV_INFOS[r.id2].img][0].src : sprite[INV_INFOS[r.id2].img][0]._src)
                }
                for (i++; i < 49; i++) document.getElementById("img_" + i).style.display = "none"
            }
        },
        home: {
            id: document.getElementById("home_craft"),
            style: document.getElementById("home_craft").style,
            update: function() {
                this.style.left = Math.floor(canw2 - 285) + "px", this.style.top = Math.floor(canh2 - 170) + "px"
            },
            quit: function() {
                document.getElementById("home_craft").style.display = "none", game.craft_list.open = !1
            }
        },
        select_book: function() {
            this.open = !this.open, this.open ? document.getElementById("home_craft").style.display = "inline-block" : (document.getElementById("home_craft").style.display = "none", document.getElementById("recipe_craft").style.display = "none")
        }
    }, document.getElementById("quit").addEventListener("mouseup", this.craft_list.home.quit, !1), document.getElementById("quitmenu").addEventListener("mouseup", this.craft_list.list.quit, !1), document.getElementById("backhome").addEventListener("mouseup", this.craft_list.list.previous, !1), document.getElementById("hatcategory").addEventListener("mouseup", (function() {
        game.craft_list.list.select(CATEGORY.CLOTHES)
    }), !1), document.getElementById("weaponcategory").addEventListener("mouseup", (function() {
        game.craft_list.list.select(CATEGORY.WEAPONS)
    }), !1), document.getElementById("toolcategory").addEventListener("mouseup", (function() {
        game.craft_list.list.select(CATEGORY.TOOLS)
    }), !1), document.getElementById("foodcategory").addEventListener("mouseup", (function() {
        game.craft_list.list.select(CATEGORY.FOODS)
    }), !1), document.getElementById("placeablecategory").addEventListener("mouseup", (function() {
        game.craft_list.list.select(CATEGORY.UTILS)
    }), !1), document.getElementById("constructioncategory").addEventListener("mouseup", (function() {
        game.craft_list.list.select(CATEGORY.BASES)
    }), !1), document.getElementById("img_1").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(0)
    }), !1), document.getElementById("img_2").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(1)
    }), !1), document.getElementById("img_3").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(2)
    }), !1), document.getElementById("img_4").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(3)
    }), !1), document.getElementById("img_5").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(4)
    }), !1), document.getElementById("img_6").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(5)
    }), !1), document.getElementById("img_7").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(6)
    }), !1), document.getElementById("img_8").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(7)
    }), !1), document.getElementById("img_9").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(8)
    }), !1), document.getElementById("img_10").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(9)
    }), !1), document.getElementById("img_11").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(10)
    }), !1), document.getElementById("img_12").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(11)
    }), !1), document.getElementById("img_13").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(12)
    }), !1), document.getElementById("img_14").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(13)
    }), !1), document.getElementById("img_15").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(14)
    }), !1), document.getElementById("img_16").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(15)
    }), !1), document.getElementById("img_17").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(16)
    }), !1), document.getElementById("img_18").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(17)
    }), !1), document.getElementById("img_19").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(18)
    }), !1), document.getElementById("img_20").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(19)
    }), !1), document.getElementById("img_21").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(20)
    }), !1), document.getElementById("img_22").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(21)
    }), !1), document.getElementById("img_23").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(22)
    }), !1), document.getElementById("img_24").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(23)
    }), !1), document.getElementById("img_25").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(24)
    }), !1), document.getElementById("img_26").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(25)
    }), !1), document.getElementById("img_27").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(26)
    }), !1), document.getElementById("img_28").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(27)
    }), !1), document.getElementById("img_29").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(28)
    }), !1), document.getElementById("img_30").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(29)
    }), !1), document.getElementById("img_31").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(30)
    }), !1), document.getElementById("img_32").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(31)
    }), !1), document.getElementById("img_33").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(32)
    }), !1), document.getElementById("img_34").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(33)
    }), !1), document.getElementById("img_35").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(34)
    }), !1), document.getElementById("img_36").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(35)
    }), !1), document.getElementById("img_37").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(36)
    }), !1), document.getElementById("img_38").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(37)
    }), !1), document.getElementById("img_39").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(38)
    }), !1), document.getElementById("img_40").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(39)
    }), !1), document.getElementById("img_41").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(40)
    }), !1), document.getElementById("img_42").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(41)
    }), !1), document.getElementById("img_43").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(42)
    }), !1), document.getElementById("img_44").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(43)
    }), !1), document.getElementById("img_45").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(44)
    }), !1), document.getElementById("img_46").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(45)
    }), !1), document.getElementById("img_47").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(46)
    }), !1), document.getElementById("img_48").addEventListener("mousedown", (function() {
        game.craft_list.list.get_recipe(47)
    }), !1), this.minimap = {
        translate: {
            x: 0,
            y: 0
        },
        marker: {
            x: -1,
            y: -1
        },
        players: [],
        focus: function(e) {
            var t = this.translate.y + (user.inv.can_select.length > 0 ? -120 : -50);
            e.x > this.translate.x && e.x < this.translate.x + 193 && e.y > t && e.y < t + 193 && (this.marker.x = e.x - this.translate.x, this.marker.y = e.y - t)
        }
    }, this.leaderboard = {
        translate: {
            x: 0,
            y: 0
        },
        img: sprite[SPRITE.LEADERBOARD],
        can: document.createElement("canvas")
    }, this.leaderboard.can.width = this.leaderboard.img.width, this.leaderboard.can.height = this.leaderboard.img.height, this.leaderboard.ctx = this.leaderboard.can.getContext("2d"), this.gauges = {
        translate: {
            x: 0,
            y: 0
        },
        img: sprite[SPRITE.GAUGES],
        draw: draw_gauges,
        y: 0
    }, this.leave_team = function() {
        div = document.getElementById("team_box"), div.innerHTML = "", div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + world.players[user.team[0]].nickname + "</div";
        for (var e = 1; e < user.team.length; e++) div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + world.players[user.team[e]].nickname + "</div></div>";
        div.innerHTML += '<div id="leave" style="display:inline-block;">LEAVE</div></div>', div.style.display = "inline-block", document.getElementById("leave").addEventListener("click", client.leave_team, !1)
    }, this.show_team = function() {
        div = document.getElementById("team_box"), div.innerHTML = "", div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + world.players[user.team[0]].nickname + "</div";
        for (var e = 1; e < user.team.length; e++) div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + world.players[user.team[e]].nickname + "</div></div>";
        div.innerHTML += "</div>", div.style.display = "inline-block"
    }, this.manage_team = function() {
        div = document.getElementById("team_box"), div.innerHTML = "", div.innerHTML += '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' + world.players[user.team[0]].nickname + "</div";
        for (var e = 1; e < user.team.length; e++) div.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + world.players[user.team[e]].nickname + '</div><div class="eject_member" id="eject_member' + e + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
        0 === user.totem.lock ? div.innerHTML += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>' : div.innerHTML += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>', document.getElementById("lock_team").addEventListener("click", client.lock_team, !1), div.style.display = "inline-block";
        for (e = 1; e < user.team.length; e++) switch (e) {
            case 1:
                document.getElementById("eject_member" + e).addEventListener("click", (function() {
                    client.kick_team(1)
                }), !1);
                break;
            case 2:
                document.getElementById("eject_member" + e).addEventListener("click", (function() {
                    client.kick_team(2)
                }), !1);
                break;
            case 3:
                document.getElementById("eject_member" + e).addEventListener("click", (function() {
                    client.kick_team(3)
                }), !1);
                break;
            case 4:
                document.getElementById("eject_member" + e).addEventListener("click", (function() {
                    client.kick_team(4)
                }), !1);
                break;
            case 5:
                document.getElementById("eject_member" + e).addEventListener("click", (function() {
                    client.kick_team(5)
                }), !1);
                break;
            case 6:
                document.getElementById("eject_member" + e).addEventListener("click", (function() {
                    client.kick_team(6)
                }), !1);
                break;
            case 7:
                document.getElementById("eject_member" + e).addEventListener("click", (function() {
                    client.kick_team(7)
                }), !1);
                break;
            case 8:
                document.getElementById("eject_member" + e).addEventListener("click", (function() {
                    client.kick_team(8)
                }), !1)
        }
    }, this.team_buttons = [], this.team_buttons[CLIENT.TEAM_LEAVE] = {
        button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
        action: this.leave_team
    }, this.team_buttons[CLIENT.TEAM_JOIN] = {
        button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
        action: client.join_team
    }, this.team_buttons[CLIENT.TEAM_MANAGE] = {
        button: gui_create_button(60, 60, "", sprite[SPRITE.MANAGE_TEAM_BUTTON]),
        action: this.manage_team
    }, this.team_buttons[CLIENT.TEAM_SHOW] = {
        button: gui_create_button(60, 60, "", sprite[SPRITE.SHOW_TEAM_BUTTON]),
        action: this.show_team
    }, this.team_buttons[CLIENT.TEAM_FULL] = {
        button: gui_create_button(60, 60, "", sprite[SPRITE.FULL_TEAM_BUTTON]),
        action: function() {}
    }, this.team_buttons_id = -1, this.bread_oven_wood_button = gui_create_button(60, 60, "", sprite[SPRITE.BREAD_OVEN_WOOD]), this.bread_oven_bread_button = gui_create_button(60, 60, "", sprite[SPRITE.BREAD_OVEN_BREAD]), this.bread_oven_flour_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]), this.windmill_wheat_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_WHEAT_SEED]), this.windmill_flour_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]), this.extractor_wood_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD]), this.extractor_stone_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE]), this.extractor_gold_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD]), this.extractor_diamond_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND]), this.extractor_amethyst_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST]), this.extractor_reidite_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE]), this.furnace_button = gui_create_button(60, 60, "", sprite[SPRITE.FURNACE_BUTTON]), this.chest_padlock = gui_create_button(60, 60, "", sprite[SPRITE.PADLOCK]), this.chest_lockpick = gui_create_button(60, 60, "", sprite[SPRITE.KEY]), this.chest_locked = gui_create_button(60, 60, "", sprite[SPRITE.LOCKED]), this.resurrection = gui_create_button(120, 120, "", sprite[SPRITE.DRAGON_HEART]), this.resurrection.info.translate.x = 10, this.resurrection.info.translate.y = 10, this.chest_buttons = [], this.chest_buttons[INV.SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD], 3), this.chest_buttons[INV.SWORD].id = INV.SWORD, this.chest_buttons[INV.PICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK], 3), this.chest_buttons[INV.PICK].id = INV.PICK, this.chest_buttons[INV.STONE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE], 3), this.chest_buttons[INV.STONE].id = INV.STONE, this.chest_buttons[INV.WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD], 3), this.chest_buttons[INV.WOOD].id = INV.WOOD, this.chest_buttons[INV.PLANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLANT], 3), this.chest_buttons[INV.PLANT].id = INV.PLANT, this.chest_buttons[INV.CACTUS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CACTUS], 3), this.chest_buttons[INV.CACTUS].id = INV.CACTUS, this.chest_buttons[INV.GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD], 3), this.chest_buttons[INV.GOLD].id = INV.GOLD, this.chest_buttons[INV.DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND], 3), this.chest_buttons[INV.DIAMOND].id = INV.DIAMOND, this.chest_buttons[INV.PICK_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_GOLD], 3), this.chest_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD, this.chest_buttons[INV.PICK_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_DIAMOND], 3), this.chest_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND, this.chest_buttons[INV.SWORD_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_GOLD], 3), this.chest_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD, this.chest_buttons[INV.SWORD_WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_WOOD], 3), this.chest_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD, this.chest_buttons[INV.SWORD_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_DIAMOND], 3), this.chest_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND, this.chest_buttons[INV.FIRE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FIRE], 3), this.chest_buttons[INV.FIRE].id = INV.FIRE, this.chest_buttons[INV.WORKBENCH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WORKBENCH], 3), this.chest_buttons[INV.WORKBENCH].id = INV.WORKBENCH, this.chest_buttons[INV.SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SEED], 3), this.chest_buttons[INV.SEED].id = INV.SEED, this.chest_buttons[INV.WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WALL], 3), this.chest_buttons[INV.WALL].id = INV.WALL, this.chest_buttons[INV.SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPIKE], 3), this.chest_buttons[INV.SPIKE].id = INV.SPIKE, this.chest_buttons[INV.PICK_WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_WOOD], 3), this.chest_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD, this.chest_buttons[INV.COOKED_MEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COOKED_MEAT], 3), this.chest_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT, this.chest_buttons[INV.MEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MEAT], 3), this.chest_buttons[INV.MEAT].id = INV.MEAT, this.chest_buttons[INV.BIG_FIRE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BIG_FIRE], 3), this.chest_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE, this.chest_buttons[INV.BANDAGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BANDAGE], 3), this.chest_buttons[INV.BANDAGE].id = INV.BANDAGE, this.chest_buttons[INV.CORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CORD], 3), this.chest_buttons[INV.CORD].id = INV.CORD, this.chest_buttons[INV.STONE_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_WALL], 3), this.chest_buttons[INV.STONE_WALL].id = INV.STONE_WALL, this.chest_buttons[INV.GOLD_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_WALL], 3), this.chest_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL, this.chest_buttons[INV.DIAMOND_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_WALL], 3), this.chest_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL, this.chest_buttons[INV.WOOD_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE], 3), this.chest_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR, this.chest_buttons[INV.CHEST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CHEST], 3), this.chest_buttons[INV.CHEST].id = INV.CHEST, this.chest_buttons[INV.STONE_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_SPIKE], 3), this.chest_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE, this.chest_buttons[INV.GOLD_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPIKE], 3), this.chest_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE, this.chest_buttons[INV.DIAMOND_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPIKE], 3), this.chest_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE, this.chest_buttons[INV.FUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR], 3), this.chest_buttons[INV.FUR].id = INV.FUR, this.chest_buttons[INV.FUR_BOAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_BOAR], 3), this.chest_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR, this.chest_buttons[INV.FUR_WOLF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_WOLF], 3), this.chest_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF, this.chest_buttons[INV.PENGUIN_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PENGUIN_FEATHER], 3), this.chest_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER, this.chest_buttons[INV.HAWK_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAWK_FEATHER], 3), this.chest_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER, this.chest_buttons[INV.VULTURE_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_VULTURE_FEATHER], 3), this.chest_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER, this.chest_buttons[INV.EMERALD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EMERALD], 3), this.chest_buttons[INV.EMERALD].id = INV.EMERALD, this.chest_buttons[INV.EARMUFFS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EARMUFFS], 3), this.chest_buttons[INV.EARMUFFS].id = INV.EARMUFFS, this.chest_buttons[INV.STONE_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_STONE_CLOSE], 3), this.chest_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR, this.chest_buttons[INV.GOLD_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE], 3), this.chest_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR, this.chest_buttons[INV.DIAMOND_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE], 3), this.chest_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR, this.chest_buttons[INV.COAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COAT], 3), this.chest_buttons[INV.COAT].id = INV.COAT, this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3), this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR, this.chest_buttons[INV.SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPEAR], 3), this.chest_buttons[INV.SPEAR].id = INV.SPEAR, this.chest_buttons[INV.GOLD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPEAR], 3), this.chest_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR, this.chest_buttons[INV.DIAMOND_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPEAR], 3), this.chest_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR, this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3), this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR, this.chest_buttons[INV.FURNACE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FURNACE], 3), this.chest_buttons[INV.FURNACE].id = INV.FURNACE, this.chest_buttons[INV.EXPLORER_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXPLORER_HAT], 3), this.chest_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT, this.chest_buttons[INV.PIRATE_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PIRATE_HAT], 3), this.chest_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT, this.chest_buttons[INV.FLOWER_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLOWER_HAT], 3), this.chest_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT, this.chest_buttons[INV.FUR_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_HAT], 3), this.chest_buttons[INV.FUR_HAT].id = INV.FUR_HAT, this.chest_buttons[INV.TURBAN1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TURBAN1], 3), this.chest_buttons[INV.TURBAN1].id = INV.TURBAN1, this.chest_buttons[INV.TURBAN2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TURBAN2], 3), this.chest_buttons[INV.TURBAN2].id = INV.TURBAN2, this.chest_buttons[INV.WOOD_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_ARROW], 3), this.chest_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW, this.chest_buttons[INV.WOOD_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_BOW], 3), this.chest_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW, this.chest_buttons[INV.WOOD_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SHIELD], 3), this.chest_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD, this.chest_buttons[INV.STONE_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_ARROW], 3), this.chest_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW, this.chest_buttons[INV.STONE_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_BOW], 3), this.chest_buttons[INV.STONE_BOW].id = INV.STONE_BOW, this.chest_buttons[INV.STONE_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_SHIELD], 3), this.chest_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD, this.chest_buttons[INV.GOLD_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_ARROW], 3), this.chest_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW, this.chest_buttons[INV.GOLD_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_BOW], 3), this.chest_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW, this.chest_buttons[INV.GOLD_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SHIELD], 3), this.chest_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD, this.chest_buttons[INV.DIAMOND_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_ARROW], 3), this.chest_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW, this.chest_buttons[INV.DIAMOND_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_BOW], 3), this.chest_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW, this.chest_buttons[INV.DIAMOND_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SHIELD], 3), this.chest_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD, this.chest_buttons[INV.AMETHYST_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_ARROW], 3), this.chest_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW, this.chest_buttons[INV.AMETHYST_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_BOW], 3), this.chest_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW, this.chest_buttons[INV.AMETHYST_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SHIELD], 3), this.chest_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD, this.chest_buttons[INV.REIDITE_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_ARROW], 3), this.chest_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW, this.chest_buttons[INV.REIDITE_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_BOW], 3), this.chest_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW, this.chest_buttons[INV.REIDITE_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SHIELD], 3), this.chest_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD, this.chest_buttons[INV.DRAGON_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ARROW], 3), this.chest_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW, this.chest_buttons[INV.DRAGON_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_BOW], 3), this.chest_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW, this.chest_buttons[INV.WOOD_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_HELMET], 3), this.chest_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET, this.chest_buttons[INV.STONE_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_HELMET], 3), this.chest_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET, this.chest_buttons[INV.GOLD_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_HELMET], 3), this.chest_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET, this.chest_buttons[INV.DIAMOND_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_HELMET], 3), this.chest_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET, this.chest_buttons[INV.BOOK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOOK], 3), this.chest_buttons[INV.BOOK].id = INV.BOOK, this.chest_buttons[INV.PAPER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PAPER], 3), this.chest_buttons[INV.PAPER].id = INV.PAPER, this.chest_buttons[INV.BAG] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BAG], 3), this.chest_buttons[INV.BAG].id = INV.BAG, this.chest_buttons[INV.AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST], 3), this.chest_buttons[INV.AMETHYST].id = INV.AMETHYST, this.chest_buttons[INV.SWORD_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_AMETHYST], 3), this.chest_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST, this.chest_buttons[INV.PIRATE_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PIRATE_SWORD], 3), this.chest_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD, this.chest_buttons[INV.PICK_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_AMETHYST], 3), this.chest_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST, this.chest_buttons[INV.PICK_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_REIDITE], 3), this.chest_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE, this.chest_buttons[INV.AMETHYST_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPEAR], 3), this.chest_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR, this.chest_buttons[INV.HAMMER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER], 3), this.chest_buttons[INV.HAMMER].id = INV.HAMMER, this.chest_buttons[INV.HAMMER_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_GOLD], 3), this.chest_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD, this.chest_buttons[INV.HAMMER_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_DIAMOND], 3), this.chest_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND, this.chest_buttons[INV.HAMMER_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_AMETHYST], 3), this.chest_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST, this.chest_buttons[INV.HAMMER_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_REIDITE], 3), this.chest_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE, this.chest_buttons[INV.AMETHYST_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_WALL], 3), this.chest_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL, this.chest_buttons[INV.AMETHYST_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPIKE], 3), this.chest_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE, this.chest_buttons[INV.AMETHYST_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE], 3), this.chest_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR, this.chest_buttons[INV.CAP_SCARF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CAP_SCARF], 3), this.chest_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF, this.chest_buttons[INV.FUR_WINTER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_WINTER], 3), this.chest_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER, this.chest_buttons[INV.FUR_MAMMOTH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_MAMMOTH], 3), this.chest_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH, this.chest_buttons[INV.BLUE_CORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BLUE_CORD], 3), this.chest_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD, this.chest_buttons[INV.LOCK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LOCK], 3), this.chest_buttons[INV.LOCK].id = INV.LOCK, this.chest_buttons[INV.DRAGON_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HEART], 3), this.chest_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART, this.chest_buttons[INV.LAVA_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3), this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART, this.chest_buttons[INV.RESURRECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_RESURRECTION], 3), this.chest_buttons[INV.RESURRECTION].id = INV.RESURRECTION, this.chest_buttons[INV.LOCKPICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LOCKPICK], 3), this.chest_buttons[INV.LOCKPICK].id = INV.LOCKPICK, this.chest_buttons[INV.TOTEM] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOTEM], 3), this.chest_buttons[INV.TOTEM].id = INV.TOTEM, this.chest_buttons[INV.AMETHYST_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_HELMET], 3), this.chest_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET, this.chest_buttons[INV.SUPER_HAMMER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUPER_HAMMER], 3), this.chest_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER, this.chest_buttons[INV.BRIDGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BRIDGE], 3), this.chest_buttons[INV.BRIDGE].id = INV.BRIDGE, this.chest_buttons[INV.WOOD_TOWER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_TOWER], 3), this.chest_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER, this.chest_buttons[INV.BOAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOAT], 3), this.chest_buttons[INV.BOAT].id = INV.BOAT, this.chest_buttons[INV.SLED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SLED], 3), this.chest_buttons[INV.SLED].id = INV.SLED, this.chest_buttons[INV.PLANE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLANE], 3), this.chest_buttons[INV.PLANE].id = INV.PLANE, this.chest_buttons[INV.SADDLE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SADDLE], 3), this.chest_buttons[INV.SADDLE].id = INV.SADDLE, this.chest_buttons[INV.MOUNT_BOAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MOUNT_BOAR], 3), this.chest_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR, this.chest_buttons[INV.BABY_DRAGON] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_DRAGON], 3), this.chest_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON, this.chest_buttons[INV.BABY_MAMMOTH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_MAMMOTH], 3), this.chest_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH, this.chest_buttons[INV.BABY_LAVA] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_LAVA], 3), this.chest_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA, this.chest_buttons[INV.HAWK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAWK], 3), this.chest_buttons[INV.HAWK].id = INV.HAWK, this.chest_buttons[INV.CRAB_BOSS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_BOSS], 3), this.chest_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS, this.chest_buttons[INV.SAND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SAND], 3), this.chest_buttons[INV.SAND].id = INV.SAND, this.chest_buttons[INV.BOTTLE_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_FULL], 3), this.chest_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL, this.chest_buttons[INV.BOTTLE_EMPTY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_EMPTY], 3), this.chest_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY, this.chest_buttons[INV.SHOVEL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL], 3), this.chest_buttons[INV.SHOVEL].id = INV.SHOVEL, this.chest_buttons[INV.SHOVEL_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_GOLD], 3), this.chest_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD, this.chest_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_DIAMOND], 3), this.chest_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND, this.chest_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_AMETHYST], 3), this.chest_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST, this.chest_buttons[INV.SPANNER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPANNER], 3), this.chest_buttons[INV.SPANNER].id = INV.SPANNER, this.chest_buttons[INV.KRAKEN_SKIN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_KRAKEN_SKIN], 3), this.chest_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN, this.chest_buttons[INV.WATERING_CAN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN], 3), this.chest_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN, this.chest_buttons[INV.FLOUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLOUR], 3), this.chest_buttons[INV.FLOUR].id = INV.FLOUR, this.chest_buttons[INV.WHEAT_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WHEAT_SEED], 3), this.chest_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED, this.chest_buttons[INV.COOKIE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COOKIE], 3), this.chest_buttons[INV.COOKIE].id = INV.COOKIE, this.chest_buttons[INV.WILD_WHEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WILD_WHEAT], 3), this.chest_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT, this.chest_buttons[INV.WINDMILL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINDMILL], 3), this.chest_buttons[INV.WINDMILL].id = INV.WINDMILL, this.chest_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUPER_DIVING_SUIT], 3), this.chest_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT, this.chest_buttons[INV.DIVING_MASK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIVING_MASK], 3), this.chest_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK, this.chest_buttons[INV.WATERING_CAN_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN_FULL], 3), this.chest_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL, this.chest_buttons[INV.CAKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CAKE], 3), this.chest_buttons[INV.CAKE].id = INV.CAKE, this.chest_buttons[INV.BREAD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BREAD], 3), this.chest_buttons[INV.BREAD].id = INV.BREAD, this.chest_buttons[INV.FOODFISH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FOODFISH], 3), this.chest_buttons[INV.FOODFISH].id = INV.FOODFISH, this.chest_buttons[INV.FOODFISH_COOKED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FOODFISH_COOKED], 3), this.chest_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED, this.chest_buttons[INV.SCALES] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SCALES], 3), this.chest_buttons[INV.SCALES].id = INV.SCALES, this.chest_buttons[INV.GROUND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GROUND], 3), this.chest_buttons[INV.GROUND].id = INV.GROUND, this.chest_buttons[INV.PLOT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLOT], 3), this.chest_buttons[INV.PLOT].id = INV.PLOT, this.chest_buttons[INV.ICE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ICE], 3), this.chest_buttons[INV.ICE].id = INV.ICE, this.chest_buttons[INV.BREAD_OVEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BREAD_OVEN], 3), this.chest_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN, this.chest_buttons[INV.SANDWICH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SANDWICH], 3), this.chest_buttons[INV.SANDWICH].id = INV.SANDWICH, this.chest_buttons[INV.DRAGON_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HELMET], 3), this.chest_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET, this.chest_buttons[INV.DRAGON_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SWORD], 3), this.chest_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD, this.chest_buttons[INV.DRAGON_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ORB], 3), this.chest_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB, this.chest_buttons[INV.DRAGON_CUBE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_CUBE], 3), this.chest_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE, this.chest_buttons[INV.LAVA_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3), this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB, this.chest_buttons[INV.LAVA_CUBE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_CUBE], 3), this.chest_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE, this.chest_buttons[INV.CROWN_GREEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_GREEN], 3), this.chest_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN, this.chest_buttons[INV.GEMME_GREEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_GREEN], 3), this.chest_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN, this.chest_buttons[INV.GEMME_ORANGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_ORANGE], 3), this.chest_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE, this.chest_buttons[INV.CROWN_ORANGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_ORANGE], 3), this.chest_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE, this.chest_buttons[INV.GEMME_BLUE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_BLUE], 3), this.chest_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE, this.chest_buttons[INV.CROWN_BLUE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_BLUE], 3), this.chest_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE, this.chest_buttons[INV.HOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HOOD], 3), this.chest_buttons[INV.HOOD].id = INV.HOOD, this.chest_buttons[INV.PEASANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PEASANT], 3), this.chest_buttons[INV.PEASANT].id = INV.PEASANT, this.chest_buttons[INV.SPECIAL_FUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR], 3), this.chest_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR, this.chest_buttons[INV.SPECIAL_FUR_2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR_2], 3), this.chest_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2, this.chest_buttons[INV.WINTER_PEASANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINTER_PEASANT], 3), this.chest_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT, this.chest_buttons[INV.WINTER_HOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINTER_HOOD], 3), this.chest_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD, this.chest_buttons[INV.BUCKET_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BUCKET_FULL], 3), this.chest_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL, this.chest_buttons[INV.BUCKET_EMPTY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BUCKET_EMPTY], 3), this.chest_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY, this.chest_buttons[INV.WELL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WELL], 3), this.chest_buttons[INV.WELL].id = INV.WELL, this.chest_buttons[INV.SIGN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SIGN], 3), this.chest_buttons[INV.SIGN].id = INV.SIGN, this.chest_buttons[INV.PUMPKIN_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN_SEED], 3), this.chest_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED, this.chest_buttons[INV.PUMPKIN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN], 3), this.chest_buttons[INV.PUMPKIN].id = INV.PUMPKIN, this.chest_buttons[INV.ROOF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ROOF], 3), this.chest_buttons[INV.ROOF].id = INV.ROOF, this.chest_buttons[INV.GARLIC_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLIC_SEED], 3), this.chest_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED, this.chest_buttons[INV.GARLIC] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLIC], 3), this.chest_buttons[INV.GARLIC].id = INV.GARLIC, this.chest_buttons[INV.THORNBUSH_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH_SEED], 3), this.chest_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED, this.chest_buttons[INV.THORNBUSH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH], 3), this.chest_buttons[INV.THORNBUSH].id = INV.THORNBUSH, this.chest_buttons[INV.TOMATO_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOMATO_SEED], 3), this.chest_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED, this.chest_buttons[INV.TOMATO] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOMATO], 3), this.chest_buttons[INV.TOMATO].id = INV.TOMATO, this.chest_buttons[INV.CARROT_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CARROT_SEED], 3), this.chest_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED, this.chest_buttons[INV.CARROT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CARROT], 3), this.chest_buttons[INV.CARROT].id = INV.CARROT, this.chest_buttons[INV.WATERMELON_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERMELON_SEED], 3), this.chest_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED, this.chest_buttons[INV.WATERMELON] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERMELON], 3), this.chest_buttons[INV.WATERMELON].id = INV.WATERMELON, this.chest_buttons[INV.ALOE_VERA_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA_SEED], 3), this.chest_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED, this.chest_buttons[INV.ALOE_VERA] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA], 3), this.chest_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA, this.chest_buttons[INV.CHRISTMAS_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CHRISTMAS_HAT], 3), this.chest_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT, this.chest_buttons[INV.ELF_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ELF_HAT], 3), this.chest_buttons[INV.ELF_HAT].id = INV.ELF_HAT, this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3), this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR, this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3), this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR, this.chest_buttons[INV.CRAB_STICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_STICK], 3), this.chest_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK, this.chest_buttons[INV.CRAB_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_SPEAR], 3), this.chest_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR, this.chest_buttons[INV.CRAB_LOOT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_LOOT], 3), this.chest_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT, this.chest_buttons[INV.BED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BED], 3), this.chest_buttons[INV.BED].id = INV.BED, this.chest_buttons[INV.CROWN_CRAB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_CRAB], 3), this.chest_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB, this.chest_buttons[INV.GARLAND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLAND], 3), this.chest_buttons[INV.GARLAND].id = INV.GARLAND, this.chest_buttons[INV.SUGAR_CAN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUGAR_CAN], 3), this.chest_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN, this.chest_buttons[INV.CANDY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CANDY], 3), this.chest_buttons[INV.CANDY].id = INV.CANDY, this.plus_buttons = [];
    for (o = 0; o < 250; o++) this.plus_buttons[o] = gui_create_button(0, 0, "", sprite[SPRITE.CHEST_PLUS]);
    this.inv_buttons = [], this.inv_buttons[INV.SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD], 3), this.inv_buttons[INV.SWORD].id = INV.SWORD, this.inv_buttons[INV.PICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK], 3), this.inv_buttons[INV.PICK].id = INV.PICK, this.inv_buttons[INV.STONE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE], 3), this.inv_buttons[INV.STONE].id = INV.STONE, this.inv_buttons[INV.STONE].info.img[2] = this.inv_buttons[INV.STONE].info.img[0], this.inv_buttons[INV.WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD], 3), this.inv_buttons[INV.WOOD].id = INV.WOOD, this.inv_buttons[INV.WOOD].info.img[2] = this.inv_buttons[INV.WOOD].info.img[0], this.inv_buttons[INV.PLANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLANT], 3), this.inv_buttons[INV.PLANT].id = INV.PLANT, this.inv_buttons[INV.CACTUS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CACTUS], 3), this.inv_buttons[INV.CACTUS].id = INV.CACTUS, this.inv_buttons[INV.GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD], 3), this.inv_buttons[INV.GOLD].id = INV.GOLD, this.inv_buttons[INV.GOLD].info.img[2] = this.inv_buttons[INV.GOLD].info.img[0], this.inv_buttons[INV.DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND], 3), this.inv_buttons[INV.DIAMOND].id = INV.DIAMOND, this.inv_buttons[INV.DIAMOND].info.img[2] = this.inv_buttons[INV.DIAMOND].info.img[0], this.inv_buttons[INV.PICK_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_GOLD], 3), this.inv_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD, this.inv_buttons[INV.PICK_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_DIAMOND], 3), this.inv_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND, this.inv_buttons[INV.SWORD_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_GOLD], 3), this.inv_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD, this.inv_buttons[INV.SWORD_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_WOOD], 3), this.inv_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD, this.inv_buttons[INV.SWORD_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_DIAMOND], 3), this.inv_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND, this.inv_buttons[INV.FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FIRE], 3), this.inv_buttons[INV.FIRE].id = INV.FIRE, this.inv_buttons[INV.WORKBENCH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WORK], 3), this.inv_buttons[INV.WORKBENCH].id = INV.WORKBENCH, this.inv_buttons[INV.SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SEED], 3), this.inv_buttons[INV.SEED].id = INV.SEED, this.inv_buttons[INV.WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WALL], 3), this.inv_buttons[INV.WALL].id = INV.WALL, this.inv_buttons[INV.SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPIKE], 3), this.inv_buttons[INV.SPIKE].id = INV.SPIKE, this.inv_buttons[INV.PICK_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_WOOD], 3), this.inv_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD, this.inv_buttons[INV.COOKED_MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COOKED_MEAT], 3), this.inv_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT, this.inv_buttons[INV.MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MEAT], 3), this.inv_buttons[INV.MEAT].id = INV.MEAT, this.inv_buttons[INV.BIG_FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BIG_FIRE], 3), this.inv_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE, this.inv_buttons[INV.BANDAGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BANDAGE], 3), this.inv_buttons[INV.BANDAGE].id = INV.BANDAGE, this.inv_buttons[INV.CORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CORD], 3), this.inv_buttons[INV.CORD].id = INV.CORD, this.inv_buttons[INV.CORD].info.img[2] = this.inv_buttons[INV.CORD].info.img[0], this.inv_buttons[INV.STONE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_WALL], 3), this.inv_buttons[INV.STONE_WALL].id = INV.STONE_WALL, this.inv_buttons[INV.GOLD_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_WALL], 3), this.inv_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL, this.inv_buttons[INV.DIAMOND_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_WALL], 3), this.inv_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL, this.inv_buttons[INV.WOOD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_WOOD_CLOSE], 3), this.inv_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR, this.inv_buttons[INV.CHEST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CHEST], 3), this.inv_buttons[INV.CHEST].id = INV.CHEST, this.inv_buttons[INV.STONE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_SPIKE], 3), this.inv_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE, this.inv_buttons[INV.GOLD_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SPIKE], 3), this.inv_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE, this.inv_buttons[INV.DIAMOND_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPIKE], 3), this.inv_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE, this.inv_buttons[INV.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BAG], 3), this.inv_buttons[INV.BAG].id = INV.BAG, this.inv_buttons[INV.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3), this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS, this.inv_buttons[INV.STONE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_STONE_CLOSE], 3), this.inv_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR, this.inv_buttons[INV.GOLD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_GOLD_CLOSE], 3), this.inv_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR, this.inv_buttons[INV.DIAMOND_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE], 3), this.inv_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR, this.inv_buttons[INV.FUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR], 3), this.inv_buttons[INV.FUR].id = INV.FUR, this.inv_buttons[INV.FUR].info.img[2] = this.inv_buttons[INV.FUR].info.img[0], this.inv_buttons[INV.FUR_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_BOAR], 3), this.inv_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR, this.inv_buttons[INV.FUR_BOAR].info.img[2] = this.inv_buttons[INV.FUR_BOAR].info.img[0], this.inv_buttons[INV.FUR_WOLF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_WOLF], 3), this.inv_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF, this.inv_buttons[INV.FUR_WOLF].info.img[2] = this.inv_buttons[INV.FUR_WOLF].info.img[0], this.inv_buttons[INV.PENGUIN_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PENGUIN_FEATHER], 3), this.inv_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER, this.inv_buttons[INV.HAWK_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAWK_FEATHER], 3), this.inv_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER, this.inv_buttons[INV.VULTURE_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_VULTURE_FEATHER], 3), this.inv_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER, this.inv_buttons[INV.EMERALD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EMERALD], 3), this.inv_buttons[INV.EMERALD].id = INV.EMERALD, this.inv_buttons[INV.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3), this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS, this.inv_buttons[INV.COAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COAT], 3), this.inv_buttons[INV.COAT].id = INV.COAT, this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3), this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR, this.inv_buttons[INV.SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPEAR], 3), this.inv_buttons[INV.SPEAR].id = INV.SPEAR, this.inv_buttons[INV.GOLD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SPEAR], 3), this.inv_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR, this.inv_buttons[INV.DIAMOND_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPEAR], 3), this.inv_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR, this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3), this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR, this.inv_buttons[INV.FURNACE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FURNACE], 3), this.inv_buttons[INV.FURNACE].id = INV.FURNACE, this.inv_buttons[INV.EXPLORER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXPLORER_HAT], 3), this.inv_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT, this.inv_buttons[INV.PIRATE_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PIRATE_HAT], 3), this.inv_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT, this.inv_buttons[INV.FLOWER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLOWER_HAT], 3), this.inv_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT, this.inv_buttons[INV.FUR_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_HAT], 3), this.inv_buttons[INV.FUR_HAT].id = INV.FUR_HAT, this.inv_buttons[INV.TURBAN1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TURBAN1], 3), this.inv_buttons[INV.TURBAN1].id = INV.TURBAN1, this.inv_buttons[INV.TURBAN2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TURBAN2], 3), this.inv_buttons[INV.TURBAN2].id = INV.TURBAN2, this.inv_buttons[INV.WOOD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_BOW], 3), this.inv_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW, this.inv_buttons[INV.WOOD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_ARROW], 3), this.inv_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW, this.inv_buttons[INV.WOOD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SHIELD], 3), this.inv_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD, this.inv_buttons[INV.STONE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_BOW], 3), this.inv_buttons[INV.STONE_BOW].id = INV.STONE_BOW, this.inv_buttons[INV.STONE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_ARROW], 3), this.inv_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW, this.inv_buttons[INV.STONE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_SHIELD], 3), this.inv_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD, this.inv_buttons[INV.GOLD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_BOW], 3), this.inv_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW, this.inv_buttons[INV.GOLD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_ARROW], 3), this.inv_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW, this.inv_buttons[INV.GOLD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SHIELD], 3), this.inv_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD, this.inv_buttons[INV.DIAMOND_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_BOW], 3), this.inv_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW, this.inv_buttons[INV.DIAMOND_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_ARROW], 3), this.inv_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW, this.inv_buttons[INV.DIAMOND_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SHIELD], 3), this.inv_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD, this.inv_buttons[INV.AMETHYST_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_BOW], 3), this.inv_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW, this.inv_buttons[INV.AMETHYST_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_ARROW], 3), this.inv_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW, this.inv_buttons[INV.AMETHYST_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SHIELD], 3), this.inv_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD, this.inv_buttons[INV.REIDITE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_BOW], 3), this.inv_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW, this.inv_buttons[INV.REIDITE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_ARROW], 3), this.inv_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW, this.inv_buttons[INV.REIDITE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SHIELD], 3), this.inv_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD, this.inv_buttons[INV.DRAGON_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_BOW], 3), this.inv_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW, this.inv_buttons[INV.DRAGON_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_ARROW], 3), this.inv_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW, this.inv_buttons[INV.WOOD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_HELMET], 3), this.inv_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET, this.inv_buttons[INV.STONE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_HELMET], 3), this.inv_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET, this.inv_buttons[INV.GOLD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_HELMET], 3), this.inv_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET, this.inv_buttons[INV.DIAMOND_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_HELMET], 3), this.inv_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET, this.inv_buttons[INV.BOOK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOOK], 3), this.inv_buttons[INV.BOOK].id = INV.BOOK, this.inv_buttons[INV.PAPER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PAPER], 3), this.inv_buttons[INV.PAPER].id = INV.PAPER, this.inv_buttons[INV.PAPER].info.img[2] = this.inv_buttons[INV.PAPER].info.img[0], this.inv_buttons[INV.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BAG], 3), this.inv_buttons[INV.BAG].id = INV.BAG, this.inv_buttons[INV.AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST], 3), this.inv_buttons[INV.AMETHYST].id = INV.AMETHYST, this.inv_buttons[INV.AMETHYST].info.img[2] = this.inv_buttons[INV.AMETHYST].info.img[0], this.inv_buttons[INV.SWORD_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_AMETHYST], 3), this.inv_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST, this.inv_buttons[INV.PIRATE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PIRATE_SWORD], 3), this.inv_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD, this.inv_buttons[INV.PICK_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_AMETHYST], 3), this.inv_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST, this.inv_buttons[INV.PICK_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_REIDITE], 3), this.inv_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE, this.inv_buttons[INV.AMETHYST_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPEAR], 3), this.inv_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR, this.inv_buttons[INV.HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER], 3), this.inv_buttons[INV.HAMMER].id = INV.HAMMER, this.inv_buttons[INV.HAMMER_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_GOLD], 3), this.inv_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD, this.inv_buttons[INV.HAMMER_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_DIAMOND], 3), this.inv_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND, this.inv_buttons[INV.HAMMER_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_AMETHYST], 3), this.inv_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST, this.inv_buttons[INV.HAMMER_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_REIDITE], 3), this.inv_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE, this.inv_buttons[INV.AMETHYST_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_WALL], 3), this.inv_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL, this.inv_buttons[INV.AMETHYST_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPIKE], 3), this.inv_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE, this.inv_buttons[INV.AMETHYST_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE], 3), this.inv_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR, this.inv_buttons[INV.CAP_SCARF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CAP_SCARF], 3), this.inv_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF, this.inv_buttons[INV.FUR_WINTER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_WINTER], 3), this.inv_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER, this.inv_buttons[INV.FUR_WINTER].info.img[2] = this.inv_buttons[INV.FUR_WINTER].info.img[0], this.inv_buttons[INV.FUR_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_MAMMOTH], 3), this.inv_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH, this.inv_buttons[INV.FUR_MAMMOTH].info.img[2] = this.inv_buttons[INV.FUR_MAMMOTH].info.img[0], this.inv_buttons[INV.BLUE_CORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BLUE_CORD], 3), this.inv_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD, this.inv_buttons[INV.BLUE_CORD].info.img[2] = this.inv_buttons[INV.BLUE_CORD].info.img[0], this.inv_buttons[INV.LOCK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LOCK], 3), this.inv_buttons[INV.LOCK].id = INV.LOCK, this.inv_buttons[INV.LOCK].info.img[2] = this.inv_buttons[INV.LOCK].info.img[0], this.inv_buttons[INV.DRAGON_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_HEART], 3), this.inv_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART, this.inv_buttons[INV.LAVA_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3), this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART, this.inv_buttons[INV.RESURRECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_RESURRECTION], 3), this.inv_buttons[INV.RESURRECTION].id = INV.RESURRECTION, this.inv_buttons[INV.LOCKPICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LOCKPICK], 3), this.inv_buttons[INV.LOCKPICK].id = INV.LOCKPICK, this.inv_buttons[INV.TOTEM] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOTEM], 3), this.inv_buttons[INV.TOTEM].id = INV.TOTEM, this.inv_buttons[INV.AMETHYST_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_HELMET], 3), this.inv_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET, this.inv_buttons[INV.SUPER_HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUPER_HAMMER], 3), this.inv_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER, this.inv_buttons[INV.BRIDGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BRIDGE], 3), this.inv_buttons[INV.BRIDGE].id = INV.BRIDGE, this.inv_buttons[INV.WOOD_TOWER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_TOWER], 3), this.inv_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER, this.inv_buttons[INV.BOAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOAT], 3), this.inv_buttons[INV.BOAT].id = INV.BOAT, this.inv_buttons[INV.SLED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SLED], 3), this.inv_buttons[INV.SLED].id = INV.SLED, this.inv_buttons[INV.PLANE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLANE], 3), this.inv_buttons[INV.PLANE].id = INV.PLANE, this.inv_buttons[INV.SADDLE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SADDLE], 3), this.inv_buttons[INV.SADDLE].id = INV.SADDLE, this.inv_buttons[INV.MOUNT_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MOUNT_BOAR], 3), this.inv_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR, this.inv_buttons[INV.CRAB_BOSS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_BOSS], 3), this.inv_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS, this.inv_buttons[INV.BABY_DRAGON] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_DRAGON], 3), this.inv_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON, this.inv_buttons[INV.BABY_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_MAMMOTH], 3), this.inv_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH, this.inv_buttons[INV.BABY_LAVA] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_LAVA], 3), this.inv_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA, this.inv_buttons[INV.HAWK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAWK], 3), this.inv_buttons[INV.HAWK].id = INV.HAWK, this.inv_buttons[INV.SAND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SAND], 3), this.inv_buttons[INV.SAND].id = INV.SAND, this.inv_buttons[INV.SAND].info.img[2] = this.inv_buttons[INV.SAND].info.img[0], this.inv_buttons[INV.BOTTLE_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOTTLE_FULL], 3), this.inv_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL, this.inv_buttons[INV.BOTTLE_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOTTLE_EMPTY], 3), this.inv_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY, this.inv_buttons[INV.SHOVEL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL], 3), this.inv_buttons[INV.SHOVEL].id = INV.SHOVEL, this.inv_buttons[INV.SHOVEL_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_GOLD], 3), this.inv_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD, this.inv_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_DIAMOND], 3), this.inv_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND, this.inv_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_AMETHYST], 3), this.inv_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST, this.inv_buttons[INV.SPANNER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPANNER], 3), this.inv_buttons[INV.SPANNER].id = INV.SPANNER, this.inv_buttons[INV.KRAKEN_SKIN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_KRAKEN_SKIN], 3), this.inv_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN, this.inv_buttons[INV.KRAKEN_SKIN].info.img[2] = this.inv_buttons[INV.KRAKEN_SKIN].info.img[0], this.inv_buttons[INV.WATERING_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERING_CAN], 3), this.inv_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN, this.inv_buttons[INV.FLOUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLOUR], 3), this.inv_buttons[INV.FLOUR].id = INV.FLOUR, this.inv_buttons[INV.FLOUR].info.img[2] = this.inv_buttons[INV.FLOUR].info.img[0], this.inv_buttons[INV.WHEAT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WHEAT_SEED], 3), this.inv_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED, this.inv_buttons[INV.COOKIE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COOKIE], 3), this.inv_buttons[INV.COOKIE].id = INV.COOKIE, this.inv_buttons[INV.WILD_WHEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WILD_WHEAT], 3), this.inv_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT, this.inv_buttons[INV.WILD_WHEAT].info.img[2] = this.inv_buttons[INV.WILD_WHEAT].info.img[0], this.inv_buttons[INV.WINDMILL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINDMILL], 3), this.inv_buttons[INV.WINDMILL].id = INV.WINDMILL, this.inv_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUPER_DIVING_SUIT], 3), this.inv_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT, this.inv_buttons[INV.DIVING_MASK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIVING_MASK], 3), this.inv_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK, this.inv_buttons[INV.WATERING_CAN_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERING_CAN_FULL], 3), this.inv_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL, this.inv_buttons[INV.CAKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CAKE], 3), this.inv_buttons[INV.CAKE].id = INV.CAKE, this.inv_buttons[INV.BREAD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BREAD], 3), this.inv_buttons[INV.BREAD].id = INV.BREAD, this.inv_buttons[INV.FOODFISH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FOODFISH], 3), this.inv_buttons[INV.FOODFISH].id = INV.FOODFISH, this.inv_buttons[INV.FOODFISH_COOKED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FOODFISH_COOKED], 3), this.inv_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED, this.inv_buttons[INV.SCALES] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SCALES], 3), this.inv_buttons[INV.SCALES].id = INV.SCALES, this.inv_buttons[INV.SCALES].info.img[2] = this.inv_buttons[INV.SCALES].info.img[0], this.inv_buttons[INV.GROUND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GROUND], 3), this.inv_buttons[INV.GROUND].id = INV.GROUND, this.inv_buttons[INV.GROUND].info.img[2] = this.inv_buttons[INV.GROUND].info.img[0], this.inv_buttons[INV.PLOT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLOT], 3), this.inv_buttons[INV.PLOT].id = INV.PLOT, this.inv_buttons[INV.ICE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ICE], 3), this.inv_buttons[INV.ICE].id = INV.ICE, this.inv_buttons[INV.ICE].info.img[2] = this.inv_buttons[INV.ICE].info.img[0], this.inv_buttons[INV.BREAD_OVEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BREAD_OVEN], 3), this.inv_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN, this.inv_buttons[INV.SANDWICH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SANDWICH], 3), this.inv_buttons[INV.SANDWICH].id = INV.SANDWICH, this.inv_buttons[INV.DRAGON_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_HELMET], 3), this.inv_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET, this.inv_buttons[INV.DRAGON_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3), this.inv_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD, this.inv_buttons[INV.DRAGON_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_ORB], 3), this.inv_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB, this.inv_buttons[INV.DRAGON_ORB].info.img[2] = this.inv_buttons[INV.DRAGON_ORB].info.img[0], this.inv_buttons[INV.DRAGON_CUBE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_CUBE], 3), this.inv_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE, this.inv_buttons[INV.DRAGON_CUBE].info.img[2] = this.inv_buttons[INV.DRAGON_CUBE].info.img[0], this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3), this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR, this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3), this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD, this.inv_buttons[INV.LAVA_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3), this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB, this.inv_buttons[INV.LAVA_ORB].info.img[2] = this.inv_buttons[INV.LAVA_ORB].info.img[0], this.inv_buttons[INV.LAVA_CUBE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_CUBE], 3), this.inv_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE, this.inv_buttons[INV.LAVA_CUBE].info.img[2] = this.inv_buttons[INV.LAVA_CUBE].info.img[0], this.inv_buttons[INV.CROWN_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_GREEN], 3), this.inv_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN, this.inv_buttons[INV.GEMME_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_GREEN], 3), this.inv_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN, this.inv_buttons[INV.GEMME_GREEN].info.img[2] = this.inv_buttons[INV.GEMME_GREEN].info.img[0], this.inv_buttons[INV.GEMME_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_ORANGE], 3), this.inv_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE, this.inv_buttons[INV.GEMME_ORANGE].info.img[2] = this.inv_buttons[INV.GEMME_ORANGE].info.img[0], this.inv_buttons[INV.CROWN_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_ORANGE], 3), this.inv_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE, this.inv_buttons[INV.GEMME_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_BLUE], 3), this.inv_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE, this.inv_buttons[INV.GEMME_BLUE].info.img[2] = this.inv_buttons[INV.GEMME_BLUE].info.img[0], this.inv_buttons[INV.CROWN_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_BLUE], 3), this.inv_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE, this.inv_buttons[INV.HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HOOD], 3), this.inv_buttons[INV.HOOD].id = INV.HOOD, this.inv_buttons[INV.PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PEASANT], 3), this.inv_buttons[INV.PEASANT].id = INV.PEASANT, this.inv_buttons[INV.SPECIAL_FUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR], 3), this.inv_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR, this.inv_buttons[INV.SPECIAL_FUR_2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR_2], 3), this.inv_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2, this.inv_buttons[INV.WINTER_PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINTER_PEASANT], 3), this.inv_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT, this.inv_buttons[INV.WINTER_HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINTER_HOOD], 3), this.inv_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD, this.inv_buttons[INV.BUCKET_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BUCKET_FULL], 3), this.inv_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL, this.inv_buttons[INV.BUCKET_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BUCKET_EMPTY], 3), this.inv_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY, this.inv_buttons[INV.WELL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WELL], 3), this.inv_buttons[INV.WELL].id = INV.WELL, this.inv_buttons[INV.SIGN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SIGN], 3), this.inv_buttons[INV.SIGN].id = INV.SIGN, this.inv_buttons[INV.PUMPKIN_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PUMPKIN_SEED], 3), this.inv_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED, this.inv_buttons[INV.PUMPKIN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PUMPKIN], 3), this.inv_buttons[INV.PUMPKIN].id = INV.PUMPKIN, this.inv_buttons[INV.GARLIC_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLIC_SEED], 3), this.inv_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED, this.inv_buttons[INV.GARLIC] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLIC], 3), this.inv_buttons[INV.GARLIC].id = INV.GARLIC, this.inv_buttons[INV.ROOF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ROOF], 3), this.inv_buttons[INV.ROOF].id = INV.ROOF, this.inv_buttons[INV.THORNBUSH_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_THORNBUSH_SEED], 3), this.inv_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED, this.inv_buttons[INV.THORNBUSH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_THORNBUSH], 3), this.inv_buttons[INV.THORNBUSH].id = INV.THORNBUSH, this.inv_buttons[INV.CARROT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CARROT_SEED], 3), this.inv_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED, this.inv_buttons[INV.CARROT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CARROT], 3), this.inv_buttons[INV.CARROT].id = INV.CARROT, this.inv_buttons[INV.TOMATO_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOMATO_SEED], 3), this.inv_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED, this.inv_buttons[INV.TOMATO] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOMATO], 3), this.inv_buttons[INV.TOMATO].id = INV.TOMATO, this.inv_buttons[INV.WATERMELON_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERMELON_SEED], 3), this.inv_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED, this.inv_buttons[INV.WATERMELON] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERMELON], 3), this.inv_buttons[INV.WATERMELON].id = INV.WATERMELON, this.inv_buttons[INV.ALOE_VERA_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ALOE_VERA_SEED], 3), this.inv_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED, this.inv_buttons[INV.ALOE_VERA] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ALOE_VERA], 3), this.inv_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA, this.inv_buttons[INV.CHRISTMAS_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CHRISTMAS_HAT], 3), this.inv_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT, this.inv_buttons[INV.ELF_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ELF_HAT], 3), this.inv_buttons[INV.ELF_HAT].id = INV.ELF_HAT, this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3), this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR, this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3), this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR, this.inv_buttons[INV.CRAB_STICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_STICK], 3), this.inv_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK, this.inv_buttons[INV.CRAB_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_SPEAR], 3), this.inv_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR, this.inv_buttons[INV.CRAB_LOOT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_LOOT], 3), this.inv_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT, this.inv_buttons[INV.BED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BED], 3), this.inv_buttons[INV.BED].id = INV.BED, this.inv_buttons[INV.CROWN_CRAB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_CRAB], 3), this.inv_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB, this.inv_buttons[INV.GARLAND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLAND], 3), this.inv_buttons[INV.GARLAND].id = INV.GARLAND, this.inv_buttons[INV.CANDY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CANDY], 3), this.inv_buttons[INV.CANDY].id = INV.CANDY, this.inv_buttons[INV.SUGAR_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUGAR_CAN], 3), this.inv_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN, this.craft_buttons = [], this.craft_buttons[CRAFT.SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD], 3), this.craft_buttons[CRAFT.SWORD].id = CRAFT.SWORD, this.craft_buttons[CRAFT.PICK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK], 3), this.craft_buttons[CRAFT.PICK].id = CRAFT.PICK, this.craft_buttons[CRAFT.FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FIRE], 3), this.craft_buttons[CRAFT.FIRE].id = CRAFT.FIRE, this.craft_buttons[CRAFT.WORKBENCH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WORK], 3), this.craft_buttons[CRAFT.WORKBENCH].id = CRAFT.WORKBENCH, this.craft_buttons[CRAFT.WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WALL], 3), this.craft_buttons[CRAFT.WALL].id = CRAFT.WALL, this.craft_buttons[CRAFT.SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPIKE], 3), this.craft_buttons[CRAFT.SPIKE].id = CRAFT.SPIKE, this.craft_buttons[CRAFT.SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SEED], 3), this.craft_buttons[CRAFT.SEED].id = CRAFT.SEED, this.craft_buttons[CRAFT.PICK_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_GOLD], 3), this.craft_buttons[CRAFT.PICK_GOLD].id = CRAFT.PICK_GOLD, this.craft_buttons[CRAFT.PICK_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_DIAMOND], 3), this.craft_buttons[CRAFT.PICK_DIAMOND].id = CRAFT.PICK_DIAMOND, this.craft_buttons[CRAFT.SWORD_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_GOLD], 3), this.craft_buttons[CRAFT.SWORD_GOLD].id = CRAFT.SWORD_GOLD, this.craft_buttons[CRAFT.SWORD_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_WOOD], 3), this.craft_buttons[CRAFT.SWORD_WOOD].id = CRAFT.SWORD_WOOD, this.craft_buttons[CRAFT.SWORD_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_DIAMOND], 3), this.craft_buttons[CRAFT.SWORD_DIAMOND].id = CRAFT.SWORD_DIAMOND, this.craft_buttons[CRAFT.PICK_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_WOOD], 3), this.craft_buttons[CRAFT.PICK_WOOD].id = CRAFT.PICK_WOOD, this.craft_buttons[CRAFT.COOKED_MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COOKED_MEAT], 3), this.craft_buttons[CRAFT.COOKED_MEAT].id = CRAFT.COOKED_MEAT, this.craft_buttons[CRAFT.BIG_FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BIG_FIRE], 3), this.craft_buttons[CRAFT.BIG_FIRE].id = CRAFT.BIG_FIRE, this.craft_buttons[CRAFT.BANDAGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BANDAGE], 3), this.craft_buttons[CRAFT.BANDAGE].id = CRAFT.BANDAGE, this.craft_buttons[CRAFT.STONE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_WALL], 3), this.craft_buttons[CRAFT.STONE_WALL].id = CRAFT.STONE_WALL, this.craft_buttons[CRAFT.GOLD_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_WALL], 3), this.craft_buttons[CRAFT.GOLD_WALL].id = CRAFT.GOLD_WALL, this.craft_buttons[CRAFT.DIAMOND_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_WALL], 3), this.craft_buttons[CRAFT.DIAMOND_WALL].id = CRAFT.DIAMOND_WALL, this.craft_buttons[CRAFT.WOOD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE], 3), this.craft_buttons[CRAFT.WOOD_DOOR].id = CRAFT.WOOD_DOOR, this.craft_buttons[CRAFT.CHEST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CHEST], 3), this.craft_buttons[CRAFT.CHEST].id = CRAFT.CHEST, this.craft_buttons[CRAFT.STONE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_SPIKE], 3), this.craft_buttons[CRAFT.STONE_SPIKE].id = CRAFT.STONE_SPIKE, this.craft_buttons[CRAFT.GOLD_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPIKE], 3), this.craft_buttons[CRAFT.GOLD_SPIKE].id = CRAFT.GOLD_SPIKE, this.craft_buttons[CRAFT.DIAMOND_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPIKE], 3), this.craft_buttons[CRAFT.DIAMOND_SPIKE].id = CRAFT.DIAMOND_SPIKE, this.craft_buttons[CRAFT.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3), this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG, this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3), this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS, this.craft_buttons[CRAFT.STONE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE], 3), this.craft_buttons[CRAFT.STONE_DOOR].id = CRAFT.STONE_DOOR, this.craft_buttons[CRAFT.GOLD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE], 3), this.craft_buttons[CRAFT.GOLD_DOOR].id = CRAFT.GOLD_DOOR, this.craft_buttons[CRAFT.DIAMOND_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE], 3), this.craft_buttons[CRAFT.DIAMOND_DOOR].id = CRAFT.DIAMOND_DOOR, this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3), this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS, this.craft_buttons[CRAFT.COAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COAT], 3), this.craft_buttons[CRAFT.COAT].id = CRAFT.COAT, this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3), this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR, this.craft_buttons[CRAFT.SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPEAR], 3), this.craft_buttons[CRAFT.SPEAR].id = CRAFT.SPEAR, this.craft_buttons[CRAFT.GOLD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPEAR], 3), this.craft_buttons[CRAFT.GOLD_SPEAR].id = CRAFT.GOLD_SPEAR, this.craft_buttons[CRAFT.DIAMOND_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPEAR], 3), this.craft_buttons[CRAFT.DIAMOND_SPEAR].id = CRAFT.DIAMOND_SPEAR, this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3), this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR, this.craft_buttons[CRAFT.FURNACE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FURNACE], 3), this.craft_buttons[CRAFT.FURNACE].id = CRAFT.FURNACE, this.craft_buttons[CRAFT.EXPLORER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXPLORER_HAT], 3), this.craft_buttons[CRAFT.EXPLORER_HAT].id = CRAFT.EXPLORER_HAT, this.craft_buttons[CRAFT.PIRATE_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_HAT], 3), this.craft_buttons[CRAFT.PIRATE_HAT].id = CRAFT.PIRATE_HAT, this.craft_buttons[CRAFT.FLOWER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FLOWER_HAT], 3), this.craft_buttons[CRAFT.FLOWER_HAT].id = CRAFT.FLOWER_HAT, this.craft_buttons[CRAFT.FUR_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FUR_HAT], 3), this.craft_buttons[CRAFT.FUR_HAT].id = CRAFT.FUR_HAT, this.craft_buttons[CRAFT.TURBAN1] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TURBAN1], 3), this.craft_buttons[CRAFT.TURBAN1].id = CRAFT.TURBAN1, this.craft_buttons[CRAFT.TURBAN2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TURBAN2], 3), this.craft_buttons[CRAFT.TURBAN2].id = CRAFT.TURBAN2, this.craft_buttons[CRAFT.WOOD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_BOW], 3), this.craft_buttons[CRAFT.WOOD_BOW].id = CRAFT.WOOD_BOW, this.craft_buttons[CRAFT.WOOD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_ARROW], 3), this.craft_buttons[CRAFT.WOOD_ARROW].id = CRAFT.WOOD_ARROW, this.craft_buttons[CRAFT.WOOD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SHIELD], 3), this.craft_buttons[CRAFT.WOOD_SHIELD].id = CRAFT.WOOD_SHIELD, this.craft_buttons[CRAFT.STONE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_BOW], 3), this.craft_buttons[CRAFT.STONE_BOW].id = CRAFT.STONE_BOW, this.craft_buttons[CRAFT.STONE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_ARROW], 3), this.craft_buttons[CRAFT.STONE_ARROW].id = CRAFT.STONE_ARROW, this.craft_buttons[CRAFT.STONE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_SHIELD], 3), this.craft_buttons[CRAFT.STONE_SHIELD].id = CRAFT.STONE_SHIELD, this.craft_buttons[CRAFT.GOLD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_BOW], 3), this.craft_buttons[CRAFT.GOLD_BOW].id = CRAFT.GOLD_BOW, this.craft_buttons[CRAFT.GOLD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_ARROW], 3), this.craft_buttons[CRAFT.GOLD_ARROW].id = CRAFT.GOLD_ARROW, this.craft_buttons[CRAFT.GOLD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SHIELD], 3), this.craft_buttons[CRAFT.GOLD_SHIELD].id = CRAFT.GOLD_SHIELD, this.craft_buttons[CRAFT.DIAMOND_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_BOW], 3), this.craft_buttons[CRAFT.DIAMOND_BOW].id = CRAFT.DIAMOND_BOW, this.craft_buttons[CRAFT.DIAMOND_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_ARROW], 3), this.craft_buttons[CRAFT.DIAMOND_ARROW].id = CRAFT.DIAMOND_ARROW, this.craft_buttons[CRAFT.DIAMOND_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SHIELD], 3), this.craft_buttons[CRAFT.DIAMOND_SHIELD].id = CRAFT.DIAMOND_SHIELD, this.craft_buttons[CRAFT.AMETHYST_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_BOW], 3), this.craft_buttons[CRAFT.AMETHYST_BOW].id = CRAFT.AMETHYST_BOW, this.craft_buttons[CRAFT.AMETHYST_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_ARROW], 3), this.craft_buttons[CRAFT.AMETHYST_ARROW].id = CRAFT.AMETHYST_ARROW, this.craft_buttons[CRAFT.AMETHYST_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SHIELD], 3), this.craft_buttons[CRAFT.AMETHYST_SHIELD].id = CRAFT.AMETHYST_SHIELD, this.craft_buttons[CRAFT.REIDITE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_BOW], 3), this.craft_buttons[CRAFT.REIDITE_BOW].id = CRAFT.REIDITE_BOW, this.craft_buttons[CRAFT.REIDITE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_ARROW], 3), this.craft_buttons[CRAFT.REIDITE_ARROW].id = CRAFT.REIDITE_ARROW, this.craft_buttons[CRAFT.REIDITE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SHIELD], 3), this.craft_buttons[CRAFT.REIDITE_SHIELD].id = CRAFT.REIDITE_SHIELD, this.craft_buttons[CRAFT.DRAGON_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_BOW], 3), this.craft_buttons[CRAFT.DRAGON_BOW].id = CRAFT.DRAGON_BOW, this.craft_buttons[CRAFT.DRAGON_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_ARROW], 3), this.craft_buttons[CRAFT.DRAGON_ARROW].id = CRAFT.DRAGON_ARROW, this.craft_buttons[CRAFT.WOOD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_HELMET], 3), this.craft_buttons[CRAFT.WOOD_HELMET].id = CRAFT.WOOD_HELMET, this.craft_buttons[CRAFT.STONE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_HELMET], 3), this.craft_buttons[CRAFT.STONE_HELMET].id = CRAFT.STONE_HELMET, this.craft_buttons[CRAFT.GOLD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_HELMET], 3), this.craft_buttons[CRAFT.GOLD_HELMET].id = CRAFT.GOLD_HELMET, this.craft_buttons[CRAFT.DIAMOND_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_HELMET], 3), this.craft_buttons[CRAFT.DIAMOND_HELMET].id = CRAFT.DIAMOND_HELMET, this.craft_buttons[CRAFT.BOOK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOOK], 3), this.craft_buttons[CRAFT.BOOK].id = CRAFT.BOOK, this.craft_buttons[CRAFT.PAPER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PAPER], 3), this.craft_buttons[CRAFT.PAPER].id = CRAFT.PAPER, this.craft_buttons[CRAFT.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3), this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG, this.craft_buttons[CRAFT.SWORD_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_AMETHYST], 3), this.craft_buttons[CRAFT.SWORD_AMETHYST].id = CRAFT.SWORD_AMETHYST, this.craft_buttons[CRAFT.PIRATE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_SWORD], 3), this.craft_buttons[CRAFT.PIRATE_SWORD].id = CRAFT.PIRATE_SWORD, this.craft_buttons[CRAFT.PICK_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_AMETHYST], 3), this.craft_buttons[CRAFT.PICK_AMETHYST].id = CRAFT.PICK_AMETHYST, this.craft_buttons[CRAFT.PICK_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_REIDITE], 3), this.craft_buttons[CRAFT.PICK_REIDITE].id = CRAFT.PICK_REIDITE, this.craft_buttons[CRAFT.AMETHYST_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPEAR], 3), this.craft_buttons[CRAFT.AMETHYST_SPEAR].id = CRAFT.AMETHYST_SPEAR, this.craft_buttons[CRAFT.HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER], 3), this.craft_buttons[CRAFT.HAMMER].id = CRAFT.HAMMER, this.craft_buttons[CRAFT.HAMMER_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_GOLD], 3), this.craft_buttons[CRAFT.HAMMER_GOLD].id = CRAFT.HAMMER_GOLD, this.craft_buttons[CRAFT.HAMMER_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_DIAMOND], 3), this.craft_buttons[CRAFT.HAMMER_DIAMOND].id = CRAFT.HAMMER_DIAMOND, this.craft_buttons[CRAFT.HAMMER_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_AMETHYST], 3), this.craft_buttons[CRAFT.HAMMER_AMETHYST].id = CRAFT.HAMMER_AMETHYST, this.craft_buttons[CRAFT.HAMMER_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_REIDITE], 3), this.craft_buttons[CRAFT.HAMMER_REIDITE].id = CRAFT.HAMMER_REIDITE, this.craft_buttons[CRAFT.AMETHYST_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_WALL], 3), this.craft_buttons[CRAFT.AMETHYST_WALL].id = CRAFT.AMETHYST_WALL, this.craft_buttons[CRAFT.AMETHYST_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPIKE], 3), this.craft_buttons[CRAFT.AMETHYST_SPIKE].id = CRAFT.AMETHYST_SPIKE, this.craft_buttons[CRAFT.AMETHYST_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE], 3), this.craft_buttons[CRAFT.AMETHYST_DOOR].id = CRAFT.AMETHYST_DOOR, this.craft_buttons[CRAFT.CAP_SCARF] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CAP_SCARF], 3), this.craft_buttons[CRAFT.CAP_SCARF].id = CRAFT.CAP_SCARF, this.craft_buttons[CRAFT.BLUE_CORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BLUE_CORD], 3), this.craft_buttons[CRAFT.BLUE_CORD].id = CRAFT.BLUE_CORD, this.craft_buttons[CRAFT.LOCK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LOCK], 3), this.craft_buttons[CRAFT.LOCK].id = CRAFT.LOCK, this.craft_buttons[CRAFT.RESURRECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_RESURRECTION], 3), this.craft_buttons[CRAFT.RESURRECTION].id = CRAFT.RESURRECTION, this.craft_buttons[CRAFT.LOCKPICK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LOCKPICK], 3), this.craft_buttons[CRAFT.LOCKPICK].id = CRAFT.LOCKPICK, this.craft_buttons[CRAFT.TOTEM] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TOTEM], 3), this.craft_buttons[CRAFT.TOTEM].id = CRAFT.TOTEM, this.craft_buttons[CRAFT.AMETHYST_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_HELMET], 3), this.craft_buttons[CRAFT.AMETHYST_HELMET].id = CRAFT.AMETHYST_HELMET, this.craft_buttons[CRAFT.SUPER_HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SUPER_HAMMER], 3), this.craft_buttons[CRAFT.SUPER_HAMMER].id = CRAFT.SUPER_HAMMER, this.craft_buttons[CRAFT.BRIDGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BRIDGE], 3), this.craft_buttons[CRAFT.BRIDGE].id = CRAFT.BRIDGE, this.craft_buttons[CRAFT.WOOD_TOWER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_TOWER], 3), this.craft_buttons[CRAFT.WOOD_TOWER].id = CRAFT.WOOD_TOWER, this.craft_buttons[CRAFT.BOAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOAT], 3), this.craft_buttons[CRAFT.BOAT].id = CRAFT.BOAT, this.craft_buttons[CRAFT.SLED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SLED], 3), this.craft_buttons[CRAFT.SLED].id = CRAFT.SLED, this.craft_buttons[CRAFT.PLANE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PLANE], 3), this.craft_buttons[CRAFT.PLANE].id = CRAFT.PLANE, this.craft_buttons[CRAFT.SADDLE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SADDLE], 3), this.craft_buttons[CRAFT.SADDLE].id = CRAFT.SADDLE, this.craft_buttons[CRAFT.MOUNT_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_MOUNT_BOAR], 3), this.craft_buttons[CRAFT.MOUNT_BOAR].id = CRAFT.MOUNT_BOAR, this.craft_buttons[CRAFT.BABY_DRAGON] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BABY_DRAGON], 3), this.craft_buttons[CRAFT.BABY_DRAGON].id = CRAFT.BABY_DRAGON, this.craft_buttons[CRAFT.BABY_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BABY_MAMMOTH], 3), this.craft_buttons[CRAFT.BABY_MAMMOTH].id = CRAFT.BABY_MAMMOTH, this.craft_buttons[CRAFT.CRAB_BOSS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CRAB_BOSS], 3), this.craft_buttons[CRAFT.CRAB_BOSS].id = CRAFT.CRAB_BOSS, this.craft_buttons[CRAFT.BOTTLE_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_EMPTY], 3), this.craft_buttons[CRAFT.BOTTLE_EMPTY].id = CRAFT.BOTTLE_EMPTY, this.craft_buttons[CRAFT.BOTTLE_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3), this.craft_buttons[CRAFT.BOTTLE_FULL].id = CRAFT.BOTTLE_FULL, this.craft_buttons[CRAFT.BOTTLE_FULL_2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3), this.craft_buttons[CRAFT.BOTTLE_FULL_2].id = CRAFT.BOTTLE_FULL_2, this.craft_buttons[CRAFT.BOTTLE_FULL_3] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3), this.craft_buttons[CRAFT.BOTTLE_FULL_3].id = CRAFT.BOTTLE_FULL_3, this.craft_buttons[CRAFT.SHOVEL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL], 3), this.craft_buttons[CRAFT.SHOVEL].id = CRAFT.SHOVEL, this.craft_buttons[CRAFT.SHOVEL_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_GOLD], 3), this.craft_buttons[CRAFT.SHOVEL_GOLD].id = CRAFT.SHOVEL_GOLD, this.craft_buttons[CRAFT.SHOVEL_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_DIAMOND], 3), this.craft_buttons[CRAFT.SHOVEL_DIAMOND].id = CRAFT.SHOVEL_DIAMOND, this.craft_buttons[CRAFT.SHOVEL_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_AMETHYST], 3), this.craft_buttons[CRAFT.SHOVEL_AMETHYST].id = CRAFT.SHOVEL_AMETHYST, this.craft_buttons[CRAFT.SPANNER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPANNER], 3), this.craft_buttons[CRAFT.SPANNER].id = CRAFT.SPANNER, this.craft_buttons[CRAFT.WATERING_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN], 3), this.craft_buttons[CRAFT.WATERING_CAN].id = CRAFT.WATERING_CAN, this.craft_buttons[CRAFT.WHEAT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WHEAT_SEED], 3), this.craft_buttons[CRAFT.WHEAT_SEED].id = CRAFT.WHEAT_SEED, this.craft_buttons[CRAFT.COOKIE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COOKIE], 3), this.craft_buttons[CRAFT.COOKIE].id = CRAFT.COOKIE, this.craft_buttons[CRAFT.WINDMILL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINDMILL], 3), this.craft_buttons[CRAFT.WINDMILL].id = CRAFT.WINDMILL, this.craft_buttons[CRAFT.SUPER_DIVING_SUIT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT], 3), this.craft_buttons[CRAFT.SUPER_DIVING_SUIT].id = CRAFT.SUPER_DIVING_SUIT, this.craft_buttons[CRAFT.DIVING_MASK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIVING_MASK], 3), this.craft_buttons[CRAFT.DIVING_MASK].id = CRAFT.DIVING_MASK, this.craft_buttons[CRAFT.WATERING_CAN_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN_FULL], 3), this.craft_buttons[CRAFT.WATERING_CAN_FULL].id = CRAFT.WATERING_CAN_FULL, this.craft_buttons[CRAFT.CAKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CAKE], 3), this.craft_buttons[CRAFT.CAKE].id = CRAFT.CAKE, this.craft_buttons[CRAFT.BREAD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BREAD], 3), this.craft_buttons[CRAFT.BREAD].id = CRAFT.BREAD, this.craft_buttons[CRAFT.FOODFISH_COOKED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FOODFISH_COOKED], 3), this.craft_buttons[CRAFT.FOODFISH_COOKED].id = CRAFT.FOODFISH_COOKED, this.craft_buttons[CRAFT.PLOT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PLOT], 3), this.craft_buttons[CRAFT.PLOT].id = CRAFT.PLOT, this.craft_buttons[CRAFT.BREAD_OVEN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BREAD_OVEN], 3), this.craft_buttons[CRAFT.BREAD_OVEN].id = CRAFT.BREAD_OVEN, this.craft_buttons[CRAFT.SANDWICH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SANDWICH], 3), this.craft_buttons[CRAFT.SANDWICH].id = CRAFT.SANDWICH, this.craft_buttons[CRAFT.DRAGON_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_HELMET], 3), this.craft_buttons[CRAFT.DRAGON_HELMET].id = CRAFT.DRAGON_HELMET, this.craft_buttons[CRAFT.DRAGON_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3), this.craft_buttons[CRAFT.DRAGON_SWORD].id = CRAFT.DRAGON_SWORD, this.craft_buttons[CRAFT.CROWN_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_GREEN], 3), this.craft_buttons[CRAFT.CROWN_GREEN].id = CRAFT.CROWN_GREEN, this.craft_buttons[CRAFT.CROWN_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_ORANGE], 3), this.craft_buttons[CRAFT.CROWN_ORANGE].id = CRAFT.CROWN_ORANGE, this.craft_buttons[CRAFT.CROWN_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_BLUE], 3), this.craft_buttons[CRAFT.CROWN_BLUE].id = CRAFT.CROWN_BLUE, this.craft_buttons[CRAFT.HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HOOD], 3), this.craft_buttons[CRAFT.HOOD].id = CRAFT.HOOD, this.craft_buttons[CRAFT.PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PEASANT], 3), this.craft_buttons[CRAFT.PEASANT].id = CRAFT.PEASANT, this.craft_buttons[CRAFT.WINTER_PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINTER_PEASANT], 3), this.craft_buttons[CRAFT.WINTER_PEASANT].id = CRAFT.WINTER_PEASANT, this.craft_buttons[CRAFT.WINTER_HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINTER_HOOD], 3), this.craft_buttons[CRAFT.WINTER_HOOD].id = CRAFT.WINTER_HOOD, this.craft_buttons[CRAFT.BUCKET_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_FULL], 3), this.craft_buttons[CRAFT.BUCKET_FULL].id = CRAFT.BUCKET_FULL, this.craft_buttons[CRAFT.BUCKET_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_EMPTY], 3), this.craft_buttons[CRAFT.BUCKET_EMPTY].id = CRAFT.BUCKET_EMPTY, this.craft_buttons[CRAFT.WELL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WELL], 3), this.craft_buttons[CRAFT.WELL].id = CRAFT.WELL, this.craft_buttons[CRAFT.SIGN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SIGN], 3), this.craft_buttons[CRAFT.SIGN].id = CRAFT.SIGN, this.craft_buttons[CRAFT.PUMPKIN_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PUMPKIN_SEED], 3), this.craft_buttons[CRAFT.PUMPKIN_SEED].id = CRAFT.PUMPKIN_SEED, this.craft_buttons[CRAFT.GARLIC_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GARLIC_SEED], 3), this.craft_buttons[CRAFT.GARLIC_SEED].id = CRAFT.GARLIC_SEED, this.craft_buttons[CRAFT.ROOF] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_ROOF], 3), this.craft_buttons[CRAFT.ROOF].id = CRAFT.ROOF, this.craft_buttons[CRAFT.THORNBUSH_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_THORNBUSH_SEED], 3), this.craft_buttons[CRAFT.THORNBUSH_SEED].id = CRAFT.THORNBUSH_SEED, this.craft_buttons[CRAFT.TOMATO_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TOMATO_SEED], 3), this.craft_buttons[CRAFT.TOMATO_SEED].id = CRAFT.TOMATO_SEED, this.craft_buttons[CRAFT.CARROT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CARROT_SEED], 3), this.craft_buttons[CRAFT.CARROT_SEED].id = CRAFT.CARROT_SEED, this.craft_buttons[CRAFT.WATERMELON_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERMELON_SEED], 3), this.craft_buttons[CRAFT.WATERMELON_SEED].id = CRAFT.WATERMELON_SEED, this.craft_buttons[CRAFT.ALOE_VERA_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_ALOE_VERA_SEED], 3), this.craft_buttons[CRAFT.ALOE_VERA_SEED].id = CRAFT.ALOE_VERA_SEED, this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3), this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR, this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3), this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR, this.craft_buttons[CRAFT.CRAB_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CRAB_SPEAR], 3), this.craft_buttons[CRAFT.CRAB_SPEAR].id = CRAFT.CRAB_SPEAR, this.craft_buttons[CRAFT.BED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BED], 3), this.craft_buttons[CRAFT.BED].id = CRAFT.BED, this.craft_buttons[CRAFT.CROWN_CRAB] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_CRAB], 3), this.craft_buttons[CRAFT.CROWN_CRAB].id = CRAFT.CROWN_CRAB, this.chest_buttons[INV.PITCHFORK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK], 3), this.chest_buttons[INV.PITCHFORK].id = INV.PITCHFORK, this.inv_buttons[INV.PITCHFORK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK], 3), this.inv_buttons[INV.PITCHFORK].id = INV.PITCHFORK, this.craft_buttons[CRAFT.PITCHFORK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK], 3), this.craft_buttons[CRAFT.PITCHFORK].id = CRAFT.PITCHFORK, this.chest_buttons[INV.PITCHFORK2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK2], 3), this.chest_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2, this.inv_buttons[INV.PITCHFORK2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK2], 3), this.inv_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2, this.craft_buttons[CRAFT.PITCHFORK2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK2], 3), this.craft_buttons[CRAFT.PITCHFORK2].id = CRAFT.PITCHFORK2, this.chest_buttons[INV.MACHETE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MACHETE], 3), this.chest_buttons[INV.MACHETE].id = INV.MACHETE, this.inv_buttons[INV.MACHETE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MACHETE], 3), this.inv_buttons[INV.MACHETE].id = INV.MACHETE, this.craft_buttons[CRAFT.MACHETE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_MACHETE], 3), this.craft_buttons[CRAFT.MACHETE].id = CRAFT.MACHETE, this.chest_buttons[INV.PILOT_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PILOT_HELMET], 3), this.chest_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET, this.inv_buttons[INV.PILOT_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PILOT_HELMET], 3), this.inv_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET, this.craft_buttons[CRAFT.PILOT_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PILOT_HELMET], 3), this.craft_buttons[CRAFT.PILOT_HELMET].id = CRAFT.PILOT_HELMET, this.chest_buttons[INV.PITCHFORK_PART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK_PART], 3), this.chest_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART, this.inv_buttons[INV.PITCHFORK_PART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK_PART], 3), this.inv_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART, this.chest_buttons[INV.SANDWORM_JUICE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SANDWORM_JUICE], 3), this.chest_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE, this.inv_buttons[INV.SANDWORM_JUICE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SANDWORM_JUICE], 3), this.inv_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE, this.chest_buttons[INV.PILOT_GLASSES] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PILOT_GLASSES], 3), this.chest_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES, this.inv_buttons[INV.PILOT_GLASSES] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PILOT_GLASSES], 3), this.inv_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES, this.chest_buttons[INV.EMERALD_MACHINE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EMERALD_MACHINE], 3), this.chest_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE, this.inv_buttons[INV.EMERALD_MACHINE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EMERALD_MACHINE], 3), this.inv_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE, this.craft_buttons[CRAFT.EMERALD_MACHINE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EMERALD_MACHINE], 3), this.craft_buttons[CRAFT.EMERALD_MACHINE].id = CRAFT.EMERALD_MACHINE, this.chest_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE], 3), this.chest_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE, this.inv_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_DOOR_SPIKE], 3), this.inv_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE, this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE], 3), this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE].id = CRAFT.WOOD_DOOR_SPIKE, this.chest_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_DOOR_SPIKE], 3), this.chest_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE, this.inv_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_DOOR_SPIKE], 3), this.inv_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE, this.craft_buttons[CRAFT.STONE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE], 3), this.craft_buttons[CRAFT.STONE_DOOR_SPIKE].id = CRAFT.STONE_DOOR_SPIKE, this.chest_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE], 3), this.chest_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE, this.inv_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_DOOR_SPIKE], 3), this.inv_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE, this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE], 3), this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE].id = CRAFT.GOLD_DOOR_SPIKE, this.chest_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE], 3), this.chest_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE, this.inv_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE], 3), this.inv_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE, this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE], 3), this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE].id = CRAFT.DIAMOND_DOOR_SPIKE, this.chest_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE], 3), this.chest_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
    this.inv_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE], 3), this.inv_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE, this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE], 3), this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE].id = CRAFT.AMETHYST_DOOR_SPIKE, this.chest_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE], 3), this.chest_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE, this.inv_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR_SPIKE], 3), this.inv_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE, this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE], 3), this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE].id = CRAFT.REIDITE_DOOR_SPIKE, this.chest_buttons[INV.REIDITE_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_WALL], 3), this.chest_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL, this.inv_buttons[INV.REIDITE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_WALL], 3), this.inv_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL, this.craft_buttons[CRAFT.REIDITE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_WALL], 3), this.craft_buttons[CRAFT.REIDITE_WALL].id = CRAFT.REIDITE_WALL, this.chest_buttons[INV.REIDITE_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPIKE], 3), this.chest_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE, this.inv_buttons[INV.REIDITE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SPIKE], 3), this.inv_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE, this.craft_buttons[CRAFT.REIDITE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPIKE], 3), this.craft_buttons[CRAFT.REIDITE_SPIKE].id = CRAFT.REIDITE_SPIKE, this.chest_buttons[INV.REIDITE_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR], 3), this.chest_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR, this.inv_buttons[INV.REIDITE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR], 3), this.inv_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR, this.craft_buttons[CRAFT.REIDITE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR], 3), this.craft_buttons[CRAFT.REIDITE_DOOR].id = CRAFT.REIDITE_DOOR, this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE], 3), this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE, this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE], 3), this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE, this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE], 3), this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE].id = CRAFT.EXTRACTOR_MACHINE_STONE, this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD], 3), this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD, this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD], 3), this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD, this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD], 3), this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD].id = CRAFT.EXTRACTOR_MACHINE_GOLD, this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND], 3), this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND, this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND], 3), this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND, this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND], 3), this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND].id = CRAFT.EXTRACTOR_MACHINE_DIAMOND, this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST], 3), this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST, this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST], 3), this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST, this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST], 3), this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST].id = CRAFT.EXTRACTOR_MACHINE_AMETHYST, this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE], 3), this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE, this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE], 3), this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE, this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE], 3), this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE].id = CRAFT.EXTRACTOR_MACHINE_REIDITE, this.chest_buttons[INV.FLAME] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLAME], 3), this.chest_buttons[INV.FLAME].id = INV.FLAME, this.inv_buttons[INV.FLAME] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLAME], 3), this.inv_buttons[INV.FLAME].id = INV.FLAME, this.inv_buttons[INV.FLAME].info.img[2] = this.inv_buttons[INV.FLAME].info.img[0], this.chest_buttons[INV.LAVA_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3), this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART, this.inv_buttons[INV.LAVA_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3), this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART, this.inv_buttons[INV.LAVA_HEART].info.img[2] = this.inv_buttons[INV.LAVA_HEART].info.img[0], this.chest_buttons[INV.REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE], 3), this.chest_buttons[INV.REIDITE].id = INV.REIDITE, this.inv_buttons[INV.REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE], 3), this.inv_buttons[INV.REIDITE].id = INV.REIDITE, this.inv_buttons[INV.REIDITE].info.img[2] = this.inv_buttons[INV.REIDITE].info.img[0], this.chest_buttons[INV.REIDITE_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SWORD], 3), this.chest_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD, this.inv_buttons[INV.REIDITE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SWORD], 3), this.inv_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD, this.craft_buttons[CRAFT.REIDITE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SWORD], 3), this.craft_buttons[CRAFT.REIDITE_SWORD].id = CRAFT.REIDITE_SWORD, this.chest_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_PROTECTION], 3), this.chest_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION, this.inv_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_PROTECTION], 3), this.inv_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION, this.craft_buttons[CRAFT.DIAMOND_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_PROTECTION], 3), this.craft_buttons[CRAFT.DIAMOND_PROTECTION].id = CRAFT.DIAMOND_PROTECTION, this.chest_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_PROTECTION], 3), this.chest_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION, this.inv_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_PROTECTION], 3), this.inv_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION, this.craft_buttons[CRAFT.AMETHYST_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_PROTECTION], 3), this.craft_buttons[CRAFT.AMETHYST_PROTECTION].id = CRAFT.AMETHYST_PROTECTION, this.chest_buttons[INV.REIDITE_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_PROTECTION], 3), this.chest_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION, this.inv_buttons[INV.REIDITE_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_PROTECTION], 3), this.inv_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION, this.craft_buttons[CRAFT.REIDITE_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_PROTECTION], 3), this.craft_buttons[CRAFT.REIDITE_PROTECTION].id = CRAFT.REIDITE_PROTECTION, this.chest_buttons[INV.LAVA_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HELMET], 3), this.chest_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET, this.inv_buttons[INV.LAVA_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HELMET], 3), this.inv_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET, this.craft_buttons[CRAFT.LAVA_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_HELMET], 3), this.craft_buttons[CRAFT.LAVA_HELMET].id = CRAFT.LAVA_HELMET, this.chest_buttons[INV.WITCH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WITCH], 3), this.chest_buttons[INV.WITCH].id = INV.WITCH, this.inv_buttons[INV.WITCH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WITCH], 3), this.inv_buttons[INV.WITCH].id = INV.WITCH, this.craft_buttons[CRAFT.WITCH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WITCH], 3), this.craft_buttons[CRAFT.WITCH].id = CRAFT.WITCH, this.chest_buttons[INV.WAND1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WAND1], 3), this.chest_buttons[INV.WAND1].id = INV.WAND1, this.inv_buttons[INV.WAND1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WAND1], 3), this.inv_buttons[INV.WAND1].id = INV.WAND1, this.craft_buttons[CRAFT.WAND1] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WAND1], 3), this.craft_buttons[CRAFT.WAND1].id = CRAFT.WAND1, this.chest_buttons[INV.WAND2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WAND2], 3), this.chest_buttons[INV.WAND2].id = INV.WAND2, this.inv_buttons[INV.WAND2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WAND2], 3), this.inv_buttons[INV.WAND2].id = INV.WAND2, this.craft_buttons[CRAFT.WAND2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WAND2], 3), this.craft_buttons[CRAFT.WAND2].id = CRAFT.WAND2, this.chest_buttons[INV.NIMBUS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_NIMBUS], 3), this.chest_buttons[INV.NIMBUS].id = INV.NIMBUS, this.inv_buttons[INV.NIMBUS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_NIMBUS], 3), this.inv_buttons[INV.NIMBUS].id = INV.NIMBUS, this.craft_buttons[CRAFT.NIMBUS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_NIMBUS], 3), this.craft_buttons[CRAFT.NIMBUS].id = CRAFT.NIMBUS, this.chest_buttons[INV.FIREFLY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FIREFLY], 3), this.chest_buttons[INV.FIREFLY].id = INV.FIREFLY, this.inv_buttons[INV.FIREFLY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FIREFLY], 3), this.inv_buttons[INV.FIREFLY].id = INV.FIREFLY, this.craft_buttons[CRAFT.FIREFLY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FIREFLY], 3), this.craft_buttons[CRAFT.FIREFLY].id = CRAFT.FIREFLY, this.chest_buttons[INV.REIDITE_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPEAR], 3), this.chest_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR, this.inv_buttons[INV.REIDITE_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SPEAR], 3), this.inv_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR, this.craft_buttons[CRAFT.REIDITE_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPEAR], 3), this.craft_buttons[CRAFT.REIDITE_SPEAR].id = CRAFT.REIDITE_SPEAR, this.chest_buttons[INV.REIDITE_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_HELMET], 3), this.chest_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET, this.inv_buttons[INV.REIDITE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_HELMET], 3), this.inv_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET, this.craft_buttons[CRAFT.REIDITE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_HELMET], 3), this.craft_buttons[CRAFT.REIDITE_HELMET].id = CRAFT.REIDITE_HELMET, this.chest_buttons[INV.LAVA_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_SPEAR], 3), this.chest_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR, this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3), this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR, this.craft_buttons[CRAFT.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SPEAR], 3), this.craft_buttons[CRAFT.LAVA_SPEAR].id = CRAFT.LAVA_SPEAR, this.chest_buttons[INV.LAVA_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_SWORD], 3), this.chest_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD, this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3), this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD, this.craft_buttons[CRAFT.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SWORD], 3), this.craft_buttons[CRAFT.LAVA_SWORD].id = CRAFT.LAVA_SWORD, this.chest_buttons[INV.LAVA_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3), this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB, this.inv_buttons[INV.LAVA_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3), this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB, this.chest_buttons[INV.EGG0] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG0], 3), this.chest_buttons[INV.EGG0].id = INV.EGG0, this.inv_buttons[INV.EGG0] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG0], 3), this.inv_buttons[INV.EGG0].id = INV.EGG0, this.chest_buttons[INV.EGG1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG1], 3), this.chest_buttons[INV.EGG1].id = INV.EGG1, this.inv_buttons[INV.EGG1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG1], 3), this.inv_buttons[INV.EGG1].id = INV.EGG1, this.chest_buttons[INV.EGG2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG2], 3), this.chest_buttons[INV.EGG2].id = INV.EGG2, this.inv_buttons[INV.EGG2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG2], 3), this.inv_buttons[INV.EGG2].id = INV.EGG2, this.chest_buttons[INV.EGG3] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG3], 3), this.chest_buttons[INV.EGG3].id = INV.EGG3, this.inv_buttons[INV.EGG3] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG3], 3), this.inv_buttons[INV.EGG3].id = INV.EGG3, this.chest_buttons[INV.EGG4] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG4], 3), this.chest_buttons[INV.EGG4].id = INV.EGG4, this.inv_buttons[INV.EGG4] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG4], 3), this.inv_buttons[INV.EGG4].id = INV.EGG4, this.update_craft_buttons = function() {
        for (var e = user.craft.can_craft, t = 10, i = 10, r = 0; r < e.length; r++) r > 0 && !(r % 4) && (t += e[0].info.width + 10, i = 10), e[r].info.translate.x = t, e[r].info.translate.y = i, i += 10 + e[r].info.height
    }, this.update_chest_buttons = function() {
        for (var e = Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.chest_buttons[0].info.img[0].width) + 35), t = 0; t < this.chest_buttons.length; t++) this.chest_buttons[t] && (this.chest_buttons[t].info.translate.x = e, this.chest_buttons[t].info.translate.y = 22);
        this.chest_lockpick.info.translate.x = e + 17, this.chest_lockpick.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height, this.chest_locked.info.translate.x = e + 17, this.chest_locked.info.translate.y = 30, this.chest_padlock.info.translate.x = e + 17, this.chest_padlock.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height
    }, this.update_team_buttons = function() {
        for (var e = Math.floor((canw - sprite[SPRITE.TEAM_BUTTON][0].width) / 2), t = 0; t < this.team_buttons.length; t++) this.team_buttons[t].button.info.translate.x = e, this.team_buttons[t].button.info.translate.y = -13
    }, this.update_bread_oven_button = function() {
        var e = 12 + Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.bread_oven_wood_button.info.img[0].width) + 35);
        this.bread_oven_wood_button.info.translate.x = e, this.bread_oven_wood_button.info.translate.y = 33, this.bread_oven_flour_button.info.translate.x = this.bread_oven_wood_button.info.translate.x, this.bread_oven_flour_button.info.translate.y = 137, this.bread_oven_bread_button.info.translate.x = this.bread_oven_wood_button.info.translate.x, this.bread_oven_bread_button.info.translate.y = 240
    }, this.update_extractor_button = function() {
        var e = 12 + Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.extractor_wood_button.info.img[0].width) + 35);
        this.extractor_wood_button.info.translate.x = e, this.extractor_wood_button.info.translate.y = 36, e += 83, this.extractor_stone_button.info.translate.x = e, this.extractor_stone_button.info.translate.y = 36, this.extractor_gold_button.info.translate.x = e, this.extractor_gold_button.info.translate.y = 36, this.extractor_diamond_button.info.translate.x = e, this.extractor_diamond_button.info.translate.y = 36, this.extractor_amethyst_button.info.translate.x = e, this.extractor_amethyst_button.info.translate.y = 36, this.extractor_reidite_button.info.translate.x = e, this.extractor_reidite_button.info.translate.y = 36
    }, this.update_windmill_button = function() {
        var e = 12 + Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.windmill_wheat_button.info.img[0].width) + 35);
        this.windmill_wheat_button.info.translate.x = e, this.windmill_wheat_button.info.translate.y = 36, e += 83, this.windmill_flour_button.info.translate.x = e, this.windmill_flour_button.info.translate.y = 36
    }, this.update_furnace_button = function() {
        var e = Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.furnace_button.info.img[0].width) + 35);
        this.furnace_button.info.translate.x = e, this.furnace_button.info.translate.y = 22
    }, this.update_inv_buttons = function() {
        var e = user.inv.can_select;
        if (e.length > 0) var t = Math.floor((canw - (e[0].info.width + 5) * user.inv.max) / 2);
        for (var i = 0; i < e.length; i++) e[i].info.translate.x = t + (e[i].info.width + 5) * i, e[i].info.translate.y = canh - e[i].info.width - 10, this.plus_buttons[e[i].id].info.translate.x = e[i].info.translate.x + 13, this.plus_buttons[e[i].id].info.translate.y = e[i].info.translate.y - this.plus_buttons[e[i].id].info.img[0].height - 6
    };
    var s, _ = 0,
        T = function() {
            if (30 == ++_) return i.add_event_listener(), void i.update();
            window.setTimeout(T, 0)
        };
    this.quit = function(e) {
        user.chat.open && user.chat.quit(), user.terminal.open && user.terminal.quit(), document.getElementById("team_box").style.display = "none", i.market.style.display = "none", i.market.open = !1, i.sign.style.display = "none", i.sign.open = !1, document.getElementById("shop_starterkit").style.display = "none", document.getElementById("home_craft").style.display = "none", document.getElementById("recipe_craft").style.display = "none", i.craft_list.open = !1, document.getElementById("option_in_game").style.display = "none", i.options.open = !1, document.getElementById("sure_delete").style.display = "none", i.safe_delete.open = !1, document.getElementById("cancel_sure_delete").style.display = "none", i.safe_cancel.open = !1, document.getElementById("chronoquest").style.display = "none", i.quests.open = !1, s = e, i.remove_event_listener(), i.can.style.cursor = i.cursor0, audio.quit(), E = -1, I(), refreshAds()
    };
    var E = -1,
        I = function() {
            if (30 == ++E) return i.stop(), void s();
            window.setTimeout(I, 33)
        };
    this.is_run = !1, this.stop = function() {
        this.is_run = !1
    }, this.run = function() {
        client.change_ground(), i.is_run = !0, E = -1, _ = 0, T()
    }, this.update = function() {
        this.leaderboard.translate.x = canw - this.leaderboard.img.width - 10, this.leaderboard.translate.y = 5, world.clock.translate.x = this.leaderboard.translate.x - sprite[SPRITE.CLOCK][0].width - 85, world.clock.translate.y = 10, this.craft_list.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.RECIPE_BUTTON][0].width - 10, this.craft_list.button.info.translate.y = 10, this.quests.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.QUEST_BUTTON][0].width - 20, this.quests.button.info.translate.y = this.craft_list.button.info.translate.y + sprite[SPRITE.RECIPE_BUTTON][0].height + 5, this.options.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20, this.options.button.info.translate.y = this.quests.button.info.translate.y + sprite[SPRITE.OPTION_BUTTON][0].height + 18, this.audio.button_on.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20, this.audio.button_on.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height, this.audio.button_off.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20, this.audio.button_off.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height, this.market.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.MARKET_BUTTON][0].width - 20, this.market.button.info.translate.y = this.audio.button_on.info.translate.y + sprite[SPRITE.MARKET_BUTTON][0].height, user.auto_feed.translate.x = this.leaderboard.translate.x - 63 - 85, user.auto_feed.translate.y = 100, user.show_spectators.translate.x = this.leaderboard.translate.x - sprite[SPRITE.SHOW_SPECTATORS].width - 85, user.show_spectators.translate.y = user.auto_feed.translate.y + 10 + sprite[SPRITE.AUTO_FEED].height, this.minimap.translate.y = canh - 3 - 193, this.minimap.translate.x = canw - 3 - 193, this.gauges.translate.x = 5, this.gauges.translate.y = canh - this.gauges.img.height - 5, this.shop.button.info.translate.x = canw2 - 45.5, this.shop.button.info.translate.y = 50, this.update_craft_buttons(), this.update_inv_buttons(), this.update_chest_buttons(), this.update_furnace_button(), this.update_windmill_button(), this.update_extractor_button(), this.update_bread_oven_button(), this.update_team_buttons(), this.sign.update_button(), draw_team_buttons(), user.chat.update(), user.terminal.update(), this.team_box.update(), this.craft_list.home.update(), this.craft_list.list.update(), this.safe_delete.update(), this.safe_cancel.update(), this.quests.update(), this.shop.update(), this.options.update(), this.market.update(), this.sign.update();
        var e = 0;
        if (30 != _) e = 1500 / (_ + 1) - 50;
        if (-1 != E) e = -(1500 / (30 - E + 1) - 48);
        this.shop.button.info.translate.y -= e > 0 ? e : -e, this.leaderboard.translate.y -= e > 0 ? e : -e, user.auto_feed.translate.y -= e > 0 ? e : -e, user.show_spectators.translate.y -= e > 0 ? e : -e, this.craft_list.button.info.translate.y -= e > 0 ? e : -e, this.quests.button.info.translate.y -= e > 0 ? e : -e, this.options.button.info.translate.y -= e > 0 ? e : -e, this.market.button.info.translate.y -= e > 0 ? e : -e, this.audio.button_on.info.translate.y -= e > 0 ? e : -e, this.audio.button_off.info.translate.y -= e > 0 ? e : -e, world.clock.translate.y -= e > 0 ? e : -e, this.gauges.translate.y -= e < 0 ? e : -e, this.minimap.translate.y -= e < 0 ? e : -e
    }, this.draw_UI = function() {
        this.show_ui && !user.zombie && draw_ui_crafting(), draw_ui_gear(), draw_ui_chat(), this.show_ui && (draw_minimap(), 1 === this.show_recipe_book && this.craft_list.button.draw(t), world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR && 1 === this.show_quest && this.quests.button.draw(t), this.options.button.draw(t), 1 === this.show_market && this.market.button.draw(t), audio.run ? this.audio.button_on.draw(t) : this.audio.button_off.draw(t), draw_leaderboard(), draw_status(), this.gauges.draw(), draw_weapon_switch_delay(), draw_helmet_switch_delay(), draw_build_delay(), draw_totem_delay(), draw_ui_inventory(), draw_chest_inventory(), draw_furnace_inventory(), draw_well_inventory(), draw_windmill_inventory(), draw_extractor_inventory(), draw_bread_oven_inventory(), draw_sign_button(), draw_team_buttons(), draw_info_box()), user.ghost.enabled && draw_resurrection_inventory(), draw_bigmap(), this.show_ui && 1 === this.show_clock && draw_clock(), user.welcome.draw(), user.alert.draw("#FFF", "#000"), this.show_ui && (user.ghost.draw(), user.shop.draw(), user.inv.drag.draw(mouse.pos.x, mouse.pos.y)), draw_reconnect()
    }, this.update_scene = function() {
        user.cam.update(), user.gauges.update(), !user.reconnect.enabled && user.alive && (user.control.update(), user.auto_feed.update()), world.update(), this.quests.update_chrono()
    }, this.draw_scene = function() {
        draw_world_with_effect()
    }, this.update_connection = function() {
        client.check_state(), client.check_pong(), client.try_ping(), client.update_cam()
    }, this.draw = function() {
        if (!user.reconnect.enabled && user.alive && this.update_connection(), audio.scheduler(), this.update_scene(), 1 !== ui.hijackedAsset) this.draw_scene(), this.draw_UI();
        else {
            var e = IMAGES.CHEATING_BOX;
            ctxDrawImage(t, e, canw2 - e.width / 4, canh2 - e.height / 4, e.width / 2, e.height / 2)
        }
    }, this.trigger_keyup = function(e) {
        if (e.code === HackSettings.AutoSpike.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoSpike.enabled = !1), user.chat.open && 27 === e.keyCode) user.chat.quit();
        else if (user.terminal.open && 27 === e.keyCode) user.terminal.quit();
        else if (user.chat.open || user.terminal.open || 79 != e.keyCode || -1 != E) {
            if (13 == e.keyCode && -1 == E) user.terminal.open ? user.terminal._send() : user.chat.run();
            else if (!user.chat.open && !user.terminal.open)
                if (82 === e.keyCode) user.auto_feed.invert();
                else if (80 !== e.keyCode || world.mode !== WORLD.MODE_HUNGER_GAMES || user.spectator)
                if (e.keyCode >= 49 && e.keyCode <= 57) {
                    if (user.craft.id < 0) {
                        var t = e.keyCode - 49,
                            i = user.inv.can_select[t];
                        i && client.select_inv(i.id, t)
                    }
                } else 89 == e.keyCode ? user.bigmap = !user.bigmap : 71 == e.keyCode && user.craft.change_mode();
            else user.show_spectators.invert()
        } else user.terminal._open();
        keyboard.up(e)
    }, this.trigger_keydown = function(e) {
        let t = world.fast_units[user.uid];
        e.code === HackSettings.AutoSpike.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoSpike.enabled = !0), e.code === HackSettings.AutoCrown.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoCrown.enabled = !HackSettings.AutoCrown.enabled), e.code === HackSettings.AutoSteal.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoSteal.enabled = !HackSettings.AutoSteal.enabled), e.code === HackSettings.AutoBridge.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoBridge.enabled = !HackSettings.AutoBridge.enabled), e.code === HackSettings.AutoTotem.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoTotem.enabled = !HackSettings.AutoTotem.enabled), e.code === HackSettings.AutoCraft.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoCraft.enabled = !HackSettings.AutoCraft.enabled), e.code === HackSettings.AutoRecycle.key && !user.chat.open && !user.terminal.open && (HackSettings.AutoRecycle.enabled = !HackSettings.AutoRecycle.enabled), e.code === HackSettings.Spectator.key && !user.chat.open && !user.terminal.open && (Spectator = !Spectator), e.code === HackSettings.Xray.key && !user.chat.open && !user.terminal.open && (HackSettings.Xray.enabled = !HackSettings.Xray.enabled), e.code === HackSettings.SwordInChest.key && !user.chat.open && !user.terminal.open && (HackSettings.SwordInChest.enabled = !HackSettings.SwordInChest.enabled), client.socket && 1 === client.socket.readyState && !t && !Spectator && client.socket.send(JSON.stringify([11])), !client.socket || 1 !== client.socket.readyState || e.code !== HackSettings.DropSword.key || user.chat.open || user.terminal.open || t && (1 != HelperFns.isPlayerHoldingWeapon(t, !1) && 2 != HelperFns.isPlayerHoldingWeapon(t, !1) || client.socket.send(JSON.stringify([6, t.right]))), keyboard.down(e), 8 != e.keyCode || user.chat.open || user.terminal.open || e.preventDefault()
    }, this.trigger_mousedown = function(e) {
        mouse.pos = get_mouse_pos(i.can, e);
        var t = !1;
        user.craft.preview < 0 && i.minimap.focus(mouse.pos);
        var r = user.chest;
        user.craft.id < 0 && r.id >= 0 && (user.chest.lock && user.chest.pid !== user.id || (t |= i.chest_buttons[user.chest.id].trigger(i.can, mouse.pos, MOUSE_DOWN)));
        var a = user.windmill;
        a.open && a.amount_flour > 0 && (t |= i.windmill_flour_button.trigger(i.can, mouse.pos, MOUSE_DOWN));
        var n = user.extractor;
        n.open && n.amount_mineral > 0 && (t |= i.extractor_stone_button.trigger(i.can, mouse.pos, MOUSE_DOWN), t |= i.extractor_gold_button.trigger(i.can, mouse.pos, MOUSE_DOWN), t |= i.extractor_diamond_button.trigger(i.can, mouse.pos, MOUSE_DOWN), t |= i.extractor_amethyst_button.trigger(i.can, mouse.pos, MOUSE_DOWN), t |= i.extractor_reidite_button.trigger(i.can, mouse.pos, MOUSE_DOWN));
        var o = user.bread_oven;
        if (o.open && o.amount_bread > 0 && (t |= i.bread_oven_bread_button.trigger(i.can, mouse.pos, MOUSE_DOWN)), user.sign.open && (t |= i.sign.button.trigger(i.can, mouse.pos, MOUSE_DOWN)), user.chest.lock || user.chest.padlock && (t |= i.chest_padlock.trigger(i.can, mouse.pos, MOUSE_DOWN)), user.chest.lockpick && (t |= i.chest_lockpick.trigger(i.can, mouse.pos, MOUSE_DOWN)), user.craft.id < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.options.open && !i.market.open)
            for (var s = user.inv.can_select, _ = 0; _ < s.length; _++) {
                var T = s[_].trigger(i.can, mouse.pos, MOUSE_DOWN);
                t |= T, T && user.inv.drag.start(_, mouse.pos), (r.open && (r.id < 0 || r.id == s[_].id) || user.furnace.open && s[_].id === INV.WOOD || user.well.open && s[_].id === INV.BUCKET_FULL || user.bread_oven.open && (s[_].id === INV.WOOD || s[_].id === INV.FLOUR) || user.windmill.open && s[_].id === INV.WILD_WHEAT || user.extractor.open && s[_].id === INV.WOOD) && (t |= i.plus_buttons[s[_].id].trigger(i.can, mouse.pos, MOUSE_DOWN))
            }
        if (user.resurrection.open && (t |= i.resurrection.trigger(i.can, mouse.pos, MOUSE_DOWN)), -1 != i.team_buttons_id) {
            if (t |= i.team_buttons[i.team_buttons_id].button.trigger(i.can, mouse.pos, MOUSE_DOWN)) var E = !0
        } else E = !1;
        if (!(!(user.craft.id < 0 && user.craft.preview < 0) || E || i.craft_list.open || i.safe_delete.open || i.options.open || i.safe_cancel.open || i.market.open || user.zombie))
            for (s = user.craft.can_craft, _ = 0; _ < s.length; _++) t |= s[_].trigger(i.can, mouse.pos, MOUSE_DOWN);
        !(user.craft.id < 0 && user.craft.preview < 0 && user.shop.open) || i.craft_list.open || i.safe_delete.open || i.options.open || i.safe_cancel.open || i.quests.open || i.market.open || (t |= i.shop.button.trigger(i.can, mouse.pos, MOUSE_DOWN)), !(user.craft.preview < 0) || i.safe_delete.open || i.options.open || i.safe_cancel.open || i.quests.open || i.market.open || (t |= i.craft_list.button.trigger(i.can, mouse.pos, MOUSE_DOWN)), !(user.craft.preview < 0) || i.craft_list.open || i.safe_delete.open || i.safe_cancel.open || i.quests.open || i.market.open || (t |= i.options.button.trigger(i.can, mouse.pos, MOUSE_DOWN)), !(user.craft.preview < 0) || i.craft_list.open || i.safe_delete.open || i.safe_cancel.open || i.quests.open || i.options.open || (t |= i.market.button.trigger(i.can, mouse.pos, MOUSE_DOWN)), !(user.craft.preview < 0) || i.craft_list.open || i.safe_delete.open || i.safe_cancel.open || i.quests.open || i.options.open || i.market.open || (audio.run ? t |= i.audio.button_on.trigger(i.can, mouse.pos, MOUSE_DOWN) : t |= i.audio.button_off.trigger(i.can, mouse.pos, MOUSE_DOWN)), !(user.craft.preview < 0) || i.craft_list.open || i.market.open || i.safe_delete.open || i.options.open || i.safe_cancel.open || world.mode === WORLD.MODE_ZOMBIES || world.mode === WORLD.MODE_LEGACY || world.mode === WORLD.MODE_BR || (t |= i.quests.button.trigger(i.can, mouse.pos, MOUSE_DOWN)), t || i.craft_list.open || i.safe_delete.open || i.options.open || i.safe_cancel.open || i.quests.open || i.market.open || i.sign.open || (user.craft.preview >= 0 ? client.send_build() : E || mouse.down())
    }, this.trigger_mouseup = function(e) {
        if (mouse.pos = get_mouse_pos(i.can, e), mouse.up(), !user.inv.drag.release()) {
            var t = user.chest,
                r = user.furnace,
                a = user.well,
                n = user.windmill,
                o = user.extractor,
                s = user.bread_oven;
            if (user.control.attack && (user.control.attack = 0, client.stop_attack()), -1 != i.team_buttons_id) {
                var _ = i.team_buttons[i.team_buttons_id].button.trigger(i.can, mouse.pos, MOUSE_UP),
                    T = document.getElementById("team_box").style;
                if (_ && "inline-block" == T.display) return void(T.display = "none");
                _ && i.team_buttons[i.team_buttons_id].action()
            }
            if (user.craft.id < 0 && t.id >= 0 && !i.safe_delete.open)
                if (!user.chest.lock || user.chest.pid === user.id)(_ = i.chest_buttons[user.chest.id].trigger(i.can, mouse.pos, MOUSE_UP)) && client.take_chest(t);
            if ((n = user.windmill).open && n.amount_flour > 0 && !i.safe_delete.open)(_ = i.windmill_flour_button.trigger(i.can, mouse.pos, MOUSE_UP)) && client.take_flour(n);
            if ((o = user.extractor).open && o.amount_mineral > 0 && !i.safe_delete.open) switch (o.type) {
                case ITEMS.EXTRACTOR_MACHINE_STONE:
                    (_ = i.extractor_stone_button.trigger(i.can, mouse.pos, MOUSE_UP)) && client.take_extractor(o);
                    break;
                case ITEMS.EXTRACTOR_MACHINE_GOLD:
                    (_ = i.extractor_gold_button.trigger(i.can, mouse.pos, MOUSE_UP)) && client.take_extractor(o);
                    break;
                case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
                    (_ = i.extractor_diamond_button.trigger(i.can, mouse.pos, MOUSE_UP)) && client.take_extractor(o);
                    break;
                case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
                    (_ = i.extractor_amethyst_button.trigger(i.can, mouse.pos, MOUSE_UP)) && client.take_extractor(o);
                    break;
                case ITEMS.EXTRACTOR_MACHINE_REIDITE:
                    (_ = i.extractor_reidite_button.trigger(i.can, mouse.pos, MOUSE_UP)) && client.take_extractor(o)
            }
            if ((s = user.bread_oven).open && s.amount_bread > 0 && !i.safe_delete.open)(_ = i.bread_oven_bread_button.trigger(i.can, mouse.pos, MOUSE_UP)) && client.take_bread(s);
            if (user.sign.open && !i.safe_delete.open)(_ = i.sign.button.trigger(i.can, mouse.pos, MOUSE_UP)) && i.sign.select();
            if (user.chest.lock || i.safe_delete.open || user.chest.padlock && (_ = i.chest_padlock.trigger(i.can, mouse.pos, MOUSE_UP)) && client.lock_chest(t), user.chest.lockpick && !i.safe_delete.open && (_ = i.chest_lockpick.trigger(i.can, mouse.pos, MOUSE_UP)) && (client.unlock_chest(t), ga && ga("send", "event", "Game", "lockpick")), user.resurrection.open)(_ = i.resurrection.trigger(i.can, mouse.pos, MOUSE_UP)) && (client.resurrection(), ga && ga("send", "event", "Game", "resurrection"));
            if (user.craft.id < 0 && !i.safe_delete.open)
                for (var E = user.inv.can_select, I = 0; I < E.length; I++) {
                    if (_ = E[I].trigger(i.can, mouse.pos, MOUSE_UP)) 1 != e.which || e.shiftKey ? (1 == e.which && e.shiftKey || 3 == e.which) && user.craft.preview < 0 && i.safe_delete.del(E[I].id) : client.select_inv(E[I].id, I);
                    else if (t.open && (t.id < 0 || t.id === E[I].id))(_ = i.plus_buttons[E[I].id].trigger(i.can, mouse.pos, MOUSE_UP)) && user.craft.preview < 0 && client.give_item(t, E[I].id, e.shiftKey ? 10 : 1);
                    else if (a.open && E[I].id === INV.BUCKET_FULL) {
                        (_ = i.plus_buttons[E[I].id].trigger(i.can, mouse.pos, MOUSE_UP)) && user.craft.preview < 0 && client.give_well(a)
                    } else if (r.open && E[I].id === INV.WOOD) {
                        (_ = i.plus_buttons[E[I].id].trigger(i.can, mouse.pos, MOUSE_UP)) && user.craft.preview < 0 && client.give_wood(r, e.shiftKey ? 10 : 1)
                    } else if (n.open && E[I].id === INV.WILD_WHEAT) {
                        (_ = i.plus_buttons[E[I].id].trigger(i.can, mouse.pos, MOUSE_UP)) && user.craft.preview < 0 && client.give_wheat(n, e.shiftKey ? 10 : 1)
                    } else if (o.open && E[I].id === INV.WOOD) {
                        (_ = i.plus_buttons[E[I].id].trigger(i.can, mouse.pos, MOUSE_UP)) && user.craft.preview < 0 && client.give_wood_extractor(o, e.shiftKey ? 10 : 1)
                    } else if (s.open && (E[I].id === INV.WOOD || E[I].id === INV.FLOUR)) {
                        (_ = i.plus_buttons[E[I].id].trigger(i.can, mouse.pos, MOUSE_UP)) && user.craft.preview < 0 && (E[I].id === INV.WOOD ? client.give_bread_oven(s, e.shiftKey ? 10 : 1, 0) : client.give_bread_oven(s, 0, e.shiftKey ? 10 : 1))
                    }
                }
            if (user.craft.id < 0 && user.craft.preview < 0 && !user.ghost.enabled && !i.safe_delete.open && !user.zombie)
                for (E = user.craft.can_craft, I = 0; I < E.length; I++) {
                    (_ = E[I].trigger(i.can, mouse.pos, MOUSE_UP)) && (ret = client.select_craft(E[I].id), ret && ga && ga("send", "event", "Game", "craft", INV_INFOS[RECIPES[E[I].id].id2].name))
                }
            if (user.craft.id < 0 && user.craft.preview < 0 && user.shop.open && !i.market.open && !i.craft_list.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.quests.open)(_ = i.shop.button.trigger(i.can, mouse.pos, MOUSE_MOVE)) && game.shop.select();
            if (user.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.market.open && !i.safe_cancel.open && !i.quests.open && !i.options.open)
                if (audio.run)(_ = i.audio.button_on.trigger(i.can, mouse.pos, MOUSE_UP)) && (audio.select(), ga && ga("send", "event", "Game", "sound on"));
                else(_ = i.audio.button_off.trigger(i.can, mouse.pos, MOUSE_UP)) && (audio.select(), ga && ga("send", "event", "Game", "sound off"));
            if (user.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.market.open)(_ = i.options.button.trigger(i.can, mouse.pos, MOUSE_UP)) && (i.options.select_options(), ga && ga("send", "event", "Game", "options"));
            if (user.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.safe_cancel.open && !i.quests.open && !i.options.open && 1 === i.show_market)(_ = i.market.button.trigger(i.can, mouse.pos, MOUSE_UP)) && (i.market.select(), ga && ga("send", "event", "Game", "market"));
            if (user.craft.preview < 0 && !i.safe_delete.open && !i.market.open && !i.options.open && !i.safe_cancel.open && !i.quests.open && 1 === i.show_recipe_book)(_ = i.craft_list.button.trigger(i.can, mouse.pos, MOUSE_UP)) && (i.craft_list.select_book(), ga && ga("send", "event", "Game", "recipe"));
            if (user.craft.preview < 0 && !i.craft_list.open && !i.safe_delete.open && !i.options.open && !i.safe_cancel.open && !i.market.open && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR && 1 === i.show_quest)(_ = i.quests.button.trigger(i.can, mouse.pos, MOUSE_UP)) && (i.quests.select(), ga && ga("send", "event", "Game", "quests"));
            user.craft.crafting && 3 == e.which && i.safe_cancel.del()
        }
    }, this.current_cursor = !1, this.trigger_mousemove = function(t) {
        mouse.pos = get_mouse_pos(i.can, t);
        var r = !1;
        game.info_box.display = 0, user.inv.drag.move(mouse.pos), -1 != i.team_buttons_id && (r |= i.team_buttons[i.team_buttons_id].button.trigger(i.can, mouse.pos, MOUSE_MOVE));
        var a = user.windmill;
        a.open && a.amount_flour > 0 && (r |= i.windmill_flour_button.trigger(i.can, mouse.pos, MOUSE_MOVE));
        var n = user.extractor;
        n.open && n.amount_mineral > 0 && (r |= i.extractor_stone_button.trigger(i.can, mouse.pos, MOUSE_MOVE), r |= i.extractor_gold_button.trigger(i.can, mouse.pos, MOUSE_MOVE), r |= i.extractor_diamond_button.trigger(i.can, mouse.pos, MOUSE_MOVE), r |= i.extractor_amethyst_button.trigger(i.can, mouse.pos, MOUSE_MOVE), r |= i.extractor_reidite_button.trigger(i.can, mouse.pos, MOUSE_MOVE));
        var o = user.bread_oven;
        o.open && o.amount_bread > 0 && (r |= i.bread_oven_bread_button.trigger(i.can, mouse.pos, MOUSE_MOVE)), user.sign.open && (r |= i.sign.button.trigger(i.can, mouse.pos, MOUSE_MOVE));
        var s = user.chest;
        if (user.craft.id < 0 && s.id >= 0 && !user.ghost.enabled && (user.chest.lock && user.chest.pid !== user.id || (r |= i.chest_buttons[s.id].trigger(i.can, mouse.pos, MOUSE_MOVE))), user.resurrection.open && (r |= i.resurrection.trigger(i.can, mouse.pos, MOUSE_MOVE)), user.chest.lock || user.ghost.enabled || user.chest.padlock && (r |= i.chest_padlock.trigger(i.can, mouse.pos, MOUSE_MOVE)), user.chest.lockpick && !user.ghost.enabled && (r |= i.chest_lockpick.trigger(i.can, mouse.pos, MOUSE_MOVE)), user.craft.id < 0 && !user.ghost.enabled)
            for (var _ = user.inv.can_select, T = 0; T < _.length; T++) {
                var E = _[T].trigger(i.can, mouse.pos, MOUSE_MOVE);
                r |= game.info_box.trigger(E, _[T], 0), (s.open && (s.id < 0 || s.id == _[T].id) || user.furnace.open && _[T].id == INV.WOOD || user.well.open && _[T].id === INV.BUCKET_FULL || user.bread_oven.open && (_[T].id == INV.WOOD || _[T].id == INV.FLOUR) || user.windmill.open && _[T].id == INV.WILD_WHEAT || user.extractor.open && _[T].id == INV.WOOD) && (r |= i.plus_buttons[_[T].id].trigger(i.can, mouse.pos, MOUSE_MOVE))
            }
        if (user.craft.id < 0 && user.craft.preview < 0 && !user.ghost.enabled && !user.zombie)
            for (_ = user.craft.can_craft, T = 0; T < _.length; T++) {
                E = !1;
                E = _[T].trigger(i.can, mouse.pos, MOUSE_MOVE), r |= game.info_box.trigger(E, _[T], 1)
            }!(user.craft.id < 0 && user.craft.preview < 0 && user.shop.open) || i.craft_list.open || i.safe_delete.open || i.options.open || i.safe_cancel.open || i.quests.open || i.market.open || (r |= i.shop.button.trigger(i.can, mouse.pos, MOUSE_MOVE)), !(user.craft.preview < 0) || i.safe_delete.open || i.options.open || i.safe_cancel.open || i.quests.open || i.market.open || 1 !== i.show_recipe_book || (r |= i.craft_list.button.trigger(i.can, mouse.pos, MOUSE_MOVE)), !(user.craft.preview < 0) || i.craft_list.open || i.safe_delete.open || i.safe_cancel.open || i.quests.open || i.market.open || (r |= i.options.button.trigger(i.can, mouse.pos, MOUSE_MOVE)), !(user.craft.preview < 0) || i.craft_list.open || i.safe_delete.open || i.safe_cancel.open || i.quests.open || i.options.open || 1 !== i.show_market || (r |= i.market.button.trigger(i.can, mouse.pos, MOUSE_MOVE)), !(user.craft.preview < 0) || i.craft_list.open || i.safe_delete.open || i.safe_cancel.open || i.quests.open || i.options.open || i.market.open || (audio.run ? r |= i.audio.button_on.trigger(i.can, mouse.pos, MOUSE_MOVE) : r |= i.audio.button_off.trigger(i.can, mouse.pos, MOUSE_MOVE)), !(user.craft.preview < 0) || i.craft_list.open || i.safe_delete.open || i.options.open || i.safe_cancel.open || i.market.open || world.mode === WORLD.MODE_ZOMBIES || world.mode === WORLD.MODE_LEGACY || world.mode === WORLD.MODE_B || 1 !== i.show_quest || (r |= i.quests.button.trigger(i.can, mouse.pos, MOUSE_MOVE)), i.current_cursor !== r && (i.current_cursor = r, e.style.cursor = r ? i.cursor1 : i.cursor0)
    }, this.add_event_listener = function() {
        window.addEventListener("mousedown", this.trigger_mousedown, !1), window.addEventListener("mouseup", this.trigger_mouseup, !1), window.addEventListener("mousemove", this.trigger_mousemove, !1), window.addEventListener("keyup", this.trigger_keyup, !1), window.addEventListener("keydown", this.trigger_keydown, !1)
    }, this.remove_event_listener = function() {
        window.removeEventListener("mousedown", this.trigger_mousedown, !1), window.removeEventListener("mouseup", this.trigger_mouseup, !1), window.removeEventListener("mousemove", this.trigger_mousemove, !1), window.removeEventListener("keyup", this.trigger_keyup, !1), window.removeEventListener("keydown", this.trigger_keydown, !1)
    }
}

function open_twitter() {
    Utils.open_in_new_box("https://twitter.com/intent/tweet?text=I%20survived%20" + user.day + "%20days%20with%20" + user.die.score + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io")
}

function open_facebook() {
    Utils.open_in_new_box("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0")
}

function Scoreboard(e, t) {
    this.can = e, this.ctx = t;
    var i = this;
    this.enable_interface = !1, this.sb = {
        id: document.getElementById("scoreboard"),
        style: document.getElementById("scoreboard").style,
        height: 0,
        translate: {
            x: 0,
            y: 0
        },
        update: function() {
            this.style.left = this.translate.x + "px", this.style.top = this.translate.y + "px"
        },
        init: function() {
            this.id.innerHTML = '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' + user.die.howdie + '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' + LANG[TEXT.DAYS_SURVIVED] + " : " + user.day + '</div><div class="stats"> ' + LANG[TEXT.KILL] + " : " + user.die.kill + '</div></div><div id="flexDisplay"><div id="score"> ' + LANG[TEXT.SCORE] + " : " + user.die.score + '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' + user.die.bank + " " + LANG[TEXT.POINTS] + '</div></div><div id="shop_points">' + LANG[TEXT.KIT_NEXT] + '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' + LANG[TEXT.TWITTER] + '</div><div class="social" id="fffacebook">' + LANG[TEXT.FACEBOOK] + '</div></div><div id="bbback">' + LANG[TEXT.BACK_TO_THE_GAME] + "</div>", this.style.display = "inline-block", document.getElementById("tttwitter").addEventListener("mouseup", open_twitter, !1), document.getElementById("bbback").addEventListener("mouseup", (function() {
                scoreboard.quit(ui.run)
            }), !1), document.getElementById("fffacebook").addEventListener("mouseup", open_facebook, !1), this.height = Math.floor(this.id.clientHeight / 2), getBreadAndScore()
        }
    };
    var r, a = 0,
        n = function() {
            30 != ++a ? window.setTimeout(n, 0) : i.update()
        };
    this.quit = function(e) {
        !0 === i.enable_interface && (i.enable_interface = !1, r = e, o = -1, s(), refreshAds())
    };
    var o = -1,
        s = function() {
            if (30 == ++o) return i.stop(), i.sb.style.display = "none", void r();
            window.setTimeout(s, 33)
        };
    this.is_run = !1, this.stop = function() {
        this.is_run = !1
    }, this.run = function() {
        check_ads(), document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time], i.sb.init(), ui.trevda.style.display = "none", i.is_run = !0, i.enable_interface = !0, o = -1, a = 0, n()
    }, this.update = function() {
        if (this.sb.translate.x = Math.floor(canw2 - 275), this.sb.translate.y = Math.floor(canh2 - this.sb.height - 28), ui.trevda.translate.x = this.sb.translate.x - 350, ui.trevda.translate.y = this.sb.translate.y + 0, ui.trevda.update(), 30 != a || -1 != o) {
            var e = 0;
            if (30 != a) e = 1500 / (a + 1) - 50;
            if (-1 != o) e = -(1750 / (30 - o + 1) - 48);
            this.sb.translate.y -= e
        }
        this.sb.update()
    }, this.draw = function() {
        draw_fake_world(), user.alert.draw("#FFF", "#000")
    }
}
/*! howler.js v2.0.4 | (c) 2013-2017, James Simpson of GoldFire Studios | MIT License | howlerjs.com */
! function() {
    "use strict";
    var e = function() {
        this.init()
    };
    e.prototype = {
        init: function() {
            var e = this || t;
            return e._counter = 1e3, e._codecs = {}, e._howls = [], e._muted = !1, e._volume = 1, e._canPlayEvent = "canplaythrough", e._navigator = "undefined" != typeof window && window.navigator ? window.navigator : null, e.masterGain = null, e.noAudio = !1, e.usingWebAudio = !0, e.autoSuspend = !0, e.ctx = null, e.mobileAutoEnable = !0, e._setup(), e
        },
        volume: function(e) {
            var i = this || t;
            if (e = parseFloat(e), i.ctx || T(), void 0 !== e && e >= 0 && e <= 1) {
                if (i._volume = e, i._muted) return i;
                i.usingWebAudio && (i.masterGain.gain.value = e);
                for (var r = 0; r < i._howls.length; r++)
                    if (!i._howls[r]._webAudio)
                        for (var a = i._howls[r]._getSoundIds(), n = 0; n < a.length; n++) {
                            var o = i._howls[r]._soundById(a[n]);
                            o && o._node && (o._node.volume = o._volume * e)
                        }
                return i
            }
            return i._volume
        },
        mute: function(e) {
            var i = this || t;
            i.ctx || T(), i._muted = e, i.usingWebAudio && (i.masterGain.gain.value = e ? 0 : i._volume);
            for (var r = 0; r < i._howls.length; r++)
                if (!i._howls[r]._webAudio)
                    for (var a = i._howls[r]._getSoundIds(), n = 0; n < a.length; n++) {
                        var o = i._howls[r]._soundById(a[n]);
                        o && o._node && (o._node.muted = !!e || o._muted)
                    }
            return i
        },
        unload: function() {
            for (var e = this || t, i = e._howls.length - 1; i >= 0; i--) e._howls[i].unload();
            return e.usingWebAudio && e.ctx && void 0 !== e.ctx.close && (e.ctx.close(), e.ctx = null, T()), e
        },
        codecs: function(e) {
            return (this || t)._codecs[e.replace(/^x-/, "")]
        },
        _setup: function() {
            var e = this || t;
            if (e.state = e.ctx && e.ctx.state || "running", e._autoSuspend(), !e.usingWebAudio)
                if ("undefined" != typeof Audio) try {
                    void 0 === (new Audio).oncanplaythrough && (e._canPlayEvent = "canplay")
                } catch (t) {
                    e.noAudio = !0
                } else e.noAudio = !0;
            try {
                (new Audio).muted && (e.noAudio = !0)
            } catch (e) {}
            return e.noAudio || e._setupCodecs(), e
        },
        _setupCodecs: function() {
            var e = this || t,
                i = null;
            try {
                i = "undefined" != typeof Audio ? new Audio : null
            } catch (t) {
                return e
            }
            if (!i || "function" != typeof i.canPlayType) return e;
            var r = i.canPlayType("audio/mpeg;").replace(/^no$/, ""),
                a = e._navigator && e._navigator.userAgent.match(/OPR\/([0-6].)/g),
                n = a && parseInt(a[0].split("/")[1], 10) < 33;
            return e._codecs = {
                mp3: !(n || !r && !i.canPlayType("audio/mp3;").replace(/^no$/, "")),
                mpeg: !!r,
                opus: !!i.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
                ogg: !!i.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
                oga: !!i.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
                wav: !!i.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ""),
                aac: !!i.canPlayType("audio/aac;").replace(/^no$/, ""),
                caf: !!i.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                m4a: !!(i.canPlayType("audio/x-m4a;") || i.canPlayType("audio/m4a;") || i.canPlayType("audio/aac;")).replace(/^no$/, ""),
                mp4: !!(i.canPlayType("audio/x-mp4;") || i.canPlayType("audio/mp4;") || i.canPlayType("audio/aac;")).replace(/^no$/, ""),
                weba: !!i.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
                webm: !!i.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
                dolby: !!i.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
                flac: !!(i.canPlayType("audio/x-flac;") || i.canPlayType("audio/flac;")).replace(/^no$/, "")
            }, e
        },
        _enableMobileAudio: function() {
            var e = this || t,
                i = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(e._navigator && e._navigator.userAgent),
                r = !!("ontouchend" in window || e._navigator && e._navigator.maxTouchPoints > 0 || e._navigator && e._navigator.msMaxTouchPoints > 0);
            if (!e._mobileEnabled && e.ctx && (i || r)) {
                e._mobileEnabled = !1, e._mobileUnloaded || 44100 === e.ctx.sampleRate || (e._mobileUnloaded = !0, e.unload()), e._scratchBuffer = e.ctx.createBuffer(1, 1, 22050);
                var a = function() {
                    t._autoResume();
                    var i = e.ctx.createBufferSource();
                    i.buffer = e._scratchBuffer, i.connect(e.ctx.destination), void 0 === i.start ? i.noteOn(0) : i.start(0), "function" == typeof e.ctx.resume && e.ctx.resume(), i.onended = function() {
                        i.disconnect(0), e._mobileEnabled = !0, e.mobileAutoEnable = !1, document.removeEventListener("touchend", a, !0)
                    }
                };
                return document.addEventListener("touchend", a, !0), e
            }
        },
        _autoSuspend: function() {
            var e = this;
            if (e.autoSuspend && e.ctx && void 0 !== e.ctx.suspend && t.usingWebAudio) {
                for (var i = 0; i < e._howls.length; i++)
                    if (e._howls[i]._webAudio)
                        for (var r = 0; r < e._howls[i]._sounds.length; r++)
                            if (!e._howls[i]._sounds[r]._paused) return e;
                return e._suspendTimer && clearTimeout(e._suspendTimer), e._suspendTimer = setTimeout((function() {
                    e.autoSuspend && (e._suspendTimer = null, e.state = "suspending", e.ctx.suspend().then((function() {
                        e.state = "suspended", e._resumeAfterSuspend && (delete e._resumeAfterSuspend, e._autoResume())
                    })))
                }), 3e4), e
            }
        },
        _autoResume: function() {
            var e = this;
            if (e.ctx && void 0 !== e.ctx.resume && t.usingWebAudio) return "running" === e.state && e._suspendTimer ? (clearTimeout(e._suspendTimer), e._suspendTimer = null) : "suspended" === e.state ? (e.ctx.resume().then((function() {
                e.state = "running";
                for (var t = 0; t < e._howls.length; t++) e._howls[t]._emit("resume")
            })), e._suspendTimer && (clearTimeout(e._suspendTimer), e._suspendTimer = null)) : "suspending" === e.state && (e._resumeAfterSuspend = !0), e
        }
    };
    var t = new e,
        i = function(e) {
            e.src && 0 !== e.src.length ? this.init(e) : console.error("An array of source files must be passed with any new Howl.")
        };
    i.prototype = {
        init: function(e) {
            var i = this;
            return t.ctx || T(), i._autoplay = e.autoplay || !1, i._format = "string" != typeof e.format ? e.format : [e.format], i._html5 = e.html5 || !1, i._muted = e.mute || !1, i._loop = e.loop || !1, i._pool = e.pool || 5, i._preload = "boolean" != typeof e.preload || e.preload, i._rate = e.rate || 1, i._sprite = e.sprite || {}, i._src = "string" != typeof e.src ? e.src : [e.src], i._volume = void 0 !== e.volume ? e.volume : 1, i._duration = 0, i._state = "unloaded", i._sounds = [], i._endTimers = {}, i._queue = [], i._onend = e.onend ? [{
                fn: e.onend
            }] : [], i._onfade = e.onfade ? [{
                fn: e.onfade
            }] : [], i._onload = e.onload ? [{
                fn: e.onload
            }] : [], i._onloaderror = e.onloaderror ? [{
                fn: e.onloaderror
            }] : [], i._onpause = e.onpause ? [{
                fn: e.onpause
            }] : [], i._onplay = e.onplay ? [{
                fn: e.onplay
            }] : [], i._onstop = e.onstop ? [{
                fn: e.onstop
            }] : [], i._onmute = e.onmute ? [{
                fn: e.onmute
            }] : [], i._onvolume = e.onvolume ? [{
                fn: e.onvolume
            }] : [], i._onrate = e.onrate ? [{
                fn: e.onrate
            }] : [], i._onseek = e.onseek ? [{
                fn: e.onseek
            }] : [], i._onresume = [], i._webAudio = t.usingWebAudio && !i._html5, void 0 !== t.ctx && t.ctx && t.mobileAutoEnable && t._enableMobileAudio(), t._howls.push(i), i._autoplay && i._queue.push({
                event: "play",
                action: function() {
                    i.play()
                }
            }), i._preload && i.load(), i
        },
        load: function() {
            var e = this,
                i = null;
            if (!t.noAudio) {
                "string" == typeof e._src && (e._src = [e._src]);
                for (var a = 0; a < e._src.length; a++) {
                    var o, s;
                    if (e._format && e._format[a]) o = e._format[a];
                    else {
                        if ("string" != typeof(s = e._src[a])) {
                            e._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                            continue
                        }(o = /^data:audio\/([^;,]+);/i.exec(s)) || (o = /\.([^.]+)$/.exec(s.split("?", 1)[0])), o && (o = o[1].toLowerCase())
                    }
                    if (o || console.warn('No file extension was found. Consider using the "format" property or specify an extension.'), o && t.codecs(o)) {
                        i = e._src[a];
                        break
                    }
                }
                return i ? (e._src = i, e._state = "loading", "https:" === window.location.protocol && "http:" === i.slice(0, 5) && (e._html5 = !0, e._webAudio = !1), new r(e), e._webAudio && n(e), e) : void e._emit("loaderror", null, "No codec support for selected audio sources.")
            }
            e._emit("loaderror", null, "No audio support.")
        },
        play: function(e, i) {
            var r = this,
                a = null;
            if ("number" == typeof e) a = e, e = null;
            else {
                if ("string" == typeof e && "loaded" === r._state && !r._sprite[e]) return null;
                if (void 0 === e) {
                    e = "__default";
                    for (var n = 0, o = 0; o < r._sounds.length; o++) r._sounds[o]._paused && !r._sounds[o]._ended && (n++, a = r._sounds[o]._id);
                    1 === n ? e = null : a = null
                }
            }
            var s = a ? r._soundById(a) : r._inactiveSound();
            if (!s) return null;
            if (a && !e && (e = s._sprite || "__default"), "loaded" !== r._state) {
                s._sprite = e, s._ended = !1;
                var _ = s._id;
                return r._queue.push({
                    event: "play",
                    action: function() {
                        r.play(_)
                    }
                }), _
            }
            if (a && !s._paused) return i || setTimeout((function() {
                r._emit("play", s._id)
            }), 0), s._id;
            r._webAudio && t._autoResume();
            var T = Math.max(0, s._seek > 0 ? s._seek : r._sprite[e][0] / 1e3),
                E = Math.max(0, (r._sprite[e][0] + r._sprite[e][1]) / 1e3 - T),
                I = 1e3 * E / Math.abs(s._rate);
            s._paused = !1, s._ended = !1, s._sprite = e, s._seek = T, s._start = r._sprite[e][0] / 1e3, s._stop = (r._sprite[e][0] + r._sprite[e][1]) / 1e3, s._loop = !(!s._loop && !r._sprite[e][2]);
            var l = s._node;
            if (r._webAudio) {
                var u = function() {
                        r._refreshBuffer(s);
                        var e = s._muted || r._muted ? 0 : s._volume;
                        l.gain.setValueAtTime(e, t.ctx.currentTime), s._playStart = t.ctx.currentTime, void 0 === l.bufferSource.start ? s._loop ? l.bufferSource.noteGrainOn(0, T, 86400) : l.bufferSource.noteGrainOn(0, T, E) : s._loop ? l.bufferSource.start(0, T, 86400) : l.bufferSource.start(0, T, E), I !== 1 / 0 && (r._endTimers[s._id] = setTimeout(r._ended.bind(r, s), I)), i || setTimeout((function() {
                            r._emit("play", s._id)
                        }), 0)
                    },
                    d = "running" === t.state;
                if ("loaded" === r._state && d) u();
                else {
                    var c = d || "loaded" !== r._state ? "load" : "resume";
                    r.once(c, u, d ? s._id : null), r._clearTimer(s._id)
                }
            } else {
                var R = function() {
                        l.currentTime = T, l.muted = s._muted || r._muted || t._muted || l.muted, l.volume = s._volume * t.volume(), l.playbackRate = s._rate, l.play(), I !== 1 / 0 && (r._endTimers[s._id] = setTimeout(r._ended.bind(r, s), I)), i || r._emit("play", s._id)
                    },
                    h = "loaded" === r._state && (window && window.ejecta || !l.readyState && t._navigator.isCocoonJS);
                if (4 === l.readyState || h) R();
                else {
                    var A = function() {
                        R(), l.removeEventListener(t._canPlayEvent, A, !1)
                    };
                    l.addEventListener(t._canPlayEvent, A, !1), r._clearTimer(s._id)
                }
            }
            return s._id
        },
        pause: function(e) {
            var t = this;
            if ("loaded" !== t._state) return t._queue.push({
                event: "pause",
                action: function() {
                    t.pause(e)
                }
            }), t;
            for (var i = t._getSoundIds(e), r = 0; r < i.length; r++) {
                t._clearTimer(i[r]);
                var a = t._soundById(i[r]);
                if (a && !a._paused && (a._seek = t.seek(i[r]), a._rateSeek = 0, a._paused = !0, t._stopFade(i[r]), a._node))
                    if (t._webAudio) {
                        if (!a._node.bufferSource) continue;
                        void 0 === a._node.bufferSource.stop ? a._node.bufferSource.noteOff(0) : a._node.bufferSource.stop(0), t._cleanBuffer(a._node)
                    } else isNaN(a._node.duration) && a._node.duration !== 1 / 0 || a._node.pause();
                arguments[1] || t._emit("pause", a ? a._id : null)
            }
            return t
        },
        stop: function(e, t) {
            var i = this;
            if ("loaded" !== i._state) return i._queue.push({
                event: "stop",
                action: function() {
                    i.stop(e)
                }
            }), i;
            for (var r = i._getSoundIds(e), a = 0; a < r.length; a++) {
                i._clearTimer(r[a]);
                var n = i._soundById(r[a]);
                n && (n._seek = n._start || 0, n._rateSeek = 0, n._paused = !0, n._ended = !0, i._stopFade(r[a]), n._node && (i._webAudio ? n._node.bufferSource && (void 0 === n._node.bufferSource.stop ? n._node.bufferSource.noteOff(0) : n._node.bufferSource.stop(0), i._cleanBuffer(n._node)) : isNaN(n._node.duration) && n._node.duration !== 1 / 0 || (n._node.currentTime = n._start || 0, n._node.pause())), t || i._emit("stop", n._id))
            }
            return i
        },
        mute: function(e, i) {
            var r = this;
            if ("loaded" !== r._state) return r._queue.push({
                event: "mute",
                action: function() {
                    r.mute(e, i)
                }
            }), r;
            if (void 0 === i) {
                if ("boolean" != typeof e) return r._muted;
                r._muted = e
            }
            for (var a = r._getSoundIds(i), n = 0; n < a.length; n++) {
                var o = r._soundById(a[n]);
                o && (o._muted = e, r._webAudio && o._node ? o._node.gain.setValueAtTime(e ? 0 : o._volume, t.ctx.currentTime) : o._node && (o._node.muted = !!t._muted || e), r._emit("mute", o._id))
            }
            return r
        },
        volume: function() {
            var e, i, r, a = this,
                n = arguments;
            if (0 === n.length) return a._volume;
            if (1 === n.length || 2 === n.length && void 0 === n[1] ? a._getSoundIds().indexOf(n[0]) >= 0 ? i = parseInt(n[0], 10) : e = parseFloat(n[0]) : n.length >= 2 && (e = parseFloat(n[0]), i = parseInt(n[1], 10)), !(void 0 !== e && e >= 0 && e <= 1)) return (r = i ? a._soundById(i) : a._sounds[0]) ? r._volume : 0;
            if ("loaded" !== a._state) return a._queue.push({
                event: "volume",
                action: function() {
                    a.volume.apply(a, n)
                }
            }), a;
            void 0 === i && (a._volume = e), i = a._getSoundIds(i);
            for (var o = 0; o < i.length; o++)(r = a._soundById(i[o])) && (r._volume = e, n[2] || a._stopFade(i[o]), a._webAudio && r._node && !r._muted ? r._node.gain.setValueAtTime(e, t.ctx.currentTime) : r._node && !r._muted && (r._node.volume = e * t.volume()), a._emit("volume", r._id));
            return a
        },
        fade: function(e, i, r, a) {
            var n = this,
                o = Math.abs(e - i),
                s = e > i ? "out" : "in",
                _ = o / .01,
                T = _ > 0 ? r / _ : r;
            if (T < 4 && (_ = Math.ceil(_ / (4 / T)), T = 4), "loaded" !== n._state) return n._queue.push({
                event: "fade",
                action: function() {
                    n.fade(e, i, r, a)
                }
            }), n;
            n.volume(e, a);
            for (var E = n._getSoundIds(a), I = 0; I < E.length; I++) {
                var l = n._soundById(E[I]);
                if (l) {
                    if (a || n._stopFade(E[I]), n._webAudio && !l._muted) {
                        var u = t.ctx.currentTime,
                            d = u + r / 1e3;
                        l._volume = e, l._node.gain.setValueAtTime(e, u), l._node.gain.linearRampToValueAtTime(i, d)
                    }
                    var c = e;
                    l._interval = setInterval(function(t, r) {
                        _ > 0 && (c += "in" === s ? .01 : -.01), c = Math.max(0, c), c = Math.min(1, c), c = Math.round(100 * c) / 100, n._webAudio ? (void 0 === a && (n._volume = c), r._volume = c) : n.volume(c, t, !0), (i < e && c <= i || i > e && c >= i) && (clearInterval(r._interval), r._interval = null, n.volume(i, t), n._emit("fade", t))
                    }.bind(n, E[I], l), T)
                }
            }
            return n
        },
        _stopFade: function(e) {
            var i = this,
                r = i._soundById(e);
            return r && r._interval && (i._webAudio && r._node.gain.cancelScheduledValues(t.ctx.currentTime), clearInterval(r._interval), r._interval = null, i._emit("fade", e)), i
        },
        loop: function() {
            var e, t, i, r = this,
                a = arguments;
            if (0 === a.length) return r._loop;
            if (1 === a.length) {
                if ("boolean" != typeof a[0]) return !!(i = r._soundById(parseInt(a[0], 10))) && i._loop;
                e = a[0], r._loop = e
            } else 2 === a.length && (e = a[0], t = parseInt(a[1], 10));
            for (var n = r._getSoundIds(t), o = 0; o < n.length; o++)(i = r._soundById(n[o])) && (i._loop = e, r._webAudio && i._node && i._node.bufferSource && (i._node.bufferSource.loop = e, e && (i._node.bufferSource.loopStart = i._start || 0, i._node.bufferSource.loopEnd = i._stop)));
            return r
        },
        rate: function() {
            var e, i, r, a = this,
                n = arguments;
            if (0 === n.length) i = a._sounds[0]._id;
            else if (1 === n.length) {
                a._getSoundIds().indexOf(n[0]) >= 0 ? i = parseInt(n[0], 10) : e = parseFloat(n[0])
            } else 2 === n.length && (e = parseFloat(n[0]), i = parseInt(n[1], 10));
            if ("number" != typeof e) return (r = a._soundById(i)) ? r._rate : a._rate;
            if ("loaded" !== a._state) return a._queue.push({
                event: "rate",
                action: function() {
                    a.rate.apply(a, n)
                }
            }), a;
            void 0 === i && (a._rate = e), i = a._getSoundIds(i);
            for (var o = 0; o < i.length; o++)
                if (r = a._soundById(i[o])) {
                    r._rateSeek = a.seek(i[o]), r._playStart = a._webAudio ? t.ctx.currentTime : r._playStart, r._rate = e, a._webAudio && r._node && r._node.bufferSource ? r._node.bufferSource.playbackRate.value = e : r._node && (r._node.playbackRate = e);
                    var s = a.seek(i[o]),
                        _ = 1e3 * ((a._sprite[r._sprite][0] + a._sprite[r._sprite][1]) / 1e3 - s) / Math.abs(r._rate);
                    !a._endTimers[i[o]] && r._paused || (a._clearTimer(i[o]), a._endTimers[i[o]] = setTimeout(a._ended.bind(a, r), _)), a._emit("rate", r._id)
                } return a
        },
        seek: function() {
            var e, i, r = this,
                a = arguments;
            if (0 === a.length) i = r._sounds[0]._id;
            else if (1 === a.length) {
                r._getSoundIds().indexOf(a[0]) >= 0 ? i = parseInt(a[0], 10) : (i = r._sounds[0]._id, e = parseFloat(a[0]))
            } else 2 === a.length && (e = parseFloat(a[0]), i = parseInt(a[1], 10));
            if (void 0 === i) return r;
            if ("loaded" !== r._state) return r._queue.push({
                event: "seek",
                action: function() {
                    r.seek.apply(r, a)
                }
            }), r;
            var n = r._soundById(i);
            if (n) {
                if (!("number" == typeof e && e >= 0)) {
                    if (r._webAudio) {
                        var o = r.playing(i) ? t.ctx.currentTime - n._playStart : 0,
                            s = n._rateSeek ? n._rateSeek - n._seek : 0;
                        return n._seek + (s + o * Math.abs(n._rate))
                    }
                    return n._node.currentTime
                }
                var _ = r.playing(i);
                _ && r.pause(i, !0), n._seek = e, n._ended = !1, r._clearTimer(i), _ && r.play(i, !0), !r._webAudio && n._node && (n._node.currentTime = e), r._emit("seek", i)
            }
            return r
        },
        playing: function(e) {
            var t = this;
            if ("number" == typeof e) {
                var i = t._soundById(e);
                return !!i && !i._paused
            }
            for (var r = 0; r < t._sounds.length; r++)
                if (!t._sounds[r]._paused) return !0;
            return !1
        },
        duration: function(e) {
            var t = this,
                i = t._duration,
                r = t._soundById(e);
            return r && (i = t._sprite[r._sprite][1] / 1e3), i
        },
        state: function() {
            return this._state
        },
        unload: function() {
            for (var e = this, i = e._sounds, r = 0; r < i.length; r++) {
                i[r]._paused || e.stop(i[r]._id), e._webAudio || (/MSIE |Trident\//.test(t._navigator && t._navigator.userAgent) || (i[r]._node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"), i[r]._node.removeEventListener("error", i[r]._errorFn, !1), i[r]._node.removeEventListener(t._canPlayEvent, i[r]._loadFn, !1)), delete i[r]._node, e._clearTimer(i[r]._id);
                var n = t._howls.indexOf(e);
                n >= 0 && t._howls.splice(n, 1)
            }
            var o = !0;
            for (r = 0; r < t._howls.length; r++)
                if (t._howls[r]._src === e._src) {
                    o = !1;
                    break
                } return a && o && delete a[e._src], t.noAudio = !1, e._state = "unloaded", e._sounds = [], e = null, null
        },
        on: function(e, t, i, r) {
            var a = this["_on" + e];
            return "function" == typeof t && a.push(r ? {
                id: i,
                fn: t,
                once: r
            } : {
                id: i,
                fn: t
            }), this
        },
        off: function(e, t, i) {
            var r = this,
                a = r["_on" + e],
                n = 0;
            if ("number" == typeof t && (i = t, t = null), t || i)
                for (n = 0; n < a.length; n++) {
                    var o = i === a[n].id;
                    if (t === a[n].fn && o || !t && o) {
                        a.splice(n, 1);
                        break
                    }
                } else if (e) r["_on" + e] = [];
                else {
                    var s = Object.keys(r);
                    for (n = 0; n < s.length; n++) 0 === s[n].indexOf("_on") && Array.isArray(r[s[n]]) && (r[s[n]] = [])
                } return r
        },
        once: function(e, t, i) {
            return this.on(e, t, i, 1), this
        },
        _emit: function(e, t, i) {
            for (var r = this, a = r["_on" + e], n = a.length - 1; n >= 0; n--) a[n].id && a[n].id !== t && "load" !== e || (setTimeout(function(e) {
                e.call(this, t, i)
            }.bind(r, a[n].fn), 0), a[n].once && r.off(e, a[n].fn, a[n].id));
            return r
        },
        _loadQueue: function() {
            var e = this;
            if (e._queue.length > 0) {
                var t = e._queue[0];
                e.once(t.event, (function() {
                    e._queue.shift(), e._loadQueue()
                })), t.action()
            }
            return e
        },
        _ended: function(e) {
            var i = this,
                r = e._sprite;
            if (!i._webAudio && i._node && !i._node.ended) return setTimeout(i._ended.bind(i, e), 100), i;
            var a = !(!e._loop && !i._sprite[r][2]);
            if (i._emit("end", e._id), !i._webAudio && a && i.stop(e._id, !0).play(e._id), i._webAudio && a) {
                i._emit("play", e._id), e._seek = e._start || 0, e._rateSeek = 0, e._playStart = t.ctx.currentTime;
                var n = 1e3 * (e._stop - e._start) / Math.abs(e._rate);
                i._endTimers[e._id] = setTimeout(i._ended.bind(i, e), n)
            }
            return i._webAudio && !a && (e._paused = !0, e._ended = !0, e._seek = e._start || 0, e._rateSeek = 0, i._clearTimer(e._id), i._cleanBuffer(e._node), t._autoSuspend()), i._webAudio || a || i.stop(e._id), i
        },
        _clearTimer: function(e) {
            var t = this;
            return t._endTimers[e] && (clearTimeout(t._endTimers[e]), delete t._endTimers[e]), t
        },
        _soundById: function(e) {
            for (var t = this, i = 0; i < t._sounds.length; i++)
                if (e === t._sounds[i]._id) return t._sounds[i];
            return null
        },
        _inactiveSound: function() {
            var e = this;
            e._drain();
            for (var t = 0; t < e._sounds.length; t++)
                if (e._sounds[t]._ended) return e._sounds[t].reset();
            return new r(e)
        },
        _drain: function() {
            var e = this,
                t = e._pool,
                i = 0,
                r = 0;
            if (!(e._sounds.length < t)) {
                for (r = 0; r < e._sounds.length; r++) e._sounds[r]._ended && i++;
                for (r = e._sounds.length - 1; r >= 0; r--) {
                    if (i <= t) return;
                    e._sounds[r]._ended && (e._webAudio && e._sounds[r]._node && e._sounds[r]._node.disconnect(0), e._sounds.splice(r, 1), i--)
                }
            }
        },
        _getSoundIds: function(e) {
            if (void 0 === e) {
                for (var t = [], i = 0; i < this._sounds.length; i++) t.push(this._sounds[i]._id);
                return t
            }
            return [e]
        },
        _refreshBuffer: function(e) {
            return e._node.bufferSource = t.ctx.createBufferSource(), e._node.bufferSource.buffer = a[this._src], e._panner ? e._node.bufferSource.connect(e._panner) : e._node.bufferSource.connect(e._node), e._node.bufferSource.loop = e._loop, e._loop && (e._node.bufferSource.loopStart = e._start || 0, e._node.bufferSource.loopEnd = e._stop), e._node.bufferSource.playbackRate.value = e._rate, this
        },
        _cleanBuffer: function(e) {
            var t = this;
            if (t._scratchBuffer) {
                e.bufferSource.onended = null, e.bufferSource.disconnect(0);
                try {
                    e.bufferSource.buffer = t._scratchBuffer
                } catch (e) {}
            }
            return e.bufferSource = null, t
        }
    };
    var r = function(e) {
        this._parent = e, this.init()
    };
    r.prototype = {
        init: function() {
            var e = this,
                i = e._parent;
            return e._muted = i._muted, e._loop = i._loop, e._volume = i._volume, e._rate = i._rate, e._seek = 0, e._paused = !0, e._ended = !0, e._sprite = "__default", e._id = ++t._counter, i._sounds.push(e), e.create(), e
        },
        create: function() {
            var e = this,
                i = e._parent,
                r = t._muted || e._muted || e._parent._muted ? 0 : e._volume;
            return i._webAudio ? (e._node = void 0 === t.ctx.createGain ? t.ctx.createGainNode() : t.ctx.createGain(), e._node.gain.setValueAtTime(r, t.ctx.currentTime), e._node.paused = !0, e._node.connect(t.masterGain)) : (e._node = new Audio, e._errorFn = e._errorListener.bind(e), e._node.addEventListener("error", e._errorFn, !1), e._loadFn = e._loadListener.bind(e), e._node.addEventListener(t._canPlayEvent, e._loadFn, !1), e._node.src = i._src, e._node.preload = "auto", e._node.volume = r * t.volume(), e._node.load()), e
        },
        reset: function() {
            var e = this,
                i = e._parent;
            return e._muted = i._muted, e._loop = i._loop, e._volume = i._volume, e._rate = i._rate, e._seek = 0, e._rateSeek = 0, e._paused = !0, e._ended = !0, e._sprite = "__default", e._id = ++t._counter, e
        },
        _errorListener: function() {
            var e = this;
            e._parent._emit("loaderror", e._id, e._node.error ? e._node.error.code : 0), e._node.removeEventListener("error", e._errorFn, !1)
        },
        _loadListener: function() {
            var e = this,
                i = e._parent;
            i._duration = Math.ceil(10 * e._node.duration) / 10, 0 === Object.keys(i._sprite).length && (i._sprite = {
                __default: [0, 1e3 * i._duration]
            }), "loaded" !== i._state && (i._state = "loaded", i._emit("load"), i._loadQueue()), e._node.removeEventListener(t._canPlayEvent, e._loadFn, !1)
        }
    };
    var a = {},
        n = function(e) {
            var t = e._src;
            if (a[t]) return e._duration = a[t].duration, void _(e);
            if (/^data:[^;]+;base64,/.test(t)) {
                for (var i = atob(t.split(",")[1]), r = new Uint8Array(i.length), n = 0; n < i.length; ++n) r[n] = i.charCodeAt(n);
                s(r.buffer, e)
            } else {
                var T = new XMLHttpRequest;
                T.open("GET", t, !0), T.responseType = "arraybuffer", T.onload = function() {
                    var t = (T.status + "")[0];
                    "0" === t || "2" === t || "3" === t ? s(T.response, e) : e._emit("loaderror", null, "Failed loading audio file with status: " + T.status + ".")
                }, T.onerror = function() {
                    e._webAudio && (e._html5 = !0, e._webAudio = !1, e._sounds = [], delete a[t], e.load())
                }, o(T)
            }
        },
        o = function(e) {
            try {
                e.send()
            } catch (t) {
                e.onerror()
            }
        },
        s = function(e, i) {
            t.ctx.decodeAudioData(e, (function(e) {
                e && i._sounds.length > 0 && (a[i._src] = e, _(i, e))
            }), (function() {
                i._emit("loaderror", null, "Decoding audio data failed.")
            }))
        },
        _ = function(e, t) {
            t && !e._duration && (e._duration = t.duration), 0 === Object.keys(e._sprite).length && (e._sprite = {
                __default: [0, 1e3 * e._duration]
            }), "loaded" !== e._state && (e._state = "loaded", e._emit("load"), e._loadQueue())
        },
        T = function() {
            try {
                "undefined" != typeof AudioContext ? t.ctx = new AudioContext : "undefined" != typeof webkitAudioContext ? t.ctx = new webkitAudioContext : t.usingWebAudio = !1
            } catch (e) {
                t.usingWebAudio = !1
            }
            var e = /iP(hone|od|ad)/.test(t._navigator && t._navigator.platform),
                i = t._navigator && t._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),
                r = i ? parseInt(i[1], 10) : null;
            if (e && r && r < 9) {
                var a = /safari/.test(t._navigator && t._navigator.userAgent.toLowerCase());
                (t._navigator && t._navigator.standalone && !a || t._navigator && !t._navigator.standalone && !a) && (t.usingWebAudio = !1)
            }
            t.usingWebAudio && (t.masterGain = void 0 === t.ctx.createGain ? t.ctx.createGainNode() : t.ctx.createGain(), t.masterGain.gain.value = t._muted ? 0 : 1, t.masterGain.connect(t.ctx.destination)), t._setup()
        };
    "function" == typeof define && define.amd && define([], (function() {
        return {
            Howler: t,
            Howl: i
        }
    })), "undefined" != typeof exports && (exports.Howler = t, exports.Howl = i), "undefined" != typeof window ? (window.HowlerGlobal = e, window.Howler = t, window.Howl = i, window.Sound = r) : "undefined" != typeof global && (global.HowlerGlobal = e, global.Howler = t, global.Howl = i, global.Sound = r)
}(),
function() {
    "use strict";
    HowlerGlobal.prototype._pos = [0, 0, 0], HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0], HowlerGlobal.prototype.stereo = function(e) {
        var t = this;
        if (!t.ctx || !t.ctx.listener) return t;
        for (var i = t._howls.length - 1; i >= 0; i--) t._howls[i].stereo(e);
        return t
    }, HowlerGlobal.prototype.pos = function(e, t, i) {
        var r = this;
        return r.ctx && r.ctx.listener ? (t = "number" != typeof t ? r._pos[1] : t, i = "number" != typeof i ? r._pos[2] : i, "number" != typeof e ? r._pos : (r._pos = [e, t, i], r.ctx.listener.setPosition(r._pos[0], r._pos[1], r._pos[2]), r)) : r
    }, HowlerGlobal.prototype.orientation = function(e, t, i, r, a, n) {
        var o = this;
        if (!o.ctx || !o.ctx.listener) return o;
        var s = o._orientation;
        return t = "number" != typeof t ? s[1] : t, i = "number" != typeof i ? s[2] : i, r = "number" != typeof r ? s[3] : r, a = "number" != typeof a ? s[4] : a, n = "number" != typeof n ? s[5] : n, "number" != typeof e ? s : (o._orientation = [e, t, i, r, a, n], o.ctx.listener.setOrientation(e, t, i, r, a, n), o)
    }, Howl.prototype.init = function(e) {
        return function(t) {
            var i = this;
            return i._orientation = t.orientation || [1, 0, 0], i._stereo = t.stereo || null, i._pos = t.pos || null, i._pannerAttr = {
                coneInnerAngle: void 0 !== t.coneInnerAngle ? t.coneInnerAngle : 360,
                coneOuterAngle: void 0 !== t.coneOuterAngle ? t.coneOuterAngle : 360,
                coneOuterGain: void 0 !== t.coneOuterGain ? t.coneOuterGain : 0,
                distanceModel: void 0 !== t.distanceModel ? t.distanceModel : "inverse",
                maxDistance: void 0 !== t.maxDistance ? t.maxDistance : 1e4,
                panningModel: void 0 !== t.panningModel ? t.panningModel : "HRTF",
                refDistance: void 0 !== t.refDistance ? t.refDistance : 1,
                rolloffFactor: void 0 !== t.rolloffFactor ? t.rolloffFactor : 1
            }, i._onstereo = t.onstereo ? [{
                fn: t.onstereo
            }] : [], i._onpos = t.onpos ? [{
                fn: t.onpos
            }] : [], i._onorientation = t.onorientation ? [{
                fn: t.onorientation
            }] : [], e.call(this, t)
        }
    }(Howl.prototype.init), Howl.prototype.stereo = function(t, i) {
        var r = this;
        if (!r._webAudio) return r;
        if ("loaded" !== r._state) return r._queue.push({
            event: "stereo",
            action: function() {
                r.stereo(t, i)
            }
        }), r;
        var a = void 0 === Howler.ctx.createStereoPanner ? "spatial" : "stereo";
        if (void 0 === i) {
            if ("number" != typeof t) return r._stereo;
            r._stereo = t, r._pos = [t, 0, 0]
        }
        for (var n = r._getSoundIds(i), o = 0; o < n.length; o++) {
            var s = r._soundById(n[o]);
            if (s) {
                if ("number" != typeof t) return s._stereo;
                s._stereo = t, s._pos = [t, 0, 0], s._node && (s._pannerAttr.panningModel = "equalpower", s._panner && s._panner.pan || e(s, a), "spatial" === a ? s._panner.setPosition(t, 0, 0) : s._panner.pan.value = t), r._emit("stereo", s._id)
            }
        }
        return r
    }, Howl.prototype.pos = function(t, i, r, a) {
        var n = this;
        if (!n._webAudio) return n;
        if ("loaded" !== n._state) return n._queue.push({
            event: "pos",
            action: function() {
                n.pos(t, i, r, a)
            }
        }), n;
        if (i = "number" != typeof i ? 0 : i, r = "number" != typeof r ? -.5 : r, void 0 === a) {
            if ("number" != typeof t) return n._pos;
            n._pos = [t, i, r]
        }
        for (var o = n._getSoundIds(a), s = 0; s < o.length; s++) {
            var _ = n._soundById(o[s]);
            if (_) {
                if ("number" != typeof t) return _._pos;
                _._pos = [t, i, r], _._node && (_._panner && !_._panner.pan || e(_, "spatial"), _._panner.setPosition(t, i, r)), n._emit("pos", _._id)
            }
        }
        return n
    }, Howl.prototype.orientation = function(t, i, r, a) {
        var n = this;
        if (!n._webAudio) return n;
        if ("loaded" !== n._state) return n._queue.push({
            event: "orientation",
            action: function() {
                n.orientation(t, i, r, a)
            }
        }), n;
        if (i = "number" != typeof i ? n._orientation[1] : i, r = "number" != typeof r ? n._orientation[2] : r, void 0 === a) {
            if ("number" != typeof t) return n._orientation;
            n._orientation = [t, i, r]
        }
        for (var o = n._getSoundIds(a), s = 0; s < o.length; s++) {
            var _ = n._soundById(o[s]);
            if (_) {
                if ("number" != typeof t) return _._orientation;
                _._orientation = [t, i, r], _._node && (_._panner || (_._pos || (_._pos = n._pos || [0, 0, -.5]), e(_, "spatial")), _._panner.setOrientation(t, i, r)), n._emit("orientation", _._id)
            }
        }
        return n
    }, Howl.prototype.pannerAttr = function() {
        var t, i, r, a = this,
            n = arguments;
        if (!a._webAudio) return a;
        if (0 === n.length) return a._pannerAttr;
        if (1 === n.length) {
            if ("object" != typeof n[0]) return (r = a._soundById(parseInt(n[0], 10))) ? r._pannerAttr : a._pannerAttr;
            t = n[0], void 0 === i && (a._pannerAttr = {
                coneInnerAngle: void 0 !== t.coneInnerAngle ? t.coneInnerAngle : a._coneInnerAngle,
                coneOuterAngle: void 0 !== t.coneOuterAngle ? t.coneOuterAngle : a._coneOuterAngle,
                coneOuterGain: void 0 !== t.coneOuterGain ? t.coneOuterGain : a._coneOuterGain,
                distanceModel: void 0 !== t.distanceModel ? t.distanceModel : a._distanceModel,
                maxDistance: void 0 !== t.maxDistance ? t.maxDistance : a._maxDistance,
                panningModel: void 0 !== t.panningModel ? t.panningModel : a._panningModel,
                refDistance: void 0 !== t.refDistance ? t.refDistance : a._refDistance,
                rolloffFactor: void 0 !== t.rolloffFactor ? t.rolloffFactor : a._rolloffFactor
            })
        } else 2 === n.length && (t = n[0], i = parseInt(n[1], 10));
        for (var o = a._getSoundIds(i), s = 0; s < o.length; s++)
            if (r = a._soundById(o[s])) {
                var _ = r._pannerAttr;
                _ = {
                    coneInnerAngle: void 0 !== t.coneInnerAngle ? t.coneInnerAngle : _.coneInnerAngle,
                    coneOuterAngle: void 0 !== t.coneOuterAngle ? t.coneOuterAngle : _.coneOuterAngle,
                    coneOuterGain: void 0 !== t.coneOuterGain ? t.coneOuterGain : _.coneOuterGain,
                    distanceModel: void 0 !== t.distanceModel ? t.distanceModel : _.distanceModel,
                    maxDistance: void 0 !== t.maxDistance ? t.maxDistance : _.maxDistance,
                    panningModel: void 0 !== t.panningModel ? t.panningModel : _.panningModel,
                    refDistance: void 0 !== t.refDistance ? t.refDistance : _.refDistance,
                    rolloffFactor: void 0 !== t.rolloffFactor ? t.rolloffFactor : _.rolloffFactor
                };
                var T = r._panner;
                T ? (T.coneInnerAngle = _.coneInnerAngle, T.coneOuterAngle = _.coneOuterAngle, T.coneOuterGain = _.coneOuterGain, T.distanceModel = _.distanceModel, T.maxDistance = _.maxDistance, T.panningModel = _.panningModel, T.refDistance = _.refDistance, T.rolloffFactor = _.rolloffFactor) : (r._pos || (r._pos = a._pos || [0, 0, -.5]), e(r, "spatial"))
            } return a
    }, Sound.prototype.init = function(e) {
        return function() {
            var t = this,
                i = t._parent;
            t._orientation = i._orientation, t._stereo = i._stereo, t._pos = i._pos, t._pannerAttr = i._pannerAttr, e.call(this), t._stereo ? i.stereo(t._stereo) : t._pos && i.pos(t._pos[0], t._pos[1], t._pos[2], t._id)
        }
    }(Sound.prototype.init), Sound.prototype.reset = function(e) {
        return function() {
            var t = this,
                i = t._parent;
            return t._orientation = i._orientation, t._pos = i._pos, t._pannerAttr = i._pannerAttr, e.call(this)
        }
    }(Sound.prototype.reset);
    var e = function(e, t) {
        "spatial" === (t = t || "spatial") ? (e._panner = Howler.ctx.createPanner(), e._panner.coneInnerAngle = e._pannerAttr.coneInnerAngle, e._panner.coneOuterAngle = e._pannerAttr.coneOuterAngle, e._panner.coneOuterGain = e._pannerAttr.coneOuterGain, e._panner.distanceModel = e._pannerAttr.distanceModel, e._panner.maxDistance = e._pannerAttr.maxDistance, e._panner.panningModel = e._pannerAttr.panningModel, e._panner.refDistance = e._pannerAttr.refDistance, e._panner.rolloffFactor = e._pannerAttr.rolloffFactor, e._panner.setPosition(e._pos[0], e._pos[1], e._pos[2]), e._panner.setOrientation(e._orientation[0], e._orientation[1], e._orientation[2])) : (e._panner = Howler.ctx.createStereoPanner(), e._panner.pan.value = e._stereo), e._panner.connect(e._node), e._paused || e._parent.pause(e._id, !0).play(e._id)
    }
}();
var VOLUME = {
        AMB: 1,
        FX: 1
    },
    CONST_AUDIO = {
        SEA_DELAY: 12,
        SEA_FADE: 5e3,
        FOREST_DELAY: 12,
        FOREST_FADE: 5e3,
        SNOW_DELAY: 12,
        SNOW_FADE: 5e3,
        TRANSITION: 3e3,
        DISABLE_EFFECT: 46e4,
        PLAYERS: 8,
        ITEMS: 6,
        HAND: 1,
        MISC: 2,
        SHOVEL: 3
    },
    SOUND = [];
SOUND[-1] = CONST_AUDIO.HAND, SOUND[INV.BOOK] = CONST_AUDIO.HAND, SOUND[INV.WATERING_CAN_FULL] = CONST_AUDIO.HAND, SOUND[INV.WRENCH] = CONST_AUDIO.MISC, SOUND[INV.PICK_WOOD] = CONST_AUDIO.MISC, SOUND[INV.PICK] = CONST_AUDIO.MISC, SOUND[INV.PICK_GOLD] = CONST_AUDIO.MISC, SOUND[INV.PICK_DIAMOND] = CONST_AUDIO.MISC, SOUND[INV.PICK_AMETHYST] = CONST_AUDIO.MISC, SOUND[INV.PICK_REIDITE] = CONST_AUDIO.MISC, SOUND[INV.PIRATE_SWORD] = CONST_AUDIO.MISC, SOUND[INV.SWORD_WOOD] = CONST_AUDIO.MISC, SOUND[INV.SWORD] = CONST_AUDIO.MISC, SOUND[INV.LAVA_SWORD] = CONST_AUDIO.MISC, SOUND[INV.LAVA_SPEAR] = CONST_AUDIO.MISC, SOUND[INV.SWORD_GOLD] = CONST_AUDIO.MISC, SOUND[INV.SWORD_DIAMOND] = CONST_AUDIO.MISC, SOUND[INV.SWORD_AMETHYST] = CONST_AUDIO.MISC, SOUND[INV.SWORD_REIDITE] = CONST_AUDIO.MISC, SOUND[INV.CRAB_SPEAR] = CONST_AUDIO.MISC, SOUND[INV.WOOD_SPEAR] = CONST_AUDIO.MISC, SOUND[INV.SPEAR] = CONST_AUDIO.MISC, SOUND[INV.GOLD_SPEAR] = CONST_AUDIO.MISC, SOUND[INV.DIAMOND_SPEAR] = CONST_AUDIO.MISC, SOUND[INV.DRAGON_SPEAR] = CONST_AUDIO.MISC, SOUND[INV.AMETHYST_SPEAR] = CONST_AUDIO.MISC, SOUND[INV.AMETHYST_REIDITE] = CONST_AUDIO.MISC, SOUND[INV.HAMMER] = CONST_AUDIO.MISC, SOUND[INV.HAMMER_GOLD] = CONST_AUDIO.MISC, SOUND[INV.HAMMER_DIAMOND] = CONST_AUDIO.MISC, SOUND[INV.HAMMER_AMETHYST] = CONST_AUDIO.MISC, SOUND[INV.HAMMER_REIDITE] = CONST_AUDIO.MISC, SOUND[INV.SUPER_HAMMER] = CONST_AUDIO.MISC, SOUND[INV.DRAGON_SWORD] = CONST_AUDIO.MISC, SOUND[INV.PITCHFORK2] = CONST_AUDIO.MISC, SOUND[INV.PITCHFORK] = CONST_AUDIO.MISC, SOUND[INV.SHOVEL] = CONST_AUDIO.SHOVEL, SOUND[INV.SHOVEL_GOLD] = CONST_AUDIO.SHOVEL, SOUND[INV.SHOVEL_DIAMOND] = CONST_AUDIO.SHOVEL, SOUND[INV.SHOVEL_AMETHYST] = CONST_AUDIO.SHOVEL, SOUND_NATURE = [], SOUND_NATURE[0] = 0, SOUND_NATURE[1] = 1, SOUND_NATURE[2] = 1, SOUND_NATURE[3] = 1, SOUND_NATURE[4] = 0, SOUND_NATURE[5] = 0, SOUND_NATURE[6] = 0, SOUND_NATURE[7] = 0, SOUND_NATURE[8] = 0, SOUND_NATURE[9] = 0, SOUND_NATURE[10] = 1, SOUND_NATURE[11] = 1, SOUND_NATURE[12] = 1, SOUND_NATURE[13] = 1, SOUND_NATURE[14] = 1, SOUND_NATURE[15] = 1, SOUND_NATURE[16] = 0, SOUND_NATURE[17] = 0, SOUND_NATURE[18] = 0, SOUND_NATURE[19] = 0, SOUND_NATURE[20] = 0, SOUND_NATURE[21] = 0, SOUND_NATURE[22] = 0, SOUND_NATURE[23] = 1, SOUND_NATURE[24] = 1, SOUND_NATURE[25] = 1, SOUND_NATURE[26] = 1, SOUND_NATURE[27] = 1, SOUND_NATURE[28] = 1, SOUND_NATURE[29] = 1, SOUND_NATURE[30] = 1, SOUND_NATURE[31] = 1, SOUND_NATURE[32] = 1, SOUND_NATURE[33] = 1, SOUND_NATURE[34] = 1, SOUND_NATURE[35] = 1, SOUND_NATURE[36] = 1, SOUND_NATURE[37] = 1, SOUND_NATURE[38] = 1, SOUND_NATURE[40] = 0, SOUND_NATURE[41] = 0, SOUND_NATURE[42] = 0, SOUND_NATURE[50] = 1, SOUND_NATURE[51] = 1, SOUND_NATURE[52] = 1, SOUND_NATURE[55] = 0, SOUND_NATURE[56] = 0, SOUND_NATURE[57] = 0, SOUND_NATURE[58] = 0, SOUND_BUILD = [], SOUND_BUILD[ITEMS.PLANT] = 0, SOUND_BUILD[ITEMS.FIRE] = 0, SOUND_BUILD[ITEMS.TOTEM] = 0, SOUND_BUILD[ITEMS.BIG_FIRE] = 0, SOUND_BUILD[ITEMS.SEED] = -1, SOUND_BUILD[ITEMS.WHEAT_SEED] = -1, SOUND_BUILD[ITEMS.WORKBENCH] = 0, SOUND_BUILD[ITEMS.WALL] = 0, SOUND_BUILD[ITEMS.BRIDGE] = 0, SOUND_BUILD[ITEMS.PLOT] = 0, SOUND_BUILD[ITEMS.WINDMILL] = 1, SOUND_BUILD[ITEMS.WELL] = 1, SOUND_BUILD[ITEMS.STONE_WALL] = 1, SOUND_BUILD[ITEMS.GOLD_WALL] = 1, SOUND_BUILD[ITEMS.DIAMOND_WALL] = 1, SOUND_BUILD[ITEMS.AMETHYST_WALL] = 1, SOUND_BUILD[ITEMS.REIDITE_WALL] = 1, SOUND_BUILD[ITEMS.SPIKE] = 0, SOUND_BUILD[ITEMS.STONE_SPIKE] = 1, SOUND_BUILD[ITEMS.GOLD_SPIKE] = 1, SOUND_BUILD[ITEMS.DIAMOND_SPIKE] = 1, SOUND_BUILD[ITEMS.AMETHYST_SPIKE] = 1, SOUND_BUILD[ITEMS.REIDITE_SPIKE] = 1, SOUND_BUILD[ITEMS.WOOD_DOOR] = 0, SOUND_BUILD[ITEMS.STONE_DOOR] = 1, SOUND_BUILD[ITEMS.GOLD_DOOR] = 1, SOUND_BUILD[ITEMS.DIAMOND_DOOR] = 1, SOUND_BUILD[ITEMS.AMETHYST_DOOR] = 1, SOUND_BUILD[ITEMS.REIDITE_DOOR] = 1, SOUND_BUILD[ITEMS.WOOD_DOOR_SPIKE] = 0, SOUND_BUILD[ITEMS.STONE_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.GOLD_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.DIAMOND_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.AMETHYST_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.REIDITE_DOOR_SPIKE] = 1, SOUND_BUILD[ITEMS.FURNACE] = 1, SOUND_BUILD[ITEMS.RESURRECTION] = 1, SOUND_BUILD[ITEMS.EMERALD_MACHINE] = 1, SOUND_BUILD[ITEMS.CHEST] = 0, SOUND_BUILD[ITEMS.BREAD_OVEN] = 1;
var AUDIO = {
        DIG: {
            sound: null,
            path: ["audio/ambience.mp3"],
            sprite: {
                d0: [90086, 300, !1],
                d1: [90391, 300, !1],
                d2: [90684, 300, !1]
            },
            sample: {
                d0: CONST_AUDIO.PLAYERS,
                d1: CONST_AUDIO.PLAYERS,
                d2: CONST_AUDIO.PLAYERS
            }
        },
        PUNCH: {
            sound: null,
            path: ["audio/ambience.mp3"],
            sprite: {
                p0: [89303, 300, !1],
                p1: [89549, 300, !1],
                p2: [89815, 300, !1]
            },
            sample: {
                p0: CONST_AUDIO.PLAYERS,
                p1: CONST_AUDIO.PLAYERS,
                p2: CONST_AUDIO.PLAYERS
            }
        },
        WEAPON: {
            sound: null,
            path: ["audio/ambience.mp3"],
            sprite: {
                w0: [88195, 300, !1],
                w1: [88473, 300, !1],
                w2: [88751, 300, !1],
                w3: [89025, 300, !1]
            },
            sample: {
                w0: CONST_AUDIO.PLAYERS,
                w1: CONST_AUDIO.PLAYERS,
                w2: CONST_AUDIO.PLAYERS,
                w3: CONST_AUDIO.PLAYERS
            }
        },
        AMBIENCE: {
            sound: null,
            path: ["audio/ambience.mp3"],
            sprite: {
                cook: [100, 2800, !0],
                seaday: [3100, 8800, !0],
                seanight: [19882, 8301, !0],
                forestday: [32604, 21890, !0],
                forestnight: [54524, 11393, !0],
                snowday: [66961, 21223, !0],
                snownight: [66961, 21223, !0],
                fire: [12356, 6965, !0],
                swim: [28380, 1797, !0],
                sand: [30562, 655, !0],
                walk: [31658, 813, !0],
                snow: [66014, 925, !0],
                hwood: [91022, 400, !1],
                hand: [91431, 400, !1],
                hstone: [92249, 500, !1]
            },
            sample: {
                cook: 1,
                seaday: 1,
                seanight: 1,
                forestday: 1,
                forestnight: 1,
                snowday: 1,
                snownight: 1,
                fire: CONST_AUDIO.PLAYERS,
                swim: CONST_AUDIO.PLAYERS,
                sand: CONST_AUDIO.PLAYERS,
                walk: CONST_AUDIO.PLAYERS,
                snow: CONST_AUDIO.PLAYERS,
                hwood: CONST_AUDIO.ITEMS,
                hand: CONST_AUDIO.ITEMS,
                hstone: CONST_AUDIO.ITEMS
            }
        }
    },
    SoundArea = function(e, t, i, r, a, n, o, s, _, T, E) {
        this.r = 1, this.delay = e, this.max_delay = e, this.night = t, this.day = i, this.fade = r, this.r_base = a, this.r_seed = n, this.player = o, this.transition_delay = s, this.source = _, this.source.lx = _.x + _.w, this.source.by = _.y + _.h, this.outside_box = T, this.inside_box = E, this.inside = 0, this.hackish = {
            d: 5,
            m: 5
        }, this.effect = function() {
            if (this.delay -= delta, this.delay < 0) {
                this.delay = this.max_delay;
                var e = AUDIO.AMBIENCE.sound.playing(this.night),
                    t = AUDIO.AMBIENCE.sound.playing(this.day);
                if (e && !t) {
                    var i = this.player.volume(this.night) * VOLUME.AMB,
                        r = (Math.random() * this.r_seed + this.r_base) * VOLUME.AMB;
                    this.player.fade(i, r, this.fade, this.night)
                } else if (!e && t) {
                    i = this.player.volume(this.day) * VOLUME.AMB, r = (Math.random() * this.r_seed + this.r_base) * VOLUME.AMB;
                    this.player.fade(i, r, this.fade, this.day)
                }
            }
        }, this.transition = function() {
            if (this.delay = this.max_delay, this.hackish.d = this.hackish.m, world.time) {
                if (this.player.fade(0, this.r_base * VOLUME.AMB, this.transition_delay, this.night), this.player.play(this.night), this.player.playing(this.day)) {
                    var e = this.player.volume(this.day) * VOLUME.AMB;
                    this.player.fade(e, 0, this.transition_delay, this.day)
                }
            } else if (this.player.fade(0, this.r_base * VOLUME.AMB, this.transition_delay, this.day), this.player.play(this.day), this.player.playing(this.night)) {
                e = this.player.volume(this.night) * VOLUME.AMB;
                this.player.fade(e, 0, this.transition_delay, this.night)
            }
        }, this.check = function(e) {
            if (this.inside)
                if (Utils.inside_box(e, this.outside_box)) !audio.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT && (world.time ? this.player.playing(this.night) || (this.hackish.d -= delta, this.hackish.d < 0 && this.transition()) : this.player.playing(this.day) || (this.hackish.d -= delta, this.hackish.d < 0 && this.transition()));
                else {
                    if (this.inside = 0, this.player.playing(this.night)) {
                        var t = this.player.volume(this.night) * VOLUME.AMB;
                        this.player.fade(t, 0, this.transition_delay, this.night)
                    }
                    if (this.player.playing(this.day)) {
                        t = this.player.volume(this.day) * VOLUME.AMB;
                        this.player.fade(t, 0, this.transition_delay, this.day)
                    }
                }
            else Utils.inside_box(e, this.inside_box) && (this.inside = 1, !audio.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT && this.transition())
        }, this.update = function(e, t) {
            var i, r;
            i = e.x < this.source.x ? audio.get_x(this.source.x) : e.x > this.source.lx ? audio.get_x(this.source.lx) : t.x, r = e.y < this.source.y ? audio.get_y(this.source.y) : e.y > this.source.by ? audio.get_y(this.source.by) : t.y, this.player.pos(i, r, -.5, this.night), this.player.pos(i, r, -.5, this.day)
        }
    };
SOUND_PLAYER = {
    DELAY_SWIM: .4,
    DELAY_SAND: .2,
    DELAY_WALK: .2,
    DELAY_SNOW: .2,
    FADE_SWIM: 300,
    FADE_SAND: 100,
    FADE_WALK: 100,
    FADE_SNOW: 100,
    WALK: 0,
    SWIM: 1,
    SAND: 2,
    SNOW: 3,
    FACTOR: 4,
    FACTOR2: 2
};
var SoundPlayerEffect = function(e, t, i) {
        this.mom = e, this.c = 0, this.player = t, this.ids = i, this.max = i.length, this.play = function() {
            this.c = (this.c + 1) % this.max;
            var e = this.ids[this.c];
            this.mom.update_pos(this.player, e), this.player.play(e)
        }
    },
    SoundPlayer = function(e) {
        this.free = 1, this.uid = 0, this.mode = -1, this.swim = audio.sample.swim[e], this.sand = audio.sample.sand[e], this.walk = audio.sample.walk[e], this.snow = audio.sample.snow[e], this.punch = new SoundPlayerEffect(this, AUDIO.PUNCH.sound, audio.samples.punch[e]), this.weapon = new SoundPlayerEffect(this, AUDIO.WEAPON.sound, audio.samples.weapon[e]), this.dig = new SoundPlayerEffect(this, AUDIO.DIG.sound, audio.samples.dig[e]), this.sid = e, this.x = 0, this.y = 0, this.move = 0, this.delay = SOUND_PLAYER.DELAY, this.pos = {
            x: 0,
            y: 0
        }, this.ambience = AUDIO.AMBIENCE.sound, this.swing = function(e) {
            e === CONST_AUDIO.HAND ? this.punch.play() : e === CONST_AUDIO.MISC ? this.weapon.play() : e === CONST_AUDIO.SHOVEL && this.dig.play()
        }, this.detect_position = function(e) {
            return e.dist_sand > 0 ? SOUND_PLAYER.SAND : e.dist_water > 0 ? SOUND_PLAYER.SWIM : e.dist_winter > 0 || e.dist_lava > 0 ? SOUND_PLAYER.SNOW : SOUND_PLAYER.WALK
        }, this.init = function(e) {
            this.free = 0, this.uid = e;
            var t = world.fast_units[e];
            t.sid = this.sid, this.mode = this.detect_position(t), this.pos.x = t.x, this.pos.y = t.y
        }, this.clean = function() {
            this.free = 1, this.mode = -1, this.ambience.stop(this.swim), this.ambience.stop(this.sand), this.ambience.stop(this.walk), this.ambience.stop(this.snow)
        }, this.fade = function(e, t) {
            var i = this.ambience.volume(e) * VOLUME.FX;
            this.ambience.fade(i, 0, t, e)
        }, this.update_pos = function(e, t) {
            this.move && this.sid && e.pos(this.x, this.y, -.5, t)
        }, this.effect = function(e, t, i, r, a, n, o) {
            if (this.delay = n, r && this.mode === a) {
                var s = this.ambience.volume(e) * VOLUME.FX;
                if (this.move) {
                    var _ = (Math.random() * i + t) * VOLUME.FX;
                    this.ambience.fade(s, _, o, e)
                } else this.ambience.fade(s, 0, o, e)
            } else if (this.mode != a && this.move) this.ambience.fade(0, (t + i) * VOLUME.FX, o, e);
            else if (this.move) {
                s = this.ambience.volume(e) * VOLUME.FX, _ = (Math.random() * i + t) * VOLUME.FX;
                this.ambience.fade(s, _, o, e)
            }
            this.update_pos(this.ambience, e), this.ambience.play(e)
        }, this.update = function() {
            var e = world.fast_units[this.uid];
            if (this.delay -= delta, !(this.delay > 0)) {
                var t = 0;
                e.x != this.pos.x || e.y != this.pos.y ? (this.move || (t = 1, this.move = 1), this.x = audio.get_x_ext(e.x, SOUND_PLAYER.FACTOR2), this.y = audio.get_y_ext(e.y, SOUND_PLAYER.FACTOR2)) : this.move && (t = 1, this.move = 0), this.pos.x = e.x, this.pos.y = e.y, mode = this.detect_position(e), mode != this.mode && (this.mode === SOUND_PLAYER.SWIM ? this.fade(this.swim, SOUND_PLAYER.FADE_SWIM) : this.mode === SOUND_PLAYER.SAND ? this.fade(this.sand, SOUND_PLAYER.FADE_SAND) : this.mode === SOUND_PLAYER.WALK ? this.fade(this.walk, SOUND_PLAYER.FADE_WALK) : this.mode === SOUND_PLAYER.SNOW && this.fade(this.snow, SOUND_PLAYER.FADE_SNOW)), mode === SOUND_PLAYER.SWIM ? this.effect(this.swim, .08, .3, t, mode, SOUND_PLAYER.DELAY_SWIM, SOUND_PLAYER.FADE_SWIM) : mode === SOUND_PLAYER.SAND ? this.effect(this.sand, .2, .3, t, mode, SOUND_PLAYER.DELAY_SAND, SOUND_PLAYER.FADE_SAND) : mode === SOUND_PLAYER.WALK ? this.effect(this.walk, .3, .6, t, mode, SOUND_PLAYER.DELAY_WALK, SOUND_PLAYER.FADE_WALK) : mode === SOUND_PLAYER.SNOW && this.effect(this.snow, .1, .25, t, mode, SOUND_PLAYER.DELAY_SNOW, SOUND_PLAYER.FADE_SNOW), this.mode = mode
            }
        }, this.check = function() {
            var e = world.fast_units[this.uid];
            return !!e || (this.clean(e), !1)
        }
    },
    MyAudio = function() {
        this.run = 0, this.loaded = 0, this.transition = 0, this.get_x = function(e) {
            return e / world.w * 100
        }, this.get_y = function(e) {
            return e / world.h * 100
        }, this.get_x_ext = function(e, t) {
            return e = this.get_x(e) - this.ltr.x, this.ltr.x + t * e
        }, this.get_y_ext = function(e, t) {
            return e = Math.abs(this.get_y(e) - this.ltr.y), this.ltr.y + t * e
        }, this.sample = {}, this.samples = {}, this.player = {}, this.play_sample = function(e, t, i, r) {
            for (var a = 0; a < t.length; a++) {
                var n = t[a];
                if (!e.playing(n)) return e.pos(i, r, -.5, n), e.play(n), !0
            }
            return !1
        }, this.hit = function(e, t, i, r) {
            i = this.get_x_ext(i, SOUND_PLAYER.FACTOR), r = this.get_y_ext(r, SOUND_PLAYER.FACTOR), e ? 1 === t ? this.play_sample(this.player.hstone, this.sample.hstone, i, r) : 0 === t && this.play_sample(this.player.hwood, this.sample.hwood, i, r) : this.play_sample(this.player.hand, this.sample.hand, i, r)
        }, this.ltr = {
            x: 0,
            y: 0
        }, this.oldp = {
            x: 0,
            y: 0
        }, this.area = {}, this.players = [], this.ambience = function(e, t) {
            for (var i in this.area) {
                var r = this.area[i];
                r.check(e), r.inside && (world.clock.now < CONST_AUDIO.DISABLE_EFFECT && r.effect(), t && r.update(e, this.ltr), this.transition && r.transition())
            }
            this.transition && (this.transition = 0)
        }, this.hook_players = function() {
            for (var e = [], t = 0; t < this.players.length; t++) {
                (a = this.players[t]).free ? e.push(t) : a.free || world.fast_units[a.uid] || (a.clean(), e.push(t))
            }
            for (var i = world.units[ITEMS.PLAYERS], r = (t = 0, 0); t < i.length && r < e.length; t++) {
                var a = i[t];
                world.mode == WORLD.MODE_HUNGER_GAMES && "spectator" === world.players[a.id].nickname || -1 !== a.sid || a.uid === user.uid || (this.players[e[r]].init(a.uid), r++)
            }
        }, this.players_effect = function() {
            this.hook_players();
            for (var e = 0; e < this.players.length; e++) {
                var t = this.players[e];
                !t.free && t.check() && t.update()
            }
        }, this.update_listener = function(e) {
            return this.oldp.x === e.x && this.oldp.y === e.y ? 0 : (this.oldp.x = e.x, this.oldp.y = e.y, this.ltr.x = this.get_x(e.x), this.ltr.y = this.get_y(e.y), Howler.pos(this.ltr.x, this.ltr.y, 0), 1)
        }, this.scheduler = function() {
            if (this.run && this.loaded) {
                var e = world.fast_units[user.uid];
                if (e) {
                    e.sid = 0;
                    var t = this.update_listener(e);
                    world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR && this.ambience(e, t), this.players_effect()
                }
            }
        }, this.load_sound = function() {
            for (var e in AUDIO) {
                var t = AUDIO[e];
                for (var i in "object" == typeof t && t.path && (t.sound = new Howl({
                        src: t.path,
                        volume: 0,
                        sprite: t.sprite
                    })), t.sample) {
                    for (var r = t.sample[i], a = [], n = 0; n < r; n++) {
                        var o = t.sound.play(i);
                        t.sound.stop(o), t.sound.on("fade", (function(e) {
                            this.volume(e) || (console.log(e, "OUT"), this.stop(e))
                        }), o), a.push(o)
                    }
                    a.length > 1 ? audio.sample[i] = a : audio.sample[i] = a[0], audio.player[i] = t.sound
                }
            }
        }, this.volume_sample = function(e, t, i) {
            for (var r = 0; r < e.length; r++) t.volume(i, e[r])
        }, this.organize_samples = function(e, t, i, r, a, n) {
            for (var o = e, s = 0; s < i; s++) {
                var _ = o[s] = [];
                for (j = 0; j < r; j++) _[j] = audio.sample[a + j][s], t.sound.volume(n, _[j])
            }
        }, this.init = function() {
            audio.load_sound(), audio.samples.punch = [], audio.samples.weapon = [], audio.samples.dig = [], audio.organize_samples(audio.samples.punch, AUDIO.PUNCH, CONST_AUDIO.PLAYERS, 3, "p", .15), audio.organize_samples(audio.samples.weapon, AUDIO.WEAPON, CONST_AUDIO.PLAYERS, 4, "w", .15), audio.organize_samples(audio.samples.dig, AUDIO.DIG, CONST_AUDIO.PLAYERS, 3, "d", .09), audio.volume_sample(audio.sample.hand, audio.player.hand, .15), audio.volume_sample(audio.sample.hwood, audio.player.hwood, .2), audio.volume_sample(audio.sample.hstone, audio.player.hstone, 1), audio.area.sea = new SoundArea(CONST_AUDIO.SEA_DELAY, this.sample.seanight, this.sample.seaday, CONST_AUDIO.SEA_FADE, .05, .4, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {
                x: SPRITE.SEE_BIOME_X,
                y: SPRITE.WINTER_BIOME_Y,
                w: world.w,
                h: world.h
            }, {
                x: SPRITE.SEE_BIOME_X - 2300,
                y: SPRITE.WINTER_BIOME_Y - 4e3,
                w: world.w,
                h: world.h
            }, {
                x: SPRITE.SEE_BIOME_X - 1500,
                y: SPRITE.WINTER_BIOME_Y - 2e3,
                w: world.w,
                h: world.h
            }), audio.area.forest = new SoundArea(CONST_AUDIO.FOREST_DELAY, this.sample.forestnight, this.sample.forestday, CONST_AUDIO.FOREST_FADE, .03, .25, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {
                x: 0,
                y: SPRITE.WINTER_BIOME_Y + 800,
                w: SPRITE.SEE_BIOME_X - 2300,
                h: world.h
            }, {
                x: -100,
                y: SPRITE.WINTER_BIOME_Y - 300,
                w: SPRITE.SEE_BIOME_X - 100,
                h: world.h
            }, {
                x: -100,
                y: SPRITE.WINTER_BIOME_Y + 400,
                w: SPRITE.SEE_BIOME_X - 1400,
                h: world.h
            }), audio.area.snow = new SoundArea(CONST_AUDIO.FOREST_DELAY, this.sample.snownight, this.sample.snowday, CONST_AUDIO.SNOW_FADE, .01, .22, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {
                x: -100,
                y: -100,
                w: world.w + 200,
                h: SPRITE.WINTER_BIOME_Y - 1e3
            }, {
                x: -100,
                y: -100,
                w: world.w + 200,
                h: SPRITE.WINTER_BIOME_Y + 600
            }, {
                x: -100,
                y: -100,
                w: world.w + 200,
                h: SPRITE.WINTER_BIOME_Y + 100
            });
            for (var e = 0; e < CONST_AUDIO.PLAYERS; e++) audio.players[e] = new SoundPlayer(e);
            audio.players[0].init(user.uid), audio.loaded = 1
        }, this.launch = function() {
            !this.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT && (this.transition = 1)
        }, this.quit = function() {
            if (this.run && this.loaded) {
                for (var e in audio.sample) {
                    var t = audio.sample[e];
                    if ("object" == typeof t)
                        for (var i = 0; i < t.length; i++) audio.player[e].stop(t[i]);
                    else audio.player[e].stop(t)
                }
                for (i = 0; i < audio.players.length; i++) audio.players[i].clean()
            }
        }, this.select = function() {
            audio.run ? audio.quit() : (audio.loaded || audio.init(), audio.players[0].uid = user.uid, audio.players[0].free = 0, audio.launch()), audio.run = !audio.run
        }
    };
mobile = 0, document.getElementById("version").innerHTML = CLIENT.VERSION_NUMBER + ".3";
var ui, MAP = [],
    fake_world = {
        time: Math.floor(2 * Math.random()),
        items: []
    };
init_fake_world(), client = new NetworkClient;
var world, user, scoreboard, game = {
        is_run: !1
    },
    audio = new MyAudio,
    keyboard = new Keyboard,
    mouse = new Mouse,
    delta = 0,
    old_timestamp = 0,
    fps = {
        img: !1,
        counter: 0,
        delay: 0,
        cycle: 60,
        display: !0
    },
    loader = new Loader(can, ctx, (function() {
        create_images(), game = new Game(can, ctx), (ui = new UI(can, ctx)).login_after(), scoreboard = new Scoreboard(can, ctx), world = new World, user = new User, loader.quit((function() {
            loader.logo.style.display = "none", ui.run()
        }))
    }));

function draw(e) {
    if (window.requestAnimationFrame(draw), delta = (e - old_timestamp) / 1e3, old_timestamp = e, delta = delta > 1 ? 1 : delta, game.is_run) {
        if (game.draw(), HackSettings.FPS.enabled && GetFPS(), HackSettings.ListEnabledHacks.enabled) {
            ctx.save();
            let e = 15;
            for (hack in HackSettings) HackSettings[hack].draw && HackSettings[hack].enabled && (ctx.font = "18px Baloo Paaji", ctx.strokeStyle = "black", ctx.lineWidth = 7, ctx.fillStyle = "red", ctx.strokeText(hack, 0, e), ctx.fillText(hack, 0, e), e += 20);
            Spectator && (ctx.font = "18px Baloo Paaji", ctx.strokeStyle = "black", ctx.lineWidth = 7, ctx.fillStyle = "red", ctx.strokeText("Spectator", 0, e), ctx.fillText("Spectator", 0, e))
        }
        Spectator && (keyboard.is_bottom() && (user.cam.y -= 50, user.cam.ex -= 50), keyboard.is_top() && (user.cam.y += 50, user.cam.ex += 50), keyboard.is_right() && (user.cam.x -= 50, user.cam.ey -= 50), keyboard.is_left() && (user.cam.x += 50, user.cam.ey += 50))
    } else ctx.clearRect(0, 0, canw, canh), loader.is_run ? loader.draw() : ui.is_run ? ui.draw() : scoreboard.is_run && scoreboard.draw()
}

function refreshAds() {
    window.YMPB.refresh()
}

function yollaCallback() {
    document.getElementById("preroll").style.display = "none", client.connect()
}
window.onbeforeunload = function() {
    if (game.is_run) return "Are you sure you want quit starve.io ;-; ?"
}, resize_canvas(), draw(0), window.YMPB ? isYolla = 1 : (window.YMPB = window.YMPB || {}, isYolla = 0), window.YMPB.que = window.YMPB.que || [], window.aiptag = window.aiptag || {}, window.aiptag.consented = !0, window.aiptag.cmd = window.aiptag.cmd || [], window.aiptag.cmd.display = window.aiptag.cmd.display || [], window.aiptag.cmd.player = window.aiptag.cmd.player || [];
var fun = function() {
    adplayer = new aipPlayer({
        AD_WIDTH: 960,
        AD_HEIGHT: 540,
        AD_FULLSCREEN: !0,
        AD_CENTERPLAYER: !0,
        LOADING_TEXT: "loading advertisement",
        PREROLL_ELEM: function() {
            return document.getElementById("preroll")
        },
        AIP_COMPLETE: function() {
            client.connect()
        },
        AIP_REMOVE: function() {}
    })
};
window.aiptag.cmd.player.push(fun);
var ___adsvid = 0;

function check_ads() {
    xhttp.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", !0), xhttp.send()
}
var xhttp = new XMLHttpRequest;
xhttp.onreadystatechange = function() {
    4 === this.readyState && this.status
};
var DB = "https://token.starve.io/";
if (environment === environments.DEV) DB = "http://localhost:3002/";
var __GOOGLE_LOGIN__ = 0,
    __FACEBOOK_LOGIN__ = 1,
    userLoginType = void 0,
    userToken = void 0,
    userId = void 0,
    userData = void 0,
    userAlreadyLoggedIn = 0;

function loginWithGoogle() {
    window.gapi.auth2.getAuthInstance().signIn()
}
window.onUserLogin = function() {
    userAlreadyLoggedIn = 1
};
var ip = void 0,
    xsolla_options = {
        access_token: "ACCESS_TOKEN"
    },
    s = document.createElement("script");
s.type = "text/javascript", s.async = !0, s.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js", s.addEventListener("load", (function(e) {
    window.XPayStationWidget.init(xsolla_options), window.XPayStationWidget.on("status-done", claimBread)
}), !1);
var head = document.getElementsByTagName("head")[0];

function logWithFacebook() {
    window.FB.login((function(e) {
        e.authResponse && window.FB.api("/me", (function(e) {
            userLoginType = __FACEBOOK_LOGIN__, userToken = window.FB.getAuthResponse().accessToken, login(), window.onUserLogin(userId)
        }))
    }))
}
head.appendChild(s), window.fbAsyncInit = function() {
        login()
    },
    function(e, t, i) {
        var r, a = e.getElementsByTagName(t)[0];
        e.getElementById(i) || ((r = e.createElement(t)).id = i, r.src = "https://connect.facebook.net/en_US/sdk.js", a.parentNode.insertBefore(r, a))
    }(document, "script", "facebook-jssdk");
var auth2 = void 0,
    googleUser = void 0,
    appStart = function() {
        window.gapi.load("auth2", initSigninV2)
    },
    initSigninV2 = function() {
        window.gapi.auth2.init({
            client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
            scope: "https://www.googleapis.com/auth/userinfo.profile"
        }).then((e => {
            (auth2 = e).isSignedIn.listen(signinChanged), auth2.currentUser.listen(userChanged);
            auth2.isSignedIn.get() && auth2.signIn(), refreshValues()
        }))
    },
    signinChanged = function(e) {},
    userChanged = function(e) {
        login(), void 0 === userToken && void 0 !== googleUser && void 0 !== (userToken = googleUser.getAuthResponse().id_token) && (userLoginType = __GOOGLE_LOGIN__, window.onUserLogin(userId)), void 0 !== e && !0 === e.isSignedIn() && (googleUser = e, window.onUserLogin(e.id))
    },
    refreshValues = function() {
        auth2 && (googleUser = auth2.currentUser.get())
    };

function logout() {
    userLoginType === __FACEBOOK_LOGIN__ && window.FB.getUserID() && window.FB.logout(), userLoginType === __GOOGLE_LOGIN__ && void 0 !== googleUser && (window.gapi.auth2.getAuthInstance().signOut(), googleUser = void 0), userId = void 0, userToken = void 0, userLoginType = void 0, ui.kit = 0, ui.bread = 0, ui.score = 0, ui.unlock_cosmetics(), onUserLogout()
}

function login() {
    window.FB.init({
        appId: "642017356260407",
        cookie: !0,
        xfbml: !0,
        version: "v15.0"
    }), void 0 === userId && getUserId()
}

function AutoFeed() {
    1 === client.socket.readyState && HackSettings.AutoRespawn && ui.play_game()
}

function ToCheck() {
    if (!client.socket || 1 !== client.socket.readyState) return;
    let e = world.fast_units[user.uid];
    if (e) {
        if (HackSettings.AutoSpike.enabled) {
            for (let e = 0, r = HackSettings.AutoSpike.preferences; e < r.length; e++) {
                var t = r[e];
                switch (t) {
                    case "Reidite Spike":
                        t = 213;
                        break;
                    case "Amethyst Spike":
                        t = 117;
                        break;
                    case "Diamond Spike":
                        t = 164;
                        break;
                    case "Gold Spike":
                        t = 163;
                        break;
                    case "Stone Spike":
                        t = 162;
                        break;
                    case "Wood Spike":
                        t = 154;
                        break;
                    case "Wood Wall":
                        t = 156;
                        break;
                    case "Nothing":
                        t = -1
                }
                if (-1 !== t && user.inv.n[t]) {
                    var i = t;
                    break
                }
            }
            if (i) {
                let t = 2 * Math.PI,
                    r = Math.floor((e.angle + t) % t * 255 / t);
                if (HackSettings.AutoSpike.mode || client.socket.send(JSON.stringify([10, i, r, 0])), HackSettings.AutoSpike.mode)
                    for (let e = 0; e < 25; e++) client.socket.send(JSON.stringify([10, i, (e + r) % 255, 0])), client.socket.send(JSON.stringify([10, i, (r - e + 255) % 255, 0])), client.socket.send(JSON.stringify([10, i, r, 0]))
            }
        }
        if (HackSettings.AutoBridge.enabled) {
            let t = 2 * Math.PI,
                i = Math.floor((e.angle + t) % t * 255 / t);
            client.socket.send(JSON.stringify([10, 119, i, 1]))
        }
        if (HackSettings.SwordInChest.enabled && (1 == HelperFns.isPlayerHoldingWeapon(e, !1) || 2 == HelperFns.isPlayerHoldingWeapon(e, !1))) {
            let t = 2 * Math.PI,
                i = Math.floor((e.angle + t) % t * 255 / t);
            client.socket.send(JSON.stringify([10, i, 35, 0]))
        }
        HackSettings.AutoCraft.enabled && !user.craft.crafting && client.socket.send(JSON.stringify([7, lastCrafted])), HackSettings.AutoRecycle.enabled && !user.craft.crafting && client.socket.send(JSON.stringify([29, lastRecycled])), !user.bandage && HackSettings.AutoBand.enabled && user.inv.n[INV.BANDAGE] && client.socket.send(JSON.stringify([5, INV.BANDAGE]))
    }
}

function getUserId() {
    try {
        window.FB && window.FB.getUserID() && (userId = window.FB.getUserID(), void 0 === userToken && window.FB.getLoginStatus((function() {
            userLoginType = __FACEBOOK_LOGIN__, userToken = window.FB.getAuthResponse().accessToken, window.onUserLogin(userId)
        })))
    } catch (e) {}
    try {
        userId = googleUser.getBasicProfile().getId()
    } catch (e) {}
}

function openXsolla(e) {
    if (userId) {
        var t = new XMLHttpRequest;
        t.open("GET", DB + "xsolla?userid=" + userId + "&item=" + e), t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), t.onreadystatechange = function() {
            4 == this.readyState && 200 == this.status && "0" !== t.responseText && (xsolla_options.access_token = t.responseText, window.XPayStationWidget.init(xsolla_options), window.XPayStationWidget.open())
        }, t.send()
    }
}

function getUserDetails(e) {
    var t = new XMLHttpRequest;
    t.open("GET", DB + "login?token=" + userToken + "&type=" + userLoginType), t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), t.onreadystatechange = function() {
        4 === this.readyState && 200 === this.status && "0" !== t.responseText && e(JSON.parse(t.responseText))
    }, t.send()
}

function rebootServer() {
    var e = new XMLHttpRequest;
    e.open("GET", DB + "rebootServer?token=" + userToken + "&userid=" + userId), e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), e.onreadystatechange = function() {
        4 === this.readyState && 200 === this.status && "0" !== e.responseText && (location.href = document.getElementById("serverAddressInput").value)
    }, e.send()
}

function regionPreference(e) {
    var t = new XMLHttpRequest;
    t.open("GET", DB + "setRegion?token=" + userToken + "&userid=" + userId + "&region=" + e), t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), t.onreadystatechange = function() {
        4 === this.readyState && 200 === this.status && ("0" !== t.responseText ? ui.select_subview(ui.__SERVER_DURATION__) : ui.select_subview(ui.__GAME__))
    }, t.send()
}

function buySpin(e, t) {
    if (!(ui.spin > 0))
        if (ui.bread < t) ui.select_subview(ui.__BUY__);
        else {
            ui.spin = 2, ui.spin_effect = 0, ui.spin_target = 100;
            var i = new XMLHttpRequest;
            i.open("GET", DB + "buySpin?token=" + userToken + "&userid=" + userId + "&spin=" + e), i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), i.onreadystatechange = function() {
                if (4 == this.readyState && 200 == this.status)
                    if ("0" !== i.responseText) {
                        var e = JSON.parse(i.responseText);
                        ui.play_spin(e.rand * Math.PI * 2, e.type, e.id), ui.bread -= t
                    } else ui.spin = 0
            }, i.send()
        }
}

function buyNameChanger() {
    if (!(ui.bread < 300 && ui.firstName > 0)) {
        var e = document.getElementById("account_nickname_input").value.trim();
        if (document.getElementById("account_nickname_input").value = e, !(e.length < 1 || e.length > 20)) {
            var t = new XMLHttpRequest;
            t.open("GET", DB + "changeNickname?token=" + userToken + "&userid=" + userId + "&nickname=" + encodeURIComponent(e)), t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), t.onreadystatechange = function() {
                if (4 == this.readyState && 200 == this.status && "0" !== t.responseText) {
                    var e = Number(t.responseText);
                    e > 0 && (ui.bread -= e), ui.firstName = 1, ui.select_subview(ui.__PROFILE__)
                }
            }, t.send()
        }
    }
}

function buyKit(e, t) {
    if (ui.bread < t) ui.select_subview(ui.__BUY__);
    else {
        var i = new XMLHttpRequest;
        i.open("GET", DB + "buyKit?token=" + userToken + "&userid=" + userId + "&kit=" + e), i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), i.onreadystatechange = function() {
            if (4 == this.readyState && 200 == this.status && "0" !== i.responseText) {
                var e = JSON.parse(i.responseText);
                ui.bread -= t, ui.kit = Date.now() + Number(e)
            }
        }, i.send()
    }
}

function claimBread() {
    var e = new XMLHttpRequest;
    e.open("GET", DB + "claimBread?userid=" + userId), e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), e.onreadystatechange = function() {
        if (4 == this.readyState && 200 == this.status && "0" !== e.responseText) {
            var t = Number(e.responseText);
            isNaN(t) || (ui.bread = t)
        }
    }, e.send()
}

function getBreadAndScore() {
    var e = new XMLHttpRequest;
    e.open("GET", DB + "getBreadAndScore?userid=" + userId), e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), e.onreadystatechange = function() {
        if (4 == this.readyState && 200 == this.status && "0" !== e.responseText) {
            var t = JSON.parse(e.responseText),
                i = t.b - ui.bread;
            ui.bread = t.b, ui.score = t.s, ui.lvl = ui.level_formula(ui.score), ui.xp_dest = ui.xp_formula(ui.score), ui.xp = 0, document.getElementById("breadWonInner").innerHTML = "" + i
        }
    }, e.send()
}

function sendCheat() {
    xhr.open("GET", DB + "getScore?userid=" + userId), xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), xhr.onreadystatechange = function() {
        if (4 == this.readyState && 200 == this.status && "0" !== xhr.responseText) JSON.parse(xhr.responseText)
    }, xhr.send()
}

function getLeaderboard(e, t, i, r) {
    if (e = void 0 === e ? ui.leaderboard_range : e, t = void 0 === t ? ui.leaderboard_mode : t, i = void 0 === i ? ui.leaderboard_sorted : i, r = void 0 === r ? ui.leaderboard_season : r, e !== ui.leaderboard_range || t !== ui.leaderboard_mode || i !== ui.leaderboard_sorted || r !== ui.leaderboard_season) {
        ui.leaderboard_range = e, ui.leaderboard_mode = t, ui.leaderboard_sorted = i, ui.leaderboard_season = r, ui.LEADERBOARD_SEASON1 === r ? r = "0" : ui.LEADERBOARD_SEASON2 === r ? r = "1" : ui.LEADERBOARD_SEASON3 === r ? r = "2" : ui.LEADERBOARD_SEASON4 === r && (r = "3"), ui.LEADERBOARD_TOTAL === t ? t = "total" : ui.LEADERBOARD_NORMAL === t ? t = "normal" : ui.LEADERBOARD_ZOMBIE === t ? t = "zombie" : ui.LEADERBOARD_VAMPIRE === t ? t = "vampire" : ui.LEADERBOARD_FOREST === t && (t = "forest"), ui.LEADERBOARD_ALL === e && (e = "all"), ui.LEADERBOARD_WEEK === e && (e = "week"), ui.LEADERBOARD_TODAY === e && (e = "today"), ui.LEADERBOARD_KILL === i ? i = "kill" : ui.LEADERBOARD_SCORE === i ? i = "score" : ui.LEADERBOARD_TIME === i && (i = "time");
        var a = new XMLHttpRequest;
        a.open("GET", DB + "leaderboard?range=" + e + "&mode=" + t + "&sort=" + i + "&season=" + r), a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), a.onreadystatechange = function() {
            if (4 == this.readyState && 200 == this.status && "0" !== a.responseText) {
                for (var e = JSON.parse(a.responseText), t = "", i = 0; i < e.length; i++) {
                    line = e[i];
                    var r = line[1]; - 1 === r.indexOf("Starver#") && (r = window.decodeURIComponent(window.escape(window.atob(r)))), t += '<div class="lineLeaderboard">', t += '<div class="rank">', t += i + 1 + "", t += "</div>", t += '<div class="name">', t += r, t += "</div>", t += '<div class="lvl">', t += ui.level_formula(line[6]) + 1 + "", t += "</div>", t += '<div class="kills">', t += line[5] + "", t += "</div>", t += '<div class="time">', t += line[4] + "", t += "</div>", t += '<div class="score">', t += line[3] + "", t += "</div>", t += "</div>"
                }
                document.getElementById("leaderboard").innerHTML = t
            }
        }, a.send()
    }
}
window.onload = function() {}, setTimeout((() => {
    cheatInterval = workerTimers.setInterval(ToCheck, 80)
}), 5e3), HelperFns.LoadHack(), console.clear();
